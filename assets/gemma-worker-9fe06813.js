(function(){"use strict";var vp=typeof document<"u"?document.currentScript:null;function Kp(re,m){return m.forEach(function(n){n&&typeof n!="string"&&!Array.isArray(n)&&Object.keys(n).forEach(function(_){if(_!=="default"&&!(_ in re)){var b=Object.getOwnPropertyDescriptor(n,_);Object.defineProperty(re,_,b.get?b:{enumerable:!0,get:function(){return n[_]}})}})}),Object.freeze(re)}const pu=new Map,un=[],Hp=(re,m,n)=>{if(m&&typeof m.init=="function"&&typeof m.createInferenceSessionHandler=="function"){const _=pu.get(re);if(_===void 0)pu.set(re,{backend:m,priority:n});else{if(_.priority>n)return;if(_.priority===n&&_.backend!==m)throw new Error(`cannot register backend "${re}" using priority ${n}`)}if(n>=0){const b=un.indexOf(re);b!==-1&&un.splice(b,1);for(let F=0;F<un.length;F++)if(pu.get(un[F]).priority<=n){un.splice(F,0,re);return}un.push(re)}return}throw new TypeError("not a valid backend")},qp=async re=>{const m=pu.get(re);if(!m)return"backend not found.";if(m.initialized)return m.backend;if(m.aborted)return m.error;{const n=!!m.initPromise;try{return n||(m.initPromise=m.backend.init(re)),await m.initPromise,m.initialized=!0,m.backend}catch(_){return n||(m.error=`${_}`,m.aborted=!0),m.error}finally{delete m.initPromise}}},Qp=async re=>{const m=re.executionProviders||[],n=m.map(f=>typeof f=="string"?f:f.name),_=n.length===0?un:n;let b;const F=[],q=new Set;for(const f of _){const I=await qp(f);typeof I=="string"?F.push({name:f,err:I}):(b||(b=I),b===I&&q.add(f))}if(!b)throw new Error(`no available backend found. ERR: ${F.map(f=>`[${f.name}] ${f.err}`).join(", ")}`);for(const{name:f,err:I}of F)n.includes(f)&&console.warn(`removing requested execution provider "${f}" from session options because it is not available: ${I}`);const S=m.filter(f=>q.has(typeof f=="string"?f:f.name));return[b,new Proxy(re,{get:(f,I)=>I==="executionProviders"?S:Reflect.get(f,I)})]},Xp="1.21.0";let Op="warning";const dr={wasm:{},webgl:{},webgpu:{},versions:{common:Xp},set logLevel(re){if(re!==void 0){if(typeof re!="string"||["verbose","info","warning","error","fatal"].indexOf(re)===-1)throw new Error(`Unsupported logging level: ${re}`);Op=re}},get logLevel(){return Op}};Object.defineProperty(dr,"logLevel",{enumerable:!0});const Jp=dr,Yp=(re,m)=>{const n=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);n.width=re.dims[3],n.height=re.dims[2];const _=n.getContext("2d");if(_!=null){let b,F;m?.tensorLayout!==void 0&&m.tensorLayout==="NHWC"?(b=re.dims[2],F=re.dims[3]):(b=re.dims[3],F=re.dims[2]);const q=m?.format!==void 0?m.format:"RGB",S=m?.norm;let f,I;S===void 0||S.mean===void 0?f=[255,255,255,255]:typeof S.mean=="number"?f=[S.mean,S.mean,S.mean,S.mean]:(f=[S.mean[0],S.mean[1],S.mean[2],0],S.mean[3]!==void 0&&(f[3]=S.mean[3])),S===void 0||S.bias===void 0?I=[0,0,0,0]:typeof S.bias=="number"?I=[S.bias,S.bias,S.bias,S.bias]:(I=[S.bias[0],S.bias[1],S.bias[2],0],S.bias[3]!==void 0&&(I[3]=S.bias[3]));const D=F*b;let y=0,h=D,V=D*2,O=-1;q==="RGBA"?(y=0,h=D,V=D*2,O=D*3):q==="RGB"?(y=0,h=D,V=D*2):q==="RBG"&&(y=0,V=D,h=D*2);for(let K=0;K<F;K++)for(let me=0;me<b;me++){const R=(re.data[y++]-I[0])*f[0],G=(re.data[h++]-I[1])*f[1],X=(re.data[V++]-I[2])*f[2],L=O===-1?255:(re.data[O++]-I[3])*f[3];_.fillStyle="rgba("+R+","+G+","+X+","+L+")",_.fillRect(me,K,1,1)}if("toDataURL"in n)return n.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},Zp=(re,m)=>{const n=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d");let _;if(n!=null){let b,F,q;m?.tensorLayout!==void 0&&m.tensorLayout==="NHWC"?(b=re.dims[2],F=re.dims[1],q=re.dims[3]):(b=re.dims[3],F=re.dims[2],q=re.dims[1]);const S=m!==void 0&&m.format!==void 0?m.format:"RGB",f=m?.norm;let I,D;f===void 0||f.mean===void 0?I=[255,255,255,255]:typeof f.mean=="number"?I=[f.mean,f.mean,f.mean,f.mean]:(I=[f.mean[0],f.mean[1],f.mean[2],255],f.mean[3]!==void 0&&(I[3]=f.mean[3])),f===void 0||f.bias===void 0?D=[0,0,0,0]:typeof f.bias=="number"?D=[f.bias,f.bias,f.bias,f.bias]:(D=[f.bias[0],f.bias[1],f.bias[2],0],f.bias[3]!==void 0&&(D[3]=f.bias[3]));const y=F*b;if(m!==void 0&&(m.format!==void 0&&q===4&&m.format!=="RGBA"||q===3&&m.format!=="RGB"&&m.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");const h=4;let V=0,O=1,K=2,me=3,R=0,G=y,X=y*2,L=-1;S==="RGBA"?(R=0,G=y,X=y*2,L=y*3):S==="RGB"?(R=0,G=y,X=y*2):S==="RBG"&&(R=0,X=y,G=y*2),_=n.createImageData(b,F);for(let $=0;$<F*b;V+=h,O+=h,K+=h,me+=h,$++)_.data[V]=(re.data[R++]-D[0])*I[0],_.data[O]=(re.data[G++]-D[1])*I[1],_.data[K]=(re.data[X++]-D[2])*I[2],_.data[me]=L===-1?255:(re.data[L++]-D[3])*I[3]}else throw new Error("Can not access image data");return _},xp=(re,m)=>{if(re===void 0)throw new Error("Image buffer must be defined");if(m.height===void 0||m.width===void 0)throw new Error("Image height and width must be defined");if(m.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");const{height:n,width:_}=m,b=m.norm??{mean:255,bias:0};let F,q;typeof b.mean=="number"?F=[b.mean,b.mean,b.mean,b.mean]:F=[b.mean[0],b.mean[1],b.mean[2],b.mean[3]??255],typeof b.bias=="number"?q=[b.bias,b.bias,b.bias,b.bias]:q=[b.bias[0],b.bias[1],b.bias[2],b.bias[3]??0];const S=m.format!==void 0?m.format:"RGBA",f=m.tensorFormat!==void 0&&m.tensorFormat!==void 0?m.tensorFormat:"RGB",I=n*_,D=f==="RGBA"?new Float32Array(I*4):new Float32Array(I*3);let y=4,h=0,V=1,O=2,K=3,me=0,R=I,G=I*2,X=-1;S==="RGB"&&(y=3,h=0,V=1,O=2,K=-1),f==="RGBA"?X=I*3:f==="RBG"?(me=0,G=I,R=I*2):f==="BGR"&&(G=0,R=I,me=I*2);for(let $=0;$<I;$++,h+=y,O+=y,V+=y,K+=y)D[me++]=(re[h]+q[0])/F[0],D[R++]=(re[V]+q[1])/F[1],D[G++]=(re[O]+q[2])/F[2],X!==-1&&K!==-1&&(D[X++]=(re[K]+q[3])/F[3]);return f==="RGBA"?new nr("float32",D,[1,4,n,_]):new nr("float32",D,[1,3,n,_])},eh=async(re,m)=>{const n=typeof HTMLImageElement<"u"&&re instanceof HTMLImageElement,_=typeof ImageData<"u"&&re instanceof ImageData,b=typeof ImageBitmap<"u"&&re instanceof ImageBitmap,F=typeof re=="string";let q,S=m??{};const f=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},I=D=>typeof HTMLCanvasElement<"u"&&D instanceof HTMLCanvasElement||D instanceof OffscreenCanvas?D.getContext("2d"):null;if(n){const D=f();D.width=re.width,D.height=re.height;const y=I(D);if(y!=null){let h=re.height,V=re.width;if(m!==void 0&&m.resizedHeight!==void 0&&m.resizedWidth!==void 0&&(h=m.resizedHeight,V=m.resizedWidth),m!==void 0){if(S=m,m.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");S.tensorFormat="RGBA",S.height=h,S.width=V}else S.tensorFormat="RGBA",S.height=h,S.width=V;y.drawImage(re,0,0),q=y.getImageData(0,0,V,h).data}else throw new Error("Can not access image data")}else if(_){let D,y;if(m!==void 0&&m.resizedWidth!==void 0&&m.resizedHeight!==void 0?(D=m.resizedHeight,y=m.resizedWidth):(D=re.height,y=re.width),m!==void 0&&(S=m),S.format="RGBA",S.height=D,S.width=y,m!==void 0){const h=f();h.width=y,h.height=D;const V=I(h);if(V!=null)V.putImageData(re,0,0),q=V.getImageData(0,0,y,D).data;else throw new Error("Can not access image data")}else q=re.data}else if(b){if(m===void 0)throw new Error("Please provide image config with format for Imagebitmap");const D=f();D.width=re.width,D.height=re.height;const y=I(D);if(y!=null){const h=re.height,V=re.width;return y.drawImage(re,0,0,V,h),q=y.getImageData(0,0,V,h).data,S.height=h,S.width=V,xp(q,S)}else throw new Error("Can not access image data")}else{if(F)return new Promise((D,y)=>{const h=f(),V=I(h);if(!re||!V)return y();const O=new Image;O.crossOrigin="Anonymous",O.src=re,O.onload=()=>{h.width=O.width,h.height=O.height,V.drawImage(O,0,0,h.width,h.height);const K=V.getImageData(0,0,h.width,h.height);S.height=h.height,S.width=h.width,D(xp(K.data,S))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(q!==void 0)return xp(q,S);throw new Error("Input data provided is not supported - aborted tensor creation")},th=(re,m)=>{const{width:n,height:_,download:b,dispose:F}=m,q=[1,_,n,4];return new nr({location:"texture",type:"float32",texture:re,dims:q,download:b,dispose:F})},sh=(re,m)=>{const{dataType:n,dims:_,download:b,dispose:F}=m;return new nr({location:"gpu-buffer",type:n??"float32",gpuBuffer:re,dims:_,download:b,dispose:F})},rh=(re,m)=>{const{dataType:n,dims:_,download:b,dispose:F}=m;return new nr({location:"ml-tensor",type:n??"float32",mlTensor:re,dims:_,download:b,dispose:F})},nh=(re,m,n)=>new nr({location:"cpu-pinned",type:re,data:m,dims:n??[m.length]}),Hn=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),hu=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]);let Lp=!1;const oh=()=>{if(!Lp){Lp=!0;const re=typeof BigInt64Array<"u"&&BigInt64Array.from,m=typeof BigUint64Array<"u"&&BigUint64Array.from,n=globalThis.Float16Array,_=typeof n<"u"&&n.from;re&&(Hn.set("int64",BigInt64Array),hu.set(BigInt64Array,"int64")),m&&(Hn.set("uint64",BigUint64Array),hu.set(BigUint64Array,"uint64")),_?(Hn.set("float16",n),hu.set(n,"float16")):Hn.set("float16",Uint16Array)}},ih=re=>{let m=1;for(let n=0;n<re.length;n++){const _=re[n];if(typeof _!="number"||!Number.isSafeInteger(_))throw new TypeError(`dims[${n}] must be an integer, got: ${_}`);if(_<0)throw new RangeError(`dims[${n}] must be a non-negative integer, got: ${_}`);m*=_}return m},ah=(re,m)=>{switch(re.location){case"cpu":return new nr(re.type,re.data,m);case"cpu-pinned":return new nr({location:"cpu-pinned",data:re.data,type:re.type,dims:m});case"texture":return new nr({location:"texture",texture:re.texture,type:re.type,dims:m});case"gpu-buffer":return new nr({location:"gpu-buffer",gpuBuffer:re.gpuBuffer,type:re.type,dims:m});case"ml-tensor":return new nr({location:"ml-tensor",mlTensor:re.mlTensor,type:re.type,dims:m});default:throw new Error(`tensorReshape: tensor location ${re.location} is not supported`)}};let nr=class{constructor(m,n,_){oh();let b,F;if(typeof m=="object"&&"location"in m)switch(this.dataLocation=m.location,b=m.type,F=m.dims,m.location){case"cpu-pinned":{const S=Hn.get(b);if(!S)throw new TypeError(`unsupported type "${b}" to create tensor from pinned buffer`);if(!(m.data instanceof S))throw new TypeError(`buffer should be of type ${S.name}`);this.cpuData=m.data;break}case"texture":{if(b!=="float32")throw new TypeError(`unsupported type "${b}" to create tensor from texture`);this.gpuTextureData=m.texture,this.downloader=m.download,this.disposer=m.dispose;break}case"gpu-buffer":{if(b!=="float32"&&b!=="float16"&&b!=="int32"&&b!=="int64"&&b!=="uint32"&&b!=="uint8"&&b!=="bool"&&b!=="uint4"&&b!=="int4")throw new TypeError(`unsupported type "${b}" to create tensor from gpu buffer`);this.gpuBufferData=m.gpuBuffer,this.downloader=m.download,this.disposer=m.dispose;break}case"ml-tensor":{if(b!=="float32"&&b!=="float16"&&b!=="int32"&&b!=="int64"&&b!=="uint32"&&b!=="uint64"&&b!=="int8"&&b!=="uint8"&&b!=="bool"&&b!=="uint4"&&b!=="int4")throw new TypeError(`unsupported type "${b}" to create tensor from MLTensor`);this.mlTensorData=m.mlTensor,this.downloader=m.download,this.disposer=m.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let S,f;if(typeof m=="string")if(b=m,f=_,m==="string"){if(!Array.isArray(n))throw new TypeError("A string tensor's data must be a string array.");S=n}else{const I=Hn.get(m);if(I===void 0)throw new TypeError(`Unsupported tensor type: ${m}.`);if(Array.isArray(n)){if(m==="float16"&&I===Uint16Array||m==="uint4"||m==="int4")throw new TypeError(`Creating a ${m} tensor from number array is not supported. Please use ${I.name} as data.`);m==="uint64"||m==="int64"?S=I.from(n,BigInt):S=I.from(n)}else if(n instanceof I)S=n;else if(n instanceof Uint8ClampedArray)if(m==="uint8")S=Uint8Array.from(n);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(m==="float16"&&n instanceof Uint16Array&&I!==Uint16Array)S=new globalThis.Float16Array(n.buffer,n.byteOffset,n.length);else throw new TypeError(`A ${b} tensor's data must be type of ${I}`)}else if(f=n,Array.isArray(m)){if(m.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");const I=typeof m[0];if(I==="string")b="string",S=m;else if(I==="boolean")b="bool",S=Uint8Array.from(m);else throw new TypeError(`Invalid element type of data array: ${I}.`)}else if(m instanceof Uint8ClampedArray)b="uint8",S=Uint8Array.from(m);else{const I=hu.get(m.constructor);if(I===void 0)throw new TypeError(`Unsupported type for tensor data: ${m.constructor}.`);b=I,S=m}if(f===void 0)f=[S.length];else if(!Array.isArray(f))throw new TypeError("A tensor's dims must be a number array");F=f,this.cpuData=S,this.dataLocation="cpu"}const q=ih(F);if(this.cpuData&&q!==this.cpuData.length&&!((b==="uint4"||b==="int4")&&Math.ceil(q/2)===this.cpuData.length))throw new Error(`Tensor's size(${q}) does not match data length(${this.cpuData.length}).`);this.type=b,this.dims=F,this.size=q}static async fromImage(m,n){return eh(m,n)}static fromTexture(m,n){return th(m,n)}static fromGpuBuffer(m,n){return sh(m,n)}static fromMLTensor(m,n){return rh(m,n)}static fromPinnedBuffer(m,n,_){return nh(m,n,_)}toDataURL(m){return Yp(this,m)}toImageData(m){return Zp(this,m)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(m){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;const n=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=n,m&&this.disposer&&(this.disposer(),this.disposer=void 0),n}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(m){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return ah(this,m)}};const qn=nr,zp=(re,m)=>{(typeof dr.trace>"u"?!dr.wasm.trace:!dr.trace)||console.timeStamp(`${re}::ORT::${m}`)},Bp=(re,m)=>{const n=new Error().stack?.split(/\r\n|\r|\n/g)||[];let _=!1;for(let b=0;b<n.length;b++){if(_&&!n[b].includes("TRACE_FUNC")){let F=`FUNC_${re}::${n[b].trim().split(" ")[1]}`;m&&(F+=`::${m}`),zp("CPU",F);return}n[b].includes("TRACE_FUNC")&&(_=!0)}},Tp=re=>{(typeof dr.trace>"u"?!dr.wasm.trace:!dr.trace)||Bp("BEGIN",re)},Pp=re=>{(typeof dr.trace>"u"?!dr.wasm.trace:!dr.trace)||Bp("END",re)};var lh=Object.freeze({__proto__:null,InferenceSession:class Up{constructor(m){this.handler=m}async run(m,n,_){Tp();const b={};let F={};if(typeof m!="object"||m===null||m instanceof qn||Array.isArray(m))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let q=!0;if(typeof n=="object"){if(n===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(n instanceof qn)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(n)){if(n.length===0)throw new TypeError("'fetches' cannot be an empty array.");q=!1;for(const I of n){if(typeof I!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(I)===-1)throw new RangeError(`'fetches' contains invalid output name: ${I}.`);b[I]=null}if(typeof _=="object"&&_!==null)F=_;else if(typeof _<"u")throw new TypeError("'options' must be an object.")}else{let I=!1;const D=Object.getOwnPropertyNames(n);for(const y of this.outputNames)if(D.indexOf(y)!==-1){const h=n[y];(h===null||h instanceof qn)&&(I=!0,q=!1,b[y]=h)}if(I){if(typeof _=="object"&&_!==null)F=_;else if(typeof _<"u")throw new TypeError("'options' must be an object.")}else F=n}}else if(typeof n<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(const I of this.inputNames)if(typeof m[I]>"u")throw new Error(`input '${I}' is missing in 'feeds'.`);if(q)for(const I of this.outputNames)b[I]=null;const S=await this.handler.run(m,b,F),f={};for(const I in S)if(Object.hasOwnProperty.call(S,I)){const D=S[I];D instanceof qn?f[I]=D:f[I]=new qn(D.type,D.data,D.dims)}return Pp(),f}async release(){return this.handler.dispose()}static async create(m,n,_,b){Tp();let F,q={};if(typeof m=="string"){if(F=m,typeof n=="object"&&n!==null)q=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(m instanceof Uint8Array){if(F=m,typeof n=="object"&&n!==null)q=n;else if(typeof n<"u")throw new TypeError("'options' must be an object.")}else if(m instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&m instanceof SharedArrayBuffer){const D=m;let y=0,h=m.byteLength;if(typeof n=="object"&&n!==null)q=n;else if(typeof n=="number"){if(y=n,!Number.isSafeInteger(y))throw new RangeError("'byteOffset' must be an integer.");if(y<0||y>=D.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${D.byteLength}).`);if(h=m.byteLength-y,typeof _=="number"){if(h=_,!Number.isSafeInteger(h))throw new RangeError("'byteLength' must be an integer.");if(h<=0||y+h>D.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${D.byteLength-y}].`);if(typeof b=="object"&&b!==null)q=b;else if(typeof b<"u")throw new TypeError("'options' must be an object.")}else if(typeof _<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof n<"u")throw new TypeError("'options' must be an object.");F=new Uint8Array(D,y,h)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");const[S,f]=await Qp(q),I=await S.createInferenceSessionHandler(F,f);return Pp(),new Up(I)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}},TRACE:zp,TRACE_FUNC_BEGIN:Tp,TRACE_FUNC_END:Pp,Tensor:qn,env:Jp,registerBackend:Hp});function ch(re){return re&&re.__esModule&&Object.prototype.hasOwnProperty.call(re,"default")?re.default:re}function Qn(re){throw new Error('Could not dynamically require "'+re+'". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.')}var Rp={exports:{}};/*!
 * ONNX Runtime Web v1.22.0-dev.20250409-89f8206ba4
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License.
 */(function(re,m){var n=(()=>{var _=Object.defineProperty,b=Object.getOwnPropertyDescriptor,F=Object.getOwnPropertyNames,q=Object.prototype.hasOwnProperty,S=(e=>typeof Qn<"u"?Qn:typeof Proxy<"u"?new Proxy(e,{get:(s,t)=>(typeof Qn<"u"?Qn:s)[t]}):e)(function(e){if(typeof Qn<"u")return Qn.apply(this,arguments);throw Error('Dynamic require of "'+e+'" is not supported')}),f=(e,s)=>()=>(e&&(s=e(e=0)),s),I=(e,s)=>{for(var t in s)_(e,t,{get:s[t],enumerable:!0})},D=(e,s,t,r)=>{if(s&&typeof s=="object"||typeof s=="function")for(let o of F(s))!q.call(e,o)&&o!==t&&_(e,o,{get:()=>s[o],enumerable:!(r=b(s,o))||r.enumerable});return e},y=e=>D(_({},"__esModule",{value:!0}),e),h,V,O,K,me,R=f(()=>{h=new Map,V=[],O=(e,s,t)=>{if(s&&typeof s.init=="function"&&typeof s.createInferenceSessionHandler=="function"){let r=h.get(e);if(r===void 0)h.set(e,{backend:s,priority:t});else{if(r.priority>t)return;if(r.priority===t&&r.backend!==s)throw new Error(`cannot register backend "${e}" using priority ${t}`)}if(t>=0){let o=V.indexOf(e);o!==-1&&V.splice(o,1);for(let i=0;i<V.length;i++)if(h.get(V[i]).priority<=t){V.splice(i,0,e);return}V.push(e)}return}throw new TypeError("not a valid backend")},K=async e=>{let s=h.get(e);if(!s)return"backend not found.";if(s.initialized)return s.backend;if(s.aborted)return s.error;{let t=!!s.initPromise;try{return t||(s.initPromise=s.backend.init(e)),await s.initPromise,s.initialized=!0,s.backend}catch(r){return t||(s.error=`${r}`,s.aborted=!0),s.error}finally{delete s.initPromise}}},me=async e=>{let s=e.executionProviders||[],t=s.map(d=>typeof d=="string"?d:d.name),r=t.length===0?V:t,o,i=[],a=new Set;for(let d of r){let u=await K(d);typeof u=="string"?i.push({name:d,err:u}):(o||(o=u),o===u&&a.add(d))}if(!o)throw new Error(`no available backend found. ERR: ${i.map(d=>`[${d.name}] ${d.err}`).join(", ")}`);for(let{name:d,err:u}of i)t.includes(d)&&console.warn(`removing requested execution provider "${d}" from session options because it is not available: ${u}`);let l=s.filter(d=>a.has(typeof d=="string"?d:d.name));return[o,new Proxy(e,{get:(d,u)=>u==="executionProviders"?l:Reflect.get(d,u)})]}}),G=f(()=>{R()}),X,L=f(()=>{X="1.22.0-dev.20250409-89f8206ba4"}),$,T,x=f(()=>{L(),$="warning",T={wasm:{},webgl:{},webgpu:{},versions:{common:X},set logLevel(e){if(e!==void 0){if(typeof e!="string"||["verbose","info","warning","error","fatal"].indexOf(e)===-1)throw new Error(`Unsupported logging level: ${e}`);$=e}},get logLevel(){return $}},Object.defineProperty(T,"logLevel",{enumerable:!0})}),E,Y=f(()=>{x(),E=T}),U,de,oe=f(()=>{U=(e,s)=>{let t=typeof document<"u"?document.createElement("canvas"):new OffscreenCanvas(1,1);t.width=e.dims[3],t.height=e.dims[2];let r=t.getContext("2d");if(r!=null){let o,i;s?.tensorLayout!==void 0&&s.tensorLayout==="NHWC"?(o=e.dims[2],i=e.dims[3]):(o=e.dims[3],i=e.dims[2]);let a=s?.format!==void 0?s.format:"RGB",l=s?.norm,d,u;l===void 0||l.mean===void 0?d=[255,255,255,255]:typeof l.mean=="number"?d=[l.mean,l.mean,l.mean,l.mean]:(d=[l.mean[0],l.mean[1],l.mean[2],0],l.mean[3]!==void 0&&(d[3]=l.mean[3])),l===void 0||l.bias===void 0?u=[0,0,0,0]:typeof l.bias=="number"?u=[l.bias,l.bias,l.bias,l.bias]:(u=[l.bias[0],l.bias[1],l.bias[2],0],l.bias[3]!==void 0&&(u[3]=l.bias[3]));let p=i*o,w=0,v=p,P=p*2,C=-1;a==="RGBA"?(w=0,v=p,P=p*2,C=p*3):a==="RGB"?(w=0,v=p,P=p*2):a==="RBG"&&(w=0,P=p,v=p*2);for(let A=0;A<i;A++)for(let H=0;H<o;H++){let z=(e.data[w++]-u[0])*d[0],k=(e.data[v++]-u[1])*d[1],se=(e.data[P++]-u[2])*d[2],Q=C===-1?255:(e.data[C++]-u[3])*d[3];r.fillStyle="rgba("+z+","+k+","+se+","+Q+")",r.fillRect(H,A,1,1)}if("toDataURL"in t)return t.toDataURL();throw new Error("toDataURL is not supported")}else throw new Error("Can not access image data")},de=(e,s)=>{let t=typeof document<"u"?document.createElement("canvas").getContext("2d"):new OffscreenCanvas(1,1).getContext("2d"),r;if(t!=null){let o,i,a;s?.tensorLayout!==void 0&&s.tensorLayout==="NHWC"?(o=e.dims[2],i=e.dims[1],a=e.dims[3]):(o=e.dims[3],i=e.dims[2],a=e.dims[1]);let l=s!==void 0&&s.format!==void 0?s.format:"RGB",d=s?.norm,u,p;d===void 0||d.mean===void 0?u=[255,255,255,255]:typeof d.mean=="number"?u=[d.mean,d.mean,d.mean,d.mean]:(u=[d.mean[0],d.mean[1],d.mean[2],255],d.mean[3]!==void 0&&(u[3]=d.mean[3])),d===void 0||d.bias===void 0?p=[0,0,0,0]:typeof d.bias=="number"?p=[d.bias,d.bias,d.bias,d.bias]:(p=[d.bias[0],d.bias[1],d.bias[2],0],d.bias[3]!==void 0&&(p[3]=d.bias[3]));let w=i*o;if(s!==void 0&&(s.format!==void 0&&a===4&&s.format!=="RGBA"||a===3&&s.format!=="RGB"&&s.format!=="BGR"))throw new Error("Tensor format doesn't match input tensor dims");let v=4,P=0,C=1,A=2,H=3,z=0,k=w,se=w*2,Q=-1;l==="RGBA"?(z=0,k=w,se=w*2,Q=w*3):l==="RGB"?(z=0,k=w,se=w*2):l==="RBG"&&(z=0,se=w,k=w*2),r=t.createImageData(o,i);for(let ce=0;ce<i*o;P+=v,C+=v,A+=v,H+=v,ce++)r.data[P]=(e.data[z++]-p[0])*u[0],r.data[C]=(e.data[k++]-p[1])*u[1],r.data[A]=(e.data[se++]-p[2])*u[2],r.data[H]=Q===-1?255:(e.data[Q++]-p[3])*u[3]}else throw new Error("Can not access image data");return r}}),Z,he,ie,Me,be,fe,Re=f(()=>{pt(),Z=(e,s)=>{if(e===void 0)throw new Error("Image buffer must be defined");if(s.height===void 0||s.width===void 0)throw new Error("Image height and width must be defined");if(s.tensorLayout==="NHWC")throw new Error("NHWC Tensor layout is not supported yet");let{height:t,width:r}=s,o=s.norm??{mean:255,bias:0},i,a;typeof o.mean=="number"?i=[o.mean,o.mean,o.mean,o.mean]:i=[o.mean[0],o.mean[1],o.mean[2],o.mean[3]??255],typeof o.bias=="number"?a=[o.bias,o.bias,o.bias,o.bias]:a=[o.bias[0],o.bias[1],o.bias[2],o.bias[3]??0];let l=s.format!==void 0?s.format:"RGBA",d=s.tensorFormat!==void 0&&s.tensorFormat!==void 0?s.tensorFormat:"RGB",u=t*r,p=d==="RGBA"?new Float32Array(u*4):new Float32Array(u*3),w=4,v=0,P=1,C=2,A=3,H=0,z=u,k=u*2,se=-1;l==="RGB"&&(w=3,v=0,P=1,C=2,A=-1),d==="RGBA"?se=u*3:d==="RBG"?(H=0,k=u,z=u*2):d==="BGR"&&(k=0,z=u,H=u*2);for(let Q=0;Q<u;Q++,v+=w,C+=w,P+=w,A+=w)p[H++]=(e[v]+a[0])/i[0],p[z++]=(e[P]+a[1])/i[1],p[k++]=(e[C]+a[2])/i[2],se!==-1&&A!==-1&&(p[se++]=(e[A]+a[3])/i[3]);return d==="RGBA"?new He("float32",p,[1,4,t,r]):new He("float32",p,[1,3,t,r])},he=async(e,s)=>{let t=typeof HTMLImageElement<"u"&&e instanceof HTMLImageElement,r=typeof ImageData<"u"&&e instanceof ImageData,o=typeof ImageBitmap<"u"&&e instanceof ImageBitmap,i=typeof e=="string",a,l=s??{},d=()=>{if(typeof document<"u")return document.createElement("canvas");if(typeof OffscreenCanvas<"u")return new OffscreenCanvas(1,1);throw new Error("Canvas is not supported")},u=p=>typeof HTMLCanvasElement<"u"&&p instanceof HTMLCanvasElement||p instanceof OffscreenCanvas?p.getContext("2d"):null;if(t){let p=d();p.width=e.width,p.height=e.height;let w=u(p);if(w!=null){let v=e.height,P=e.width;if(s!==void 0&&s.resizedHeight!==void 0&&s.resizedWidth!==void 0&&(v=s.resizedHeight,P=s.resizedWidth),s!==void 0){if(l=s,s.tensorFormat!==void 0)throw new Error("Image input config format must be RGBA for HTMLImageElement");l.tensorFormat="RGBA",l.height=v,l.width=P}else l.tensorFormat="RGBA",l.height=v,l.width=P;w.drawImage(e,0,0),a=w.getImageData(0,0,P,v).data}else throw new Error("Can not access image data")}else if(r){let p,w;if(s!==void 0&&s.resizedWidth!==void 0&&s.resizedHeight!==void 0?(p=s.resizedHeight,w=s.resizedWidth):(p=e.height,w=e.width),s!==void 0&&(l=s),l.format="RGBA",l.height=p,l.width=w,s!==void 0){let v=d();v.width=w,v.height=p;let P=u(v);if(P!=null)P.putImageData(e,0,0),a=P.getImageData(0,0,w,p).data;else throw new Error("Can not access image data")}else a=e.data}else if(o){if(s===void 0)throw new Error("Please provide image config with format for Imagebitmap");let p=d();p.width=e.width,p.height=e.height;let w=u(p);if(w!=null){let v=e.height,P=e.width;return w.drawImage(e,0,0,P,v),a=w.getImageData(0,0,P,v).data,l.height=v,l.width=P,Z(a,l)}else throw new Error("Can not access image data")}else{if(i)return new Promise((p,w)=>{let v=d(),P=u(v);if(!e||!P)return w();let C=new Image;C.crossOrigin="Anonymous",C.src=e,C.onload=()=>{v.width=C.width,v.height=C.height,P.drawImage(C,0,0,v.width,v.height);let A=P.getImageData(0,0,v.width,v.height);l.height=v.height,l.width=v.width,p(Z(A.data,l))}});throw new Error("Input data provided is not supported - aborted tensor creation")}if(a!==void 0)return Z(a,l);throw new Error("Input data provided is not supported - aborted tensor creation")},ie=(e,s)=>{let{width:t,height:r,download:o,dispose:i}=s,a=[1,r,t,4];return new He({location:"texture",type:"float32",texture:e,dims:a,download:o,dispose:i})},Me=(e,s)=>{let{dataType:t,dims:r,download:o,dispose:i}=s;return new He({location:"gpu-buffer",type:t??"float32",gpuBuffer:e,dims:r,download:o,dispose:i})},be=(e,s)=>{let{dataType:t,dims:r,download:o,dispose:i}=s;return new He({location:"ml-tensor",type:t??"float32",mlTensor:e,dims:r,download:o,dispose:i})},fe=(e,s,t)=>new He({location:"cpu-pinned",type:e,data:s,dims:t??[s.length]})}),ke,le,W,ne,_e=f(()=>{ke=new Map([["float32",Float32Array],["uint8",Uint8Array],["int8",Int8Array],["uint16",Uint16Array],["int16",Int16Array],["int32",Int32Array],["bool",Uint8Array],["float64",Float64Array],["uint32",Uint32Array],["int4",Uint8Array],["uint4",Uint8Array]]),le=new Map([[Float32Array,"float32"],[Uint8Array,"uint8"],[Int8Array,"int8"],[Uint16Array,"uint16"],[Int16Array,"int16"],[Int32Array,"int32"],[Float64Array,"float64"],[Uint32Array,"uint32"]]),W=!1,ne=()=>{if(!W){W=!0;let e=typeof BigInt64Array<"u"&&BigInt64Array.from,s=typeof BigUint64Array<"u"&&BigUint64Array.from,t=globalThis.Float16Array,r=typeof t<"u"&&t.from;e&&(ke.set("int64",BigInt64Array),le.set(BigInt64Array,"int64")),s&&(ke.set("uint64",BigUint64Array),le.set(BigUint64Array,"uint64")),r?(ke.set("float16",t),le.set(t,"float16")):ke.set("float16",Uint16Array)}}}),xe,We,Ge=f(()=>{pt(),xe=e=>{let s=1;for(let t=0;t<e.length;t++){let r=e[t];if(typeof r!="number"||!Number.isSafeInteger(r))throw new TypeError(`dims[${t}] must be an integer, got: ${r}`);if(r<0)throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${r}`);s*=r}return s},We=(e,s)=>{switch(e.location){case"cpu":return new He(e.type,e.data,s);case"cpu-pinned":return new He({location:"cpu-pinned",data:e.data,type:e.type,dims:s});case"texture":return new He({location:"texture",texture:e.texture,type:e.type,dims:s});case"gpu-buffer":return new He({location:"gpu-buffer",gpuBuffer:e.gpuBuffer,type:e.type,dims:s});case"ml-tensor":return new He({location:"ml-tensor",mlTensor:e.mlTensor,type:e.type,dims:s});default:throw new Error(`tensorReshape: tensor location ${e.location} is not supported`)}}}),He,pt=f(()=>{oe(),Re(),_e(),Ge(),He=class{constructor(e,s,t){ne();let r,o;if(typeof e=="object"&&"location"in e)switch(this.dataLocation=e.location,r=e.type,o=e.dims,e.location){case"cpu-pinned":{let a=ke.get(r);if(!a)throw new TypeError(`unsupported type "${r}" to create tensor from pinned buffer`);if(!(e.data instanceof a))throw new TypeError(`buffer should be of type ${a.name}`);this.cpuData=e.data;break}case"texture":{if(r!=="float32")throw new TypeError(`unsupported type "${r}" to create tensor from texture`);this.gpuTextureData=e.texture,this.downloader=e.download,this.disposer=e.dispose;break}case"gpu-buffer":{if(r!=="float32"&&r!=="float16"&&r!=="int32"&&r!=="int64"&&r!=="uint32"&&r!=="uint8"&&r!=="bool"&&r!=="uint4"&&r!=="int4")throw new TypeError(`unsupported type "${r}" to create tensor from gpu buffer`);this.gpuBufferData=e.gpuBuffer,this.downloader=e.download,this.disposer=e.dispose;break}case"ml-tensor":{if(r!=="float32"&&r!=="float16"&&r!=="int32"&&r!=="int64"&&r!=="uint32"&&r!=="uint64"&&r!=="int8"&&r!=="uint8"&&r!=="bool"&&r!=="uint4"&&r!=="int4")throw new TypeError(`unsupported type "${r}" to create tensor from MLTensor`);this.mlTensorData=e.mlTensor,this.downloader=e.download,this.disposer=e.dispose;break}default:throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`)}else{let a,l;if(typeof e=="string")if(r=e,l=t,e==="string"){if(!Array.isArray(s))throw new TypeError("A string tensor's data must be a string array.");a=s}else{let d=ke.get(e);if(d===void 0)throw new TypeError(`Unsupported tensor type: ${e}.`);if(Array.isArray(s)){if(e==="float16"&&d===Uint16Array||e==="uint4"||e==="int4")throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${d.name} as data.`);e==="uint64"||e==="int64"?a=d.from(s,BigInt):a=d.from(s)}else if(s instanceof d)a=s;else if(s instanceof Uint8ClampedArray)if(e==="uint8")a=Uint8Array.from(s);else throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");else if(e==="float16"&&s instanceof Uint16Array&&d!==Uint16Array)a=new globalThis.Float16Array(s.buffer,s.byteOffset,s.length);else throw new TypeError(`A ${r} tensor's data must be type of ${d}`)}else if(l=s,Array.isArray(e)){if(e.length===0)throw new TypeError("Tensor type cannot be inferred from an empty array.");let d=typeof e[0];if(d==="string")r="string",a=e;else if(d==="boolean")r="bool",a=Uint8Array.from(e);else throw new TypeError(`Invalid element type of data array: ${d}.`)}else if(e instanceof Uint8ClampedArray)r="uint8",a=Uint8Array.from(e);else{let d=le.get(e.constructor);if(d===void 0)throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);r=d,a=e}if(l===void 0)l=[a.length];else if(!Array.isArray(l))throw new TypeError("A tensor's dims must be a number array");o=l,this.cpuData=a,this.dataLocation="cpu"}let i=xe(o);if(this.cpuData&&i!==this.cpuData.length&&!((r==="uint4"||r==="int4")&&Math.ceil(i/2)===this.cpuData.length))throw new Error(`Tensor's size(${i}) does not match data length(${this.cpuData.length}).`);this.type=r,this.dims=o,this.size=i}static async fromImage(e,s){return he(e,s)}static fromTexture(e,s){return ie(e,s)}static fromGpuBuffer(e,s){return Me(e,s)}static fromMLTensor(e,s){return be(e,s)}static fromPinnedBuffer(e,s,t){return fe(e,s,t)}toDataURL(e){return U(this,e)}toImageData(e){return de(this,e)}get data(){if(this.ensureValid(),!this.cpuData)throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");return this.cpuData}get location(){return this.dataLocation}get texture(){if(this.ensureValid(),!this.gpuTextureData)throw new Error("The data is not stored as a WebGL texture.");return this.gpuTextureData}get gpuBuffer(){if(this.ensureValid(),!this.gpuBufferData)throw new Error("The data is not stored as a WebGPU buffer.");return this.gpuBufferData}get mlTensor(){if(this.ensureValid(),!this.mlTensorData)throw new Error("The data is not stored as a WebNN MLTensor.");return this.mlTensorData}async getData(e){switch(this.ensureValid(),this.dataLocation){case"cpu":case"cpu-pinned":return this.data;case"texture":case"gpu-buffer":case"ml-tensor":{if(!this.downloader)throw new Error("The current tensor is not created with a specified data downloader.");if(this.isDownloading)throw new Error("The current tensor is being downloaded.");try{this.isDownloading=!0;let s=await this.downloader();return this.downloader=void 0,this.dataLocation="cpu",this.cpuData=s,e&&this.disposer&&(this.disposer(),this.disposer=void 0),s}finally{this.isDownloading=!1}}default:throw new Error(`cannot get data from location: ${this.dataLocation}`)}}dispose(){if(this.isDownloading)throw new Error("The current tensor is being downloaded.");this.disposer&&(this.disposer(),this.disposer=void 0),this.cpuData=void 0,this.gpuTextureData=void 0,this.gpuBufferData=void 0,this.mlTensorData=void 0,this.downloader=void 0,this.isDownloading=void 0,this.dataLocation="none"}ensureValid(){if(this.dataLocation==="none")throw new Error("The tensor is disposed.")}reshape(e){if(this.ensureValid(),this.downloader||this.disposer)throw new Error("Cannot reshape a tensor that owns GPU resource.");return We(this,e)}}}),ze,J=f(()=>{pt(),ze=He}),j,ve,Fe,Oe,je=f(()=>{x(),j=(e,s)=>{(typeof T.trace>"u"?!T.wasm.trace:!T.trace)||console.timeStamp(`${e}::ORT::${s}`)},ve=(e,s)=>{let t=new Error().stack?.split(/\r\n|\r|\n/g)||[],r=!1;for(let o=0;o<t.length;o++){if(r&&!t[o].includes("TRACE_FUNC")){let i=`FUNC_${e}::${t[o].trim().split(" ")[1]}`;s&&(i+=`::${s}`),j("CPU",i);return}t[o].includes("TRACE_FUNC")&&(r=!0)}},Fe=e=>{(typeof T.trace>"u"?!T.wasm.trace:!T.trace)||ve("BEGIN",e)},Oe=e=>{(typeof T.trace>"u"?!T.wasm.trace:!T.trace)||ve("END",e)}}),Ee,Ne=f(()=>{R(),J(),je(),Ee=class Wp{constructor(s){this.handler=s}async run(s,t,r){Fe();let o={},i={};if(typeof s!="object"||s===null||s instanceof ze||Array.isArray(s))throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");let a=!0;if(typeof t=="object"){if(t===null)throw new TypeError("Unexpected argument[1]: cannot be null.");if(t instanceof ze)throw new TypeError("'fetches' cannot be a Tensor");if(Array.isArray(t)){if(t.length===0)throw new TypeError("'fetches' cannot be an empty array.");a=!1;for(let u of t){if(typeof u!="string")throw new TypeError("'fetches' must be a string array or an object.");if(this.outputNames.indexOf(u)===-1)throw new RangeError(`'fetches' contains invalid output name: ${u}.`);o[u]=null}if(typeof r=="object"&&r!==null)i=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else{let u=!1,p=Object.getOwnPropertyNames(t);for(let w of this.outputNames)if(p.indexOf(w)!==-1){let v=t[w];(v===null||v instanceof ze)&&(u=!0,a=!1,o[w]=v)}if(u){if(typeof r=="object"&&r!==null)i=r;else if(typeof r<"u")throw new TypeError("'options' must be an object.")}else i=t}}else if(typeof t<"u")throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");for(let u of this.inputNames)if(typeof s[u]>"u")throw new Error(`input '${u}' is missing in 'feeds'.`);if(a)for(let u of this.outputNames)o[u]=null;let l=await this.handler.run(s,o,i),d={};for(let u in l)if(Object.hasOwnProperty.call(l,u)){let p=l[u];p instanceof ze?d[u]=p:d[u]=new ze(p.type,p.data,p.dims)}return Oe(),d}async release(){return this.handler.dispose()}static async create(s,t,r,o){Fe();let i,a={};if(typeof s=="string"){if(i=s,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(s instanceof Uint8Array){if(i=s,typeof t=="object"&&t!==null)a=t;else if(typeof t<"u")throw new TypeError("'options' must be an object.")}else if(s instanceof ArrayBuffer||typeof SharedArrayBuffer<"u"&&s instanceof SharedArrayBuffer){let p=s,w=0,v=s.byteLength;if(typeof t=="object"&&t!==null)a=t;else if(typeof t=="number"){if(w=t,!Number.isSafeInteger(w))throw new RangeError("'byteOffset' must be an integer.");if(w<0||w>=p.byteLength)throw new RangeError(`'byteOffset' is out of range [0, ${p.byteLength}).`);if(v=s.byteLength-w,typeof r=="number"){if(v=r,!Number.isSafeInteger(v))throw new RangeError("'byteLength' must be an integer.");if(v<=0||w+v>p.byteLength)throw new RangeError(`'byteLength' is out of range (0, ${p.byteLength-w}].`);if(typeof o=="object"&&o!==null)a=o;else if(typeof o<"u")throw new TypeError("'options' must be an object.")}else if(typeof r<"u")throw new TypeError("'byteLength' must be a number.")}else if(typeof t<"u")throw new TypeError("'options' must be an object.");i=new Uint8Array(p,w,v)}else throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");let[l,d]=await me(a),u=await l.createInferenceSessionHandler(i,d);return Oe(),new Wp(u)}startProfiling(){this.handler.startProfiling()}endProfiling(){this.handler.endProfiling()}get inputNames(){return this.handler.inputNames}get outputNames(){return this.handler.outputNames}get inputMetadata(){return this.handler.inputMetadata}get outputMetadata(){return this.handler.outputMetadata}}}),$e,Ue=f(()=>{Ne(),$e=Ee}),Ke=f(()=>{}),nt=f(()=>{}),De=f(()=>{}),Mt=f(()=>{}),et={};I(et,{InferenceSession:()=>$e,TRACE:()=>j,TRACE_FUNC_BEGIN:()=>Fe,TRACE_FUNC_END:()=>Oe,Tensor:()=>ze,env:()=>E,registerBackend:()=>O});var at=f(()=>{G(),Y(),Ue(),J(),Ke(),nt(),je(),De(),Mt()}),dt=f(()=>{}),lt={};I(lt,{default:()=>Vt});var ct,ft,Vt,Ut=f(()=>{ap(),ut(),ur(),ct="ort-wasm-proxy-worker",ft=globalThis.self?.name===ct,ft&&(self.onmessage=e=>{let{type:s,in:t}=e.data;try{switch(s){case"init-wasm":Te(t.wasm).then(()=>{zi(t).then(()=>{postMessage({type:s})},r=>{postMessage({type:s,err:r})})},r=>{postMessage({type:s,err:r})});break;case"init-ep":{let{epName:r,env:o}=t;Bi(o,r).then(()=>{postMessage({type:s})},i=>{postMessage({type:s,err:i})});break}case"copy-from":{let{buffer:r}=t,o=ji(r);postMessage({type:s,out:o});break}case"create":{let{model:r,options:o}=t;su(r,o).then(i=>{postMessage({type:s,out:i})},i=>{postMessage({type:s,err:i})});break}case"release":ru(t),postMessage({type:s});break;case"run":{let{sessionId:r,inputIndices:o,inputs:i,outputIndices:a,options:l}=t;ou(r,o,i,a,new Array(a.length).fill(null),l).then(d=>{d.some(u=>u[3]!=="cpu")?postMessage({type:s,err:"Proxy does not support non-cpu tensor location."}):postMessage({type:s,out:d},au([...i,...d]))},d=>{postMessage({type:s,err:d})});break}case"end-profiling":iu(t),postMessage({type:s});break;default:}}catch(r){postMessage({type:s,err:r})}}),Vt=ft?null:e=>new Worker(e??Zt,{type:"classic",name:ct})}),At,ws,Zt,Ss,Es,es,xs,yr,Lr,br,Xs,Tt,vr,ur=f(()=>{dt(),At=typeof location>"u"?void 0:location.origin,ws=()=>typeof document<"u"?document.currentScript?.src:typeof self<"u"?self.location?.href:void 0,Zt=ws(),Ss=()=>{if(Zt&&!Zt.startsWith("blob:"))return Zt.substring(0,Zt.lastIndexOf("/")+1)},Es=(e,s)=>{try{let t=s??Zt;return(t?new URL(e,t):new URL(e)).origin===At}catch{return!1}},es=(e,s)=>{let t=s??Zt;try{return(t?new URL(e,t):new URL(e)).href}catch{return}},xs=(e,s)=>`${s??"./"}${e}`,yr=async e=>{let s=await(await fetch(e,{credentials:"same-origin"})).blob();return URL.createObjectURL(s)},Lr=async e=>(await import(e)).default,br=(Ut(),y(lt)).default,Xs=async()=>{if(!Zt)throw new Error("Failed to load proxy worker: cannot determine the script source URL.");if(Es(Zt))return[void 0,br()];let e=await yr(Zt);return[e,br(e)]},Tt=void 0,vr=async(e,s,t)=>{if(!e&&!s&&Tt&&Zt&&Es(Zt))return[void 0,Tt];{let r="ort-wasm-simd-threaded.jsep.mjs",o=e??es(r,s),i=t&&o&&!Es(o,s),a=i?await yr(o):o??xs(r,s);return[i?a:void 0,await Lr(a)]}}}),Dt,or,g,te,N,ee,ue,Te,Ce,ut=f(()=>{ur(),or=!1,g=!1,te=!1,N=()=>{if(typeof SharedArrayBuffer>"u")return!1;try{return typeof MessageChannel<"u"&&new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11]))}catch{return!1}},ee=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch{return!1}},ue=()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,5,1,96,0,1,123,3,2,1,0,10,19,1,17,0,65,1,253,15,65,2,253,15,65,3,253,15,253,147,2,11]))}catch{return!1}},Te=async e=>{if(or)return Promise.resolve();if(g)throw new Error("multiple calls to 'initializeWebAssembly()' detected.");if(te)throw new Error("previous call to 'initializeWebAssembly()' failed.");g=!0;let s=e.initTimeout,t=e.numThreads;if(e.simd!==!1){if(e.simd==="relaxed"){if(!ue())throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.")}else if(!ee())throw new Error("WebAssembly SIMD is not supported in the current environment.")}let r=N();t>1&&!r&&(typeof self<"u"&&!self.crossOriginIsolated&&console.warn("env.wasm.numThreads is set to "+t+", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."),console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."),e.numThreads=t=1);let o=e.wasmPaths,i=typeof o=="string"?o:void 0,a=o?.mjs,l=a?.href??a,d=o?.wasm,u=d?.href??d,p=e.wasmBinary,[w,v]=await vr(l,i,t>1),P=!1,C=[];if(s>0&&C.push(new Promise(A=>{setTimeout(()=>{P=!0,A()},s)})),C.push(new Promise((A,H)=>{let z={numThreads:t};if(p)z.wasmBinary=p;else if(u||i)z.locateFile=k=>u??i+k;else if(l&&l.indexOf("blob:")!==0)z.locateFile=k=>new URL(k,l).href;else if(w){let k=Ss();k&&(z.locateFile=se=>k+se)}v(z).then(k=>{g=!1,or=!0,Dt=k,A(),w&&URL.revokeObjectURL(w)},k=>{g=!1,te=!0,H(k)})})),await Promise.race(C),P)throw new Error(`WebAssembly backend initializing failed due to timeout: ${s}ms`)},Ce=()=>{if(or&&Dt)return Dt;throw new Error("WebAssembly is not initialized yet.")}}),mt,Ze,_t,Nt=f(()=>{ut(),mt=(e,s)=>{let t=Ce(),r=t.lengthBytesUTF8(e)+1,o=t._malloc(r);return t.stringToUTF8(e,o,r),s.push(o),o},Ze=(e,s,t,r)=>{if(typeof e=="object"&&e!==null){if(t.has(e))throw new Error("Circular reference in options");t.add(e)}Object.entries(e).forEach(([o,i])=>{let a=s?s+o:o;if(typeof i=="object")Ze(i,a+".",t,r);else if(typeof i=="string"||typeof i=="number")r(a,i.toString());else if(typeof i=="boolean")r(a,i?"1":"0");else throw new Error(`Can't handle extra config type: ${typeof i}`)})},_t=e=>{let s=Ce(),t=s.stackSave();try{let r=s.PTR_SIZE,o=s.stackAlloc(2*r);s._OrtGetLastError(o,o+r);let i=Number(s.getValue(o,r===4?"i32":"i64")),a=s.getValue(o+r,"*"),l=a?s.UTF8ToString(a):"";throw new Error(`${e} ERROR_CODE: ${i}, ERROR_MESSAGE: ${l}`)}finally{s.stackRestore(t)}}}),ts,Qt=f(()=>{ut(),Nt(),ts=e=>{let s=Ce(),t=0,r=[],o=e||{};try{if(e?.logSeverityLevel===void 0)o.logSeverityLevel=2;else if(typeof e.logSeverityLevel!="number"||!Number.isInteger(e.logSeverityLevel)||e.logSeverityLevel<0||e.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${e.logSeverityLevel}`);if(e?.logVerbosityLevel===void 0)o.logVerbosityLevel=0;else if(typeof e.logVerbosityLevel!="number"||!Number.isInteger(e.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${e.logVerbosityLevel}`);e?.terminate===void 0&&(o.terminate=!1);let i=0;return e?.tag!==void 0&&(i=mt(e.tag,r)),t=s._OrtCreateRunOptions(o.logSeverityLevel,o.logVerbosityLevel,!!o.terminate,i),t===0&&_t("Can't create run options."),e?.extra!==void 0&&Ze(e.extra,"",new WeakSet,(a,l)=>{let d=mt(a,r),u=mt(l,r);s._OrtAddRunConfigEntry(t,d,u)!==0&&_t(`Can't set a run config entry: ${a} - ${l}.`)}),[t,r]}catch(i){throw t!==0&&s._OrtReleaseRunOptions(t),r.forEach(a=>s._free(a)),i}}}),Fs,Ls,Ts,rs,zs,pr,xr=f(()=>{ut(),Nt(),Fs=e=>{switch(e){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${e}`)}},Ls=e=>{switch(e){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${e}`)}},Ts=e=>{e.extra||(e.extra={}),e.extra.session||(e.extra.session={});let s=e.extra.session;s.use_ort_model_bytes_directly||(s.use_ort_model_bytes_directly="1"),e.executionProviders&&e.executionProviders.some(t=>(typeof t=="string"?t:t.name)==="webgpu")&&(e.enableMemPattern=!1)},rs=(e,s,t,r)=>{let o=mt(s,r),i=mt(t,r);Ce()._OrtAddSessionConfigEntry(e,o,i)!==0&&_t(`Can't set a session config entry: ${s} - ${t}.`)},zs=async(e,s,t)=>{for(let r of s){let o=typeof r=="string"?r:r.name,i=[];switch(o){case"webnn":if(o="WEBNN",typeof r!="string"){let p=r?.deviceType;p&&rs(e,"deviceType",p,t)}break;case"webgpu":if(o="JS",typeof r!="string"){let p=r;if(p?.preferredLayout){if(p.preferredLayout!=="NCHW"&&p.preferredLayout!=="NHWC")throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${p.preferredLayout}`);rs(e,"preferredLayout",p.preferredLayout,t)}}break;case"wasm":case"cpu":continue;default:throw new Error(`not supported execution provider: ${o}`)}let a=mt(o,t),l=i.length,d=0,u=0;if(l>0){d=Ce()._malloc(l*Ce().PTR_SIZE),t.push(d),u=Ce()._malloc(l*Ce().PTR_SIZE),t.push(u);for(let p=0;p<l;p++)Ce().setValue(d+p*Ce().PTR_SIZE,i[p][0],"*"),Ce().setValue(u+p*Ce().PTR_SIZE,i[p][1],"*")}await Ce()._OrtAppendExecutionProvider(e,a,d,u,l)!==0&&_t(`Can't append execution provider: ${o}.`)}},pr=async e=>{let s=Ce(),t=0,r=[],o=e||{};Ts(o);try{let i=Fs(o.graphOptimizationLevel??"all"),a=Ls(o.executionMode??"sequential"),l=typeof o.logId=="string"?mt(o.logId,r):0,d=o.logSeverityLevel??2;if(!Number.isInteger(d)||d<0||d>4)throw new Error(`log serverity level is not valid: ${d}`);let u=o.logVerbosityLevel??0;if(!Number.isInteger(u)||u<0||u>4)throw new Error(`log verbosity level is not valid: ${u}`);let p=typeof o.optimizedModelFilePath=="string"?mt(o.optimizedModelFilePath,r):0;if(t=s._OrtCreateSessionOptions(i,!!o.enableCpuMemArena,!!o.enableMemPattern,a,!!o.enableProfiling,0,l,d,u,p),t===0&&_t("Can't create session options."),o.executionProviders&&await zs(t,o.executionProviders,r),o.enableGraphCapture!==void 0){if(typeof o.enableGraphCapture!="boolean")throw new Error(`enableGraphCapture must be a boolean value: ${o.enableGraphCapture}`);rs(t,"enableGraphCapture",o.enableGraphCapture.toString(),r)}if(o.freeDimensionOverrides)for(let[w,v]of Object.entries(o.freeDimensionOverrides)){if(typeof w!="string")throw new Error(`free dimension override name must be a string: ${w}`);if(typeof v!="number"||!Number.isInteger(v)||v<0)throw new Error(`free dimension override value must be a non-negative integer: ${v}`);let P=mt(w,r);s._OrtAddFreeDimensionOverride(t,P,v)!==0&&_t(`Can't set a free dimension override: ${w} - ${v}.`)}return o.extra!==void 0&&Ze(o.extra,"",new WeakSet,(w,v)=>{rs(t,w,v,r)}),[t,r]}catch(i){throw t!==0&&s._OrtReleaseSessionOptions(t)!==0&&_t("Can't release session options."),r.forEach(a=>s._free(a)),i}}}),Ds,ks,Os,Bs,Rs,Vs,ir,hr,xt=f(()=>{Ds=e=>{switch(e){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float16":return 10;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;case"int4":return 22;case"uint4":return 21;default:throw new Error(`unsupported data type: ${e}`)}},ks=e=>{switch(e){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 10:return"float16";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";case 22:return"int4";case 21:return"uint4";default:throw new Error(`unsupported data type: ${e}`)}},Os=(e,s)=>{let t=[-1,4,1,1,2,2,4,8,-1,1,2,8,4,8,-1,-1,-1,-1,-1,-1,-1,.5,.5][e],r=typeof s=="number"?s:s.reduce((o,i)=>o*i,1);return t>0?Math.ceil(r*t):void 0},Bs=e=>{switch(e){case"float16":return typeof Float16Array<"u"&&Float16Array.from?Float16Array:Uint16Array;case"float32":return Float32Array;case"uint8":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"bool":return Uint8Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${e}`)}},Rs=e=>{switch(e){case"verbose":return 0;case"info":return 1;case"warning":return 2;case"error":return 3;case"fatal":return 4;default:throw new Error(`unsupported logging level: ${e}`)}},Vs=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",ir=e=>e==="float32"||e==="float16"||e==="int32"||e==="int64"||e==="uint32"||e==="uint64"||e==="int8"||e==="uint8"||e==="bool"||e==="uint4"||e==="int4",hr=e=>{switch(e){case"none":return 0;case"cpu":return 1;case"cpu-pinned":return 2;case"texture":return 3;case"gpu-buffer":return 4;case"ml-tensor":return 5;default:throw new Error(`unsupported data location: ${e}`)}}}),js,mr=f(()=>{dt(),js=async e=>{if(typeof e=="string"){let s=await fetch(e);if(!s.ok)throw new Error(`failed to load external data file: ${e}`);let t=s.headers.get("Content-Length"),r=t?parseInt(t,10):0;if(r<1073741824)return new Uint8Array(await s.arrayBuffer());{if(!s.body)throw new Error(`failed to load external data file: ${e}, no response body.`);let o=s.body.getReader(),i;try{i=new ArrayBuffer(r)}catch(l){if(l instanceof RangeError){let d=Math.ceil(r/65536);i=new WebAssembly.Memory({initial:d,maximum:d}).buffer}else throw l}let a=0;for(;;){let{done:l,value:d}=await o.read();if(l)break;let u=d.byteLength;new Uint8Array(i,a,u).set(d),a+=u}return new Uint8Array(i,0,r)}}else return e instanceof Blob?new Uint8Array(await e.arrayBuffer()):e instanceof Uint8Array?e:new Uint8Array(e)}}),Tr,Is,qe,Qe,gt,Xt,Ot,Cs=f(()=>{xt(),Tr=["V","I","W","E","F"],Is=(e,s)=>{console.log(`[${Tr[e]},${new Date().toISOString()}]${s}`)},gt=(e,s)=>{qe=e,Qe=s},Xt=(e,s)=>{let t=Rs(e),r=Rs(qe);t>=r&&Is(t,typeof s=="function"?s():s)},Ot=(...e)=>{Qe&&Xt(...e)}}),Us,ar,Se,Pr,pn,we,M,B=f(()=>{Us=class{static calcMatMulShape(e,s){return e[1]!==s[0]?void 0:[e[0],s[1]]}},ar=class{static calcShape(e,s,t=!1){let r=e.length,o=s.length;if(r===0)return s;if(o===0)return e;let i=Math.max(e.length,s.length),a=new Array(i);if(t){if(r<2||o<2)return;let l=Us.calcMatMulShape([e[r-2],e[r-1]],[s[o-2],s[o-1]]);if(l===void 0)return;[a[i-2],a[i-1]]=l}for(let l=t?3:1;l<=i;l++){let d=r-l<0?1:e[r-l],u=o-l<0?1:s[o-l];if(d!==u&&d>1&&u>1)return;let p=Math.max(d,u);if(d&&u)a[i-l]=Math.max(d,u);else{if(p>1)return;a[i-l]=0}}return a}static isValidBroadcast(e,s){let t=e.length,r=s.length;if(t>r)return!1;for(let o=1;o<=t;o++)if(e[t-o]!==1&&e[t-o]!==s[r-o])return!1;return!0}},Se=class bp{static size(s){return bp.getSizeFromDimensionRange(s,0,s.length)}static convertShape(s,t=4){let r=s.length;if(r===0)return[];let o=new Array(r),i=r-1;for(;i>=0;){if(s[i]%t===0){o[i]=s[i]/t;break}if(t%s[i]!==0)throw new Error("cannot convert shape");o[i]=1,t/=s[i],i--}for(i--;i>=0;i--)o[i]=s[i];return o}static sizeFromDimension(s,t){if(t<0||t>s.length)throw new Error(`invalid dimension of ${t} for sizeFromDimension as Tensor has ${s.length} dimensions.`);return bp.getSizeFromDimensionRange(s,t,s.length)}static sizeToDimension(s,t){if(t<0||t>s.length)throw new Error(`invalid dimension of ${t} for sizeToDimension as Tensor has ${s.length} dimensions.`);return bp.getSizeFromDimensionRange(s,0,t)}static getSizeFromDimensionRange(s,t,r){let o=1;for(let i=t;i<r;i++){if(s[i]<0)throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");o*=Number(s[i])}return o}static computeStrides(s){let t=s.length;if(t===0)return[];if(t===1)return[1];let r=new Array(t);r[t-1]=1,r[t-2]=s[t-1];for(let o=t-3;o>=0;--o)r[o]=r[o+1]*s[o+1];return r}static normalizeAxis(s,t){if(s<-t&&s>=t)throw new Error("unsupported axis for this operation.");return s<0?s+t:s}static normalizeAxes(s,t){return s.map(r=>this.normalizeAxis(r,t??s.length))}static sortBasedOnPerm(s,t){return t?t.map(r=>s[r]):s.slice().reverse()}static padShape(s,t){let r=s.length;return s.map((o,i)=>o+t[i]+t[i+r])}static areEqual(s,t){return s.length!==t.length?!1:s.every((r,o)=>r===t[o])}},Pr=class uu{static adjustPoolAttributes(s,t,r,o,i,a){if(!s&&r.length!==t.length-2)throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");if(s)for(let l=0;l<t.length-2;l++)l>=r.length?r.push(t[l+2]):r[l]=t[l+2];for(let l=0;l<r.length;l++)if(l<o.length){if(o[l]<0)throw new Error("strides should be greater than or equal to 1")}else o.push(1);for(let l=0;l<r.length;l++)if(l<i.length){if(i[l]<0)throw new Error("dilations should be greater than or equal to 1")}else i.push(1);for(let l=0;l<r.length*2;l++)if(l<a.length){if(a[l]<0)throw new Error("pad should be greater than or equal to 1")}else a.push(0);for(let l=0;l<r.length;l++){if(r[l]<=0)throw new Error("kernel shapes need to be greater than 0");if(a[l]>=r[l]||a[l+r.length]>=r[l])throw new Error("pads should be smaller than kernel")}}static adjustPadsBasedOnAutoPad(s,t,r,o,i,a,l){if(l){if(i.length!==2*(s.length-2))throw new Error("length of pads should be twice the length of data dimensions");if(t.length!==s.length-2)throw new Error("length of strides should be the length of data dimensions");if(o.length!==s.length-2)throw new Error("length of kernel shapes should be the length of data dimensions");for(let d=0;d<s.length-2;d++)uu.adjustPadAndReturnShape(s[d+(a?1:2)],t[d],r[d],o[d],i,d,d+s.length-2,l)}}static computePoolOutputShape(s,t,r,o,i,a,l){if(t.length<=0)throw new Error("input shape must be of size greater than 0");let d=[t[0],t[1]];return uu.computeShapeHelper(s,t,d,r,o,i,a,l),d}static computeConvOutputShape(s,t,r,o,i,a,l){if(s.length<=0||t.length<=0)throw new Error("invalid input tensor dims or invalid filter tensor dims");let d=[s[0],t[0]];return uu.computeShapeHelper(!1,s,d,r,o,i,a,l),d}static computeShapeHelper(s,t,r,o,i,a,l,d){if(s)for(let u=0;u<t.length-2;u++)r.push(1);else for(let u=0;u<t.length-2;u++)r.push(uu.adjustPadAndReturnShape(t[u+2],o[u],i[u],a[u],l,u,u+t.length-2,d))}static adjustPadAndReturnShape(s,t,r,o,i,a,l,d){let u=r*(o-1)+1;if(d&&d!=="NOTSET")switch(d){case"VALID":return i[a]=0,i[l]=0,Math.floor((s-u)/t+1);case"SAME_LOWER":case"SAME_UPPER":if(r!==1)throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");{let p=((s+t-1)/t-1)*t+o-s;return i[a]=Math.floor(d==="SAME_LOWER"?(p+1)/2:p/2),i[l]=p-i[a],Math.floor((s+p-o)/t+1)}default:throw new Error("Unsupported AutoPad type")}else return Math.floor((s+i[a]+i[l]-u)/t+1)}},pn=class{static getShapeOfGemmResult(e,s,t,r,o){if(e.length!==2||t.length!==2)throw new Error("shape need to be of size 2");let i,a,l;s?(i=e[1],a=e[0]):(i=e[0],a=e[1]);let d=-1;if(r?(l=t[0],d=1):(l=t[1],d=0),t[d]!==a)throw new Error("dimension mismatch");if(i<=0||l<=0||a<=0)throw new Error("invalid shape specified");if(o&&!ar.isValidBroadcast(o,[i,l]))throw new Error("gemm: invalid bias shape for broadcast");return[i,l,a]}},we=-34028234663852886e22,M=34028234663852886e22}),ae,pe=f(()=>{xt(),ae=(e,s)=>new(Bs(s))(e)}),Pe,Be,st,tt,ot,Ye,zt,Ft,Yt,cs,ss=f(()=>{Cs(),Pe=(e,s=!0)=>{if(e.byteLength%8!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 8 (BigInt).");let t=e.byteLength/8,r=new BigInt64Array(e.buffer,e.byteOffset,t),o=new Int32Array(t);for(let i=0;i<t;i++){let a=r[i];if(a>2147483647n||a<-2147483648n)throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${i}: ${a}`);o[i]=Number(a)}return s?new Uint8Array(o.buffer):o},Be=(e,s=!0)=>{if(e.byteLength%4!==0)throw new Error("Invalid Uint8Array length - must be a multiple of 4 (Int32).");let t=e.byteLength/4,r=new Int32Array(e.buffer,e.byteOffset,t),o=BigInt64Array.from(r,BigInt);return s?new Uint8Array(o.buffer):o},st=1,tt=()=>st++,ot=new Map([["float32",32],["float16",16],["int32",32],["uint32",32],["int64",64],["uint64",64],["int8",8],["uint8",8],["int4",4],["uint4",4]]),Ye=(e,s)=>{let t=ot.get(e);if(!t)throw new Error("Unsupported data type.");return s.length>0?Math.ceil(s.reduce((r,o)=>r*o)*t/8):0},zt=class{constructor(e){this.shouldConvertInt64toInt32=!1,this.isInt64ToInt32Converted=!1;let{sessionId:s,context:t,tensor:r,dataType:o,shape:i,shouldConvertInt64toInt32:a=!1}=e;this.sessionId=s,this.mlContext=t,this.mlTensor=r,this.dataType=o,this.tensorShape=i,this.shouldConvertInt64toInt32=a}get tensor(){return this.mlTensor}get type(){return this.dataType}get shape(){return this.tensorShape}get byteLength(){return Ye(this.dataType,this.tensorShape)}destroy(){Ot("verbose",()=>"[WebNN] TensorWrapper.destroy"),this.mlTensor.destroy()}write(e){this.mlContext.writeTensor(this.mlTensor,e)}async read(e,s){if(e){let t=await this.mlContext.readTensor(this.mlTensor),r=Be(new Uint8Array(t));if(s){(s instanceof ArrayBuffer?new Uint8Array(s):new Uint8Array(s.buffer,s.byteOffset,s.byteLength)).set(r);return}else return r.buffer}else return s?this.mlContext.readTensor(this.mlTensor,s):this.mlContext.readTensor(this.mlTensor)}canReuseTensor(e,s,t){return this.mlContext===e&&this.dataType===s&&this.tensorShape.length===t.length&&this.tensorShape.every((r,o)=>r===t[o])}setIsInt64ToInt32Converted(e){this.isInt64ToInt32Converted=e}},Ft=class{constructor(e,s){this.tensorManager=e,this.wrapper=s}get tensorWrapper(){return this.wrapper}releaseTensor(){this.tensorWrapper&&(this.tensorManager.releaseTensor(this.tensorWrapper),this.wrapper=void 0)}async ensureTensor(e,s,t,r){let o=s,i=this.tensorManager.getMLContext(e),a=o==="int64"&&!i.opSupportLimits().input.dataTypes.includes("int64");if(a&&(o="int32",Ot("verbose",()=>"[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32")),this.wrapper){if(this.wrapper.canReuseTensor(i,o,t))return this.wrapper.tensor;if(r){if(this.wrapper.byteLength!==Ye(o,t))throw new Error("Unable to copy data to tensor with different size.");this.activeUpload=new Uint8Array(await this.wrapper.read())}this.tensorManager.releaseTensor(this.wrapper)}let l=typeof MLTensorUsage>"u"?void 0:MLTensorUsage.READ|MLTensorUsage.WRITE;return this.wrapper=await this.tensorManager.getCachedTensor(e,o,t,l,!0,!0,a),r&&this.activeUpload&&(this.wrapper.write(this.activeUpload),this.activeUpload=void 0),this.wrapper.tensor}upload(e){let s=e;if(this.wrapper)if(this.wrapper.shouldConvertInt64toInt32&&(s=Pe(e,!0),this.wrapper.setIsInt64ToInt32Converted(!0)),s.byteLength===this.wrapper.byteLength){this.wrapper.write(s);return}else Ot("verbose",()=>"Data size does not match tensor size. Releasing tensor."),this.releaseTensor();this.activeUpload?this.activeUpload.set(s):this.activeUpload=new Uint8Array(s)}async download(e){if(this.activeUpload){let s=this.wrapper?.isInt64ToInt32Converted?Be(this.activeUpload):this.activeUpload;if(e){e instanceof ArrayBuffer?new Uint8Array(e).set(s):new Uint8Array(e.buffer,e.byteOffset,e.byteLength).set(s);return}else return s.buffer}if(!this.wrapper)throw new Error("Tensor has not been created.");return e?this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32,e):this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32)}},Yt=class{constructor(e){this.backend=e,this.tensorTrackersById=new Map,this.freeTensors=[],this.externalTensors=new Set}getMLContext(e){let s=this.backend.getMLContext(e);if(!s)throw new Error("MLContext not found for session.");return s}reserveTensorId(){let e=tt();return this.tensorTrackersById.set(e,new Ft(this)),e}releaseTensorId(e){let s=this.tensorTrackersById.get(e);s&&(this.tensorTrackersById.delete(e),s.tensorWrapper&&this.releaseTensor(s.tensorWrapper))}async ensureTensor(e,s,t,r,o){Ot("verbose",()=>`[WebNN] TensorManager.ensureTensor {tensorId: ${s}, dataType: ${t}, shape: ${r}, copyOld: ${o}}`);let i=this.tensorTrackersById.get(s);if(!i)throw new Error("Tensor not found.");return i.ensureTensor(e,t,r,o)}upload(e,s){let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");t.upload(s)}async download(e,s){Ot("verbose",()=>`[WebNN] TensorManager.download {tensorId: ${e}, dstBuffer: ${s?.byteLength}}`);let t=this.tensorTrackersById.get(e);if(!t)throw new Error("Tensor not found.");return t.download(s)}releaseTensorsForSession(e){for(let s of this.freeTensors)s.sessionId===e&&s.destroy();this.freeTensors=this.freeTensors.filter(s=>s.sessionId!==e)}registerTensor(e,s,t,r){let o=this.getMLContext(e),i=tt(),a=new zt({sessionId:e,context:o,tensor:s,dataType:t,shape:r});return this.tensorTrackersById.set(i,new Ft(this,a)),this.externalTensors.add(a),i}async getCachedTensor(e,s,t,r,o,i,a=!1){let l=this.getMLContext(e);for(let[u,p]of this.freeTensors.entries())if(p.canReuseTensor(l,s,t)){Ot("verbose",()=>`[WebNN] Reusing tensor {dataType: ${s}, shape: ${t}}`);let w=this.freeTensors.splice(u,1)[0];return w.sessionId=e,w}Ot("verbose",()=>`[WebNN] MLContext.createTensor {dataType: ${s}, shape: ${t}}`);let d=await l.createTensor({dataType:s,shape:t,dimensions:t,usage:r,writable:o,readable:i});return new zt({sessionId:e,context:l,tensor:d,dataType:s,shape:t,shouldConvertInt64toInt32:a})}releaseTensor(e){this.externalTensors.has(e)&&this.externalTensors.delete(e),this.freeTensors.push(e)}},cs=(...e)=>new Yt(...e)}),ms,ds,Ws,zr=f(()=>{xt(),ut(),pe(),ss(),Cs(),ms=new Map([[1,"float32"],[10,"float16"],[6,"int32"],[12,"uint32"],[7,"int64"],[13,"uint64"],[22,"int4"],[21,"uint4"],[3,"int8"],[2,"uint8"],[9,"uint8"]]),ds=(e,s)=>{if(e===s)return!0;if(e===void 0||s===void 0)return!1;let t=Object.keys(e).sort(),r=Object.keys(s).sort();return t.length===r.length&&t.every((o,i)=>o===r[i]&&e[o]===s[o])},Ws=class{constructor(e){this.tensorManager=cs(this),this.mlContextBySessionId=new Map,this.sessionIdsByMLContext=new Map,this.mlContextCache=[],this.sessionGraphInputs=new Map,this.temporaryGraphInputs=[],this.temporarySessionTensorIds=new Map,gt(e.logLevel,!!e.debug)}get currentSessionId(){if(this.activeSessionId===void 0)throw new Error("No active session");return this.activeSessionId}onRunStart(e){Ot("verbose",()=>`[WebNN] onRunStart {sessionId: ${e}}`),this.activeSessionId=e}onRunEnd(e){Ot("verbose",()=>`[WebNN] onRunEnd {sessionId: ${e}}`);let s=this.temporarySessionTensorIds.get(e);if(s){for(let t of s)Ot("verbose",()=>`[WebNN] releasing temporary tensor {tensorId: ${t}}`),this.tensorManager.releaseTensorId(t);this.temporarySessionTensorIds.delete(e),this.activeSessionId=void 0}}async createMLContext(e){if(e instanceof GPUDevice){let t=this.mlContextCache.findIndex(r=>r.gpuDevice===e);if(t!==-1)return this.mlContextCache[t].mlContext;{let r=await navigator.ml.createContext(e);return this.mlContextCache.push({gpuDevice:e,mlContext:r}),r}}else if(e===void 0){let t=this.mlContextCache.findIndex(r=>r.options===void 0&&r.gpuDevice===void 0);if(t!==-1)return this.mlContextCache[t].mlContext;{let r=await navigator.ml.createContext();return this.mlContextCache.push({mlContext:r}),r}}let s=this.mlContextCache.findIndex(t=>ds(t.options,e));if(s!==-1)return this.mlContextCache[s].mlContext;{let t=await navigator.ml.createContext(e);return this.mlContextCache.push({options:e,mlContext:t}),t}}registerMLContext(e,s){this.mlContextBySessionId.set(e,s);let t=this.sessionIdsByMLContext.get(s);t||(t=new Set,this.sessionIdsByMLContext.set(s,t)),t.add(e),this.temporaryGraphInputs.length>0&&(this.sessionGraphInputs.set(e,this.temporaryGraphInputs),this.temporaryGraphInputs=[])}onReleaseSession(e){this.sessionGraphInputs.delete(e);let s=this.mlContextBySessionId.get(e);if(!s)return;this.tensorManager.releaseTensorsForSession(e),this.mlContextBySessionId.delete(e);let t=this.sessionIdsByMLContext.get(s);if(t.delete(e),t.size===0){this.sessionIdsByMLContext.delete(s);let r=this.mlContextCache.findIndex(o=>o.mlContext===s);r!==-1&&this.mlContextCache.splice(r,1)}}getMLContext(e){return this.mlContextBySessionId.get(e)}reserveTensorId(){return this.tensorManager.reserveTensorId()}releaseTensorId(e){Ot("verbose",()=>`[WebNN] releaseTensorId {tensorId: ${e}}`),this.tensorManager.releaseTensorId(e)}async ensureTensor(e,s,t,r,o){let i=ms.get(t);if(!i)throw new Error(`Unsupported ONNX data type: ${t}`);return this.tensorManager.ensureTensor(e??this.currentSessionId,s,i,r,o)}async createTemporaryTensor(e,s,t){Ot("verbose",()=>`[WebNN] createTemporaryTensor {onnxDataType: ${s}, shape: ${t}}`);let r=ms.get(s);if(!r)throw new Error(`Unsupported ONNX data type: ${s}`);let o=this.tensorManager.reserveTensorId();await this.tensorManager.ensureTensor(e,o,r,t,!1);let i=this.temporarySessionTensorIds.get(e);return i?i.push(o):this.temporarySessionTensorIds.set(e,[o]),o}uploadTensor(e,s){if(!Ce().shouldTransferToMLTensor)throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");Ot("verbose",()=>`[WebNN] uploadTensor {tensorId: ${e}, data: ${s.byteLength}}`),this.tensorManager.upload(e,s)}async downloadTensor(e,s){return this.tensorManager.download(e,s)}createMLTensorDownloader(e,s){return async()=>{let t=await this.tensorManager.download(e);return ae(t,s)}}registerMLTensor(e,s,t,r){let o=ms.get(t);if(!o)throw new Error(`Unsupported ONNX data type: ${t}`);let i=this.tensorManager.registerTensor(e,s,o,r);return Ot("verbose",()=>`[WebNN] registerMLTensor {tensor: ${s}, dataType: ${o}, dimensions: ${r}} -> {tensorId: ${i}}`),i}registerMLConstant(e,s,t,r,o,i,a=!1){if(!i)throw new Error("External mounted files are not available.");let l=e;e.startsWith("./")&&(l=e.substring(2));let d=i.get(l);if(!d)throw new Error(`File with name ${l} not found in preloaded files.`);if(s+t>d.byteLength)throw new Error("Out of bounds: data offset and length exceed the external file data size.");let u=d.slice(s,s+t).buffer,p;switch(o.dataType){case"float32":p=new Float32Array(u);break;case"float16":p=typeof Float16Array<"u"&&Float16Array.from?new Float16Array(u):new Uint16Array(u);break;case"int32":p=new Int32Array(u);break;case"uint32":p=new Uint32Array(u);break;case"int64":a?(p=Pe(new Uint8Array(u),!1),o.dataType="int32"):p=new BigInt64Array(u);break;case"uint64":p=new BigUint64Array(u);break;case"int8":p=new Int8Array(u);break;case"int4":case"uint4":case"uint8":p=new Uint8Array(u);break;default:throw new Error(`Unsupported data type: ${o.dataType} in creating WebNN Constant from external data.`)}return Ot("verbose",()=>`[WebNN] registerMLConstant {dataType: ${o.dataType}, shape: ${o.shape}}} ${a?"(Note: it was int64 data type and registered to int32 as workaround)":""}`),r.constant(o,p)}registerGraphInput(e){this.temporaryGraphInputs.push(e)}isGraphInput(e,s){let t=this.sessionGraphInputs.get(e);return t?t.includes(s):!1}isInt64Supported(e){return!!this.mlContextBySessionId.get(e)?.opSupportLimits().input.dataTypes.includes("int64")}flush(){}}}),_s=f(()=>{}),lr,qt,ns,Ms,Js,Ys,ys,Zs,us,os=f(()=>{Cs(),_s(),lr=new Map([[64,250],[128,200],[256,200],[512,200],[2048,230],[4096,200],[8192,50],[16384,50],[32768,50],[65536,50],[131072,50],[262144,50],[524288,50],[1048576,50],[2097152,30],[4194304,20],[8388608,10],[12582912,10],[16777216,10],[26214400,15],[33554432,22],[44236800,2],[58982400,6],[67108864,6],[134217728,6],[167772160,6]]),qt=[],ns=e=>Math.ceil(Number(e)/16)*16,Ms=e=>{for(let s=0;s<qt.length;s++){let t=qt[s];if(e<=t)return t}return Math.ceil(e/16)*16},Js=1,Ys=()=>Js++,ys=async(e,s,t,r)=>{let o=ns(t),i=e.device.createBuffer({size:o,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});try{let a=e.getCommandEncoder();e.endComputePass(),a.copyBufferToBuffer(s,0,i,0,o),e.flush(),await i.mapAsync(GPUMapMode.READ);let l=i.getMappedRange();if(r){let d=r();return d.set(new Uint8Array(l,0,t)),d}else return new Uint8Array(l.slice(0,t))}finally{i.destroy()}},Zs=class{constructor(e){this.backend=e,this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.buffersPending=[],this.capturedPendingBuffers=new Map;for(let[s]of lr)qt.push(s),this.freeBuffers.set(s,[]),this.freeUniformBuffers.set(s,[]);this.sessionCount=0}upload(e,s){let t=s.buffer,r=s.byteOffset,o=s.byteLength,i=ns(o),a=this.storageCache.get(e);if(!a)throw new Error("gpu data for uploading does not exist");if(Number(a.originalSize)!==o)throw new Error(`inconsistent data size. gpu data size=${a.originalSize}, data size=${o}`);let l=this.backend.device.createBuffer({mappedAtCreation:!0,size:i,usage:GPUBufferUsage.MAP_WRITE|GPUBufferUsage.COPY_SRC}),d=l.getMappedRange();new Uint8Array(d).set(new Uint8Array(t,r,o)),l.unmap();let u=this.backend.device.createCommandEncoder();u.copyBufferToBuffer(l,0,a.gpuData.buffer,0,i),this.backend.device.queue.submit([u.finish()]),l.destroy(),Ot("verbose",()=>`[WebGPU] GpuDataManager.upload(id=${e})`)}memcpy(e,s){let t=this.storageCache.get(e);if(!t)throw new Error("source gpu data for memcpy does not exist");let r=this.storageCache.get(s);if(!r)throw new Error("destination gpu data for memcpy does not exist");if(t.originalSize!==r.originalSize)throw new Error("inconsistent source and destination gpu data size");let o=ns(t.originalSize),i=this.backend.getCommandEncoder();this.backend.endComputePass(),i.copyBufferToBuffer(t.gpuData.buffer,0,r.gpuData.buffer,0,o)}registerExternalBuffer(e,s,t){let r;if(t){if(r=t[0],e===t[1])return Ot("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${s}) => id=${r}, buffer is the same, skip.`),r;if(this.backend.capturedCommandList.has(this.backend.currentSessionId))throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`)}else r=Ys();return this.storageCache.set(r,{gpuData:{id:r,type:0,buffer:e},originalSize:s}),Ot("verbose",()=>`[WebGPU] GpuDataManager.registerExternalBuffer(size=${s}) => id=${r}, registered.`),r}unregisterExternalBuffer(e){e!==void 0&&(this.storageCache.delete(e),Ot("verbose",()=>`[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${e}`))}create(e,s=GPUBufferUsage.STORAGE|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST){let t=Ms(e),r,o=(s&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE,i=(s&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM;if(o||i){let l=(o?this.freeBuffers:this.freeUniformBuffers).get(t);l?l.length>0?r=l.pop():r=this.backend.device.createBuffer({size:t,usage:s}):r=this.backend.device.createBuffer({size:t,usage:s})}else r=this.backend.device.createBuffer({size:t,usage:s});let a={id:Ys(),type:0,buffer:r};return this.storageCache.set(a.id,{gpuData:a,originalSize:Number(e)}),Ot("verbose",()=>`[WebGPU] GpuDataManager.create(size=${e}) => id=${a.id}`),a}get(e){return this.storageCache.get(e)?.gpuData}release(e){let s=typeof e=="bigint"?Number(e):e,t=this.storageCache.get(s);if(!t){if(this.storageCache.size===0)return 0;throw new Error("releasing data does not exist")}return Ot("verbose",()=>`[WebGPU] GpuDataManager.release(id=${s}), gpuDataId=${t.gpuData.id}`),this.storageCache.delete(s),this.buffersPending.push(t.gpuData.buffer),t.originalSize}async download(e,s){let t=this.storageCache.get(Number(e));if(!t)throw new Error("data does not exist");await ys(this.backend,t.gpuData.buffer,t.originalSize,s)}refreshPendingBuffers(){if(this.buffersPending.length!==0)if(this.backend.sessionStatus==="default"){for(let e of this.buffersPending){let s=lr.get(e.size);if((e.usage&GPUBufferUsage.STORAGE)===GPUBufferUsage.STORAGE){let t=this.freeBuffers.get(e.size)||[];s===void 0||t.length>=s?e.destroy():t.push(e)}else if((e.usage&GPUBufferUsage.UNIFORM)===GPUBufferUsage.UNIFORM){let t=this.freeUniformBuffers.get(e.size)||[];s===void 0||t.length>=s?e.destroy():t.push(e)}else e.destroy()}this.buffersPending=[]}else{let e=this.capturedPendingBuffers.get(this.backend.currentSessionId);e||(e=[],this.capturedPendingBuffers.set(this.backend.currentSessionId,e));for(let s of this.buffersPending)e.push(s);this.buffersPending=[]}}dispose(){this.freeBuffers.forEach(e=>{e.forEach(s=>{s.destroy()})}),this.freeUniformBuffers.forEach(e=>{e.forEach(s=>{s.destroy()})}),this.storageCache.forEach(e=>{e.gpuData.buffer.destroy()}),this.capturedPendingBuffers.forEach(e=>{e.forEach(s=>{s.destroy()})}),this.storageCache=new Map,this.freeBuffers=new Map,this.freeUniformBuffers=new Map,this.capturedPendingBuffers=new Map}onCreateSession(){this.sessionCount+=1}onReleaseSession(e){let s=this.capturedPendingBuffers.get(e);s&&(s.forEach(t=>{t.destroy()}),this.capturedPendingBuffers.delete(e)),this.sessionCount-=1,this.sessionCount===0&&(Ot("warning",()=>"[WebGPU] Clearing webgpu buffer cache"),this.storageCache.forEach(t=>{t.gpuData.buffer.destroy()}),this.storageCache=new Map)}},us=(...e)=>new Zs(...e)}),is,Ct,Wt=f(()=>{is=class{constructor(e){Object.assign(this,e)}get cacheKey(){return this.key||(this.key=Object.getOwnPropertyNames(this).sort().map(e=>`${this[e]}`).join(";")),this.key}},Ct=e=>new is(e)}),er,tr,ps,Ps,bt,Jt,Jn,sr,_r,yt,Hr,Le,wt,Br,Yn,Gi,Ki,It=f(()=>{xt(),B(),er=64,tr=(e,s)=>{if(s===3)throw new Error("vec3 has same alignment as vec4, use vec4 instead");switch(Number(e)){case 10:return s>1?`vec${s}<f16>`:"f16";case 1:return s>1?`vec${s}<f32>`:"f32";case 6:return s>1?`vec${s}<i32>`:"i32";case 12:return s>1?`vec${s}<u32>`:"u32";case 7:if(s>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","i32"];case 13:if(s>1)throw new Error("currently not supported vecX of uint64 yet");return["vec2<u32>","u32"];case 9:if(s!==4)throw new Error("bool must be vec4");return["u32","vec4<bool>"];case 22:return"i32";case 21:return"u32";default:throw new Error(`Unknown data type: ${e}`)}},ps=(e,s=1)=>{let t=tr(e,s);return typeof t=="string"?t:t[0]},Ps=(e,s=1)=>{let t=tr(e,s);return typeof t=="string"?t:t[1]},bt=(...e)=>{let s=[];return e.forEach(t=>{t.length!==0&&s.push({type:12,data:t},{type:12,data:Se.computeStrides(t)})}),s},Jt=e=>e%4===0?4:e%2===0?2:1,Jn=(e="f32",s,t="0")=>!s||s===1?`${e}(${t})`:`vec${s}<${e}>(${t})`,sr=(e,s,t)=>e==="f32"?t:s===1?`f32(${t})`:`vec${s}<f32>(${t})`,_r=(e,s)=>s===4?`(${e}.x + ${e}.y + ${e}.z + ${e}.w)`:s===2?`(${e}.x + ${e}.y)`:s===3?`(${e}.x + ${e}.y + ${e}.z)`:e,yt=(e,s,t,r)=>e.startsWith("uniforms.")&&t>4?typeof s=="string"?r==="f16"?`${e}[(${s}) / 8][(${s}) % 8 / 4][(${s}) % 8 % 4]`:`${e}[(${s}) / 4][(${s}) % 4]`:r==="f16"?`${e}[${Math.floor(s/8)}][${Math.floor(s%8/4)}][${s%8%4}]`:`${e}[${Math.floor(s/4)}][${s%4}]`:t>1?`${e}[${s}]`:e,Hr=(e,s,t,r,o)=>{let i=typeof t=="number",a=i?t:t.length,l=[...new Array(a).keys()],d=a<2?"u32":a<=4?`vec${a}<u32>`:`array<u32, ${a}>`,u=tr(s,o),p=typeof u=="string"?u:u[1],w=typeof u=="string"?u:u[0],v={indices:d,value:p,storage:w,tensor:s},P=Ve=>typeof Ve=="string"?Ve:`${Ve}u`,C={offsetToIndices:!1,indicesToOffset:!1,broadcastedIndicesToOffset:!1,set:!1,setByIndices:!1,get:!1,getByIndices:!1},A=i?"uniforms.":"",H=`${A}${e}_shape`,z=`${A}${e}_strides`,k="";for(let Ve=0;Ve<a-1;Ve++)k+=`
    let dim${Ve} = current / ${yt(z,Ve,a)};
    let rest${Ve} = current % ${yt(z,Ve,a)};
    indices[${Ve}] = dim${Ve};
    current = rest${Ve};
    `;k+=`indices[${a-1}] = current;`;let se=a<2?"":`
  fn o2i_${e}(offset: u32) -> ${v.indices} {
    var indices: ${v.indices};
    var current = offset;
    ${k}
    return indices;
  }`,Q=Ve=>(C.offsetToIndices=!0,a<2?Ve:`o2i_${e}(${Ve})`),ce=[];if(a>=2)for(let Ve=a-1;Ve>=0;Ve--)ce.push(`${yt(z,Ve,a)} * (indices[${Ve}])`);let ye=a<2?"":`
  fn i2o_${e}(indices: ${v.indices}) -> u32 {
    return ${ce.join("+")};
  }`,ge=Ve=>(C.indicesToOffset=!0,a<2?Ve:`i2o_${e}(${Ve})`),Ie=(...Ve)=>a===0?"0u":`${v.indices}(${Ve.map(P).join(",")})`,Ae=(Ve,it)=>a<2?`${Ve}`:`${yt(Ve,it,a)}`,Je=(Ve,it,$t)=>a<2?`${Ve}=${$t};`:`${yt(Ve,it,a)}=${$t};`,ht={},vt=(Ve,it)=>{C.broadcastedIndicesToOffset=!0;let $t=`${it.name}broadcastedIndicesTo${e}Offset`;if($t in ht)return`${$t}(${Ve})`;let jt=[];for(let hs=a-1;hs>=0;hs--){let Or=it.indicesGet("outputIndices",hs+it.rank-a);jt.push(`${Ae(z,hs)} * (${Or} % ${Ae(H,hs)})`)}return ht[$t]=`fn ${$t}(outputIndices: ${it.type.indices}) -> u32 {
             return ${jt.length>0?jt.join("+"):"0u"};
           }`,`${$t}(${Ve})`},Xe=(Ve,it)=>(()=>{if(v.storage===v.value)return`${e}[${Ve}]=${it};`;if(v.storage==="vec2<u32>"&&v.value==="i32")return`${e}[${Ve}]=vec2<u32>(u32(${it}), select(0u, 0xFFFFFFFFu, ${it} < 0));`;if(v.storage==="vec2<u32>"&&v.value==="u32")return`${e}[${Ve}]=vec2<u32>(u32(${it}), 0u);`;if(v.storage==="u32"&&v.value==="vec4<bool>")return`${e}[${Ve}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${it}));`;throw new Error(`not supported combination of storage type ${v.storage} and value type ${v.value} yet`)})(),kt=Ve=>(()=>{if(v.storage===v.value)return`${e}[${Ve}]`;if(v.storage==="vec2<u32>"&&v.value==="i32")return`i32(${e}[${Ve}].x)`;if(v.storage==="vec2<u32>"&&v.value==="u32")return`u32(${e}[${Ve}].x)`;if(v.storage==="u32"&&v.value==="vec4<bool>")return`vec4<bool>(bool(${e}[${Ve}] & 0xFFu), bool(${e}[${Ve}] & 0xFF00u), bool(${e}[${Ve}] & 0xFF0000u), bool(${e}[${Ve}] & 0xFF000000u))`;throw new Error(`not supported combination of storage type ${v.storage} and value type ${v.value} yet`)})(),Bt=a<2?"":`
  fn get_${e}ByIndices(indices: ${v.indices}) -> ${p} {
    return ${kt(`i2o_${e}(indices)`)};
  }`,rt=a<2?"":(()=>{let Ve=l.map($t=>`d${$t}: u32`).join(", "),it=l.map($t=>`d${$t}`).join(", ");return`
  fn get_${e}(${Ve}) -> ${p} {
    return get_${e}ByIndices(${Ie(it)});
  }`})(),Pt=(...Ve)=>{if(Ve.length!==a)throw new Error(`indices length must be ${a}`);let it=Ve.map(P).join(",");return a===0?kt("0u"):a===1?kt(it[0]):(C.get=!0,C.getByIndices=!0,C.indicesToOffset=!0,`get_${e}(${it})`)},Lt=Ve=>a<2?kt(Ve):(C.getByIndices=!0,C.indicesToOffset=!0,`get_${e}ByIndices(${Ve})`),Et=a<2?"":`
  fn set_${e}ByIndices(indices: ${v.indices}, value: ${p}) {
    ${Xe(`i2o_${e}(indices)`,"value")}
  }`,Rt=a<2?"":(()=>{let Ve=l.map($t=>`d${$t}: u32`).join(", "),it=l.map($t=>`d${$t}`).join(", ");return`
  fn set_${e}(${Ve}, value: ${p}) {
    set_${e}ByIndices(${Ie(it)}, value);
  }`})();return{impl:()=>{let Ve=[],it=!1;return C.offsetToIndices&&(Ve.push(se),it=!0),C.indicesToOffset&&(Ve.push(ye),it=!0),C.broadcastedIndicesToOffset&&(Object.values(ht).forEach($t=>Ve.push($t)),it=!0),C.set&&(Ve.push(Rt),it=!0),C.setByIndices&&(Ve.push(Et),it=!0),C.get&&(Ve.push(rt),it=!0),C.getByIndices&&(Ve.push(Bt),it=!0),!i&&it&&Ve.unshift(`const ${H} = ${v.indices}(${t.join(",")});`,`const ${z} = ${v.indices}(${Se.computeStrides(t).join(",")});`),Ve.join(`
`)},type:v,offsetToIndices:Q,indicesToOffset:ge,broadcastedIndicesToOffset:vt,indices:Ie,indicesGet:Ae,indicesSet:Je,set:(...Ve)=>{if(Ve.length!==a+1)throw new Error(`indices length must be ${a}`);let it=Ve[a];if(typeof it!="string")throw new Error("value must be string");let $t=Ve.slice(0,a).map(P).join(",");return a===0?Xe("0u",it):a===1?Xe($t[0],it):(C.set=!0,C.setByIndices=!0,C.indicesToOffset=!0,`set_${e}(${$t}, ${it})`)},setByOffset:Xe,setByIndices:(Ve,it)=>a<2?Xe(Ve,it):(C.setByIndices=!0,C.indicesToOffset=!0,`set_${e}ByIndices(${Ve}, ${it});`),get:Pt,getByOffset:kt,getByIndices:Lt,usage:r,name:e,strides:z,shape:H,rank:a}},Le=(e,s,t,r=1)=>Hr(e,s,t,"input",r),wt=(e,s,t,r=1)=>Hr(e,s,t,"output",r),Br=(e,s,t)=>Hr(e,s,t,"atomicOutput",1),Yn=(e,s,t,r=1)=>Hr(e,s,t,"internal",r),Gi=class{constructor(e,s){this.normalizedDispatchGroup=e,this.limits=s,this.internalVariables=[],this.variables=[],this.uniforms=[],this.variableIndex=0}guardAgainstOutOfBoundsWorkgroupSizes(e){return`if (global_idx >= ${typeof e=="number"?`${e}u`:e}) { return; }`}mainStart(e=er){let s=typeof e=="number"?e:e[0],t=typeof e=="number"?1:e[1],r=typeof e=="number"?1:e[2];if(s>this.limits.maxComputeWorkgroupSizeX||t>this.limits.maxComputeWorkgroupSizeY||r>this.limits.maxComputeWorkgroupSizeZ)throw new Error(`workgroup size [${s}, ${t}, ${r}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);if(s*t*r>this.limits.maxComputeInvocationsPerWorkgroup)throw new Error(`workgroup size [${s}, ${t}, ${r}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);let o=this.normalizedDispatchGroup[1]===1&&this.normalizedDispatchGroup[2]===1,i=o?`@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>`:`@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`,a=o?`let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;`:`let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${s*t*r}u + local_idx;`;return`@compute @workgroup_size(${s}, ${t}, ${r})
  fn main(${i}) {
    ${a}
  `}appendVariableUniforms(e){e.rank!==0&&(e.shape.startsWith("uniforms.")&&this.uniforms.push({name:e.shape.replace("uniforms.",""),type:"u32",length:e.rank}),e.strides.startsWith("uniforms.")&&this.uniforms.push({name:e.strides.replace("uniforms.",""),type:"u32",length:e.rank}))}declareVariable(e,s){if(e.usage==="internal")throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");this.variables.push(e),this.appendVariableUniforms(e);let t=e.usage==="input"?"read":"read_write",r=e.usage==="atomicOutput"?"atomic<i32>":e.type.storage;return`@group(0) @binding(${s}) var<storage, ${t}> ${e.name}: array<${r}>;`}declareVariables(...e){return e.map(s=>this.declareVariable(s,this.variableIndex++)).join(`
`)}registerInternalVariable(e){if(e.usage!=="internal")throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");this.internalVariables.push(e),this.appendVariableUniforms(e)}registerInternalVariables(...e){return e.forEach(s=>this.registerInternalVariable(s)),this}registerUniform(e,s,t=1){return this.uniforms.push({name:e,type:s,length:t}),this}registerUniforms(e){return this.uniforms=this.uniforms.concat(e),this}uniformDeclaration(){if(this.uniforms.length===0)return"";let e=[];for(let{name:s,type:t,length:r}of this.uniforms)if(r&&r>4)t==="f16"?e.push(`@align(16) ${s}:array<mat2x4<${t}>, ${Math.ceil(r/8)}>`):e.push(`${s}:array<vec4<${t}>, ${Math.ceil(r/4)}>`);else{let o=r==null||r===1?t:`vec${r}<${t}>`;e.push(`${s}:${o}`)}return`
      struct Uniforms { ${e.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`}get additionalImplementations(){return this.uniformDeclaration()+this.variables.map(e=>e.impl()).join(`
`)+this.internalVariables.map(e=>e.impl()).join(`
`)}get variablesInfo(){if(this.uniforms.length===0)return;let e=s=>[12,10,1,6][["u32","f16","f32","i32"].indexOf(s)];return this.uniforms.map(s=>[e(s.type),s.length??1])}},Ki=(e,s)=>new Gi(e,s)}),Hi,hn,qi,Qi,Zn,Xi,As,Ji,eo,Er=f(()=>{xt(),B(),Wt(),It(),Hi=(e,s)=>{if(!e||e.length!==1)throw new Error("Transpose requires 1 input.");if(s.length!==0&&s.length!==e[0].dims.length)throw new Error(`perm size ${s.length} does not match input rank ${e[0].dims.length}`)},hn=(e,s)=>s.length!==0?s:[...new Array(e).keys()].reverse(),qi=(e,s)=>Se.sortBasedOnPerm(e,hn(e.length,s)),Qi=(e,s,t,r)=>{let o=`fn perm(i: ${r.type.indices}) -> ${t.type.indices} {
    var a: ${t.type.indices};`;for(let i=0;i<s;++i)o+=`a[${e[i]}]=i[${i}];`;return o+="return a;}"},Zn=(e,s)=>{let t=[],r=[];for(let o=0;o<e.length;++o)e[o]!==1&&t.push(e[o]),e[s[o]]!==1&&r.push(s[o]);return{newShape:t,newPerm:r}},Xi=(e,s)=>{let t=0;for(let r=0;r<e.length;++r)if(s[e[r]]!==1){if(e[r]<t)return!1;t=e[r]}return!0},As=(e,s)=>{let t=e.dataType,r=e.dims.length,o=hn(r,s),i=qi(e.dims,o),a=e.dims,l=i,d=r<2||Xi(o,e.dims),u;if(d)return u=C=>{let A=Le("input",t,a,4),H=wt("output",t,l,4);return`
  ${C.registerUniform("output_size","u32").declareVariables(A,H)}
  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`},{name:"TransposeCopy",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let C=Se.size(i);return{outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(C/64/4)},programUniforms:[{type:12,data:Math.ceil(C/4)}]}},getShaderSource:u};let{newShape:p,newPerm:w}=Zn(e.dims,o),v=Se.areEqual(w,[2,3,1]),P=Se.areEqual(w,[3,1,2]);if(p.length===2||v||P){a=v?[p[0],p[1]*p[2]]:P?[p[0]*p[1],p[2]]:p,l=[a[1],a[0]];let C=16;return u=A=>{let H=Le("a",t,a.length),z=wt("output",t,l.length);return`
  ${A.registerUniform("output_size","u32").declareVariables(H,z)}
  var<workgroup> tile : array<array<${z.type.value}, ${C+1}>, ${C}>;
  ${A.mainStart([C,C,1])}
    let stride = (uniforms.output_shape[1] - 1) / ${C} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${C}u + local_id.x;
    let input_row = workgroup_id_x * ${C}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${H.getByIndices(`${H.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${C}u + local_id.x;
    let output_row = workgroup_id_y * ${C}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${z.setByIndices(`${z.type.indices}(output_row, output_col)`,"tile[local_id.x][local_id.y]")}
    }
  }`},{name:"TransposeShared",shaderCache:{inputDependencies:["type"]},getRunData:()=>{let A=Se.size(i);return{outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(l[1]/C),y:Math.ceil(l[0]/C)},programUniforms:[{type:12,data:A},...bt(a,l)]}},getShaderSource:u}}return u=C=>{let A=Le("a",t,a.length),H=wt("output",t,l.length);return`
  ${C.registerUniform("output_size","u32").declareVariables(A,H)}

  ${Qi(o,r,A,H)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${H.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${H.setByOffset("global_idx",A.getByIndices("aIndices"))}
  }`},{name:"Transpose",shaderCache:{hint:`${s}`,inputDependencies:["rank"]},getRunData:()=>{let C=Se.size(i);return{outputs:[{dims:i,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(C/64)},programUniforms:[{type:12,data:C},...bt(a,l)]}},getShaderSource:u}},Ji=(e,s)=>{Hi(e.inputs,s.perm),e.compute(As(e.inputs[0],s.perm))},eo=e=>Ct({perm:e.perm})}),Yi,to,so,mn,Zi,ea,ta,sa,ra,na,Gs,oa,ro,ia,_n,no,aa,oo,Cr,la,mu,_u=f(()=>{xt(),B(),It(),po(),Er(),Yi={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate * candidate",logSumExp:"bestValue + exp(candidate)",l1:"bestValue + abs(candidate)",l2:"bestValue + candidate * candidate",logSum:"bestValue + candidate"},to={max:"select(bestValue, candidate, candidate > bestValue)",min:"select(bestValue, candidate, candidate < bestValue)",mean:"bestValue + candidate",sum:"bestValue + candidate",prod:"bestValue * candidate",sumSquare:"bestValue + candidate",logSumExp:"bestValue + candidate",l1:"bestValue + candidate",l2:"bestValue + candidate",logSum:"bestValue + candidate"},so={max:"_A[offset]",min:"_A[offset]",mean:"0",sum:"0",prod:"1",sumSquare:"0",logSumExp:"0",l1:"0",l2:"0",logSum:"0"},mn={max:"bestValue",min:"bestValue",sum:"bestValue",prod:"bestValue",sumSquare:"bestValue",logSumExp:"log(bestValue)",l1:"bestValue",l2:"sqrt(bestValue)",logSum:"log(bestValue)"},Zi=(e,s)=>{let t=[];for(let r=s-e;r<s;++r)t.push(r);return t},ea=(e,s)=>{let t=[],r=e.length;for(let i=0;i<r;i++)s.indexOf(i)===-1&&t.push(e[i]);let o=s.map(i=>e[i]);return[t,o]},ta=(e,s)=>{let t=e.length+s.length,r=[],o=0;for(let i=0;i<t;i++)s.indexOf(i)===-1?r.push(e[o++]):r.push(1);return r},sa=(e,s)=>{for(let t=0;t<e.length;++t)if(e[e.length-t-1]!==s-1-t)return!1;return!0},ra=(e,s)=>{let t=[];if(!sa(e,s)){for(let r=0;r<s;++r)e.indexOf(r)===-1&&t.push(r);e.forEach(r=>t.push(r))}return t},na=(e,s,t,r,o,i,a)=>{let l=t[0].dims,d=Se.size(i),u=Se.size(a),p=Le("_A",t[0].dataType,l),w=wt("output",o,i),v=64;d===1&&(v=256);let P=`
          var<workgroup> aBestValues : array<f32, ${v}>;
       `,C=A=>`
        ${A.registerUniform("reduceSize","u32").declareVariables(p,w)}
        ${P}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${A.mainStart(v)}

          let outputIndex = global_idx / ${v};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${so[r]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${v}) {
           let candidate = f32(${p.getByOffset("offset + k")});
           bestValue = ${Yi[r]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${v}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${to[r]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${w.setByOffset("outputIndex",`${r==="mean"?`${w.type.storage}(bestValue / f32(uniforms.reduceSize))`:`${w.type.storage}(${mn[r]})`}`)};
         }
        }`;return{name:e,shaderCache:{hint:`${s};${v}`,inputDependencies:["type"]},getShaderSource:C,getRunData:()=>({outputs:[{dims:i,dataType:o}],dispatchGroup:{x:d},programUniforms:[{type:12,data:u}]})}},Gs=(e,s,t,r)=>{let o=e.inputs.length===1?t:io(e.inputs,t),i=o.axes;i.length===0&&!o.noopWithEmptyAxes&&(i=e.inputs[0].dims.map((P,C)=>C));let a=Se.normalizeAxes(i,e.inputs[0].dims.length),l=a,d=e.inputs[0],u=ra(l,e.inputs[0].dims.length);u.length>0&&(d=e.compute(As(e.inputs[0],u),{inputs:[0],outputs:[-1]})[0],l=Zi(l.length,d.dims.length));let[p,w]=ea(d.dims,l),v=p;o.keepDims&&(v=ta(p,a)),e.compute(na(s,o.cacheKey,[d],r,e.inputs[0].dataType,v,w),{inputs:[d]})},oa=(e,s)=>{Gs(e,"ReduceMeanShared",s,"mean")},ro=(e,s)=>{Gs(e,"ReduceL1Shared",s,"l1")},ia=(e,s)=>{Gs(e,"ReduceL2Shared",s,"l2")},_n=(e,s)=>{Gs(e,"ReduceLogSumExpShared",s,"logSumExp")},no=(e,s)=>{Gs(e,"ReduceMaxShared",s,"max")},aa=(e,s)=>{Gs(e,"ReduceMinShared",s,"min")},oo=(e,s)=>{Gs(e,"ReduceProdShared",s,"prod")},Cr=(e,s)=>{Gs(e,"ReduceSumShared",s,"sum")},la=(e,s)=>{Gs(e,"ReduceSumSquareShared",s,"sumSquare")},mu=(e,s)=>{Gs(e,"ReduceLogSumShared",s,"logSum")}}),rr,ca,qr,io,Ks,da,ua,pa,fn,ha,ma,_a,ao,fa,ga,Ns,wa,Ma,lo,ya,ba,co,va,xa,uo,Ta,po=f(()=>{xt(),B(),Wt(),It(),_u(),rr=e=>{if(!e||e.length===0||e.length>2)throw new Error("Reduce op requires 1 or 2 inputs.");if(e.length===2&&e[1].dims.length!==1)throw new Error("Invalid axes input dims.")},ca=e=>["","",`var value = ${e.getByIndices("input_indices")};`,""],qr=(e,s,t,r,o,i,a=!1,l=!1)=>{let d=[],u=t[0].dims,p=u.length,w=Se.normalizeAxes(o,p),v=!l&&w.length===0;u.forEach((A,H)=>{v||w.indexOf(H)>=0?a&&d.push(1):d.push(A)});let P=d.length,C=Se.size(d);return{name:e,shaderCache:s,getShaderSource:A=>{let H=[],z=Le("_A",t[0].dataType,p),k=wt("output",i,P),se=r(z,k,w),Q=se[2];for(let ce=0,ye=0;ce<p;ce++)v||w.indexOf(ce)>=0?(a&&ye++,Q=`for(var j${ce}: u32 = 0; j${ce} < ${u[ce]}; j${ce}++) {
                  ${se[2].includes("last_index")?`let last_index = j${ce};`:""}
                  ${z.indicesSet("input_indices",ce,`j${ce}`)}
                  ${Q}
                }`):(H.push(`${z.indicesSet("input_indices",ce,k.indicesGet("output_indices",ye))};`),ye++);return`

        ${A.registerUniform("output_size","u32").declareVariables(z,k)}

        ${A.mainStart()}
          ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${z.type.indices};
          let output_indices = ${k.offsetToIndices("global_idx")};

          ${H.join(`
`)}
          ${se[0]}       // init ops for reduce max/min
          ${se[1]}
          ${Q}
          ${se[3]}
          ${se.length===4?k.setByOffset("global_idx","value"):se.slice(4).join(`
`)}
        }`},getRunData:()=>({outputs:[{dims:d,dataType:i}],dispatchGroup:{x:Math.ceil(C/64)},programUniforms:[{type:12,data:C},...bt(u,d)]})}},io=(e,s)=>{let t=[];return e[1].dims[0]>0&&e[1].getBigInt64Array().forEach(r=>t.push(Number(r))),Ct({axes:t,keepDims:s.keepDims,noopWithEmptyAxes:s.noopWithEmptyAxes})},Ks=(e,s,t,r)=>{let o=e.inputs,i=o.length===1?t:io(o,t);e.compute(qr(s,{hint:i.cacheKey,inputDependencies:["rank"]},[o[0]],i.noopWithEmptyAxes&&i.axes.length===0?ca:r,i.axes,o[0].dataType,i.keepDims,i.noopWithEmptyAxes),{inputs:[0]})},da=(e,s)=>{rr(e.inputs),Ks(e,"ReduceLogSum",s,(t,r)=>[`var value = ${r.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,"value = log(value);"])},ua=(e,s)=>{rr(e.inputs),Ks(e,"ReduceL1",s,(t,r)=>[`var value = ${r.type.storage}(0);`,"",`value += abs(${t.getByIndices("input_indices")});`,""])},pa=(e,s)=>{rr(e.inputs),Ks(e,"ReduceL2",s,(t,r)=>[`var t = ${r.type.value}(0); var value = ${r.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += (t * t);`,"value = sqrt(value);"])},fn=(e,s)=>{rr(e.inputs),Ks(e,"ReduceLogSumExp",s,(t,r)=>[`var value = ${r.type.storage}(0);`,"",`value += exp(${t.getByIndices("input_indices")});`,"value = log(value);"])},ha=(e,s)=>{rr(e.inputs),Ks(e,"ReduceMax",s,(t,r,o)=>{let i=[];for(let a=0;a<t.rank;a++)(o.indexOf(a)>=0||o.length===0)&&i.push(t.indicesSet("input_indices",a,0));return[`${i.join(`
`)}`,`var value = ${t.getByIndices("input_indices")};`,`value = max(value, ${t.getByIndices("input_indices")});`,""]})},ma=(e,s)=>{rr(e.inputs),Ks(e,"ReduceMean",s,(t,r,o)=>{let i=1;for(let a=0;a<t.rank;a++)(o.indexOf(a)>=0||o.length===0)&&(i*=e.inputs[0].dims[a]);return["var sum = f32(0);","",`sum += f32(${t.getByIndices("input_indices")});`,`let value = ${r.type.value}(sum / ${i});`]})},_a=(e,s)=>{rr(e.inputs),Ks(e,"ReduceMin",s,(t,r,o)=>{let i=[];for(let a=0;a<t.rank;a++)(o.indexOf(a)>=0||o.length===0)&&i.push(`input_indices[${a}] = 0;`);return[`${i.join(`
`)}`,`var value = ${t.getByIndices("input_indices")};`,`value = min(value, ${t.getByIndices("input_indices")});`,""]})},ao=(e,s)=>{rr(e.inputs),Ks(e,"ReduceProd",s,(t,r)=>[`var value = ${r.type.storage}(1);`,"",`value *= ${t.getByIndices("input_indices")};`,""])},fa=(e,s)=>{rr(e.inputs),Ks(e,"ReduceSum",s,(t,r)=>[`var value = ${r.type.storage}(0);`,"",`value += ${t.getByIndices("input_indices")};`,""])},ga=(e,s)=>{rr(e.inputs),Ks(e,"ReduceSumSquare",s,(t,r)=>[`var t = ${r.type.value}(0); var value = ${r.type.value}(0);`,"",`t = ${t.getByIndices("input_indices")}; value += t * t;`,""])},Ns=(e,s,t)=>{if(s.length===0)return t;let r=1,o=1;for(let i=0;i<s.length;i++)s.indexOf(i)===-1?r*=e[i]:o*=e[i];return o<32&&r>1024},wa=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?ma(e,s):oa(e,s)},Ma=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?ua(e,s):ro(e,s)},lo=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?pa(e,s):ia(e,s)},ya=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?fn(e,s):_n(e,s)},ba=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?ha(e,s):no(e,s)},co=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?_a(e,s):aa(e,s)},va=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?ao(e,s):oo(e,s)},xa=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?fa(e,s):Cr(e,s)},uo=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?ga(e,s):la(e,s)},Ta=(e,s)=>{Ns(e.inputs[0].dims,s.axes,s.noopWithEmptyAxes)?da(e,s):mu(e,s)}}),gn,Pa,Ea,wn,fu=f(()=>{xt(),Wt(),po(),gn=e=>{if(!e||e.length===0||e.length>2)throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");if(e[0].dataType!==1)throw new Error("Invalid input type.")},Pa=(e,s)=>{gn(e.inputs);let t=(r,o,i)=>{let a=[];for(let l=0;l<r.rank;l++)(i.indexOf(l)>=0||i.length===0)&&a.push(`input_indices[${l}] = 0;`);return[`${a.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${r.getByIndices("input_indices")} ${s.selectLastIndex>0?"<=":"<"} value) {
         value = ${r.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",o.setByOffset("global_idx","best_index")]};e.compute(qr("ArgMin",{hint:s.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],t,[s.axis],7,s.keepDims),{inputs:[0]})},Ea=(e,s)=>{gn(e.inputs);let t=(r,o,i)=>{let a=[];for(let l=0;l<r.rank;l++)(i.indexOf(l)>=0||i.length===0)&&a.push(`input_indices[${l}] = 0;`);return[`${a.join(`
`)}`,`var value = ${r.getByIndices("input_indices")};
var best_index : i32 = 0;`,`if (${r.getByIndices("input_indices")} ${s.selectLastIndex>0?">=":">"} value) {
         value = ${r.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,"",o.setByOffset("global_idx","best_index")]};e.compute(qr("argMax",{hint:s.cacheKey,inputDependencies:["rank"]},[e.inputs[0]],t,[s.axis],7,s.keepDims),{inputs:[0]})},wn=e=>Ct(e)}),Ca,Qr,$a,Sa,ho,Xr,ka,Ia,mo=f(()=>{xt(),B(),_s(),It(),Ca=(e,s)=>{let t=e[0],r=e[1],o=e[2],i=e[3],a=e[4],l=e[5];if(a&&l)throw new Error("Attention cannot have both past and attention_bias");if(t.dims.length!==3)throw new Error('Input "input" must have 3 dimensions');let d=t.dims[0],u=t.dims[1],p=t.dims[2];if(o.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimensions');if(r.dims.length!==2)throw new Error('Input "weights" is expected to have 2 dimensions');if(r.dims[0]!==p)throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");if(o.dims[0]!==r.dims[1])throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');let w=o.dims[0]/3,v=w,P=v;if(s.qkvHiddenSizes.length>0){if(s.qkvHiddenSizes.length!==3)throw new Error("qkv_hidden_sizes attribute should have 3 elements");for(let se of s.qkvHiddenSizes)if(se%s.numHeads!==0)throw new Error("qkv_hidden_sizes should be divisible by num_heads");w=s.qkvHiddenSizes[0],v=s.qkvHiddenSizes[1],P=s.qkvHiddenSizes[2]}let C=u;if(w!==v)throw new Error("qkv_hidden_sizes first element should be same as the second");if(o.dims[0]!==w+v+P)throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');let A=0;if(a){if(v!==P)throw new Error('Input "past" expect k_hidden_size == v_hidden_size');if(a.dims.length!==5)throw new Error('Input "past" must have 5 dimensions');if(a.dims[0]!==2)throw new Error('Input "past" first dimension must be 2');if(a.dims[1]!==d)throw new Error('Input "past" second dimension must be batch_size');if(a.dims[2]!==s.numHeads)throw new Error('Input "past" third dimension must be num_heads');if(a.dims[4]!==v/s.numHeads)throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');s.pastPresentShareBuffer||(A=a.dims[3])}let H=C+A,z=-1,k=0;if(i)throw new Error("Mask not supported");if(a)throw new Error("past is not supported");if(l){if(l.dims.length!==4)throw new Error('Input "attention_bias" must have 4 dimensions');if(l.dims[0]!==d||l.dims[1]!==s.numHeads||l.dims[2]!==u||l.dims[3]!==H)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:d,sequenceLength:u,pastSequenceLength:A,kvSequenceLength:C,totalSequenceLength:H,maxSequenceLength:z,inputHiddenSize:p,hiddenSize:w,vHiddenSize:P,headSize:Math.floor(w/s.numHeads),vHeadSize:Math.floor(P/s.numHeads),numHeads:s.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:s.maskFilterValue,maskType:k,scale:s.scale,broadcastResPosBias:!1,passPastInKv:!1,qkvFormat:1}},Qr=(e,s,t)=>s&&e?`
      let total_sequence_length_input = u32(${s.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${e?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       `:`
    ${t?"let past_sequence_length = uniforms.past_sequence_length":""};
    let present_sequence_length = total_sequence_length;
    `,$a=(e,s,t,r,o,i,a,l)=>{let d=Jt(a?1:i),u=64,p=i/d;p<u&&(u=32);let w=Math.ceil(i/d/u),v=[{type:12,data:s},{type:12,data:t},{type:12,data:r},{type:12,data:o},{type:12,data:p},{type:12,data:w}],P=ps(e.dataType,d),C=Ps(1,d),A=["type"];a&&A.push("type"),l&&A.push("type");let H=z=>{let k=wt("x",e.dataType,e.dims,d),se=[k],Q=a?Le("seq_lens",a.dataType,a.dims):void 0;Q&&se.push(Q);let ce=l?Le("total_sequence_length_input",l.dataType,l.dims):void 0;ce&&se.push(ce);let ye=Ps(e.dataType),ge=[{name:"batch_size",type:"u32"},{name:"num_heads",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"sequence_length",type:"u32"},{name:"total_sequence_length",type:"u32"},{name:"elements_per_thread",type:"u32"}];return`
  var<workgroup> thread_max: array<f32, ${u}>;
  var<workgroup> thread_sum: array<f32, ${u}>;
  ${z.registerUniforms(ge).declareVariables(...se)}
  ${z.mainStart([u,1,1])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${Qr(Q,ce,!1)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${u}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${a?"u32(past_sequence_length + workgroup_id.y + 1)":"total_sequence_length"};
    var thread_max_vector = ${C}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${C}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(()=>{switch(d){case 1:return"thread_max_vector";case 2:return"max(thread_max_vector.x, thread_max_vector.y)";case 4:return"max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";default:throw new Error(`Unsupported components: ${d}`)}})()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${u}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${C}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${C}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(()=>{switch(d){case 1:return"sum_vector";case 2:return"sum_vector.x + sum_vector.y";case 4:return"sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";default:throw new Error(`Unsupported components: ${d}`)}})()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${u}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${k.type.value}(${ye}(1.0) / ${ye}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${C}(x[offset + i]);
        x[offset + i] = ${k.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${a?`
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${k.type.value}(${ye}(0));
        }`:""};
  }`};return{name:"AttentionProbsSoftmax",shaderCache:{hint:`${u};${P};${d}`,inputDependencies:A},getShaderSource:H,getRunData:()=>({outputs:[],dispatchGroup:{x:1,y:o,z:s*t},programUniforms:v})}},Sa=(e,s,t,r,o,i,a,l,d)=>{let u=a+i.kvSequenceLength,p=[i.batchSize,i.numHeads,i.sequenceLength,u],w=e>1&&r,v=i.kvNumHeads?i.kvNumHeads:i.numHeads,P=w?[i.batchSize,v,u,i.headSize]:void 0,C=i.nReps?i.nReps:1,A=i.scale===0?1/Math.sqrt(i.headSize):i.scale,H=Jt(i.headSize),z=i.headSize/H,k=12,se={x:Math.ceil(u/k),y:Math.ceil(i.sequenceLength/k),z:i.batchSize*i.numHeads},Q=[{type:12,data:i.sequenceLength},{type:12,data:z},{type:12,data:u},{type:12,data:i.numHeads},{type:12,data:i.headSize},{type:1,data:A},{type:12,data:a},{type:12,data:i.kvSequenceLength},{type:12,data:C}],ce=w&&r&&Se.size(r.dims)>0,ye=["type","type"];ce&&ye.push("type"),o&&ye.push("type"),l&&ye.push("type"),d&&ye.push("type");let ge=[{dims:p,dataType:s.dataType,gpuDataType:0}];w&&ge.push({dims:P,dataType:s.dataType,gpuDataType:0});let Ie=Ae=>{let Je=Le("q",s.dataType,s.dims,H),ht=Le("key",t.dataType,t.dims,H),vt=[Je,ht];if(ce){let Et=Le("past_key",r.dataType,r.dims,H);vt.push(Et)}o&&vt.push(Le("attention_bias",o.dataType,o.dims));let Xe=l?Le("seq_lens",l.dataType,l.dims):void 0;Xe&&vt.push(Xe);let kt=d?Le("total_sequence_length_input",d.dataType,d.dims):void 0;kt&&vt.push(kt);let Bt=wt("output",s.dataType,p),rt=[Bt];w&&rt.push(wt("present_key",s.dataType,P,H));let Pt=Ps(1,H),Lt=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"alpha",type:"f32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${k}u;

  var<workgroup> tileQ: array<${Je.type.storage}, ${k*k}>;
  var<workgroup> tileK: array<${Je.type.storage}, ${k*k}>;
  ${Ae.registerUniforms(Lt).declareVariables(...vt,...rt)}
  ${Ae.mainStart([k,k,1])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${C===1?"headIdx":"headIdx / uniforms.n_reps"};
    let kv_num_heads = ${C===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${Qr(Xe,kt,!0)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${ce&&w?"let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;":""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${w?"let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;":""}
    var value = ${Pt}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${ce&&w?`
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }`:`
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${w?`if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }`:""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${Pt}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(()=>{switch(H){case 1:return"value";case 2:return"value.x + value.y";case 4:return"value.x + value.y + value.z + value.w";default:throw new Error(`Unsupported components: ${H}`)}})()};
        output[outputIdx] = ${Bt.type.value} (sum * uniforms.alpha) + ${o?"attention_bias[outputIdx]":"0.0"};
    }
  }`};return{name:"AttentionProbs",shaderCache:{hint:`${H};${o!==void 0};${r!==void 0};${e}`,inputDependencies:ye},getRunData:()=>({outputs:ge,dispatchGroup:se,programUniforms:Q}),getShaderSource:Ie}},ho=(e,s,t,r,o,i,a=void 0,l=void 0)=>{let d=i+o.kvSequenceLength,u=o.nReps?o.nReps:1,p=o.vHiddenSize*u,w=e>1&&r,v=o.kvNumHeads?o.kvNumHeads:o.numHeads,P=w?[o.batchSize,v,d,o.headSize]:void 0,C=[o.batchSize,o.sequenceLength,p],A=12,H={x:Math.ceil(o.vHeadSize/A),y:Math.ceil(o.sequenceLength/A),z:o.batchSize*o.numHeads},z=[{type:12,data:o.sequenceLength},{type:12,data:d},{type:12,data:o.vHeadSize},{type:12,data:o.numHeads},{type:12,data:o.headSize},{type:12,data:p},{type:12,data:i},{type:12,data:o.kvSequenceLength},{type:12,data:u}],k=w&&r&&Se.size(r.dims)>0,se=["type","type"];k&&se.push("type"),a&&se.push("type"),l&&se.push("type");let Q=[{dims:C,dataType:s.dataType,gpuDataType:0}];w&&Q.push({dims:P,dataType:s.dataType,gpuDataType:0});let ce=ye=>{let ge=Le("probs",s.dataType,s.dims),Ie=Le("v",t.dataType,t.dims),Ae=[ge,Ie];k&&Ae.push(Le("past_value",r.dataType,r.dims));let Je=a?Le("seq_lens",a.dataType,a.dims):void 0;a&&Ae.push(Je);let ht=l?Le("total_sequence_length_input",l.dataType,l.dims):void 0;l&&Ae.push(ht);let vt=[wt("output",s.dataType,C)];w&&vt.push(wt("present_value",s.dataType,P));let Xe=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"v_hidden_size",type:"u32"},{name:"past_sequence_length",type:"u32"},{name:"kv_sequence_length",type:"u32"},{name:"n_reps",type:"u32"}];return`
  const TILE_SIZE = ${A}u;
  var<workgroup> tileQ: array<${ge.type.value}, ${A*A}>;
  var<workgroup> tileV: array<${ge.type.value}, ${A*A}>;
  ${ye.registerUniforms(Xe).declareVariables(...Ae,...vt)}
  ${ye.mainStart([A,A,1])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${u===1?"headIdx":"headIdx / uniforms.n_reps"};
   let kv_num_heads = ${u===1?"uniforms.num_heads":"uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${Qr(Je,ht,!0)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${k&&w?"let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;":""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${w?"let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;":""}
   var value = ${ge.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${k&&w?`
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      `:`
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${w?`
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }`:""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`};return{name:"AttentionScore",shaderCache:{hint:`${r!==void 0};${e}`,inputDependencies:se},getRunData:()=>({outputs:Q,dispatchGroup:H,programUniforms:z}),getShaderSource:ce}},Xr=(e,s,t,r,o,i,a,l,d,u,p=void 0,w=void 0)=>{let v=Math.min(e.outputCount,1+(a?1:0)+(l?1:0)),P=v>1?u.pastSequenceLength:0,C=P+u.kvSequenceLength,A=d&&Se.size(d.dims)>0?d:void 0,H=[s,t];v>1&&a&&Se.size(a.dims)>0&&H.push(a),A&&H.push(A),p&&H.push(p),w&&H.push(w);let z=e.compute(Sa(v,s,t,a,A,u,P,p,w),{inputs:H,outputs:v>1?[-1,1]:[-1]})[0];e.compute($a(z,u.batchSize,u.numHeads,P,u.sequenceLength,C,p,w),{inputs:p&&w?[z,p,w]:[z],outputs:[]});let k=[z,r];v>1&&l&&Se.size(l.dims)>0&&k.push(l),p&&k.push(p),w&&k.push(w),e.compute(ho(v,z,r,l,u,P,p,w),{inputs:k,outputs:v>1?[0,2]:[0]})},ka=(e,s)=>{let t=[s.batchSize,s.numHeads,s.sequenceLength,s.headSize],r=s.sequenceLength,o=s.inputHiddenSize,i=s.headSize,a=12,l={x:Math.ceil(s.headSize/a),y:Math.ceil(s.sequenceLength/a),z:s.batchSize*s.numHeads},d=[e.inputs[0],e.inputs[1],e.inputs[2]],u=[{type:12,data:r},{type:12,data:o},{type:12,data:i},{type:12,data:s.numHeads},{type:12,data:s.headSize},{type:12,data:s.hiddenSize},{type:12,data:s.hiddenSize+s.hiddenSize+s.vHiddenSize}],p=w=>{let v=wt("output_q",d[0].dataType,t),P=wt("output_k",d[0].dataType,t),C=wt("output_v",d[0].dataType,t),A=Le("input",d[0].dataType,d[0].dims),H=Le("weight",d[1].dataType,d[1].dims),z=Le("bias",d[2].dataType,d[2].dims),k=A.type.storage,se=[{name:"M",type:"u32"},{name:"K",type:"u32"},{name:"N",type:"u32"},{name:"num_heads",type:"u32"},{name:"head_size",type:"u32"},{name:"hidden_size",type:"u32"},{name:"ldb",type:"u32"}];return`
  const TILE_SIZE = ${a}u;
  var<workgroup> tileInput: array<${k}, ${a*a}>;
  var<workgroup> tileWeightQ: array<${k}, ${a*a}>;
  var<workgroup> tileWeightK: array<${k}, ${a*a}>;
  var<workgroup> tileWeightV: array<${k}, ${a*a}>;
  ${w.registerUniforms(se).declareVariables(A,H,z,v,P,C)}
  ${w.mainStart([a,a,1])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${k}(0);
    var valueK = ${k}(0);
    var valueV = ${k}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`};return e.compute({name:"AttentionPrepare",shaderCache:{inputDependencies:["type","type","type"]},getRunData:()=>({outputs:[{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0},{dims:t,dataType:e.inputs[0].dataType,gpuDataType:0}],dispatchGroup:l,programUniforms:u}),getShaderSource:p},{inputs:d,outputs:[-1,-1,-1]})},Ia=(e,s)=>{let t=Ca(e.inputs,s),[r,o,i]=ka(e,t);return Xr(e,r,o,i,e.inputs[4],void 0,void 0,void 0,e.inputs[5],t)}}),_o,Aa,Fa,fo,gu=f(()=>{at(),xt(),B(),Wt(),It(),_o=(e,s)=>{if(!e||e.length!==5)throw new Error("BatchNormalization requires 5 inputs");let t=(r,o,i)=>{let a=o.length;if(a!==r.length)throw new Error(`${i}: num dimensions != ${a}`);o.forEach((l,d)=>{if(l!==r[d])throw new Error(`${i}: dim[${d}] do not match`)})};if(e[0].dims.length>1){let r=s.format==="NHWC"?s.spatial?e[0].dims.slice(-1):e[0].dims.slice(-1).concat(e[0].dims.slice(1,e[0].dims.length-1)):e[0].dims.slice(1,s.spatial?2:void 0);t(e[1].dims,r,"Invalid input scale"),t(e[2].dims,r,"Invalid input B"),t(e[3].dims,r,"Invalid input mean"),t(e[4].dims,r,"Invalid input var")}else t(e[1].dims,[1],"Invalid input scale"),t(e[2].dims,[1],"Invalid input B"),t(e[3].dims,[1],"Invalid input mean"),t(e[4].dims,[1],"Invalid input var")},Aa=(e,s)=>{let{epsilon:t,spatial:r,format:o}=s,i=e[0].dims,a=r?Jt(i[i.length-1]):1,l=o==="NHWC"&&i.length>1?a:1,d=Se.size(i)/a,u=r,p=u?i.length:i,w=Le("x",e[0].dataType,e[0].dims,a),v=Le("scale",e[1].dataType,e[1].dims,l),P=Le("bias",e[2].dataType,e[2].dims,l),C=Le("inputMean",e[3].dataType,e[3].dims,l),A=Le("inputVar",e[4].dataType,e[4].dims,l),H=wt("y",e[0].dataType,p,a),z=()=>{let se="";if(r)se=`let cOffset = ${i.length===1?"0u":o==="NHWC"?`outputIndices[${i.length-1}] / ${a}`:"outputIndices[1]"};`;else if(o==="NCHW")se=`
            ${H.indicesSet("outputIndices","0","0")}
            let cOffset = ${H.indicesToOffset("outputIndices")};`;else{se=`var cIndices = ${v.type.indices}(0);
                       cIndices[0] = outputIndices[${i.length-1}];`;for(let Q=1;Q<v.rank;Q++)se+=`cIndices[${Q}] = outputIndices[${Q}];`;se+=`let cOffset = ${v.indicesToOffset("cIndices")};`}return se},k=se=>`
  const epsilon = ${t};
  ${se.registerUniform("outputSize","u32").declareVariables(w,v,P,C,A,H)}
  ${se.mainStart()}
  ${se.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${H.offsetToIndices(`global_idx * ${a}`)};
    ${z()}
    let scale = ${v.getByOffset("cOffset")};
    let bias = ${P.getByOffset("cOffset")};
    let inputMean = ${C.getByOffset("cOffset")};
    let inputVar = ${A.getByOffset("cOffset")};
    let x = ${w.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${H.setByOffset("global_idx","value")}
  }`;return{name:"BatchNormalization",shaderCache:{hint:`${s.epsilon}_${s.format}_${r}_${a}`,inputDependencies:u?["rank","type","type","type","type"]:void 0},getShaderSource:k,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:u?[{type:12,data:d},...bt(i)]:[{type:12,data:d}]})}},Fa=e=>Ct(e),fo=(e,s)=>{let{inputs:t,outputCount:r}=e,o=Fa({...s,outputCount:r});if(E.webgpu.validateInputContent&&_o(t,o),s.trainingMode)throw new Error("BatchNormalization trainingMode is not supported yet.");e.compute(Aa(t,o))}}),Da,go,Oa,wu=f(()=>{B(),It(),Da=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![320,640,1280].includes(e[0].dims[2]))throw new Error("number of channels should be 320, 640 or 1280");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},go=e=>{let s=e[0].dims,t=e[0].dims[2],r=Se.size(s)/4,o=e[0].dataType,i=Le("input",o,s,4),a=Le("bias",o,[t],4),l=Le("residual",o,s,4),d=wt("output",o,s,4);return{name:"BiasAdd",getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(r/64)}}),getShaderSource:u=>`
  const channels = ${t}u / 4;
  ${u.declareVariables(i,a,l,d)}

  ${u.mainStart()}
    ${u.guardAgainstOutOfBoundsWorkgroupSizes(r)}
    let value = ${i.getByOffset("global_idx")}
      + ${a.getByOffset("global_idx % channels")} + ${l.getByOffset("global_idx")};
    ${d.setByOffset("global_idx","value")}
  }`}},Oa=e=>{Da(e.inputs),e.compute(go(e.inputs))}}),wo,Gt,La,Mo,za,Ba,yo,Ra,ja,bo,Na,Va,vo,Ua,Wa,xo,Jr,Ga,Yr,Ka,Ha,To,qa,Qa,Po,Xa,Ja,Eo,Ya,Za,Co,el,tl,$o,sl,So,ko,Io,Ao,Fo,rl,nl,Do,ol,il,Mn=f(()=>{xt(),B(),Wt(),It(),wo=(e,s,t,r,o,i,a)=>{let l=Math.ceil(s/4),d="";typeof o=="string"?d=`${o}(a)`:d=o("a");let u=Le("inputData",t,[l],4),p=wt("outputData",r,[l],4),w=[{name:"vec_size",type:"u32"}];return a&&w.push(...a),`
      ${e.registerUniforms(w).declareVariables(u,p)}

  ${i??""}

  ${e.mainStart()}
    ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${u.getByOffset("global_idx")};
    ${p.setByOffset("global_idx",d)}
  }`},Gt=(e,s,t,r,o,i=e.dataType,a,l)=>{let d=[{type:12,data:Math.ceil(Se.size(e.dims)/4)}];return a&&d.push(...a),{name:s,shaderCache:{hint:o,inputDependencies:["type"]},getShaderSource:u=>wo(u,Se.size(e.dims),e.dataType,i,t,r,l),getRunData:u=>({outputs:[{dims:e.dims,dataType:i}],dispatchGroup:{x:Math.ceil(Se.size(u[0].dims)/64/4)},programUniforms:d})}},La=e=>{e.compute(Gt(e.inputs[0],"Abs","abs"))},Mo=e=>{e.compute(Gt(e.inputs[0],"Acos","acos"))},za=e=>{e.compute(Gt(e.inputs[0],"Acosh","acosh"))},Ba=e=>{e.compute(Gt(e.inputs[0],"Asin","asin"))},yo=e=>{e.compute(Gt(e.inputs[0],"Asinh","asinh"))},Ra=e=>{e.compute(Gt(e.inputs[0],"Atan","atan"))},ja=e=>{e.compute(Gt(e.inputs[0],"Atanh","atanh"))},bo=e=>Ct(e),Na=(e,s)=>{let t;switch(s.to){case 10:t="vec4<f16>";break;case 1:t="vec4<f32>";break;case 12:t="vec4<u32>";break;case 6:t="vec4<i32>";break;case 9:t="vec4<bool>";break;default:throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${s.to}`)}e.compute(Gt(e.inputs[0],"Cast",t,void 0,s.cacheKey,s.to))},Va=e=>{let s,t,r=e.length>=2&&e[1].data!==0,o=e.length>=3&&e[2].data!==0;switch(e[0].dataType){case 1:s=r?e[1].getFloat32Array()[0]:-34028234663852886e22,t=o?e[2].getFloat32Array()[0]:34028234663852886e22;break;case 10:s=r?e[1].getUint16Array()[0]:64511,t=o?e[2].getUint16Array()[0]:31743;break;default:throw new Error("Unsupport data type")}return Ct({min:s,max:t})},vo=(e,s)=>{let t=s||Va(e.inputs),r=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"Clip",o=>`clamp(${o}, vec4<${r}>(uniforms.min), vec4<${r}>(uniforms.max))`,void 0,t.cacheKey,void 0,[{type:e.inputs[0].dataType,data:t.min},{type:e.inputs[0].dataType,data:t.max}],[{name:"min",type:r},{name:"max",type:r}]),{inputs:[0]})},Ua=e=>{e.compute(Gt(e.inputs[0],"Ceil","ceil"))},Wa=e=>{e.compute(Gt(e.inputs[0],"Cos","cos"))},xo=e=>{e.compute(Gt(e.inputs[0],"Cosh","cosh"))},Jr=e=>Ct(e),Ga=(e,s)=>{let t=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"Elu",r=>`elu_vf32(${r})`,`
  const elu_alpha_ = ${t}(${s.alpha});

  fn elu_f32(a: ${t}) -> ${t} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${t}>) -> vec4<${t}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`,s.cacheKey))},Yr=(e="f32")=>`
const r0: ${e} = 0.3275911;
const r1: ${e} = 0.254829592;
const r2: ${e} = -0.284496736;
const r3: ${e} = 1.421413741;
const r4: ${e} = -1.453152027;
const r5: ${e} = 1.061405429;

fn erf_vf32(v: vec4<${e}>) -> vec4<${e}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`,Ka=e=>{let s=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"Erf",t=>`erf_vf32(${t})`,Yr(s)))},Ha=e=>{e.compute(Gt(e.inputs[0],"Exp","exp"))},To=e=>{e.compute(Gt(e.inputs[0],"Floor","floor"))},qa=e=>{let s=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"Gelu",t=>`0.5 * ${t} * (1.0 + erf_vf32(${t} * 0.7071067811865475))`,Yr(s)))},Qa=(e,s)=>{let t=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"LeakyRelu",r=>`select(leaky_relu_alpha_ * ${r}, ${r}, ${r} >= vec4<${t}>(0.0))`,`const leaky_relu_alpha_ = ${t}(${s.alpha});`,s.cacheKey))},Po=e=>{e.compute(Gt(e.inputs[0],"Not",s=>`!${s}`))},Xa=e=>{e.compute(Gt(e.inputs[0],"Neg",s=>`-${s}`))},Ja=e=>{e.compute(Gt(e.inputs[0],"Reciprocal",s=>`1.0/${s}`))},Eo=e=>{let s=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"Relu",t=>`select(vec4<${s}>(0.0), ${t}, ${t} > vec4<${s}>(0.0))`))},Ya=e=>{e.compute(Gt(e.inputs[0],"Sigmoid",s=>`(1.0 / (1.0 + exp(-${s})))`))},Za=e=>Ct(e),Co=(e,s)=>{let t=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"HardSigmoid",r=>`max(vec4<${t}>(0.0), min(vec4<${t}>(1.0), ${s.alpha} * ${r} + vec4<${t}>(${s.beta})))`,void 0,s.cacheKey))},el=e=>{e.compute(Gt(e.inputs[0],"Sin","sin"))},tl=e=>{e.compute(Gt(e.inputs[0],"Sinh","sinh"))},$o=e=>{e.compute(Gt(e.inputs[0],"Sqrt","sqrt"))},sl=e=>{e.compute(Gt(e.inputs[0],"Tan","tan"))},So=e=>`sign(${e}) * (1 - exp(-2 * abs(${e}))) / (1 + exp(-2 * abs(${e})))`,ko=e=>{e.compute(Gt(e.inputs[0],"Tanh",So))},Io=(e="f32")=>`
const fast_gelu_a: ${e} = 0.5;
const fast_gelu_b: ${e} = 0.7978845608028654;
const fast_gelu_c: ${e} = 0.035677408136300125;

fn tanh_v(v: vec4<${e}>) -> vec4<${e}> {
  return ${So("v")};
}
`,Ao=e=>`(fast_gelu_a + fast_gelu_a * tanh_v(${e} * (fast_gelu_c * ${e} * ${e} + fast_gelu_b))) * ${e}`,Fo=e=>{let s=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"FastGelu",Ao,Io(s),void 0,e.inputs[0].dataType))},rl=(e,s)=>{let t=Ps(e.inputs[0].dataType);return e.compute(Gt(e.inputs[0],"ThresholdedRelu",r=>`select(vec4<${t}>(0.0), ${r}, ${r} > thresholded_relu_alpha_)`,`const thresholded_relu_alpha_ = vec4<${t}>(${s.alpha});`,s.cacheKey)),0},nl=e=>{e.compute(Gt(e.inputs[0],"Log","log"))},Do=(e,s)=>`
const alpha = vec4<${e}>(${s});
const one = ${e}(1.0);
const zero = ${e}(0.0);

fn quick_gelu_impl(x: vec4<${e}>) -> vec4<${e}> {
  let v = x *alpha;
  var x1 : vec4<${e}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`,ol=e=>`quick_gelu_impl(${e})`,il=(e,s)=>{let t=Ps(e.inputs[0].dataType);e.compute(Gt(e.inputs[0],"QuickGelu",ol,Do(t,s.alpha),s.cacheKey,e.inputs[0].dataType))}}),al,ll,cl,Mu=f(()=>{B(),It(),Mn(),al=e=>{if(e[0].dims.length!==3)throw new Error("input should have 3 dimensions");if(![2560,5120,10240].includes(e[0].dims[2]))throw new Error("hidden state should be 2560, 5120 or 10240");if(e[1].dims.length!==1)throw new Error("bias is expected to have 1 dimensions");if(e[0].dims[2]!==e[1].dims[0])throw new Error("last dimension of input and bias are not the same")},ll=e=>{let s=e[0].dims.slice();s[2]=s[2]/2;let t=Le("input",e[0].dataType,e[0].dims,4),r=Le("bias",e[0].dataType,[e[0].dims[2]],4),o=wt("output",e[0].dataType,s,4),i=Se.size(s)/4,a=ps(e[0].dataType);return{name:"BiasSplitGelu",getRunData:()=>({outputs:[{dims:s,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)}}),getShaderSource:l=>`
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${e[0].dims[2]/4/2}u;

  ${l.declareVariables(t,r,o)}

  ${Yr(a)}

  ${l.mainStart()}
    ${l.guardAgainstOutOfBoundsWorkgroupSizes(i)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${o.setByOffset("global_idx","valueLeft * geluRight")}
  }`}},cl=e=>{al(e.inputs),e.compute(ll(e.inputs))}}),Oo,dl,Hs,Lo,ul,pl,zo,hl,ml,Bo,_l,fl,Ro,yu=f(()=>{xt(),B(),It(),Oo=(e,s,t,r,o,i,a,l,d,u,p,w)=>{let v,P;typeof l=="string"?v=P=(k,se)=>`${l}((${k}),(${se}))`:typeof l=="function"?v=P=l:(v=l.scalar,P=l.vector);let C=wt("outputData",p,r.length,4),A=Le("aData",d,s.length,4),H=Le("bData",u,t.length,4),z;if(o)if(i){let k=Se.size(s)===1,se=Se.size(t)===1,Q=s.length>0&&s[s.length-1]%4===0,ce=t.length>0&&t[t.length-1]%4===0;k||se?z=C.setByOffset("global_idx",P(k?`${A.type.value}(${A.getByOffset("0")}.x)`:A.getByOffset("global_idx"),se?`${H.type.value}(${H.getByOffset("0")}.x)`:H.getByOffset("global_idx"))):z=`
            let outputIndices = ${C.offsetToIndices("global_idx * 4u")};
            let offsetA = ${A.broadcastedIndicesToOffset("outputIndices",C)};
            let offsetB = ${H.broadcastedIndicesToOffset("outputIndices",C)};
            ${C.setByOffset("global_idx",P(a||Q?A.getByOffset("offsetA / 4u"):`${A.type.value}(${A.getByOffset("offsetA / 4u")}[offsetA % 4u])`,a||ce?H.getByOffset("offsetB / 4u"):`${H.type.value}(${H.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `}else z=C.setByOffset("global_idx",P(A.getByOffset("global_idx"),H.getByOffset("global_idx")));else{if(!i)throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");let k=(se,Q,ce="")=>{let ye=`aData[indexA${Q}][componentA${Q}]`,ge=`bData[indexB${Q}][componentB${Q}]`;return`
            let outputIndices${Q} = ${C.offsetToIndices(`global_idx * 4u + ${Q}u`)};
            let offsetA${Q} = ${A.broadcastedIndicesToOffset(`outputIndices${Q}`,C)};
            let offsetB${Q} = ${H.broadcastedIndicesToOffset(`outputIndices${Q}`,C)};
            let indexA${Q} = offsetA${Q} / 4u;
            let indexB${Q} = offsetB${Q} / 4u;
            let componentA${Q} = offsetA${Q} % 4u;
            let componentB${Q} = offsetB${Q} % 4u;
            ${se}[${Q}] = ${ce}(${v(ye,ge)});
          `};p===9?z=`
            var data = vec4<u32>(0);
            ${k("data",0,"u32")}
            ${k("data",1,"u32")}
            ${k("data",2,"u32")}
            ${k("data",3,"u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:z=`
            ${k("outputData[global_idx]",0)}
            ${k("outputData[global_idx]",1)}
            ${k("outputData[global_idx]",2)}
            ${k("outputData[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(A,H,C)}

        ${w??""}

        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${z}
      }`},dl=(e,s,t,r,o,i,a=t.dataType)=>{let l=t.dims.map(A=>Number(A)??1),d=r.dims.map(A=>Number(A)??1),u=!Se.areEqual(l,d),p=l,w=Se.size(l),v=!1,P=!1,C=[u];if(u){let A=ar.calcShape(l,d,!1);if(!A)throw new Error("Can't perform binary op on the given tensors");p=A.slice(),w=Se.size(p);let H=Se.size(l)===1,z=Se.size(d)===1,k=l.length>0&&l[l.length-1]%4===0,se=d.length>0&&d[d.length-1]%4===0;C.push(H),C.push(z),C.push(k),C.push(se);let Q=1;for(let ce=1;ce<p.length;ce++){let ye=l[l.length-ce],ge=d[d.length-ce];if(ye===ge)Q*=ye;else break}Q%4===0?(P=!0,v=!0):(H||z||k||se)&&(v=!0)}else v=!0;return C.push(v),{name:e,shaderCache:{hint:s+C.map(A=>A.toString()).join("_"),inputDependencies:["rank","rank"]},getShaderSource:A=>Oo(A,l,d,p,v,u,P,o,t.dataType,r.dataType,a,i),getRunData:()=>({outputs:[{dims:p,dataType:a}],dispatchGroup:{x:Math.ceil(w/64/4)},programUniforms:[{type:12,data:Math.ceil(Se.size(p)/4)},...bt(l,d,p)]})}},Hs=(e,s,t,r,o,i)=>{e.compute(dl(s,o??"",e.inputs[0],e.inputs[1],t,r,i))},Lo=e=>{Hs(e,"Add",(s,t)=>`${s}+${t}`)},ul=e=>{Hs(e,"Div",(s,t)=>`${s}/${t}`)},pl=e=>{Hs(e,"Equal",{scalar:(s,t)=>`u32(${s}==${t})`,vector:(s,t)=>`vec4<u32>(${s}==${t})`},void 0,void 0,9)},zo=e=>{Hs(e,"Mul",(s,t)=>`${s}*${t}`)},hl=e=>{let s=Le("input",e.inputs[0].dataType,e.inputs[0].dims).type.value;Hs(e,"Pow",{scalar:(t,r)=>`pow_custom(${t},${r})`,vector:(t,r)=>`pow_vector_custom(${t},${r})`},`
    fn pow_custom(a : ${s}, b : ${s}) -> ${s} {
      if (b == ${s}(0.0)) {
        return ${s}(1.0);
      } else if (a < ${s}(0.0) && f32(b) != floor(f32(b))) {
        return ${s}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${s}(1.0), round(f32(abs(b) % ${s}(2.0))) != 1.0) * ${s}(${s==="i32"?"round":""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${s}>, b : vec4<${s}>) -> vec4<${s}> {
      // TODO: implement vectorized pow
      return vec4<${s}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `)},ml=e=>{Hs(e,"Sub",(s,t)=>`${s}-${t}`)},Bo=e=>{Hs(e,"Greater",{scalar:(s,t)=>`u32(${s}>${t})`,vector:(s,t)=>`vec4<u32>(${s}>${t})`},void 0,void 0,9)},_l=e=>{Hs(e,"Less",{scalar:(s,t)=>`u32(${s}<${t})`,vector:(s,t)=>`vec4<u32>(${s}<${t})`},void 0,void 0,9)},fl=e=>{Hs(e,"GreaterOrEqual",{scalar:(s,t)=>`u32(${s}>=${t})`,vector:(s,t)=>`vec4<u32>(${s}>=${t})`},void 0,void 0,9)},Ro=e=>{Hs(e,"LessOrEqual",{scalar:(s,t)=>`u32(${s}<=${t})`,vector:(s,t)=>`vec4<u32>(${s}<=${t})`},void 0,void 0,9)}}),gl,jo,wl,Ml,No,yl,bu=f(()=>{xt(),B(),Wt(),It(),gl=(e,s)=>{if(!e||e.length<1)throw new Error("too few inputs");let t=0,r=e[t],o=r.dataType,i=r.dims.length;e.forEach((a,l)=>{if(l!==t){if(a.dataType!==o)throw new Error("input tensors should be one type");if(a.dims.length!==i)throw new Error("input tensors should have the same shape");a.dims.forEach((d,u)=>{if(u!==s&&d!==r.dims[u])throw new Error("non concat dimensions must match")})}})},jo=(e,s)=>`
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${e}u>(${s});
    for (var i: u32 = 0u; i < ${e}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${e}u;
  }`,wl=(e,s)=>{let t=e.length,r=[];for(let o=0;o<t;++o){let i=s.setByOffset("global_idx",e[o].getByIndices("indices"));t===1?r.push(i):o===0?r.push(`if (inputIndex == ${o}u) { ${i} }`):o===t-1?r.push(`else { ${i} }`):r.push(`else if (inputIndex == ${o}) { ${i} }`)}return r.join(`
`)},Ml=(e,s,t,r)=>{let o=Se.size(t),i=new Array(e.length),a=new Array(e.length),l=0,d=[],u=[],p=[{type:12,data:o}];for(let A=0;A<e.length;++A)l+=e[A].dims[s],i[A]=l,u.push(e[A].dims.length),a[A]=Le(`input${A}`,r,u[A]),d.push("rank"),p.push({type:12,data:i[A]});for(let A=0;A<e.length;++A)p.push(...bt(e[A].dims));p.push(...bt(t));let w=wt("output",r,t.length),v=w.indicesGet("indices",s),P=Array.from(Array(i.length).keys()).map(A=>`uniforms.sizeInConcatAxis${A}`).join(","),C=A=>`

  ${(()=>{A.registerUniform("outputSize","u32");for(let H=0;H<e.length;H++)A.registerUniform(`sizeInConcatAxis${H}`,"u32");return A.declareVariables(...a,w)})()}

  ${jo(i.length,P)}

  ${A.mainStart()}
    ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${w.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${v});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${i.length}u>(${P});
      ${v} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${wl(a,w)}
  }`;return{name:"Concat",shaderCache:{hint:`${s}`,inputDependencies:d},getRunData:()=>({outputs:[{dims:t,dataType:r}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:p}),getShaderSource:C}},No=(e,s)=>{let t=e.inputs,r=t[0].dims,o=Se.normalizeAxis(s.axis,r.length);gl(t,o);let i=r.slice();i[o]=t.reduce((l,d)=>l+(d.dims.length>o?d.dims[o]:0),0);let a=t.filter(l=>Se.size(l.dims)>0);e.compute(Ml(a,o,i,t[0].dataType),{inputs:a})},yl=e=>Ct({axis:e.axis})}),$r,Sr,fr,Vo,kr=f(()=>{xt(),B(),$r=(e,s,t="f32")=>{switch(e.activation){case"Relu":return`value = max(value, ${s}(0.0));`;case"Sigmoid":return`value = (${s}(1.0) / (${s}(1.0) + exp(-value)));`;case"Clip":return`value = clamp(value, ${s}(${t}(uniforms.clip_min)), ${s}(${t}(uniforms.clip_max)));`;case"HardSigmoid":return`value = max(${s}(0.0), min(${s}(1.0), ${t}(uniforms.alpha) * value + ${t}(uniforms.beta)));`;case"LeakyRelu":return`value = select(${t}(uniforms.alpha) * value, value, value >= ${s}(0.0));`;case"Tanh":return`let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;case"":return"";default:throw new Error(`Unsupported activation ${e.activation}`)}},Sr=(e,s)=>{e.activation==="Clip"?s.push({type:1,data:e.clipMax},{type:1,data:e.clipMin}):e.activation==="HardSigmoid"?s.push({type:1,data:e.alpha},{type:1,data:e.beta}):e.activation==="LeakyRelu"&&s.push({type:1,data:e.alpha})},fr=(e,s)=>{e.activation==="Clip"?s.push({name:"clip_max",type:"f32"},{name:"clip_min",type:"f32"}):e.activation==="HardSigmoid"?s.push({name:"alpha",type:"f32"},{name:"beta",type:"f32"}):e.activation==="LeakyRelu"&&s.push({name:"alpha",type:"f32"})},Vo=e=>{let s=e?.activation||"";if(s==="HardSigmoid"){let[t,r]=e?.activation_params||[.2,.5];return{activation:s,alpha:t,beta:r}}else if(s==="Clip"){let[t,r]=e?.activation_params||[we,M];return{activation:s,clipMax:r,clipMin:t}}else if(s==="LeakyRelu"){let[t]=e?.activation_params||[.01];return{activation:s,alpha:t}}return{activation:s}}}),fs,bl,yn=f(()=>{fs=(e,s)=>{switch(e){case 1:return s;case 2:return`vec2<${s}>`;case 3:return`vec3<${s}>`;case 4:return`vec4<${s}>`;default:throw new Error(`${e}-component is not supported.`)}},bl=e=>`
      ${e?"value = value + getBiasByOutputCoords(coords);":""}
      `}),vl,vu=f(()=>{vl=e=>`
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${e}.x), i32(${e}.y), i32(${e}.z), 1));
}
`}),Zr,Uo,bn=f(()=>{xt(),B(),It(),kr(),Zr=(e,s,t,r,o)=>{let i=r-t;return`
      ${Array.from({length:t}).map((a,l)=>`
      if (${yt(s.shape,l,s.rank)} != 1) {
        ${s.indicesSet(e,l,yt(o,l+i,r))}
      } else {
        ${s.indicesSet(e,l,0)}
      }`).join("")}
`},Uo=(e,s,t,r,o=!1,i)=>{let a=e[0].dims,l=e[1].dims,d=a[a.length-2],u=l[l.length-1],p=a[a.length-1],w=Jt(u),v=Jt(p),P=Jt(d),C=Se.size(t)/w/P,A=e.length>2,H=r?r.slice(0,-2):t.slice(0,-2),z=[Se.size(H),d,u],k=[{type:12,data:C},{type:12,data:d},{type:12,data:u},{type:12,data:p}];Sr(s,k),k.push(...bt(H,a,l)),A&&k.push(...bt(e[2].dims)),k.push(...bt(z));let se=Q=>{let ce=Yn("batch_dims",e[0].dataType,H.length),ye=Le("a",e[0].dataType,a.length,v),ge=Le("b",e[1].dataType,l.length,w),Ie=wt("output",e[0].dataType,z.length,w),Ae=ps(Ie.type.tensor),Je=$r(s,Ie.type.value,Ae),ht=[ye,ge],vt="";if(A){let Bt=o?w:1;ht.push(Le("bias",e[2].dataType,e[2].dims.length,Bt)),vt=`${o?`value += bias[col / ${Bt}];`:`value += ${Ie.type.value}(bias[row + i]);`}`}let Xe=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"}];fr(s,Xe);let kt=()=>{let Bt=`var a_data: ${ye.type.value};`;for(let rt=0;rt<v;rt++)Bt+=`
              let b_data${rt} = b[(b_offset + (k + ${rt}) * uniforms.N + col) / ${w}];`;for(let rt=0;rt<P;rt++){Bt+=`a_data = a[(a_offset + (row + ${rt}) * uniforms.K + k) / ${v}];`;for(let Pt=0;Pt<v;Pt++)Bt+=`
            values[${rt}] = fma(${ge.type.value}(a_data${v===1?"":`[${Pt}]`}), b_data${Pt}, values[${rt}]);
`}return Bt};return`
  ${Q.registerUniforms(Xe).registerInternalVariables(ce).declareVariables(...ht,Ie)}
  ${Q.mainStart()}
    ${Q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${w})) * ${w};
    var index1 = global_idx / (uniforms.N / ${w});
    let stride1 = uniforms.M / ${P};
    let row = (index1 % stride1) * ${P};
    let batch = index1 / stride1;

    ${t.length===2?"":`let batch_indices = ${ce.offsetToIndices("batch")};`}

    var a_indices: ${ye.type.indices};
    ${Zr("a_indices",ye,ye.rank-2,ce.rank,"batch_indices")}
    ${ye.indicesSet("a_indices",ye.rank-2,0)}
    ${ye.indicesSet("a_indices",ye.rank-1,0)}
    let a_offset = ${ye.indicesToOffset("a_indices")};

    var b_indices: ${ge.type.indices};
    ${Zr("b_indices",ge,ge.rank-2,ce.rank,"batch_indices")}
    ${ge.indicesSet("b_indices",ge.rank-2,0)}
    ${ge.indicesSet("b_indices",ge.rank-1,0)}
    let b_offset = ${ge.indicesToOffset("b_indices")};
    var values: array<${Ie.type.value}, ${P}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${v}) {
      ${kt()}
    }
    for (var i = 0u; i < ${P}u; i++) {
      var value = values[i];
      ${vt}
      ${Je}
      let cur_indices = ${Ie.type.indices}(batch, row + i, col);
      let offset = ${Ie.indicesToOffset("cur_indices")};
      ${Ie.setByOffset(`offset / ${w}`,"value")};
    }
  }
  `};return{name:"MatMulNaive",shaderCache:{hint:`${s.activation};${w};${v};${P};${o}`,inputDependencies:A?["rank","rank","rank"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:i?i(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(C/64)},programUniforms:k}),getShaderSource:se}}}),xl,Tl,Wo,Go,Ko,Ho,Pl,en,qo=f(()=>{xt(),B(),It(),kr(),bn(),yn(),xl=(e,s)=>e?`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${s?", batchIndices":""});
        `:`
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${s?", batchIndices":""});
        `,Tl=(e,s)=>e?`
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${s===3?"":"let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${s===3?"":"acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }`:`
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${s===3?"":"acc[i] = BCached3 * ACached.w + acc[i];"}
        }`,Wo=(e,s,t="f32",r,o=!1,i=32,a=!1,l=32)=>{let d=s[1]*e[1],u=s[0]*e[0],p=o?d:i,w=o?i:d,v=p/s[0],P=i/s[1];if(!((o&&v===4&&e[1]===4||!o&&(v===3||v===4))&&p%s[0]===0&&i%s[1]===0&&e[0]===4))throw new Error(`If transposeA ${o} is true, innerElementSize ${v} and workPerThread[1] ${e[1]} must be 4.
      Otherwise, innerElementSize ${v} must be 3 or 4.
  tileAWidth ${p} must be divisible by workgroupSize[0]${s[0]}. tileInner ${i} must be divisible by workgroupSize[1] ${s[1]}. colPerThread ${e[0]} must be 4.`);return`
var<workgroup> mm_Asub: array<array<vec${v}<${t}>, ${p/v}>, ${w}>;
var<workgroup> mm_Bsub: array<array<vec4<${t}>, ${u/e[0]}>, ${i}>;

const rowPerThread = ${e[1]};
const colPerThread = ${e[0]};
const innerElementSize = ${v};
const tileInner = ${i};

@compute @workgroup_size(${s[0]}, ${s[1]}, ${s[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${a?"0":"i32(globalId.z)"};
  ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}
  let globalRowStart = i32(workgroupId.y) * ${d};

  let num_tiles = ${a?`${Math.ceil(l/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${a?`i32(globalId.z) * ${l}`:"0"};

  var acc: array<vec4<${t}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${P};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${xl(o,r)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${P}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${r?", batchIndices":""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${v===3?"":"let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${Tl(o,v)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`},Go=(e,s)=>e?`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${s?", batchIndices":""});
            `:`
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${s?", batchIndices":""});
            `,Ko=e=>e?"let ACached = mm_Asub[k][tileRow + innerRow];":"let ACached = mm_Asub[tileRow + innerRow][k];",Ho=(e,s,t="f32",r,o=!1,i=32,a=!1,l=32,d=!1)=>{let u=e[1]*s[1],p=e[0]*s[0],w=o?u:i,v=o?i:u;if(!(v%s[1]===0&&w%s[0]===0&&i%s[1]===0))throw new Error(`tileAHight ${v} must be divisible by workgroupSize[1]${s[1]}, tileAWidth ${w} must be divisible by workgroupSize[0]${s[0]}, tileInner ${i} must be divisible by workgroupSize[1]${s[1]}`);let P=v/s[1],C=w/s[0],A=i/s[1],H=d?`
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${u};
    let globalColStart = i32(workgroupId.x) * ${p};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${v}; inputRow = inputRow + ${s[1]}) {
        for (var inputCol = localCol; inputCol < ${w}; inputCol = inputCol + ${s[0]}) {
          ${Go(o,r)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${i}; inputRow = inputRow + ${s[1]}) {
            for (var inputCol = localCol; inputCol < ${p}; inputCol = inputCol + ${s[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${r?", batchIndices":""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${t}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${s[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${o?`mm_Asub[k][localRow + innerRow * ${s[1]}];`:`mm_Asub[localRow + innerRow * ${s[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${s[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${s[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    `:`
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${u};

let tileRowA = i32(localId.y) * ${P};
let tileColA = i32(localId.x) * ${C};
let tileRowB = i32(localId.y) * ${A};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${P}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${C}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Go(o,r)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${A}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${r?", batchIndices":""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${t}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Ko(o)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;return`
  var<workgroup> mm_Asub : array<array<${t}, ${w}>, ${v}>;
  var<workgroup> mm_Bsub : array<array<${t}, ${p}>, ${i}>;
  const rowPerThread = ${e[1]};
  const colPerThread = ${e[0]};
  const tileInner = ${i};

@compute @workgroup_size(${s[0]}, ${s[1]}, ${s[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${a?"0":"i32(globalId.z)"};
    ${r?`let batchIndices = ${r.offsetToIndices("u32(batch)")};`:""}
    let num_tiles = ${a?`${Math.ceil(l/i)}`:"(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${a?`i32(globalId.z) * ${l}`:"0"};

    var acc : array<array<${t}, colPerThread>, rowPerThread>;
    ${H}
  }
`},Pl=(e,s,t,r,o=!1)=>{let[i,a,l,d]=r,u=ps(r[0].type.tensor);return`
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${i.type.indices}) -> ${fs(e,u)} {
      var value = ${fs(e,u)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${a.type.indices};
        ${Zr("aIndices",a,a.rank-2,i.rank,"batchIndices")}
        ${a.indicesSet("aIndices",a.rank-2,"u32(row)")}
        ${a.indicesSet("aIndices",a.rank-1,"u32(colIn)")}
        value = ${a.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${i.type.indices}) -> ${fs(e,u)} {
      var value = ${fs(e,u)}(0.0);
      let col = colIn * ${e};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${l.type.indices};
        ${Zr("bIndices",l,l.rank-2,i.rank,"batchIndices")}
        ${l.indicesSet("bIndices",l.rank-2,"u32(row)")}
        ${l.indicesSet("bIndices",l.rank-1,"u32(colIn)")}
        value = ${l.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${fs(e,u)}) {
      let col = colIn * ${e};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${s?`value = value + ${o?"bias[colIn]":`${fs(e,u)}(bias[row])`};`:""}
        ${t}
        ${d.setByIndices("vec3<u32>(coords)","value")}
      }
    }
    `},en=(e,s,t,r,o=!1,i)=>{let a=e[0].dims,l=e[1].dims,d=a.slice(0,-2),u=l.slice(0,-2),p=r?r.slice(0,-2):t.slice(0,-2),w=Se.size(p),v=a[a.length-2],P=a[a.length-1],C=l[l.length-1],A=P%4===0&&C%4===0,H=v<=8?[4,1,1]:[4,4,1],z=[8,8,1],k=[Math.ceil(C/z[0]/H[0]),Math.ceil(v/z[1]/H[1]),Math.ceil(w/z[2]/H[2])],se=A?4:1,Q=[...d,v,P/se],ce=Q.length,ye=[...u,P,C/se],ge=ye.length,Ie=[w,v,C/se],Ae=[{type:6,data:v},{type:6,data:C},{type:6,data:P}];Sr(s,Ae),Ae.push(...bt(p,Q,ye));let Je=["rank","rank"],ht=e.length>2;ht&&(Ae.push(...bt(e[2].dims)),Je.push("rank")),Ae.push(...bt(Ie));let vt=Xe=>{let kt=p.length,Bt=Yn("batchDims",e[0].dataType,kt,1),rt=ps(e[0].dataType),Pt=Le("a",e[0].dataType,ce,se),Lt=Le("b",e[1].dataType,ge,se),Et=wt("result",e[0].dataType,Ie.length,se),Rt=[Pt,Lt];if(ht){let hs=o?se:1;Rt.push(Le("bias",e[2].dataType,e[2].dims.length,hs))}let Ve=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"}];fr(s,Ve);let it=ps(Et.type.tensor),$t=$r(s,Et.type.value,it),jt=Pl(se,ht,$t,[Bt,Pt,Lt,Et],o);return`
  ${Xe.registerUniforms(Ve).registerInternalVariables(Bt).declareVariables(...Rt,Et)}
  ${jt}
  ${A?Wo(H,z,rt,Bt):Ho(H,z,rt,Bt)}
                   `};return{name:"MatMul",shaderCache:{hint:`${H};${s.activation};${A};${o}`,inputDependencies:Je},getRunData:()=>({outputs:[{dims:i?i(t):t,dataType:e[0].dataType}],dispatchGroup:{x:k[0],y:k[1],z:k[2]},programUniforms:Ae}),getShaderSource:vt}}}),El,Qo,xu=f(()=>{xt(),Cs(),It(),kr(),yn(),vu(),qo(),El=(e,s,t,r,o=!1,i,a=4,l=4,d=4,u="f32")=>{let p=Ae=>{switch(Ae){case 1:return"resData = x[xIndex];";case 3:return`resData = vec3<${u}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;case 4:return"resData = x[xIndex / 4];";default:throw new Error(`innerElementSize ${Ae} is not supported.`)}},w=Ae=>{switch(Ae){case 1:return"return w[row * i32(uniforms.w_shape[3]) + colIn];";case 4:return"return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";default:throw new Error(`innerElementSize ${Ae} is not supported.`)}},v=e?`
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    `:`
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `,P=e?`
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    `:`
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `,C=e?"i32(uniforms.x_shape[1])":"i32(uniforms.x_shape[2])",A=e?"i32(uniforms.x_shape[2])":"i32(uniforms.x_shape[3])",H=e?"row":"col",z=e?"col":"row",k=`
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
    let outRow = ${H} / outWidth;
    let outCol = ${H} % outWidth;

    let WRow = ${z} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${z} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${z} % inChannels;
    var resData = ${fs(a,u)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${C} && xCol >= 0 && xCol < ${A}) {
      ${v}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${p(a)}
    }
    return resData;`,se=e?s&&r?`
    let col = colIn * ${a};
    ${k}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${k}
    }
    return ${fs(a,u)}(0.0);`:r&&t?`
    let col = colIn * ${a};
    ${k}`:`
    let col = colIn * ${a};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${k}
    }
    return ${fs(a,u)}(0.0);`,Q=e?r&&t?w(l):`
    let col = colIn * ${l};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${w(l)}
    }
    return ${fs(l,u)}(0.0);`:`
    let col = colIn * ${l};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${w(l)}
    }
    return ${fs(l,u)}(0.0);`,ce=fs(d,u),ye=fs(e?a:l,u),ge=fs(e?l:a,u),Ie=$r(i,ce,u);return`
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${ye} {
      ${e?se:Q}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${ge} {
      ${e?Q:se}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${ce}) {
      let col = colIn * ${d};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${e?"i32(uniforms.result_shape[2])":"i32(uniforms.result_shape[3])"};
      ${P}
      ${bl(o)}
      ${Ie}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`},Qo=(e,s,t,r,o,i,a,l,d)=>{let u=s.format==="NHWC",p=u?e[0].dims[3]:e[0].dims[1],w=t[0],v=u?t[2]:t[3],P=u?t[1]:t[2],C=u?t[3]:t[1],A=u&&(p%4===0||p%3===0)&&C%4===0,H=u?C:v*P,z=u?v*P:C,k=[8,8,1],se=r<=8?[4,1,1]:[4,4,1],Q=[Math.ceil(H/k[0]/se[0]),Math.ceil(z/k[1]/se[1]),Math.ceil(w/k[2]/se[2])];Ot("verbose",()=>`[conv2d_mm_webgpu] dispatch = ${Q}`);let ce=A?u&&p%4!==0?3:4:1,ye=k[1]*se[1],ge=k[0]*se[0],Ie=Math.max(k[0]*ce,k[1]),Ae=r%ye===0,Je=o%ge===0,ht=i%Ie===0,vt=A?[ce,4,4]:[1,1,1],Xe=[{type:6,data:r},{type:6,data:o},{type:6,data:i},{type:6,data:[s.pads[0],s.pads[1]]},{type:6,data:s.strides},{type:6,data:s.dilations}];Sr(s,Xe),Xe.push(...bt(e[0].dims,e[1].dims));let kt=["rank","rank"];a&&(Xe.push(...bt(e[2].dims)),kt.push("rank")),Xe.push(...bt(t));let Bt=rt=>{let Pt=[{name:"dim_a_outer",type:"i32"},{name:"dim_b_outer",type:"i32"},{name:"dim_inner",type:"i32"},{name:"pad",type:"i32",length:2},{name:"stride",type:"i32",length:2},{name:"dilation",type:"i32",length:2}];fr(s,Pt);let Lt=A?4:1,Et=ps(e[0].dataType),Rt=`
      fn setOutputAtIndex(flatIndex : i32, value : ${A?`vec4<${Et}>`:Et}) {
        result[flatIndex] = ${A?`vec4<${Et}>`:Et}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${A?`vec4<${Et}>`:Et}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${A?"/ 4":""}, value);
      }`,Ve=Le("x",e[0].dataType,e[0].dims.length,ce===3?1:ce),it=Le("w",e[1].dataType,e[1].dims.length,Lt),$t=[Ve,it],jt=wt("result",e[0].dataType,t.length,Lt);if(a){let hs=Le("bias",e[2].dataType,e[2].dims.length,Lt);$t.push(hs),Rt+=`
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${A?`vec4<${Et}>`:Et} {
          return bias[coords.${u?"w":"y"}${A?"/ 4":""}];
        }`}return`
        ${vl("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${rt.registerUniforms(Pt).declareVariables(...$t,jt)}
        ${Rt}
        ${El(u,Ae,Je,ht,a,s,vt[0],vt[1],vt[2],Et)}
        ${A?Wo(se,k,Et,void 0,!u,Ie):Ho(se,k,Et,void 0,!u,Ie,!1,void 0,l)}`};return{name:"Conv2DMatMul",shaderCache:{hint:`${s.cacheKey};${ce};${A};${Ae};${Je};${ht};${ye};${ge};${Ie}`,inputDependencies:kt},getRunData:()=>({outputs:[{dims:d?d(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Q[0],y:Q[1],z:Q[2]},programUniforms:Xe}),getShaderSource:Bt}}}),Cl,vn,tn,$l,xn,Sl,kl,Tn,Tu=f(()=>{xt(),Cs(),B(),It(),kr(),yn(),Cl=e=>{let s=1;for(let t=0;t<e.length;t++)s*=e[t];return s},vn=e=>typeof e=="number"?[e,e,e]:e,tn=(e,s)=>s<=1?e:e+(e-1)*(s-1),$l=(e,s,t,r=1)=>{let o=tn(s,r);return Math.floor((e[0]*(t-1)-t+o)/2)},xn=(e,s,t,r,o)=>{o==null&&(o=$l(e,s[0],r[0]));let i=[0,0,0,t];for(let a=0;a<3;a++)e[a]+2*o>=s[a]&&(i[a]=Math.trunc((e[a]-s[a]+2*o)/r[a]+1));return i},Sl=(e,s,t,r,o,i,a,l,d,u)=>{let p,w,v,P;if(e==="VALID"&&(e=0),typeof e=="number"){p={top:e,bottom:e,left:e,right:e,front:e,back:e};let C=xn([s,t,r,1],[l,d,u],1,[o,i,a],e);w=C[0],v=C[1],P=C[2]}else if(Array.isArray(e)){if(!e.every((A,H,z)=>A===z[0]))throw Error(`Unsupported padding parameter: ${e}`);p={top:e[0],bottom:e[1],left:e[2],right:e[3],front:e[4],back:e[5]};let C=xn([s,t,r,1],[l,d,u],1,[o,i,a],e[0]);w=C[0],v=C[1],P=C[2]}else if(e==="SAME_UPPER"){w=Math.ceil(s/o),v=Math.ceil(t/i),P=Math.ceil(r/a);let C=(w-1)*o+l-s,A=(v-1)*i+d-t,H=(P-1)*a+u-r,z=Math.floor(C/2),k=C-z,se=Math.floor(A/2),Q=A-se,ce=Math.floor(H/2),ye=H-ce;p={top:se,bottom:Q,left:ce,right:ye,front:z,back:k}}else throw Error(`Unknown padding parameter: ${e}`);return{padInfo:p,outDepth:w,outHeight:v,outWidth:P}},kl=(e,s,t,r,o,i=!1,a="channelsLast")=>{let l,d,u,p,w;if(a==="channelsLast")[l,d,u,p,w]=e;else if(a==="channelsFirst")[l,w,d,u,p]=e;else throw new Error(`Unknown dataFormat ${a}`);let[v,,P,C,A]=s,[H,z,k]=vn(t),[se,Q,ce]=vn(r),ye=tn(P,se),ge=tn(C,Q),Ie=tn(A,ce),{padInfo:Ae,outDepth:Je,outHeight:ht,outWidth:vt}=Sl(o,d,u,p,H,z,k,ye,ge,Ie),Xe=i?v*w:v,kt=[0,0,0,0,0];return a==="channelsFirst"?kt=[l,Xe,Je,ht,vt]:a==="channelsLast"&&(kt=[l,Je,ht,vt,Xe]),{batchSize:l,dataFormat:a,inDepth:d,inHeight:u,inWidth:p,inChannels:w,outDepth:Je,outHeight:ht,outWidth:vt,outChannels:Xe,padInfo:Ae,strideDepth:H,strideHeight:z,strideWidth:k,filterDepth:P,filterHeight:C,filterWidth:A,effectiveFilterDepth:ye,effectiveFilterHeight:ge,effectiveFilterWidth:Ie,dilationDepth:se,dilationHeight:Q,dilationWidth:ce,inShape:e,outShape:kt,filterShape:s}},Tn=(e,s,t,r,o,i)=>{let a=i==="channelsLast";a?e[0].dims[3]:e[0].dims[1];let l=[64,1,1],d={x:t.map((H,z)=>z)},u=[Math.ceil(Cl(d.x.map(H=>t[H]))/l[0]),1,1];Ot("verbose",()=>`[conv3d_naive_webgpu] dispatch = ${u}`);let p=1,w=Se.size(t),v=[{type:12,data:w},{type:12,data:r},{type:12,data:o},{type:12,data:s.strides},{type:12,data:s.dilations}];Sr(s,v),v.push(...bt(e[0].dims,e[1].dims));let P=["rank","rank"],C=e.length===3;C&&(v.push(...bt(e[2].dims)),P.push("rank")),v.push(...bt(t));let A=H=>{let z=[{name:"output_size",type:"u32"},{name:"filter_dims",type:"u32",length:r.length},{name:"pads",type:"u32",length:o.length},{name:"strides",type:"u32",length:s.strides.length},{name:"dilations",type:"u32",length:s.dilations.length}];fr(s,z);let k=1,se=ps(e[0].dataType),Q=Le("x",e[0].dataType,e[0].dims.length,p),ce=Le("W",e[1].dataType,e[1].dims.length,k),ye=[Q,ce],ge=wt("result",e[0].dataType,t.length,k),Ie="";if(C){let ht=Le("bias",e[2].dataType,e[2].dims.length,k);ye.push(ht),Ie+=`
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${se} {
          return bias[${a?yt("coords",4,5):yt("coords",1,5)}];
        }`}let Ae=fs(p,se),Je=$r(s,Ae,se);return`
            ${Ie}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${Q.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${ce.getByIndices("aIndices")};
            }
          ${H.registerUniforms(z).declareVariables(...ye,ge)}
          ${H.mainStart()}
          ${H.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${ge.offsetToIndices("global_idx")};
              let batch = ${yt("coords",0,Q.rank)};
              let d2 = ${a?yt("coords",Q.rank-1,Q.rank):yt("coords",1,Q.rank)};
              let xFRCCorner = vec3<u32>(${a?yt("coords",1,Q.rank):yt("coords",2,Q.rank)},
              ${a?yt("coords",2,Q.rank):yt("coords",3,Q.rank)},
              ${a?yt("coords",3,Q.rank):yt("coords",4,Q.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${a?yt("uniforms.x_shape",1,Q.rank):yt("uniforms.x_shape",2,Q.rank)};
              let xShapeZ = ${a?yt("uniforms.x_shape",2,Q.rank):yt("uniforms.x_shape",3,Q.rank)};
              let xShapeW = ${a?yt("uniforms.x_shape",3,Q.rank):yt("uniforms.x_shape",4,Q.rank)};
              let xShapeU = ${a?yt("uniforms.x_shape",4,Q.rank):yt("uniforms.x_shape",1,Q.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${a?`let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            `:`let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${a?`value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`:`value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${a?`let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      `:`let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${a?`let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      `:`let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${C?"value = value + getBiasByOutputCoords(coords)":""};
              ${Je}
              result[global_idx] = f32(value);
          }`};return{name:"Conv3DNaive",shaderCache:{hint:`${s.cacheKey};${a};${p};${C}`,inputDependencies:P},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:u[0],y:u[1],z:u[2]},programUniforms:v}),getShaderSource:A}}}),Il,Xo,Al=f(()=>{xt(),B(),It(),kr(),Il=(e,s,t,r)=>{let o=e.length>2,i=o?"value += b[output_channel];":"",a=e[0].dims,l=e[1].dims,d=s.format==="NHWC",u=d?t[3]:t[1],p=u/s.group,w=d&&p>=4?Jt(u):1,v=Se.size(t)/w,P=[{type:12,data:v},{type:12,data:s.dilations},{type:12,data:[s.strides[0],s.strides[1]]},{type:12,data:[s.pads[0],s.pads[1]]},{type:12,data:p}];Sr(s,P),P.push(...bt(a,[l[0],l[1],l[2],l[3]/w]));let C=o?["rank","rank","rank"]:["rank","rank"];P.push(...bt([t[0],t[1],t[2],t[3]/w]));let A=H=>{let z=wt("output",e[0].dataType,t.length,w),k=ps(z.type.tensor),se=$r(s,z.type.value,k),Q=Le("x",e[0].dataType,a.length),ce=Le("w",e[1].dataType,l.length,w),ye=[Q,ce];o&&ye.push(Le("b",e[2].dataType,e[2].dims,w));let ge=[{name:"output_size",type:"u32"},{name:"dilations",type:"u32",length:s.dilations.length},{name:"strides",type:"u32",length:2},{name:"pads",type:"u32",length:2},{name:"output_channels_per_group",type:"u32"}];fr(s,ge);let Ie=d?`
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${Q.get("batch","xHeight","xWidth","input_channel")};
            let wVal = ${ce.get("wHeight","wWidth","wInChannel","output_channel")};
            value += xVal * wVal;
          }
        }
      }
      `:`
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${Q.get("batch","input_channel","xHeight","xWidth")};
            let wVal = ${ce.get("output_channel","wInChannel","wHeight","wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;return`
  ${H.registerUniforms(ge).declareVariables(...ye,z)}

  ${H.mainStart()}
    ${H.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${z.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${d?3:1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${d?1:2}], outputIndices[${d?2:3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${w} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${d?2:1}];

    var value: ${z.type.value} = ${z.type.value}(0);
    ${Ie}
    ${i}
    ${se}
    ${z.setByOffset("global_idx","value")}
  }`};return{name:"GroupedConv",shaderCache:{hint:`${s.cacheKey}_${w}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:r?r(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:P}),getShaderSource:A}},Xo=(e,s,t,r)=>{let o=e.length>2,i=Jt(t[3]),a=Jt(t[2]),l=Se.size(t)/i/a,d=[e[0].dims[0],e[0].dims[1],e[0].dims[2],e[0].dims[3]/i],u=[e[1].dims[0],e[1].dims[1],e[1].dims[2],e[1].dims[3]/i],p=[t[0],t[1],t[2],t[3]/i],w=[{type:12,data:l},{type:6,data:[s.strides[0],s.strides[1]]},{type:6,data:[s.pads[0],s.pads[1]]}];Sr(s,w),w.push(...bt(d,u,p));let v=(a-1)*s.strides[1]+u[1],P=C=>{let A=wt("output",e[0].dataType,p.length,i),H=ps(A.type.tensor),z=$r(s,A.type.value,H),k=Le("x",e[0].dataType,d.length,i),se=Le("w",e[1].dataType,u.length,i),Q=[k,se];o&&Q.push(Le("b",e[2].dataType,e[2].dims,i));let ce=o?"value += b[output_channel];":"",ye=[{name:"output_size",type:"u32"},{name:"strides",type:"i32",length:2},{name:"pads",type:"i32",length:2}];return fr(s,ye),`
  ${C.registerUniforms(ye).declareVariables(...Q,A)}
  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${a}u;
    let col = (index1 % width1) * ${a}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${k.type.value}, ${v}>;
    var values: array<${A.type.value}, ${a}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${u[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${v}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${k.get("batch","u32(x_height)","u32(x_width)","input_channel")};
          } else {
            x_vals[i] = ${k.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${u[1]}; w_width++) {
          let w_val = ${se.get("w_height","w_width","0","output_channel")};
          for (var i = 0u; i < ${a}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${a}u; i++) {
      var value = values[i];
      ${ce}
      ${z}
      ${A.set("batch","row","col + i","output_channel","value")};
    }
  }`};return{name:"GroupedConv-Vectorize",shaderCache:{hint:`${s.cacheKey};${i};${a};${v};${u[0]};${u[1]}`,inputDependencies:o?["rank","rank","type"]:["rank","rank"]},getRunData:()=>({outputs:[{dims:r?r(t):t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:w}),getShaderSource:P}}}),Fl,sn,Dl,Pn,Rr,En,Ol,Ll,Jo,zl=f(()=>{B(),xu(),Tu(),qo(),Al(),kr(),bn(),Er(),Fl=(e,s,t,r,o,i)=>{let a=e[0],l=e.slice(i?1:2,i?3:4),d=l.length,u=s[0],p=s.slice(2).map((v,P)=>v+(v-1)*(t[P]-1)),w=l.map((v,P)=>v+r[P]+r[P+d]).map((v,P)=>Math.floor((v-p[P]+o[P])/o[P]));return w.splice(0,0,a),w.splice(i?3:1,0,u),w},sn=[2,3,1,0],Dl=(e,s)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length>5)throw new Error("greater than 5D is not supported");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let t=e[0].dims[s.format==="NHWC"?e[0].dims.length-1:1],r=e[1].dims[1]*s.group;if(t!==r)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");if(e.length===3&&(e[2].dims.length!==1||e[1].dims[0]!==e[2].dims[0]))throw new Error("invalid bias");let o=e[0].dims.length-2;if(s.dilations.length!==o)throw new Error(`dilations should be ${o}D`);if(s.strides.length!==o)throw new Error(`strides should be ${o}D`);if(s.pads.length!==o*2)throw new Error(`pads should be ${o*2}D`);if(s.kernelShape.length!==0&&s.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape")},Pn=(e,s)=>{let t=e.kernelShape.slice();t.length<s[1].dims.length-2&&t.push(...Array(s[1].dims.length-2-t.length).fill(0));for(let i=2;i<s[1].dims.length;++i)t[i-2]===0&&(t[i-2]=s[1].dims[i]);let r=e.pads.slice();Pr.adjustPadsBasedOnAutoPad(s[0].dims,e.strides,e.dilations,t,r,e.format==="NHWC",e.autoPad);let o=Object.assign({},e);return Object.assign(o,{kernelShape:t,pads:r}),o},Rr=e=>{let s=Vo(e),t=e.format,r=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],o=e.dilations,i=e.group,a=e.kernel_shape,l=e.pads,d=e.strides,u=e.w_is_const();return{autoPad:r,format:t,dilations:o,group:i,kernelShape:a,pads:l,strides:d,wIsConst:u,...s,cacheKey:`${e.format};${s.activation};`}},En=(e,s,t,r)=>{let o=t.format==="NHWC",i=Fl(s[0].dims,s[1].dims,t.dilations,t.pads,t.strides,o);if(t.group!==1){let ye=[s[0]];if(o){let ge=e.kernelCustomData.wT??e.compute(As(s[1],sn),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=ge),ye.push(ge)}else ye.push(s[1]);s.length===3&&ye.push(s[2]),!e.adapterInfo.isArchitecture("ampere")&&o&&s[1].dims[0]===t.group&&s[1].dims[1]===1&&t.dilations[0]===1&&t.dilations[1]===1?e.compute(Xo(ye,t,i,r),{inputs:ye}):e.compute(Il(ye,t,i,r),{inputs:ye});return}let a=s.length===3,l=s[0].dims[o?1:2],d=s[0].dims[o?2:3],u=s[0].dims[o?3:1],p=s[1].dims[2],w=s[1].dims[3],v=i[o?1:2],P=i[o?2:3],C=i[o?3:1],A=o&&p===l&&w===d&&t.pads[0]===0&&t.pads[1]===0;if(A||p===1&&w===1&&t.dilations[0]===1&&t.dilations[1]===1&&t.strides[0]===1&&t.strides[1]===1&&t.pads[0]===0&&t.pads[1]===0){let ye=i[0],ge,Ie,Ae,Je=[];if(o){let Xe=e.kernelCustomData.wT??e.compute(As(s[1],sn),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];if(t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=Xe),A){let kt=l*d*u;ge=s[0].reshape([1,ye,kt]),Ie=Xe.reshape([1,kt,C]),Ae=[1,ye,C]}else ge=s[0].reshape([ye,l*d,u]),Ie=Xe.reshape([1,u,C]),Ae=[ye,v*P,C];Je.push(ge),Je.push(Ie)}else ge=s[0].reshape([ye,u,l*d]),Ie=s[1].reshape([1,C,u]),Ae=[ye,C,v*P],Je.push(Ie),Je.push(ge);a&&Je.push(s[2]);let ht=Ae[2],vt=Je[0].dims[Je[0].dims.length-1];ht<8&&vt<8?e.compute(Uo(Je,t,i,Ae,o,r),{inputs:Je}):e.compute(en(Je,t,i,Ae,o,r),{inputs:Je});return}let H=!0,z=e.kernelCustomData.wT??e.compute(As(s[1],sn),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=z);let k=[s[0],z];a&&k.push(s[2]);let se=o?v*P:C,Q=o?C:v*P,ce=p*w*u;e.compute(Qo(k,t,i,se,Q,ce,a,H,r),{inputs:k})},Ol=(e,s)=>{let t=s.format==="NHWC",r=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&r.push(e.inputs[2]);let o=[0,s.pads[0],0,s.pads[1]],i=[1].concat(s.strides),a=[1].concat(s.dilations),l=[1].concat(s.kernelShape),d=Pn({...s,pads:o,strides:i,dilations:a,kernelShape:l},r);En(e,r,d,u=>t?[u[0],u[2],u[3]]:[u[0],u[1],u[3]])},Ll=(e,s,t)=>{let r=t.format==="NHWC"?"channelsLast":"channelsFirst",o=Pn(t,s),i=t.autoPad==="NOTSET"?t.pads:t.autoPad,a=kl(s[0].dims,s[1].dims,t.strides,t.dilations,i,!1,r);e.compute(Tn(s,o,a.outShape,[a.filterDepth,a.filterHeight,a.filterWidth],[a.padInfo.front,a.padInfo.top,a.padInfo.left],r))},Jo=(e,s)=>{if(Dl(e.inputs,s),e.inputs[0].dims.length===3)Ol(e,s);else if(e.inputs[0].dims.length===5)Ll(e,e.inputs,s);else{let t=Pn(s,e.inputs);En(e,e.inputs,t)}}}),Bl,Pu=f(()=>{xt(),Cs(),B(),It(),Bl=(e,s,t)=>{let r=e.length>2,o=s.outputShape,i=s.format==="NHWC",a=s.group,l=e[1].dims,d=l[2]/a,u=l[3],p=i?Jt(d):1,w=i&&u===1&&d>=4,v=w?Math.floor(d/4)*4:Math.floor(d/p)*p,P=d-v,C=i?Jt(u):1,A=i?u===1?p:C:1,H=Se.size(o)/C,z=[Math.ceil(H/64),1,1];Ot("verbose",()=>`[conv2d_backprop_webgpu] dispatch = ${z}`);let k=["rank","rank"],se=[s.strides[0],s.strides[1]],Q=[s.kernelShape[i?1:2],s.kernelShape[i?2:3]],ce=[s.dilations[0],s.dilations[1]],ye=[Q[0]+(s.dilations[0]<=1?0:(s.kernelShape[i?1:2]-1)*(s.dilations[0]-1)),Q[1]+(s.dilations[1]<=1?0:(s.kernelShape[i?2:3]-1)*(s.dilations[1]-1))],ge=[ye[0]-1-Math.floor((s.pads[0]+s.pads[2])/2),ye[1]-1-Math.floor((s.pads[1]+s.pads[3])/2)],Ie=[{type:12,data:H},{type:12,data:se},{type:12,data:Q},{type:12,data:ce},{type:12,data:ye},{type:6,data:ge},{type:12,data:v},{type:12,data:d},{type:12,data:u},...bt(e[0].dims,e[1].dims)];r&&(Ie.push(...bt(e[2].dims)),k.push("rank")),Ie.push(...bt(o));let Ae=Je=>{let ht=[{name:"output_size",type:"u32"},{name:"strides",type:"u32",length:se.length},{name:"filter_dims",type:"u32",length:Q.length},{name:"dilations",type:"u32",length:Q.length},{name:"effective_filter_dims",type:"u32",length:ye.length},{name:"pads",type:"i32",length:ge.length},{name:"input_channels_per_group_int",type:"u32"},{name:"input_channels_per_group",type:"u32"},{name:"output_channels_per_group",type:"u32"}],vt=ps(e[0].dataType),Xe=i?1:2,kt=i?2:3,Bt=i?3:1,rt=Le("W",e[1].dataType,e[1].dims.length,A),Pt=Le("Dy",e[0].dataType,e[0].dims.length,p),Lt=[Pt,rt];r&&Lt.push(Le("bias",e[2].dataType,[o[Bt]].length,C));let Et=wt("result",e[0].dataType,o.length,C),Rt=()=>{let $t="";if(w)p===4?$t+=`
        let xValue = ${Pt.getByOffset("x_offset")};
        let wValue = ${rt.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;`:p===2?$t+=`
          dotProd = dotProd + dot(vec4<${vt}>(${Pt.getByOffset("x_offset")}, ${Pt.getByOffset("x_offset + 1u")}), vec4<${vt}>(${rt.getByOffset("w_offset")}, ${rt.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;`:p===1&&($t+=`
          dotProd = dotProd + dot(vec4<${vt}>(${Pt.getByOffset("x_offset")}, ${Pt.getByOffset("x_offset + 1u")}, ${Pt.getByOffset("x_offset + 2u")}, ${Pt.getByOffset("x_offset + 3u")}), vec4<${vt}>(${rt.getByOffset("w_offset")}, ${rt.getByOffset("w_offset + 1u")}, ${rt.getByOffset("w_offset + 2u")}, ${rt.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);else if($t+=`
                  let xValue = ${i?Pt.getByOffset(`${Pt.indicesToOffset(`${Pt.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p}`):Pt.get("batch","inputChannel","idyR","idyC")};
        `,p===1)$t+=`
          let w_offset = ${rt.indicesToOffset(`${rt.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${rt.getByOffset(`w_offset / ${A}`)};
          dotProd = dotProd + xValue * wValue;`;else for(let jt=0;jt<p;jt++)$t+=`
            let wValue${jt} = ${rt.getByOffset(`${rt.indicesToOffset(`${rt.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${jt}, wOutChannel)`)} / ${A}`)};
            dotProd = dotProd + xValue[${jt}] * wValue${jt};`;return $t},Ve=()=>{if(P===0)return"";if(!w)throw new Error(`packInputAs4 ${w} is not true.`);let $t="";if(p===1){$t+="dotProd = dotProd";for(let jt=0;jt<P;jt++)$t+=`
            + ${Pt.getByOffset(`x_offset + ${jt}`)} * ${rt.getByOffset(`w_offset + ${jt}`)}`;$t+=";"}else if(p===2){if(P!==2)throw new Error(`Invalid inputChannelsRemainder ${P}.`);$t+=`
          let xValue = ${Pt.getByOffset("x_offset")};
          let wValue = ${rt.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`}return $t},it=`
            let outputIndices = ${Et.offsetToIndices(`global_idx * ${C}`)};
            let batch = ${Et.indicesGet("outputIndices",0)};
            let d1 = ${Et.indicesGet("outputIndices",Bt)};
            let r = ${Et.indicesGet("outputIndices",Xe)};
            let c = ${Et.indicesGet("outputIndices",kt)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${Et.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${vt}(dyRCorner) + ${vt}(wR)) / ${vt}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${vt}(uniforms.Dy_shape[${Xe}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${vt}(dyCCorner) + ${vt}(wC)) / ${vt}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${vt}(uniforms.Dy_shape[${kt}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${w?`
                var x_offset = ${Pt.indicesToOffset(`${Pt.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${p};
                var w_offset = ${rt.indicesToOffset(`${rt.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${A};
                  `:""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${w?4:p}) {
                  ${Rt()}
                  inputChannel = inputChannel + ${w?4:p};
                }
                ${Ve()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${r?` + bias[d1 / ${C}]`:""};
            ${Et.setByOffset("global_idx","value")};
          `;return`
    ${Je.registerUniforms(ht).declareVariables(...Lt,Et)}
      ${Je.mainStart()}
      ${Je.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${it}}`};return{name:"ConvTranspose2D",shaderCache:{hint:`${s.cacheKey};${p}${A}${C}${w}${P}`,inputDependencies:k},getRunData:()=>({dispatchGroup:{x:z[0],y:z[1],z:z[2]},outputs:[{dims:t?t(o):o,dataType:e[0].dataType}],programUniforms:Ie}),getShaderSource:Ae}}}),Rl,Yo,jl,Zo,ei,Nl,ti,Vl,si,Eu=f(()=>{Pu(),kr(),Er(),Rl=(e,s,t,r,o,i)=>(e-1)*s+t+(r-1)*o+1-i,Yo=(e,s,t,r,o)=>{let i=Math.floor(e/2);s==="SAME_UPPER"?(t[r]=i,t[o]=e-i):s==="SAME_LOWER"&&(t[r]=e-i,t[o]=i)},jl=(e,s,t,r,o,i,a,l,d,u)=>{let p=e.length-2,w=u.length===0;d.length<p&&d.push(...Array(p-d.length).fill(0));let v=e[0],P=s[l?3:1]*o;for(let C=0,A=e.length-p-(l?1:0);C<p;++C,++A){let H=e[A],z=w?H*a[C]:u[C],k=Rl(H,a[C],i[C],s[A],t[C],z);Yo(k,r,i,C,C+p),w&&u.push(a[C]*(H-1)+d[C]+(s[A]-1)*t[C]+1-i[C]-i[C+p])}u.splice(0,0,v),u.splice(l?3:1,0,P)},Zo=(e,s)=>{let t=e.kernelShape.slice();if(e.kernelShape.length===0||e.kernelShape.reduce((w,v)=>w*v,1)===0){t.length=0;for(let w=2;w<s[1].dims.length;++w)t.push(s[1].dims[w])}let r=e.format==="NHWC";t.splice(0,0,s[1].dims[0]),t.splice(r?3:1,0,s[1].dims[1]);let o=e.pads.slice(),i=e.outputShape.slice(),a=e.outputPadding.slice(),l=s[0].dims,d=e.dilations.slice();if(d.reduce((w,v)=>w+v,0)===0){let w=s[0].dims.length-2;d=new Array(w).fill(1)}let u=e.strides.slice();if(u.reduce((w,v)=>w+v,0)===0){let w=s[0].dims.length-2;u=new Array(w).fill(1)}jl(l,t,d,e.autoPad,e.group,o,u,r,a,i);let p=Object.assign({},e);return Object.assign(p,{kernelShape:t,pads:o,outputPadding:a,outputShape:i,dilations:d,strides:u}),p},ei=e=>{let s=Vo(e),t=e.format,r=["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][typeof e.autoPad>"u"?0:e.autoPad],o=e.dilations,i=e.group,a=e.kernelShape,l=e.pads,d=e.strides,u=e.wIsConst(),p=e.outputPadding,w=e.outputShape;return{autoPad:r,format:t,dilations:o,group:i,kernelShape:a,outputPadding:p,outputShape:w,pads:l,strides:d,wIsConst:u,...s,cacheKey:`${e.format};${s.activation};`}},Nl=(e,s)=>{if(!e||e.length!==2&&e.length!==3)throw new Error("Conv requires 2 or 3 inputs");if(e[0].dims.length!==4&&e[0].dims.length!==3)throw new Error("currently only support 2-dimensional conv");if(e[0].dims.length!==e[1].dims.length)throw new Error("filter does not have same dimension as input");let t=e[0].dims[s.format==="NHWC"?e[0].dims.length-1:1],r=e[1].dims[0];if(t!==r)throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");let o=e[1].dims[1]*s.group;if(e.length===3&&(e[2].dims.length!==1||e[2].dims[0]!==o))throw new Error("invalid bias");let i=e[0].dims.length-2;if(s.dilations.reduce((a,l)=>a+l,0)>0&&s.dilations.length!==i)throw new Error(`dilations should be ${i}D`);if(s.strides.reduce((a,l)=>a+l,0)>0&&s.strides.length!==i)throw new Error(`strides should be ${i}D`);if(s.pads.reduce((a,l)=>a+l,0)>0&&s.pads.length!==i*2)throw new Error(`pads should be ${i*2}D`);if(s.outputPadding.length!==i&&s.outputPadding.length!==0)throw new Error(`output_padding should be ${i}D`);if(s.kernelShape.reduce((a,l)=>a+l,0)>0&&s.kernelShape.length!==0&&s.kernelShape.length!==e[1].dims.length-2)throw new Error("invalid kernel shape");if(s.outputShape.length!==0&&s.outputShape.length!==e[0].dims.length-2)throw new Error("invalid output shape")},ti=(e,s,t,r)=>{let o=e.kernelCustomData.wT??e.compute(As(s[1],[2,3,0,1]),{inputs:[1],outputs:[t.wIsConst?-2:-1]})[0];t.wIsConst&&!e.kernelCustomData.wT&&(e.kernelCustomData.wT=o);let i=[s[0],o];s.length===3&&i.push(s[2]),e.compute(Bl(i,t,r),{inputs:i})},Vl=(e,s)=>{let t=s.format==="NHWC",r=[e.inputs[0].reshape(t?[e.inputs[0].dims[0],1,e.inputs[0].dims[1],e.inputs[0].dims[2]]:[e.inputs[0].dims[0],e.inputs[0].dims[1],1,e.inputs[0].dims[2]]),e.inputs[1].reshape([e.inputs[1].dims[0],e.inputs[1].dims[1],1,e.inputs[1].dims[2]])];e.inputs.length===3&&r.push(e.inputs[2]);let o=s.kernelShape;(o.length===0||o[0]===0)&&(o=[e.inputs[1].dims[2]]);let i=s.dilations;(i.length===0||i[0]===0)&&(i=[1]);let a=s.strides;(a.length===0||a[0]===0)&&(a=[1]);let l=s.pads;l.length===0&&(l=[0,0]),l=[0,l[0],0,l[1]],a=[1].concat(a),i=[1].concat(i),o=[1].concat(o);let d=s.outputPadding;d=[0].concat(d);let u=Zo({...s,pads:l,strides:a,dilations:i,kernelShape:o,outputPadding:d},r);ti(e,r,u,p=>t?[p[0],p[2],p[3]]:[p[0],p[1],p[3]])},si=(e,s)=>{if(Nl(e.inputs,s),e.inputs[0].dims.length===3)Vl(e,s);else{let t=Zo(s,e.inputs);ti(e,e.inputs,t)}}}),Ul,ri,Wl,Cu=f(()=>{xt(),B(),Wt(),It(),Ul=(e,s,t,r)=>{let o=Se.size(s),i=s.length,a=Le("input",e,i),l=wt("output",e,i),d=t.dataType===6?t.getInt32Array()[0]:Number(t.getBigInt64Array()[0]),u=Se.normalizeAxis(d,i),p=w=>{let v=` i32(${a.indicesGet("inputIndices","uniforms.axis")}) `,P=yt("uniforms.input_shape","uniforms.axis",i),C=r.reverse?v+(r.exclusive?" + 1":""):"0",A=r.reverse?P:v+(r.exclusive?"":" + 1");return`
                ${w.registerUniform("outputSize","u32").registerUniform("axis","u32").declareVariables(a,l)}
                ${w.mainStart()}
                  ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${l.offsetToIndices("global_idx")};
                  var sum = ${l.type.value}(0);
                  let first : i32 = ${C};
                  let last : i32 = ${A};
                  for (var i : i32 = first; i < last; i++) {
                    ${a.indicesSet("inputIndices","uniforms.axis","u32(i)")};
                    sum = sum + ${a.getByIndices("inputIndices")};
                  }
                  ${l.setByOffset("global_idx","sum")};
                }`};return{name:"CumSum",shaderCache:{hint:r.cacheKey,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:s,dataType:e}],dispatchGroup:{x:Math.ceil(o/64)},programUniforms:[{type:12,data:o},{type:12,data:u},...bt(s,s)]}),getShaderSource:p}},ri=(e,s)=>{let t=e.inputs[0].dims,r=e.inputs[0].dataType,o=e.inputs[1];e.compute(Ul(r,t,o,s),{inputs:[0]})},Wl=e=>{let s=e.exclusive===1,t=e.reverse===1;return Ct({exclusive:s,reverse:t})}}),ni,Gl,Kl,Cn,Hl,$u=f(()=>{xt(),B(),Wt(),It(),ni=e=>{if(!e||e.length!==1)throw new Error("DepthToSpace requires 1 input.");if(e[0].dims.length!==4)throw new Error("DepthToSpace requires 4D input.")},Gl=(e,s,t,r)=>{let o=[];o.push(`fn perm(i: ${r.type.indices}) -> ${t.type.indices} {
    var a: ${t.type.indices};`);for(let i=0;i<s;++i)o.push(t.indicesSet("a",e[i],`i[${i}]`));return o.push("return a;}"),o.join(`
`)},Kl=(e,s)=>{let t,r,o,i,a,l,d=s.format==="NHWC",u=s.blocksize,p=s.mode==="DCR";d?([t,r,o,i]=e.dims,a=p?[t,r,o,u,u,i/u**2]:[t,r,o,i/u**2,u,u],l=p?[0,1,3,2,4,5]:[0,1,4,2,5,3]):([t,r,o,i]=[e.dims[0],e.dims[2],e.dims[3],e.dims[1]],a=p?[t,u,u,i/u**2,r,o]:[t,i/u**2,u,u,r,o],l=p?[0,3,4,1,5,2]:[0,1,4,2,5,3]);let w=e.reshape(a),v=w.dims.length,P=e.dataType,C=Le("a",P,v),A=wt("output",P,v),H=z=>`
  ${z.registerUniform("output_size","u32").declareVariables(C,A)}

  ${Gl(l,v,C,A)}

  ${z.mainStart()}
    ${z.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${A.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${A.setByOffset("global_idx",C.getByIndices("aIndices"))}
  }`;return{name:"DepthToSpace",shaderCache:{hint:`${e.dims};${s.blocksize};${s.mode}`,inputDependencies:["rank"]},getRunData:z=>{let k=d?[t,r*u,o*u,i/u**2]:[t,i/u**2,r*u,o*u],se=Se.size(k),Q=w.dims,ce=Se.sortBasedOnPerm(Q,l);return{outputs:[{dims:k,dataType:z[0].dataType}],dispatchGroup:{x:Math.ceil(se/64)},programUniforms:[{type:12,data:se},...bt(Q,ce)]}},getShaderSource:H}},Cn=(e,s)=>{ni(e.inputs),e.compute(Kl(e.inputs[0],s))},Hl=e=>Ct({blocksize:e.blocksize,mode:e.mode,format:e.format})}),$n,jr,oi,ql,ii,Ql,Xl,ai,Jl,Sn,Yl,Su=f(()=>{xt(),B(),Wt(),It(),$n="[a-zA-Z]|\\.\\.\\.",jr="("+$n+")+",oi="^"+jr+"$",ql="("+jr+",)*"+jr,ii="^"+ql+"$",Ql=class{constructor(e=-1){this.symbolToIndices=new Map,this.inputIndex=e}addSymbol(e,s){let t=this.symbolToIndices.get(e);t===void 0?t=[s]:t.push(s),this.symbolToIndices.set(e,t)}},Xl=class{constructor(e,s){this.equation=s,this.hasEllipsis=!1,this.symbolToInfo=new Map,this.lhs=new Array,this.outputDims=[];let[t,r]=s.includes("->")?s.split("->",2):[s,""];if(!t.match(RegExp(ii)))throw new Error("Invalid LHS term");if(t.split(",").forEach((o,i)=>{let a=e[i].dims.slice();if(!o.match(RegExp(oi)))throw new Error("Invalid LHS term");let l=this.processTerm(o,!0,a,i);this.lhs.push(l)}),r==="")r+=[...this.symbolToInfo.entries()].filter(([o,i])=>i.count===1||o==="...").map(([o])=>o).join("");else if(!r.match(RegExp(jr)))throw new Error("Invalid RHS");r.match(RegExp($n,"g"))?.forEach(o=>{if(o==="...")this.outputDims=this.outputDims.concat(this.ellipsisDims);else{let i=this.symbolToInfo.get(o);if(i===void 0)throw new Error("Invalid RHS symbol");this.outputDims.push(i.dimValue)}}),this.rhs=this.processTerm(r,!1,this.outputDims)}addSymbol(e,s,t){let r=this.symbolToInfo.get(e);if(r!==void 0){if(r.dimValue!==s&&r.count!==1)throw new Error("Dimension mismatch");r.count++,r.inputIndices.push(t)}else r={count:1,dimValue:s,inputIndices:[t]};this.symbolToInfo.set(e,r)}processTerm(e,s,t,r=-1){let o=t.length,i=!1,a=[],l=0;if(!e.match(RegExp(oi))&&!s&&e!=="")throw new Error("Invalid LHS term");let d=e.match(RegExp($n,"g")),u=new Ql(r);return d?.forEach((p,w)=>{if(p==="..."){if(i)throw new Error("Only one ellipsis is allowed per input term");i=!0;let v=o-d.length+1;if(v<0)throw new Error("Ellipsis out of bounds");if(a=t.slice(l,l+v),this.hasEllipsis){if(this.ellipsisDims.length!==a.length||this.ellipsisDims.toString()!==a.toString())throw new Error("Ellipsis dimensions mismatch")}else if(s)this.hasEllipsis=!0,this.ellipsisDims=a;else throw new Error("Ellipsis must be specified in the LHS");for(let P=0;P<a.length;P++){let C=String.fromCharCode(48+P);u.addSymbol(C,w+P),this.addSymbol(C,t[l++],r)}}else u.addSymbol(p,w+(this.hasEllipsis?this.ellipsisDims.length-1:0)),this.addSymbol(p,t[l++],r)}),u}},ai=e=>e+"_max",Jl=(e,s,t,r)=>{let o=e.map(u=>u.length).map((u,p)=>Le(`input${p}`,s,u)),i=Se.size(r),a=wt("output",s,r.length),l=[...t.symbolToInfo.keys()].filter(u=>!t.rhs.symbolToIndices.has(u)),d=u=>{let p=[],w="var prod = 1.0;",v="var sum = 0.0;",P="sum += prod;",C=[],A=[],H=[],z=[],k=t.symbolToInfo.size===t.rhs.symbolToIndices.size;t.symbolToInfo.forEach((Q,ce)=>{if(t.rhs.symbolToIndices.has(ce)){let ye=t.rhs.symbolToIndices.get(ce)?.[0];ye!==void 0&&t.lhs.forEach((ge,Ie)=>{if(Q.inputIndices.includes(Ie)){let Ae=ge.symbolToIndices.get(ce);if(Ae===void 0)throw new Error("Invalid symbol error");Ae.forEach(Je=>{p.push(`${o[Ie].indicesSet(`input${Ie}Indices`,Je,a.indicesGet("outputIndices",ye))}`)})}})}else t.lhs.forEach((ye,ge)=>{if(Q.inputIndices.includes(ge)){let Ie=ye.symbolToIndices.get(ce);if(Ie===void 0)throw new Error("Invalid symbol error");Ie.forEach(Ae=>{C.push(`${o[ge].indicesSet(`input${ge}Indices`,Ae,`${ce}`)}`)}),z.push(`prod *= ${o[ge].getByIndices(`input${ge}Indices`)};`)}}),A.push(`for(var ${ce}: u32 = 0; ${ce} < uniforms.${ai(ce)}; ${ce}++) {`),H.push("}")});let se=k?[...p,`let sum = ${o.map((Q,ce)=>Q.getByIndices(`input${ce}Indices`)).join(" * ")};`]:[...p,v,...A,...C,w,...z,P,...H];return`
            ${u.registerUniforms(l.map(Q=>({name:`${ai(Q)}`,type:"u32"}))).registerUniform("outputSize","u32").declareVariables(...o,a)}

            ${u.mainStart()}
            ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${a.offsetToIndices("global_idx")};
            ${o.map((Q,ce)=>`var input${ce}Indices: ${o[ce].type.indices};`).join(`
`)}
            ${se.join(`
`)};
            ${a.setByOffset("global_idx","sum")};
          }`};return{name:"Einsum",shaderCache:{hint:t.equation,inputDependencies:e.map(()=>"rank")},getRunData:()=>{let u=l.filter(w=>t.symbolToInfo.has(w)).map(w=>({type:12,data:t.symbolToInfo.get(w)?.dimValue||0}));u.push({type:12,data:i});let p=e.map((w,v)=>[...bt(w)]).reduce((w,v)=>w.concat(v),u);return p.push(...bt(r)),{outputs:[{dims:r,dataType:s}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:p}},getShaderSource:d}},Sn=(e,s)=>{let t=new Xl(e.inputs,s.equation),r=t.outputDims,o=e.inputs.map((i,a)=>i.dims);e.compute(Jl(o,e.inputs[0].dataType,t,r))},Yl=e=>{let s=e.equation.replace(/\s+/g,"");return Ct({equation:s})}}),Zl,li,ec,tc,sc,ku=f(()=>{xt(),B(),It(),Zl=e=>{if(!e||e.length!==2)throw new Error("Expand requires 2 input.");let s=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),r=t.length<s.length?0:t.length-s.length,o=s.length<t.length?0:s.length-t.length;for(;r<t.length&&o<s.length;++r,++o)if(t[r]!==s[o]&&t[r]!==1&&s[o]!==1)throw new Error("Expand requires shape to be broadcastable to input")},li=(e,s)=>{let t=e.length-s.length,r=[];for(let o=0;o<t;++o)r.push(e[o]);for(let o=0;o<s.length;++o)r.push(s[o]===1?e[o+t]:s[o]);return r},ec=(e,s)=>e.length>s.length?li(e,s):li(s,e),tc=e=>{let s=e[0].dims,t=Array.from(e[1].getBigInt64Array(),Number),r=ec(s,t),o=e[0].dataType,i=o===9||Se.size(s)===1,a=o===9||s.length>0&&s[s.length-1]%4===0?4:1,l=i||r.length>0&&r[r.length-1]%4===0?4:1,d=Math.ceil(Se.size(r)/l),u=w=>{let v=Le("input",o,s.length,a),P=wt("output",o,r.length,l),C;if(o===9){let A=(H,z,k="")=>`
          let outputIndices${z} = ${P.offsetToIndices(`outputOffset + ${z}u`)};
          let offset${z} = ${v.broadcastedIndicesToOffset(`outputIndices${z}`,P)};
          let index${z} = offset${z} / 4u;
          let component${z} = offset${z} % 4u;
          ${H}[${z}] = ${k}(${v.getByOffset(`index${z}`)}[component${z}]);
        `;C=`
        let outputOffset = global_idx * ${l};
        var data = vec4<u32>(0);
        ${A("data",0,"u32")}
        ${A("data",1,"u32")}
        ${A("data",2,"u32")}
        ${A("data",3,"u32")}
        ${P.setByOffset("global_idx","data")}
      }`}else C=`
        let outputIndices = ${P.offsetToIndices(`global_idx * ${l}`)};
        let inputOffset = ${v.broadcastedIndicesToOffset("outputIndices",P)};
        let data = ${P.type.value}(${v.getByOffset(`inputOffset / ${a}`)});
        ${P.setByOffset("global_idx","data")}
      }`;return`
    ${w.registerUniform("vec_size","u32").declareVariables(v,P)}
    ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${C}`},p=[{type:12,data:d},...bt(s,r)];return{name:"Expand",shaderCache:{hint:`${r.length};${a}${l}`,inputDependencies:["rank"]},getShaderSource:u,getRunData:()=>({outputs:[{dims:r,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:p})}},sc=e=>{Zl(e.inputs),e.compute(tc(e.inputs),{inputs:[0]})}}),rc,ci,Iu=f(()=>{xt(),B(),It(),Mn(),rc=e=>{let s=e[0].dataType,t=Se.size(e[0].dims),r=Se.size(e[1].dims),o=r%4===0,i=a=>{let l=Le("x",s,[1],4),d=Le("bias",s,[1],4),u=wt("y",s,[1],4),p=[{name:"output_vec_size",type:"u32"},{name:"bias_size",type:"u32"}],w=P=>`
      let bias${P}_offset: u32 = (global_idx * 4 + ${P}) % uniforms.bias_size;
      let bias${P} = ${d.getByOffset(`bias${P}_offset / 4`)}[bias${P}_offset % 4];`,v=o?`
      let bias = ${d.getByOffset("global_idx % (uniforms.bias_size / 4)")};`:`${w(0)}${w(1)}${w(2)}${w(3)}
      let bias = ${l.type.value}(bias0, bias1, bias2, bias3);`;return`${a.registerUniforms(p).declareVariables(l,d,u)}

    ${Io(Ps(s))}

    ${a.mainStart(er)}
      ${a.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${l.getByOffset("global_idx")};
      ${v}
      let x_in = x + bias;
      ${u.setByOffset("global_idx",Ao("x_in"))}
    }`};return{name:"FastGeluWithBias",shaderCache:{hint:`${o}`,inputDependencies:["type","type"]},getShaderSource:i,getRunData:a=>({outputs:[{dims:a[0].dims,dataType:a[0].dataType}],programUniforms:[{type:12,data:Math.ceil(t/4)},{type:12,data:r}],dispatchGroup:{x:Math.ceil(t/er/4)}})}},ci=e=>{e.inputs.length<2||Se.size(e.inputs[1].dims)===0?Fo(e):e.compute(rc(e.inputs))}}),nc,di,oc,ic,Au=f(()=>{xt(),B(),Wt(),It(),nc=e=>{if(!e||e.length!==2)throw new Error("Gather requires 2 inputs.")},di=(e,s)=>{let t=e[0].dims,r=e[1].dims,o=t.length,i=Se.normalizeAxis(s.axis,o),a=t.slice(0);a.splice(i,1,...r);let l=t[i],d=e[0].dataType===9?4:1,u=Math.ceil(Se.size(a)/d),p=[{type:12,data:u},{type:6,data:l},{type:12,data:i},...bt(e[0].dims,e[1].dims,a)],w=v=>{let P=Le("data",e[0].dataType,e[0].dims.length,d),C=Le("inputIndices",e[1].dataType,e[1].dims.length),A=wt("output",e[0].dataType,a.length,d),H=k=>{let se=r.length,Q=`var indicesIndices${k}  = ${C.type.indices}(0);`;for(let ce=0;ce<se;ce++)Q+=`${se>1?`indicesIndices${k}[${ce}]`:`indicesIndices${k}`} = ${a.length>1?`outputIndices${k}[uniforms.axis + ${ce}]`:`outputIndices${k}`};`;Q+=`
          var idx${k} = ${C.getByIndices(`indicesIndices${k}`)};
          if (idx${k} < 0) {
            idx${k} = idx${k} + uniforms.axisDimLimit;
          }
          var dataIndices${k} : ${P.type.indices};
        `;for(let ce=0,ye=0;ce<o;ce++)ce===i?(Q+=`${o>1?`dataIndices${k}[${ce}]`:`dataIndices${k}`} = u32(idx${k});`,ye+=se):(Q+=`${o>1?`dataIndices${k}[${ce}]`:`dataIndices${k}`} = ${a.length>1?`outputIndices${k}[${ye}]`:`outputIndices${k}`};`,ye++);return Q},z;if(e[0].dataType===9){let k=(se,Q,ce="")=>`
          let outputIndices${Q} = ${A.offsetToIndices(`outputOffset + ${Q}u`)};
          ${H(Q)};
          let offset${Q} = ${P.indicesToOffset(`dataIndices${Q}`)};
          let index${Q} = offset${Q} / 4u;
          let component${Q} = offset${Q} % 4u;
          ${se}[${Q}] = ${ce}(${P.getByOffset(`index${Q}`)}[component${Q}]);
        `;z=`
        let outputOffset = global_idx * ${d};
        var value = vec4<u32>(0);
        ${k("value",0,"u32")}
        ${k("value",1,"u32")}
        ${k("value",2,"u32")}
        ${k("value",3,"u32")}
        ${A.setByOffset("global_idx","value")}
      `}else z=`
      let outputIndices = ${A.offsetToIndices("global_idx")};
      ${H("")};
      let value = ${P.getByIndices("dataIndices")};
      ${A.setByOffset("global_idx","value")};
      `;return`
      ${v.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(P,C,A)}
      ${v.mainStart()}
        ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${z}
      }`};return{name:"Gather",shaderCache:{hint:s.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:a,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:p}),getShaderSource:w}},oc=e=>Ct({axis:e.axis}),ic=(e,s)=>{let t=e.inputs;nc(t),e.compute(di(e.inputs,s))}}),ac,ui,lc,Fu=f(()=>{xt(),B(),It(),ac=(e,s,t,r,o,i,a,l,d)=>{let u=[{type:12,data:i},{type:12,data:r},{type:12,data:o},{type:12,data:t},{type:12,data:a},{type:12,data:l},{type:12,data:d}],p=[i];u.push(...bt(s.dims,p));let w=v=>{let P=Le("indices_data",s.dataType,s.dims.length),C=wt("input_slice_offsets_data",12,1,1),A=[P,C],H=[{name:"output_size",type:"u32"},{name:"batch_dims",type:"u32"},{name:"input_dims",type:"u32",length:o.length},{name:"sizes_from_slice_dims_data",type:"u32",length:t.length},{name:"num_slices_per_batch",type:"u32"},{name:"input_batch_stride",type:"u32"},{name:"num_slice_dims",type:"u32"}];return`
  ${v.registerUniforms(H).declareVariables(...A)}
  ${v.mainStart()}
    ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${o.length===1?"index += i32(uniforms.input_dims);":"index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${t.length===1?"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);":"relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`};return e.compute({name:"computeSliceOffsets",shaderCache:{hint:`${o.length}_${t.length}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:p,dataType:e.inputs[1].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:u}),getShaderSource:w},{inputs:[s],outputs:[-1]})[0]},ui=(e,s)=>{let t=e.inputs,r=t[0].dims,o=t[0].dataType,i=t[1].dims,a=i[i.length-1],l=Se.sizeToDimension(i,i.length-1),d=Se.sizeFromDimension(r,s.batchDims+a),u=Se.sizeToDimension(r,s.batchDims),p=Se.sizeFromDimension(r,s.batchDims),w=l/u,v=new Array(a),P=d;for(let Q=0;Q<a;++Q)v[a-1-Q]=P,P*=r[s.batchDims+a-1-Q];let C=ac(e,t[1],v,s.batchDims,r,l,w,p,a),A=s.batchDims+a;if(A>r.length)throw new Error("last dimension of indices must not be larger than rank of input tensor");let H=i.slice(0,-1).concat(r.slice(A)),z=Se.size(H),k=[{type:12,data:z},{type:12,data:d},...bt(t[0].dims,C.dims,H)],se=Q=>{let ce=Le("data",t[0].dataType,t[0].dims.length),ye=Le("slice_offsets",12,C.dims.length),ge=wt("output",t[0].dataType,H.length);return`
          ${Q.registerUniform("output_size","u32").registerUniform("slice_size","u32").declareVariables(ce,ye,ge)}
            ${Q.mainStart()}
            ${Q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`};e.compute({name:"GatherND",shaderCache:{hint:s.cacheKey,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:H,dataType:o}],dispatchGroup:{x:Math.ceil(z/64)},programUniforms:k}),getShaderSource:se},{inputs:[t[0],C]})},lc=e=>({batchDims:e.batch_dims,cacheKey:""})}),pi,cc,dc,hi,Du=f(()=>{xt(),B(),Wt(),It(),pi=(e,s)=>{if(e.length<3||e.length>4)throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");let t=Se.normalizeAxis(s.quantizeAxis,e[0].dims.length),r=s.blockSize,o=e[0],i=e[2],a=e.length===4?e[3]:void 0;if(i.dims.length!==o.dims.length||!o.dims.map((l,d)=>d===t?Math.ceil(l/r)===i.dims[d]:l===i.dims[d]).reduce((l,d)=>l&&d,!0))throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");if(a){if(a.dataType!==o.dataType)throw new Error("Zero point must have the same data type as the input tensor.");if(a.dims.length!==i.dims.length||!a.dims.map((l,d)=>l===i.dims[d]).reduce((l,d)=>l&&d,!0))throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.")}},cc=(e,s)=>{let t=e[0].dims,r=e[1].dims,o=t.length,i=Se.normalizeAxis(s.gatherAxis,o),a=Se.normalizeAxis(s.quantizeAxis,o),l=t.slice(0);l.splice(i,1,...r);let d=Se.size(l),u=e[2].dataType,p=e[0].dataType===22,w=[{type:12,data:d},{type:12,data:a},{type:12,data:i},{type:12,data:s.blockSize},...bt(...e.map((P,C)=>P.dims),l)],v=P=>{let C=Le("data",e[0].dataType,e[0].dims.length),A=Le("inputIndices",e[1].dataType,e[1].dims.length),H=Le("scales",e[2].dataType,e[2].dims.length),z=e.length>3?Le("zeroPoint",e[3].dataType,e[3].dims.length):void 0,k=wt("output",u,l.length),se=[C,A,H];z&&se.push(z);let Q=[{name:"output_size",type:"u32"},{name:"quantize_axis",type:"u32"},{name:"gather_axis",type:"u32"},{name:"block_size",type:"u32"}];return`
        ${P.registerUniforms(Q).declareVariables(...se,k)}
        ${P.mainStart()}
        let output_indices = ${k.offsetToIndices("global_idx")};
        var indices_indices = ${A.type.indices}(0);
        ${r.length>1?`
          for (var i: u32 = 0; i < ${r.length}; i++) {
            let index = ${k.indicesGet("output_indices","uniforms.gather_axis + i")};
            ${A.indicesSet("indices_indices","i","index")};
          }`:`indices_indices = ${k.indicesGet("output_indices","uniforms.gather_axis")};`};
        var data_indices = ${C.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${k.indicesGet("output_indices","i")};
          ${C.indicesSet("data_indices","i","index")};
        }
        var index_from_indices = ${A.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${t[i]};
        }
        ${C.indicesSet("data_indices","uniforms.gather_axis","u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${l.length}; i++) {
          let index = ${k.indicesGet("output_indices",`i + ${r.length} - 1`)};
          ${C.indicesSet("data_indices","i","index")};
        }
        let data_offset = ${C.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${C.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${p?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${H.indicesGet("data_indices","uniforms.quantize_axis")} / uniforms.block_size;
        ${H.indicesSet("scale_indices","uniforms.quantize_axis","quantize_axis_index")};
        var scale = ${H.getByIndices("scale_indices")};
        ${z?`
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${z.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${z.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${p?"unpack4xI8":"unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];`:"var zero_point = 0"};
        let dequantized_data = ${Ps(u)}(quantized_data - zero_point) * scale;
        ${k.setByOffset("global_idx","dequantized_data")};
    }`};return{name:"GatherBlockQuantized",shaderCache:{hint:`${s.cacheKey};${e.filter((P,C)=>C!==1).map(P=>P.dims.join("_")).join(";")}`,inputDependencies:Array.from({length:e.length},(P,C)=>"rank")},getRunData:()=>({outputs:[{dims:l,dataType:u}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:w}),getShaderSource:v}},dc=(e,s)=>{let t=e.inputs;pi(t,s),e.compute(cc(e.inputs,s))},hi=e=>Ct({blockSize:e.blockSize,gatherAxis:e.gatherAxis,quantizeAxis:e.quantizeAxis})}),uc,mi,pc,hc,Ou=f(()=>{xt(),B(),Wt(),It(),uc=e=>{if(!e||e.length!==2)throw new Error("GatherElements requires 2 inputs.");if(e[0].dims.length<1)throw new Error("GatherElements requires that the data input be rank >= 1.");if(e[0].dims.length!==e[1].dims.length)throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`)},mi=(e,s)=>{let t=e[0].dims,r=e[0].dataType,o=t.length,i=e[1].dims,a=e[1].dataType,l=Se.normalizeAxis(s.axis,o),d=t[l],u=i.slice(0),p=Se.size(u),w=Le("input",r,o),v=Le("indicesInput",a,i.length),P=wt("output",r,u.length),C=[{type:12,data:p},{type:6,data:d},{type:12,data:l}];return C.push(...bt(t,i,u)),{name:"GatherElements",shaderCache:{inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:u,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:C}),getShaderSource:A=>`
      ${A.registerUniform("outputSize","u32").registerUniform("axisDimLimit","i32").registerUniform("axis","u32").declareVariables(w,v,P)}
      ${A.mainStart()}
      ${A.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${P.offsetToIndices("global_idx")};

      var idx = ${v.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${w.type.indices}(outputIndices);
      ${w.indicesSet("inputIndices","uniforms.axis","u32(idx)")};
      let value = ${w.getByIndices("inputIndices")};

      ${P.setByOffset("global_idx","value")};
  }`}},pc=e=>Ct({axis:e.axis}),hc=(e,s)=>{let t=e.inputs;uc(t),e.compute(mi(e.inputs,s))}}),mc,_c,fc,gc,Lu=f(()=>{xt(),B(),It(),mc=e=>{if(!e)throw new Error("Input is missing");if(e.length<2||e.length>3)throw new Error("Invaid input number.");if(e.length===3&&e[2].dims.length>2)throw new Error("Invalid input shape of C");if(e[0].dataType!==e[1].dataType||e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("Input types are mismatched")},_c=(e,s)=>{let t=e[0].dims.slice(),r=e[1].dims.slice(),[o,i,a]=pn.getShapeOfGemmResult(t,s.transA,r,s.transB,e.length===3?e[2].dims:void 0),l=[o,i];if(!l)throw new Error("Can't use gemm on the given tensors");let d=16,u=Math.ceil(i/d),p=Math.ceil(o/d),w=!0,v=Se.size(l),P=[{type:12,data:w?u:v},{type:12,data:o},{type:12,data:i},{type:12,data:a},{type:1,data:s.alpha},{type:1,data:s.beta}],C=["type","type"];e.length===3&&(P.push(...bt(e[2].dims)),C.push("rank")),P.push(...bt(l));let A=z=>{let k="";s.transA&&s.transB?k="value += a[k * uniforms.M + m] * b[n * uniforms.K + k];":s.transA&&!s.transB?k="value += a[k * uniforms.M + m] * b[k * uniforms.N + n];":!s.transA&&s.transB?k="value += a[m * uniforms.K + k] * b[n * uniforms.K + k];":!s.transA&&!s.transB&&(k="value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");let se=s.alpha===1?"":"value *= uniforms.alpha;",Q=Le("a",e[0].dataType,e[0].dims),ce=Le("b",e[1].dataType,e[1].dims),ye=Q.type.value,ge=null,Ie=[Q,ce];e.length===3&&(ge=Le("c",e[2].dataType,e[2].dims.length),Ie.push(ge));let Ae=wt("output",e[0].dataType,l.length);Ie.push(Ae);let Je=[{name:"output_size",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}];return`
  ${z.registerUniforms(Je).declareVariables(...Ie)}

  ${z.mainStart()}
    ${z.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${ye}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${k}
    }

    ${se}
    ${ge!=null?`let cOffset = ${ge.broadcastedIndicesToOffset("vec2(m, n)",Ae)}; value += ${ye}(uniforms.beta) * ${ge.getByOffset("cOffset")};`:""}
    output[global_idx] = value;
  }`},H=z=>{let k=Le("a",e[0].dataType,e[0].dims),se=Le("b",e[1].dataType,e[1].dims),Q=null,ce=[k,se];e.length===3&&(Q=Le("c",e[2].dataType,e[2].dims.length),ce.push(Q));let ye=wt("output",e[0].dataType,l.length);ce.push(ye);let ge=[{name:"num_tile_n",type:"u32"},{name:"M",type:"u32"},{name:"N",type:"u32"},{name:"K",type:"u32"},{name:"alpha",type:"f32"},{name:"beta",type:"f32"}],Ie="",Ae="";s.transA&&s.transB?(Ae=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${k.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${se.type.value}(0);
      }
      `,Ie="value += tile_a[k][local_id.y] * tile_b[local_id.x][k];"):s.transA&&!s.transB?(Ae=`
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${k.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${se.type.value}(0);
      }
      `,Ie="value += tile_a[k][local_id.y] * tile_b[k][local_id.x];"):!s.transA&&s.transB?(Ae=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${k.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${se.type.value}(0);
      }
      `,Ie="value += tile_a[local_id.y][k] * tile_b[local_id.x][k];"):!s.transA&&!s.transB&&(Ae=`
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${k.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${se.type.value}(0);
      }
      `,Ie="value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");let Je=s.alpha===1?"":"value *= uniforms.alpha;";return`
  ${z.registerUniforms(ge).declareVariables(...ce)}
  var<workgroup> tile_a: array<array<${k.type.storage}, ${d}>, ${d}>;
  var<workgroup> tile_b: array<array<${se.type.storage}, ${d}>, ${d}>;
  ${z.mainStart([d,d,1])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${d};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${d};
    let num_tiles = (uniforms.K - 1) / ${d} + 1;
    var k_start = 0u;
    var value = ${ye.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${Ae}
      k_start = k_start + ${d};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${d}; k++) {
        ${Ie}
      }
      workgroupBarrier();
    }

    ${Je}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${Q!=null?`let cOffset = ${Q.broadcastedIndicesToOffset("vec2(m, n)",ye)}; value += ${ye.type.value}(uniforms.beta) * ${Q.getByOffset("cOffset")};`:""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`};return w?{name:"GemmShared",shaderCache:{hint:`${s.cacheKey}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:u*p},programUniforms:P}),getShaderSource:H}:{name:"Gemm",shaderCache:{hint:`${s.cacheKey}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:l,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:P}),getShaderSource:A}},fc=e=>{let s=e.transA,t=e.transB,r=e.alpha,o=e.beta;return{transA:s,transB:t,alpha:r,beta:o,cacheKey:`${e.transA};${e.transB};${e.alpha===1}`}},gc=(e,s)=>{mc(e.inputs),e.compute(_c(e.inputs,s))}}),qs,cr,Ir,Ar,wc,Mc,yc,_i,bc,vc,fi,xc,Tc,gr,zu=f(()=>{xt(),B(),Wt(),It(),[qs,cr,Ir,Ar]=[0,1,2,3],wc=e=>{if(e[0].dims.length!==4)throw new Error("only 4-D tensor is supported.");if(e[0].dims.length!==e[1].dims.length)throw new Error("input dimensions must be equal to grid dimensions");if(e[0].dims.length-2!==e[1].dims[e[1].dims.length-1])throw new Error(`last dimension of grid must be equal to ${e[0].dims.length-2}`);if(e[0].dims[0]!==e[1].dims[0])throw new Error("grid batch size must match input batch size")},Mc=`
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`,yc=e=>`
  fn gs_bicubic_interpolate(p: mat4x4<${e}>, x: f32, y: f32) -> ${e} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${e}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`,_i=e=>`
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${e.alignCorners===0?`
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    `:`
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`,bc=e=>`
  ${e.paddingMode==="reflection"?`
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }`:""}
`,vc=(e,s,t)=>`
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${s} {
     var pixel = ${s}(0);
     var indices = vec4<u32>(0);
     indices[${qs}] = batch;
     indices[${cr}] = channel;`+(()=>{switch(t.paddingMode){case"zeros":return`
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${Ir}] = u32(r);
            indices[${Ar}] = u32(c);
          } else {
            return ${s}(0);
          }
        `;case"border":return`
          indices[${Ir}] = u32(clamp(r, 0, H - 1));
          indices[${Ar}] = u32(clamp(c, 0, W - 1));
        `;case"reflection":return`
          indices[${Ir}] = gs_reflect(r, border[1], border[3]);
          indices[${Ar}] = gs_reflect(c, border[0], border[2]);
        `;default:throw new Error(`padding mode ${t.paddingMode} is not supported`)}})()+`
    return ${e.getByIndices("indices")};
  }
`,fi=(e,s,t)=>(()=>{switch(t.mode){case"nearest":return`
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${qs}], indices[${cr}], border);
        `;case"bilinear":return`
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${qs}], indices[${cr}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${qs}], indices[${cr}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${qs}], indices[${cr}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${qs}], indices[${cr}], border);

          let dx2 = ${s}(f32(x2) - x);
          let dx1 = ${s}(x - f32(x1));
          let dy2 = ${s}(f32(y2) - y);
          let dy1 = ${s}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;case"bicubic":return`
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${s}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${qs}], indices[${cr}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;default:throw new Error(`mode ${t.mode} is not supported`)}})()+`${e.setByOffset("global_idx","result")}`,xc=(e,s)=>{let t=Le("x",e[0].dataType,e[0].dims.length),r=[e[1].dims[0],e[1].dims[1],e[1].dims[2]],o=Le("grid",e[1].dataType,r.length,2),i=[e[0].dims[0],e[0].dims[1],e[1].dims[1],e[1].dims[2]];s.format==="NHWC"&&(i=[e[0].dims[0],e[1].dims[1],e[1].dims[2],e[0].dims[3]],[qs,cr,Ir,Ar]=[0,3,1,2]);let a=wt("output",e[0].dataType,i.length),l=t.type.value,d=Se.size(i),u=[{type:12,data:d},...bt(e[0].dims,r,i)],p=w=>`
  ${w.registerUniform("output_size","u32").declareVariables(t,o,a)}
  ${Mc}
  ${yc(l)}
  ${_i(s)}
  ${bc(s)}
  ${vc(t,l,s)}

  ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${Ir}]);
      let W_in = i32(uniforms.x_shape[${Ar}]);

      ${s.alignCorners===0?`
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      `:`
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${a.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${qs}], indices[${Ir}], indices[${Ar}]);
      let nxy = ${o.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${fi(a,l,s)}
  }`;return{name:"GridSample",shaderCache:{hint:`${s.cacheKey}`,inputDependencies:["type","type"]},getRunData:w=>{let v=Se.size(i);return{outputs:[{dims:i,dataType:w[0].dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:u}},getShaderSource:p}},Tc=(e,s)=>{wc(e.inputs),e.compute(xc(e.inputs,s))},gr=e=>Ct({alignCorners:e.align_corners,mode:e.mode,paddingMode:e.padding_mode,format:e.format})}),$s,Pc,Ec,kn,Cc,rn,$c,Sc=f(()=>{xt(),B(),Wt(),_s(),mo(),It(),Er(),$s=(e,s)=>e.length>s&&e[s].dims.length>0?e[s]:void 0,Pc=(e,s)=>{let t=e[0],r=$s(e,1),o=$s(e,2),i=$s(e,3),a=$s(e,4),l=$s(e,5),d=$s(e,6),u=$s(e,7);if(t.dims.length!==3&&t.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let p=t.dims[0],w=t.dims[1],v=t.dims.length===3?t.dims[2]:s.numHeads*t.dims[4],P=w,C=0,A=0,H=Math.floor(v/s.numHeads);if(d&&u&&Se.size(d.dims)&&Se.size(u.dims)){if(d.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(d.dims[0]!==p||d.dims[1]!==s.numHeads||d.dims[3]!==H)throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');if(u.dims[0]!==p||u.dims[1]!==s.numHeads||u.dims[3]!==H)throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');if(d.dims[2]!==u.dims[2])throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');if(u.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');C=d.dims[2],A=d.dims[2]}else if(d&&Se.size(d.dims)||u&&Se.size(u.dims))throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let z;if(r&&Se.size(r.dims)>0){if(t.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(r.dims.length===3){if(r.dims[2]!==t.dims[2])throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');z=2,P=r.dims[1]}else if(r.dims.length===5){if(r.dims[2]!==s.numHeads||r.dims[3]!==2||r.dims[4]!==H)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(o)throw new Error('Expect "value" be none when "key" has packed kv format.');z=5,P=r.dims[1]}else{if(r.dims[1]!==s.numHeads||r.dims[3]!==H)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');z=0,P=r.dims[2]}}else{if(t.dims.length!==5)throw new Error('Input "query" is expected to have 5 dimensions when key is empty');if(t.dims[2]!==s.numHeads||t.dims[3]!==3)throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');z=3}if(i&&Se.size(i.dims)>0){if(i.dims.length!==1)throw new Error('Input "bias" is expected to have 1 dimension');if(r&&r.dims.length===5&&r.dims[3]===2)throw new Error("bias is not allowed for packed kv.")}let k=C+P,se=0;if(a&&Se.size(a.dims)>0){se=8;let ge=a.dims;throw ge.length===1?ge[0]===p?se=1:ge[0]===3*p+2&&(se=3):ge.length===2&&ge[0]===p&&ge[1]===k&&(se=5),se===8?new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)'):new Error("Mask not supported")}let Q=!1,ce=v;if(o&&Se.size(o.dims)>0){if(o.dims.length!==3&&o.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==o.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(o.dims.length===3){if(P!==o.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');ce=o.dims[2]}else{if(P!==o.dims[2])throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');ce=o.dims[1]*o.dims[3],Q=!0}}let ye=!1;if(a&&Se.size(a.dims)>0)throw new Error("Key padding mask is not supported");if(l&&Se.size(l.dims)>0){if(l.dims.length!==4)throw new Error('Input "attention_bias" is expected to have 4 dimensions');if(l.dims[0]!==p||l.dims[1]!==s.numHeads||l.dims[2]!==w||l.dims[3]!==k)throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)')}return{batchSize:p,sequenceLength:w,pastSequenceLength:C,kvSequenceLength:P,totalSequenceLength:k,maxSequenceLength:A,inputHiddenSize:0,hiddenSize:v,vHiddenSize:ce,headSize:H,vHeadSize:Math.floor(ce/s.numHeads),numHeads:s.numHeads,isUnidirectional:!1,pastPresentShareBuffer:!1,maskFilterValue:s.maskFilterValue,maskType:se,scale:s.scale,broadcastResPosBias:ye,passPastInKv:Q,qkvFormat:z}},Ec=e=>Ct({...e}),kn=Ct({perm:[0,2,1,3]}),Cc=(e,s,t,r,o,i,a)=>{let l=[r,o,i],d=Se.size(l),u=[{type:12,data:d},{type:12,data:a},{type:12,data:i}],p=w=>{let v=wt("qkv_with_bias",s.dataType,l),P=Le("qkv",s.dataType,l),C=Le("bias",t.dataType,l),A=[{name:"output_size",type:"u32"},{name:"bias_offset",type:"u32"},{name:"hidden_size",type:"u32"}];return`
  ${w.registerUniforms(A).declareVariables(P,C,v)}
  ${w.mainStart()}
    ${w.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`};return e.compute({name:"MultiHeadAttentionAddBias",shaderCache:{inputDependencies:["type","type"]},getRunData:()=>({outputs:[{dims:l,dataType:s.dataType,gpuDataType:0}],dispatchGroup:{x:Math.ceil(d/64)},programUniforms:u}),getShaderSource:p},{inputs:[s,t],outputs:[-1]})[0]},rn=(e,s,t,r,o,i,a,l)=>{let d=i;if(a&&Se.size(a.dims)>0){if(r===1)throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");return d=Cc(e,i,a,s,r,t*o,l),d=d.reshape([s,r,t,o]),t===1||r===1?d:e.compute(As(d,kn.perm),{inputs:[d],outputs:[-1]})[0]}else return i.dims.length===3&&(d=i.reshape([s,r,t,o])),t===1||r===1?d:e.compute(As(d,kn.perm),{inputs:[d],outputs:[-1]})[0]},$c=(e,s)=>{let t=Pc(e.inputs,s),r=e.inputs[0],o=$s(e.inputs,1),i=$s(e.inputs,2),a=$s(e.inputs,3),l=$s(e.inputs,4),d=$s(e.inputs,5),u=$s(e.inputs,6),p=$s(e.inputs,7);if(r.dims.length===5)throw new Error("Packed QKV is not implemented");if(o?.dims.length===5)throw new Error("Packed KV is not implemented");let w=o&&i&&o.dims.length===4&&i.dims.length===4,v=rn(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,r,a,0);if(w)return Xr(e,v,o,i,l,void 0,u,p,d,t);if(!o||!i)throw new Error("key and value must be provided");let P=rn(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.headSize,o,a,t.hiddenSize),C=rn(e,t.batchSize,t.numHeads,t.kvSequenceLength,t.vHeadSize,i,a,2*t.hiddenSize);Xr(e,v,P,C,l,void 0,u,p,d,t)}}),In,kc,Ic,Ac,Nr,Fc,Dc,Oc=f(()=>{xt(),B(),Wt(),It(),In=e=>{if(!e||e.length<1)throw new Error("too few inputs")},kc=(e,s)=>{let t=[],r=s.numOutputs;return e[1].dims[0]>0&&(e[1].getBigInt64Array().forEach(o=>t.push(Number(o))),r=t.length),Ct({numOutputs:r,axis:s.axis,splitSizes:t})},Ic=e=>`
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${e}u; i += 1u ) {
    if (index < ${yt("uniforms.size_in_split_axis","i",e)}) {
        return i;
    }
    }
    return ${e}u;
}`,Ac=e=>{let s=e.length,t=[];for(let r=0;r<s;++r){let o=e[r].setByIndices("indices","input[global_idx]");s===1?t.push(o):r===0?t.push(`if (output_number == ${r}u) { ${o} }`):r===s-1?t.push(`else { ${o} }`):t.push(`else if (output_number == ${r}) { ${o} }`)}return`
      fn writeBufferData(output_number: u32, indices: ${e[0].type.indices}, global_idx: u32) {
        ${t.join(`
`)}
      }`},Nr=(e,s)=>{let t=e[0].dims,r=Se.size(t),o=e[0].dataType,i=Se.normalizeAxis(s.axis,t.length),a=new Array(s.numOutputs),l=Le("input",o,t.length),d=new Array(s.numOutputs),u=[],p=[],w=0,v=[{type:12,data:r}];for(let C=0;C<s.numOutputs;C++){w+=s.splitSizes[C],d[C]=w;let A=t.slice();A[i]=s.splitSizes[C],p.push(A),a[C]=wt(`output${C}`,o,A.length),u.push({dims:p[C],dataType:e[0].dataType})}v.push({type:12,data:d},...bt(t,...p));let P=C=>`
  ${C.registerUniform("input_size","u32").registerUniform("size_in_split_axis","u32",d.length).declareVariables(l,...a)}
  ${Ic(d.length)}
  ${Ac(a)}

  ${C.mainStart()}
    ${C.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${l.offsetToIndices("global_idx")};
    var index = ${l.indicesGet("indices",i)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${yt("uniforms.size_in_split_axis","output_number - 1u",d.length)};
      ${l.indicesSet("indices",i,"index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;return{name:"Split",shaderCache:{hint:s.cacheKey,inputDependencies:["rank"]},getShaderSource:P,getRunData:()=>({outputs:u,dispatchGroup:{x:Math.ceil(r/64)},programUniforms:v})}},Fc=(e,s)=>{In(e.inputs);let t=e.inputs.length===1?s:kc(e.inputs,s);e.compute(Nr(e.inputs,t),{inputs:[0]})},Dc=e=>{let s=e.axis,t=e.splitSizes,r=e.numOutputs<0?t.length:e.numOutputs;if(r!==t.length)throw new Error("numOutputs and splitSizes lengh must be equal");return Ct({axis:s,numOutputs:r,splitSizes:t})}}),Lc,Vr,zc,Bc=f(()=>{xt(),B(),Wt(),It(),Lc=(e,s)=>{let[t,r,o,i]=e,{numHeads:a,rotaryEmbeddingDim:l}=s;if(t.dims.length!==3&&t.dims.length!==4)throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${t.dims.length}`);if(!Se.areEqual(r.dims,[])&&!Se.areEqual(r.dims,[1])&&r.dims.length!==2)throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${r.dims.length}`);if(o.dims.length!==2)throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${o.dims.length}`);if(i.dims.length!==2)throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${i.dims.length}`);if(!Se.areEqual(o.dims,i.dims))throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");if(l>0&&a===0)throw new Error("num_heads must be provided if rotary_embedding_dim is specified");let d=t.dims[0],u=t.dims[t.dims.length-2],p=o.dims[0],w=Se.sizeFromDimension(t.dims,1)/u,v=l===0?o.dims[1]*2:w/a;if(l>v)throw new Error("rotary_embedding_dim must be less than or equal to head_size");if(r.dims.length===2){if(d!==r.dims[0])throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${r.dims[0]}`);if(u!==r.dims[1])throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${r.dims[1]}`)}if(v/2!==o.dims[1]&&l/2!==o.dims[1])throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${o.dims[1]}`);if(u>p)throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported")},Vr=(e,s)=>{let{interleaved:t,numHeads:r,rotaryEmbeddingDim:o,scale:i}=s,a=e[0].dims[0],l=Se.sizeFromDimension(e[0].dims,1),d=e[0].dims[e[0].dims.length-2],u=l/d,p=e[2].dims[1],w=o===0?p*2:u/r,v=new Array(a,d,u/w,w-p),P=Se.computeStrides(v),C=[{type:1,data:i},{type:12,data:v},{type:12,data:P},...e[0].dims.length===3?new Array({type:12,data:[l,u,w,1]}):[],...e[0].dims.length===4?new Array({type:12,data:[l,w,d*w,1]}):[],...bt(e[0].dims,e[1].dims,e[2].dims,e[3].dims,e[0].dims)],A=H=>{let z=Le("input",e[0].dataType,e[0].dims.length),k=Le("position_ids",e[1].dataType,e[1].dims.length),se=Le("cos_cache",e[2].dataType,e[2].dims.length),Q=Le("sin_cache",e[3].dataType,e[3].dims.length),ce=wt("output",e[0].dataType,e[0].dims.length);return H.registerUniforms([{name:"scale",type:"f32"},{name:"global_shape",type:"u32",length:v.length},{name:"global_strides",type:"u32",length:P.length},{name:"input_output_strides",type:"u32",length:P.length}]),`
        ${H.declareVariables(z,k,se,Q,ce)}

        ${H.mainStart(er)}
          let half_rotary_emb_dim = uniforms.${se.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${H.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${k.broadcastedIndicesToOffset("bsnh.xy",wt("",k.type.tensor,2))};
            let position_id =
                u32(${k.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${t});
            let j = i + select(half_rotary_emb_dim, 1, ${t});
            let re = ${z.getByOffset("i")} * ${se.get("position_id","bsnh[3]")} -
                ${z.getByOffset("j")} * ${Q.get("position_id","bsnh[3]")};
            ${ce.setByOffset("i","re")}
            let im = ${z.getByOffset("i")} * ${Q.get("position_id","bsnh[3]")} +
                ${z.getByOffset("j")} * ${se.get("position_id","bsnh[3]")};
            ${ce.setByOffset("j","im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${ce.setByOffset("k",z.getByOffset("k"))}
          }
        }`};return{name:"RotaryEmbedding",shaderCache:{hint:Ct({interleaved:t}).cacheKey,inputDependencies:["rank","rank","rank","rank"]},getShaderSource:A,getRunData:()=>({outputs:[{dims:e[0].dims,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Se.size(v)/er)},programUniforms:C})}},zc=(e,s)=>{Lc(e.inputs,s),e.compute(Vr(e.inputs,s))}}),Rc,Bu,gi,jc,Nc,nn=f(()=>{Wt(),xt(),mo(),Sc(),Oc(),Er(),Bc(),It(),Rc=(e,s)=>{if(s.doRotary&&e.length<=7)throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");let t=e[0],r=e[1],o=e[2],i=e[3],a=e[4];if(s.doRotary!==0&&e.length<=7)throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");if(s.localWindowSize!==-1)throw new Error("Local attention is not supported");if(s.softcap!==0)throw new Error("Softcap is not supported");if(s.rotaryInterleaved!==0)throw new Error("Rotary interleaved is not supported");if(s.smoothSoftmax)throw new Error("Smooth softmax is not supported");if(t.dims.length!==3&&t.dims.length!==5)throw new Error("Input query is expected to have 3 or 5 dimensions");let l=!1,d=t.dims[0],u=t.dims[1],p=t.dims.length===3?l?t.dims[2]/3:t.dims[2]:s.numHeads*t.dims[4],w=u,v=0,P=!r||r.dims.length===0,C=Math.floor(P?p/(s.numHeads+2*s.kvNumHeads):p/s.numHeads);P&&(p=C*s.numHeads);let A=i&&i.dims.length!==0,H=a&&a.dims.length!==0;if(A&&i.dims.length===4&&i.dims[0]===d&&i.dims[1]!==s.kvNumHeads&&i.dims[2]===s.kvNumHeads&&i.dims[3]===C)throw new Error("BSNH pastKey/pastValue is not supported");if(A&&H){if(i.dims.length!==4)throw new Error('Input "past_key" is expected to have 4 dimensions');if(a.dims.length!==4)throw new Error('Input "past_value" is expected to have 4 dimensions');v=i.dims[2]}else if(A||H)throw new Error('Input "past_key" and "past_value" shall be both present or both absent');let z=1;if(r&&r.dims.length>0){if(t.dims.length!==3)throw new Error('Input "query" is expected to have 3 dimensions when key is given');if(r.dims.length<3||r.dims.length>5)throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');if(t.dims[0]!==r.dims[0])throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');if(r.dims.length===3){if(t.dims[2]%r.dims[2]!==0)throw new Error('Dimension 2 of "query" should be a multiple of "key"');w=r.dims[1]}else if(r.dims.length===5){if(r.dims[2]!==s.numHeads||r.dims[3]!==2||r.dims[4]!==C)throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');if(o)throw new Error('Expect "value" be none when "key" has packed kv format.');w=r.dims[1]}else{if(r.dims[1]!==s.numHeads||r.dims[3]!==C)throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');w=r.dims[2]}}else{if(t.dims.length!==3&&t.dims.length!==5)throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');if(t.dims.length===5&&(t.dims[2]!==s.numHeads||t.dims[3]!==3))throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');z=3}let k=0,se=!1,Q=s.kvNumHeads?C*s.kvNumHeads:p;if(o&&o.dims.length>0){if(o.dims.length!==3&&o.dims.length!==4)throw new Error('Input "value" is expected to have 3 or 4 dimensions');if(t.dims[0]!==o.dims[0])throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');if(o.dims.length===3){if(w!==o.dims[1])throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');Q=o.dims[2]}else{if(w!==o.dims[2])throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');Q=o.dims[1]*o.dims[3],se=!0}}let ce=e.length>4?e[5]:void 0;if(ce&&ce.dims.length!==1&&ce.dims[0]!==d)throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');return{batchSize:d,sequenceLength:u,pastSequenceLength:v,kvSequenceLength:w,totalSequenceLength:-1,maxSequenceLength:-1,inputHiddenSize:0,hiddenSize:p,vHiddenSize:Q,headSize:C,vHeadSize:Math.floor(Q/s.kvNumHeads),numHeads:s.numHeads,kvNumHeads:s.kvNumHeads,nReps:s.numHeads/s.kvNumHeads,pastPresentShareBuffer:!1,maskType:k,scale:s.scale,broadcastResPosBias:!1,passPastInKv:se,qkvFormat:z}},Bu=Ct({perm:[0,2,1,3]}),gi=(e,s,t)=>{let r=s,o=t.kvNumHeads;return s.dims.length===3&&t.kvSequenceLength!==0&&(r=s.reshape([t.batchSize,t.kvSequenceLength,o,t.headSize]),r=e.compute(As(r,Bu.perm),{inputs:[r],outputs:[-1]})[0]),r},jc=(e,s,t,r)=>{let o=7,i=["type","type"],a=[e*s],l=e*s,d=[{type:12,data:l},{type:12,data:s},{type:12,data:e}],u=p=>{let w=Le("seq_lens",t.dataType,t.dims),v=Le("total_seq_lens",r.dataType,r.dims),P=wt("pos_ids",o,a),C=[{name:"output_size",type:"u32"},{name:"sequence_length",type:"u32"},{name:"batch_size",type:"u32"}];return`
  ${p.registerUniforms(C).declareVariables(w,v,P)}
  ${p.mainStart()}
    ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${v.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${w.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${P.setByOffset("global_idx","pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${P.setByOffset("global_idx","pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${P.setByOffset("global_idx","seqlen")}
    };
  }
  `};return{name:"GeneratePositionIds",shaderCache:{hint:`${e};${s}`,inputDependencies:i},getRunData:()=>({outputs:[{dims:a,dataType:o}],dispatchGroup:{x:Math.ceil(l/64)},programUniforms:d}),getShaderSource:u}},Nc=(e,s)=>{let t=Rc(e.inputs,s);if(e.inputs[0].dims.length===5)throw new Error("Packed QKV is not implemented");if(e.inputs[1]?.dims.length===5)throw new Error("Packed KV is not implemented");let r=e.inputs[0],o=e.inputs[1]&&e.inputs[1].dims.length>0?e.inputs[1]:void 0,i=e.inputs[2]&&e.inputs[2].dims.length>0?e.inputs[2]:void 0,a=e.inputs[3]&&e.inputs[3].dims.length!==0?e.inputs[3]:void 0,l=e.inputs[4]&&e.inputs[4].dims.length!==0?e.inputs[4]:void 0,d=e.inputs.length>4?e.inputs[5]:void 0,u=e.inputs.length>5?e.inputs[6]:void 0,p=t.kvNumHeads?t.kvNumHeads:t.numHeads,w=Ct({axis:2,numOutputs:3,splitSizes:[t.numHeads*t.headSize,p*t.headSize,p*t.headSize]}),[v,P,C]=!o&&!i?e.compute(Nr([r],w),{inputs:[r],outputs:[-1,-1,-1]}):[r,o,i],A,H;if(s.doRotary){let Q=e.compute(jc(t.batchSize,t.sequenceLength,d,u),{inputs:[d,u],outputs:[-1]})[0],ce=e.inputs[7],ye=e.inputs[8],ge=Ct({interleaved:s.rotaryInterleaved!==0,numHeads:t.numHeads,rotaryEmbeddingDim:0,scale:s.scale}),Ie=[v,Q,ce,ye],Ae=[-1];A=e.compute(Vr(Ie,ge),{inputs:Ie,outputs:Ae})[0],Ie.splice(0,1,P);let Je=Ct({interleaved:s.rotaryInterleaved!==0,numHeads:t.kvNumHeads,rotaryEmbeddingDim:0,scale:s.scale});H=e.compute(Vr(Ie,Je),{inputs:Ie,outputs:Ae})[0]}let z=rn(e,t.batchSize,t.numHeads,t.sequenceLength,t.headSize,s.doRotary?A:v,void 0,0),k=gi(e,s.doRotary?H:P,t),se=gi(e,C,t);Xr(e,z,k,se,void 0,void 0,a,l,void 0,t,d,u)}}),wi,Vc,Uc,Wc,Ru=f(()=>{xt(),B(),Er(),It(),wi=(e,s,t,r,o,i,a,l)=>{let d=Jt(i),u=d===1?"f32":`vec${d}f`,p=d===1?"vec2f":`mat2x${d}f`,w=o*a,v=64;w===1&&(v=256);let P=[o,a,i/d],C=[o,a,2],A=["rank","type","type"],H=[];H.push(...bt(P,C));let z=k=>{let se=Le("x",s.dataType,3,d),Q=Le("scale",t.dataType,t.dims),ce=Le("bias",r.dataType,r.dims),ye=wt("output",1,3,2),ge=[se,Q,ce,ye];return`
  var<workgroup> workgroup_shared : array<${p}, ${v}>;
  const workgroup_size = ${v}u;
  ${k.declareVariables(...ge)}
  ${k.mainStart(v)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${u}(0);
    var squared_sum = ${u}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${u}(${se.get("batch","channel","h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${p}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${_r("workgroup_shared[0][0]",d)} / f32(hight * ${d});
      let squared_sum_final = ${_r("workgroup_shared[0][1]",d)} / f32(hight * ${d});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${l}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`};return e.compute({name:"InstanceNormComputeChannelScaleShift",shaderCache:{hint:`${d};${l};${v}`,inputDependencies:A},getRunData:()=>({outputs:[{dims:C,dataType:1}],dispatchGroup:{x:w},programUniforms:H}),getShaderSource:z},{inputs:[s,t,r],outputs:[-1]})[0]},Vc=(e,s,t)=>{let r=s[0].dims,o=r,i=2,a=r[0],l=r[1],d=Se.sizeFromDimension(r,i),u=Jt(d),p=Se.size(o)/u,w=wi(e,s[0],s[1],s[2],a,d,l,t.epsilon),v=[a,l,d/u],P=[a,l],C=["type","none"],A=H=>{let z=Le("x",s[0].dataType,v.length,u),k=Le("scale_shift",1,P.length,2),se=wt("output",s[0].dataType,v.length,u),Q=[z,k,se];return`
  ${H.registerUniform("output_size","u32").declareVariables(...Q)}
  ${H.mainStart()}
  ${H.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${se.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${k.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${z.getByOffset("global_idx")} * ${se.type.value}(scale_shift.x) + ${se.type.value}(scale_shift.y);
      ${se.setByOffset("global_idx","value")};
  }`};e.compute({name:"InstanceNormalization",shaderCache:{hint:`${u}`,inputDependencies:C},getRunData:()=>({outputs:[{dims:o,dataType:s[0].dataType}],dispatchGroup:{x:Math.ceil(p/64)},programUniforms:[{type:12,data:p},...bt(v,P,v)]}),getShaderSource:A},{inputs:[s[0],w]})},Uc=(e,s,t)=>{let r=s[0].dims,o=r,i=r[0],a=r[r.length-1],l=Se.sizeFromDimension(r,1)/a,d=Jt(a),u=Se.size(o)/d,p=[{type:12,data:l},{type:12,data:Math.floor(a/d)}],w=["type","type"],v=!1,P=[0,r.length-1];for(let z=0;z<r.length-2;z++)v=v||r[z+1]!==1,P.push(z+1);v=v&&r[r.length-1]!==1;let C=v?e.compute(As(e.inputs[0],P),{inputs:[e.inputs[0]],outputs:[-1]})[0]:e.inputs[0].reshape(Array.from({length:r.length},(z,k)=>r[P[k]])),A=wi(e,C,s[1],s[2],i,l,a,t.epsilon),H=z=>{let k=ps(s[0].dataType),se=d===1?"vec2f":`mat${d}x2f`,Q=ge=>{let Ie=ge===0?"x":"y",Ae=d===1?"f32":`vec${d}f`;switch(d){case 1:return`${k}(${Ae}(scale.${Ie}))`;case 2:return`vec2<${k}>(${Ae}(scale[0].${Ie}, scale[1].${Ie}))`;case 4:return`vec4<${k}>(${Ae}(scale[0].${Ie}, scale[1].${Ie}, scale[2].${Ie}, scale[3].${Ie}))`;default:throw new Error(`Not supported compoents ${d}`)}},ce=Le("input",s[0].dataType,s[0].dims,d),ye=wt("output",s[0].dataType,o,d);return`
  @group(0) @binding(0) var<storage, read> input : array<${ce.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${se}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${ye.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${z.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${Q(0)}, ${Q(1)});
  }`};e.compute({name:"InstanceNormalizationNHWC",shaderCache:{hint:`${d}`,inputDependencies:w},getRunData:()=>({outputs:[{dims:o,dataType:s[0].dataType}],dispatchGroup:{x:Math.ceil(u/64)},programUniforms:p}),getShaderSource:H},{inputs:[s[0],A]})},Wc=(e,s)=>{s.format==="NHWC"?Uc(e,e.inputs,s):Vc(e,e.inputs,s)}}),Gc,Kc,An,$p=f(()=>{xt(),B(),It(),Gc=e=>{if(!e||e.length<2)throw new Error("layerNorm requires at least 2 inputs.")},Kc=(e,s,t)=>{let r=s.simplified,o=e[0].dims,i=e[1],a=!r&&e[2],l=o,d=Se.normalizeAxis(s.axis,o.length),u=Se.sizeToDimension(o,d),p=Se.sizeFromDimension(o,d),w=Se.size(i.dims),v=a?Se.size(a.dims):0;if(w!==p||a&&v!==p)throw new Error(`Size of X.shape()[axis:] == ${p}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${w} and bias size of ${v}`);let P=[];for(let ce=0;ce<o.length;++ce)ce<d?P.push(o[ce]):P.push(1);let C=Jt(p),A=["type","type"],H=[{type:12,data:u},{type:1,data:p},{type:12,data:Math.floor(p/C)},{type:1,data:s.epsilon}];a&&A.push("type");let z=t>1,k=t>2,se=ce=>{let ye=ps(e[0].dataType),ge=[Le("x",e[0].dataType,e[0].dims,C),Le("scale",i.dataType,i.dims,C)];a&&ge.push(Le("bias",a.dataType,a.dims,C)),ge.push(wt("output",e[0].dataType,l,C)),z&&ge.push(wt("mean_data_output",1,P)),k&&ge.push(wt("inv_std_output",1,P));let Ie=[{name:"norm_count",type:"u32"},{name:"norm_size",type:"f32"},{name:"norm_size_vectorized",type:"u32"},{name:"epsilon",type:"f32"}];return`
  ${ce.registerUniforms(Ie).declareVariables(...ge)}
  ${ce.mainStart()}
    ${ce.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${Jn("f32",C)};
    var mean_square_vector = ${Jn("f32",C)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${sr(ye,C,"x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${_r("mean_vector",C)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${_r("mean_square_vector",C)} / uniforms.norm_size ${r?"":"- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${sr(ye,C,"x[j + offset]")};
      let f32scale = ${sr(ye,C,"scale[j]")};
      output[j + offset] = ${ge[0].type.value}((f32input ${r?"":"- mean"}) * inv_std_dev * f32scale
        ${a?`+ ${sr(ye,C,"bias[j]")}`:""}
      );
    }

    ${z?"mean_data_output[global_idx] = mean":""};
    ${k?"inv_std_output[global_idx] = inv_std_dev":""};
  }`},Q=[{dims:l,dataType:e[0].dataType}];return z&&Q.push({dims:P,dataType:1}),k&&Q.push({dims:P,dataType:1}),{name:"LayerNormalization",shaderCache:{hint:`${C};${t};${r}`,inputDependencies:A},getRunData:()=>({outputs:Q,dispatchGroup:{x:Math.ceil(u/64)},programUniforms:H}),getShaderSource:se}},An=(e,s)=>{Gc(e.inputs),e.compute(Kc(e.inputs,s,e.outputCount))}}),Hc,qc,ju=f(()=>{B(),bn(),qo(),Hc=e=>{if(!e||e.length!==2)throw new Error("MatMul requires 2 inputs.");if(e[0].dims[e[0].dims.length-1]!==e[1].dims[e[1].dims.length-2])throw new Error("shared dimension does not match.")},qc=e=>{Hc(e.inputs);let s=ar.calcShape(e.inputs[0].dims,e.inputs[1].dims,!0);if(!s)throw new Error("Can't use matmul on the given tensors");let t=s[s.length-1],r=e.inputs[0].dims[e.inputs[0].dims.length-1];if(t<8&&r<8)e.compute(Uo(e.inputs,{activation:""},s));else{let o=s[s.length-2],i=Se.size(e.inputs[0].dims.slice(0,-2)),a=Se.size(e.inputs[1].dims.slice(0,-2));if(i!==1&&o===1&&a===1){let l=e.inputs[0].reshape([1,i,r]),d=e.inputs[1].reshape([1,r,t]),u=[1,i,t],p=[l,d];e.compute(en(p,{activation:""},s,u),{inputs:p})}else e.compute(en(e.inputs,{activation:""},s))}}}),Qc,Xc,Mi,Jc,Yc,Zc=f(()=>{xt(),B(),Wt(),It(),Qc=(e,s)=>{if(e.length<3||e.length>4)throw new Error("MatMulNBits requires 3 or 4 inputs");let t=e[0],r=t.dims.length;if(t.dims[r-1]!==s.k)throw new Error("The last dim of input shape does not match the k value");let o=Math.floor((s.k+s.blockSize-1)/s.blockSize),i=s.blockSize/8*s.bits,a=e[1];if(!Se.areEqual(a.dims,[s.n,o,i]))throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");let l=e[2].dims;if(Se.size(l)!==s.n*o)throw new Error("scales input size error.");if(e.length===4){let d=e[3].dims,u=s.bits>4?s.n*o:s.n*Math.floor((o+1)/2);if(Se.size(d)!==u)throw new Error("zeroPoints input size error.")}},Xc=(e,s)=>{let t=e[0].dims,r=t.length,o=t[r-2],i=s.k,a=s.n,l=t.slice(0,r-2),d=Se.size(l),u=e[1].dims[2]/4,p=e[0].dataType,w=Jt(s.k),v=Jt(u),P=Jt(a),C=l.concat([o,a]),A=o>1&&a/P%2===0?2:1,H=Se.size(C)/P/A,z=64,k=[],se=[d,o,i/w],Q=Se.convertShape(e[1].dims).slice();Q.splice(-1,1,u/v),k.push(...bt(se)),k.push(...bt(Q)),k.push(...bt(e[2].dims)),e.length===4&&k.push(...bt(Se.convertShape(e[3].dims)));let ce=[d,o,a/P];k.push(...bt(ce));let ye=ge=>{let Ie=se.length,Ae=Le("a",e[0].dataType,Ie,w),Je=Le("b",12,Q.length,v),ht=Le("scales",e[2].dataType,e[2].dims.length),vt=[Ae,Je,ht],Xe=e.length===4?Le("zero_points",12,e[3].dims.length):void 0;Xe&&vt.push(Xe);let kt=ce.length,Bt=wt("output",e[0].dataType,kt,P),rt=ps(e[0].dataType),Pt=(()=>{switch(w){case 1:return`array<${rt}, 8>`;case 2:return`mat4x2<${rt}>`;case 4:return`mat2x4<${rt}>`;default:throw new Error(`${w}-component is not supported.`)}})(),Lt=()=>{let Ve=`
          // reuse a data
            var input_offset = ${Ae.indicesToOffset(`${Ae.type.indices}(batch, row, word_offset)`)};
            var a_data: ${Pt};
            for (var j: u32 = 0; j < ${8/w}; j++) {
              a_data[j] = ${Ae.getByOffset("input_offset")};
              input_offset++;
            }
          `;for(let it=0;it<P*A;it++)Ve+=`
            b_value = ${v===1?`b${it}_data`:`b${it}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${Pt}(${Array.from({length:4},($t,jt)=>`${rt}(b_value_lower[${jt}]), ${rt}(b_value_upper[${jt}])`).join(", ")});
            b_dequantized_values = ${w===1?`${Pt}(${Array.from({length:8},($t,jt)=>`(b_quantized_values[${jt}] - ${Xe?`zero_point${it}`:"zero_point"}) * scale${it}`).join(", ")});`:`(b_quantized_values - ${Pt}(${Array(8).fill(`${Xe?`zero_point${it}`:"zero_point"}`).join(",")})) * scale${it};`};
            workgroup_shared[local_id.x * ${A} + ${Math.floor(it/P)}]${P>1?`[${it%P}]`:""} += ${Array.from({length:8/w},($t,jt)=>`${w===1?`a_data[${jt}] * b_dequantized_values[${jt}]`:`dot(a_data[${jt}], b_dequantized_values[${jt}])`}`).join(" + ")};
          `;return Ve},Et=()=>{let Ve=`
            var col_index = col * ${P};
            ${Xe?`
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${rt}(8);`}
            `;for(let it=0;it<P*A;it++)Ve+=`
            let scale${it} = ${ht.getByOffset("col_index * nBlocksPerCol + block")};
            ${Xe?`
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${Xe.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${it} = ${rt}((zero_point_word) & 0xFu);`:""}
            col_index += 1;`;return Ve},Rt=()=>{let Ve=`col_index = col * ${P};`;for(let it=0;it<P*A;it++)Ve+=`
            let b${it}_data = ${Je.getByIndices(`${Je.type.indices}(col_index, block, word)`)};
            col_index += 1;`;return Ve+=`
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${Pt};
            var b_dequantized_values: ${Pt};`,Ve};return`
        var<workgroup> workgroup_shared: array<${Bt.type.value}, ${A*z}>;
        ${ge.declareVariables(...vt,Bt)}
        ${ge.mainStart([z,1,1])}
          let output_indices = ${Bt.offsetToIndices(`(global_idx / ${z}) * ${A}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${z}) {
            //process one block
            var word_offset: u32 = block * ${s.blockSize/w};
            ${Et()}
            for (var word: u32 = 0; word < ${u}; word += ${v}) {
              ${Rt()}
              for (var i: u32 = 0; i < ${v}; i++) {
                ${Lt()}
                word_offset += ${8/w};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${A}) {
            var output_value: ${Bt.type.value} = ${Bt.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${z}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${A};
            }
            ${Bt.setByIndices(`${Bt.type.indices}(batch, row, col + local_id.x)`,"output_value")};
          }
        }`};return{name:"MatMulNBits",shaderCache:{hint:`${s.blockSize};${s.bits};${w};${v};${P};${A};${z}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:C,dataType:p}],dispatchGroup:{x:H},programUniforms:k}),getShaderSource:ye}},Mi=(e,s)=>{let t=e[0].dims,r=t.length,o=t[r-2],i=s.k,a=s.n,l=t.slice(0,r-2),d=Se.size(l),u=e[1].dims[2]/4,p=e[0].dataType,w=Jt(s.k),v=Jt(u),P=l.concat([o,a]),C=128,A=a%8===0?8:a%4===0?4:1,H=C/A,z=H*v*8,k=z/w,se=z/s.blockSize,Q=Se.size(P)/A,ce=[],ye=[d,o,i/w],ge=Se.convertShape(e[1].dims).slice();ge.splice(-1,1,u/v),ce.push(...bt(ye)),ce.push(...bt(ge)),ce.push(...bt(e[2].dims)),e.length===4&&ce.push(...bt(Se.convertShape(e[3].dims)));let Ie=[d,o,a];ce.push(...bt(Ie));let Ae=Je=>{let ht=ye.length,vt=Le("a",e[0].dataType,ht,w),Xe=Le("b",12,ge.length,v),kt=Le("scales",e[2].dataType,e[2].dims.length),Bt=[vt,Xe,kt],rt=e.length===4?Le("zero_points",12,e[3].dims.length):void 0;rt&&Bt.push(rt);let Pt=Ie.length,Lt=wt("output",e[0].dataType,Pt),Et=ps(e[0].dataType),Rt=()=>{switch(w){case 1:return`
          let a_data0 = vec4<${Et}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${Et}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;case 2:return`
          let a_data0 = vec4<${Et}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${Et}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;case 4:return`
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;default:throw new Error(`${w}-component is not supported.`)}};return`
        var<workgroup> sub_a: array<${vt.type.value}, ${k}>;
        var<workgroup> inter_results: array<array<${Lt.type.value}, ${H}>, ${A}>;
        ${Je.declareVariables(...Bt,Lt)}
        ${Je.mainStart([H,A,1])}
          let output_indices = ${Lt.offsetToIndices(`workgroup_index * ${A}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${se} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${k};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${k}; a_offset += ${C})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${vt.getByIndices(`${vt.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${vt.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${se} + local_id.x;
            ${rt?`
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${rt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${Et}((zero_point_word) & 0xFu);`:`
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${Et}(8);`}
            let scale = ${kt.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${Xe.getByIndices(`${Xe.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${s.blockSize/w};
            for (var i: u32 = 0; i < ${v}; i++) {
              ${Rt()}
              let b_value = ${v===1?"b_data":"b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${Et}>(${Array.from({length:4},(Ve,it)=>`${Et}(b_value_lower[${it}]), ${Et}(b_value_upper[${it}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${Et}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({length:2},(Ve,it)=>`${`dot(a_data${it}, b_dequantized_values[${it}])`}`).join(" + ")};
              word_offset += ${8/w};
            }
            workgroupBarrier();
          }

          if (local_idx < ${A}) {
            var output_value: ${Lt.type.value} = ${Lt.type.value}(0);
            for (var b = 0u; b < ${H}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${Lt.setByIndices(`${Lt.type.indices}(batch, row, col + local_idx)`,"output_value")}
            }
          }
        }`};return{name:"BlockwiseMatMulNBits32",shaderCache:{hint:`${s.blockSize};${w};${v};${H};${A}`,inputDependencies:Array(e.length).fill("rank")},getRunData:()=>({outputs:[{dims:P,dataType:p}],dispatchGroup:{x:Q},programUniforms:ce}),getShaderSource:Ae}},Jc=(e,s)=>{Qc(e.inputs,s),s.blockSize===32&&e.adapterInfo.isVendor("intel")&&e.adapterInfo.isArchitecture("gen-12lp")?e.compute(Mi(e.inputs,s)):e.compute(Xc(e.inputs,s))},Yc=e=>Ct(e)}),ed,td,yi,sd,rd,bi,nd,od,Fn,Nu=f(()=>{xt(),B(),It(),ed=e=>{if(!e||e.length<1)throw new Error("Too few inputs");if(e[0].dataType!==1&&e[0].dataType!==10)throw new Error("Input type must be float or float16.");if(e.length>=2){let s=e[0].dims.length*2===e[1].dims[0];if(e.length===4&&(s=e[3].dims[0]*2===e[1].dims[0]),!s)throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].")}},td=(e,s,t)=>{let r="";for(let o=s-1;o>=0;--o)r+=`
            k = i32(${e.indicesGet("indices",o)}) - ${yt("uniforms.pads",o,t)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${yt("uniforms.x_shape",o,s)})) {
              break;
            }
            offset += k * i32(${yt("uniforms.x_strides",o,s)});
        `;return`
          value = ${e.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${r}
            value = x[offset];
          }
      `},yi=(e,s,t)=>{let r="";for(let o=s-1;o>=0;--o)r+=`
                k = i32(${e.indicesGet("indices",o)}) - ${yt("uniforms.pads",o,t)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${yt("uniforms.x_shape",o,s)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${yt("uniforms.x_shape",o,s)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${yt("uniforms.x_strides",o,s)});
            `;return`
              var offset = 0;
              var k = 0;
              ${r}
              value = x[offset];
          `},sd=(e,s,t)=>{let r="";for(let o=s-1;o>=0;--o)r+=`
                k = i32(${e.indicesGet("indices",o)}) - ${yt("uniforms.pads",o,t)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${yt("uniforms.x_shape",o,s)})) {
                  k = i32(${yt("uniforms.x_shape",o,s)}) - 1;
                }
                offset += k * i32(${yt("uniforms.x_strides",o,s)});
            `;return`
              var offset = 0;
              var k = 0;
              ${r}
              value = x[offset];
          `},rd=(e,s,t)=>{let r="";for(let o=s-1;o>=0;--o)r+=`
                k = i32(${e.indicesGet("indices",o)}) - ${yt("uniforms.pads",o,t)};
                if (k < 0)  {
                  k += i32(${yt("uniforms.x_shape",o,s)}]);
                }
                if (k >= i32(${yt("uniforms.x_shape",o,s)})) {
                  k -= i32(${yt("uniforms.x_shape",o,s)});
                }
                offset += k * i32(${yt("uniforms.x_strides",o,s)});
            `;return`
              var offset = 0;
              var k = 0;
              ${r}
              value = x[offset];
          `},bi=(e,s,t)=>{switch(t.mode){case 0:return td(e,s,t.pads.length);case 1:return yi(e,s,t.pads.length);case 2:return sd(e,s,t.pads.length);case 3:return rd(e,s,t.pads.length);default:throw new Error("Invalid mode")}},nd=(e,s)=>{let t=Se.padShape(e[0].dims.slice(),s.pads),r=e[0].dims,o=Se.size(t),i=[{type:12,data:o},{type:6,data:s.pads}],a=e.length>=3&&e[2].data;s.mode===0&&i.push({type:a?e[2].dataType:1,data:s.value}),i.push(...bt(e[0].dims,t));let l=["rank"],d=u=>{let p=wt("output",e[0].dataType,t.length),w=Le("x",e[0].dataType,r.length),v=w.type.value,P=bi(p,r.length,s),C=[{name:"output_size",type:"u32"},{name:"pads",type:"i32",length:s.pads.length}];return s.mode===0&&C.push({name:"constant_value",type:a?v:"f32"}),`
            ${u.registerUniforms(C).declareVariables(w,p)}
            ${u.mainStart()}
            ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${p.offsetToIndices("global_idx")};

            var value = ${v}(0);
            ${P}
            output[global_idx] = value;
        }`};return{name:"Pad",shaderCache:{hint:`${s.mode}${a}`,inputDependencies:l},getRunData:()=>({outputs:[{dims:t,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(Se.size(t)/64)},programUniforms:i}),getShaderSource:d}},od=(e,s)=>{if(e.length>1){let t=e[1].getBigInt64Array(),r=e.length>=3&&e[2].data?e[2].dataType===10?e[2].getUint16Array()[0]:e[2].getFloat32Array()[0]:0,o=e[0].dims.length,i=new Int32Array(2*o).fill(0);if(e.length>=4){let l=e[3].getBigInt64Array();for(let d=0;d<l.length;d++)i[Number(l[d])]=Number(t[d]),i[Number(l[d])+o]=Number(t[d+l.length])}else t.forEach((l,d)=>i[Number(d)]=Number(l));let a=[];return i.forEach(l=>a.push(l)),{mode:s.mode,value:r,pads:a}}else return s},Fn=(e,s)=>{ed(e.inputs);let t=od(e.inputs,s);e.compute(nd(e.inputs,t),{inputs:[0]})}}),on,vi,xi,Dn,an,Vu,id,Ti,On,ad,ld,Ln,cd,dd,zn,Uu,Wu,Pi,Bn,Gu=f(()=>{at(),xt(),B(),It(),on=e=>{if(E.webgpu.validateInputContent&&(!e||e.length!==1))throw new Error("Pool ops requires 1 input.")},vi=(e,s,t)=>{let r=s.format==="NHWC",o=e.dims.slice();r&&o.splice(1,0,o.pop());let i=Object.hasOwnProperty.call(s,"dilations"),a=s.kernelShape.slice(),l=s.strides.slice(),d=i?s.dilations.slice():[],u=s.pads.slice();Pr.adjustPoolAttributes(t,o,a,l,d,u);let p=Pr.computePoolOutputShape(t,o,l,d,a,u,s.autoPad),w=Object.assign({},s);i?Object.assign(w,{kernelShape:a,strides:l,pads:u,dilations:d,cacheKey:s.cacheKey}):Object.assign(w,{kernelShape:a,strides:l,pads:u,cacheKey:s.cacheKey});let v=p.slice();return v.push(v.splice(1,1)[0]),[w,r?v:p]},xi=(e,s)=>{let t=s.format==="NHWC",r=Se.size(e),o=Se.size(s.kernelShape),i=[{type:12,data:r},{type:12,data:o}],a=[{name:"outputSize",type:"u32"},{name:"kernelSize",type:"u32"}];if(s.kernelShape.length<=2){let l=s.kernelShape[s.kernelShape.length-1],d=s.strides[s.strides.length-1],u=s.pads[s.pads.length/2-1],p=s.pads[s.pads.length-1],w=!!(u+p);i.push({type:12,data:l},{type:12,data:d},{type:12,data:u},{type:12,data:p}),a.push({name:"kw",type:"u32"},{name:"sw",type:"u32"},{name:"pwStart",type:"u32"},{name:"pwEnd",type:"u32"});let v=!1;if(s.kernelShape.length===2){let P=s.kernelShape[s.kernelShape.length-2],C=s.strides[s.strides.length-2],A=s.pads[s.pads.length/2-2],H=s.pads[s.pads.length-2];v=!!(A+H),i.push({type:12,data:P},{type:12,data:C},{type:12,data:A},{type:12,data:H}),a.push({name:"kh",type:"u32"},{name:"sh",type:"u32"},{name:"phStart",type:"u32"},{name:"phEnd",type:"u32"})}return[i,a,!0,w,v]}else{if(t)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let l=Se.computeStrides(s.kernelShape);i.push({type:12,data:l},{type:12,data:s.pads},{type:12,data:s.strides}),a.push({name:"kernelStrides",type:"u32",length:l.length},{name:"pads",type:"u32",length:s.pads.length},{name:"strides",type:"u32",length:s.strides.length});let d=s.pads.reduce((u,p)=>u+p);return[i,a,!!d,!1,!1]}},Dn=(e,s,t,r,o,i,a,l,d,u,p,w)=>{let v=o.format==="NHWC",P=s.type.value,C=wt("output",s.type.tensor,r);if(o.kernelShape.length<=2){let A="",H="",z="",k=t-(v?2:1);if(p?A=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${k}] = indices[${k}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${k}] < 0 || xIndices[${k}]
                      >= uniforms.x_shape[${k}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${s.indicesToOffset("xIndices")}];
                  ${i}
                }`:A=`
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${k}] = indices[${k}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${s.indicesToOffset("xIndices")}];
                  ${i}
                }`,o.kernelShape.length===2){let se=t-(v?3:2);w?H=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${se}] = indices[${se}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${se}] < 0 || xIndices[${se}] >= uniforms.x_shape[${se}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              `:H=`
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${se}] = indices[${se}] * uniforms.sh - uniforms.phStart + j;
                `,z=`
              }
            `}return`
            ${e.registerUniforms(d).declareVariables(s,C)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${C.offsetToIndices("global_idx")};
              var xIndices = ${C.offsetToIndices("global_idx")};

              var value = ${P}(${l});
              var pad = 0;
              ${H}
              ${A}
              ${z}
              ${a}

              output[global_idx] = value;
            }`}else{if(v)throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");let A=o.kernelShape.length,H=o.pads.length,z="";return u?z=`
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${s.indicesToOffset("xIndices")}];
                ${i}
              }`:z=`
              }
              let x_val = x[${s.indicesToOffset("xIndices")}];
              ${i}
            `,`
            ${e.registerUniforms(d).declareVariables(s,C)}

            ${e.mainStart()}
              ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${C.offsetToIndices("global_idx")};
              var xIndices = ${C.offsetToIndices("global_idx")};

              var offsets: array<u32, ${A}>;

              var value = ${P}(${l});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${A-1}u; j++) {
                  offsets[j] = offset / ${yt("uniforms.kernelStrides","j",A)};
                  offset -= offsets[j] * ${yt("uniforms.kernelStrides","j",A)};
                }
                offsets[${A-1}] = offset;

                isPad = false;
                for (var j = ${t-A}u; j < ${t}u; j++) {
                  xIndices[j] = indices[j] * ${yt("uniforms.strides",`j - ${t-A}u`,A)}
                    + offsets[j - ${t-A}u] - ${yt("uniforms.pads","j - 2u",H)};
                  ${z}
              }
              ${a}

              output[global_idx] = value;
            }`}},an=e=>`${e.format};${e.ceilMode};${e.autoPad};${e.kernelShape.length}`,Vu=e=>`${an(e)};${e.countIncludePad}`,id=e=>`${an(e)};${e.storageOrder};${e.dilations}`,Ti=e=>({format:e.format,autoPad:["NOTSET","VALID","SAME_UPPER","SAME_LOWER"][e.auto_pad],ceilMode:e.ceil_mode,kernelShape:e.kernel_shape,strides:e.strides,pads:e.pads}),On=(e,s,t,r)=>{let[o,i]=vi(s,r,t),a=Le("x",s.dataType,s.dims.length),l=a.type.value,d="value += x_val;",u="";o.countIncludePad?u+=`value /= ${l}(uniforms.kernelSize);`:u+=`value /= ${l}(i32(uniforms.kernelSize) - pad);`;let[p,w,v,P,C]=xi(i,o);p.push(...bt(s.dims,i));let A=["rank"];return{name:e,shaderCache:{hint:`${r.cacheKey};${v};${P};${C}`,inputDependencies:A},getRunData:()=>({outputs:[{dims:i,dataType:s.dataType}],dispatchGroup:{x:Math.ceil(Se.size(i)/64)},programUniforms:p}),getShaderSource:H=>Dn(H,a,s.dims.length,i.length,o,d,u,0,w,v,P,C)}},ad=e=>{let s=e.count_include_pad!==0,t=Ti(e);if(t.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for AveragePool");let r={countIncludePad:s,...t,cacheKey:""};return{...r,cacheKey:Vu(r)}},ld=(e,s)=>{on(e.inputs),e.compute(On("AveragePool",e.inputs[0],!1,s))},Ln={autoPad:"",ceilMode:0,countIncludePad:!1,kernelShape:[],strides:[],pads:[],storageOrder:0,dilations:[]},cd=e=>{let s=e.format;return{format:s,...Ln,cacheKey:s}},dd=(e,s)=>{on(e.inputs),e.compute(On("GlobalAveragePool",e.inputs[0],!0,s))},zn=(e,s,t,r)=>{let[o,i]=vi(s,r,t),a=`
      value = max(x_val, value);
    `,l="",d=Le("x",s.dataType,s.dims.length),u=["rank"],[p,w,v,P,C]=xi(i,o);return p.push(...bt(s.dims,i)),{name:e,shaderCache:{hint:`${r.cacheKey};${v};${P};${C}`,inputDependencies:u},getRunData:()=>({outputs:[{dims:i,dataType:s.dataType}],dispatchGroup:{x:Math.ceil(Se.size(i)/64)},programUniforms:p}),getShaderSource:A=>Dn(A,d,s.dims.length,i.length,o,a,l,s.dataType===10?-65504:-1e5,w,v,P,C)}},Uu=(e,s)=>{on(e.inputs),e.compute(zn("MaxPool",e.inputs[0],!1,s))},Wu=e=>{let s=e.storage_order,t=e.dilations,r=Ti(e);if(s!==0)throw new Error("column major storage order is not yet supported for MaxPool");if(r.ceilMode!==0)throw new Error("using ceil() in shape computation is not yet supported for MaxPool");let o={storageOrder:s,dilations:t,...r,cacheKey:""};return{...o,cacheKey:id(o)}},Pi=e=>{let s=e.format;return{format:s,...Ln,cacheKey:s}},Bn=(e,s)=>{on(e.inputs),e.compute(zn("GlobalMaxPool",e.inputs[0],!0,s))}}),ud,pd,Rn,hd,Ku=f(()=>{xt(),B(),Wt(),It(),ud=(e,s)=>{if(e.length<2||e.length>3)throw new Error("DequantizeLinear requires 2 or 3 inputs.");if(e.length===3&&e[1].dims===e[2].dims)throw new Error("x-scale and x-zero-point must have the same shape.");if(e.length===3&&e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[0].dataType===6&&e.length>2)throw new Error("In the case of dequantizing int32 there is no zero point.");if(e[1].dims.length!==0&&e[1].dims.length!==1&&e[1].dims.length!==e[0].dims.length)throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");if(e.length>2){if(e[0].dataType!==e[2].dataType)throw new Error("x and x-zero-point must have the same data type.");if(e[1].dims.length!==e[2].dims.length)throw new Error("scale and zero-point inputs must have the same rank.");if(!e[1].dims.map((t,r)=>t===e[2].dims[r]).reduce((t,r)=>t&&r,!0))throw new Error("scale and zero-point inputs must have the same shape.")}if(s.blockSize>0){if(e[1].dims.length===0||e[1].dims.length===1&&e[1].dims[0]===1)throw new Error("blockSize must be set only for block quantization.");if(!e[1].dims.map((o,i)=>i===s.axis||o===e[0].dims[i]).reduce((o,i)=>o&&i,!0))throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");if(e[1].dims.length!==e[0].dims.length)throw new Error("For block qunatization the scale input rank must be the same as the x rank.");let t=e[0].dims[s.axis],r=e[1].dims[s.axis];if(s.blockSize<Math.ceil(t/r)||s.blockSize>Math.ceil(t/(r-1)-1))throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].")}},pd=(e,s)=>{let t=Se.normalizeAxis(s.axis,e[0].dims.length),r=e[0].dataType,o=r===3,i=e[0].dims,a=e[1].dataType,l=Se.size(i),d=r===3||r===2,u=d?[Math.ceil(Se.size(e[0].dims)/4)]:e[0].dims,p=e[1].dims,w=e.length>2?e[2]:void 0,v=w?d?[Math.ceil(Se.size(w.dims)/4)]:w.dims:void 0,P=p.length===0||p.length===1&&p[0]===1,C=P===!1&&p.length===1,A=Jt(l),H=P&&(!d||A===4),z=H?A:1,k=H&&!d?A:1,se=Le("input",d?12:r,u.length,k),Q=Le("scale",a,p.length),ce=w?Le("zero_point",d?12:r,v.length):void 0,ye=wt("output",a,i.length,z),ge=[se,Q];ce&&ge.push(ce);let Ie=[u,p];w&&Ie.push(v);let Ae=[{type:12,data:l/z},{type:12,data:t},{type:12,data:s.blockSize},...bt(...Ie,i)],Je=ht=>{let vt=[{name:"output_size",type:"u32"},{name:"axis",type:"u32"},{name:"block_size",type:"u32"}];return`
      ${ht.registerUniforms(vt).declareVariables(...ge,ye)}
      ${ht.mainStart()}
          ${ht.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${ye.offsetToIndices("global_idx")};

          // Set input x
          ${d?`
            let input = ${se.getByOffset("global_idx / 4")};
            let x_vec = ${o?"unpack4xI8(input)":"unpack4xU8(input)"};
            let x_value = ${z===1?"x_vec[global_idx % 4]":"x_vec"};`:`let x_value = ${se.getByOffset("global_idx")};`};

          // Set scale input
          ${P?`let scale_value= ${Q.getByOffset("0")}`:C?`
            let scale_index = ${ye.indicesGet("output_indices","uniforms.axis")};
            let scale_value= ${Q.getByOffset("scale_index")};`:`
            var scale_indices: ${Q.type.indices} = output_indices;
            let index = ${Q.indicesGet("scale_indices","uniforms.axis")} / uniforms.block_size;
            ${Q.indicesSet("scale_indices","uniforms.axis","index")};
            let scale_value= ${Q.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${ce?P?d?`
                let zero_point_input = ${ce.getByOffset("0")};
                let zero_point_vec =  ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]`:`let zero_point_value = ${ce.getByOffset("0")}`:C?d?`
                let zero_point_index = ${ye.indicesGet("output_indices","uniforms.axis")};
                let zero_point_input = ${ce.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]`:`
                let zero_point_index = ${ye.indicesGet("output_indices","uniforms.axis")};
                let zero_point_value = ${ce.getByOffset("zero_point_index")};`:d?`
                let zero_point_offset = ${Q.indicesToOffset("scale_indices")};
                let zero_point_input = ${ce.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${o?"unpack4xI8(zero_point_input)":"unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];`:`let zero_point_value = ${ce.getByIndices("scale_indices")};`:`let zero_point_value = ${d?o?"i32":"u32":se.type.value}(0);`};
      // Compute and write output
      ${ye.setByOffset("global_idx",`${ye.type.value}(x_value - zero_point_value) * scale_value`)};
      }`};return{name:"DequantizeLinear",shaderCache:{hint:s.cacheKey,inputDependencies:ce?["rank","rank","rank"]:["rank","rank"]},getShaderSource:Je,getRunData:()=>({outputs:[{dims:i,dataType:a}],dispatchGroup:{x:Math.ceil(l/z/64),y:1,z:1},programUniforms:Ae})}},Rn=(e,s)=>{ud(e.inputs,s),e.compute(pd(e.inputs,s))},hd=e=>Ct({axis:e.axis,blockSize:e.blockSize})}),md,jn,_d,Hu=f(()=>{at(),xt(),It(),md=(e,s,t)=>{let r=e===s,o=e<s&&t<0,i=e>s&&t>0;if(r||o||i)throw new Error("Range these inputs' contents are invalid.")},jn=(e,s,t,r)=>{let o=Math.abs(Math.ceil((s-e)/t)),i=[o],a=o,l=[{type:12,data:a},{type:r,data:e},{type:r,data:t},...bt(i)],d=u=>{let p=wt("output",r,i.length),w=p.type.value,v=[{name:"outputSize",type:"u32"},{name:"start",type:w},{name:"delta",type:w}];return`
        ${u.registerUniforms(v).declareVariables(p)}
        ${u.mainStart()}
        ${u.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${w}(global_idx) * uniforms.delta;
      }`};return{name:"Range",shaderCache:{hint:`${r}`},getShaderSource:d,getRunData:()=>({outputs:[{dims:i,dataType:r}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:l})}},_d=e=>{let s=0,t=0,r=0;e.inputs[0].dataType===6?(s=e.inputs[0].getInt32Array()[0],t=e.inputs[1].getInt32Array()[0],r=e.inputs[2].getInt32Array()[0]):e.inputs[0].dataType===1&&(s=e.inputs[0].getFloat32Array()[0],t=e.inputs[1].getFloat32Array()[0],r=e.inputs[2].getFloat32Array()[0]),E.webgpu.validateInputContent&&md(s,t,r),e.compute(jn(s,t,r,e.inputs[0].dataType),{inputs:[]})}}),fd,ln,Ei,gd,wd,Md,qu=f(()=>{xt(),B(),Wt(),It(),fd=(e,s,t,r)=>{if(e!=="none"&&r!=="i32"&&r!=="u32"&&r!=="f32")throw new Error(`Input ${r} is not supported with reduction ${e}.`);let o=`{
                var oldValue = 0;
                loop {
                  let newValueF32 =`,i=`;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${s}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;switch(e){case"none":return`${s}=${t};`;case"add":return r==="i32"||r==="u32"?`atomicAdd(&${s}, bitcast<${r}>(${t}));`:`
              ${o}bitcast<${r}>(oldValue) + (${t})${i}`;case"max":return r==="i32"||r==="u32"?`atomicMax(&${s}, bitcast<${r}>(${t}));`:`
                ${o}max(bitcast<f32>(oldValue), (${t}))${i}`;case"min":return r==="i32"||r==="u32"?`atomicMin(&${s}, bitcast<${r}>(${t}));`:`${o}min(bitcast<${r}>(oldValue), (${t}))${i}`;case"mul":return`${o}(bitcast<${r}>(oldValue) * (${t}))${i}`;default:throw new Error(`Reduction ${e} is not supported.`)}},ln=(e,s)=>`${e===1?`
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;`:`
    let element_count_dim = uniforms.output_strides[${s?"i - indices_start":"i"}];
    let dim_value = uniforms.output_shape[${s?"i - indices_start":"i"} + uniforms.last_index_dimension];`}
    
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));`,Ei=(e,s,t)=>`for (var i = 0u; i < uniforms.num_updates_elements; i++) {
        let value = updates[uniforms.num_updates_elements * ${t?"global_idx":"idx"} + i];
        ${fd(e.reduction,"output[data_offset + i]","value",s)}
      }`,gd=(e,s)=>{let t=e[0].dims,r=e[1].dims,o=t,i=1,a=Math.ceil(Se.size(r)/i),l=r[r.length-1],d=Se.sizeFromDimension(t,l),u=Se.sizeFromDimension(r,0)/l,p=[{type:12,data:a},{type:12,data:l},{type:12,data:d},...bt(e[1].dims,e[2].dims,o)],w=v=>{let P=Le("indices",e[1].dataType,e[1].dims.length),C=Le("updates",e[2].dataType,e[2].dims.length,i),A=s.reduction!=="none"&&s.reduction!==""?Br("output",e[0].dataType,o.length):wt("output",e[0].dataType,o.length,i);return`
      ${v.registerUniform("output_size","u32").registerUniform("last_index_dimension","u32").registerUniform("num_updates_elements","u32").declareVariables(P,C,A)}
      ${v.mainStart()}
        ${v.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var hasDuplicates = false;
  if (${s.reduction==="none"}) {
    for (var i = 0; i < ${u}; i = i + 1) {
      for (var j = i + 1; j < ${u}; j = j + 1) {
        var index_i = i32(indices[i].x);
        var index_j = i32(indices[j].x);
        if (index_i == index_j) {
          hasDuplicates = true;
          break;
        }
      }
      if (hasDuplicates) {
        break;
      }
    }
  }

  if (${s.reduction==="none"} && hasDuplicates) {
    if (global_idx != 0u) {
      return;
    }
    // Process each index-update pair individually when duplicates exist
    for (var idx = 0u; idx < ${u}u; idx++) {
      var data_offset = 0u;
      for (var i = 0u; i < uniforms.last_index_dimension; i++) {
        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);
        ${ln(t.length,!1)}
      }
      ${Ei(s,A.type.value,!1)}
    }
    return;
  }

  var data_offset = 0u;
  var indices_start = uniforms.last_index_dimension * global_idx;
  var indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${ln(t.length,!0)}
  }
  ${Ei(s,A.type.value,!0)}
  }`};return{name:"ScatterND",shaderCache:{hint:`${s.cacheKey}_${s.reduction}`,inputDependencies:["rank","rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(a/64)},programUniforms:p}),getShaderSource:w}},wd=e=>Ct({reduction:e.reduction}),Md=(e,s)=>{e.compute(gd(e.inputs,s),{inputs:[e.inputs[1],e.inputs[2]],outputs:[]})}}),yd,bd,vd,Ci,xd,$i,Td,Pd,Si,Ed,Cd,$d,Nn,Sd,Vn,kd,Id,Ad,Fd,Dd,ki=f(()=>{xt(),B(),Wt(),It(),yd=(e,s)=>{if(e.every(t=>t>0||(()=>{throw new Error("Resize requires scales input values to be positive")})),e.length>0){if(s.mode==="linear"){if(!(e.length===2||e.length===3||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1||e.length===5&&e[0]===1&&e[1]===1))throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`)}else if(s.mode==="cubic"&&!(e.length===2||e.length===4&&e[0]===1&&e[1]===1||e.length===4&&e[0]===1&&e[3]===1))throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode")}},bd=(e,s,t)=>{s.every(o=>o>=0&&o<t||(()=>{throw new Error("Resize requires axes input values to be positive and less than rank")}));let r=new Array(t).fill(1);return s.forEach((o,i)=>r[o]=e[i]),r},vd=(e,s,t,r,o,i)=>{let[a,l,d]=t>10?[1,2,3]:[-1,e.length>1?1:-1,-1],u=e[0].dims.length;if(a>0&&e.length>a&&e[a].dims.length>0)e[a].getFloat32Array().forEach(p=>i.push(p));else if(s.coordinateTransformMode==="tf_crop_and_resize")throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");if(l>0&&e.length>l&&e[l].dims.length===1&&e[l].dims[0]>0){if(e[l].getFloat32Array().forEach(p=>r.push(p)),r.length!==0&&r.length!==u&&t>=18&&r.length!==s.axes.length)throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");yd(r,s),s.axes.length>0&&bd(r,s.axes,u).forEach((p,w)=>r[w]=p)}if(d>0&&e.length>d&&e[d].dims.length===1&&e[d].dims[0]>0&&(e[d].getBigInt64Array().forEach(p=>o.push(Number(p))),o.length!==0&&o.length!==u&&t>=18&&o.length!==s.axes.length))throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");if(s.axes.length>0){if(r.length!==0&&r.length!==s.axes.length)throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');if(o.length!==0&&o.length!==s.axes.length)throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified')}if(typeof r<"u"&&typeof o<"u"&&r.length>0&&o.length>u)throw new Error("Resize requires only of scales or sizes to be specified")},Ci=(e,s,t,r)=>`
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${e}) * (${s});
  let whole = ${r}(big / (${t}));
  let fract = ${r}(big % (${t})) / ${r}(${t});
  return whole + fract;
`,xd=(e,s)=>`fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${s} { `+(()=>{switch(e){case"asymmetric":return`
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${s}(xResized) / ${s}(xScale);
          } else {
            ${Ci("xResized","lengthOriginal","lengthResized",s)}
          }
        `;case"pytorch_half_pixel":return`if (lengthResized > 1) {
                    return (${s}(xResized) + 0.5) / ${s}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;case"tf_half_pixel_for_nn":return`return (${s}(xResized) + 0.5) / ${s}(xScale);`;case"align_corners":return`if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${Ci("xResized","lengthOriginal - 1","lengthResized - 1",s)}
                  }`;case"tf_crop_and_resize":return`if (lengthResized > 1) {
                    return ${s}(roiStart) * ${s}(lengthOriginal - 1) +
                        (${s}(xResized) * ${s}(roiEnd - roiStart) * ${s}(lengthOriginal - 1)) /
                        ${s}(lengthResized - 1);
                  } else {
                    return 0.5 * ${s}(roiStart + roiEnd) * ${s}(lengthOriginal - 1);
                  }`;case"half_pixel_symmetric":return`const outputWidth = ${s}xScale * ${s}(lengthResized);
                  const adjustment = ${s}(lengthResized) / outputWidth;
                  const center = ${s}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${s}(xResized) + 0.5) / ${s}(xScale)) - 0.5;`;case"half_pixel":return`return ((${s}(xResized) + 0.5) / ${s}(xScale)) - 0.5;`;default:throw new Error(`Coordinate transform mode ${e} is not supported`)}})()+"}",$i=(e,s,t)=>`fn getNearestPixelFromOriginal(xOriginal: ${t}, isDownSample: bool) -> ${t} {`+(()=>{switch(e){case"round_prefer_ceil":return"if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";case"floor":return"return floor(xOriginal);";case"ceil":return"return ceil(xOriginal);";case"round_prefer_floor":return"if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";case"simple":default:if(s<11)return"if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";throw new Error(`Nearest mode ${e} is not supported`)}})()+"}",Td=(e,s,t)=>{let r=new Array(t).fill(0).concat(new Array(t).fill(1)),o=e.length===0?r:e.slice();return s.length>0?(s.forEach((i,a)=>{r[i]=o[a],r[a+t]=o[s.length+a]}),r):o},Pd=(e,s,t,r)=>{let o=[];if(t.length>0)if(r.length>0){if(e.forEach(i=>o.push(i)),Math.max(...r)>e.length)throw new Error("axes is out of bound");r.forEach((i,a)=>o[i]=t[a])}else t.forEach(i=>o.push(i));else{if(s.length===0)throw new Error("Resize requires either scales or sizes.");o=e.map((i,a)=>Math.round(i*s[a]))}return o},Si=(e,s,t)=>{let r=(()=>{switch(t.keepAspectRatioPolicy){case"not_larger":return t.axes.length>0?Math.min(...t.axes.map(i=>s[i]),Number.MAX_VALUE):Math.min(...s,Number.MAX_VALUE);case"not_smaller":return t.axes.length>0?Math.max(...t.axes.map(i=>s[i]),Number.MIN_VALUE):Math.max(...s,Number.MIN_VALUE);default:throw new Error(`Keep aspect ratio policy ${t.keepAspectRatioPolicy} is not supported`)}})();s.fill(1,0,s.length);let o=e.slice();return t.axes.length>0?(t.axes.forEach(i=>s[i]=r),t.axes.forEach(i=>o[i]=Math.round(e[i]*s[i]))):(s.fill(r,0,s.length),o.forEach((i,a)=>o[a]=Math.round(i*s[a]))),o},Ed=(e,s,t,r,o)=>`
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${e.type.indices}) -> array<${e.type.value}, ${t.length}> {
      var original_indices: array<${e.type.value}, ${t.length}>;
      for (var i:u32 = 0; i < ${t.length}; i++) {
        var output_index = ${e.indicesGet("output_indices","i")};
        var scale = ${yt("uniforms.scales","i",r)};
        var roi_low = ${yt("uniforms.roi","i",o)};
        var roi_hi = ${yt("uniforms.roi",`i + ${s.length}`,o)};
        if (scale == 1.0) {
          original_indices[i] = ${e.type.value}(output_index);
        } else {
          var input_shape_i = ${yt("uniforms.input_shape","i",s.length)};
          var output_shape_i = ${yt("uniforms.output_shape","i",t.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`,Cd=(e,s,t,r,o,i,a)=>`
    fn calculateInputIndicesFromOutputIndices(output_indices: ${s.type.indices}) -> ${e.type.indices} {
      var input_indices: ${e.type.indices};
      for (var i:u32 = 0; i < ${r.length}; i++) {
        var output_index = ${s.indicesGet("output_indices","i")};
        var input_index: u32;
        var scale = ${yt("uniforms.scales","i",o)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${yt("uniforms.roi","i",i)};
          var roi_hi = ${yt("uniforms.roi",`i + ${t.length}`,i)};
          var input_shape_i = ${yt("uniforms.input_shape","i",t.length)};
          var output_shape_i = ${yt("uniforms.output_shape","i",r.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${a} || (original_idx >= 0 && original_idx < ${s.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${s.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${e.indicesSet("input_indices","i","input_index")}
      }
      return input_indices;
    }`,$d=(e,s)=>`
    fn checkInputIndices(input_indices: ${e.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${s.length}; i++) {
        var input_index = ${e.indicesGet("input_indices","i")};
        if (input_index < 0 || input_index >= ${yt("uniforms.input_shape","i",s.length)}) {
          return false;
        }
      }
      return true;
    }`,Nn=(e,s,t,r)=>e.rank>r?`
    ${e.indicesSet("input_indices",s,"channel")};
    ${e.indicesSet("input_indices",t,"batch")};
`:"",Sd=(e,s,t,r,o)=>{let[i,a,l,d]=t.length===2?[-1,0,1,-1]:[0,2,3,1],u=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${u} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(row, ${t[a]} - 1))`)};
      ${e.indicesSet("input_indices",l,`max(0, min(col, ${t[l]} - 1))`)};
      ${Nn(e,d,i,2)}
      return ${e.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${s.type.indices}) -> ${u} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${u} = originalIndices[${a}];
      var col:${u} = originalIndices[${l}];
      ${r?`if (row < 0 || row > (${t[a]} - 1) || col < 0 || col > (${t[l]} - 1)) {
        return ${o};
      }`:""};
      row = max(0, min(row, ${t[a]} - 1));
      col = max(0, min(col, ${t[l]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${t.length>2?`u32(originalIndices[${d}])`:"0"};
      var batch: u32 =  ${t.length>2?`u32(originalIndices[${i}])`:"0"};
      var x11: ${u} = getInputValue(batch, channel, row1, col1);
      var x12: ${u} = getInputValue(batch, channel, row1, col2);
      var x21: ${u} = getInputValue(batch, channel, row2, col1);
      var x22: ${u} = getInputValue(batch, channel, row2, col2);
      var dx1: ${u} = abs(row - ${u}(row1));
      var dx2: ${u} = abs(${u}(row2) - row);
      var dy1: ${u} = abs(col - ${u}(col1));
      var dy2: ${u} = abs(${u}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`},Vn=(e,s,t,r,o,i,a,l,d,u)=>{let p=t.length===2,[w,v]=p?[0,1]:[2,3],P=e.type.value,C=A=>{let H=A===w?"row":"col";return`
      fn ${H}CubicInterpolation(input_indices: ${e.type.indices}, output_indices: ${s.type.indices}) -> ${P} {
        var output_index = ${s.indicesGet("output_indices",A)};
        var originalIdx: ${P} = getOriginalCoordinateFromResizedCoordinate(output_index, ${o[A]},
        ${r[A]}, ${t[A]}, ${i[A]}, ${i[A]} + ${t.length});
        var fractOriginalIdx: ${P} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${l} && (originalIdx < 0 || originalIdx > (${t[A]} - 1))) {
          return ${d};
        }
        var data: array<${P}, 4> = array<${P}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${H}: ${P} = originalIdx + ${P}(i);
          if (${H} < 0 || ${H} >= ${t[A]}) {
            ${u?`coefs[i + 1] = 0.0;
                        continue;`:l?`return ${d};`:`${H} = max(0, min(${H}, ${t[A]} - 1));`};
          }
        var input_indices_copy: ${e.type.indices} = input_indices;
          ${e.indicesSet("input_indices_copy",A,`u32(${H})`)};
          data[i + 1] = ${A===w?e.getByIndices("input_indices_copy"):"rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`};return`
    ${C(w)};
    ${C(v)};
  fn getCubicInterpolationCoefs(s: ${P}) -> array<${P}, 4> {
    var absS = abs(s);
    var coeffs: array<${P}, 4> = array<${P}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${P} = 1.0 - absS;
    var twoMinusAbsS: ${P} = 2.0 - absS;
    var onePlusAbsS: ${P} = 1.0 + absS;
    coeffs[0] = ((${a} * onePlusAbsS - 5 * ${a}) * onePlusAbsS + 8 * ${a}) * onePlusAbsS - 4 * ${a};
    coeffs[1] = ((${a} + 2) * absS - (${a} + 3)) * absS * absS + 1;
    coeffs[2] = ((${a} + 2) * oneMinusAbsS - (${a} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${a} * twoMinusAbsS - 5 * ${a}) * twoMinusAbsS + 8 * ${a}) * twoMinusAbsS - 4 * ${a};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${P}, 4>, coefs: array<${P}, 4>) -> ${P} {
    var coefsSum: ${P} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${s.type.indices}) -> ${P} {
    var input_indices: ${e.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `},kd=(e,s,t,r,o)=>{let[i,a,l,d,u]=t.length===3?[-1,0,1,2,-1]:[0,2,3,4,1],p=e.type.value;return`
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${p} {
      var input_indices: ${e.type.indices};
      ${e.indicesSet("input_indices",a,`max(0, min(depth, ${t[a]} - 1))`)};
      ${e.indicesSet("input_indices",l,`max(0, min(height, ${t[l]} - 1))`)};
      ${e.indicesSet("input_indices",d,`max(0, min(width, ${t[d]} - 1))`)};
      ${Nn(e,u,i,3)}
      return ${e.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${s.type.indices}) -> ${p} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${p} = originalIndices[${a}];
      var height:${p} = originalIndices[${l}];
      var width:${p} = originalIndices[${d}];
      ${r?`if (depth < 0 || depth > (${t[a]} - 1) || height < 0 || height > (${t[l]} - 1) || width < 0 || (width > ${t[d]} - 1)) {
      return ${o};
        }`:""};

    depth = max(0, min(depth, ${t[a]} - 1));
      height = max(0, min(height, ${t[l]} - 1));
      width = max(0, min(width, ${t[d]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${t.length>3?`u32(originalIndices[${u}])`:"0"};
      var batch: u32 =  ${t.length>3?`u32(originalIndices[${i}])`:"0"};

      var x111: ${p} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${p} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${p} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${p} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${p} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${p} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${p} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${p} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${p} = abs(depth - ${p}(depth1));
      var dx2: ${p} = abs(${p}(depth2) - depth);
      var dy1: ${p} = abs(height - ${p}(height1));
      var dy2: ${p} = abs(${p}(height2) - height);
      var dz1: ${p} = abs(width - ${p}(width1));
      var dz2: ${p} = abs(${p}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`},Id=(e,s,t,r,o,i)=>{let a=e.dims,l=Td(i,s.axes,a.length),d=Pd(a,r,o,s.axes),u=r.slice();r.length===0&&(u=a.map((k,se)=>k===0?1:d[se]/k),s.keepAspectRatioPolicy!=="stretch"&&(d=Si(a,u,s)));let p=wt("output",e.dataType,d.length),w=Le("input",e.dataType,a.length),v=Se.size(d),P=a.length===d.length&&a.every((k,se)=>k===d[se]),C=s.coordinateTransformMode==="tf_crop_and_resize",A=s.extrapolationValue,H=w.type.value,z=k=>`
      ${P?"":`
      ${xd(s.coordinateTransformMode,H)};
      ${(()=>{switch(s.mode){case"nearest":return`
              ${$d(w,a)};
              ${$i(s.nearestMode,t,H)};
              ${Cd(w,p,a,d,u.length,l.length,C)};
              `;case"linear":return`
              ${Ed(p,a,d,u.length,l.length)};
              ${(()=>{if(a.length===2||a.length===4)return`${Sd(w,p,a,C,A)}`;if(a.length===3||a.length===5)return`${kd(w,p,a,C,A)}`;throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.")})()};
            `;case"cubic":return`
            ${(()=>{if(a.length===2||a.length===4)return`${Vn(w,p,a,d,u,l,s.cubicCoeffA,C,s.extrapolationValue,s.excludeOutside)}`;throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.")})()};
            `;default:throw Error("Invalid resize mode")}})()};
      `}
      ${k.registerUniform("output_size","u32").registerUniform("scales","f32",u.length).registerUniform("roi","f32",l.length).declareVariables(w,p)}
      ${k.mainStart()}
        ${k.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${P?"output[global_idx] = input[global_idx];":`
        let output_indices = ${p.offsetToIndices("global_idx")};
        var input_indices: ${w.type.indices};
        ${(()=>{switch(s.mode){case"nearest":return`input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${w.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${s.extrapolationValue};
                }`;case"linear":return`output[global_idx] = ${a.length===2||a.length===4?"bilinearInterpolation":"trilinearInterpolation"}(output_indices);`;case"cubic":return"output[global_idx] = bicubicInterpolation(output_indices);";default:throw Error(`Unsupported resize mode: ${s.mode}`)}})()};
`}
      }`;return{name:"Resize",shaderCache:{hint:`${s.cacheKey}|${t}|${u.length>0?s.mode==="cubic"?u:u.length:""}|${o.length>0?o:""}|${l.length>0?l:""}|${P}|${s.mode==="nearest"?a.length:a}`,inputDependencies:["rank"]},getShaderSource:z,getRunData:()=>({outputs:[{dims:d,dataType:e.dataType}],dispatchGroup:{x:Math.ceil(v/64)},programUniforms:[{type:12,data:v},{type:1,data:u},{type:1,data:l},...bt(a,d)]})}},Ad=e=>{let s=e.customDataBuffer;return new Uint32Array(s,s.byteOffset,1)[0]},Fd=(e,s)=>{let t=[],r=[],o=[],i=Ad(e);if(s.antialias!==0)throw Error("Only default value (0) for Antialias attribute is supported");vd(e.inputs,s,i,t,r,o),e.compute(Id(e.inputs[0],s,i,t,r,o),{inputs:[0]})},Dd=e=>{let s=e.antialias,t=e.axes,r=e.coordinateTransformMode,o=e.cubicCoeffA,i=e.excludeOutside!==0,a=e.extrapolationValue,l=e.keepAspectRatioPolicy,d=e.mode,u=e.nearestMode===""?"simple":e.nearestMode;return Ct({antialias:s,axes:t,coordinateTransformMode:r,cubicCoeffA:o,excludeOutside:i,extrapolationValue:a,keepAspectRatioPolicy:l,mode:d,nearestMode:u})}}),Od,Ld,zd,Qu=f(()=>{xt(),B(),It(),Od=e=>{if(!e||e.length<3)throw new Error("layerNorm requires at least 3 inputs.");let s=e[0],t=e[1],r=e[2];if(s.dataType!==t.dataType||s.dataType!==r.dataType)throw new Error("All inputs must have the same data type");if(s.dims.length!==3&&s.dims.length!==2)throw new Error("Input must be 2D or 3D");if(t.dims.length!==3&&t.dims.length!==2)throw new Error("Skip must be 2D or 3D");let o=s.dims[s.dims.length-1],i=s.dims[s.dims.length-2];if(t.dims[t.dims.length-1]!==o)throw new Error("Skip must have the same hidden size as input");if(t.dims[t.dims.length-2]!==i)throw new Error("Skip must have the same sequence length as input");if(r.dims.length!==1)throw new Error("Gamma must be 1D");if(r.dims[r.dims.length-1]!==o)throw new Error("Gamma must have the same hidden size as input");if(e.length>3){let a=e[3];if(a.dims.length!==1)throw new Error("Beta must be 1D");if(a.dims[a.dims.length-1]!==o)throw new Error("Beta must have the same hidden size as input")}if(e.length>4){let a=e[4];if(a.dims.length!==1)throw new Error("Bias must be 1D");if(a.dims[a.dims.length-1]!==o)throw new Error("Bias must have the same hidden size as input")}},Ld=(e,s,t,r)=>{let o=s.simplified,i=e[0].dims,a=Se.size(i),l=i,d=a,u=i.slice(-1)[0],p=r?i.slice(0,-1).concat(1):[],w=!o&&e.length>3,v=e.length>4,P=r&&t>1,C=r&&t>2,A=t>3,H=64,z=Jt(u),k=[{type:12,data:d},{type:12,data:z},{type:12,data:u},{type:1,data:s.epsilon}],se=ce=>{let ye=[{name:"output_size",type:"u32"},{name:"components",type:"u32"},{name:"hidden_size",type:"u32"},{name:"epsilon",type:"f32"}],ge=[Le("x",e[0].dataType,e[0].dims,z),Le("skip",e[1].dataType,e[1].dims,z),Le("gamma",e[2].dataType,e[2].dims,z)];w&&ge.push(Le("beta",e[3].dataType,e[3].dims,z)),v&&ge.push(Le("bias",e[4].dataType,e[4].dims,z)),ge.push(wt("output",e[0].dataType,l,z)),P&&ge.push(wt("mean_output",1,p)),C&&ge.push(wt("inv_std_output",1,p)),A&&ge.push(wt("input_skip_bias_sum",e[0].dataType,l,z));let Ie=ps(e[0].dataType),Ae=ps(1,z);return`

      ${ce.registerUniforms(ye).declareVariables(...ge)}
      var<workgroup> sum_shared : array<${Ae}, ${H}>;
      var<workgroup> sum_squared_shared : array<${Ae}, ${H}>;

      ${ce.mainStart([H,1,1])}
        let ix = local_id.x;
        let iy = global_id.x / ${H};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${H};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${H-1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${v?"bias[offset1d + i]":Ie+"(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${A?"input_skip_bias_sum[offset + i] = value;":""}
          output[offset + i] = value;
          let f32_value = ${sr(Ie,z,"value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${H};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${_r("sum",z)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${_r("square_sum",z)} / f32(uniforms.hidden_size) ${o?"":"- mean * mean"} + uniforms.epsilon);
        ${P?"mean_output[global_idx] = mean;":""}
        ${C?"inv_std_output[global_idx] = inv_std_dev;":""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${o?"":`- ${Ie}(mean)`}) *
            ${Ie}(inv_std_dev) * gamma[offset1d + i]
            ${w?"+ beta[offset1d + i]":""};
        }
      }`},Q=[{dims:l,dataType:e[0].dataType}];return t>1&&Q.push({dims:p,dataType:1}),t>2&&Q.push({dims:p,dataType:1}),t>3&&Q.push({dims:i,dataType:e[0].dataType}),{name:"SkipLayerNormalization",shaderCache:{hint:`${z};${P};${C};${A}`,inputDependencies:e.map((ce,ye)=>"type")},getShaderSource:se,getRunData:()=>({outputs:Q,dispatchGroup:{x:Math.ceil(d/u)},programUniforms:k})}},zd=(e,s)=>{Od(e.inputs);let t=[0];e.outputCount>1&&t.push(-3),e.outputCount>2&&t.push(-3),e.outputCount>3&&t.push(3),e.compute(Ld(e.inputs,s,e.outputCount,!1),{outputs:t})}}),Bd,Fr,Rd,Ii,jd,Kt,Xu,Ju,Sp=f(()=>{xt(),B(),Wt(),It(),Bd=(e,s)=>{if(!e||e.length<1)throw new Error("too few inputs");if(s.axes.length!==0){if(s.axes.length!==s.starts.length||s.axes.length!==s.ends.length)throw new Error("axes, starts and ends must have the same length")}else if(s.starts.length!==s.ends.length)throw new Error("starts and ends must have the same length");e.slice(1).forEach((t,r)=>{if(e[r+1].dataType!==6&&e[r+1].dataType!==7)throw new Error(`Input ${r} must be an array of int32 or int64`)})},Fr=(e,s)=>{let t=[];if(e.length>s)if(e[s].dataType===7)e[s].getBigInt64Array().forEach(r=>t.push(Number(r)));else if(e[s].dataType===6)e[s].getInt32Array().forEach(r=>t.push(Number(r)));else throw new Error(`Input ${s} must be an array of int32 or int64`);return t},Rd=(e,s)=>{if(e.length>1){let t=Fr(e,1),r=Fr(e,2),o=Fr(e,3);return o.length===0&&(o=[...Array(e[0].dims.length).keys()]),Ct({starts:t,ends:r,axes:o})}else return s},Ii=(e,s,t,r,o)=>{let i=e;return e<0&&(i+=t[r[s]]),o[s]<0?Math.max(0,Math.min(i,t[r[s]]-1)):Math.max(0,Math.min(i,t[r[s]]))},jd=(e,s,t)=>`fn calculateInputIndices(output_indices: ${s.type.indices}) -> ${e.type.indices} {
          var input_indices: ${e.type.indices};
          var carry = 0u;
          for (var i = ${t.length}; i >= 0; i--) {
            let input_shape_i = ${yt("uniforms.input_shape","i",t.length)};
            let steps_i = ${yt("uniforms.steps","i",t.length)};
            let signs_i = ${yt("uniforms.signs","i",t.length)};
            let starts_i = ${yt("uniforms.starts","i",t.length)};
            var output_index = ${s.indicesGet("output_indices","i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${e.indicesSet("input_indices","i","input_index")};
          }
          return input_indices;
      }`,Kt=(e,s)=>{let t=e[0].dims,r=Se.size(t),o=s.axes.length>0?Se.normalizeAxes(s.axes,t.length):[...Array(t.length).keys()],i=Fr(e,4);i.forEach(z=>z!==0||(()=>{throw new Error("step cannot be 0")})),i.length===0&&(i=Array(o.length).fill(1));let a=s.starts.map((z,k)=>Ii(z,k,t,o,i)),l=s.ends.map((z,k)=>Ii(z,k,t,o,i));if(o.length!==a.length||o.length!==l.length)throw new Error("start, ends and axes should have the same number of elements");if(o.length!==t.length)for(let z=0;z<t.length;++z)o.includes(z)||(a.splice(z,0,0),l.splice(z,0,t[z]),i.splice(z,0,1));let d=i.map(z=>Math.sign(z));i.forEach((z,k,se)=>{if(z<0){let Q=(l[k]-a[k])/z,ce=a[k],ye=ce+Q*i[k];a[k]=ye,l[k]=ce,se[k]=-z}});let u=t.slice(0);o.forEach((z,k)=>{u[z]=Math.ceil((l[z]-a[z])/i[z])});let p={dims:u,dataType:e[0].dataType},w=wt("output",e[0].dataType,u.length),v=Le("input",e[0].dataType,e[0].dims.length),P=Se.size(u),C=[{name:"outputSize",type:"u32"},{name:"starts",type:"u32",length:a.length},{name:"signs",type:"i32",length:d.length},{name:"steps",type:"u32",length:i.length}],A=[{type:12,data:P},{type:12,data:a},{type:6,data:d},{type:12,data:i},...bt(e[0].dims,u)],H=z=>`
      ${z.registerUniforms(C).declareVariables(v,w)}
        ${jd(v,w,t)}
        ${z.mainStart()}
          ${z.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${w.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${w.setByOffset("global_idx",v.getByIndices("input_indices"))}
      }`;return{name:"Slice",shaderCache:{hint:`${d.length}_${a.length}_${i.length}`,inputDependencies:["rank"]},getShaderSource:H,getRunData:()=>({outputs:[p],dispatchGroup:{x:Math.ceil(r/64)},programUniforms:A})}},Xu=(e,s)=>{Bd(e.inputs,s);let t=Rd(e.inputs,s);e.compute(Kt(e.inputs,t),{inputs:[0]})},Ju=e=>{let s=e.starts,t=e.ends,r=e.axes;return Ct({starts:s,ends:t,axes:r})}}),Yu,Ai,Nd,Vd,Zu=f(()=>{xt(),B(),Wt(),Er(),It(),Yu=e=>{if(!e||e.length!==1)throw new Error("Softmax op requires 1 input.")},Ai=(e,s)=>{let t=e.inputs[0],r=t.dims,o=Se.size(r),i=r.length,a=Se.normalizeAxis(s.axis,i),l=a<r.length-1,d,u=[];l?(u=Array.from({length:i},(ge,Ie)=>Ie),u[a]=i-1,u[i-1]=a,d=e.compute(As(t,u),{inputs:[t],outputs:[-1]})[0]):d=t;let p=d.dims,w=p[i-1],v=o/w,P=Jt(w),C=w/P,A=64;v===1&&(A=256);let H=(ge,Ie)=>Ie===4?`max(max(${ge}.x, ${ge}.y), max(${ge}.z, ${ge}.w))`:Ie===2?`max(${ge}.x, ${ge}.y)`:Ie===3?`max(max(${ge}.x, ${ge}.y), ${ge}.z)`:ge,z=Le("x",d.dataType,d.dims,P),k=wt("result",d.dataType,d.dims,P),se=z.type.value,Q=ps(d.dataType)==="f32"?`var threadMax = ${se}(-3.402823e+38f);`:`var threadMax = ${se}(-65504.0h);`,ce=ge=>`
      var<workgroup> rowMaxShared : ${se};
      var<workgroup> rowSumShared : ${se};
      var<workgroup> threadShared : array<${se}, ${A}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${se} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${se}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${ge.registerUniform("packedCols","i32").declareVariables(z,k)}
      ${ge.mainStart(A)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${A};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${Q}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${se}(${H("threadShared[0]",P)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${se}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${se}(${_r("threadShared[0]",P)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`,ye=e.compute({name:"Softmax",shaderCache:{hint:`${P};${A}`,inputDependencies:["type"]},getRunData:()=>({outputs:[{dims:p,dataType:d.dataType}],dispatchGroup:{x:v},programUniforms:[{type:6,data:C}]}),getShaderSource:ce},{inputs:[d],outputs:[l?-1:0]})[0];l&&e.compute(As(ye,u),{inputs:[ye]})},Nd=(e,s)=>{Yu(e.inputs),Ai(e,s)},Vd=e=>Ct({axis:e.axis})}),Fi,Di,Oi,ep,Ud,tp=f(()=>{xt(),B(),It(),Fi=e=>Array.from(e.getBigInt64Array(),Number),Di=e=>{if(!e||e.length!==2)throw new Error("Tile requires 2 inputs.");if(e[0].dataType!==1&&e[0].dataType!==10&&e[0].dataType!==6&&e[0].dataType!==12)throw new Error("Tile only support float, float16, int32, and uint32 data types");if(e[1].dataType!==7)throw new Error("Tile `repeats` input should be of int64 data type");if(e[1].dims.length!==1)throw new Error("Tile `repeats` input should be 1-D");if(Fi(e[1]).length!==e[0].dims.length)throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor")},Oi=(e,s)=>{let t=[];for(let r=0;r<e.length;++r)t.push(e[r]*s[r]);return t},ep=(e,s)=>{let t=e[0].dims,r=s??Fi(e[1]),o=Oi(t,r),i=Se.size(o),a=e[0].dataType,l=Le("input",a,t.length),d=wt("output",a,o.length),u=p=>`
      const inputShape = ${l.indices(...t)};
      ${p.registerUniform("output_size","u32").declareVariables(l,d)}
      ${p.mainStart()}
      ${p.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${d.offsetToIndices("global_idx")};
      var input_indices: ${l.type.indices};
      for (var i = 0; i < ${t.length}; i++) {
        let input_dim_i = ${l.indicesGet("uniforms.input_shape","i")};
        let input_dim_value = ${d.indicesGet("output_indices","i")}  % input_dim_i;

        ${l.indicesSet("input_indices","i","input_dim_value")}
      }
      ${d.setByOffset("global_idx",l.getByIndices("input_indices"))}
    }`;return{name:"Tile",shaderCache:{hint:`${r}`,inputDependencies:["rank"]},getRunData:()=>({outputs:[{dims:o,dataType:e[0].dataType}],dispatchGroup:{x:Math.ceil(i/64)},programUniforms:[{type:12,data:i},...bt(e[0].dims,o)]}),getShaderSource:u}},Ud=e=>{Di(e.inputs),e.compute(ep(e.inputs),{inputs:[0]})}}),Li,Wd,Gd,kp=f(()=>{xt(),B(),It(),Li=(e,s,t,r,o)=>{let i=wt("output_data",o,t.length,4),a=Le("a_data",s[1].dataType,s[1].dims.length,4),l=Le("b_data",s[2].dataType,s[2].dims.length,4),d=Le("c_data",s[0].dataType,s[0].dims.length,4),u,p=(w,v,P)=>`select(${v}, ${w}, ${P})`;if(!r)u=i.setByOffset("global_idx",p(a.getByOffset("global_idx"),l.getByOffset("global_idx"),d.getByOffset("global_idx")));else{let w=(v,P,C="")=>{let A=`a_data[index_a${P}][component_a${P}]`,H=`b_data[index_b${P}][component_b${P}]`,z=`bool(c_data[index_c${P}] & (0xffu << (component_c${P} * 8)))`;return`
            let output_indices${P} = ${i.offsetToIndices(`global_idx * 4u + ${P}u`)};
            let offset_a${P} = ${a.broadcastedIndicesToOffset(`output_indices${P}`,i)};
            let offset_b${P} = ${l.broadcastedIndicesToOffset(`output_indices${P}`,i)};
            let offset_c${P} = ${d.broadcastedIndicesToOffset(`output_indices${P}`,i)};
            let index_a${P} = offset_a${P} / 4u;
            let index_b${P} = offset_b${P} / 4u;
            let index_c${P} = offset_c${P} / 4u;
            let component_a${P} = offset_a${P} % 4u;
            let component_b${P} = offset_b${P} % 4u;
            let component_c${P} = offset_c${P} % 4u;
            ${v}[${P}] = ${C}(${p(A,H,z)});
          `};o===9?u=`
            var data = vec4<u32>(0);
            ${w("data",0,"u32")}
            ${w("data",1,"u32")}
            ${w("data",2,"u32")}
            ${w("data",3,"u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));`:u=`
            ${w("output_data[global_idx]",0)}
            ${w("output_data[global_idx]",1)}
            ${w("output_data[global_idx]",2)}
            ${w("output_data[global_idx]",3)}
          `}return`
        ${e.registerUniform("vec_size","u32").declareVariables(d,a,l,i)}
        ${e.mainStart()}
        ${e.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${u}
      }`},Wd=e=>{let s=e[1].dims,t=e[2].dims,r=e[0].dims,o=e[1].dataType,i=!(Se.areEqual(s,t)&&Se.areEqual(t,r)),a=s,l=Se.size(s);if(i){let u=ar.calcShape(ar.calcShape(s,t,!1),r,!1);if(!u)throw new Error("Can't perform where op on the given tensors");a=u,l=Se.size(a)}let d=Math.ceil(l/4);return{name:"Where",shaderCache:{inputDependencies:["rank","rank","rank"]},getShaderSource:u=>Li(u,e,a,i,o),getRunData:()=>({outputs:[{dims:a,dataType:o}],dispatchGroup:{x:Math.ceil(l/64/4)},programUniforms:[{type:12,data:d},...bt(r,s,t,a)]})}},Gd=e=>{e.compute(Wd(e.inputs))}}),Kd,sp=f(()=>{fu(),mo(),gu(),wu(),Mu(),yu(),bu(),zl(),Eu(),Cu(),$u(),Su(),ku(),Iu(),Au(),Fu(),Du(),Ou(),Lu(),zu(),nn(),Ru(),$p(),ju(),Zc(),Sc(),Nu(),Gu(),Ku(),Hu(),qu(),po(),ki(),Bc(),Qu(),Sp(),Zu(),Oc(),tp(),Er(),Mn(),kp(),Kd=new Map([["Abs",[La]],["Acos",[Mo]],["Acosh",[za]],["Add",[Lo]],["ArgMax",[Ea,wn]],["ArgMin",[Pa,wn]],["Asin",[Ba]],["Asinh",[yo]],["Atan",[Ra]],["Atanh",[ja]],["Attention",[Ia]],["AveragePool",[ld,ad]],["BatchNormalization",[fo]],["BiasAdd",[Oa]],["BiasSplitGelu",[cl]],["Cast",[Na,bo]],["Ceil",[Ua]],["Clip",[vo]],["Concat",[No,yl]],["Conv",[Jo,Rr]],["ConvTranspose",[si,ei]],["Cos",[Wa]],["Cosh",[xo]],["CumSum",[ri,Wl]],["DepthToSpace",[Cn,Hl]],["DequantizeLinear",[Rn,hd]],["Div",[ul]],["Einsum",[Sn,Yl]],["Elu",[Ga,Jr]],["Equal",[pl]],["Erf",[Ka]],["Exp",[Ha]],["Expand",[sc]],["FastGelu",[ci]],["Floor",[To]],["FusedConv",[Jo,Rr]],["Gather",[ic,oc]],["GatherElements",[hc,pc]],["GatherBlockQuantized",[dc,hi]],["GatherND",[ui,lc]],["Gelu",[qa]],["Gemm",[gc,fc]],["GlobalAveragePool",[dd,cd]],["GlobalMaxPool",[Bn,Pi]],["Greater",[Bo]],["GreaterOrEqual",[fl]],["GridSample",[Tc,gr]],["GroupQueryAttention",[Nc]],["HardSigmoid",[Co,Za]],["InstanceNormalization",[Wc]],["LayerNormalization",[An]],["LeakyRelu",[Qa,Jr]],["Less",[_l]],["LessOrEqual",[Ro]],["Log",[nl]],["MatMul",[qc]],["MatMulNBits",[Jc,Yc]],["MaxPool",[Uu,Wu]],["Mul",[zo]],["MultiHeadAttention",[$c,Ec]],["Neg",[Xa]],["Not",[Po]],["Pad",[Fn]],["Pow",[hl]],["QuickGelu",[il,Jr]],["Range",[_d]],["Reciprocal",[Ja]],["ReduceMin",[co]],["ReduceMean",[wa]],["ReduceMax",[ba]],["ReduceSum",[xa]],["ReduceProd",[va]],["ReduceL1",[Ma]],["ReduceL2",[lo]],["ReduceLogSum",[Ta]],["ReduceLogSumExp",[ya]],["ReduceSumSquare",[uo]],["Relu",[Eo]],["Resize",[Fd,Dd]],["RotaryEmbedding",[zc]],["ScatterND",[Md,wd]],["Sigmoid",[Ya]],["Sin",[el]],["Sinh",[tl]],["Slice",[Xu,Ju]],["SkipLayerNormalization",[zd]],["Split",[Fc,Dc]],["Sqrt",[$o]],["Softmax",[Nd,Vd]],["Sub",[ml]],["Tan",[sl]],["Tanh",[ko]],["ThresholdedRelu",[rl,Jr]],["Tile",[Ud]],["Transpose",[Ji,eo]],["Where",[Gd]]])}),Hd,cn=f(()=>{at(),Cs(),It(),Hd=class{constructor(e){this.backend=e,this.repo=new Map,this.attributesBound=!1}getArtifact(e){return this.repo.get(e)}setArtifact(e,s){this.repo.set(e,s)}run(e,s,t,r,o){Fe(e.programInfo.name);let i=this.backend.device,a=this.backend.getComputePassEncoder();this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2);let l=[];for(let u of s)l.push({binding:l.length,resource:{buffer:u.buffer}});for(let u of t)l.push({binding:l.length,resource:{buffer:u.buffer}});o&&l.push({binding:l.length,resource:o});let d=i.createBindGroup({layout:e.computePipeline.getBindGroupLayout(0),entries:l,label:e.programInfo.name});if(this.backend.sessionStatus==="capturing"){let u={kernelId:this.backend.currentKernelId,computePipeline:e.computePipeline,bindGroup:d,dispatchGroup:r};this.backend.capturedCommandList.get(this.backend.currentSessionId).push(u)}a.setPipeline(e.computePipeline),a.setBindGroup(0,d),a.dispatchWorkgroups(...r),this.backend.writeTimestamp(this.backend.pendingDispatchNumber*2+1),this.backend.pendingDispatchNumber++,(this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber||this.backend.queryType==="at-passes")&&this.backend.endComputePass(),this.backend.pendingDispatchNumber>=this.backend.maxDispatchNumber&&this.backend.flush(),Oe(e.programInfo.name)}dispose(){}build(e,s){Fe(e.name);let t=this.backend.device,r=[];[{feature:"shader-f16",extension:"f16"},{feature:"subgroups",extension:"subgroups"}].forEach(u=>{t.features.has(u.feature)&&r.push(`enable ${u.extension};`)});let o=Ki(s,this.backend.device.limits),i=e.getShaderSource(o),a=`${r.join(`
`)}
${o.additionalImplementations}
${i}`,l=t.createShaderModule({code:a,label:e.name});Ot("verbose",()=>`[WebGPU] ${e.name} shader code: ${a}`);let d=t.createComputePipeline({compute:{module:l,entryPoint:"main"},layout:"auto",label:e.name});return Oe(e.name),{programInfo:e,computePipeline:d,uniformVariablesInfo:o.variablesInfo}}normalizeDispatchGroupSize(e){let s=typeof e=="number"?e:e.x,t=typeof e=="number"?1:e.y||1,r=typeof e=="number"?1:e.z||1,o=this.backend.device.limits.maxComputeWorkgroupsPerDimension;if(s<=o&&t<=o&&r<=o)return[s,t,r];let i=s*t*r,a=Math.ceil(Math.sqrt(i));if(a>o){if(a=Math.ceil(Math.cbrt(i)),a>o)throw new Error("Total dispatch size exceeds WebGPU maximum.");return[a,a,a]}else return[a,a,1]}}}),qd={};I(qd,{WebGpuBackend:()=>Yd});var Qd,Xd,Jd,Yd,rp=f(()=>{at(),xt(),Cs(),pe(),os(),sp(),cn(),Qd=(e,s)=>{if(s.length!==e.length)throw new Error(`inputDependencies length ${s.length} is not equal to inputTensors length ${e.length}.`);let t=[];for(let r=0;r<e.length;++r){let o=e[r].dataType;switch(s[r]){case"none":{t.push("");break}case"type":{t.push(`${o}`);break}case"rank":{let i=e[r].dims.length;t.push(`${o};${i}`);break}case"dims":{let i=e[r].dims.join(",");t.push(`${o};${i}`);break}default:throw new Error(`unsupported input dependency: ${s[r]}`)}}return t.join("|")},Xd=(e,s,t)=>{let r=e.name;return e.shaderCache?.hint&&(r+="["+e.shaderCache.hint+"]"),r+=":"+t+`:${Qd(s,e.shaderCache?.inputDependencies??new Array(s.length).fill("dims"))}`,r},Jd=class{constructor(e){e&&(this.architecture=e.architecture,this.vendor=e.vendor)}isArchitecture(e){return this.architecture===e}isVendor(e){return this.vendor===e}},Yd=class{constructor(){this.currentSessionId=null,this.currentKernelId=null,this.commandEncoder=null,this.computePassEncoder=null,this.maxDispatchNumber=16,this.pendingDispatchNumber=0,this.pendingKernels=[],this.pendingQueries=new Map,this.sessionStatus="default",this.capturedCommandList=new Map,this.capturedPendingKernels=new Map,this.sessionExternalDataMapping=new Map}get currentKernelCustomData(){if(this.currentKernelId===null)throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");let e=this.kernelCustomData.get(this.currentKernelId);return e||(e={},this.kernelCustomData.set(this.currentKernelId,e)),e}async initialize(e,s){this.env=e;let t=[],r={requiredLimits:{maxComputeWorkgroupStorageSize:s.limits.maxComputeWorkgroupStorageSize,maxComputeWorkgroupsPerDimension:s.limits.maxComputeWorkgroupsPerDimension,maxStorageBufferBindingSize:s.limits.maxStorageBufferBindingSize,maxBufferSize:s.limits.maxBufferSize,maxComputeInvocationsPerWorkgroup:s.limits.maxComputeInvocationsPerWorkgroup,maxComputeWorkgroupSizeX:s.limits.maxComputeWorkgroupSizeX,maxComputeWorkgroupSizeY:s.limits.maxComputeWorkgroupSizeY,maxComputeWorkgroupSizeZ:s.limits.maxComputeWorkgroupSizeZ},requiredFeatures:t},o=i=>s.features.has(i)&&t.push(i)&&!0;o("chromium-experimental-timestamp-query-inside-passes")||o("timestamp-query"),o("shader-f16"),o("subgroups"),this.device=await s.requestDevice(r),this.adapterInfo=new Jd(s.info||await s.requestAdapterInfo()),this.gpuDataManager=us(this),this.programManager=new Hd(this),this.kernels=new Map,this.kernelPersistentData=new Map,this.kernelCustomData=new Map,gt(e.logLevel,!!e.debug),this.device.onuncapturederror=i=>{i.error instanceof GPUValidationError&&console.error(`An uncaught WebGPU validation error was raised: ${i.error.message}`)},Object.defineProperty(this.env.webgpu,"device",{value:this.device,writable:!1,enumerable:!0,configurable:!1}),Object.defineProperty(this.env.webgpu,"adapter",{value:s,writable:!1,enumerable:!0,configurable:!1}),this.setQueryType()}dispose(){typeof this.querySet<"u"&&this.querySet.destroy(),this.gpuDataManager.dispose()}getCommandEncoder(){return this.commandEncoder||(this.commandEncoder=this.device.createCommandEncoder()),this.commandEncoder}getComputePassEncoder(){if(!this.computePassEncoder){let e=this.getCommandEncoder(),s={};this.queryType==="at-passes"&&(s.timestampWrites={querySet:this.querySet,beginningOfPassWriteIndex:this.pendingDispatchNumber*2,endOfPassWriteIndex:this.pendingDispatchNumber*2+1}),this.computePassEncoder=e.beginComputePass(s)}return this.computePassEncoder}endComputePass(){this.computePassEncoder&&(this.computePassEncoder.end(),this.computePassEncoder=null)}flush(){if(!this.commandEncoder)return;Fe(),this.endComputePass();let e;this.queryType!=="none"&&(this.commandEncoder.resolveQuerySet(this.querySet,0,this.pendingDispatchNumber*2,this.queryResolveBuffer,0),e=this.device.createBuffer({size:this.pendingDispatchNumber*2*8,usage:GPUBufferUsage.MAP_READ|GPUBufferUsage.COPY_DST}),this.pendingQueries.set(e,this.pendingKernels),this.pendingKernels=[],this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer,0,e,0,this.pendingDispatchNumber*2*8)),this.device.queue.submit([this.commandEncoder.finish()]),this.gpuDataManager.refreshPendingBuffers(),this.commandEncoder=null,this.pendingDispatchNumber=0,this.queryType!=="none"&&e.mapAsync(GPUMapMode.READ).then(()=>{let s=new BigUint64Array(e.getMappedRange()),t=this.pendingQueries.get(e);for(let r=0;r<s.length/2;r++){let o=t[r],i=o.kernelId,a=this.kernels.get(i),l=a.kernelType,d=a.kernelName,u=o.programName,p=o.inputTensorViews,w=o.outputTensorViews,v=s[r*2],P=s[r*2+1];typeof this.queryTimeBase>"u"&&(this.queryTimeBase=v);let C=Number(v-this.queryTimeBase),A=Number(P-this.queryTimeBase);if(!Number.isSafeInteger(C)||!Number.isSafeInteger(A))throw new RangeError("incorrect timestamp range");if(this.env.webgpu.profiling?.ondata)this.env.webgpu.profiling.ondata({version:1,inputsMetadata:p.map(H=>({dims:H.dims,dataType:ks(H.dataType)})),outputsMetadata:w.map(H=>({dims:H.dims,dataType:ks(H.dataType)})),kernelId:i,kernelType:l,kernelName:d,programName:u,startTime:C,endTime:A});else{let H="";p.forEach((k,se)=>{H+=`input[${se}]: [${k.dims}] | ${ks(k.dataType)}, `});let z="";w.forEach((k,se)=>{z+=`output[${se}]: [${k.dims}] | ${ks(k.dataType)}, `}),console.log(`[profiling] kernel "${i}|${l}|${d}|${u}" ${H}${z}execution time: ${A-C} ns`)}j("GPU",`${u}::${v}::${P}`)}e.unmap(),this.pendingQueries.delete(e)}),Oe()}run(e,s,t,r,o,i){Fe(e.name);let a=[];for(let k=0;k<s.length;++k){let se=s[k].data;if(se===0)continue;let Q=this.gpuDataManager.get(se);if(!Q)throw new Error(`no GPU data for input: ${se}`);a.push(Q)}let{outputs:l,dispatchGroup:d,programUniforms:u}=e.getRunData(s),p=t.length===0?l.map((k,se)=>se):t;if(p.length!==l.length)throw new Error(`Output size ${p.length} must be equal to ${l.length}.`);let w=[],v=[];for(let k=0;k<l.length;++k){if(!Number.isInteger(p[k])||p[k]<-3||p[k]>=i)throw new Error(`Invalid output index: ${p[k]}`);if(p[k]===-3)continue;let se=p[k]===-1,Q=p[k]===-2,ce=se||Q?o(l[k].dataType,l[k].dims):r(p[k],l[k].dataType,l[k].dims);if(w.push(ce),ce.data===0)continue;let ye=this.gpuDataManager.get(ce.data);if(!ye)throw new Error(`no GPU data for output: ${ce.data}`);if(se&&this.temporaryData.push(ye),Q){let ge=this.kernelPersistentData.get(this.currentKernelId);ge||(ge=[],this.kernelPersistentData.set(this.currentKernelId,ge)),ge.push(ye)}v.push(ye)}if(a.length!==s.length||v.length!==w.length){if(v.length===0)return Oe(e.name),w;throw new Error(`Program ${e.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`)}let P;if(u){let k=0,se=[];u.forEach(ge=>{let Ie=typeof ge.data=="number"?[ge.data]:ge.data;if(Ie.length===0)return;let Ae=ge.type===10?2:4,Je,ht;ge.type===10?(ht=Ie.length>4?16:Ie.length>2?8:Ie.length*Ae,Je=Ie.length>4?16:Ae*Ie.length):(ht=Ie.length<=2?Ie.length*Ae:16,Je=16),k=Math.ceil(k/ht)*ht,se.push(k);let vt=ge.type===10?8:4;k+=Ie.length>4?Math.ceil(Ie.length/vt)*Je:Ie.length*Ae});let Q=16;k=Math.ceil(k/Q)*Q;let ce=new ArrayBuffer(k);u.forEach((ge,Ie)=>{let Ae=se[Ie],Je=typeof ge.data=="number"?[ge.data]:ge.data;if(ge.type===6)new Int32Array(ce,Ae,Je.length).set(Je);else if(ge.type===12)new Uint32Array(ce,Ae,Je.length).set(Je);else if(ge.type===10)new Uint16Array(ce,Ae,Je.length).set(Je);else if(ge.type===1)new Float32Array(ce,Ae,Je.length).set(Je);else throw new Error(`Unsupported uniform type: ${ks(ge.type)}`)});let ye=this.gpuDataManager.create(k,GPUBufferUsage.COPY_DST|GPUBufferUsage.UNIFORM);this.device.queue.writeBuffer(ye.buffer,0,ce,0,k),this.gpuDataManager.release(ye.id),P={offset:0,size:k,buffer:ye.buffer}}let C=this.programManager.normalizeDispatchGroupSize(d),A=C[1]===1&&C[2]===1,H=Xd(e,s,A),z=this.programManager.getArtifact(H);if(z||(z=this.programManager.build(e,C),this.programManager.setArtifact(H,z),Ot("info",()=>`[artifact] key: ${H}, programName: ${e.name}`)),u&&z.uniformVariablesInfo){if(u.length!==z.uniformVariablesInfo.length)throw new Error(`Uniform variables count mismatch: expect ${z.uniformVariablesInfo.length}, got ${u.length} in program "${z.programInfo.name}".`);for(let k=0;k<u.length;k++){let se=u[k],Q=se.type,ce=typeof se.data=="number"?1:se.data.length,[ye,ge]=z.uniformVariablesInfo[k];if(Q!==ye||ce!==ge)throw new Error(`Uniform variable ${k} mismatch: expect type ${ye} with size ${ge}, got type ${Q} with size ${ce} in program "${z.programInfo.name}".`)}}if(Ot("info",()=>`[ProgramManager] run "${e.name}" (key=${H}) with ${C[0]}x${C[1]}x${C[2]}`),this.queryType!=="none"||this.sessionStatus==="capturing"){let k={kernelId:this.currentKernelId,programName:z.programInfo.name,inputTensorViews:s,outputTensorViews:w};this.pendingKernels.push(k),this.sessionStatus==="capturing"&&this.capturedPendingKernels.get(this.currentSessionId).push(k)}return this.programManager.run(z,a,v,C,P),Oe(e.name),w}upload(e,s){this.gpuDataManager.upload(e,s)}memcpy(e,s){this.gpuDataManager.memcpy(e,s)}async download(e,s){await this.gpuDataManager.download(e,s)}alloc(e){return this.gpuDataManager.create(e).id}free(e){return this.gpuDataManager.release(e)}createKernel(e,s,t,r){let o=Kd.get(e);if(!o)throw new Error(`kernel not implemented: ${e}`);let i={kernelType:e,kernelName:r,kernelEntry:o[0],attributes:[o[1],t]};this.kernels.set(s,i)}releaseKernel(e){let s=this.kernelPersistentData.get(e);if(s){for(let t of s)this.gpuDataManager.release(t.id);this.kernelPersistentData.delete(e)}this.kernelCustomData.delete(e),this.kernels.delete(e)}computeKernel(e,s,t){let r=this.kernels.get(e);if(!r)throw new Error(`kernel not created: ${e}`);let o=r.kernelType,i=r.kernelName,a=r.kernelEntry,l=r.attributes;if(this.currentKernelId!==null)throw new Error(`kernel "[${o}] ${i}" is not allowed to be called recursively`);this.currentKernelId=e,l[0]&&(l[1]=l[0](l[1]),l[0]=void 0),Ot("info",()=>`[WebGPU] Start to run kernel "[${o}] ${i}"...`);let d=this.env.debug;this.temporaryData=[];try{return d&&this.device.pushErrorScope("validation"),a(s,l[1]),0}catch(u){return t.push(Promise.resolve(`[WebGPU] Kernel "[${o}] ${i}" failed. ${u}`)),1}finally{d&&t.push(this.device.popErrorScope().then(u=>u?`GPU validation error for kernel "[${o}] ${i}": ${u.message}`:null));for(let u of this.temporaryData)this.gpuDataManager.release(u.id);this.temporaryData=[],this.currentKernelId=null}}registerBuffer(e,s,t,r){let o=this.sessionExternalDataMapping.get(e);o||(o=new Map,this.sessionExternalDataMapping.set(e,o));let i=o.get(s),a=this.gpuDataManager.registerExternalBuffer(t,r,i);return o.set(s,[a,t]),a}unregisterBuffers(e){let s=this.sessionExternalDataMapping.get(e);s&&(s.forEach(t=>this.gpuDataManager.unregisterExternalBuffer(t[0])),this.sessionExternalDataMapping.delete(e))}getBuffer(e){let s=this.gpuDataManager.get(e);if(!s)throw new Error(`no GPU data for buffer: ${e}`);return s.buffer}createDownloader(e,s,t){return async()=>{let r=await ys(this,e,s);return ae(r.buffer,t)}}writeTimestamp(e){this.queryType==="inside-passes"&&this.computePassEncoder.writeTimestamp(this.querySet,e)}setQueryType(){this.queryType="none",(this.env.webgpu.profiling?.mode==="default"||(typeof this.env.trace>"u"?this.env.wasm.trace:this.env.trace))&&(this.device.features.has("chromium-experimental-timestamp-query-inside-passes")?this.queryType="inside-passes":this.device.features.has("timestamp-query")&&(this.queryType="at-passes"),this.queryType!=="none"&&typeof this.querySet>"u"&&(this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxDispatchNumber*2}),this.queryResolveBuffer=this.device.createBuffer({size:this.maxDispatchNumber*2*8,usage:GPUBufferUsage.COPY_SRC|GPUBufferUsage.QUERY_RESOLVE})))}captureBegin(){Ot("info","captureBegin"),this.capturedCommandList.get(this.currentSessionId)||this.capturedCommandList.set(this.currentSessionId,[]),this.capturedPendingKernels.get(this.currentSessionId)||this.capturedPendingKernels.set(this.currentSessionId,[]),this.flush(),this.sessionStatus="capturing"}captureEnd(){Ot("info","captureEnd"),this.flush(),this.sessionStatus="default"}replay(){Ot("info","replay"),this.sessionStatus="replaying";let e=this.capturedCommandList.get(this.currentSessionId),s=this.capturedPendingKernels.get(this.currentSessionId),t=e.length;this.pendingKernels=[];for(let r=0;r<t;r++){let o=this.getComputePassEncoder(),i=e[r];this.writeTimestamp(this.pendingDispatchNumber*2),o.setPipeline(i.computePipeline),o.setBindGroup(0,i.bindGroup),o.dispatchWorkgroups(...i.dispatchGroup),this.writeTimestamp(this.pendingDispatchNumber*2+1),this.pendingDispatchNumber++,this.queryType!=="none"&&this.pendingKernels.push(s[r]),(this.pendingDispatchNumber>=this.maxDispatchNumber||this.queryType==="at-passes")&&this.endComputePass(),this.pendingDispatchNumber>=this.maxDispatchNumber&&this.flush()}this.flush(),this.sessionStatus="default"}onCreateSession(){this.gpuDataManager.onCreateSession()}onReleaseSession(e){this.unregisterBuffers(e),this.capturedCommandList.has(e)&&this.capturedCommandList.delete(e),this.capturedPendingKernels.has(e)&&this.capturedPendingKernels.delete(e),this.gpuDataManager.onReleaseSession(e)}onRunStart(e){this.currentSessionId=e,this.setQueryType()}}}),Zd={};I(Zd,{init:()=>eu});var Un,np,eu,op=f(()=>{xt(),Cs(),B(),zr(),Un=class Gp{constructor(s,t,r,o){this.module=s,this.dataType=t,this.data=r,this.dims=o}getFloat32Array(){if(this.dataType!==1)throw new Error("Invalid data type");let s=Se.size(this.dims);return s===0?new Float32Array:new Float32Array(this.module.HEAP8.buffer,this.data,s)}getBigInt64Array(){if(this.dataType!==7)throw new Error("Invalid data type");let s=Se.size(this.dims);return s===0?new BigInt64Array:new BigInt64Array(this.module.HEAP8.buffer,this.data,s)}getInt32Array(){if(this.dataType!==6)throw new Error("Invalid data type");let s=Se.size(this.dims);return s===0?new Int32Array:new Int32Array(this.module.HEAP8.buffer,this.data,s)}getUint16Array(){if(this.dataType!==10&&this.dataType!==4)throw new Error("Invalid data type");let s=Se.size(this.dims);return s===0?new Uint16Array:new Uint16Array(this.module.HEAP8.buffer,this.data,s)}reshape(s){if(Se.size(s)!==Se.size(this.dims))throw new Error("Invalid new shape");return new Gp(this.module,this.dataType,this.data,s)}},np=class{constructor(e,s,t){this.module=e,this.backend=s,this.customDataOffset=0,this.customDataSize=0,this.adapterInfo=s.adapterInfo;let r=e.PTR_SIZE,o=t/e.PTR_SIZE,i=r===4?"i32":"i64";this.opKernelContext=Number(e.getValue(r*o++,i));let a=Number(e.getValue(r*o++,i));this.outputCount=Number(e.getValue(r*o++,i)),this.customDataOffset=Number(e.getValue(r*o++,"*")),this.customDataSize=Number(e.getValue(r*o++,i));let l=[];for(let d=0;d<a;d++){let u=Number(e.getValue(r*o++,i)),p=Number(e.getValue(r*o++,"*")),w=Number(e.getValue(r*o++,i)),v=[];for(let P=0;P<w;P++)v.push(Number(e.getValue(r*o++,i)));l.push(new Un(e,u,p,v))}this.inputs=l}get kernelCustomData(){return this.backend.currentKernelCustomData}get customDataBuffer(){return this.module.HEAPU8.subarray(this.customDataOffset,this.customDataOffset+this.customDataSize)}compute(e,s){let t=s?.inputs?.map(a=>typeof a=="number"?this.inputs[a]:a)??this.inputs,r=s?.outputs??[],o=(a,l,d)=>new Un(this.module,l,this.output(a,d),d),i=(a,l)=>{let d=Os(a,l);if(!d)throw new Error(`Unsupported data type: ${a}`);let u=d>0?this.backend.gpuDataManager.create(d).id:0;return new Un(this.module,a,u,l)};return this.backend.run(e,t,r,o,i,this.outputCount)}output(e,s){let t=this.module.stackSave();try{let r=this.module.PTR_SIZE,o=r===4?"i32":"i64",i=this.module.stackAlloc((1+s.length)*r);this.module.setValue(i,s.length,o);for(let a=0;a<s.length;a++)this.module.setValue(i+r*(a+1),s[a],o);return this.module._JsepOutput(this.opKernelContext,e,i)}catch(r){throw new Error(`Failed to generate kernel's output[${e}] with dims [${s}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${r}`)}finally{this.module.stackRestore(t)}}},eu=async(e,s,t,r)=>{let o=s.jsepInit;if(!o)throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");if(e==="webgpu"){let i=(rp(),y(qd)).WebGpuBackend,a=new i;await a.initialize(t,r),o("webgpu",[a,l=>a.alloc(Number(l)),l=>a.free(l),(l,d,u,p=!1)=>{if(p)Ot("verbose",()=>`[WebGPU] jsepCopyGpuToGpu: src=${Number(l)}, dst=${Number(d)}, size=${Number(u)}`),a.memcpy(Number(l),Number(d));else{Ot("verbose",()=>`[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(l)}, gpuDataId=${Number(d)}, size=${Number(u)}`);let w=s.HEAPU8.subarray(Number(l>>>0),Number(l>>>0)+Number(u));a.upload(Number(d),w)}},async(l,d,u)=>{Ot("verbose",()=>`[WebGPU] jsepCopyGpuToCpu: gpuDataId=${l}, dataOffset=${d}, size=${u}`),await a.download(Number(l),()=>s.HEAPU8.subarray(Number(d)>>>0,Number(d+u)>>>0))},(l,d,u)=>a.createKernel(l,Number(d),u,s.UTF8ToString(s._JsepGetNodeName(Number(d)))),l=>a.releaseKernel(l),(l,d,u,p)=>{Ot("verbose",()=>`[WebGPU] jsepRun: sessionHandle=${u}, kernel=${l}, contextDataOffset=${d}`);let w=new np(s,a,Number(d));return a.computeKernel(Number(l),w,p)},()=>a.captureBegin(),()=>a.captureEnd(),()=>a.replay()])}else{let i=new Ws(t);o("webnn",[i,()=>i.reserveTensorId(),a=>i.releaseTensorId(a),async(a,l,d,u,p)=>i.ensureTensor(a,l,d,u,p),(a,l)=>{i.uploadTensor(a,l)},async(a,l)=>i.downloadTensor(a,l)])}}}),tu,zi,Bi,wr,ip,Ri,ji,su,ru,nu,ou,iu,au,ap=f(()=>{Qt(),xr(),xt(),ut(),Nt(),mr(),tu=(e,s)=>{Ce()._OrtInit(e,s)!==0&&_t("Can't initialize onnxruntime.")},zi=async e=>{tu(e.wasm.numThreads,Rs(e.logLevel))},Bi=async(e,s)=>{Ce().asyncInit?.();{let t=(op(),y(Zd)).init;if(s==="webgpu"){if(typeof navigator>"u"||!navigator.gpu)throw new Error("WebGPU is not supported in current environment");let r=e.webgpu.adapter;if(r){if(typeof r.limits!="object"||typeof r.features!="object"||typeof r.requestDevice!="function")throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.")}else{let o=e.webgpu.powerPreference;if(o!==void 0&&o!=="low-power"&&o!=="high-performance")throw new Error(`Invalid powerPreference setting: "${o}"`);let i=e.webgpu.forceFallbackAdapter;if(i!==void 0&&typeof i!="boolean")throw new Error(`Invalid forceFallbackAdapter setting: "${i}"`);if(r=await navigator.gpu.requestAdapter({powerPreference:o,forceFallbackAdapter:i}),!r)throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.')}await t("webgpu",Ce(),e,r)}if(s==="webnn"){if(typeof navigator>"u"||!navigator.ml)throw new Error("WebNN is not supported in current environment");await t("webnn",Ce(),e)}}},wr=new Map,ip=e=>{let s=Ce(),t=s.stackSave();try{let r=s.PTR_SIZE,o=s.stackAlloc(2*r);s._OrtGetInputOutputCount(e,o,o+r)!==0&&_t("Can't get session input/output count.");let i=r===4?"i32":"i64";return[Number(s.getValue(o,i)),Number(s.getValue(o+r,i))]}finally{s.stackRestore(t)}},Ri=(e,s)=>{let t=Ce(),r=t.stackSave(),o=0;try{let i=t.PTR_SIZE,a=t.stackAlloc(2*i);t._OrtGetInputOutputMetadata(e,s,a,a+i)!==0&&_t("Can't get session input/output metadata.");let l=Number(t.getValue(a,"*"));o=Number(t.getValue(a+i,"*"));let d=t.HEAP32[o/4];if(d===0)return[l,0];let u=t.HEAPU32[o/4+1],p=[];for(let w=0;w<u;w++){let v=Number(t.getValue(o+8+w*i,"*"));p.push(v!==0?t.UTF8ToString(v):Number(t.getValue(o+8+(w+u)*i,"*")))}return[l,d,p]}finally{t.stackRestore(r),o!==0&&t._OrtFree(o)}},ji=e=>{let s=Ce(),t=s._malloc(e.byteLength);if(t===0)throw new Error(`Can't create a session. failed to allocate a buffer of size ${e.byteLength}.`);return s.HEAPU8.set(e,t),[t,e.byteLength]},su=async(e,s)=>{let t,r,o=Ce();Array.isArray(e)?[t,r]=e:e.buffer===o.HEAPU8.buffer?[t,r]=[e.byteOffset,e.byteLength]:[t,r]=ji(e);let i=0,a=0,l=0,d=[],u=[],p=[];try{if([a,d]=await pr(s),s?.externalData&&o.mountExternalData){let Q=[];for(let ce of s.externalData){let ye=typeof ce=="string"?ce:ce.path;Q.push(js(typeof ce=="string"?ce:ce.data).then(ge=>{o.mountExternalData(ye,ge)}))}await Promise.all(Q)}for(let Q of s?.executionProviders??[])if((typeof Q=="string"?Q:Q.name)==="webnn"){if(o.shouldTransferToMLTensor=!1,typeof Q!="string"){let ce=Q,ye=ce?.context,ge=ce?.gpuDevice,Ie=ce?.deviceType,Ae=ce?.powerPreference;ye?o.currentContext=ye:ge?o.currentContext=await o.webnnCreateMLContext(ge):o.currentContext=await o.webnnCreateMLContext({deviceType:Ie,powerPreference:Ae})}else o.currentContext=await o.webnnCreateMLContext();break}i=await o._OrtCreateSession(t,r,a),o.webgpuOnCreateSession?.(i),i===0&&_t("Can't create a session."),o.jsepOnCreateSession?.(),o.currentContext&&(o.webnnRegisterMLContext(i,o.currentContext),o.currentContext=void 0,o.shouldTransferToMLTensor=!0);let[w,v]=ip(i),P=!!s?.enableGraphCapture,C=[],A=[],H=[],z=[],k=[];for(let Q=0;Q<w;Q++){let[ce,ye,ge]=Ri(i,Q);ce===0&&_t("Can't get an input name."),u.push(ce);let Ie=o.UTF8ToString(ce);C.push(Ie),H.push(ye===0?{name:Ie,isTensor:!1}:{name:Ie,isTensor:!0,type:ks(ye),shape:ge})}for(let Q=0;Q<v;Q++){let[ce,ye,ge]=Ri(i,Q+w);ce===0&&_t("Can't get an output name."),p.push(ce);let Ie=o.UTF8ToString(ce);A.push(Ie),z.push(ye===0?{name:Ie,isTensor:!1}:{name:Ie,isTensor:!0,type:ks(ye),shape:ge});{if(P&&s?.preferredOutputLocation===void 0){k.push("gpu-buffer");continue}let Ae=typeof s?.preferredOutputLocation=="string"?s.preferredOutputLocation:s?.preferredOutputLocation?.[Ie]??"cpu";if(Ae!=="cpu"&&Ae!=="cpu-pinned"&&Ae!=="gpu-buffer"&&Ae!=="ml-tensor")throw new Error(`Not supported preferred output location: ${Ae}.`);if(P&&Ae!=="gpu-buffer")throw new Error(`Not supported preferred output location: ${Ae}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);k.push(Ae)}}let se=null;return k.some(Q=>Q==="gpu-buffer"||Q==="ml-tensor")&&(l=o._OrtCreateBinding(i),l===0&&_t("Can't create IO binding."),se={handle:l,outputPreferredLocations:k,outputPreferredLocationsEncoded:k.map(Q=>hr(Q))}),wr.set(i,[i,u,p,se,P,!1]),[i,C,A,H,z]}catch(w){throw u.forEach(v=>o._OrtFree(v)),p.forEach(v=>o._OrtFree(v)),l!==0&&o._OrtReleaseBinding(l)!==0&&_t("Can't release IO binding."),i!==0&&o._OrtReleaseSession(i)!==0&&_t("Can't release session."),w}finally{o._free(t),a!==0&&o._OrtReleaseSessionOptions(a)!==0&&_t("Can't release session options."),d.forEach(w=>o._free(w)),o.unmountExternalData?.()}},ru=e=>{let s=Ce(),t=wr.get(e);if(!t)throw new Error(`cannot release session. invalid session id: ${e}`);let[r,o,i,a,l]=t;a&&(l&&s._OrtClearBoundOutputs(a.handle)!==0&&_t("Can't clear bound outputs."),s._OrtReleaseBinding(a.handle)!==0&&_t("Can't release IO binding.")),s.jsepOnReleaseSession?.(e),s.webnnOnReleaseSession?.(e),s.webgpuOnReleaseSession?.(e),o.forEach(d=>s._OrtFree(d)),i.forEach(d=>s._OrtFree(d)),s._OrtReleaseSession(r)!==0&&_t("Can't release session."),wr.delete(e)},nu=async(e,s,t,r,o,i,a=!1)=>{if(!e){s.push(0);return}let l=Ce(),d=l.PTR_SIZE,u=e[0],p=e[1],w=e[3],v=w,P,C;if(u==="string"&&(w==="gpu-buffer"||w==="ml-tensor"))throw new Error("String tensor is not supported on GPU.");if(a&&w!=="gpu-buffer")throw new Error(`External buffer must be provided for input/output index ${i} when enableGraphCapture is true.`);if(w==="gpu-buffer"){let z=e[2].gpuBuffer;C=Os(Ds(u),p);{let k=l.jsepRegisterBuffer;if(!k)throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');P=k(r,i,z,C)}}else if(w==="ml-tensor"){let z=e[2].mlTensor;C=Os(Ds(u),p);let k=l.webnnRegisterMLTensor;if(!k)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');P=k(r,z,Ds(u),p)}else{let z=e[2];if(Array.isArray(z)){C=d*z.length,P=l._malloc(C),t.push(P);for(let k=0;k<z.length;k++){if(typeof z[k]!="string")throw new TypeError(`tensor data at index ${k} is not a string`);l.setValue(P+k*d,mt(z[k],t),"*")}}else{let k=l.webnnIsGraphInput;if(u!=="string"&&k){let se=l.UTF8ToString(o);if(k(r,se)){let Q=Ds(u);C=Os(Q,p),v="ml-tensor";let ce=l.webnnCreateTemporaryTensor,ye=l.webnnUploadTensor;if(!ce||!ye)throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');let ge=await ce(r,Q,p);ye(ge,new Uint8Array(z.buffer,z.byteOffset,z.byteLength)),P=ge}else C=z.byteLength,P=l._malloc(C),t.push(P),l.HEAPU8.set(new Uint8Array(z.buffer,z.byteOffset,C),P)}else C=z.byteLength,P=l._malloc(C),t.push(P),l.HEAPU8.set(new Uint8Array(z.buffer,z.byteOffset,C),P)}}let A=l.stackSave(),H=l.stackAlloc(4*p.length);try{p.forEach((k,se)=>l.setValue(H+se*d,k,d===4?"i32":"i64"));let z=l._OrtCreateTensor(Ds(u),P,C,H,p.length,hr(v));z===0&&_t(`Can't create tensor for input/output. session=${r}, index=${i}.`),s.push(z)}finally{l.stackRestore(A)}},ou=async(e,s,t,r,o,i)=>{let a=Ce(),l=a.PTR_SIZE,d=wr.get(e);if(!d)throw new Error(`cannot run inference. invalid session id: ${e}`);let u=d[0],p=d[1],w=d[2],v=d[3],P=d[4],C=d[5],A=s.length,H=r.length,z=0,k=[],se=[],Q=[],ce=[],ye=a.stackSave(),ge=a.stackAlloc(A*l),Ie=a.stackAlloc(A*l),Ae=a.stackAlloc(H*l),Je=a.stackAlloc(H*l);try{[z,k]=ts(i);for(let Xe=0;Xe<A;Xe++)await nu(t[Xe],se,ce,e,p[s[Xe]],s[Xe],P);for(let Xe=0;Xe<H;Xe++)await nu(o[Xe],Q,ce,e,w[r[Xe]],A+r[Xe],P);for(let Xe=0;Xe<A;Xe++)a.setValue(ge+Xe*l,se[Xe],"*"),a.setValue(Ie+Xe*l,p[s[Xe]],"*");for(let Xe=0;Xe<H;Xe++)a.setValue(Ae+Xe*l,Q[Xe],"*"),a.setValue(Je+Xe*l,w[r[Xe]],"*");if(v&&!C){let{handle:Xe,outputPreferredLocations:kt,outputPreferredLocationsEncoded:Bt}=v;if(p.length!==A)throw new Error(`input count from feeds (${A}) is expected to be always equal to model's input count (${p.length}).`);for(let rt=0;rt<A;rt++){let Pt=s[rt];await a._OrtBindInput(Xe,p[Pt],se[rt])!==0&&_t(`Can't bind input[${rt}] for session=${e}.`)}for(let rt=0;rt<H;rt++){let Pt=r[rt];o[rt]?.[3]?a._OrtBindOutput(Xe,w[Pt],Q[rt],0)!==0&&_t(`Can't bind pre-allocated output[${rt}] for session=${e}.`):a._OrtBindOutput(Xe,w[Pt],0,Bt[Pt])!==0&&_t(`Can't bind output[${rt}] to ${kt[rt]} for session=${e}.`)}wr.set(e,[u,p,w,v,P,!0])}a.jsepOnRunStart?.(u),a.webnnOnRunStart?.(u);let ht;v?ht=await a._OrtRunWithBinding(u,v.handle,H,Ae,z):ht=await a._OrtRun(u,Ie,ge,A,Je,H,Ae,z),ht!==0&&_t("failed to call OrtRun().");let vt=[];for(let Xe=0;Xe<H;Xe++){let kt=Number(a.getValue(Ae+Xe*l,"*"));if(kt===Q[Xe]){vt.push(o[Xe]);continue}let Bt=a.stackSave(),rt=a.stackAlloc(4*l),Pt=!1,Lt,Et=0;try{a._OrtGetTensorData(kt,rt,rt+l,rt+2*l,rt+3*l)!==0&&_t(`Can't access output tensor data on index ${Xe}.`);let Rt=l===4?"i32":"i64",Ve=Number(a.getValue(rt,Rt));Et=a.getValue(rt+l,"*");let it=a.getValue(rt+l*2,"*"),$t=Number(a.getValue(rt+l*3,Rt)),jt=[];for(let vs=0;vs<$t;vs++)jt.push(Number(a.getValue(it+vs*l,Rt)));a._OrtFree(it)!==0&&_t("Can't free memory for tensor dims.");let hs=jt.reduce((vs,ls)=>vs*ls,1);Lt=ks(Ve);let Or=v?.outputPreferredLocations[r[Xe]];if(Lt==="string"){if(Or==="gpu-buffer"||Or==="ml-tensor")throw new Error("String tensor is not supported on GPU.");let vs=[];for(let ls=0;ls<hs;ls++){let Kr=a.getValue(Et+ls*l,"*"),du=a.getValue(Et+(ls+1)*l,"*"),Wi=ls===hs-1?void 0:du-Kr;vs.push(a.UTF8ToString(Kr,Wi))}vt.push([Lt,jt,vs,"cpu"])}else if(Or==="gpu-buffer"&&hs>0){let vs=a.jsepGetBuffer;if(!vs)throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');let ls=vs(Et),Kr=Os(Ve,hs);if(Kr===void 0||!Vs(Lt))throw new Error(`Unsupported data type: ${Lt}`);Pt=!0,vt.push([Lt,jt,{gpuBuffer:ls,download:a.jsepCreateDownloader(ls,Kr,Lt),dispose:()=>{a._OrtReleaseTensor(kt)!==0&&_t("Can't release tensor.")}},"gpu-buffer"])}else if(Or==="ml-tensor"&&hs>0){let vs=a.webnnEnsureTensor,ls=a.webnnIsInt64Supported;if(!vs||!ls)throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');if(Os(Ve,hs)===void 0||!ir(Lt))throw new Error(`Unsupported data type: ${Lt}`);if(Lt==="int64"&&!ls(e))throw new Error('preferredLocation "ml-tensor" for int64 output is not supported by current WebNN Context.');let Kr=await vs(e,Et,Ve,jt,!1);Pt=!0,vt.push([Lt,jt,{mlTensor:Kr,download:a.webnnCreateMLTensorDownloader(Et,Lt),dispose:()=>{a.webnnReleaseTensorId(Et),a._OrtReleaseTensor(kt)}},"ml-tensor"])}else{let vs=Bs(Lt),ls=new vs(hs);new Uint8Array(ls.buffer,ls.byteOffset,ls.byteLength).set(a.HEAPU8.subarray(Et,Et+ls.byteLength)),vt.push([Lt,jt,ls,"cpu"])}}finally{a.stackRestore(Bt),Lt==="string"&&Et&&a._free(Et),Pt||a._OrtReleaseTensor(kt),a.webnnOnRunEnd?.(u)}}return v&&!P&&(a._OrtClearBoundOutputs(v.handle)!==0&&_t("Can't clear bound outputs."),wr.set(e,[u,p,w,v,P,!1])),vt}finally{a.stackRestore(ye),se.forEach(ht=>a._OrtReleaseTensor(ht)),Q.forEach(ht=>a._OrtReleaseTensor(ht)),ce.forEach(ht=>a._free(ht)),z!==0&&a._OrtReleaseRunOptions(z),k.forEach(ht=>a._free(ht))}},iu=e=>{let s=Ce(),t=wr.get(e);if(!t)throw new Error("invalid session id");let r=t[0],o=s._OrtEndProfiling(r);o===0&&_t("Can't get an profile file name."),s._OrtFree(o)},au=e=>{let s=[];for(let t of e){let r=t[2];!Array.isArray(r)&&"buffer"in r&&s.push(r.buffer)}return s}}),Dr,Qs,dn,Wn,Gn,Ni,lu,Vi,Ur,Wr,lp,cp,dp,up,pp,hp,mp,_p,fp=f(()=>{at(),ap(),ut(),ur(),Dr=()=>!!E.wasm.proxy&&typeof document<"u",dn=!1,Wn=!1,Gn=!1,Vi=new Map,Ur=(e,s)=>{let t=Vi.get(e);t?t.push(s):Vi.set(e,[s])},Wr=()=>{if(dn||!Wn||Gn||!Qs)throw new Error("worker not ready")},lp=e=>{switch(e.data.type){case"init-wasm":dn=!1,e.data.err?(Gn=!0,lu[1](e.data.err)):(Wn=!0,lu[0]()),Ni&&(URL.revokeObjectURL(Ni),Ni=void 0);break;case"init-ep":case"copy-from":case"create":case"release":case"run":case"end-profiling":{let s=Vi.get(e.data.type);e.data.err?s.shift()[1](e.data.err):s.shift()[0](e.data.out);break}}},cp=async()=>{if(!Wn){if(dn)throw new Error("multiple calls to 'initWasm()' detected.");if(Gn)throw new Error("previous call to 'initWasm()' failed.");if(dn=!0,Dr())return new Promise((e,s)=>{Qs?.terminate(),Xs().then(([t,r])=>{try{Qs=r,Qs.onerror=i=>s(i),Qs.onmessage=lp,lu=[e,s];let o={type:"init-wasm",in:E};if(!o.in.wasm.wasmPaths&&t){let i=Ss();i&&(o.in.wasm.wasmPaths=i)}Qs.postMessage(o),Ni=t}catch(o){s(o)}},s)});try{await Te(E.wasm),await zi(E),Wn=!0}catch(e){throw Gn=!0,e}finally{dn=!1}}},dp=async e=>{if(Dr())return Wr(),new Promise((s,t)=>{Ur("init-ep",[s,t]);let r={type:"init-ep",in:{epName:e,env:E}};Qs.postMessage(r)});await Bi(E,e)},up=async e=>Dr()?(Wr(),new Promise((s,t)=>{Ur("copy-from",[s,t]);let r={type:"copy-from",in:{buffer:e}};Qs.postMessage(r,[e.buffer])})):ji(e),pp=async(e,s)=>{if(Dr()){if(s?.preferredOutputLocation)throw new Error('session option "preferredOutputLocation" is not supported for proxy.');return Wr(),new Promise((t,r)=>{Ur("create",[t,r]);let o={type:"create",in:{model:e,options:{...s}}},i=[];e instanceof Uint8Array&&i.push(e.buffer),Qs.postMessage(o,i)})}else return su(e,s)},hp=async e=>{if(Dr())return Wr(),new Promise((s,t)=>{Ur("release",[s,t]);let r={type:"release",in:e};Qs.postMessage(r)});ru(e)},mp=async(e,s,t,r,o,i)=>{if(Dr()){if(t.some(a=>a[3]!=="cpu"))throw new Error("input tensor on GPU is not supported for proxy.");if(o.some(a=>a))throw new Error("pre-allocated output tensor is not supported for proxy.");return Wr(),new Promise((a,l)=>{Ur("run",[a,l]);let d=t,u={type:"run",in:{sessionId:e,inputIndices:s,inputs:d,outputIndices:r,options:i}};Qs.postMessage(u,au(d))})}else return ou(e,s,t,r,o,i)},_p=async e=>{if(Dr())return Wr(),new Promise((s,t)=>{Ur("end-profiling",[s,t]);let r={type:"end-profiling",in:e};Qs.postMessage(r)});iu(e)}}),cu,gp,wp,Ip=f(()=>{at(),fp(),xt(),dt(),mr(),cu=(e,s)=>{switch(e.location){case"cpu":return[e.type,e.dims,e.data,"cpu"];case"gpu-buffer":return[e.type,e.dims,{gpuBuffer:e.gpuBuffer},"gpu-buffer"];case"ml-tensor":return[e.type,e.dims,{mlTensor:e.mlTensor},"ml-tensor"];default:throw new Error(`invalid data location: ${e.location} for ${s()}`)}},gp=e=>{switch(e[3]){case"cpu":return new ze(e[0],e[2],e[1]);case"gpu-buffer":{let s=e[0];if(!Vs(s))throw new Error(`not supported data type: ${s} for deserializing GPU tensor`);let{gpuBuffer:t,download:r,dispose:o}=e[2];return ze.fromGpuBuffer(t,{dataType:s,dims:e[1],download:r,dispose:o})}case"ml-tensor":{let s=e[0];if(!ir(s))throw new Error(`not supported data type: ${s} for deserializing MLTensor tensor`);let{mlTensor:t,download:r,dispose:o}=e[2];return ze.fromMLTensor(t,{dataType:s,dims:e[1],download:r,dispose:o})}default:throw new Error(`invalid data location: ${e[3]}`)}},wp=class{async fetchModelAndCopyToWasmMemory(e){return up(await js(e))}async loadModel(e,s){Fe();let t;typeof e=="string"?t=await this.fetchModelAndCopyToWasmMemory(e):t=e,[this.sessionId,this.inputNames,this.outputNames,this.inputMetadata,this.outputMetadata]=await pp(t,s),Oe()}async dispose(){return hp(this.sessionId)}async run(e,s,t){Fe();let r=[],o=[];Object.entries(e).forEach(w=>{let v=w[0],P=w[1],C=this.inputNames.indexOf(v);if(C===-1)throw new Error(`invalid input '${v}'`);r.push(P),o.push(C)});let i=[],a=[];Object.entries(s).forEach(w=>{let v=w[0],P=w[1],C=this.outputNames.indexOf(v);if(C===-1)throw new Error(`invalid output '${v}'`);i.push(P),a.push(C)});let l=r.map((w,v)=>cu(w,()=>`input "${this.inputNames[o[v]]}"`)),d=i.map((w,v)=>w?cu(w,()=>`output "${this.outputNames[a[v]]}"`):null),u=await mp(this.sessionId,o,l,a,d,t),p={};for(let w=0;w<u.length;w++)p[this.outputNames[a[w]]]=i[w]??gp(u[w]);return Oe(),p}startProfiling(){}endProfiling(){_p(this.sessionId)}}}),Mp={};I(Mp,{OnnxruntimeWebAssemblyBackend:()=>Ui,initializeFlags:()=>St,wasmBackend:()=>as});var St,Ui,as,gs=f(()=>{at(),fp(),Ip(),St=()=>{(typeof E.wasm.initTimeout!="number"||E.wasm.initTimeout<0)&&(E.wasm.initTimeout=0);let e=E.wasm.simd;if(typeof e!="boolean"&&e!==void 0&&e!=="fixed"&&e!=="relaxed"&&(console.warn(`Property "env.wasm.simd" is set to unknown value "${e}". Reset it to \`false\` and ignore SIMD feature checking.`),E.wasm.simd=!1),typeof E.wasm.proxy!="boolean"&&(E.wasm.proxy=!1),typeof E.wasm.trace!="boolean"&&(E.wasm.trace=!1),typeof E.wasm.numThreads!="number"||!Number.isInteger(E.wasm.numThreads)||E.wasm.numThreads<=0)if(typeof self<"u"&&!self.crossOriginIsolated)E.wasm.numThreads=1;else{let s=typeof navigator>"u"?S("node:os").cpus().length:navigator.hardwareConcurrency;E.wasm.numThreads=Math.min(4,Math.ceil((s||1)/2))}},Ui=class{async init(e){St(),await cp(),await dp(e)}async createInferenceSessionHandler(e,s){let t=new wp;return await t.loadModel(e,s),t}},as=new Ui}),bs={};I(bs,{InferenceSession:()=>$e,TRACE:()=>j,TRACE_FUNC_BEGIN:()=>Fe,TRACE_FUNC_END:()=>Oe,Tensor:()=>ze,default:()=>Ap,env:()=>E,registerBackend:()=>O}),at(),at(),at();var Gr="1.22.0-dev.20250409-89f8206ba4",Ap=et;{let e=(gs(),y(Mp)).wasmBackend;O("webgpu",e,5),O("webnn",e,5),O("cpu",e,10),O("wasm",e,10)}return Object.defineProperty(E.versions,"web",{value:Gr,enumerable:!0}),y(bs)})();/**
 * @license
 * Copyright 2021 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 *//**
 * @license
 * Copyright 2019 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */re.exports=n})(Rp);var jp=Rp.exports,dh=ch(jp),uh=Kp({__proto__:null,default:dh},[jp]),ph={"onnxruntime-common":re=>{re.exports=lh},"onnxruntime-web":re=>{re.exports=uh},"?2ce3":()=>{},"?7992":()=>{},"?5af5":()=>{},"?2b25":()=>{},"?db59":()=>{},"?383f":()=>{},"?fa4b":()=>{},"./node_modules/@huggingface/jinja/dist/index.js":(re,m,n)=>{n.r(m),n.d(m,{Environment:()=>lt,Interpreter:()=>ft,Template:()=>or,parse:()=>We,tokenize:()=>D});var _=Object.freeze({Text:"Text",NumericLiteral:"NumericLiteral",StringLiteral:"StringLiteral",Identifier:"Identifier",Equals:"Equals",OpenParen:"OpenParen",CloseParen:"CloseParen",OpenStatement:"OpenStatement",CloseStatement:"CloseStatement",OpenExpression:"OpenExpression",CloseExpression:"CloseExpression",OpenSquareBracket:"OpenSquareBracket",CloseSquareBracket:"CloseSquareBracket",OpenCurlyBracket:"OpenCurlyBracket",CloseCurlyBracket:"CloseCurlyBracket",Comma:"Comma",Dot:"Dot",Colon:"Colon",Pipe:"Pipe",CallOperator:"CallOperator",AdditiveBinaryOperator:"AdditiveBinaryOperator",MultiplicativeBinaryOperator:"MultiplicativeBinaryOperator",ComparisonBinaryOperator:"ComparisonBinaryOperator",UnaryOperator:"UnaryOperator",Comment:"Comment"}),b=class{constructor(g,te){this.value=g,this.type=te}};function F(g){return/\w/.test(g)}function q(g){return/[0-9]/.test(g)}var S=[["{%",_.OpenStatement],["%}",_.CloseStatement],["{{",_.OpenExpression],["}}",_.CloseExpression],["(",_.OpenParen],[")",_.CloseParen],["{",_.OpenCurlyBracket],["}",_.CloseCurlyBracket],["[",_.OpenSquareBracket],["]",_.CloseSquareBracket],[",",_.Comma],[".",_.Dot],[":",_.Colon],["|",_.Pipe],["<=",_.ComparisonBinaryOperator],[">=",_.ComparisonBinaryOperator],["==",_.ComparisonBinaryOperator],["!=",_.ComparisonBinaryOperator],["<",_.ComparisonBinaryOperator],[">",_.ComparisonBinaryOperator],["+",_.AdditiveBinaryOperator],["-",_.AdditiveBinaryOperator],["~",_.AdditiveBinaryOperator],["*",_.MultiplicativeBinaryOperator],["/",_.MultiplicativeBinaryOperator],["%",_.MultiplicativeBinaryOperator],["=",_.Equals]],f=new Map([["n",`
`],["t","	"],["r","\r"],["b","\b"],["f","\f"],["v","\v"],["'","'"],['"','"'],["\\","\\"]]);function I(g,te={}){return g.endsWith(`
`)&&(g=g.slice(0,-1)),te.lstrip_blocks&&(g=g.replace(/^[ \t]*({[#%-])/gm,"$1")),te.trim_blocks&&(g=g.replace(/([#%-]})\n/g,"$1")),g.replace(/-%}\s*/g,"%}").replace(/\s*{%-/g,"{%").replace(/-}}\s*/g,"}}").replace(/\s*{{-/g,"{{").replace(/-#}\s*/g,"#}").replace(/\s*{#-/g,"{#").replace(/{%\s*(end)?generation\s*%}/gs,"")}function D(g,te={}){const N=[],ee=I(g,te);let ue=0,Te=0;const Ce=ut=>{let mt="";for(;ut(ee[ue]);){if(ee[ue]==="\\"){if(++ue,ue>=ee.length)throw new SyntaxError("Unexpected end of input");const Ze=ee[ue++],_t=f.get(Ze);if(_t===void 0)throw new SyntaxError(`Unexpected escaped character: ${Ze}`);mt+=_t;continue}if(mt+=ee[ue++],ue>=ee.length)throw new SyntaxError("Unexpected end of input")}return mt};e:for(;ue<ee.length;){const ut=N.at(-1)?.type;if(ut===void 0||ut===_.CloseStatement||ut===_.CloseExpression||ut===_.Comment){let Ze="";for(;ue<ee.length&&!(ee[ue]==="{"&&(ee[ue+1]==="%"||ee[ue+1]==="{"||ee[ue+1]==="#"));)Ze+=ee[ue++];if(Ze.length>0){N.push(new b(Ze,_.Text));continue}}if(ee[ue]==="{"&&ee[ue+1]==="#"){ue+=2;let Ze="";for(;ee[ue]!=="#"||ee[ue+1]!=="}";){if(ue+2>=ee.length)throw new SyntaxError("Missing end of comment tag");Ze+=ee[ue++]}N.push(new b(Ze,_.Comment)),ue+=2;continue}Ce(Ze=>/\s/.test(Ze));const mt=ee[ue];if(mt==="-"||mt==="+"){const Ze=N.at(-1)?.type;if(Ze===_.Text||Ze===void 0)throw new SyntaxError(`Unexpected character: ${mt}`);switch(Ze){case _.Identifier:case _.NumericLiteral:case _.StringLiteral:case _.CloseParen:case _.CloseSquareBracket:break;default:{++ue;const _t=Ce(q);N.push(new b(`${mt}${_t}`,_t.length>0?_.NumericLiteral:_.UnaryOperator));continue}}}for(const[Ze,_t]of S){if(Ze==="}}"&&Te>0)continue;if(ee.slice(ue,ue+Ze.length)===Ze){N.push(new b(Ze,_t)),_t===_.OpenExpression?Te=0:_t===_.OpenCurlyBracket?++Te:_t===_.CloseCurlyBracket&&--Te,ue+=Ze.length;continue e}}if(mt==="'"||mt==='"'){++ue;const Ze=Ce(_t=>_t!==mt);N.push(new b(Ze,_.StringLiteral)),++ue;continue}if(q(mt)){let Ze=Ce(q);if(ee[ue]==="."&&q(ee[ue+1])){++ue;const _t=Ce(q);Ze=`${Ze}.${_t}`}N.push(new b(Ze,_.NumericLiteral));continue}if(F(mt)){const Ze=Ce(F);N.push(new b(Ze,_.Identifier));continue}throw new SyntaxError(`Unexpected character: ${mt}`)}return N}var y=class{type="Statement"},h=class extends y{constructor(g){super(),this.body=g}type="Program"},V=class extends y{constructor(g,te,N){super(),this.test=g,this.body=te,this.alternate=N}type="If"},O=class extends y{constructor(g,te,N,ee){super(),this.loopvar=g,this.iterable=te,this.body=N,this.defaultBlock=ee}type="For"},K=class extends y{type="Break"},me=class extends y{type="Continue"},R=class extends y{constructor(g,te,N){super(),this.assignee=g,this.value=te,this.body=N}type="Set"},G=class extends y{constructor(g,te,N){super(),this.name=g,this.args=te,this.body=N}type="Macro"},X=class extends y{constructor(g){super(),this.value=g}type="Comment"},L=class extends y{type="Expression"},$=class extends L{constructor(g,te,N){super(),this.object=g,this.property=te,this.computed=N}type="MemberExpression"},T=class extends L{constructor(g,te){super(),this.callee=g,this.args=te}type="CallExpression"},x=class extends L{constructor(g){super(),this.value=g}type="Identifier"},E=class extends L{constructor(g){super(),this.value=g}type="Literal"},Y=class extends E{type="IntegerLiteral"},U=class extends E{type="FloatLiteral"},de=class extends E{type="StringLiteral"},oe=class extends E{type="ArrayLiteral"},Z=class extends E{type="TupleLiteral"},he=class extends E{type="ObjectLiteral"},ie=class extends L{constructor(g,te,N){super(),this.operator=g,this.left=te,this.right=N}type="BinaryExpression"},Me=class extends L{constructor(g,te){super(),this.operand=g,this.filter=te}type="FilterExpression"},be=class extends y{constructor(g,te){super(),this.filter=g,this.body=te}type="FilterStatement"},fe=class extends L{constructor(g,te){super(),this.lhs=g,this.test=te}type="SelectExpression"},Re=class extends L{constructor(g,te,N){super(),this.operand=g,this.negate=te,this.test=N}type="TestExpression"},ke=class extends L{constructor(g,te){super(),this.operator=g,this.argument=te}type="UnaryExpression"},le=class extends L{constructor(g=void 0,te=void 0,N=void 0){super(),this.start=g,this.stop=te,this.step=N}type="SliceExpression"},W=class extends L{constructor(g,te){super(),this.key=g,this.value=te}type="KeywordArgumentExpression"},ne=class extends L{constructor(g){super(),this.argument=g}type="SpreadExpression"},_e=class extends y{constructor(g,te,N){super(),this.call=g,this.callerArgs=te,this.body=N}type="CallStatement"},xe=class extends L{constructor(g,te,N){super(),this.condition=g,this.trueExpr=te,this.falseExpr=N}type="Ternary"};function We(g){const te=new h([]);let N=0;function ee(qe,Qe){const gt=g[N++];if(!gt||gt.type!==qe)throw new Error(`Parser Error: ${Qe}. ${gt.type} !== ${qe}.`);return gt}function ue(qe){if(!mt(qe))throw new SyntaxError(`Expected ${qe}`);++N}function Te(){switch(g[N].type){case _.Comment:return new X(g[N++].value);case _.Text:return Ze();case _.OpenStatement:return _t();case _.OpenExpression:return Nt();default:throw new SyntaxError(`Unexpected token type: ${g[N].type}`)}}function Ce(...qe){return N+qe.length<=g.length&&qe.every((Qe,gt)=>Qe===g[N+gt].type)}function ut(...qe){return g[N]?.type===_.OpenStatement&&g[N+1]?.type===_.Identifier&&qe.includes(g[N+1]?.value)}function mt(...qe){return N+qe.length<=g.length&&qe.every((Qe,gt)=>g[N+gt].type==="Identifier"&&Qe===g[N+gt].value)}function Ze(){return new de(ee(_.Text,"Expected text token").value)}function _t(){if(ee(_.OpenStatement,"Expected opening statement token"),g[N].type!==_.Identifier)throw new SyntaxError(`Unknown statement, got ${g[N].type}`);const qe=g[N].value;let Qe;switch(qe){case"set":++N,Qe=ts();break;case"if":++N,Qe=Qt(),ee(_.OpenStatement,"Expected {% token"),ue("endif"),ee(_.CloseStatement,"Expected %} token");break;case"macro":++N,Qe=Fs(),ee(_.OpenStatement,"Expected {% token"),ue("endmacro"),ee(_.CloseStatement,"Expected %} token");break;case"for":++N,Qe=Ts(),ee(_.OpenStatement,"Expected {% token"),ue("endfor"),ee(_.CloseStatement,"Expected %} token");break;case"call":{++N;let gt=null;Ce(_.OpenParen)&&(gt=Vs());const Xt=Is();if(Xt.type!=="Identifier")throw new SyntaxError("Expected identifier following call statement");const Ot=Vs();ee(_.CloseStatement,"Expected closing statement token");const Cs=[];for(;!ut("endcall");)Cs.push(Te());ee(_.OpenStatement,"Expected '{%'"),ue("endcall"),ee(_.CloseStatement,"Expected closing statement token");const Us=new T(Xt,Ot);Qe=new _e(Us,gt,Cs);break}case"break":++N,ee(_.CloseStatement,"Expected closing statement token"),Qe=new K;break;case"continue":++N,ee(_.CloseStatement,"Expected closing statement token"),Qe=new me;break;case"filter":{++N;let gt=Is();gt instanceof x&&Ce(_.OpenParen)&&(gt=Rs(gt)),ee(_.CloseStatement,"Expected closing statement token");const Xt=[];for(;!ut("endfilter");)Xt.push(Te());ee(_.OpenStatement,"Expected '{%'"),ue("endfilter"),ee(_.CloseStatement,"Expected '%}'"),Qe=new be(gt,Xt);break}default:throw new SyntaxError(`Unknown statement type: ${qe}`)}return Qe}function Nt(){ee(_.OpenExpression,"Expected opening expression token");const qe=rs();return ee(_.CloseExpression,"Expected closing expression token"),qe}function ts(){const qe=Ls();let Qe=null;const gt=[];if(Ce(_.Equals))++N,Qe=Ls();else{for(ee(_.CloseStatement,"Expected %} token");!ut("endset");)gt.push(Te());ee(_.OpenStatement,"Expected {% token"),ue("endset")}return ee(_.CloseStatement,"Expected closing statement token"),new R(qe,Qe,gt)}function Qt(){const qe=rs();ee(_.CloseStatement,"Expected closing statement token");const Qe=[],gt=[];for(;!ut("elif","else","endif");)Qe.push(Te());if(ut("elif")){++N,++N;const Xt=Qt();gt.push(Xt)}else if(ut("else"))for(++N,++N,ee(_.CloseStatement,"Expected closing statement token");!ut("endif");)gt.push(Te());return new V(qe,Qe,gt)}function Fs(){const qe=Is();if(qe.type!=="Identifier")throw new SyntaxError("Expected identifier following macro statement");const Qe=Vs();ee(_.CloseStatement,"Expected closing statement token");const gt=[];for(;!ut("endmacro");)gt.push(Te());return new G(qe,Qe,gt)}function Ls(qe=!1){const Qe=qe?Is:rs,gt=[Qe()],Xt=Ce(_.Comma);for(;Xt&&(++N,gt.push(Qe()),!!Ce(_.Comma)););return Xt?new Z(gt):gt[0]}function Ts(){const qe=Ls(!0);if(!(qe instanceof x||qe instanceof Z))throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${qe.type} instead`);if(!mt("in"))throw new SyntaxError("Expected `in` keyword following loop variable");++N;const Qe=rs();ee(_.CloseStatement,"Expected closing statement token");const gt=[];for(;!ut("endfor","else");)gt.push(Te());const Xt=[];if(ut("else"))for(++N,++N,ee(_.CloseStatement,"Expected closing statement token");!ut("endfor");)Xt.push(Te());return new O(qe,Qe,gt,Xt)}function rs(){return zs()}function zs(){const qe=pr();if(mt("if")){++N;const Qe=pr();if(mt("else")){++N;const gt=zs();return new xe(Qe,qe,gt)}else return new fe(qe,Qe)}return qe}function pr(){let qe=xr();for(;mt("or");){const Qe=g[N];++N;const gt=xr();qe=new ie(Qe,qe,gt)}return qe}function xr(){let qe=Ds();for(;mt("and");){const Qe=g[N];++N;const gt=Ds();qe=new ie(Qe,qe,gt)}return qe}function Ds(){let qe;for(;mt("not");){const Qe=g[N];++N;const gt=Ds();qe=new ke(Qe,gt)}return qe??ks()}function ks(){let qe=Os();for(;;){let Qe;if(mt("not","in"))Qe=new b("not in",_.Identifier),N+=2;else if(mt("in"))Qe=g[N++];else if(Ce(_.ComparisonBinaryOperator))Qe=g[N++];else break;const gt=Os();qe=new ie(Qe,qe,gt)}return qe}function Os(){let qe=js();for(;Ce(_.AdditiveBinaryOperator);){const Qe=g[N];++N;const gt=js();qe=new ie(Qe,qe,gt)}return qe}function Bs(){const qe=xt(Is());return Ce(_.OpenParen)?Rs(qe):qe}function Rs(qe){let Qe=new T(qe,Vs());return Qe=xt(Qe),Ce(_.OpenParen)&&(Qe=Rs(Qe)),Qe}function Vs(){ee(_.OpenParen,"Expected opening parenthesis for arguments list");const qe=ir();return ee(_.CloseParen,"Expected closing parenthesis for arguments list"),qe}function ir(){const qe=[];for(;!Ce(_.CloseParen);){let Qe;if(g[N].type===_.MultiplicativeBinaryOperator&&g[N].value==="*"){++N;const gt=rs();Qe=new ne(gt)}else if(Qe=rs(),Ce(_.Equals)){if(++N,!(Qe instanceof x))throw new SyntaxError("Expected identifier for keyword argument");const gt=rs();Qe=new W(Qe,gt)}qe.push(Qe),Ce(_.Comma)&&++N}return qe}function hr(){const qe=[];let Qe=!1;for(;!Ce(_.CloseSquareBracket);)Ce(_.Colon)?(qe.push(void 0),++N,Qe=!0):(qe.push(rs()),Ce(_.Colon)&&(++N,Qe=!0));if(qe.length===0)throw new SyntaxError("Expected at least one argument for member/slice expression");if(Qe){if(qe.length>3)throw new SyntaxError("Expected 0-3 arguments for slice expression");return new le(...qe)}return qe[0]}function xt(qe){for(;Ce(_.Dot)||Ce(_.OpenSquareBracket);){const Qe=g[N];++N;let gt;const Xt=Qe.type===_.OpenSquareBracket;if(Xt)gt=hr(),ee(_.CloseSquareBracket,"Expected closing square bracket");else if(gt=Is(),gt.type!=="Identifier")throw new SyntaxError("Expected identifier following dot operator");qe=new $(qe,gt,Xt)}return qe}function js(){let qe=mr();for(;Ce(_.MultiplicativeBinaryOperator);){const Qe=g[N++],gt=mr();qe=new ie(Qe,qe,gt)}return qe}function mr(){let qe=Tr();for(;mt("is");){++N;const Qe=mt("not");Qe&&++N;const gt=Is();if(!(gt instanceof x))throw new SyntaxError("Expected identifier for the test");qe=new Re(qe,Qe,gt)}return qe}function Tr(){let qe=Bs();for(;Ce(_.Pipe);){++N;let Qe=Is();if(!(Qe instanceof x))throw new SyntaxError("Expected identifier for the filter");Ce(_.OpenParen)&&(Qe=Rs(Qe)),qe=new Me(qe,Qe)}return qe}function Is(){const qe=g[N++];switch(qe.type){case _.NumericLiteral:{const Qe=qe.value;return Qe.includes(".")?new U(Number(Qe)):new Y(Number(Qe))}case _.StringLiteral:{let Qe=qe.value;for(;Ce(_.StringLiteral);)Qe+=g[N++].value;return new de(Qe)}case _.Identifier:return new x(qe.value);case _.OpenParen:{const Qe=Ls();return ee(_.CloseParen,"Expected closing parenthesis, got ${tokens[current].type} instead."),Qe}case _.OpenSquareBracket:{const Qe=[];for(;!Ce(_.CloseSquareBracket);)Qe.push(rs()),Ce(_.Comma)&&++N;return++N,new oe(Qe)}case _.OpenCurlyBracket:{const Qe=new Map;for(;!Ce(_.CloseCurlyBracket);){const gt=rs();ee(_.Colon,"Expected colon between key and value in object literal");const Xt=rs();Qe.set(gt,Xt),Ce(_.Comma)&&++N}return++N,new he(Qe)}default:throw new SyntaxError(`Unexpected token: ${qe.type}`)}}for(;N<g.length;)te.body.push(Te());return te}function Ge(g,te,N=1){te===void 0&&(te=g,g=0);const ee=[];for(let ue=g;ue<te;ue+=N)ee.push(ue);return ee}function He(g,te,N,ee=1){const ue=Math.sign(ee);ue>=0?(te=(te??=0)<0?Math.max(g.length+te,0):Math.min(te,g.length),N=(N??=g.length)<0?Math.max(g.length+N,0):Math.min(N,g.length)):(te=(te??=g.length-1)<0?Math.max(g.length+te,-1):Math.min(te,g.length-1),N=(N??=-1)<-1?Math.max(g.length+N,-1):Math.min(N,g.length-1));const Te=[];for(let Ce=te;ue*Ce<ue*N;Ce+=ee)Te.push(g[Ce]);return Te}function pt(g){return g.replace(/\b\w/g,te=>te.toUpperCase())}function ze(g){return J(new Date,g)}function J(g,te){const N=new Intl.DateTimeFormat(void 0,{month:"long"}),ee=new Intl.DateTimeFormat(void 0,{month:"short"}),ue=Te=>Te<10?"0"+Te:Te.toString();return te.replace(/%[YmdbBHM%]/g,Te=>{switch(Te){case"%Y":return g.getFullYear().toString();case"%m":return ue(g.getMonth()+1);case"%d":return ue(g.getDate());case"%b":return ee.format(g);case"%B":return N.format(g);case"%H":return ue(g.getHours());case"%M":return ue(g.getMinutes());case"%%":return"%";default:return Te}})}function j(g){return g.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function ve(g,te,N,ee){if(ee===0)return g;let ue=ee==null||ee<0?1/0:ee;const Te=te.length===0?new RegExp("(?=)","gu"):new RegExp(j(te),"gu");return g.replaceAll(Te,Ce=>ue>0?(--ue,N):Ce)}var Fe=class extends Error{},Oe=class extends Error{},je=class{type="RuntimeValue";value;builtins=new Map;constructor(g=void 0){this.value=g}__bool__(){return new Ue(!!this.value)}toString(){return String(this.value)}},Ee=class extends je{type="IntegerValue"},Ne=class extends je{type="FloatValue";toString(){return this.value%1===0?this.value.toFixed(1):this.value.toString()}},$e=class extends je{type="StringValue";builtins=new Map([["upper",new et(()=>new $e(this.value.toUpperCase()))],["lower",new et(()=>new $e(this.value.toLowerCase()))],["strip",new et(()=>new $e(this.value.trim()))],["title",new et(()=>new $e(pt(this.value)))],["capitalize",new et(()=>new $e(this.value.charAt(0).toUpperCase()+this.value.slice(1)))],["length",new Ee(this.value.length)],["rstrip",new et(()=>new $e(this.value.trimEnd()))],["lstrip",new et(()=>new $e(this.value.trimStart()))],["startswith",new et(g=>{if(g.length===0)throw new Error("startswith() requires at least one argument");const te=g[0];if(te instanceof $e)return new Ue(this.value.startsWith(te.value));if(te instanceof De){for(const N of te.value){if(!(N instanceof $e))throw new Error("startswith() tuple elements must be strings");if(this.value.startsWith(N.value))return new Ue(!0)}return new Ue(!1)}throw new Error("startswith() argument must be a string or tuple of strings")})],["endswith",new et(g=>{if(g.length===0)throw new Error("endswith() requires at least one argument");const te=g[0];if(te instanceof $e)return new Ue(this.value.endsWith(te.value));if(te instanceof De){for(const N of te.value){if(!(N instanceof $e))throw new Error("endswith() tuple elements must be strings");if(this.value.endsWith(N.value))return new Ue(!0)}return new Ue(!1)}throw new Error("endswith() argument must be a string or tuple of strings")})],["split",new et(g=>{const te=g[0]??new at;if(!(te instanceof $e||te instanceof at))throw new Error("sep argument must be a string or null");const N=g[1]??new Ee(-1);if(!(N instanceof Ee))throw new Error("maxsplit argument must be a number");let ee=[];if(te instanceof at){const ue=this.value.trimStart();for(const{0:Te,index:Ce}of ue.matchAll(/\S+/g)){if(N.value!==-1&&ee.length>=N.value&&Ce!==void 0){ee.push(Te+ue.slice(Ce+Te.length));break}ee.push(Te)}}else{if(te.value==="")throw new Error("empty separator");ee=this.value.split(te.value),N.value!==-1&&ee.length>N.value&&ee.push(ee.splice(N.value).join(te.value))}return new De(ee.map(ue=>new $e(ue)))})],["replace",new et(g=>{if(g.length<2)throw new Error("replace() requires at least two arguments");const te=g[0],N=g[1];if(!(te instanceof $e&&N instanceof $e))throw new Error("replace() arguments must be strings");let ee;if(g.length>2?g[2].type==="KeywordArgumentsValue"?ee=g[2].value.get("count")??new at:ee=g[2]:ee=new at,!(ee instanceof Ee||ee instanceof at))throw new Error("replace() count argument must be a number or null");return new $e(ve(this.value,te.value,N.value,ee.value))})]])},Ue=class extends je{type="BooleanValue"},Ke=class extends je{type="ObjectValue";__bool__(){return new Ue(this.value.size>0)}builtins=new Map([["get",new et(([g,te])=>{if(!(g instanceof $e))throw new Error(`Object key must be a string: got ${g.type}`);return this.value.get(g.value)??te??new at})],["items",new et(()=>this.items())],["keys",new et(()=>this.keys())],["values",new et(()=>this.values())]]);items(){return new De(Array.from(this.value.entries()).map(([g,te])=>new De([new $e(g),te])))}keys(){return new De(Array.from(this.value.keys()).map(g=>new $e(g)))}values(){return new De(Array.from(this.value.values()))}},nt=class extends Ke{type="KeywordArgumentsValue"},De=class extends je{type="ArrayValue";builtins=new Map([["length",new Ee(this.value.length)]]);__bool__(){return new Ue(this.value.length>0)}},Mt=class extends De{type="TupleValue"},et=class extends je{type="FunctionValue"},at=class extends je{type="NullValue"},dt=class extends je{type="UndefinedValue"},lt=class{constructor(g){this.parent=g}variables=new Map([["namespace",new et(g=>{if(g.length===0)return new Ke(new Map);if(g.length!==1||!(g[0]instanceof Ke))throw new Error("`namespace` expects either zero arguments or a single object argument");return g[0]})]]);tests=new Map([["boolean",g=>g.type==="BooleanValue"],["callable",g=>g instanceof et],["odd",g=>{if(!(g instanceof Ee))throw new Error(`cannot odd on ${g.type}`);return g.value%2!==0}],["even",g=>{if(!(g instanceof Ee))throw new Error(`cannot even on ${g.type}`);return g.value%2===0}],["false",g=>g.type==="BooleanValue"&&!g.value],["true",g=>g.type==="BooleanValue"&&g.value],["none",g=>g.type==="NullValue"],["string",g=>g.type==="StringValue"],["number",g=>g instanceof Ee||g instanceof Ne],["integer",g=>g instanceof Ee],["iterable",g=>g.type==="ArrayValue"||g.type==="StringValue"],["mapping",g=>g.type==="ObjectValue"],["lower",g=>{const te=g.value;return g.type==="StringValue"&&te===te.toLowerCase()}],["upper",g=>{const te=g.value;return g.type==="StringValue"&&te===te.toUpperCase()}],["none",g=>g.type==="NullValue"],["defined",g=>g.type!=="UndefinedValue"],["undefined",g=>g.type==="UndefinedValue"],["equalto",(g,te)=>g.value===te.value],["eq",(g,te)=>g.value===te.value]]);set(g,te){return this.declareVariable(g,Vt(te))}declareVariable(g,te){if(this.variables.has(g))throw new SyntaxError(`Variable already declared: ${g}`);return this.variables.set(g,te),te}setVariable(g,te){return this.variables.set(g,te),te}resolve(g){if(this.variables.has(g))return this;if(this.parent)return this.parent.resolve(g);throw new Error(`Unknown variable: ${g}`)}lookupVariable(g){try{return this.resolve(g).variables.get(g)??new dt}catch{return new dt}}};function ct(g){g.set("false",!1),g.set("true",!0),g.set("none",null),g.set("raise_exception",te=>{throw new Error(te)}),g.set("range",Ge),g.set("strftime_now",ze),g.set("True",!0),g.set("False",!1),g.set("None",null)}var ft=class{global;constructor(g){this.global=g??new lt}run(g){return this.evaluate(g,this.global)}evaluateBinaryExpression(g,te){const N=this.evaluate(g.left,te);switch(g.operator.value){case"and":return N.__bool__().value?this.evaluate(g.right,te):N;case"or":return N.__bool__().value?N:this.evaluate(g.right,te)}const ee=this.evaluate(g.right,te);switch(g.operator.value){case"==":return new Ue(N.value==ee.value);case"!=":return new Ue(N.value!=ee.value)}if(N instanceof dt||ee instanceof dt){if(ee instanceof dt&&["in","not in"].includes(g.operator.value))return new Ue(g.operator.value==="not in");throw new Error(`Cannot perform operation ${g.operator.value} on undefined values`)}else{if(N instanceof at||ee instanceof at)throw new Error("Cannot perform operation on null values");if(g.operator.value==="~")return new $e(N.value.toString()+ee.value.toString());if((N instanceof Ee||N instanceof Ne)&&(ee instanceof Ee||ee instanceof Ne)){const ue=N.value,Te=ee.value;switch(g.operator.value){case"+":case"-":case"*":{const Ce=g.operator.value==="+"?ue+Te:g.operator.value==="-"?ue-Te:ue*Te;return N instanceof Ne||ee instanceof Ne?new Ne(Ce):new Ee(Ce)}case"/":return new Ne(ue/Te);case"%":{const Ce=ue%Te;return N instanceof Ne||ee instanceof Ne?new Ne(Ce):new Ee(Ce)}case"<":return new Ue(ue<Te);case">":return new Ue(ue>Te);case">=":return new Ue(ue>=Te);case"<=":return new Ue(ue<=Te)}}else if(N instanceof De&&ee instanceof De)switch(g.operator.value){case"+":return new De(N.value.concat(ee.value))}else if(ee instanceof De){const ue=ee.value.find(Te=>Te.value===N.value)!==void 0;switch(g.operator.value){case"in":return new Ue(ue);case"not in":return new Ue(!ue)}}}if(N instanceof $e||ee instanceof $e)switch(g.operator.value){case"+":return new $e(N.value.toString()+ee.value.toString())}if(N instanceof $e&&ee instanceof $e)switch(g.operator.value){case"in":return new Ue(ee.value.includes(N.value));case"not in":return new Ue(!ee.value.includes(N.value))}if(N instanceof $e&&ee instanceof Ke)switch(g.operator.value){case"in":return new Ue(ee.value.has(N.value));case"not in":return new Ue(!ee.value.has(N.value))}throw new SyntaxError(`Unknown operator "${g.operator.value}" between ${N.type} and ${ee.type}`)}evaluateArguments(g,te){const N=[],ee=new Map;for(const ue of g)if(ue.type==="SpreadExpression"){const Te=ue,Ce=this.evaluate(Te.argument,te);if(!(Ce instanceof De))throw new Error(`Cannot unpack non-iterable type: ${Ce.type}`);for(const ut of Ce.value)N.push(ut)}else if(ue.type==="KeywordArgumentExpression"){const Te=ue;ee.set(Te.key.value,this.evaluate(Te.value,te))}else{if(ee.size>0)throw new Error("Positional arguments must come before keyword arguments");N.push(this.evaluate(ue,te))}return[N,ee]}applyFilter(g,te,N){if(te.type==="Identifier"){const ee=te;if(ee.value==="tojson")return new $e(Ut(g));if(g instanceof De)switch(ee.value){case"list":return g;case"first":return g.value[0];case"last":return g.value[g.value.length-1];case"length":return new Ee(g.value.length);case"reverse":return new De(g.value.reverse());case"sort":return new De(g.value.sort((ue,Te)=>{if(ue.type!==Te.type)throw new Error(`Cannot compare different types: ${ue.type} and ${Te.type}`);switch(ue.type){case"IntegerValue":case"FloatValue":return ue.value-Te.value;case"StringValue":return ue.value.localeCompare(Te.value);default:throw new Error(`Cannot compare type: ${ue.type}`)}}));case"join":return new $e(g.value.map(ue=>ue.value).join(""));case"string":return new $e(Ut(g));case"unique":{const ue=new Set,Te=[];for(const Ce of g.value)ue.has(Ce.value)||(ue.add(Ce.value),Te.push(Ce));return new De(Te)}default:throw new Error(`Unknown ArrayValue filter: ${ee.value}`)}else if(g instanceof $e)switch(ee.value){case"length":case"upper":case"lower":case"title":case"capitalize":{const ue=g.builtins.get(ee.value);if(ue instanceof et)return ue.value([],N);if(ue instanceof Ee)return ue;throw new Error(`Unknown StringValue filter: ${ee.value}`)}case"trim":return new $e(g.value.trim());case"indent":return new $e(g.value.split(`
`).map((ue,Te)=>Te===0||ue.length===0?ue:"    "+ue).join(`
`));case"join":case"string":return g;case"int":{const ue=parseInt(g.value,10);return new Ee(isNaN(ue)?0:ue)}case"float":{const ue=parseFloat(g.value);return new Ne(isNaN(ue)?0:ue)}default:throw new Error(`Unknown StringValue filter: ${ee.value}`)}else if(g instanceof Ee||g instanceof Ne)switch(ee.value){case"abs":return g instanceof Ee?new Ee(Math.abs(g.value)):new Ne(Math.abs(g.value));case"int":return new Ee(Math.floor(g.value));case"float":return new Ne(g.value);default:throw new Error(`Unknown NumericValue filter: ${ee.value}`)}else if(g instanceof Ke)switch(ee.value){case"items":return new De(Array.from(g.value.entries()).map(([ue,Te])=>new De([new $e(ue),Te])));case"length":return new Ee(g.value.size);default:throw new Error(`Unknown ObjectValue filter: ${ee.value}`)}else if(g instanceof Ue)switch(ee.value){case"bool":return new Ue(g.value);case"int":return new Ee(g.value?1:0);case"float":return new Ne(g.value?1:0);case"string":return new $e(g.value?"true":"false");default:throw new Error(`Unknown BooleanValue filter: ${ee.value}`)}throw new Error(`Cannot apply filter "${ee.value}" to type: ${g.type}`)}else if(te.type==="CallExpression"){const ee=te;if(ee.callee.type!=="Identifier")throw new Error(`Unknown filter: ${ee.callee.type}`);const ue=ee.callee.value;if(ue==="tojson"){const[,Te]=this.evaluateArguments(ee.args,N),Ce=Te.get("indent")??new at;if(!(Ce instanceof Ee||Ce instanceof at))throw new Error("If set, indent must be a number");return new $e(Ut(g,Ce.value))}else if(ue==="join"){let Te;if(g instanceof $e)Te=Array.from(g.value);else if(g instanceof De)Te=g.value.map(Ze=>Ze.value);else throw new Error(`Cannot apply filter "${ue}" to type: ${g.type}`);const[Ce,ut]=this.evaluateArguments(ee.args,N),mt=Ce.at(0)??ut.get("separator")??new $e("");if(!(mt instanceof $e))throw new Error("separator must be a string");return new $e(Te.join(mt.value))}else if(ue==="int"||ue==="float"){const[Te,Ce]=this.evaluateArguments(ee.args,N),ut=Te.at(0)??Ce.get("default")??(ue==="int"?new Ee(0):new Ne(0));if(g instanceof $e){const mt=ue==="int"?parseInt(g.value,10):parseFloat(g.value);return isNaN(mt)?ut:ue==="int"?new Ee(mt):new Ne(mt)}else{if(g instanceof Ee||g instanceof Ne)return g;if(g instanceof Ue)return ue==="int"?new Ee(g.value?1:0):new Ne(g.value?1:0);throw new Error(`Cannot apply filter "${ue}" to type: ${g.type}`)}}else if(ue==="default"){const[Te,Ce]=this.evaluateArguments(ee.args,N),ut=Te[0]??new $e(""),mt=Te[1]??Ce.get("boolean")??new Ue(!1);if(!(mt instanceof Ue))throw new Error("`default` filter flag must be a boolean");return g instanceof dt||mt.value&&!g.__bool__().value?ut:g}if(g instanceof De){switch(ue){case"selectattr":case"rejectattr":{const Te=ue==="selectattr";if(g.value.some(Nt=>!(Nt instanceof Ke)))throw new Error(`\`${ue}\` can only be applied to array of objects`);if(ee.args.some(Nt=>Nt.type!=="StringLiteral"))throw new Error(`arguments of \`${ue}\` must be strings`);const[Ce,ut,mt]=ee.args.map(Nt=>this.evaluate(Nt,N));let Ze;if(ut){const Nt=N.tests.get(ut.value);if(!Nt)throw new Error(`Unknown test: ${ut.value}`);Ze=Nt}else Ze=(...Nt)=>Nt[0].__bool__().value;const _t=g.value.filter(Nt=>{const ts=Nt.value.get(Ce.value),Qt=ts?Ze(ts,mt):!1;return Te?Qt:!Qt});return new De(_t)}case"map":{const[,Te]=this.evaluateArguments(ee.args,N);if(Te.has("attribute")){const Ce=Te.get("attribute");if(!(Ce instanceof $e))throw new Error("attribute must be a string");const ut=Te.get("default"),mt=g.value.map(Ze=>{if(!(Ze instanceof Ke))throw new Error("items in map must be an object");return Ze.value.get(Ce.value)??ut??new dt});return new De(mt)}else throw new Error("`map` expressions without `attribute` set are not currently supported.")}}throw new Error(`Unknown ArrayValue filter: ${ue}`)}else if(g instanceof $e){switch(ue){case"indent":{const[Te,Ce]=this.evaluateArguments(ee.args,N),ut=Te.at(0)??Ce.get("width")??new Ee(4);if(!(ut instanceof Ee))throw new Error("width must be a number");const mt=Te.at(1)??Ce.get("first")??new Ue(!1),Ze=Te.at(2)??Ce.get("blank")??new Ue(!1),_t=g.value.split(`
`),Nt=" ".repeat(ut.value),ts=_t.map((Qt,Fs)=>!mt.value&&Fs===0||!Ze.value&&Qt.length===0?Qt:Nt+Qt);return new $e(ts.join(`
`))}case"replace":{const Te=g.builtins.get("replace");if(!(Te instanceof et))throw new Error("replace filter not available");const[Ce,ut]=this.evaluateArguments(ee.args,N);return Te.value([...Ce,new nt(ut)],N)}}throw new Error(`Unknown StringValue filter: ${ue}`)}else throw new Error(`Cannot apply filter "${ue}" to type: ${g.type}`)}throw new Error(`Unknown filter: ${te.type}`)}evaluateFilterExpression(g,te){const N=this.evaluate(g.operand,te);return this.applyFilter(N,g.filter,te)}evaluateTestExpression(g,te){const N=this.evaluate(g.operand,te),ee=te.tests.get(g.test.value);if(!ee)throw new Error(`Unknown test: ${g.test.value}`);const ue=ee(N);return new Ue(g.negate?!ue:ue)}evaluateSelectExpression(g,te){return this.evaluate(g.test,te).__bool__().value?this.evaluate(g.lhs,te):new dt}evaluateUnaryExpression(g,te){const N=this.evaluate(g.argument,te);switch(g.operator.value){case"not":return new Ue(!N.value);default:throw new SyntaxError(`Unknown operator: ${g.operator.value}`)}}evaluateTernaryExpression(g,te){return this.evaluate(g.condition,te).__bool__().value?this.evaluate(g.trueExpr,te):this.evaluate(g.falseExpr,te)}evalProgram(g,te){return this.evaluateBlock(g.body,te)}evaluateBlock(g,te){let N="";for(const ee of g){const ue=this.evaluate(ee,te);ue.type!=="NullValue"&&ue.type!=="UndefinedValue"&&(N+=ue.toString())}return new $e(N)}evaluateIdentifier(g,te){return te.lookupVariable(g.value)}evaluateCallExpression(g,te){const[N,ee]=this.evaluateArguments(g.args,te);ee.size>0&&N.push(new nt(ee));const ue=this.evaluate(g.callee,te);if(ue.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${ue.type}`);return ue.value(N,te)}evaluateSliceExpression(g,te,N){if(!(g instanceof De||g instanceof $e))throw new Error("Slice object must be an array or string");const ee=this.evaluate(te.start,N),ue=this.evaluate(te.stop,N),Te=this.evaluate(te.step,N);if(!(ee instanceof Ee||ee instanceof dt))throw new Error("Slice start must be numeric or undefined");if(!(ue instanceof Ee||ue instanceof dt))throw new Error("Slice stop must be numeric or undefined");if(!(Te instanceof Ee||Te instanceof dt))throw new Error("Slice step must be numeric or undefined");return g instanceof De?new De(He(g.value,ee.value,ue.value,Te.value)):new $e(He(Array.from(g.value),ee.value,ue.value,Te.value).join(""))}evaluateMemberExpression(g,te){const N=this.evaluate(g.object,te);let ee;if(g.computed){if(g.property.type==="SliceExpression")return this.evaluateSliceExpression(N,g.property,te);ee=this.evaluate(g.property,te)}else ee=new $e(g.property.value);let ue;if(N instanceof Ke){if(!(ee instanceof $e))throw new Error(`Cannot access property with non-string: got ${ee.type}`);ue=N.value.get(ee.value)??N.builtins.get(ee.value)}else if(N instanceof De||N instanceof $e)if(ee instanceof Ee)ue=N.value.at(ee.value),N instanceof $e&&(ue=new $e(N.value.at(ee.value)));else if(ee instanceof $e)ue=N.builtins.get(ee.value);else throw new Error(`Cannot access property with non-string/non-number: got ${ee.type}`);else{if(!(ee instanceof $e))throw new Error(`Cannot access property with non-string: got ${ee.type}`);ue=N.builtins.get(ee.value)}return ue instanceof je?ue:new dt}evaluateSet(g,te){const N=g.value?this.evaluate(g.value,te):this.evaluateBlock(g.body,te);if(g.assignee.type==="Identifier"){const ee=g.assignee.value;te.setVariable(ee,N)}else if(g.assignee.type==="TupleLiteral"){const ee=g.assignee;if(!(N instanceof De))throw new Error(`Cannot unpack non-iterable type in set: ${N.type}`);const ue=N.value;if(ue.length!==ee.value.length)throw new Error(`Too ${ee.value.length>ue.length?"few":"many"} items to unpack in set`);for(let Te=0;Te<ee.value.length;++Te){const Ce=ee.value[Te];if(Ce.type!=="Identifier")throw new Error(`Cannot unpack to non-identifier in set: ${Ce.type}`);te.setVariable(Ce.value,ue[Te])}}else if(g.assignee.type==="MemberExpression"){const ee=g.assignee,ue=this.evaluate(ee.object,te);if(!(ue instanceof Ke))throw new Error("Cannot assign to member of non-object");if(ee.property.type!=="Identifier")throw new Error("Cannot assign to member with non-identifier property");ue.value.set(ee.property.value,N)}else throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(g.assignee)}`);return new at}evaluateIf(g,te){const N=this.evaluate(g.test,te);return this.evaluateBlock(N.__bool__().value?g.body:g.alternate,te)}evaluateFor(g,te){const N=new lt(te);let ee,ue;if(g.iterable.type==="SelectExpression"){const Ze=g.iterable;ue=this.evaluate(Ze.lhs,N),ee=Ze.test}else ue=this.evaluate(g.iterable,N);if(!(ue instanceof De||ue instanceof Ke))throw new Error(`Expected iterable or object type in for loop: got ${ue.type}`);ue instanceof Ke&&(ue=ue.keys());const Te=[],Ce=[];for(let Ze=0;Ze<ue.value.length;++Ze){const _t=new lt(N),Nt=ue.value[Ze];let ts;if(g.loopvar.type==="Identifier")ts=Qt=>Qt.setVariable(g.loopvar.value,Nt);else if(g.loopvar.type==="TupleLiteral"){const Qt=g.loopvar;if(Nt.type!=="ArrayValue")throw new Error(`Cannot unpack non-iterable type: ${Nt.type}`);const Fs=Nt;if(Qt.value.length!==Fs.value.length)throw new Error(`Too ${Qt.value.length>Fs.value.length?"few":"many"} items to unpack`);ts=Ls=>{for(let Ts=0;Ts<Qt.value.length;++Ts){if(Qt.value[Ts].type!=="Identifier")throw new Error(`Cannot unpack non-identifier type: ${Qt.value[Ts].type}`);Ls.setVariable(Qt.value[Ts].value,Fs.value[Ts])}}}else throw new Error(`Invalid loop variable(s): ${g.loopvar.type}`);ee&&(ts(_t),!this.evaluate(ee,_t).__bool__().value)||(Te.push(Nt),Ce.push(ts))}let ut="",mt=!0;for(let Ze=0;Ze<Te.length;++Ze){const _t=new Map([["index",new Ee(Ze+1)],["index0",new Ee(Ze)],["revindex",new Ee(Te.length-Ze)],["revindex0",new Ee(Te.length-Ze-1)],["first",new Ue(Ze===0)],["last",new Ue(Ze===Te.length-1)],["length",new Ee(Te.length)],["previtem",Ze>0?Te[Ze-1]:new dt],["nextitem",Ze<Te.length-1?Te[Ze+1]:new dt]]);N.setVariable("loop",new Ke(_t)),Ce[Ze](N);try{const Nt=this.evaluateBlock(g.body,N);ut+=Nt.value}catch(Nt){if(Nt instanceof Oe)continue;if(Nt instanceof Fe)break;throw Nt}mt=!1}if(mt){const Ze=this.evaluateBlock(g.defaultBlock,N);ut+=Ze.value}return new $e(ut)}evaluateMacro(g,te){return te.setVariable(g.name.value,new et((N,ee)=>{const ue=new lt(ee);N=N.slice();let Te;N.at(-1)?.type==="KeywordArgumentsValue"&&(Te=N.pop());for(let Ce=0;Ce<g.args.length;++Ce){const ut=g.args[Ce],mt=N[Ce];if(ut.type==="Identifier"){const Ze=ut;if(!mt)throw new Error(`Missing positional argument: ${Ze.value}`);ue.setVariable(Ze.value,mt)}else if(ut.type==="KeywordArgumentExpression"){const Ze=ut,_t=mt??Te?.value.get(Ze.key.value)??this.evaluate(Ze.value,ue);ue.setVariable(Ze.key.value,_t)}else throw new Error(`Unknown argument type: ${ut.type}`)}return this.evaluateBlock(g.body,ue)})),new at}evaluateCallStatement(g,te){const N=new et((ut,mt)=>{const Ze=new lt(mt);if(g.callerArgs)for(let _t=0;_t<g.callerArgs.length;++_t){const Nt=g.callerArgs[_t];if(Nt.type!=="Identifier")throw new Error(`Caller parameter must be an identifier, got ${Nt.type}`);Ze.setVariable(Nt.value,ut[_t]??new dt)}return this.evaluateBlock(g.body,Ze)}),[ee,ue]=this.evaluateArguments(g.call.args,te);ee.push(new nt(ue));const Te=this.evaluate(g.call.callee,te);if(Te.type!=="FunctionValue")throw new Error(`Cannot call something that is not a function: got ${Te.type}`);const Ce=new lt(te);return Ce.setVariable("caller",N),Te.value(ee,Ce)}evaluateFilterStatement(g,te){const N=this.evaluateBlock(g.body,te);return this.applyFilter(N,g.filter,te)}evaluate(g,te){if(!g)return new dt;switch(g.type){case"Program":return this.evalProgram(g,te);case"Set":return this.evaluateSet(g,te);case"If":return this.evaluateIf(g,te);case"For":return this.evaluateFor(g,te);case"Macro":return this.evaluateMacro(g,te);case"CallStatement":return this.evaluateCallStatement(g,te);case"Break":throw new Fe;case"Continue":throw new Oe;case"IntegerLiteral":return new Ee(g.value);case"FloatLiteral":return new Ne(g.value);case"StringLiteral":return new $e(g.value);case"ArrayLiteral":return new De(g.value.map(N=>this.evaluate(N,te)));case"TupleLiteral":return new Mt(g.value.map(N=>this.evaluate(N,te)));case"ObjectLiteral":{const N=new Map;for(const[ee,ue]of g.value){const Te=this.evaluate(ee,te);if(!(Te instanceof $e))throw new Error(`Object keys must be strings: got ${Te.type}`);N.set(Te.value,this.evaluate(ue,te))}return new Ke(N)}case"Identifier":return this.evaluateIdentifier(g,te);case"CallExpression":return this.evaluateCallExpression(g,te);case"MemberExpression":return this.evaluateMemberExpression(g,te);case"UnaryExpression":return this.evaluateUnaryExpression(g,te);case"BinaryExpression":return this.evaluateBinaryExpression(g,te);case"FilterExpression":return this.evaluateFilterExpression(g,te);case"FilterStatement":return this.evaluateFilterStatement(g,te);case"TestExpression":return this.evaluateTestExpression(g,te);case"SelectExpression":return this.evaluateSelectExpression(g,te);case"Ternary":return this.evaluateTernaryExpression(g,te);case"Comment":return new at;default:throw new SyntaxError(`Unknown node type: ${g.type}`)}}};function Vt(g){switch(typeof g){case"number":return Number.isInteger(g)?new Ee(g):new Ne(g);case"string":return new $e(g);case"boolean":return new Ue(g);case"undefined":return new dt;case"object":return g===null?new at:Array.isArray(g)?new De(g.map(Vt)):new Ke(new Map(Object.entries(g).map(([te,N])=>[te,Vt(N)])));case"function":return new et((te,N)=>{const ee=g(...te.map(ue=>ue.value))??null;return Vt(ee)});default:throw new Error(`Cannot convert to runtime value: ${g}`)}}function Ut(g,te,N){const ee=N??0;switch(g.type){case"NullValue":case"UndefinedValue":return"null";case"IntegerValue":case"FloatValue":case"StringValue":case"BooleanValue":return JSON.stringify(g.value);case"ArrayValue":case"ObjectValue":{const ue=te?" ".repeat(te):"",Te=`
`+ue.repeat(ee),Ce=Te+ue;if(g.type==="ArrayValue"){const ut=g.value.map(mt=>Ut(mt,te,ee+1));return te?`[${Ce}${ut.join(`,${Ce}`)}${Te}]`:`[${ut.join(", ")}]`}else{const ut=Array.from(g.value.entries()).map(([mt,Ze])=>{const _t=`"${mt}": ${Ut(Ze,te,ee+1)}`;return te?`${Ce}${_t}`:_t});return te?`{${ut.join(",")}${Te}}`:`{${ut.join(", ")}}`}}default:throw new Error(`Cannot convert to JSON: ${g.type}`)}}var At=`
`,ws="{%- ",Zt=" -%}";function Ss(g){switch(g.operator.type){case"MultiplicativeBinaryOperator":return 4;case"AdditiveBinaryOperator":return 3;case"ComparisonBinaryOperator":return 2;case"Identifier":return g.operator.value==="and"?1:g.operator.value==="in"||g.operator.value==="not in"?2:0}return 0}function Es(g,te="	"){const N=typeof te=="number"?" ".repeat(te):te;return xs(g.body,0,N).replace(/\n$/,"")}function es(...g){return ws+g.join(" ")+Zt}function xs(g,te,N){return g.map(ee=>yr(ee,te,N)).join(At)}function yr(g,te,N){const ee=N.repeat(te);switch(g.type){case"Program":return xs(g.body,te,N);case"If":return Lr(g,te,N);case"For":return br(g,te,N);case"Set":return Xs(g,te,N);case"Macro":return Tt(g,te,N);case"Break":return ee+es("break");case"Continue":return ee+es("continue");case"CallStatement":return vr(g,te,N);case"FilterStatement":return ur(g,te,N);case"Comment":return ee+"{# "+g.value+" #}";default:return ee+"{{- "+Dt(g)+" -}}"}}function Lr(g,te,N){const ee=N.repeat(te),ue=[];let Te=g;for(;Te&&(ue.push({test:Te.test,body:Te.body}),Te.alternate.length===1&&Te.alternate[0].type==="If");)Te=Te.alternate[0];let Ce=ee+es("if",Dt(ue[0].test))+At+xs(ue[0].body,te+1,N);for(let ut=1;ut<ue.length;++ut)Ce+=At+ee+es("elif",Dt(ue[ut].test))+At+xs(ue[ut].body,te+1,N);return Te&&Te.alternate.length>0&&(Ce+=At+ee+es("else")+At+xs(Te.alternate,te+1,N)),Ce+=At+ee+es("endif"),Ce}function br(g,te,N){const ee=N.repeat(te);let ue="";if(g.iterable.type==="SelectExpression"){const Ce=g.iterable;ue=`${Dt(Ce.lhs)} if ${Dt(Ce.test)}`}else ue=Dt(g.iterable);let Te=ee+es("for",Dt(g.loopvar),"in",ue)+At+xs(g.body,te+1,N);return g.defaultBlock.length>0&&(Te+=At+ee+es("else")+At+xs(g.defaultBlock,te+1,N)),Te+=At+ee+es("endfor"),Te}function Xs(g,te,N){const ee=N.repeat(te),ue=Dt(g.assignee),Te=g.value?Dt(g.value):"",Ce=ee+es("set",`${ue}${g.value?" = "+Te:""}`);return g.body.length===0?Ce:Ce+At+xs(g.body,te+1,N)+At+ee+es("endset")}function Tt(g,te,N){const ee=N.repeat(te),ue=g.args.map(Dt).join(", ");return ee+es("macro",`${g.name.value}(${ue})`)+At+xs(g.body,te+1,N)+At+ee+es("endmacro")}function vr(g,te,N){const ee=N.repeat(te),ue=g.callerArgs&&g.callerArgs.length>0?`(${g.callerArgs.map(Dt).join(", ")})`:"",Te=Dt(g.call);let Ce=ee+es(`call${ue}`,Te)+At;return Ce+=xs(g.body,te+1,N)+At,Ce+=ee+es("endcall"),Ce}function ur(g,te,N){const ee=N.repeat(te),ue=g.filter.type==="Identifier"?g.filter.value:Dt(g.filter);let Te=ee+es("filter",ue)+At;return Te+=xs(g.body,te+1,N)+At,Te+=ee+es("endfilter"),Te}function Dt(g,te=-1){switch(g.type){case"SpreadExpression":return`*${Dt(g.argument)}`;case"Identifier":return g.value;case"IntegerLiteral":return`${g.value}`;case"FloatLiteral":return`${g.value}`;case"StringLiteral":return JSON.stringify(g.value);case"BinaryExpression":{const N=g,ee=Ss(N),ue=Dt(N.left,ee),Te=Dt(N.right,ee+1),Ce=`${ue} ${N.operator.value} ${Te}`;return ee<te?`(${Ce})`:Ce}case"UnaryExpression":{const N=g;return N.operator.value+(N.operator.value==="not"?" ":"")+Dt(N.argument,1/0)}case"CallExpression":{const N=g,ee=N.args.map(Dt).join(", ");return`${Dt(N.callee)}(${ee})`}case"MemberExpression":{const N=g;let ee=Dt(N.object);["Identifier","MemberExpression","CallExpression","StringLiteral","IntegerLiteral","FloatLiteral","ArrayLiteral","TupleLiteral","ObjectLiteral"].includes(N.object.type)||(ee=`(${ee})`);let ue=Dt(N.property);return!N.computed&&N.property.type!=="Identifier"&&(ue=`(${ue})`),N.computed?`${ee}[${ue}]`:`${ee}.${ue}`}case"FilterExpression":{const N=g,ee=Dt(N.operand,1/0);return N.filter.type==="CallExpression"?`${ee} | ${Dt(N.filter)}`:`${ee} | ${N.filter.value}`}case"SelectExpression":{const N=g;return`${Dt(N.lhs)} if ${Dt(N.test)}`}case"TestExpression":{const N=g;return`${Dt(N.operand)} is${N.negate?" not":""} ${N.test.value}`}case"ArrayLiteral":case"TupleLiteral":{const N=g.value.map(Dt),ee=g.type==="ArrayLiteral"?"[]":"()";return`${ee[0]}${N.join(", ")}${ee[1]}`}case"ObjectLiteral":return`{${Array.from(g.value.entries()).map(([ee,ue])=>`${Dt(ee)}: ${Dt(ue)}`).join(", ")}}`;case"SliceExpression":{const N=g,ee=N.start?Dt(N.start):"",ue=N.stop?Dt(N.stop):"",Te=N.step?`:${Dt(N.step)}`:"";return`${ee}:${ue}${Te}`}case"KeywordArgumentExpression":{const N=g;return`${N.key.value}=${Dt(N.value)}`}case"Ternary":{const N=g,ee=`${Dt(N.trueExpr)} if ${Dt(N.condition,0)} else ${Dt(N.falseExpr)}`;return te>-1?`(${ee})`:ee}default:throw new Error(`Unknown expression type: ${g.type}`)}}var or=class{parsed;constructor(g){const te=D(g,{lstrip_blocks:!0,trim_blocks:!0});this.parsed=We(te)}render(g){const te=new lt;if(ct(te),g)for(const[ue,Te]of Object.entries(g))te.set(ue,Te);return new ft(te).run(this.parsed).value}format(g){return Es(this.parsed,g?.indent||"	")}}},"./src/backends/onnx.js":(re,m,n)=>{var _;n.r(m),n.d(m,{Tensor:()=>S.Tensor,createInferenceSession:()=>me,deviceToExecutionProviders:()=>O,isONNXProxy:()=>T,isONNXTensor:()=>L,runInferenceSession:()=>X});var b=n("./src/env.js"),F=n("?2ce3"),q=n("onnxruntime-web"),S=n("onnxruntime-common");const f=Object.freeze({auto:null,gpu:null,cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:{name:"webnn",deviceType:"cpu"},"webnn-npu":{name:"webnn",deviceType:"npu"},"webnn-gpu":{name:"webnn",deviceType:"gpu"},"webnn-cpu":{name:"webnn",deviceType:"cpu"}}),I=[];let D,y;const h=Symbol.for("onnxruntime");if(h in globalThis)y=globalThis[h];else if(b.apis.IS_NODE_ENV){switch(y=F??(_||(_=n.t(F,2))),process.platform){case"win32":I.push("dml");break;case"linux":process.arch==="x64"&&I.push("cuda");break}I.push("cpu"),D=["cpu"]}else y=q,b.apis.IS_WEBNN_AVAILABLE&&I.push("webnn-npu","webnn-gpu","webnn-cpu","webnn"),b.apis.IS_WEBGPU_AVAILABLE&&I.push("webgpu"),I.push("wasm"),D=["wasm"];const V=y.InferenceSession;function O(x=null){if(!x)return D;switch(x){case"auto":return I;case"gpu":return I.filter(E=>["webgpu","cuda","dml","webnn-gpu"].includes(E))}if(I.includes(x))return[f[x]??x];throw new Error(`Unsupported device: "${x}". Should be one of: ${I.join(", ")}.`)}let K=null;async function me(x,E,Y){K&&await K;const U=V.create(x,E);K??=U;const de=await U;return de.config=Y,de}let R=Promise.resolve();const G=b.apis.IS_BROWSER_ENV||b.apis.IS_WEBWORKER_ENV;async function X(x,E){const Y=()=>x.run(E);return await(G?R=R.then(Y):Y())}function L(x){return x instanceof y.Tensor}const $=y?.env;$?.wasm&&(!(typeof ServiceWorkerGlobalScope<"u"&&self instanceof ServiceWorkerGlobalScope)&&!$.wasm.wasmPaths&&($.wasm.wasmPaths=`https://cdn.jsdelivr.net/npm/@huggingface/transformers@${b.env.version}/dist/`),$.wasm.proxy=!1),$?.webgpu&&($.webgpu.powerPreference="high-performance");function T(){return $?.wasm?.proxy}b.env.backends.onnx=$},"./src/base/feature_extraction_utils.js":(re,m,n)=>{n.r(m),n.d(m,{FeatureExtractor:()=>q,validate_audio_inputs:()=>S});var _=n("./src/utils/constants.js"),b=n("./src/utils/generic.js"),F=n("./src/utils/hub.js");class q extends b.Callable{constructor(I){super(),this.config=I}static async from_pretrained(I,D={}){const y=await(0,F.getModelJSON)(I,_.FEATURE_EXTRACTOR_NAME,!0,D);return new this(y)}}function S(f,I){if(!(f instanceof Float32Array||f instanceof Float64Array))throw new Error(`${I} expects input to be a Float32Array or a Float64Array, but got ${f?.constructor?.name??typeof f} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`)}},"./src/base/image_processors_utils.js":(re,m,n)=>{n.r(m),n.d(m,{ImageProcessor:()=>L,center_to_corners_format:()=>y,post_process_instance_segmentation:()=>X,post_process_object_detection:()=>h,post_process_panoptic_segmentation:()=>G,post_process_semantic_segmentation:()=>V});var _=n("./src/utils/generic.js"),b=n("./src/utils/tensor.js"),F=n("./src/utils/maths.js");n("./src/utils/image.js");var q=n("./src/utils/core.js"),S=n("./src/utils/hub.js"),f=n("./src/utils/constants.js");function I($,T,x=0,E=null){const Y=$/T;let U=(0,F.bankers_round)(Y)*T;return E!==null&&U>E&&(U=Math.floor(Y)*T),U<x&&(U=Math.ceil(Y)*T),U}function D([$,T],x){return[Math.max(Math.floor($/x),1)*x,Math.max(Math.floor(T/x),1)*x]}function y([$,T,x,E]){return[$-x/2,T-E/2,$+x/2,T+E/2]}function h($,T=.5,x=null,E=!1){const Y=$.logits,U=$.pred_boxes,[de,oe,Z]=Y.dims;if(x!==null&&x.length!==de)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let he=[];for(let ie=0;ie<de;++ie){let Me=x!==null?x[ie]:null,be={boxes:[],classes:[],scores:[]},fe=Y[ie],Re=U[ie];for(let ke=0;ke<oe;++ke){let le=fe[ke],W=[],ne;if(E){ne=le.sigmoid().data;for(let _e=0;_e<ne.length;++_e)ne[_e]>T&&W.push(_e)}else{let _e=(0,F.max)(le.data)[1];if(_e===Z-1||(ne=(0,F.softmax)(le.data),ne[_e]<T))continue;W.push(_e)}for(const _e of W){let xe=Re[ke].data;xe=y(xe),Me!==null&&(xe=xe.map((We,Ge)=>We*Me[(Ge+1)%2])),be.boxes.push(xe),be.classes.push(_e),be.scores.push(ne[_e])}}he.push(be)}return he}function V($,T=null){const x=$.logits,E=x.dims[0];if(T!==null&&T.length!==E)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const Y=[];for(let U=0;U<E;++U){const de=T!==null?T[U]:null;let oe=x[U];de!==null&&(oe=(0,b.interpolate)(oe,de,"bilinear",!1));const[Z,he]=de??oe.dims.slice(-2),ie=new b.Tensor("int32",new Int32Array(Z*he),[Z,he]),Me=oe[0].data,be=ie.data;for(let ke=1;ke<oe.dims[0];++ke){const le=oe[ke].data;for(let W=0;W<le.length;++W)le[W]>Me[W]&&(Me[W]=le[W],be[W]=ke)}const fe=new Array(oe.dims[0]);for(let ke=0;ke<be.length;++ke){const le=be[ke];fe[le]=le}const Re=fe.filter(ke=>ke!==void 0);Y.push({segmentation:ie,labels:Re})}return Y}function O($,T,x,E){const Y=[],U=[],de=[];for(let oe=0;oe<$.dims[0];++oe){const Z=$[oe],he=T[oe],ie=(0,F.max)(Z.data)[1];if(ie===E)continue;const be=(0,F.softmax)(Z.data)[ie];be>x&&(Y.push(he),U.push(be),de.push(ie))}return[Y,U,de]}function K($,T,x,E=.5,Y=.8){const U=[];let de=0,oe=0;const Z=T[x].data;for(let ie=0;ie<$.length;++ie)$[ie]===x&&(U.push(ie),++de),Z[ie]>=E&&++oe;let he=de>0&&oe>0;return he&&(he=de/oe>Y),[he,U]}function me($,T,x,E,Y,U=null,de=null){const[oe,Z]=de??$[0].dims,he=new b.Tensor("int32",new Int32Array(oe*Z),[oe,Z]),ie=[];if(de!==null)for(let ke=0;ke<$.length;++ke)$[ke]=(0,b.interpolate)($[ke],de,"bilinear",!1);const Me=new Int32Array($[0].data.length),be=new Float32Array($[0].data.length);for(let ke=0;ke<$.length;++ke){let le=T[ke];const W=$[ke].data;for(let ne=0;ne<W.length;++ne)W[ne]*=le,W[ne]>be[ne]&&(Me[ne]=ke,be[ne]=W[ne])}let fe=0;const Re=he.data;for(let ke=0;ke<x.length;++ke){const le=x[ke],[W,ne]=K(Me,$,ke,E,Y);if(W){++fe;for(const _e of ne)Re[_e]=fe;ie.push({id:fe,label_id:le,score:T[ke]})}}return[he,ie]}function R($,T,x=28,E=56*56,Y=14*14*4*1280){if($<x||T<x)throw new Error(`height:${$} or width:${T} must be larger than factor:${x}`);if(Math.max($,T)/Math.min($,T)>200)throw new Error(`absolute aspect ratio must be smaller than 200, got ${Math.max($,T)/Math.min($,T)}`);let U=Math.round($/x)*x,de=Math.round(T/x)*x;if(U*de>Y){const oe=Math.sqrt($*T/Y);U=Math.floor($/oe/x)*x,de=Math.floor(T/oe/x)*x}else if(U*de<E){const oe=Math.sqrt(E/($*T));U=Math.ceil($*oe/x)*x,de=Math.ceil(T*oe/x)*x}return[U,de]}function G($,T=.5,x=.5,E=.8,Y=null,U=null){Y===null&&(console.warn("`label_ids_to_fuse` unset. No instance will be fused."),Y=new Set);const de=$.class_queries_logits??$.logits,Z=($.masks_queries_logits??$.pred_masks).sigmoid();let[he,ie,Me]=de.dims;if(Me-=1,U!==null&&U.length!==he)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");let be=[];for(let fe=0;fe<he;++fe){let Re=U!==null?U[fe]:null,ke=de[fe],le=Z[fe],[W,ne,_e]=O(ke,le,T,Me);if(_e.length===0){let[Ge,He]=Re??le.dims.slice(-2),pt=new b.Tensor("int32",new Int32Array(Ge*He).fill(-1),[Ge,He]);be.push({segmentation:pt,segments_info:[]});continue}let[xe,We]=me(W,ne,_e,x,E,Y,Re);be.push({segmentation:xe,segments_info:We})}return be}function X($,T=.5,x=null){throw new Error("`post_process_instance_segmentation` is not yet implemented.")}class L extends _.Callable{constructor(T){super(),this.image_mean=T.image_mean??T.mean,this.image_std=T.image_std??T.std,this.resample=T.resample??2,this.do_rescale=T.do_rescale??!0,this.rescale_factor=T.rescale_factor??1/255,this.do_normalize=T.do_normalize,this.do_thumbnail=T.do_thumbnail,this.size=T.size??T.image_size,this.do_resize=T.do_resize??this.size!==void 0,this.size_divisibility=T.size_divisibility??T.size_divisor,this.do_center_crop=T.do_center_crop,this.crop_size=T.crop_size,this.do_convert_rgb=T.do_convert_rgb??!0,this.do_crop_margin=T.do_crop_margin,this.pad_size=T.pad_size,this.do_pad=T.do_pad,this.min_pixels=T.min_pixels,this.max_pixels=T.max_pixels,this.do_pad&&!this.pad_size&&this.size&&this.size.width!==void 0&&this.size.height!==void 0&&(this.pad_size=this.size),this.do_flip_channel_order=T.do_flip_channel_order??!1,this.config=T}async thumbnail(T,x,E=2){const Y=T.height,U=T.width,de=x.height,oe=x.width;let Z=Math.min(Y,de),he=Math.min(U,oe);return Z===Y&&he===U?T:(Y>U?he=Math.floor(U*Z/Y):U>Y&&(Z=Math.floor(Y*he/U)),await T.resize(he,Z,{resample:E}))}async crop_margin(T,x=200){const E=T.clone().grayscale(),Y=(0,F.min)(E.data)[0],de=(0,F.max)(E.data)[0]-Y;if(de===0)return T;const oe=x/255;let Z=E.width,he=E.height,ie=0,Me=0;const be=E.data;for(let fe=0;fe<E.height;++fe){const Re=fe*E.width;for(let ke=0;ke<E.width;++ke)(be[Re+ke]-Y)/de<oe&&(Z=Math.min(Z,ke),he=Math.min(he,fe),ie=Math.max(ie,ke),Me=Math.max(Me,fe))}return T=await T.crop([Z,he,ie,Me]),T}pad_image(T,x,E,{mode:Y="constant",center:U=!1,constant_values:de=0}={}){const[oe,Z,he]=x;let ie,Me;if(typeof E=="number"?(ie=E,Me=E):E==="square"?ie=Me=Math.max(oe,Z):(ie=E.width,Me=E.height),ie!==Z||Me!==oe){const be=new Float32Array(ie*Me*he);if(Array.isArray(de))for(let ke=0;ke<be.length;++ke)be[ke]=de[ke%he];else de!==0&&be.fill(de);const[fe,Re]=U?[Math.floor((ie-Z)/2),Math.floor((Me-oe)/2)]:[0,0];for(let ke=0;ke<oe;++ke){const le=(ke+Re)*ie,W=ke*Z;for(let ne=0;ne<Z;++ne){const _e=(le+ne+fe)*he,xe=(W+ne)*he;for(let We=0;We<he;++We)be[_e+We]=T[xe+We]}}if(Y==="symmetric"){if(U)throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");const ke=oe-1,le=Z-1;for(let W=0;W<Me;++W){const ne=W*ie,_e=(0,q.calculateReflectOffset)(W,ke)*Z;for(let xe=0;xe<ie;++xe){if(W<oe&&xe<Z)continue;const We=(ne+xe)*he,Ge=(_e+(0,q.calculateReflectOffset)(xe,le))*he;for(let He=0;He<he;++He)be[We+He]=T[Ge+He]}}}T=be,x=[Me,ie,he]}return[T,x]}rescale(T){for(let x=0;x<T.length;++x)T[x]=this.rescale_factor*T[x]}get_resize_output_image_size(T,x){const[E,Y]=T.size;let U,de;if(this.do_thumbnail){const{height:oe,width:Z}=x;U=Math.min(oe,Z)}else Number.isInteger(x)?(U=x,de=this.config.max_size??U):x!==void 0&&(U=x.shortest_edge,de=x.longest_edge);if(U!==void 0||de!==void 0){const oe=U===void 0?1:Math.max(U/E,U/Y),Z=E*oe,he=Y*oe,ie=de===void 0?1:Math.min(de/Z,de/he);let Me=Math.floor(Number((Z*ie).toFixed(2))),be=Math.floor(Number((he*ie).toFixed(2)));return this.size_divisibility!==void 0&&([Me,be]=D([Me,be],this.size_divisibility)),[Me,be]}else if(x!==void 0&&x.width!==void 0&&x.height!==void 0){let oe=x.width,Z=x.height;if(this.config.keep_aspect_ratio&&this.config.ensure_multiple_of){let he=Z/Y,ie=oe/E;Math.abs(1-ie)<Math.abs(1-he)?he=ie:ie=he,Z=I(he*Y,this.config.ensure_multiple_of),oe=I(ie*E,this.config.ensure_multiple_of)}return[oe,Z]}else{if(this.size_divisibility!==void 0)return D([E,Y],this.size_divisibility);if(this.min_pixels!==void 0&&this.max_pixels!==void 0){const oe=this.config.patch_size*this.config.merge_size;return R(Y,E,oe,this.min_pixels,this.max_pixels)}else throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(x)}`)}}async resize(T){const[x,E]=this.get_resize_output_image_size(T,this.size);return await T.resize(x,E,{resample:this.resample})}async preprocess(T,{do_normalize:x=null,do_pad:E=null,do_convert_rgb:Y=null,do_convert_grayscale:U=null,do_flip_channel_order:de=null}={}){this.do_crop_margin&&(T=await this.crop_margin(T));const[oe,Z]=T.size;if(Y??this.do_convert_rgb?T=T.rgb():U&&(T=T.grayscale()),this.do_resize&&(T=await this.resize(T)),this.do_thumbnail&&(T=await this.thumbnail(T,this.size,this.resample)),this.do_center_crop){let fe,Re;Number.isInteger(this.crop_size)?(fe=this.crop_size,Re=this.crop_size):(fe=this.crop_size.width,Re=this.crop_size.height),T=await T.center_crop(fe,Re)}const he=[T.height,T.width];let ie=Float32Array.from(T.data),Me=[T.height,T.width,T.channels];if(this.do_rescale&&this.rescale(ie),x??this.do_normalize){let fe=this.image_mean;Array.isArray(this.image_mean)||(fe=new Array(T.channels).fill(fe));let Re=this.image_std;if(Array.isArray(this.image_std)||(Re=new Array(T.channels).fill(fe)),fe.length!==T.channels||Re.length!==T.channels)throw new Error(`When set to arrays, the length of \`image_mean\` (${fe.length}) and \`image_std\` (${Re.length}) must match the number of channels in the image (${T.channels}).`);for(let ke=0;ke<ie.length;ke+=T.channels)for(let le=0;le<T.channels;++le)ie[ke+le]=(ie[ke+le]-fe[le])/Re[le]}if(E??this.do_pad){if(this.pad_size)[ie,Me]=this.pad_image(ie,[T.height,T.width,T.channels],this.pad_size);else if(this.size_divisibility){const[fe,Re]=D([Me[1],Me[0]],this.size_divisibility);[ie,Me]=this.pad_image(ie,Me,{width:fe,height:Re})}}if(de??this.do_flip_channel_order){if(Me[2]!==3)throw new Error("Flipping channel order is only supported for RGB images.");for(let fe=0;fe<ie.length;fe+=3){const Re=ie[fe];ie[fe]=ie[fe+2],ie[fe+2]=Re}}const be=new b.Tensor("float32",ie,Me).permute(2,0,1);return{original_size:[Z,oe],reshaped_input_size:he,pixel_values:be}}async _call(T,...x){Array.isArray(T)||(T=[T]);const E=await Promise.all(T.map(U=>this.preprocess(U)));return{pixel_values:(0,b.stack)(E.map(U=>U.pixel_values),0),original_sizes:E.map(U=>U.original_size),reshaped_input_sizes:E.map(U=>U.reshaped_input_size)}}static async from_pretrained(T,x={}){const E=await(0,S.getModelJSON)(T,f.IMAGE_PROCESSOR_NAME,!0,x);return new this(E)}}},"./src/base/processing_utils.js":(re,m,n)=>{n.r(m),n.d(m,{Processor:()=>q});var _=n("./src/utils/constants.js"),b=n("./src/utils/generic.js"),F=n("./src/utils/hub.js");class q extends b.Callable{static classes=["image_processor_class","tokenizer_class","feature_extractor_class"];static uses_processor_config=!1;static uses_chat_template_file=!1;constructor(f,I,D){super(),this.config=f,this.components=I,this.chat_template=D}get image_processor(){return this.components.image_processor}get tokenizer(){return this.components.tokenizer}get feature_extractor(){return this.components.feature_extractor}apply_chat_template(f,I={}){if(!this.tokenizer)throw new Error("Unable to apply chat template without a tokenizer.");return this.tokenizer.apply_chat_template(f,{tokenize:!1,chat_template:this.chat_template??void 0,...I})}batch_decode(...f){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.batch_decode(...f)}decode(...f){if(!this.tokenizer)throw new Error("Unable to decode without a tokenizer.");return this.tokenizer.decode(...f)}async _call(f,...I){for(const D of[this.image_processor,this.feature_extractor,this.tokenizer])if(D)return D(f,...I);throw new Error("No image processor, feature extractor, or tokenizer found.")}static async from_pretrained(f,I={}){const[D,y,h]=await Promise.all([this.uses_processor_config?(0,F.getModelJSON)(f,_.PROCESSOR_NAME,!0,I):{},Promise.all(this.classes.filter(V=>V in this).map(async V=>{const O=await this[V].from_pretrained(f,I);return[V.replace(/_class$/,""),O]})).then(Object.fromEntries),this.uses_chat_template_file?(0,F.getModelText)(f,_.CHAT_TEMPLATE_NAME,!0,I):null]);return new this(D,y,h)}}},"./src/configs.js":(re,m,n)=>{n.r(m),n.d(m,{AutoConfig:()=>D,PretrainedConfig:()=>I,getCacheShapes:()=>S});var _=n("./src/utils/core.js"),b=n("./src/utils/hub.js");async function F(y,h){return await(0,b.getModelJSON)(y,"config.json",!0,h)}function q(y){const h={};let V={};switch(y.model_type){case"llava":case"paligemma":case"gemma3":case"florence2":case"llava_onevision":case"idefics3":case"ultravox":case"voxtral":case"smolvlm":case"gemma3n":V=q(y.text_config);break;case"moondream1":V=q(y.phi_config);break;case"musicgen":V=q(y.decoder);break;case"multi_modality":V=q(y.language_config);break;case"gpt2":case"gptj":case"jais":case"codegen":case"gpt_bigcode":h.num_heads="n_head",h.num_layers="n_layer",h.hidden_size="n_embd";break;case"gpt_neox":case"stablelm":case"opt":case"falcon":case"modernbert-decoder":h.num_heads="num_attention_heads",h.num_layers="num_hidden_layers",h.hidden_size="hidden_size";break;case"llama":case"llama4_text":case"arcee":case"lfm2":case"smollm3":case"olmo":case"olmo2":case"mobilellm":case"granite":case"granitemoehybrid":case"cohere":case"mistral":case"starcoder2":case"qwen2":case"qwen2_vl":case"phi":case"phi3":case"phi3_v":case"llava_qwen2":h.num_heads="num_key_value_heads",h.num_layers="num_hidden_layers",h.hidden_size="hidden_size",h.num_attention_heads="num_attention_heads",h.dim_kv="head_dim";break;case"qwen3":case"gemma":case"gemma2":case"vaultgemma":case"gemma3_text":case"gemma3n_text":case"glm":case"helium":case"ernie4_5":h.num_heads="num_key_value_heads",h.num_layers="num_hidden_layers",h.dim_kv="head_dim";break;case"openelm":h.num_heads="num_kv_heads",h.num_layers="num_transformer_layers",h.dim_kv="head_dim";break;case"gpt_neo":case"donut-swin":h.num_heads="num_heads",h.num_layers="num_layers",h.hidden_size="hidden_size";break;case"bloom":h.num_heads="n_head",h.num_layers="n_layer",h.hidden_size="hidden_size";break;case"mpt":h.num_heads="n_heads",h.num_layers="n_layers",h.hidden_size="d_model";break;case"exaone":h.num_heads="num_key_value_heads",h.num_layers="num_layers",h.dim_kv="head_dim",h.num_attention_heads="num_attention_heads";break;case"t5":case"mt5":case"longt5":h.num_decoder_layers="num_decoder_layers",h.num_decoder_heads="num_heads",h.decoder_dim_kv="d_kv",h.num_encoder_layers="num_layers",h.num_encoder_heads="num_heads",h.encoder_dim_kv="d_kv";break;case"bart":case"mbart":case"marian":case"whisper":case"lite-whisper":case"m2m_100":case"blenderbot":case"blenderbot-small":case"florence2_language":h.num_decoder_layers="decoder_layers",h.num_decoder_heads="decoder_attention_heads",h.decoder_hidden_size="d_model",h.num_encoder_layers="encoder_layers",h.num_encoder_heads="encoder_attention_heads",h.encoder_hidden_size="d_model";break;case"speecht5":h.num_decoder_layers="decoder_layers",h.num_decoder_heads="decoder_attention_heads",h.decoder_hidden_size="hidden_size",h.num_encoder_layers="encoder_layers",h.num_encoder_heads="encoder_attention_heads",h.encoder_hidden_size="hidden_size";break;case"trocr":h.num_encoder_layers=h.num_decoder_layers="decoder_layers",h.num_encoder_heads=h.num_decoder_heads="decoder_attention_heads",h.encoder_hidden_size=h.decoder_hidden_size="d_model";break;case"musicgen_decoder":h.num_encoder_layers=h.num_decoder_layers="num_hidden_layers",h.num_encoder_heads=h.num_decoder_heads="num_attention_heads",h.encoder_hidden_size=h.decoder_hidden_size="hidden_size";break;case"moonshine":h.num_decoder_layers="decoder_num_hidden_layers",h.num_decoder_heads="decoder_num_key_value_heads",h.num_encoder_layers="encoder_num_hidden_layers",h.num_encoder_heads="encoder_num_key_value_heads",h.encoder_hidden_size=h.decoder_hidden_size="hidden_size";break;case"vision-encoder-decoder":const K=q(y.decoder),me="num_decoder_layers"in K,R=(0,_.pick)(y,["model_type","is_encoder_decoder"]);return me?(R.num_decoder_layers=K.num_decoder_layers,R.num_decoder_heads=K.num_decoder_heads,R.decoder_hidden_size=K.decoder_hidden_size,R.num_encoder_layers=K.num_encoder_layers,R.num_encoder_heads=K.num_encoder_heads,R.encoder_hidden_size=K.encoder_hidden_size):(R.num_layers=K.num_layers,R.num_heads=K.num_heads,R.hidden_size=K.hidden_size),R}const O={...V,...(0,_.pick)(y,["model_type","multi_query","is_encoder_decoder"])};for(const K in h)O[K]=y[h[K]];return O}function S(y,h){if(y.model_type==="lfm2"){const V=h?.prefix??"past_key_values",O=V==="present"?"present":"past",K={},{layer_types:me,num_attention_heads:R,num_key_value_heads:G,hidden_size:X,conv_L_cache:L}=y,$=X/R,T=h?.batch_size??1;for(let x=0;x<me.length;++x)if(me[x]==="full_attention")for(const E of["key","value"])K[`${V}.${x}.${E}`]=[T,G,0,$];else if(me[x]==="conv")K[`${O}_conv.${x}`]=[T,X,L];else throw new Error(`Unsupported layer type: ${me[x]}`);return K}return f(y,h)}function f(y,{prefix:h="past_key_values",batch_size:V=1}={}){const O={},K=y.normalized_config;if(K.is_encoder_decoder&&"num_encoder_heads"in K&&"num_decoder_heads"in K){const me=K.encoder_dim_kv??K.encoder_hidden_size/K.num_encoder_heads,R=K.decoder_dim_kv??K.decoder_hidden_size/K.num_decoder_heads,G=[V,K.num_encoder_heads,0,me],X=[V,K.num_decoder_heads,0,R];for(let L=0;L<K.num_decoder_layers;++L)O[`${h}.${L}.encoder.key`]=G,O[`${h}.${L}.encoder.value`]=G,O[`${h}.${L}.decoder.key`]=X,O[`${h}.${L}.decoder.value`]=X}else{const me=K.num_heads,R=K.num_layers,G=K.dim_kv??K.hidden_size/(K.num_attention_heads??me);if(K.model_type==="falcon"){const X=[V*me,0,G];for(let L=0;L<R;++L)O[`${h}.${L}.key`]=X,O[`${h}.${L}.value`]=X}else if(K.multi_query){const X=[V*me,0,2*G];for(let L=0;L<R;++L)O[`${h}.${L}.key_value`]=X}else if(K.model_type==="bloom"){const X=[V*me,G,0],L=[V*me,0,G];for(let $=0;$<R;++$)O[`${h}.${$}.key`]=X,O[`${h}.${$}.value`]=L}else if(K.model_type==="openelm")for(let X=0;X<R;++X){const L=[V,me[X],0,G];O[`${h}.${X}.key`]=L,O[`${h}.${X}.value`]=L}else{const X=[V,me,0,G];for(let L=0;L<R;++L)O[`${h}.${L}.key`]=X,O[`${h}.${L}.value`]=X}}return O}class I{model_type=null;is_encoder_decoder=!1;max_position_embeddings;"transformers.js_config";constructor(h){Object.assign(this,h),this.normalized_config=q(this)}static async from_pretrained(h,{progress_callback:V=null,config:O=null,cache_dir:K=null,local_files_only:me=!1,revision:R="main"}={}){O&&!(O instanceof I)&&(O=new I(O));const G=O??await F(h,{progress_callback:V,config:O,cache_dir:K,local_files_only:me,revision:R});return new this(G)}}class D{static async from_pretrained(...h){return I.from_pretrained(...h)}}},"./src/env.js":(re,m,n)=>{n.r(m),n.d(m,{apis:()=>R,env:()=>x});var _=n("?db59"),b=n("?383f"),F=n("?fa4b");const q="3.7.5",S=typeof window<"u"&&typeof window.document<"u",f=typeof self<"u"&&["DedicatedWorkerGlobalScope","ServiceWorkerGlobalScope","SharedWorkerGlobalScope"].includes(self.constructor?.name),I=typeof self<"u"&&"caches"in self,D=typeof navigator<"u"&&"gpu"in navigator,y=typeof navigator<"u"&&"ml"in navigator,h=typeof process<"u",V=h&&process?.release?.name==="node",O=!E(_),K=!E(b),me=typeof globalThis.Deno<"u",R=Object.freeze({IS_BROWSER_ENV:S,IS_WEBWORKER_ENV:f,IS_WEB_CACHE_AVAILABLE:I,IS_WEBGPU_AVAILABLE:D,IS_WEBNN_AVAILABLE:y,IS_PROCESS_AVAILABLE:h,IS_NODE_ENV:V,IS_FS_AVAILABLE:O,IS_PATH_AVAILABLE:K}),G=O&&K;let X="./";if(G){const Y=Object({url:vp&&vp.tagName.toUpperCase()==="SCRIPT"&&vp.src||new URL("assets/gemma-worker-9fe06813.js",document.baseURI).href}).url;Y?X=b.dirname(b.dirname(F.fileURLToPath(Y))):typeof __dirname<"u"&&(X=b.dirname(__dirname))}const L=G?b.join(X,"/.cache/"):null,$="/models/",T=G?b.join(X,$):$,x={version:q,backends:{onnx:{}},allowRemoteModels:!0,remoteHost:"https://huggingface.co/",remotePathTemplate:"{model}/resolve/{revision}/",allowLocalModels:!(S||f),localModelPath:T,useFS:O,useBrowserCache:I&&!me,useFSCache:O,cacheDir:L,useCustomCache:!1,customCache:null};function E(Y){return Object.keys(Y).length===0}},"./src/generation/configuration_utils.js":(re,m,n)=>{n.r(m),n.d(m,{GenerationConfig:()=>b});var _=n("./src/utils/core.js");class b{max_length=20;max_new_tokens=null;min_length=0;min_new_tokens=null;early_stopping=!1;max_time=null;do_sample=!1;num_beams=1;num_beam_groups=1;penalty_alpha=null;use_cache=!0;temperature=1;top_k=50;top_p=1;typical_p=1;epsilon_cutoff=0;eta_cutoff=0;diversity_penalty=0;repetition_penalty=1;encoder_repetition_penalty=1;length_penalty=1;no_repeat_ngram_size=0;bad_words_ids=null;force_words_ids=null;renormalize_logits=!1;constraints=null;forced_bos_token_id=null;forced_eos_token_id=null;remove_invalid_values=!1;exponential_decay_length_penalty=null;suppress_tokens=null;streamer=null;begin_suppress_tokens=null;forced_decoder_ids=null;guidance_scale=null;num_return_sequences=1;output_attentions=!1;output_hidden_states=!1;output_scores=!1;return_dict_in_generate=!1;pad_token_id=null;bos_token_id=null;eos_token_id=null;encoder_no_repeat_ngram_size=0;decoder_start_token_id=null;generation_kwargs={};constructor(q){Object.assign(this,(0,_.pick)(q,Object.getOwnPropertyNames(this)))}}},"./src/generation/logits_process.js":(re,m,n)=>{n.r(m),n.d(m,{ClassifierFreeGuidanceLogitsProcessor:()=>R,ForcedBOSTokenLogitsProcessor:()=>f,ForcedEOSTokenLogitsProcessor:()=>I,LogitsProcessor:()=>F,LogitsProcessorList:()=>S,LogitsWarper:()=>q,MinLengthLogitsProcessor:()=>O,MinNewTokensLengthLogitsProcessor:()=>K,NoBadWordsLogitsProcessor:()=>me,NoRepeatNGramLogitsProcessor:()=>h,RepetitionPenaltyLogitsProcessor:()=>V,SuppressTokensAtBeginLogitsProcessor:()=>D,TemperatureLogitsWarper:()=>G,TopKLogitsWarper:()=>L,TopPLogitsWarper:()=>X,WhisperTimeStampLogitsProcessor:()=>y});var _=n("./src/utils/generic.js");n("./src/utils/tensor.js");var b=n("./src/utils/maths.js");class F extends _.Callable{_call(T,x){throw Error("`_call` should be implemented in a subclass")}}class q extends _.Callable{_call(T,x){throw Error("`_call` should be implemented in a subclass")}}class S extends _.Callable{constructor(){super(),this.processors=[]}push(T){this.processors.push(T)}extend(T){this.processors.push(...T)}_call(T,x){let E=x;for(const Y of this.processors)E=Y(T,E);return E}[Symbol.iterator](){return this.processors.values()}}class f extends F{constructor(T){super(),this.bos_token_id=T}_call(T,x){for(let E=0;E<T.length;++E)if(T[E].length===1){const Y=x[E].data;Y.fill(-1/0),Y[this.bos_token_id]=0}return x}}class I extends F{constructor(T,x){super(),this.max_length=T,this.eos_token_id=Array.isArray(x)?x:[x]}_call(T,x){for(let E=0;E<T.length;++E)if(T[E].length===this.max_length-1){const Y=x[E].data;Y.fill(-1/0);for(const U of this.eos_token_id)Y[U]=0}return x}}class D extends F{constructor(T,x){super(),this.begin_suppress_tokens=T,this.begin_index=x}_call(T,x){for(let E=0;E<T.length;++E)if(T[E].length===this.begin_index){const Y=x[E].data;for(const U of this.begin_suppress_tokens)Y[U]=-1/0}return x}}class y extends F{constructor(T,x){super(),this.eos_token_id=Array.isArray(T.eos_token_id)?T.eos_token_id[0]:T.eos_token_id,this.no_timestamps_token_id=T.no_timestamps_token_id,this.timestamp_begin=this.no_timestamps_token_id+1,this.begin_index=x.length,x.at(-1)===this.no_timestamps_token_id&&(this.begin_index-=1),this.max_initial_timestamp_index=T.max_initial_timestamp_index}_call(T,x){for(let E=0;E<T.length;++E){const Y=x[E].data;if(Y[this.no_timestamps_token_id]=-1/0,T[E].length===this.begin_index-1){Y.fill(-1/0),Y[this.timestamp_begin]=0;continue}const U=T[E].slice(this.begin_index),de=U.length>=1&&U[U.length-1]>=this.timestamp_begin,oe=U.length<2||U[U.length-2]>=this.timestamp_begin;if(de&&(oe?Y.subarray(this.timestamp_begin).fill(-1/0):Y.subarray(0,this.eos_token_id).fill(-1/0)),T[E].length===this.begin_index&&this.max_initial_timestamp_index!==null){const Me=this.timestamp_begin+this.max_initial_timestamp_index;Y.subarray(Me+1).fill(-1/0)}const Z=(0,b.log_softmax)(Y),he=Math.log(Z.subarray(this.timestamp_begin).map(Math.exp).reduce((Me,be)=>Me+be)),ie=(0,b.max)(Z.subarray(0,this.timestamp_begin))[0];he>ie&&Y.subarray(0,this.timestamp_begin).fill(-1/0)}return x}}class h extends F{constructor(T){super(),this.no_repeat_ngram_size=T}getNgrams(T){const x=T.length,E=[];for(let U=0;U<x+1-this.no_repeat_ngram_size;++U){const de=[];for(let oe=0;oe<this.no_repeat_ngram_size;++oe)de.push(T[U+oe]);E.push(de.map(Number))}const Y=new Map;for(const U of E){const de=U.slice(0,U.length-1),oe=JSON.stringify(de),Z=Y.get(oe)??[];Z.push(U[U.length-1]),Y.set(oe,Z)}return Y}getGeneratedNgrams(T,x){const E=x.slice(x.length+1-this.no_repeat_ngram_size,x.length);return T.get(JSON.stringify(E.map(Number)))??[]}calcBannedNgramTokens(T){const x=[];if(T.length+1<this.no_repeat_ngram_size)return x;{const E=this.getNgrams(T);return this.getGeneratedNgrams(E,T)}}_call(T,x){for(let E=0;E<T.length;++E){const Y=x[E].data,U=this.calcBannedNgramTokens(T[E]);for(const de of U)Y[de]=-1/0}return x}}class V extends F{constructor(T){super(),this.penalty=T}_call(T,x){for(let E=0;E<T.length;++E){const Y=x[E].data;for(const U of new Set(T[E])){const de=Number(U);Y[de]<0?Y[de]*=this.penalty:Y[de]/=this.penalty}}return x}}class O extends F{constructor(T,x){super(),this.min_length=T,this.eos_token_id=Array.isArray(x)?x:[x]}_call(T,x){for(let E=0;E<T.length;++E)if(T[E].length<this.min_length){const Y=x[E].data;for(const U of this.eos_token_id)Y[U]=-1/0}return x}}class K extends F{constructor(T,x,E){super(),this.prompt_length_to_skip=T,this.min_new_tokens=x,this.eos_token_id=Array.isArray(E)?E:[E]}_call(T,x){for(let E=0;E<T.length;++E)if(T[E].length-this.prompt_length_to_skip<this.min_new_tokens){const U=x[E].data;for(const de of this.eos_token_id)U[de]=-1/0}return x}}class me extends F{constructor(T,x){super(),this.bad_words_ids=T,this.eos_token_id=Array.isArray(x)?x:[x]}_call(T,x){for(let E=0;E<T.length;++E){const Y=x[E].data,U=T[E];for(const de of this.bad_words_ids){if(U.length<de.length-1)continue;let oe=!0;for(let Z=1;Z<=de.length-1;++Z)if(de.at(-Z-1)!=U.at(-Z)){oe=!1;break}oe&&(Y[de.at(-1)]=-1/0)}}return x}}class R extends F{constructor(T){if(super(),T<=1)throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${T}.`);this.guidance_scale=T}_call(T,x){if(x.dims[0]!==2*T.length)throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${x.dims[0]} for the logits and ${T.length} for the input ids.`);const E=T.length,Y=x.slice([0,E],null),U=x.slice([E,x.dims[0]],null);for(let de=0;de<U.data.length;++de)U.data[de]+=(Y.data[de]-U.data[de])*this.guidance_scale;return U}}class G extends q{constructor(T){super(),this.temperature=T}_call(T,x){const E=x.data;for(let Y=0;Y<E.length;++Y)E[Y]/=this.temperature;return x}}class X extends q{constructor(T,{filter_value:x=-1/0,min_tokens_to_keep:E=1}={}){if(super(),T<0||T>1)throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${T}`);if(!Number.isInteger(E)||E<1)throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${E}`);this.top_p=T,this.filter_value=x,this.min_tokens_to_keep=E}}class L extends q{constructor(T,{filter_value:x=-1/0,min_tokens_to_keep:E=1}={}){if(super(),!Number.isInteger(T)||T<0)throw new Error(`\`top_k\` must be a positive integer, but is ${T}`);this.top_k=Math.max(T,E),this.filter_value=x}}},"./src/generation/logits_sampler.js":(re,m,n)=>{n.r(m),n.d(m,{LogitsSampler:()=>q});var _=n("./src/utils/generic.js"),b=n("./src/utils/tensor.js"),F=n("./src/utils/maths.js");n("./src/generation/configuration_utils.js");class q extends _.Callable{constructor(y){super(),this.generation_config=y}async _call(y){return this.sample(y)}async sample(y){throw Error("sample should be implemented in subclasses.")}getLogits(y,h){let V=y.dims.at(-1),O=y.data;if(h===-1)O=O.slice(-V);else{let K=h*V;O=O.slice(K,K+V)}return O}randomSelect(y){let h=0;for(let O=0;O<y.length;++O)h+=y[O];let V=Math.random()*h;for(let O=0;O<y.length;++O)if(V-=y[O],V<=0)return O;return 0}static getSampler(y){if(y.do_sample)return new f(y);if(y.num_beams>1)return new I(y);if(y.num_return_sequences>1)throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${y.num_return_sequences}.`);return new S(y)}}class S extends q{async sample(y){const h=(0,F.max)(y.data)[1];return[[BigInt(h),0]]}}class f extends q{async sample(y){let h=y.dims.at(-1);this.generation_config.top_k>0&&(h=Math.min(this.generation_config.top_k,h));const[V,O]=await(0,b.topk)(y,h),K=(0,F.softmax)(V.data);return Array.from({length:this.generation_config.num_beams},()=>{const me=this.randomSelect(K);return[O.data[me],Math.log(K[me])]})}}class I extends q{async sample(y){let h=y.dims.at(-1);this.generation_config.top_k>0&&(h=Math.min(this.generation_config.top_k,h));const[V,O]=await(0,b.topk)(y,h),K=(0,F.softmax)(V.data);return Array.from({length:this.generation_config.num_beams},(me,R)=>[O.data[R],Math.log(K[R])])}}},"./src/generation/stopping_criteria.js":(re,m,n)=>{n.r(m),n.d(m,{EosTokenCriteria:()=>S,InterruptableStoppingCriteria:()=>f,MaxLengthCriteria:()=>q,StoppingCriteria:()=>b,StoppingCriteriaList:()=>F});var _=n("./src/utils/generic.js");class b extends _.Callable{_call(D,y){throw Error("StoppingCriteria needs to be subclassed")}}class F extends _.Callable{constructor(){super(),this.criteria=[]}push(D){this.criteria.push(D)}extend(D){D instanceof F?D=D.criteria:D instanceof b&&(D=[D]),this.criteria.push(...D)}_call(D,y){const h=new Array(D.length).fill(!1);for(const V of this.criteria){const O=V(D,y);for(let K=0;K<h.length;++K)h[K]||=O[K]}return h}[Symbol.iterator](){return this.criteria.values()}}class q extends b{constructor(D,y=null){super(),this.max_length=D,this.max_position_embeddings=y}_call(D){return D.map(y=>y.length>=this.max_length)}}class S extends b{constructor(D){super(),Array.isArray(D)||(D=[D]),this.eos_token_id=D}_call(D,y){return D.map(h=>{const V=h.at(-1);return this.eos_token_id.some(O=>V==O)})}}class f extends b{constructor(){super(),this.interrupted=!1}interrupt(){this.interrupted=!0}reset(){this.interrupted=!1}_call(D,y){return new Array(D.length).fill(this.interrupted)}}},"./src/generation/streamers.js":(re,m,n)=>{n.r(m),n.d(m,{BaseStreamer:()=>q,TextStreamer:()=>f,WhisperTextStreamer:()=>I});var _=n("./src/utils/core.js"),b=n("./src/tokenizers.js"),F=n("./src/env.js");class q{put(y){throw Error("Not implemented")}end(){throw Error("Not implemented")}}const S=F.apis.IS_PROCESS_AVAILABLE?D=>process.stdout.write(D):D=>console.log(D);class f extends q{constructor(y,{skip_prompt:h=!1,callback_function:V=null,token_callback_function:O=null,skip_special_tokens:K=!0,decode_kwargs:me={},...R}={}){super(),this.tokenizer=y,this.skip_prompt=h,this.callback_function=V??S,this.token_callback_function=O,this.decode_kwargs={skip_special_tokens:K,...me,...R},this.token_cache=[],this.print_len=0,this.next_tokens_are_prompt=!0}put(y){if(y.length>1)throw Error("TextStreamer only supports batch size of 1");const h=this.next_tokens_are_prompt;if(h&&(this.next_tokens_are_prompt=!1,this.skip_prompt))return;const V=y[0];this.token_callback_function?.(V),this.token_cache=(0,_.mergeArrays)(this.token_cache,V);const O=this.tokenizer.decode(this.token_cache,this.decode_kwargs);let K;h||O.endsWith(`
`)?(K=O.slice(this.print_len),this.token_cache=[],this.print_len=0):O.length>0&&(0,b.is_chinese_char)(O.charCodeAt(O.length-1))?(K=O.slice(this.print_len),this.print_len+=K.length):(K=O.slice(this.print_len,O.lastIndexOf(" ")+1),this.print_len+=K.length),this.on_finalized_text(K,!1)}end(){let y;this.token_cache.length>0?(y=this.tokenizer.decode(this.token_cache,this.decode_kwargs).slice(this.print_len),this.token_cache=[],this.print_len=0):y="",this.next_tokens_are_prompt=!0,this.on_finalized_text(y,!0)}on_finalized_text(y,h){y.length>0&&this.callback_function?.(y),h&&this.callback_function===S&&F.apis.IS_PROCESS_AVAILABLE&&this.callback_function?.(`
`)}}class I extends f{constructor(y,{skip_prompt:h=!1,callback_function:V=null,token_callback_function:O=null,on_chunk_start:K=null,on_chunk_end:me=null,on_finalize:R=null,time_precision:G=.02,skip_special_tokens:X=!0,decode_kwargs:L={}}={}){super(y,{skip_prompt:h,skip_special_tokens:X,callback_function:V,token_callback_function:O,decode_kwargs:L}),this.timestamp_begin=y.timestamp_begin,this.on_chunk_start=K,this.on_chunk_end=me,this.on_finalize=R,this.time_precision=G,this.waiting_for_timestamp=!1}put(y){if(y.length>1)throw Error("WhisperTextStreamer only supports batch size of 1");const h=y[0];if(h.length===1){const V=Number(h[0])-this.timestamp_begin;if(V>=0){const O=V*this.time_precision;this.waiting_for_timestamp?this.on_chunk_end?.(O):this.on_chunk_start?.(O),this.waiting_for_timestamp=!this.waiting_for_timestamp,this.token_callback_function?.(h);return}}return super.put(y)}end(){super.end(),this.on_finalize?.()}}},"./src/models.js":(re,m,n)=>{n.r(m),n.d(m,{ASTForAudioClassification:()=>Qi,ASTModel:()=>qi,ASTPreTrainedModel:()=>hn,AlbertForMaskedLM:()=>Ye,AlbertForQuestionAnswering:()=>ot,AlbertForSequenceClassification:()=>tt,AlbertModel:()=>st,AlbertPreTrainedModel:()=>Be,ArceeForCausalLM:()=>Fa,ArceeModel:()=>Aa,ArceePreTrainedModel:()=>_o,AutoModel:()=>ji,AutoModelForAudioClassification:()=>cp,AutoModelForAudioFrameClassification:()=>up,AutoModelForAudioTextToText:()=>Ip,AutoModelForCTC:()=>lp,AutoModelForCausalLM:()=>ap,AutoModelForDepthEstimation:()=>_p,AutoModelForDocumentQuestionAnswering:()=>pp,AutoModelForImageClassification:()=>Wn,AutoModelForImageFeatureExtraction:()=>gp,AutoModelForImageMatting:()=>hp,AutoModelForImageSegmentation:()=>Gn,AutoModelForImageTextToText:()=>wp,AutoModelForImageToImage:()=>mp,AutoModelForMaskGeneration:()=>Wr,AutoModelForMaskedLM:()=>Dr,AutoModelForNormalEstimation:()=>fp,AutoModelForObjectDetection:()=>Vi,AutoModelForPoseEstimation:()=>cu,AutoModelForQuestionAnswering:()=>Qs,AutoModelForSemanticSegmentation:()=>Ni,AutoModelForSeq2SeqLM:()=>nu,AutoModelForSequenceClassification:()=>su,AutoModelForSpeechSeq2Seq:()=>ou,AutoModelForTextToSpectrogram:()=>iu,AutoModelForTextToWaveform:()=>au,AutoModelForTokenClassification:()=>ru,AutoModelForUniversalSegmentation:()=>lu,AutoModelForVision2Seq:()=>dn,AutoModelForXVector:()=>dp,AutoModelForZeroShotObjectDetection:()=>Ur,BartForConditionalGeneration:()=>qt,BartForSequenceClassification:()=>ns,BartModel:()=>lr,BartPretrainedModel:()=>_s,BaseModelOutput:()=>Fe,BeitForImageClassification:()=>kl,BeitModel:()=>Sl,BeitPreTrainedModel:()=>xn,BertForMaskedLM:()=>Ee,BertForQuestionAnswering:()=>Ue,BertForSequenceClassification:()=>Ne,BertForTokenClassification:()=>$e,BertModel:()=>je,BertPreTrainedModel:()=>Oe,BlenderbotForConditionalGeneration:()=>is,BlenderbotModel:()=>os,BlenderbotPreTrainedModel:()=>us,BlenderbotSmallForConditionalGeneration:()=>er,BlenderbotSmallModel:()=>Wt,BlenderbotSmallPreTrainedModel:()=>Ct,BloomForCausalLM:()=>ml,BloomModel:()=>hl,BloomPreTrainedModel:()=>zo,CLIPModel:()=>la,CLIPPreTrainedModel:()=>Cr,CLIPSegForImageSegmentation:()=>ga,CLIPSegModel:()=>fa,CLIPSegPreTrainedModel:()=>ao,CLIPTextModel:()=>mu,CLIPTextModelWithProjection:()=>_u,CLIPVisionModel:()=>rr,CLIPVisionModelWithProjection:()=>ca,CamembertForMaskedLM:()=>mt,CamembertForQuestionAnswering:()=>Nt,CamembertForSequenceClassification:()=>Ze,CamembertForTokenClassification:()=>_t,CamembertModel:()=>ut,CamembertPreTrainedModel:()=>Ce,CausalLMOutput:()=>Gr,CausalLMOutputWithPast:()=>Ap,ChineseCLIPModel:()=>pa,ChineseCLIPPreTrainedModel:()=>ua,ClapAudioModelWithProjection:()=>vi,ClapModel:()=>Nu,ClapPreTrainedModel:()=>Fn,ClapTextModelWithProjection:()=>on,CodeGenForCausalLM:()=>Sa,CodeGenModel:()=>$a,CodeGenPreTrainedModel:()=>Qr,CohereForCausalLM:()=>Ja,CohereModel:()=>Xa,CoherePreTrainedModel:()=>Po,ConvBertForMaskedLM:()=>vr,ConvBertForQuestionAnswering:()=>or,ConvBertForSequenceClassification:()=>ur,ConvBertForTokenClassification:()=>Dt,ConvBertModel:()=>Tt,ConvBertPreTrainedModel:()=>Xs,ConvNextForImageClassification:()=>Fu,ConvNextModel:()=>lc,ConvNextPreTrainedModel:()=>ui,ConvNextV2ForImageClassification:()=>dc,ConvNextV2Model:()=>cc,ConvNextV2PreTrainedModel:()=>pi,DFineForObjectDetection:()=>Zo,DFineModel:()=>jl,DFinePreTrainedModel:()=>Yo,DINOv3ConvNextModel:()=>fc,DINOv3ConvNextPreTrainedModel:()=>_c,DINOv3ViTModel:()=>mc,DINOv3ViTPreTrainedModel:()=>Ou,DPTForDepthEstimation:()=>Xl,DPTModel:()=>Ql,DPTPreTrainedModel:()=>ii,DacDecoderModel:()=>Bd,DacDecoderOutput:()=>Ld,DacEncoderModel:()=>Qu,DacEncoderOutput:()=>Od,DacModel:()=>zd,DacPreTrainedModel:()=>ki,DebertaForMaskedLM:()=>Fs,DebertaForQuestionAnswering:()=>rs,DebertaForSequenceClassification:()=>Ls,DebertaForTokenClassification:()=>Ts,DebertaModel:()=>Qt,DebertaPreTrainedModel:()=>ts,DebertaV2ForMaskedLM:()=>xr,DebertaV2ForQuestionAnswering:()=>Os,DebertaV2ForSequenceClassification:()=>Ds,DebertaV2ForTokenClassification:()=>ks,DebertaV2Model:()=>pr,DebertaV2PreTrainedModel:()=>zs,DecisionTransformerModel:()=>qu,DecisionTransformerPreTrainedModel:()=>Md,DeiTForImageClassification:()=>Ul,DeiTModel:()=>Eu,DeiTPreTrainedModel:()=>si,DepthAnythingForDepthEstimation:()=>Jl,DepthAnythingPreTrainedModel:()=>ai,DepthProForDepthEstimation:()=>ec,DepthProPreTrainedModel:()=>li,DetrForObjectDetection:()=>Il,DetrForSegmentation:()=>Xo,DetrModel:()=>Tu,DetrObjectDetectionOutput:()=>Al,DetrPreTrainedModel:()=>Tn,DetrSegmentationOutput:()=>Fl,Dinov2ForImageClassification:()=>uc,Dinov2Model:()=>Du,Dinov2PreTrainedModel:()=>hi,Dinov2WithRegistersForImageClassification:()=>hc,Dinov2WithRegistersModel:()=>pc,Dinov2WithRegistersPreTrainedModel:()=>mi,DistilBertForMaskedLM:()=>xt,DistilBertForQuestionAnswering:()=>hr,DistilBertForSequenceClassification:()=>Vs,DistilBertForTokenClassification:()=>ir,DistilBertModel:()=>Rs,DistilBertPreTrainedModel:()=>Bs,DonutSwinModel:()=>ac,DonutSwinPreTrainedModel:()=>Au,EfficientNetForImageClassification:()=>dd,EfficientNetModel:()=>cd,EfficientNetPreTrainedModel:()=>Ln,ElectraForMaskedLM:()=>N,ElectraForQuestionAnswering:()=>Te,ElectraForSequenceClassification:()=>ee,ElectraForTokenClassification:()=>ue,ElectraModel:()=>te,ElectraPreTrainedModel:()=>g,Ernie4_5_ForCausalLM:()=>td,Ernie4_5_Model:()=>ed,Ernie4_5_PretrainedModel:()=>Zc,EsmForMaskedLM:()=>Tr,EsmForSequenceClassification:()=>Is,EsmForTokenClassification:()=>qe,EsmModel:()=>mr,EsmPreTrainedModel:()=>js,ExaoneForCausalLM:()=>ja,ExaoneModel:()=>Ra,ExaonePreTrainedModel:()=>yo,FalconForCausalLM:()=>od,FalconModel:()=>nd,FalconPreTrainedModel:()=>bi,FastViTForImageClassification:()=>Tl,FastViTModel:()=>xl,FastViTPreTrainedModel:()=>bn,Florence2ForConditionalGeneration:()=>sa,Florence2PreTrainedModel:()=>ta,GLPNForDepthEstimation:()=>ic,GLPNModel:()=>oc,GLPNPreTrainedModel:()=>di,GPT2LMHeadModel:()=>Ma,GPT2Model:()=>wa,GPT2PreTrainedModel:()=>Ns,GPTBigCodeForCausalLM:()=>Ca,GPTBigCodeModel:()=>fu,GPTBigCodePreTrainedModel:()=>wn,GPTJForCausalLM:()=>Ea,GPTJModel:()=>Pa,GPTJPreTrainedModel:()=>gn,GPTNeoForCausalLM:()=>xa,GPTNeoModel:()=>va,GPTNeoPreTrainedModel:()=>co,GPTNeoXForCausalLM:()=>po,GPTNeoXModel:()=>Ta,GPTNeoXPreTrainedModel:()=>uo,Gemma2ForCausalLM:()=>tl,Gemma2Model:()=>el,Gemma2PreTrainedModel:()=>Co,Gemma3ForCausalLM:()=>Ao,Gemma3Model:()=>Io,Gemma3PreTrainedModel:()=>ko,Gemma3nForConditionalGeneration:()=>ro,Gemma3nPreTrainedModel:()=>oa,GemmaForCausalLM:()=>Za,GemmaModel:()=>Ya,GemmaPreTrainedModel:()=>Eo,GlmForCausalLM:()=>Ba,GlmModel:()=>za,GlmPreTrainedModel:()=>Mo,GraniteForCausalLM:()=>Ha,GraniteModel:()=>Ka,GraniteMoeHybridForCausalLM:()=>Qa,GraniteMoeHybridModel:()=>qa,GraniteMoeHybridPreTrainedModel:()=>To,GranitePreTrainedModel:()=>Yr,GroundingDinoForObjectDetection:()=>Lu,GroundingDinoPreTrainedModel:()=>gc,GroupViTModel:()=>Uo,GroupViTPreTrainedModel:()=>Zr,HeliumForCausalLM:()=>La,HeliumModel:()=>Gt,HeliumPreTrainedModel:()=>wo,HieraForImageClassification:()=>Cu,HieraModel:()=>Wl,HieraPreTrainedModel:()=>ri,HubertForCTC:()=>jc,HubertForSequenceClassification:()=>Nc,HubertModel:()=>gi,HubertPreTrainedModel:()=>Bu,IJepaForImageClassification:()=>bu,IJepaModel:()=>yl,IJepaPreTrainedModel:()=>No,Idefics3ForConditionalGeneration:()=>_n,Idefics3PreTrainedModel:()=>ia,ImageMattingOutput:()=>e,JAISLMHeadModel:()=>ba,JAISModel:()=>ya,JAISPreTrainedModel:()=>lo,JinaCLIPModel:()=>ha,JinaCLIPPreTrainedModel:()=>fn,JinaCLIPTextModel:()=>ma,JinaCLIPVisionModel:()=>_a,Lfm2ForCausalLM:()=>Da,Lfm2Model:()=>gu,Lfm2PreTrainedModel:()=>fo,LiteWhisperForConditionalGeneration:()=>Ji,Llama4ForCausalLM:()=>mo,Llama4PreTrainedModel:()=>Ia,LlamaForCausalLM:()=>ka,LlamaModel:()=>Xr,LlamaPreTrainedModel:()=>ho,LlavaForConditionalGeneration:()=>mn,LlavaOnevisionForConditionalGeneration:()=>Zi,LlavaPreTrainedModel:()=>so,LlavaQwen2ForCausalLM:()=>Gs,LongT5ForConditionalGeneration:()=>ms,LongT5Model:()=>ss,LongT5PreTrainedModel:()=>cs,M2M100ForConditionalGeneration:()=>Tc,M2M100Model:()=>xc,M2M100PreTrainedModel:()=>fi,MBartForCausalLM:()=>Zs,MBartForConditionalGeneration:()=>Ys,MBartForSequenceClassification:()=>ys,MBartModel:()=>Js,MBartPreTrainedModel:()=>Ms,MPNetForMaskedLM:()=>Se,MPNetForQuestionAnswering:()=>we,MPNetForSequenceClassification:()=>Pr,MPNetForTokenClassification:()=>pn,MPNetModel:()=>ar,MPNetPreTrainedModel:()=>Us,MT5ForConditionalGeneration:()=>zr,MT5Model:()=>Ws,MT5PreTrainedModel:()=>ds,MarianMTModel:()=>vc,MarianModel:()=>bc,MarianPreTrainedModel:()=>_i,MaskFormerForInstanceSegmentation:()=>nc,MaskFormerModel:()=>Iu,MaskFormerPreTrainedModel:()=>ci,MaskedLMOutput:()=>gs,Metric3DForDepthEstimation:()=>sc,Metric3DPreTrainedModel:()=>tc,Metric3Dv2ForDepthEstimation:()=>rc,Metric3Dv2PreTrainedModel:()=>ku,MgpstrForSceneTextRecognition:()=>xd,MgpstrModelOutput:()=>vd,MgpstrPreTrainedModel:()=>Ci,MimiDecoderModel:()=>Dd,MimiDecoderOutput:()=>Id,MimiEncoderModel:()=>Fd,MimiEncoderOutput:()=>kd,MimiModel:()=>Ad,MimiPreTrainedModel:()=>Vn,MistralForCausalLM:()=>Yc,MistralModel:()=>Jc,MistralPreTrainedModel:()=>Mi,MobileBertForMaskedLM:()=>Xt,MobileBertForQuestionAnswering:()=>Cs,MobileBertForSequenceClassification:()=>Ot,MobileBertModel:()=>gt,MobileBertPreTrainedModel:()=>Qe,MobileLLMForCausalLM:()=>Va,MobileLLMModel:()=>Na,MobileLLMPreTrainedModel:()=>bo,MobileNetV1ForImageClassification:()=>ud,MobileNetV1ForSemanticSegmentation:()=>pd,MobileNetV1Model:()=>Gu,MobileNetV1PreTrainedModel:()=>Bn,MobileNetV2ForImageClassification:()=>Ku,MobileNetV2ForSemanticSegmentation:()=>md,MobileNetV2Model:()=>hd,MobileNetV2PreTrainedModel:()=>Rn,MobileNetV3ForImageClassification:()=>Hu,MobileNetV3ForSemanticSegmentation:()=>fd,MobileNetV3Model:()=>_d,MobileNetV3PreTrainedModel:()=>jn,MobileNetV4ForImageClassification:()=>gd,MobileNetV4ForSemanticSegmentation:()=>wd,MobileNetV4Model:()=>Ei,MobileNetV4PreTrainedModel:()=>ln,MobileViTForImageClassification:()=>Pl,MobileViTModel:()=>Ho,MobileViTPreTrainedModel:()=>Ko,MobileViTV2ForImageClassification:()=>El,MobileViTV2Model:()=>qo,MobileViTV2PreTrainedModel:()=>en,ModelOutput:()=>ve,ModernBertDecoderForCausalLM:()=>ws,ModernBertDecoderModel:()=>At,ModernBertDecoderPreTrainedModel:()=>Ut,ModernBertForMaskedLM:()=>ct,ModernBertForSequenceClassification:()=>ft,ModernBertForTokenClassification:()=>Vt,ModernBertModel:()=>lt,ModernBertPreTrainedModel:()=>dt,Moondream1ForConditionalGeneration:()=>ea,MoonshineForConditionalGeneration:()=>Yi,MoonshineModel:()=>Er,MoonshinePreTrainedModel:()=>eo,MptForCausalLM:()=>fl,MptModel:()=>_l,MptPreTrainedModel:()=>Bo,MultiModalityCausalLM:()=>bd,MultiModalityPreTrainedModel:()=>yd,MusicgenForCausalLM:()=>Wu,MusicgenForConditionalGeneration:()=>Pi,MusicgenModel:()=>Uu,MusicgenPreTrainedModel:()=>zn,NeoBertForMaskedLM:()=>De,NeoBertForQuestionAnswering:()=>at,NeoBertForSequenceClassification:()=>Mt,NeoBertForTokenClassification:()=>et,NeoBertModel:()=>nt,NeoBertPreTrainedModel:()=>Ke,NomicBertModel:()=>Ss,NomicBertPreTrainedModel:()=>Zt,OPTForCausalLM:()=>gl,OPTModel:()=>yu,OPTPreTrainedModel:()=>Ro,Olmo2ForCausalLM:()=>Ga,Olmo2Model:()=>Jr,Olmo2PreTrainedModel:()=>xo,OlmoForCausalLM:()=>Wa,OlmoModel:()=>Ua,OlmoPreTrainedModel:()=>vo,OpenELMForCausalLM:()=>nl,OpenELMModel:()=>rl,OpenELMPreTrainedModel:()=>Fo,OwlViTForObjectDetection:()=>Cl,OwlViTModel:()=>xu,OwlViTPreTrainedModel:()=>Qo,Owlv2ForObjectDetection:()=>$l,Owlv2Model:()=>tn,Owlv2PreTrainedModel:()=>vn,PaliGemmaForConditionalGeneration:()=>na,PaliGemmaPreTrainedModel:()=>ra,PatchTSMixerForPrediction:()=>Cd,PatchTSMixerModel:()=>Ed,PatchTSMixerPreTrainedModel:()=>Si,PatchTSTForPrediction:()=>Pd,PatchTSTModel:()=>Td,PatchTSTPreTrainedModel:()=>$i,Phi3ForCausalLM:()=>pl,Phi3Model:()=>ul,Phi3PreTrainedModel:()=>Lo,Phi3VForCausalLM:()=>oo,Phi3VPreTrainedModel:()=>aa,PhiForCausalLM:()=>Hs,PhiModel:()=>dl,PhiPreTrainedModel:()=>Oo,PreTrainedModel:()=>j,PretrainedMixin:()=>Kt,PvtForImageClassification:()=>kr,PvtModel:()=>Vo,PvtPreTrainedModel:()=>fr,PyAnnoteForAudioFrameClassification:()=>rn,PyAnnoteModel:()=>Cc,PyAnnotePreTrainedModel:()=>kn,QuestionAnsweringModelOutput:()=>bs,Qwen2ForCausalLM:()=>il,Qwen2Model:()=>ol,Qwen2PreTrainedModel:()=>Do,Qwen2VLForConditionalGeneration:()=>Mu,Qwen2VLPreTrainedModel:()=>cl,Qwen3ForCausalLM:()=>ll,Qwen3Model:()=>al,Qwen3PreTrainedModel:()=>Mn,RFDetrForObjectDetection:()=>Pu,RFDetrModel:()=>Bl,RFDetrObjectDetectionOutput:()=>Rl,RFDetrPreTrainedModel:()=>zl,RTDetrForObjectDetection:()=>Pn,RTDetrModel:()=>Dl,RTDetrObjectDetectionOutput:()=>Rr,RTDetrPreTrainedModel:()=>sn,RTDetrV2ForObjectDetection:()=>Ll,RTDetrV2Model:()=>Ol,RTDetrV2ObjectDetectionOutput:()=>Jo,RTDetrV2PreTrainedModel:()=>En,ResNetForImageClassification:()=>Kl,ResNetModel:()=>Gl,ResNetPreTrainedModel:()=>ni,RoFormerForMaskedLM:()=>xs,RoFormerForQuestionAnswering:()=>br,RoFormerForSequenceClassification:()=>yr,RoFormerForTokenClassification:()=>Lr,RoFormerModel:()=>es,RoFormerPreTrainedModel:()=>Es,RobertaForMaskedLM:()=>Ps,RobertaForQuestionAnswering:()=>Jn,RobertaForSequenceClassification:()=>bt,RobertaForTokenClassification:()=>Jt,RobertaModel:()=>ps,RobertaPreTrainedModel:()=>tr,SamImageSegmentationOutput:()=>yc,SamModel:()=>Mc,SamPreTrainedModel:()=>wc,SapiensForDepthEstimation:()=>Su,SapiensForNormalEstimation:()=>Zl,SapiensForSemanticSegmentation:()=>Yl,SapiensPreTrainedModel:()=>Sn,SegformerForImageClassification:()=>id,SegformerForSemanticSegmentation:()=>Ti,SegformerModel:()=>Vu,SegformerPreTrainedModel:()=>an,Seq2SeqLMOutput:()=>Mp,SequenceClassifierOutput:()=>St,SiglipModel:()=>io,SiglipPreTrainedModel:()=>qr,SiglipTextModel:()=>Ks,SiglipVisionModel:()=>da,SmolLM3ForCausalLM:()=>wu,SmolLM3Model:()=>Oa,SmolLM3PreTrainedModel:()=>go,SmolVLMForConditionalGeneration:()=>no,SnacDecoderModel:()=>jd,SnacEncoderModel:()=>Ii,SnacModel:()=>Rd,SnacPreTrainedModel:()=>Fr,SpeechT5ForSpeechToText:()=>Hc,SpeechT5ForTextToSpeech:()=>qc,SpeechT5HifiGan:()=>ju,SpeechT5Model:()=>$p,SpeechT5PreTrainedModel:()=>An,SqueezeBertForMaskedLM:()=>ae,SqueezeBertForQuestionAnswering:()=>Pe,SqueezeBertForSequenceClassification:()=>pe,SqueezeBertModel:()=>B,SqueezeBertPreTrainedModel:()=>M,StableLmForCausalLM:()=>ld,StableLmModel:()=>ad,StableLmPreTrainedModel:()=>On,Starcoder2ForCausalLM:()=>rd,Starcoder2Model:()=>sd,Starcoder2PreTrainedModel:()=>yi,StyleTextToSpeech2Model:()=>Kc,StyleTextToSpeech2PreTrainedModel:()=>Gc,Swin2SRForImageSuperResolution:()=>ql,Swin2SRModel:()=>oi,Swin2SRPreTrainedModel:()=>jr,SwinForImageClassification:()=>$u,SwinForSemanticSegmentation:()=>$n,SwinModel:()=>Hl,SwinPreTrainedModel:()=>Cn,T5ForConditionalGeneration:()=>Yt,T5Model:()=>Ft,T5PreTrainedModel:()=>zt,TableTransformerForObjectDetection:()=>ti,TableTransformerModel:()=>Nl,TableTransformerObjectDetectionOutput:()=>Vl,TableTransformerPreTrainedModel:()=>ei,TokenClassifierOutput:()=>as,TrOCRForCausalLM:()=>Xc,TrOCRPreTrainedModel:()=>Qc,UltravoxModel:()=>Nn,UltravoxPreTrainedModel:()=>$d,UniSpeechForCTC:()=>Ic,UniSpeechForSequenceClassification:()=>Ac,UniSpeechModel:()=>kc,UniSpeechPreTrainedModel:()=>In,UniSpeechSatForAudioFrameClassification:()=>Lc,UniSpeechSatForCTC:()=>Dc,UniSpeechSatForSequenceClassification:()=>Oc,UniSpeechSatModel:()=>Fc,UniSpeechSatPreTrainedModel:()=>Nr,VaultGemmaForCausalLM:()=>So,VaultGemmaModel:()=>sl,VaultGemmaPreTrainedModel:()=>$o,ViTForImageClassification:()=>Ml,ViTMAEModel:()=>bl,ViTMAEPreTrainedModel:()=>fs,ViTMSNForImageClassification:()=>vu,ViTMSNModel:()=>vl,ViTMSNPreTrainedModel:()=>yn,ViTModel:()=>wl,ViTPreTrainedModel:()=>jo,VisionEncoderDecoderModel:()=>to,VitMatteForImageMatting:()=>Go,VitMattePreTrainedModel:()=>Wo,VitPoseForPoseEstimation:()=>Sr,VitPosePreTrainedModel:()=>$r,VitsModel:()=>Dn,VitsModelOutput:()=>s,VitsPreTrainedModel:()=>xi,VoxtralForConditionalGeneration:()=>Sd,Wav2Vec2BertForCTC:()=>Bc,Wav2Vec2BertForSequenceClassification:()=>Rc,Wav2Vec2BertModel:()=>zc,Wav2Vec2BertPreTrainedModel:()=>Vr,Wav2Vec2ForAudioFrameClassification:()=>Ec,Wav2Vec2ForCTC:()=>$s,Wav2Vec2ForSequenceClassification:()=>Pc,Wav2Vec2Model:()=>zu,Wav2Vec2PreTrainedModel:()=>gr,WavLMForAudioFrameClassification:()=>Ru,WavLMForCTC:()=>Vc,WavLMForSequenceClassification:()=>Uc,WavLMForXVector:()=>Wc,WavLMModel:()=>wi,WavLMPreTrainedModel:()=>nn,WeSpeakerResNetModel:()=>Sc,WeSpeakerResNetPreTrainedModel:()=>$c,WhisperForConditionalGeneration:()=>As,WhisperModel:()=>Xi,WhisperPreTrainedModel:()=>Zn,XLMForQuestionAnswering:()=>wt,XLMForSequenceClassification:()=>Hr,XLMForTokenClassification:()=>Le,XLMModel:()=>_r,XLMPreTrainedModel:()=>sr,XLMRobertaForMaskedLM:()=>Gi,XLMRobertaForQuestionAnswering:()=>Hi,XLMRobertaForSequenceClassification:()=>Ki,XLMRobertaForTokenClassification:()=>It,XLMRobertaModel:()=>Yn,XLMRobertaPreTrainedModel:()=>Br,XLMWithLMHeadModel:()=>yt,XVectorOutput:()=>Ui,YolosForObjectDetection:()=>Ir,YolosModel:()=>cr,YolosObjectDetectionOutput:()=>Ar,YolosPreTrainedModel:()=>qs});var _=n("./src/configs.js"),b=n("./src/backends/onnx.js"),F=n("./src/utils/dtypes.js"),q=n("./src/utils/generic.js"),S=n("./src/utils/core.js"),f=n("./src/utils/hub.js"),I=n("./src/utils/constants.js"),D=n("./src/generation/logits_process.js"),y=n("./src/generation/configuration_utils.js"),h=n("./src/utils/tensor.js"),V=n("./src/utils/image.js"),O=n("./src/utils/maths.js"),K=n("./src/generation/stopping_criteria.js"),me=n("./src/generation/logits_sampler.js"),R=n("./src/env.js"),G=n("./src/models/whisper/generation_whisper.js"),X=n("./src/models/whisper/common_whisper.js");const L={EncoderOnly:0,EncoderDecoder:1,Seq2Seq:2,Vision2Seq:3,DecoderOnly:4,MaskGeneration:5,ImageTextToText:6,Musicgen:7,MultiModality:8,Phi3V:9,AudioTextToText:10,AutoEncoder:11,ImageAudioTextToText:12},$=new Map,T=new Map,x=new Map;async function E(t,r,o){let i=o.config?.["transformers.js_config"]??{},a=o.device??i.device;a&&typeof a!="string"&&(a.hasOwnProperty(r)?a=a[r]:(console.warn(`device not specified for "${r}". Using the default device.`),a=null));const l=a??(R.apis.IS_NODE_ENV?"cpu":"wasm"),d=(0,b.deviceToExecutionProviders)(l),u=i.device_config??{};u.hasOwnProperty(l)&&(i={...i,...u[l]});let p=o.dtype??i.dtype;if(typeof p!="string"&&(p&&p.hasOwnProperty(r)?p=p[r]:(p=F.DEFAULT_DEVICE_DTYPE_MAPPING[l]??F.DATA_TYPES.fp32,console.warn(`dtype not specified for "${r}". Using the default dtype (${p}) for this device (${l}).`))),p===F.DATA_TYPES.auto){let Ae=i.dtype;typeof Ae!="string"&&(Ae=Ae?.[r]),Ae&&Ae!==F.DATA_TYPES.auto&&F.DATA_TYPES.hasOwnProperty(Ae)?p=Ae:p=F.DEFAULT_DEVICE_DTYPE_MAPPING[l]??F.DATA_TYPES.fp32}const w=p;if(F.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(w)){if(w===F.DATA_TYPES.fp16&&l==="webgpu"&&!await(0,F.isWebGpuFp16Supported)())throw new Error(`The device (${l}) does not support fp16.`)}else throw new Error(`Invalid dtype: ${w}. Should be one of: ${Object.keys(F.DATA_TYPES).join(", ")}`);const v=i.kv_cache_dtype,P=v?typeof v=="string"?v:v[w]??"float32":void 0;if(P&&!["float32","float16"].includes(P))throw new Error(`Invalid kv_cache_dtype: ${P}. Should be one of: float32, float16`);const C={dtype:w,kv_cache_dtype:P,device:l},A=F.DEFAULT_DTYPE_SUFFIX_MAPPING[w],H=`${r}${A}.onnx`,z=`${o.subfolder??""}/${H}`,k={...o.session_options};k.executionProviders??=d;const se=i.free_dimension_overrides;se?k.freeDimensionOverrides??=se:l.startsWith("webnn")&&!k.freeDimensionOverrides&&console.warn(`WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${l}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`);const Q=R.apis.IS_NODE_ENV&&R.env.useFSCache,ce=(0,f.getModelFile)(t,z,!0,o,Q),ye=o.use_external_data_format??i.use_external_data_format;let ge=[];if(ye){let Ae;typeof ye=="object"?ye.hasOwnProperty(H)?Ae=ye[H]:ye.hasOwnProperty(r)?Ae=ye[r]:Ae=!1:Ae=ye;const Je=+Ae;if(Je>f.MAX_EXTERNAL_DATA_CHUNKS)throw new Error(`The number of external data chunks (${Je}) exceeds the maximum allowed value (${f.MAX_EXTERNAL_DATA_CHUNKS}).`);for(let ht=0;ht<Je;++ht){const vt=`${H}_data${ht===0?"":"_"+ht}`,Xe=`${o.subfolder??""}/${vt}`;ge.push(new Promise(async(kt,Bt)=>{const rt=await(0,f.getModelFile)(t,Xe,!0,o,Q);kt(rt instanceof Uint8Array?{path:vt,data:rt}:vt)}))}}else k.externalData!==void 0&&(ge=k.externalData.map(async Ae=>{if(typeof Ae.data=="string"){const Je=await(0,f.getModelFile)(t,Ae.data,!0,o);return{...Ae,data:Je}}return Ae}));if(ge.length>0){const Ae=await Promise.all(ge);R.apis.IS_NODE_ENV||(k.externalData=Ae)}if(l==="webgpu"){const Ae=(0,_.getCacheShapes)(o.config,{prefix:"present"});if(Object.keys(Ae).length>0&&!(0,b.isONNXProxy)()){const Je={};for(const ht in Ae)Je[ht]="gpu-buffer";k.preferredOutputLocation=Je}}return{buffer_or_path:await ce,session_options:k,session_config:C}}async function Y(t,r,o){return Object.fromEntries(await Promise.all(Object.keys(r).map(async i=>{const{buffer_or_path:a,session_options:l,session_config:d}=await E(t,r[i],o),u=await(0,b.createInferenceSession)(a,l,d);return[i,u]})))}async function U(t,r,o){return Object.fromEntries(await Promise.all(Object.keys(r).map(async i=>{const a=await(0,f.getModelJSON)(t,r[i],!1,o);return[i,a]})))}function de(t,r){const o=Object.create(null),i=[];for(const d of t.inputNames){const u=r[d];if(!(u instanceof h.Tensor)){i.push(d);continue}o[d]=(0,b.isONNXProxy)()?u.clone():u}if(i.length>0)throw new Error(`An error occurred during model execution: "Missing the following inputs: ${i.join(", ")}.`);const a=Object.keys(r).length,l=t.inputNames.length;if(a>l){let d=Object.keys(r).filter(u=>!t.inputNames.includes(u));console.warn(`WARNING: Too many inputs were provided (${a} > ${l}). The following inputs will be ignored: "${d.join(", ")}".`)}return o}async function oe(t,r){const o=de(t,r);try{const i=Object.fromEntries(Object.entries(o).map(([l,d])=>[l,d.ort_tensor])),a=await(0,b.runInferenceSession)(t,i);return Z(a)}catch(i){const a=Object.fromEntries(Object.entries(o).map(([l,d])=>{const u={type:d.type,dims:d.dims,location:d.location};return u.location!=="gpu-buffer"&&(u.data=d.data),[l,u]}));throw console.error(`An error occurred during model execution: "${i}".`),console.error("Inputs given to model:",a),i}}function Z(t){for(let r in t)(0,b.isONNXTensor)(t[r])?t[r]=new h.Tensor(t[r]):typeof t[r]=="object"&&Z(t[r]);return t}function he(t){if(t instanceof h.Tensor)return t;if(t.length===0)throw Error("items must be non-empty");if(Array.isArray(t[0])){if(t.some(r=>r.length!==t[0].length))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");return new h.Tensor("int64",BigInt64Array.from(t.flat().map(r=>BigInt(r))),[t.length,t[0].length])}else return new h.Tensor("int64",BigInt64Array.from(t.map(r=>BigInt(r))),[1,t.length])}function ie(t){return new h.Tensor("bool",[t],[1])}async function Me(t,r){let{encoder_outputs:o,input_ids:i,decoder_input_ids:a,...l}=r;if(!o){const u=(0,S.pick)(r,t.sessions.model.inputNames);o=(await be(t,u)).last_hidden_state}return l.input_ids=a,l.encoder_hidden_states=o,t.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask")&&(l.encoder_attention_mask=r.attention_mask),await Re(t,l,!0)}async function be(t,r){const o=t.sessions.model,i=(0,S.pick)(r,o.inputNames);if(o.inputNames.includes("inputs_embeds")&&!i.inputs_embeds){if(!r.input_ids)throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");i.inputs_embeds=await t.encode_text({input_ids:r.input_ids})}if(o.inputNames.includes("token_type_ids")&&!i.token_type_ids){if(!i.input_ids)throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");i.token_type_ids=(0,h.zeros_like)(i.input_ids)}if(o.inputNames.includes("pixel_mask")&&!i.pixel_mask){if(!i.pixel_values)throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");const a=i.pixel_values.dims;i.pixel_mask=(0,h.ones)([a[0],a[2],a[3]])}return await oe(o,i)}async function fe(t,r){const o=await t.encode(r);return await t.decode(o)}async function Re(t,r,o=!1){const i=t.sessions[o?"decoder_model_merged":"model"],{past_key_values:a,...l}=r;if(i.inputNames.includes("use_cache_branch")&&(l.use_cache_branch=ie(!!a)),i.inputNames.includes("position_ids")&&l.attention_mask&&!l.position_ids){const u=["paligemma","gemma3_text","gemma3"].includes(t.config.model_type)?1:0;l.position_ids=Ge(l,a,u)}t.addPastKeyValues(l,a);const d=(0,S.pick)(l,i.inputNames);return await oe(i,d)}function ke({modality_token_id:t,inputs_embeds:r,modality_features:o,input_ids:i,attention_mask:a}){const l=i.tolist().map(w=>w.reduce((v,P,C)=>(P==t&&v.push(C),v),[])),d=l.reduce((w,v)=>w+v.length,0),u=o.dims[0];if(d!==u)throw new Error(`Number of tokens and features do not match: tokens: ${d}, features ${u}`);let p=0;for(let w=0;w<l.length;++w){const v=l[w],P=r[w];for(let C=0;C<v.length;++C)P[v[C]].data.set(o[p++].data)}return{inputs_embeds:r,attention_mask:a}}function le({image_token_id:t,inputs_embeds:r,image_features:o,input_ids:i,attention_mask:a}){return ke({modality_token_id:t,inputs_embeds:r,modality_features:o,input_ids:i,attention_mask:a})}function W({audio_token_id:t,inputs_embeds:r,audio_features:o,input_ids:i,attention_mask:a}){return ke({modality_token_id:t,inputs_embeds:r,modality_features:o,input_ids:i,attention_mask:a})}async function ne(t,{encode_function:r,merge_function:o,modality_input_name:i,modality_output_name:a,input_ids:l=null,attention_mask:d=null,position_ids:u=null,inputs_embeds:p=null,past_key_values:w=null,generation_config:v=null,logits_processor:P=null,...C}){const A=C[i];if(!p){if(p=await t.encode_text({input_ids:l,...C}),A&&l.dims[1]!==1){const z=await r({[i]:A,...C});({inputs_embeds:p,attention_mask:d}=o({[a]:z,inputs_embeds:p,input_ids:l,attention_mask:d}))}else if(w&&A&&l.dims[1]===1){const z=l.dims[1],k=Object.values(w)[0].dims.at(-2);d=(0,h.cat)([(0,h.ones)([l.dims[0],k]),d.slice(null,[d.dims[1]-z,d.dims[1]])],1)}}if(!u&&t.config.model_type==="qwen2_vl"){const{image_grid_thw:z,video_grid_thw:k}=C;[u]=t.get_rope_index(l,z,k,d)}return await Re(t,{inputs_embeds:p,past_key_values:w,attention_mask:d,position_ids:u,generation_config:v,logits_processor:P},!0)}async function _e(t,r){return await ne(t,{...r,modality_input_name:"audio_values",modality_output_name:"audio_features",encode_function:t.encode_audio.bind(t),merge_function:t._merge_input_ids_with_audio_features.bind(t)})}async function xe(t,r){return await ne(t,{...r,modality_input_name:"pixel_values",modality_output_name:"image_features",encode_function:t.encode_image.bind(t),merge_function:t._merge_input_ids_with_image_features.bind(t)})}function We(t,r=0){const[o,i]=t.dims,a=t.data,l=new BigInt64Array(a.length);for(let d=0;d<o;++d){const u=d*i;let p=BigInt(r);for(let w=0;w<i;++w){const v=u+w;a[v]===0n?l[v]=BigInt(1):(l[v]=p,p+=a[v])}}return{data:l,dims:t.dims}}function Ge(t,r=null,o=0){const{input_ids:i,inputs_embeds:a,attention_mask:l}=t,{data:d,dims:u}=We(l,o);let p=new h.Tensor("int64",d,u);if(r){const w=-(i??a).dims.at(1);p=p.slice(null,[w,null])}return p}function He(t,r,o,i){const a=o.past_key_values?Object.values(o.past_key_values)[0].dims.at(-2):0;if(!o.attention_mask){let l;for(const d of["input_ids","inputs_embeds","position_ids"])if(o[d]){l=o[d].dims;break}if(!l)throw new Error("attention_mask is not provided, and unable to infer its shape from model inputs.");o.attention_mask=(0,h.ones)([l[0],a+l[1]])}if(o.past_key_values){const{input_ids:l,attention_mask:d}=o;d&&d.dims[1]>l.dims[1]||a<l.dims[1]&&(o.input_ids=l.slice(null,[a,null]))}return o}function pt(t,r,o,i){return o.past_key_values&&(r=r.map(a=>[a.at(-1)])),{...o,decoder_input_ids:he(r)}}function ze(t,...r){return t.config.is_encoder_decoder?pt(t,...r):He(t,...r)}function J(t,r,o,i){const a=!!o.past_key_values;return i.guidance_scale!==null&&i.guidance_scale>1&&(a?o.input_ids=(0,h.cat)([o.input_ids,o.input_ids],0):(o.input_ids=(0,h.cat)([o.input_ids,(0,h.full_like)(o.input_ids,BigInt(i.pad_token_id))],0),o.attention_mask=(0,h.cat)([o.attention_mask,(0,h.full_like)(o.attention_mask,0n)],0))),(a||!o.pixel_values)&&(o.pixel_values=(0,h.full)([0,0,3,384,384],1)),a&&(o.images_seq_mask=new h.Tensor("bool",new Array(0+1).fill(!0).fill(!1,0,1),[1,0+1]),o.images_emb_mask=new h.Tensor("bool",new Array(0).fill(!1),[1,1,0])),o}class j extends q.Callable{main_input_name="input_ids";forward_params=["input_ids","attention_mask"];constructor(r,o,i){super(),this.config=r,this.sessions=o,this.configs=i;const a=x.get(this.constructor),l=$.get(a);switch(this.can_generate=!1,this._forward=null,this._prepare_inputs_for_generation=null,l){case L.DecoderOnly:this.can_generate=!0,this._forward=Re,this._prepare_inputs_for_generation=He;break;case L.Seq2Seq:case L.Vision2Seq:case L.Musicgen:this.can_generate=!0,this._forward=Me,this._prepare_inputs_for_generation=pt;break;case L.EncoderDecoder:this._forward=Me;break;case L.ImageTextToText:this.can_generate=!0,this._forward=xe,this._prepare_inputs_for_generation=ze;break;case L.AudioTextToText:this.can_generate=!0,this._forward=_e,this._prepare_inputs_for_generation=ze;break;case L.Phi3V:case L.ImageAudioTextToText:this.can_generate=!0,this._prepare_inputs_for_generation=ze;break;case L.MultiModality:this.can_generate=!0,this._prepare_inputs_for_generation=J;break;case L.AutoEncoder:this._forward=fe;break;default:this._forward=be;break}this.can_generate&&this.forward_params.push("past_key_values"),this.custom_config=this.config["transformers.js_config"]??{}}async dispose(){const r=[];for(const o of Object.values(this.sessions))o?.handler?.dispose&&r.push(o.handler.dispose());return await Promise.all(r)}static async from_pretrained(r,{progress_callback:o=null,config:i=null,cache_dir:a=null,local_files_only:l=!1,revision:d="main",model_file_name:u=null,subfolder:p="onnx",device:w=null,dtype:v=null,use_external_data_format:P=null,session_options:C={}}={}){let A={progress_callback:o,config:i,cache_dir:a,local_files_only:l,revision:d,model_file_name:u,subfolder:p,device:w,dtype:v,use_external_data_format:P,session_options:C};const H=x.get(this),z=$.get(H);i=A.config=await _.AutoConfig.from_pretrained(r,A);let k;if(z===L.DecoderOnly)k=await Promise.all([Y(r,{model:A.model_file_name??"model"},A),U(r,{generation_config:"generation_config.json"},A)]);else if(z===L.Seq2Seq||z===L.Vision2Seq)k=await Promise.all([Y(r,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},A),U(r,{generation_config:"generation_config.json"},A)]);else if(z===L.MaskGeneration)k=await Promise.all([Y(r,{model:"vision_encoder",prompt_encoder_mask_decoder:"prompt_encoder_mask_decoder"},A)]);else if(z===L.EncoderDecoder)k=await Promise.all([Y(r,{model:"encoder_model",decoder_model_merged:"decoder_model_merged"},A)]);else if(z===L.ImageTextToText){const se={embed_tokens:"embed_tokens",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};i.is_encoder_decoder&&(se.model="encoder_model"),k=await Promise.all([Y(r,se,A),U(r,{generation_config:"generation_config.json"},A)])}else if(z===L.AudioTextToText){const se={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",decoder_model_merged:"decoder_model_merged"};k=await Promise.all([Y(r,se,A),U(r,{generation_config:"generation_config.json"},A)])}else if(z===L.ImageAudioTextToText){const se={embed_tokens:"embed_tokens",audio_encoder:"audio_encoder",vision_encoder:"vision_encoder",decoder_model_merged:"decoder_model_merged"};k=await Promise.all([Y(r,se,A),U(r,{generation_config:"generation_config.json"},A)])}else if(z===L.Musicgen)k=await Promise.all([Y(r,{model:"text_encoder",decoder_model_merged:"decoder_model_merged",encodec_decode:"encodec_decode"},A),U(r,{generation_config:"generation_config.json"},A)]);else if(z===L.MultiModality)k=await Promise.all([Y(r,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"language_model",lm_head:"lm_head",gen_head:"gen_head",gen_img_embeds:"gen_img_embeds",image_decode:"image_decode"},A),U(r,{generation_config:"generation_config.json"},A)]);else if(z===L.Phi3V)k=await Promise.all([Y(r,{prepare_inputs_embeds:"prepare_inputs_embeds",model:"model",vision_encoder:"vision_encoder"},A),U(r,{generation_config:"generation_config.json"},A)]);else if(z===L.AutoEncoder)k=await Promise.all([Y(r,{encoder_model:"encoder_model",decoder_model:"decoder_model"},A)]);else{if(z!==L.EncoderOnly){const se=H??i?.model_type;se!=="custom"&&console.warn(`Model type for '${se}' not found, assuming encoder-only architecture. Please report this at ${I.GITHUB_ISSUE_URL}.`)}k=await Promise.all([Y(r,{model:A.model_file_name??"model"},A)])}return new this(i,...k)}async _call(r){return await this.forward(r)}async forward(r){return await this._forward(this,r)}get generation_config(){return this.configs?.generation_config??null}_get_logits_processor(r,o,i=null){const a=new D.LogitsProcessorList;if(r.repetition_penalty!==null&&r.repetition_penalty!==1&&a.push(new D.RepetitionPenaltyLogitsProcessor(r.repetition_penalty)),r.no_repeat_ngram_size!==null&&r.no_repeat_ngram_size>0&&a.push(new D.NoRepeatNGramLogitsProcessor(r.no_repeat_ngram_size)),r.bad_words_ids!==null&&a.push(new D.NoBadWordsLogitsProcessor(r.bad_words_ids,r.eos_token_id)),r.min_length!==null&&r.eos_token_id!==null&&r.min_length>0&&a.push(new D.MinLengthLogitsProcessor(r.min_length,r.eos_token_id)),r.min_new_tokens!==null&&r.eos_token_id!==null&&r.min_new_tokens>0&&a.push(new D.MinNewTokensLengthLogitsProcessor(o,r.min_new_tokens,r.eos_token_id)),r.forced_bos_token_id!==null&&a.push(new D.ForcedBOSTokenLogitsProcessor(r.forced_bos_token_id)),r.forced_eos_token_id!==null&&a.push(new D.ForcedEOSTokenLogitsProcessor(r.max_length,r.forced_eos_token_id)),r.begin_suppress_tokens!==null){const l=o>1||r.forced_bos_token_id===null?o:o+1;a.push(new D.SuppressTokensAtBeginLogitsProcessor(r.begin_suppress_tokens,l))}return r.guidance_scale!==null&&r.guidance_scale>1&&a.push(new D.ClassifierFreeGuidanceLogitsProcessor(r.guidance_scale)),r.do_sample&&r.temperature!==null&&r.temperature!==1&&a.push(new D.TemperatureLogitsWarper(r.temperature)),i!==null&&a.extend(i),a}_prepare_generation_config(r,o,i=y.GenerationConfig){const a={...this.config};for(const d of["decoder","generator","text_config"])d in a&&Object.assign(a,a[d]);const l=new i(a);return Object.assign(l,this.generation_config??{}),r&&Object.assign(l,r),o&&Object.assign(l,(0,S.pick)(o,Object.getOwnPropertyNames(l))),l}_get_stopping_criteria(r,o=null){const i=new K.StoppingCriteriaList;return r.max_length!==null&&i.push(new K.MaxLengthCriteria(r.max_length,this.config.max_position_embeddings??null)),r.eos_token_id!==null&&i.push(new K.EosTokenCriteria(r.eos_token_id)),o&&i.extend(o),i}_validate_model_class(){if(!this.can_generate){const r=[Oi,Li,Di,Ai],o=x.get(this.constructor),i=new Set,a=this.config.model_type;for(const d of r){const u=d.get(a);u&&i.add(u[0])}let l=`The current model class (${o}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;throw i.size>0&&(l+=` Please use the following class instead: ${[...i].join(", ")}`),Error(l)}}prepare_inputs_for_generation(...r){return this._prepare_inputs_for_generation(this,...r)}_update_model_kwargs_for_generation({generated_input_ids:r,outputs:o,model_inputs:i,is_encoder_decoder:a}){return i.past_key_values=this.getPastKeyValues(o,i.past_key_values),i.input_ids=new h.Tensor("int64",r.flat(),[r.length,1]),a||(i.attention_mask=(0,h.cat)([i.attention_mask,(0,h.ones)([i.attention_mask.dims[0],1])],1)),i.position_ids=null,i}_prepare_model_inputs({inputs:r,bos_token_id:o,model_kwargs:i}){const a=(0,S.pick)(i,this.forward_params),l=this.main_input_name;if(l in a){if(r)throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...")}else a[l]=r;return{inputs_tensor:a[l],model_inputs:a,model_input_name:l}}async _prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:r,model_inputs:o,model_input_name:i,generation_config:a}){if(this.sessions.model.inputNames.includes("inputs_embeds")&&!o.inputs_embeds&&"_prepare_inputs_embeds"in this){const{input_ids:d,pixel_values:u,attention_mask:p,...w}=o,v=await this._prepare_inputs_embeds(o);o={...w,...(0,S.pick)(v,["inputs_embeds","attention_mask"])}}let{last_hidden_state:l}=await be(this,o);if(a.guidance_scale!==null&&a.guidance_scale>1)l=(0,h.cat)([l,(0,h.full_like)(l,0)],0),"attention_mask"in o&&(o.attention_mask=(0,h.cat)([o.attention_mask,(0,h.zeros_like)(o.attention_mask)],0));else if(o.decoder_input_ids){const d=he(o.decoder_input_ids).dims[0];if(d!==l.dims[0]){if(l.dims[0]!==1)throw new Error(`The encoder outputs have a different batch size (${l.dims[0]}) than the decoder inputs (${d}).`);l=(0,h.cat)(Array.from({length:d},()=>l),0)}}return o.encoder_outputs=l,o}_prepare_decoder_input_ids_for_generation({batch_size:r,model_input_name:o,model_kwargs:i,decoder_start_token_id:a,bos_token_id:l,generation_config:d}){let{decoder_input_ids:u,...p}=i;if(!(u instanceof h.Tensor)){if(u)Array.isArray(u[0])||(u=Array.from({length:r},()=>u));else if(a??=l,this.config.model_type==="musicgen")u=Array.from({length:r*this.config.decoder.num_codebooks},()=>[a]);else if(Array.isArray(a)){if(a.length!==r)throw new Error(`\`decoder_start_token_id\` expcted to have length ${r} but got ${a.length}`);u=a}else u=Array.from({length:r},()=>[a]);u=he(u)}return i.decoder_attention_mask=(0,h.ones_like)(u),{input_ids:u,model_inputs:p}}async generate({inputs:r=null,generation_config:o=null,logits_processor:i=null,stopping_criteria:a=null,streamer:l=null,...d}){this._validate_model_class(),o=this._prepare_generation_config(o,d);let{inputs_tensor:u,model_inputs:p,model_input_name:w}=this._prepare_model_inputs({inputs:r,model_kwargs:d});const v=this.config.is_encoder_decoder;v&&("encoder_outputs"in p||(p=await this._prepare_encoder_decoder_kwargs_for_generation({inputs_tensor:u,model_inputs:p,model_input_name:w,generation_config:o})));let P;v?{input_ids:P,model_inputs:p}=this._prepare_decoder_input_ids_for_generation({batch_size:p[w].dims.at(0),model_input_name:w,model_kwargs:p,decoder_start_token_id:o.decoder_start_token_id,bos_token_id:o.bos_token_id,generation_config:o}):P=p[w];let C=P.dims.at(-1);o.max_new_tokens!==null&&(o.max_length=C+o.max_new_tokens);const A=this._get_logits_processor(o,C,i),H=this._get_stopping_criteria(o,a),z=p[w].dims.at(0),k=me.LogitsSampler.getSampler(o),se=new Array(z).fill(0),Q=P.tolist();l&&l.put(Q);let ce,ye={};for(;;){if(p=this.prepare_inputs_for_generation(Q,p,o),ce=await this.forward(p),o.output_attentions&&o.return_dict_in_generate){const Xe=this.getAttentions(ce);for(const kt in Xe)kt in ye||(ye[kt]=[]),ye[kt].push(Xe[kt])}const Ae=ce.logits.slice(null,-1,null),Je=A(Q,Ae),ht=[];for(let Xe=0;Xe<Je.dims.at(0);++Xe){const kt=Je[Xe],Bt=await k(kt);for(const[rt,Pt]of Bt){const Lt=BigInt(rt);se[Xe]+=Pt,Q[Xe].push(Lt),ht.push([Lt]);break}}if(l&&l.put(ht),H(Q).every(Xe=>Xe))break;p=this._update_model_kwargs_for_generation({generated_input_ids:ht,outputs:ce,model_inputs:p,is_encoder_decoder:v})}l&&l.end();const ge=this.getPastKeyValues(ce,p.past_key_values,!0),Ie=new h.Tensor("int64",Q.flat(),[Q.length,Q[0].length]);if(o.return_dict_in_generate)return{sequences:Ie,past_key_values:ge,...ye};for(const Ae of Object.values(ce))Ae.location==="gpu-buffer"&&Ae.dispose();return Ie}getPastKeyValues(r,o,i=!1){const a=Object.create(null);for(const l in r)if(l.startsWith("present")){const d=l.replace("present_conv","past_conv").replace("present","past_key_values"),u=l.includes("encoder");if(u&&o?a[d]=o[d]:a[d]=r[l],o&&(!u||i)){const p=o[d];p.location==="gpu-buffer"&&p.dispose()}}return a}getAttentions(r){const o={};for(const i of["cross_attentions","encoder_attentions","decoder_attentions"])for(const a in r)a.startsWith(i)&&(i in o||(o[i]=[]),o[i].push(r[a]));return o}addPastKeyValues(r,o){if(o)Object.assign(r,o);else{const i=this.sessions.decoder_model_merged??this.sessions.model,a=(r[this.main_input_name]??r.attention_mask)?.dims?.[0]??1,l=i?.config?.kv_cache_dtype??"float32",d=l==="float16"?h.DataTypeMap.float16:h.DataTypeMap.float32,u=(0,_.getCacheShapes)(this.config,{batch_size:a});for(const p in u){const w=u[p].reduce((v,P)=>v*P,1);r[p]=new h.Tensor(l,new d(w),u[p])}}}async encode_image({pixel_values:r}){return(await oe(this.sessions.vision_encoder,{pixel_values:r})).image_features}async encode_text({input_ids:r}){return(await oe(this.sessions.embed_tokens,{input_ids:r})).inputs_embeds}async encode_audio({audio_values:r}){return(await oe(this.sessions.audio_encoder,{audio_values:r})).audio_features}}class ve{}class Fe extends ve{constructor({last_hidden_state:r,hidden_states:o=null,attentions:i=null}){super(),this.last_hidden_state=r,this.hidden_states=o,this.attentions=i}}class Oe extends j{}class je extends Oe{}class Ee extends Oe{async _call(r){return new gs(await super._call(r))}}class Ne extends Oe{async _call(r){return new St(await super._call(r))}}class $e extends Oe{async _call(r){return new as(await super._call(r))}}class Ue extends Oe{async _call(r){return new bs(await super._call(r))}}class Ke extends j{}class nt extends Ke{}class De extends Ke{async _call(r){return new gs(await super._call(r))}}class Mt extends Ke{async _call(r){return new St(await super._call(r))}}class et extends Ke{async _call(r){return new as(await super._call(r))}}class at extends Ke{async _call(r){return new bs(await super._call(r))}}class dt extends j{}class lt extends dt{}class ct extends dt{async _call(r){return new gs(await super._call(r))}}class ft extends dt{async _call(r){return new St(await super._call(r))}}class Vt extends dt{async _call(r){return new as(await super._call(r))}}class Ut extends j{}class At extends Ut{}class ws extends Ut{}class Zt extends j{}class Ss extends Zt{}class Es extends j{}class es extends Es{}class xs extends Es{async _call(r){return new gs(await super._call(r))}}class yr extends Es{async _call(r){return new St(await super._call(r))}}class Lr extends Es{async _call(r){return new as(await super._call(r))}}class br extends Es{async _call(r){return new bs(await super._call(r))}}class Xs extends j{}class Tt extends Xs{}class vr extends Xs{async _call(r){return new gs(await super._call(r))}}class ur extends Xs{async _call(r){return new St(await super._call(r))}}class Dt extends Xs{async _call(r){return new as(await super._call(r))}}class or extends Xs{async _call(r){return new bs(await super._call(r))}}class g extends j{}class te extends g{}class N extends g{async _call(r){return new gs(await super._call(r))}}class ee extends g{async _call(r){return new St(await super._call(r))}}class ue extends g{async _call(r){return new as(await super._call(r))}}class Te extends g{async _call(r){return new bs(await super._call(r))}}class Ce extends j{}class ut extends Ce{}class mt extends Ce{async _call(r){return new gs(await super._call(r))}}class Ze extends Ce{async _call(r){return new St(await super._call(r))}}class _t extends Ce{async _call(r){return new as(await super._call(r))}}class Nt extends Ce{async _call(r){return new bs(await super._call(r))}}class ts extends j{}class Qt extends ts{}class Fs extends ts{async _call(r){return new gs(await super._call(r))}}class Ls extends ts{async _call(r){return new St(await super._call(r))}}class Ts extends ts{async _call(r){return new as(await super._call(r))}}class rs extends ts{async _call(r){return new bs(await super._call(r))}}class zs extends j{}class pr extends zs{}class xr extends zs{async _call(r){return new gs(await super._call(r))}}class Ds extends zs{async _call(r){return new St(await super._call(r))}}class ks extends zs{async _call(r){return new as(await super._call(r))}}class Os extends zs{async _call(r){return new bs(await super._call(r))}}class Bs extends j{}class Rs extends Bs{}class Vs extends Bs{async _call(r){return new St(await super._call(r))}}class ir extends Bs{async _call(r){return new as(await super._call(r))}}class hr extends Bs{async _call(r){return new bs(await super._call(r))}}class xt extends Bs{async _call(r){return new gs(await super._call(r))}}class js extends j{}class mr extends js{}class Tr extends js{async _call(r){return new gs(await super._call(r))}}class Is extends js{async _call(r){return new St(await super._call(r))}}class qe extends js{async _call(r){return new as(await super._call(r))}}class Qe extends j{}class gt extends Qe{}class Xt extends Qe{async _call(r){return new gs(await super._call(r))}}class Ot extends Qe{async _call(r){return new St(await super._call(r))}}class Cs extends Qe{async _call(r){return new bs(await super._call(r))}}class Us extends j{}class ar extends Us{}class Se extends Us{async _call(r){return new gs(await super._call(r))}}class Pr extends Us{async _call(r){return new St(await super._call(r))}}class pn extends Us{async _call(r){return new as(await super._call(r))}}class we extends Us{async _call(r){return new bs(await super._call(r))}}class M extends j{}class B extends M{}class ae extends M{async _call(r){return new gs(await super._call(r))}}class pe extends M{async _call(r){return new St(await super._call(r))}}class Pe extends M{async _call(r){return new bs(await super._call(r))}}class Be extends j{}class st extends Be{}class tt extends Be{async _call(r){return new St(await super._call(r))}}class ot extends Be{async _call(r){return new bs(await super._call(r))}}class Ye extends Be{async _call(r){return new gs(await super._call(r))}}class zt extends j{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"]}class Ft extends zt{}class Yt extends zt{}class cs extends j{}class ss extends cs{}class ms extends cs{}class ds extends j{}class Ws extends ds{}class zr extends ds{}class _s extends j{}class lr extends _s{}class qt extends _s{}class ns extends _s{async _call(r){return new St(await super._call(r))}}class Ms extends j{}class Js extends Ms{}class Ys extends Ms{}class ys extends Ms{async _call(r){return new St(await super._call(r))}}class Zs extends Ms{}class us extends j{}class os extends us{}class is extends us{}class Ct extends j{}class Wt extends Ct{}class er extends Ct{}class tr extends j{}class ps extends tr{}class Ps extends tr{async _call(r){return new gs(await super._call(r))}}class bt extends tr{async _call(r){return new St(await super._call(r))}}class Jt extends tr{async _call(r){return new as(await super._call(r))}}class Jn extends tr{async _call(r){return new bs(await super._call(r))}}class sr extends j{}class _r extends sr{}class yt extends sr{async _call(r){return new gs(await super._call(r))}}class Hr extends sr{async _call(r){return new St(await super._call(r))}}class Le extends sr{async _call(r){return new as(await super._call(r))}}class wt extends sr{async _call(r){return new bs(await super._call(r))}}class Br extends j{}class Yn extends Br{}class Gi extends Br{async _call(r){return new gs(await super._call(r))}}class Ki extends Br{async _call(r){return new St(await super._call(r))}}class It extends Br{async _call(r){return new as(await super._call(r))}}class Hi extends Br{async _call(r){return new bs(await super._call(r))}}class hn extends j{}class qi extends hn{}class Qi extends hn{}class Zn extends j{requires_attention_mask=!1;main_input_name="input_features";forward_params=["input_features","attention_mask","decoder_input_ids","decoder_attention_mask","past_key_values"]}class Xi extends Zn{}class As extends Zn{_prepare_generation_config(r,o){return super._prepare_generation_config(r,o,G.WhisperGenerationConfig)}_retrieve_init_tokens(r){const o=[r.decoder_start_token_id];let i=r.language;const a=r.task;if(r.is_multilingual){i||(console.warn("No language specified - defaulting to English (en)."),i="en");const d=`<|${(0,X.whisper_language_to_code)(i)}|>`;o.push(r.lang_to_id[d]),o.push(r.task_to_id[a??"transcribe"])}else if(i||a)throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");return!r.return_timestamps&&r.no_timestamps_token_id&&o.at(-1)!==r.no_timestamps_token_id?o.push(r.no_timestamps_token_id):r.return_timestamps&&o.at(-1)===r.no_timestamps_token_id&&(console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."),o.pop()),o.filter(l=>l!=null)}async generate({inputs:r=null,generation_config:o=null,logits_processor:i=null,stopping_criteria:a=null,...l}){o=this._prepare_generation_config(o,l);const d=l.decoder_input_ids??this._retrieve_init_tokens(o);if(o.return_timestamps&&(i??=new D.LogitsProcessorList,i.push(new D.WhisperTimeStampLogitsProcessor(o,d))),o.begin_suppress_tokens&&(i??=new D.LogitsProcessorList,i.push(new D.SuppressTokensAtBeginLogitsProcessor(o.begin_suppress_tokens,d.length))),o.return_token_timestamps){if(!o.alignment_heads)throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");o.task==="translate"&&console.warn("Token-level timestamps may not be reliable for task 'translate'."),o.output_attentions=!0,o.return_dict_in_generate=!0}const u=await super.generate({inputs:r,generation_config:o,logits_processor:i,decoder_input_ids:d,...l});return o.return_token_timestamps&&(u.token_timestamps=this._extract_token_timestamps(u,o.alignment_heads,o.num_frames)),u}_extract_token_timestamps(r,o,i=null,a=.02){if(!r.cross_attentions)throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");i==null&&console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");let l=this.config.median_filter_width;l===void 0&&(console.warn("Model config has no `median_filter_width`, using default value of 7."),l=7);const d=r.cross_attentions,u=Array.from({length:this.config.decoder_layers},(z,k)=>(0,h.cat)(d.map(se=>se[k]),2)),p=(0,h.stack)(o.map(([z,k])=>{if(z>=u.length)throw new Error(`Layer index ${z} is out of bounds for cross attentions (length ${u.length}).`);return i?u[z].slice(null,k,null,[0,i]):u[z].slice(null,k)})).transpose(1,0,2,3),[w,v]=(0,h.std_mean)(p,-2,0,!0),P=p.clone();for(let z=0;z<P.dims[0];++z){const k=P[z];for(let se=0;se<k.dims[0];++se){const Q=k[se],ce=w[z][se][0].data,ye=v[z][se][0].data;for(let ge=0;ge<Q.dims[0];++ge){let Ie=Q[ge].data;for(let Ae=0;Ae<Ie.length;++Ae)Ie[Ae]=(Ie[Ae]-ye[Ae])/ce[Ae];Ie.set((0,O.medianFilter)(Ie,l))}}}const C=[(0,h.mean)(P,1)],A=r.sequences.dims,H=new h.Tensor("float32",new Float32Array(A[0]*A[1]),A);for(let z=0;z<A[0];++z){const k=C[z].neg().squeeze_(0),[se,Q]=(0,O.dynamic_time_warping)(k.tolist()),ce=Array.from({length:se.length-1},(Ie,Ae)=>se[Ae+1]-se[Ae]),ye=(0,S.mergeArrays)([1],ce).map(Ie=>!!Ie),ge=[];for(let Ie=0;Ie<ye.length;++Ie)ye[Ie]&&ge.push(Q[Ie]*a);H[z].data.set(ge,1)}return H}}class Ji extends As{}class eo extends j{requires_attention_mask=!1;main_input_name="input_values";forward_params=["input_values","decoder_input_ids","past_key_values"]}class Er extends eo{}class Yi extends eo{}class to extends j{main_input_name="pixel_values";forward_params=["pixel_values","decoder_input_ids","encoder_hidden_states","past_key_values"]}class so extends j{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class mn extends so{_merge_input_ids_with_image_features(r){const o=r.image_features.dims.at(-1),i=r.image_features.view(-1,o);return le({image_token_id:this.config.image_token_index,...r,image_features:i})}}class Zi extends mn{}class ea extends mn{}class ta extends j{forward_params=["input_ids","inputs_embeds","attention_mask","pixel_values","encoder_outputs","decoder_input_ids","decoder_inputs_embeds","decoder_attention_mask","past_key_values"];main_input_name="inputs_embeds"}class sa extends ta{_merge_input_ids_with_image_features({inputs_embeds:r,image_features:o,input_ids:i,attention_mask:a}){return{inputs_embeds:(0,h.cat)([o,r],1),attention_mask:(0,h.cat)([(0,h.ones)(o.dims.slice(0,2)),a],1)}}async _prepare_inputs_embeds({input_ids:r,pixel_values:o,inputs_embeds:i,attention_mask:a}){if(!r&&!o)throw new Error("Either `input_ids` or `pixel_values` should be provided.");let l,d;return r&&(l=await this.encode_text({input_ids:r})),o&&(d=await this.encode_image({pixel_values:o})),l&&d?{inputs_embeds:i,attention_mask:a}=this._merge_input_ids_with_image_features({inputs_embeds:l,image_features:d,input_ids:r,attention_mask:a}):i=l||d,{inputs_embeds:i,attention_mask:a}}async forward({input_ids:r,pixel_values:o,attention_mask:i,decoder_input_ids:a,decoder_attention_mask:l,encoder_outputs:d,past_key_values:u,inputs_embeds:p,decoder_inputs_embeds:w}){if(p||({inputs_embeds:p,attention_mask:i}=await this._prepare_inputs_embeds({input_ids:r,pixel_values:o,inputs_embeds:p,attention_mask:i})),!d){let{last_hidden_state:C}=await be(this,{inputs_embeds:p,attention_mask:i});d=C}if(!w){if(!a)throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");w=await this.encode_text({input_ids:a})}return await Re(this,{inputs_embeds:w,attention_mask:l,encoder_attention_mask:i,encoder_hidden_states:d,past_key_values:u},!0)}}class ra extends j{forward_params=["input_ids","attention_mask","pixel_values","position_ids","past_key_values"]}class na extends ra{_merge_input_ids_with_image_features(r){const o=r.image_features.dims.at(-1),i=r.image_features.view(-1,o);return le({image_token_id:this.config.image_token_index,...r,image_features:i})}}class Gs extends so{_merge_input_ids_with_image_features(r){const o=r.image_features.dims.at(-1),i=r.image_features.view(-1,o);return le({image_token_id:this.config.image_token_index,...r,image_features:i})}}class oa extends j{forward_params=["input_ids","attention_mask","inputs_embeds","per_layer_inputs","position_ids","pixel_values","input_features","input_features_mask","past_key_values"]}class ro extends oa{async forward({input_ids:r=null,attention_mask:o=null,pixel_values:i=null,input_features:a=null,input_features_mask:l=null,position_ids:d=null,inputs_embeds:u=null,per_layer_inputs:p=null,past_key_values:w=null,generation_config:v=null,logits_processor:P=null,...C}){if((!u||!p)&&({inputs_embeds:u,per_layer_inputs:p}=await oe(this.sessions.embed_tokens,{input_ids:r}),r.dims[1]!==1)){if(i){const{image_features:H}=await oe(this.sessions.vision_encoder,{pixel_values:i});({inputs_embeds:u,attention_mask:o}=this._merge_input_ids_with_image_features({image_features:H,inputs_embeds:u,input_ids:r,attention_mask:o}))}if(a){const{audio_features:H}=await oe(this.sessions.audio_encoder,{input_features:a,input_features_mask:l});({inputs_embeds:u,attention_mask:o}=this._merge_input_ids_with_audio_features({audio_features:H,inputs_embeds:u,input_ids:r,attention_mask:o}))}}return await Re(this,{inputs_embeds:u,per_layer_inputs:p,past_key_values:w,attention_mask:o,position_ids:d,generation_config:v,logits_processor:P},!0)}_merge_input_ids_with_image_features(r){const o=r.image_features.dims.at(-1),i=r.image_features.view(-1,o);return le({image_token_id:this.config.image_token_id,...r,image_features:i})}_merge_input_ids_with_audio_features(r){const o=r.audio_features.dims.at(-1),i=r.audio_features.view(-1,o);return W({audio_token_id:this.config.audio_token_id,...r,audio_features:i})}}class ia extends j{forward_params=["input_ids","attention_mask","pixel_values","pixel_attention_mask","position_ids","past_key_values"]}class _n extends ia{async encode_image({pixel_values:r,pixel_attention_mask:o}){return(await oe(this.sessions.vision_encoder,{pixel_values:r,pixel_attention_mask:o})).image_features}_merge_input_ids_with_image_features(r){const o=r.image_features.dims.at(-1),i=r.image_features.view(-1,o);return le({image_token_id:this.config.image_token_id,...r,image_features:i})}}class no extends _n{}class aa extends j{forward_params=["input_ids","inputs_embeds","attention_mask","position_ids","pixel_values","image_sizes","past_key_values"]}class oo extends aa{async forward({input_ids:r=null,attention_mask:o=null,pixel_values:i=null,image_sizes:a=null,position_ids:l=null,inputs_embeds:d=null,past_key_values:u=null,generation_config:p=null,logits_processor:w=null,...v}){if(!d){let C;if(i&&r.dims[1]!==1){if(!a)throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");({image_features:C}=await oe(this.sessions.vision_encoder,{pixel_values:i,image_sizes:a}))}else{const A=this.config.normalized_config.hidden_size;C=new h.Tensor("float32",[],[0,A])}({inputs_embeds:d}=await oe(this.sessions.prepare_inputs_embeds,{input_ids:r,image_features:C}))}return await Re(this,{inputs_embeds:d,past_key_values:u,attention_mask:o,position_ids:l,generation_config:p,logits_processor:w},!1)}}class Cr extends j{}class la extends Cr{}class mu extends Cr{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"text_model"})}}class _u extends Cr{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"text_model"})}}class rr extends Cr{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"vision_model"})}}class ca extends Cr{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"vision_model"})}}class qr extends j{}class io extends qr{}class Ks extends qr{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"text_model"})}}class da extends Cr{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"vision_model"})}}class ua extends j{}class pa extends ua{}class fn extends j{}class ha extends fn{async forward(r){const o=!r.input_ids,i=!r.pixel_values;if(o&&i)throw new Error("Either `input_ids` or `pixel_values` should be provided.");if(o&&(r.input_ids=(0,h.ones)([r.pixel_values.dims[0],1])),i){const{image_size:w}=this.config.vision_config;r.pixel_values=(0,h.full)([0,3,w,w],0)}const{text_embeddings:a,image_embeddings:l,l2norm_text_embeddings:d,l2norm_image_embeddings:u}=await super.forward(r),p={};return o||(p.text_embeddings=a,p.l2norm_text_embeddings=d),i||(p.image_embeddings=l,p.l2norm_image_embeddings=u),p}}class ma extends fn{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"text_model"})}}class _a extends fn{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"vision_model"})}}class ao extends j{}class fa extends ao{}class ga extends ao{}class Ns extends j{}class wa extends Ns{}class Ma extends Ns{}class lo extends j{}class ya extends lo{}class ba extends lo{}class co extends j{}class va extends co{}class xa extends co{}class uo extends j{}class Ta extends uo{}class po extends uo{}class gn extends j{}class Pa extends gn{}class Ea extends gn{}class wn extends j{}class fu extends wn{}class Ca extends wn{}class Qr extends j{}class $a extends Qr{}class Sa extends Qr{}class ho extends j{}class Xr extends ho{}class ka extends ho{}class Ia extends j{}class mo extends Ia{}class _o extends j{}class Aa extends _o{}class Fa extends _o{}class fo extends j{}class gu extends fo{}class Da extends fo{}class go extends j{}class Oa extends go{}class wu extends go{}class wo extends j{}class Gt extends wo{}class La extends wo{}class Mo extends j{}class za extends Mo{}class Ba extends Mo{}class yo extends j{}class Ra extends yo{}class ja extends yo{}class bo extends j{}class Na extends bo{}class Va extends bo{}class vo extends j{}class Ua extends vo{}class Wa extends vo{}class xo extends j{}class Jr extends xo{}class Ga extends xo{}class Yr extends j{}class Ka extends Yr{}class Ha extends Yr{}class To extends j{}class qa extends To{}class Qa extends To{}class Po extends j{}class Xa extends Po{}class Ja extends Po{}class Eo extends j{}class Ya extends Eo{}class Za extends Eo{}class Co extends j{}class el extends Co{}class tl extends Co{}class $o extends j{}class sl extends $o{}class So extends $o{}class ko extends j{}class Io extends ko{}class Ao extends ko{}class Fo extends j{}class rl extends Fo{}class nl extends Fo{}class Do extends j{}class ol extends Do{}class il extends Do{}class Mn extends j{}class al extends Mn{}class ll extends Mn{}class cl extends j{forward_params=["input_ids","attention_mask","position_ids","past_key_values","pixel_values","image_grid_thw"]}class Mu extends cl{get_rope_index(r,o,i,a){const{vision_config:l,image_token_id:d,video_token_id:u,vision_start_token_id:p}=this.config,w=l.spatial_merge_size??2,v=[];if(o||i){let P=r.tolist();a||(a=(0,h.ones_like)(r));const C=a.tolist(),A=Array.from({length:3},Q=>Array.from({length:r.dims[0]},ce=>Array.from({length:r.dims[1]},ye=>1))),H=o?o.tolist():[],z=i?i.tolist():[];let k=0,se=0;for(let Q=0;Q<P.length;++Q){const ce=P[Q].filter((Rt,Ve)=>C[Q][Ve]==1),ge=ce.reduce((Rt,Ve,it)=>(Ve==p&&Rt.push(it),Rt),[]).map(Rt=>ce[Rt+1]),Ie=ge.filter(Rt=>Rt==d).length,Ae=ge.filter(Rt=>Rt==u).length;let Je=[],ht=0,vt=Ie,Xe=Ae;for(let Rt=0;Rt<ge.length;++Rt){const Ve=ce.findIndex((Kn,Mr)=>Mr>ht&&Kn==d),it=ce.findIndex((Kn,Mr)=>Mr>ht&&Kn==u),$t=vt>0&&Ve!==-1?Ve:ce.length+1,jt=Xe>0&&it!==-1?it:ce.length+1;let hs,Or,vs,ls;$t<jt?([Or,vs,ls]=H[k],++k,--vt,hs=$t):([Or,vs,ls]=z[se],++se,--Xe,hs=jt);const[Kr,du,Wi]=[Number(Or),Math.floor(Number(vs)/w),Math.floor(Number(ls)/w)],Fp=hs-ht,Vp=Je.length>0?(0,O.max)(Je.at(-1))[0]+1:0;Je.push(Array.from({length:3*Fp},(Kn,Mr)=>Vp+Mr%Fp));const Dp=Fp+Vp,yp=Kr*du*Wi,fh=Array.from({length:yp},(Kn,Mr)=>Dp+Math.floor(Mr/(du*Wi))),gh=Array.from({length:yp},(Kn,Mr)=>Dp+Math.floor(Mr/Wi)%du),wh=Array.from({length:yp},(Kn,Mr)=>Dp+Mr%Wi);Je.push([fh,gh,wh].flat()),ht=hs+yp}if(ht<ce.length){const Rt=Je.length>0?(0,O.max)(Je.at(-1))[0]+1:0,Ve=ce.length-ht;Je.push(Array.from({length:3*Ve},(it,$t)=>Rt+$t%Ve))}const kt=Je.reduce((Rt,Ve)=>Rt+Ve.length,0),Bt=new Array(kt);let rt=0;for(let Rt=0;Rt<3;++Rt)for(let Ve=0;Ve<Je.length;++Ve){const it=Je[Ve],$t=it.length/3;for(let jt=Rt*$t;jt<(Rt+1)*$t;++jt)Bt[rt++]=it[jt]}let Pt=0;const Lt=C[Q];for(let Rt=0;Rt<Lt.length;++Rt)if(Lt[Rt]==1){for(let Ve=0;Ve<3;++Ve)A[Ve][Q][Rt]=Bt[Ve*kt/3+Pt];++Pt}const Et=(0,O.max)(Bt)[0];v.push(Et+1-P[Q].length)}return[new h.Tensor("int64",A.flat(1/0),[3,r.dims[0],r.dims[1]]),new h.Tensor("int64",v,[v.length,1])]}else if(a){const{data:P,dims:C}=We(a),A=BigInt64Array.from({length:3*P.length},(z,k)=>P[k%P.length]),H=Array.from({length:C[0]},(z,k)=>(0,O.max)(P.subarray(C[1]*k,C[1]*(k+1)))[0]+1n+BigInt(C[1]));return[new h.Tensor("int64",A,[3,...C]),new h.Tensor("int64",H,[H.length,1])]}else{const[P,C]=r.dims,A=BigInt64Array.from({length:3*P*C},(H,z)=>BigInt(Math.floor(z%C/P)));return[new h.Tensor("int64",A,[3,...r.dims]),(0,h.zeros)([P,1])]}}async encode_image({pixel_values:r,image_grid_thw:o}){return(await oe(this.sessions.vision_encoder,{pixel_values:r,grid_thw:o})).image_features}_merge_input_ids_with_image_features(r){return le({image_token_id:this.config.image_token_id,...r})}prepare_inputs_for_generation(r,o,i){if(o.attention_mask&&!o.position_ids)if(!o.past_key_values)[o.position_ids,o.rope_deltas]=this.get_rope_index(o.input_ids,o.image_grid_thw,o.video_grid_thw,o.attention_mask);else{o.pixel_values=null;const a=BigInt(Object.values(o.past_key_values)[0].dims.at(-2)),l=o.rope_deltas.map(d=>a+d);o.position_ids=(0,h.stack)([l,l,l],0)}return o}}class Oo extends j{}class dl extends Oo{}class Hs extends Oo{}class Lo extends j{}class ul extends Lo{}class pl extends Lo{}class zo extends j{}class hl extends zo{}class ml extends zo{}class Bo extends j{}class _l extends Bo{}class fl extends Bo{}class Ro extends j{}class yu extends Ro{}class gl extends Ro{}class jo extends j{}class wl extends jo{}class Ml extends jo{async _call(r){return new St(await super._call(r))}}class No extends j{}class yl extends No{}class bu extends No{async _call(r){return new St(await super._call(r))}}class $r extends j{}class Sr extends $r{}class fr extends j{}class Vo extends fr{}class kr extends fr{async _call(r){return new St(await super._call(r))}}class fs extends j{}class bl extends fs{}class yn extends j{}class vl extends yn{}class vu extends yn{async _call(r){return new St(await super._call(r))}}class Zr extends j{}class Uo extends Zr{}class bn extends j{}class xl extends bn{}class Tl extends bn{async _call(r){return new St(await super._call(r))}}class Wo extends j{}class Go extends Wo{async _call(r){return new e(await super._call(r))}}class Ko extends j{}class Ho extends Ko{}class Pl extends Ko{async _call(r){return new St(await super._call(r))}}class en extends j{}class qo extends en{}class El extends en{async _call(r){return new St(await super._call(r))}}class Qo extends j{}class xu extends Qo{}class Cl extends Qo{}class vn extends j{}class tn extends vn{}class $l extends vn{}class xn extends j{}class Sl extends xn{}class kl extends xn{async _call(r){return new St(await super._call(r))}}class Tn extends j{}class Tu extends Tn{}class Il extends Tn{async _call(r){return new Al(await super._call(r))}}class Xo extends Tn{async _call(r){return new Fl(await super._call(r))}}class Al extends ve{constructor({logits:r,pred_boxes:o}){super(),this.logits=r,this.pred_boxes=o}}class Fl extends ve{constructor({logits:r,pred_boxes:o,pred_masks:i}){super(),this.logits=r,this.pred_boxes=o,this.pred_masks=i}}class sn extends j{}class Dl extends sn{}class Pn extends sn{async _call(r){return new Rr(await super._call(r))}}class Rr extends ve{constructor({logits:r,pred_boxes:o}){super(),this.logits=r,this.pred_boxes=o}}class En extends j{}class Ol extends En{}class Ll extends En{async _call(r){return new Jo(await super._call(r))}}class Jo extends Rr{}class zl extends j{}class Bl extends zl{}class Pu extends zl{async _call(r){return new Rl(await super._call(r))}}class Rl extends Rr{}class Yo extends j{}class jl extends Yo{}class Zo extends Yo{async _call(r){return new Rr(await super._call(r))}}class ei extends j{}class Nl extends ei{}class ti extends ei{async _call(r){return new Vl(await super._call(r))}}class Vl extends Al{}class si extends j{}class Eu extends si{}class Ul extends si{async _call(r){return new St(await super._call(r))}}class ri extends j{}class Wl extends ri{}class Cu extends ri{async _call(r){return new St(await super._call(r))}}class ni extends j{}class Gl extends ni{}class Kl extends ni{async _call(r){return new St(await super._call(r))}}class Cn extends j{}class Hl extends Cn{}class $u extends Cn{async _call(r){return new St(await super._call(r))}}class $n extends Cn{}class jr extends j{}class oi extends jr{}class ql extends jr{}class ii extends j{}class Ql extends ii{}class Xl extends ii{}class ai extends j{}class Jl extends ai{}class Sn extends j{}class Yl extends Sn{}class Su extends Sn{}class Zl extends Sn{}class li extends j{}class ec extends li{}class tc extends j{}class sc extends tc{}class ku extends j{}class rc extends ku{}class ci extends j{}class Iu extends ci{}class nc extends ci{}class di extends j{}class oc extends di{}class ic extends di{}class Au extends j{}class ac extends Au{}class ui extends j{}class lc extends ui{}class Fu extends ui{async _call(r){return new St(await super._call(r))}}class pi extends j{}class cc extends pi{}class dc extends pi{async _call(r){return new St(await super._call(r))}}class hi extends j{}class Du extends hi{}class uc extends hi{async _call(r){return new St(await super._call(r))}}class mi extends j{}class pc extends mi{}class hc extends mi{async _call(r){return new St(await super._call(r))}}class Ou extends j{}class mc extends Ou{}class _c extends j{}class fc extends _c{}class gc extends j{}class Lu extends gc{}class qs extends j{}class cr extends qs{}class Ir extends qs{async _call(r){return new Ar(await super._call(r))}}class Ar extends ve{constructor({logits:r,pred_boxes:o}){super(),this.logits=r,this.pred_boxes=o}}class wc extends j{}class Mc extends wc{async get_image_embeddings({pixel_values:r}){return await be(this,{pixel_values:r})}async forward(r){if((!r.image_embeddings||!r.image_positional_embeddings)&&(r={...r,...await this.get_image_embeddings(r)}),!r.input_labels&&r.input_points){const i=r.input_points.dims.slice(0,-1),a=i.reduce((l,d)=>l*d,1);r.input_labels=new h.Tensor("int64",new BigInt64Array(a).fill(1n),i)}const o={image_embeddings:r.image_embeddings,image_positional_embeddings:r.image_positional_embeddings};return r.input_points&&(o.input_points=r.input_points),r.input_labels&&(o.input_labels=r.input_labels),r.input_boxes&&(o.input_boxes=r.input_boxes),await oe(this.sessions.prompt_encoder_mask_decoder,o)}async _call(r){return new yc(await super._call(r))}}class yc extends ve{constructor({iou_scores:r,pred_masks:o}){super(),this.iou_scores=r,this.pred_masks=o}}class _i extends j{}class bc extends _i{}class vc extends _i{}class fi extends j{}class xc extends fi{}class Tc extends fi{}class gr extends j{}class zu extends gr{}class $s extends gr{async _call(r){return new Gr(await super._call(r))}}class Pc extends gr{async _call(r){return new St(await super._call(r))}}class Ec extends gr{async _call(r){return new as(await super._call(r))}}class kn extends j{}class Cc extends kn{}class rn extends kn{async _call(r){return new as(await super._call(r))}}class $c extends j{}class Sc extends $c{}class In extends j{}class kc extends In{}class Ic extends In{async _call(r){return new Gr(await super._call(r))}}class Ac extends In{async _call(r){return new St(await super._call(r))}}class Nr extends j{}class Fc extends Nr{}class Dc extends Nr{async _call(r){return new Gr(await super._call(r))}}class Oc extends Nr{async _call(r){return new St(await super._call(r))}}class Lc extends Nr{async _call(r){return new as(await super._call(r))}}class Vr extends j{}class zc extends Vr{}class Bc extends Vr{async _call(r){return new Gr(await super._call(r))}}class Rc extends Vr{async _call(r){return new St(await super._call(r))}}class Bu extends j{}class gi extends gr{}class jc extends gr{async _call(r){return new Gr(await super._call(r))}}class Nc extends gr{async _call(r){return new St(await super._call(r))}}class nn extends j{}class wi extends nn{}class Vc extends nn{async _call(r){return new Gr(await super._call(r))}}class Uc extends nn{async _call(r){return new St(await super._call(r))}}class Wc extends nn{async _call(r){return new Ui(await super._call(r))}}class Ru extends nn{async _call(r){return new as(await super._call(r))}}class Gc extends j{}class Kc extends Gc{}class An extends j{}class $p extends An{}class Hc extends An{}class qc extends An{async generate_speech(r,o,{threshold:i=.5,minlenratio:a=0,maxlenratio:l=20,vocoder:d=null}={}){const u={input_ids:r},{encoder_outputs:p,encoder_attention_mask:w}=await be(this,u),v=p.dims[1]/this.config.reduction_factor,P=Math.floor(v*l),C=Math.floor(v*a),A=this.config.num_mel_bins;let H=[],z=null,k=null,se=0;for(;;){++se;const ye=ie(!!k);let ge;k?ge=k.output_sequence_out:ge=new h.Tensor("float32",new Float32Array(A),[1,1,A]);let Ie={use_cache_branch:ye,output_sequence:ge,encoder_attention_mask:w,speaker_embeddings:o,encoder_hidden_states:p};this.addPastKeyValues(Ie,z),k=await oe(this.sessions.decoder_model_merged,Ie),z=this.getPastKeyValues(k,z);const{prob:Ae,spectrum:Je}=k;if(H.push(Je),se>=C&&(Array.from(Ae.data).filter(ht=>ht>=i).length>0||se>=P))break}const Q=(0,h.cat)(H),{waveform:ce}=await oe(d.sessions.model,{spectrogram:Q});return{spectrogram:Q,waveform:ce}}}class ju extends j{main_input_name="spectrogram"}class Qc extends j{}class Xc extends Qc{}class Mi extends j{}class Jc extends Mi{}class Yc extends Mi{}class Zc extends j{}class ed extends Zc{}class td extends Zc{}class yi extends j{}class sd extends yi{}class rd extends yi{}class bi extends j{}class nd extends bi{}class od extends bi{}class Fn extends j{}class Nu extends Fn{}class on extends Fn{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"text_model"})}}class vi extends Fn{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"audio_model"})}}class xi extends j{}class Dn extends xi{async _call(r){return new s(await super._call(r))}}class an extends j{}class Vu extends an{}class id extends an{}class Ti extends an{}class On extends j{}class ad extends On{}class ld extends On{}class Ln extends j{}class cd extends Ln{}class dd extends Ln{async _call(r){return new St(await super._call(r))}}class zn extends j{}class Uu extends zn{}class Wu extends zn{}class Pi extends j{forward_params=["input_ids","attention_mask","encoder_outputs","decoder_input_ids","decoder_attention_mask","past_key_values"];_apply_and_filter_by_delay_pattern_mask(r){const[o,i]=r.dims,a=this.config.decoder.num_codebooks,l=i-a;let d=0;for(let w=0;w<r.size;++w){if(r.data[w]===this.config.decoder.pad_token_id)continue;const v=w%i,P=Math.floor(w/i)%a,C=v-P;C>0&&C<=l&&(r.data[d++]=r.data[w])}const u=Math.floor(o/a),p=d/(u*a);return new h.Tensor(r.type,r.data.slice(0,d),[u,a,p])}prepare_inputs_for_generation(r,o,i){let a=structuredClone(r);for(let d=0;d<a.length;++d)for(let u=0;u<a[d].length;++u)d%this.config.decoder.num_codebooks>=u&&(a[d][u]=BigInt(this.config.decoder.pad_token_id));return i.guidance_scale!==null&&i.guidance_scale>1&&(a=a.concat(a)),super.prepare_inputs_for_generation(a,o,i)}async generate(r){const o=await super.generate(r),i=this._apply_and_filter_by_delay_pattern_mask(o).unsqueeze_(0),{audio_values:a}=await oe(this.sessions.encodec_decode,{audio_codes:i});return a}}class Bn extends j{}class Gu extends Bn{}class ud extends Bn{async _call(r){return new St(await super._call(r))}}class pd extends Bn{}class Rn extends j{}class hd extends Rn{}class Ku extends Rn{async _call(r){return new St(await super._call(r))}}class md extends Rn{}class jn extends j{}class _d extends jn{}class Hu extends jn{async _call(r){return new St(await super._call(r))}}class fd extends jn{}class ln extends j{}class Ei extends ln{}class gd extends ln{async _call(r){return new St(await super._call(r))}}class wd extends ln{}class Md extends j{}class qu extends Md{}class yd extends j{}class bd extends yd{forward_params=["input_ids","pixel_values","images_seq_mask","images_emb_mask","attention_mask","position_ids","past_key_values"];constructor(...r){super(...r),this._generation_mode="text"}async forward(r){const o=this._generation_mode??"text";let i;if(o==="text"||!r.past_key_values){const p=this.sessions.prepare_inputs_embeds,w=(0,S.pick)(r,p.inputNames);i=await oe(p,w)}else{const p=this.sessions.gen_img_embeds,w=(0,S.pick)({image_ids:r.input_ids},p.inputNames);i=await oe(p,w)}const a={...r,...i},l=await Re(this,a),d=this.sessions[o==="text"?"lm_head":"gen_head"];if(!d)throw new Error(`Unable to find "${d}" generation head`);const u=await oe(d,(0,S.pick)(l,d.inputNames));return{...i,...l,...u}}async generate(r){return this._generation_mode="text",super.generate(r)}async generate_images(r){this._generation_mode="image";const o=(r.inputs??r[this.main_input_name]).dims[1],a=(await super.generate(r)).slice(null,[o,null]),l=this.sessions.image_decode,{decoded_image:d}=await oe(l,{generated_tokens:a}),u=d.add_(1).mul_(255/2).clamp_(0,255).to("uint8"),p=[];for(const w of u){const v=V.RawImage.fromTensor(w);p.push(v)}return p}}class vd extends ve{constructor({char_logits:r,bpe_logits:o,wp_logits:i}){super(),this.char_logits=r,this.bpe_logits=o,this.wp_logits=i}get logits(){return[this.char_logits,this.bpe_logits,this.wp_logits]}}class Ci extends j{}class xd extends Ci{async _call(r){return new vd(await super._call(r))}}class $i extends j{}class Td extends $i{}class Pd extends $i{}class Si extends j{}class Ed extends Si{}class Cd extends Si{}class $d extends j{forward_params=["input_ids","attention_mask","position_ids","audio_values","past_key_values"]}class Nn extends $d{_merge_input_ids_with_audio_features(r){const o=r.audio_features.dims.at(-1),i=r.audio_features.view(-1,o);return W({audio_token_id:this.config.ignore_index??this.config.audio_token_id,...r,audio_features:i})}}class Sd extends Nn{}class Vn extends j{main_input_name="input_values";forward_params=["input_values"]}class kd extends ve{constructor({audio_codes:r}){super(),this.audio_codes=r}}class Id extends ve{constructor({audio_values:r}){super(),this.audio_values=r}}class Ad extends Vn{async encode(r){return new kd(await oe(this.sessions.encoder_model,r))}async decode(r){return new Id(await oe(this.sessions.decoder_model,r))}}class Fd extends Vn{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"encoder_model"})}}class Dd extends Vn{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"decoder_model"})}}class ki extends j{main_input_name="input_values";forward_params=["input_values"]}class Od extends ve{constructor({audio_codes:r}){super(),this.audio_codes=r}}class Ld extends ve{constructor({audio_values:r}){super(),this.audio_values=r}}class zd extends ki{async encode(r){return new Od(await oe(this.sessions.encoder_model,r))}async decode(r){return new Ld(await oe(this.sessions.decoder_model,r))}}class Qu extends ki{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"encoder_model"})}}class Bd extends ki{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"decoder_model"})}}class Fr extends j{main_input_name="input_values";forward_params=["input_values"]}class Rd extends Fr{async encode(r){return await oe(this.sessions.encoder_model,r)}async decode(r){return await oe(this.sessions.decoder_model,r)}}class Ii extends Fr{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"encoder_model"})}}class jd extends Fr{static async from_pretrained(r,o={}){return super.from_pretrained(r,{...o,model_file_name:o.model_file_name??"decoder_model"})}}class Kt{static MODEL_CLASS_MAPPINGS=null;static BASE_IF_FAIL=!1;static async from_pretrained(r,{progress_callback:o=null,config:i=null,cache_dir:a=null,local_files_only:l=!1,revision:d="main",model_file_name:u=null,subfolder:p="onnx",device:w=null,dtype:v=null,use_external_data_format:P=null,session_options:C={}}={}){const A={progress_callback:o,config:i,cache_dir:a,local_files_only:l,revision:d,model_file_name:u,subfolder:p,device:w,dtype:v,use_external_data_format:P,session_options:C};if(A.config=await _.AutoConfig.from_pretrained(r,A),!this.MODEL_CLASS_MAPPINGS)throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: "+this.name);const H=A.config.model_type;for(const z of this.MODEL_CLASS_MAPPINGS){let k=z.get(H);if(!k){for(const se of z.values())if(se[0]===H){k=se;break}if(!k)continue}return await k[1].from_pretrained(r,A)}if(this.BASE_IF_FAIL)return Ri.has(H)||console.warn(`Unknown model class "${H}", attempting to construct from base class.`),await j.from_pretrained(r,A);throw Error(`Unsupported model type: ${H}`)}}const Xu=new Map([["bert",["BertModel",je]],["neobert",["NeoBertModel",nt]],["modernbert",["ModernBertModel",lt]],["nomic_bert",["NomicBertModel",Ss]],["roformer",["RoFormerModel",es]],["electra",["ElectraModel",te]],["esm",["EsmModel",mr]],["convbert",["ConvBertModel",Tt]],["camembert",["CamembertModel",ut]],["deberta",["DebertaModel",Qt]],["deberta-v2",["DebertaV2Model",pr]],["mpnet",["MPNetModel",ar]],["albert",["AlbertModel",st]],["distilbert",["DistilBertModel",Rs]],["roberta",["RobertaModel",ps]],["xlm",["XLMModel",_r]],["xlm-roberta",["XLMRobertaModel",Yn]],["clap",["ClapModel",Nu]],["clip",["CLIPModel",la]],["clipseg",["CLIPSegModel",fa]],["chinese_clip",["ChineseCLIPModel",pa]],["siglip",["SiglipModel",io]],["jina_clip",["JinaCLIPModel",ha]],["mobilebert",["MobileBertModel",gt]],["squeezebert",["SqueezeBertModel",B]],["wav2vec2",["Wav2Vec2Model",zu]],["wav2vec2-bert",["Wav2Vec2BertModel",zc]],["unispeech",["UniSpeechModel",kc]],["unispeech-sat",["UniSpeechSatModel",Fc]],["hubert",["HubertModel",gi]],["wavlm",["WavLMModel",wi]],["audio-spectrogram-transformer",["ASTModel",qi]],["vits",["VitsModel",Dn]],["pyannote",["PyAnnoteModel",Cc]],["wespeaker-resnet",["WeSpeakerResNetModel",Sc]],["detr",["DetrModel",Tu]],["rt_detr",["RTDetrModel",Dl]],["rt_detr_v2",["RTDetrV2Model",Ol]],["rf_detr",["RFDetrModel",Bl]],["d_fine",["DFineModel",jl]],["table-transformer",["TableTransformerModel",Nl]],["vit",["ViTModel",wl]],["ijepa",["IJepaModel",yl]],["pvt",["PvtModel",Vo]],["vit_msn",["ViTMSNModel",vl]],["vit_mae",["ViTMAEModel",bl]],["groupvit",["GroupViTModel",Uo]],["fastvit",["FastViTModel",xl]],["mobilevit",["MobileViTModel",Ho]],["mobilevitv2",["MobileViTV2Model",qo]],["owlvit",["OwlViTModel",xu]],["owlv2",["Owlv2Model",tn]],["beit",["BeitModel",Sl]],["deit",["DeiTModel",Eu]],["hiera",["HieraModel",Wl]],["convnext",["ConvNextModel",lc]],["convnextv2",["ConvNextV2Model",cc]],["dinov2",["Dinov2Model",Du]],["dinov2_with_registers",["Dinov2WithRegistersModel",pc]],["dinov3_vit",["DINOv3ViTModel",mc]],["dinov3_convnext",["DINOv3ConvNextModel",fc]],["resnet",["ResNetModel",Gl]],["swin",["SwinModel",Hl]],["swin2sr",["Swin2SRModel",oi]],["donut-swin",["DonutSwinModel",ac]],["yolos",["YolosModel",cr]],["dpt",["DPTModel",Ql]],["glpn",["GLPNModel",oc]],["hifigan",["SpeechT5HifiGan",ju]],["efficientnet",["EfficientNetModel",cd]],["decision_transformer",["DecisionTransformerModel",qu]],["patchtst",["PatchTSTForPrediction",Td]],["patchtsmixer",["PatchTSMixerForPrediction",Ed]],["mobilenet_v1",["MobileNetV1Model",Gu]],["mobilenet_v2",["MobileNetV2Model",hd]],["mobilenet_v3",["MobileNetV3Model",_d]],["mobilenet_v4",["MobileNetV4Model",Ei]],["maskformer",["MaskFormerModel",Iu]],["mgp-str",["MgpstrForSceneTextRecognition",xd]],["style_text_to_speech_2",["StyleTextToSpeech2Model",Kc]]]),Ju=new Map([["t5",["T5Model",Ft]],["longt5",["LongT5Model",ss]],["mt5",["MT5Model",Ws]],["bart",["BartModel",lr]],["mbart",["MBartModel",Js]],["marian",["MarianModel",bc]],["whisper",["WhisperModel",Xi]],["m2m_100",["M2M100Model",xc]],["blenderbot",["BlenderbotModel",os]],["blenderbot-small",["BlenderbotSmallModel",Wt]]]),Sp=new Map([["mimi",["MimiModel",Ad]],["dac",["DacModel",zd]],["snac",["SnacModel",Rd]]]),Yu=new Map([["bloom",["BloomModel",hl]],["jais",["JAISModel",ya]],["gpt2",["GPT2Model",wa]],["gptj",["GPTJModel",Pa]],["gpt_bigcode",["GPTBigCodeModel",fu]],["gpt_neo",["GPTNeoModel",va]],["gpt_neox",["GPTNeoXModel",Ta]],["codegen",["CodeGenModel",$a]],["llama",["LlamaModel",Xr]],["arcee",["ArceeModel",Aa]],["lfm2",["Lfm2Model",gu]],["smollm3",["SmolLM3Model",Oa]],["exaone",["ExaoneModel",Ra]],["olmo",["OlmoModel",Ua]],["olmo2",["Olmo2Model",Jr]],["mobilellm",["MobileLLMModel",Na]],["granite",["GraniteModel",Ka]],["granitemoehybrid",["GraniteMoeHybridModel",qa]],["cohere",["CohereModel",Xa]],["gemma",["GemmaModel",Ya]],["gemma2",["Gemma2Model",el]],["vaultgemma",["VaultGemmaModel",sl]],["gemma3_text",["Gemma3Model",Io]],["helium",["HeliumModel",Gt]],["glm",["GlmModel",za]],["openelm",["OpenELMModel",rl]],["qwen2",["Qwen2Model",ol]],["qwen3",["Qwen3Model",al]],["phi",["PhiModel",dl]],["phi3",["Phi3Model",ul]],["mpt",["MptModel",_l]],["opt",["OPTModel",yu]],["mistral",["MistralModel",Jc]],["ernie4_5",["Ernie4_5_Model",ed]],["starcoder2",["Starcoder2Model",sd]],["falcon",["FalconModel",nd]],["stablelm",["StableLmModel",ad]],["modernbert-decoder",["ModernBertDecoderModel",At]]]),Ai=new Map([["speecht5",["SpeechT5ForSpeechToText",Hc]],["whisper",["WhisperForConditionalGeneration",As]],["lite-whisper",["LiteWhisperForConditionalGeneration",Ji]],["moonshine",["MoonshineForConditionalGeneration",Yi]]]),Nd=new Map([["speecht5",["SpeechT5ForTextToSpeech",qc]]]),Vd=new Map([["vits",["VitsModel",Dn]],["musicgen",["MusicgenForConditionalGeneration",Pi]]]),Zu=new Map([["bert",["BertForSequenceClassification",Ne]],["neobert",["NeoBertForSequenceClassification",Mt]],["modernbert",["ModernBertForSequenceClassification",ft]],["roformer",["RoFormerForSequenceClassification",yr]],["electra",["ElectraForSequenceClassification",ee]],["esm",["EsmForSequenceClassification",Is]],["convbert",["ConvBertForSequenceClassification",ur]],["camembert",["CamembertForSequenceClassification",Ze]],["deberta",["DebertaForSequenceClassification",Ls]],["deberta-v2",["DebertaV2ForSequenceClassification",Ds]],["mpnet",["MPNetForSequenceClassification",Pr]],["albert",["AlbertForSequenceClassification",tt]],["distilbert",["DistilBertForSequenceClassification",Vs]],["roberta",["RobertaForSequenceClassification",bt]],["xlm",["XLMForSequenceClassification",Hr]],["xlm-roberta",["XLMRobertaForSequenceClassification",Ki]],["bart",["BartForSequenceClassification",ns]],["mbart",["MBartForSequenceClassification",ys]],["mobilebert",["MobileBertForSequenceClassification",Ot]],["squeezebert",["SqueezeBertForSequenceClassification",pe]]]),Fi=new Map([["bert",["BertForTokenClassification",$e]],["neobert",["NeoBertForTokenClassification",et]],["modernbert",["ModernBertForTokenClassification",Vt]],["roformer",["RoFormerForTokenClassification",Lr]],["electra",["ElectraForTokenClassification",ue]],["esm",["EsmForTokenClassification",qe]],["convbert",["ConvBertForTokenClassification",Dt]],["camembert",["CamembertForTokenClassification",_t]],["deberta",["DebertaForTokenClassification",Ts]],["deberta-v2",["DebertaV2ForTokenClassification",ks]],["mpnet",["MPNetForTokenClassification",pn]],["distilbert",["DistilBertForTokenClassification",ir]],["roberta",["RobertaForTokenClassification",Jt]],["xlm",["XLMForTokenClassification",Le]],["xlm-roberta",["XLMRobertaForTokenClassification",It]]]),Di=new Map([["t5",["T5ForConditionalGeneration",Yt]],["longt5",["LongT5ForConditionalGeneration",ms]],["mt5",["MT5ForConditionalGeneration",zr]],["bart",["BartForConditionalGeneration",qt]],["mbart",["MBartForConditionalGeneration",Ys]],["marian",["MarianMTModel",vc]],["m2m_100",["M2M100ForConditionalGeneration",Tc]],["blenderbot",["BlenderbotForConditionalGeneration",is]],["blenderbot-small",["BlenderbotSmallForConditionalGeneration",er]]]),Oi=new Map([["bloom",["BloomForCausalLM",ml]],["gpt2",["GPT2LMHeadModel",Ma]],["jais",["JAISLMHeadModel",ba]],["gptj",["GPTJForCausalLM",Ea]],["gpt_bigcode",["GPTBigCodeForCausalLM",Ca]],["gpt_neo",["GPTNeoForCausalLM",xa]],["gpt_neox",["GPTNeoXForCausalLM",po]],["codegen",["CodeGenForCausalLM",Sa]],["llama",["LlamaForCausalLM",ka]],["llama4_text",["Llama4ForCausalLM",mo]],["arcee",["ArceeForCausalLM",Fa]],["lfm2",["Lfm2ForCausalLM",Da]],["smollm3",["SmolLM3ForCausalLM",wu]],["exaone",["ExaoneForCausalLM",ja]],["olmo",["OlmoForCausalLM",Wa]],["olmo2",["Olmo2ForCausalLM",Ga]],["mobilellm",["MobileLLMForCausalLM",Va]],["granite",["GraniteForCausalLM",Ha]],["granitemoehybrid",["GraniteMoeHybridForCausalLM",Qa]],["cohere",["CohereForCausalLM",Ja]],["gemma",["GemmaForCausalLM",Za]],["gemma2",["Gemma2ForCausalLM",tl]],["vaultgemma",["VaultGemmaForCausalLM",So]],["gemma3_text",["Gemma3ForCausalLM",Ao]],["helium",["HeliumForCausalLM",La]],["glm",["GlmForCausalLM",Ba]],["openelm",["OpenELMForCausalLM",nl]],["qwen2",["Qwen2ForCausalLM",il]],["qwen3",["Qwen3ForCausalLM",ll]],["phi",["PhiForCausalLM",Hs]],["phi3",["Phi3ForCausalLM",pl]],["mpt",["MptForCausalLM",fl]],["opt",["OPTForCausalLM",gl]],["mbart",["MBartForCausalLM",Zs]],["mistral",["MistralForCausalLM",Yc]],["ernie4_5",["Ernie4_5_ForCausalLM",td]],["starcoder2",["Starcoder2ForCausalLM",rd]],["falcon",["FalconForCausalLM",od]],["trocr",["TrOCRForCausalLM",Xc]],["stablelm",["StableLmForCausalLM",ld]],["modernbert-decoder",["ModernBertDecoderForCausalLM",ws]],["phi3_v",["Phi3VForCausalLM",oo]]]),ep=new Map([["multi_modality",["MultiModalityCausalLM",bd]]]),Ud=new Map([["bert",["BertForMaskedLM",Ee]],["neobert",["NeoBertForMaskedLM",De]],["modernbert",["ModernBertForMaskedLM",ct]],["roformer",["RoFormerForMaskedLM",xs]],["electra",["ElectraForMaskedLM",N]],["esm",["EsmForMaskedLM",Tr]],["convbert",["ConvBertForMaskedLM",vr]],["camembert",["CamembertForMaskedLM",mt]],["deberta",["DebertaForMaskedLM",Fs]],["deberta-v2",["DebertaV2ForMaskedLM",xr]],["mpnet",["MPNetForMaskedLM",Se]],["albert",["AlbertForMaskedLM",Ye]],["distilbert",["DistilBertForMaskedLM",xt]],["roberta",["RobertaForMaskedLM",Ps]],["xlm",["XLMWithLMHeadModel",yt]],["xlm-roberta",["XLMRobertaForMaskedLM",Gi]],["mobilebert",["MobileBertForMaskedLM",Xt]],["squeezebert",["SqueezeBertForMaskedLM",ae]]]),tp=new Map([["bert",["BertForQuestionAnswering",Ue]],["neobert",["NeoBertForQuestionAnswering",at]],["roformer",["RoFormerForQuestionAnswering",br]],["electra",["ElectraForQuestionAnswering",Te]],["convbert",["ConvBertForQuestionAnswering",or]],["camembert",["CamembertForQuestionAnswering",Nt]],["deberta",["DebertaForQuestionAnswering",rs]],["deberta-v2",["DebertaV2ForQuestionAnswering",Os]],["mpnet",["MPNetForQuestionAnswering",we]],["albert",["AlbertForQuestionAnswering",ot]],["distilbert",["DistilBertForQuestionAnswering",hr]],["roberta",["RobertaForQuestionAnswering",Jn]],["xlm",["XLMForQuestionAnswering",wt]],["xlm-roberta",["XLMRobertaForQuestionAnswering",Hi]],["mobilebert",["MobileBertForQuestionAnswering",Cs]],["squeezebert",["SqueezeBertForQuestionAnswering",Pe]]]),Li=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",to]],["idefics3",["Idefics3ForConditionalGeneration",_n]],["smolvlm",["SmolVLMForConditionalGeneration",no]]]),Wd=new Map([["llava",["LlavaForConditionalGeneration",mn]],["llava_onevision",["LlavaOnevisionForConditionalGeneration",Zi]],["moondream1",["Moondream1ForConditionalGeneration",ea]],["florence2",["Florence2ForConditionalGeneration",sa]],["qwen2-vl",["Qwen2VLForConditionalGeneration",Mu]],["idefics3",["Idefics3ForConditionalGeneration",_n]],["smolvlm",["SmolVLMForConditionalGeneration",no]],["paligemma",["PaliGemmaForConditionalGeneration",na]],["llava_qwen2",["LlavaQwen2ForCausalLM",Gs]],["gemma3n",["Gemma3nForConditionalGeneration",ro]]]),Gd=new Map([["ultravox",["UltravoxModel",Nn]],["voxtral",["VoxtralForConditionalGeneration",Sd]]]),kp=new Map([["vision-encoder-decoder",["VisionEncoderDecoderModel",to]]]),Kd=new Map([["vit",["ViTForImageClassification",Ml]],["ijepa",["IJepaForImageClassification",bu]],["pvt",["PvtForImageClassification",kr]],["vit_msn",["ViTMSNForImageClassification",vu]],["fastvit",["FastViTForImageClassification",Tl]],["mobilevit",["MobileViTForImageClassification",Pl]],["mobilevitv2",["MobileViTV2ForImageClassification",El]],["beit",["BeitForImageClassification",kl]],["deit",["DeiTForImageClassification",Ul]],["hiera",["HieraForImageClassification",Cu]],["convnext",["ConvNextForImageClassification",Fu]],["convnextv2",["ConvNextV2ForImageClassification",dc]],["dinov2",["Dinov2ForImageClassification",uc]],["dinov2_with_registers",["Dinov2WithRegistersForImageClassification",hc]],["resnet",["ResNetForImageClassification",Kl]],["swin",["SwinForImageClassification",$u]],["segformer",["SegformerForImageClassification",id]],["efficientnet",["EfficientNetForImageClassification",dd]],["mobilenet_v1",["MobileNetV1ForImageClassification",ud]],["mobilenet_v2",["MobileNetV2ForImageClassification",Ku]],["mobilenet_v3",["MobileNetV3ForImageClassification",Hu]],["mobilenet_v4",["MobileNetV4ForImageClassification",gd]]]),sp=new Map([["detr",["DetrForObjectDetection",Il]],["rt_detr",["RTDetrForObjectDetection",Pn]],["rt_detr_v2",["RTDetrV2ForObjectDetection",Ll]],["rf_detr",["RFDetrForObjectDetection",Pu]],["d_fine",["DFineForObjectDetection",Zo]],["table-transformer",["TableTransformerForObjectDetection",ti]],["yolos",["YolosForObjectDetection",Ir]]]),Hd=new Map([["owlvit",["OwlViTForObjectDetection",Cl]],["owlv2",["Owlv2ForObjectDetection",$l]],["grounding-dino",["GroundingDinoForObjectDetection",Lu]]]),cn=new Map([["detr",["DetrForSegmentation",Xo]],["clipseg",["CLIPSegForImageSegmentation",ga]]]),qd=new Map([["segformer",["SegformerForSemanticSegmentation",Ti]],["sapiens",["SapiensForSemanticSegmentation",Yl]],["swin",["SwinForSemanticSegmentation",$n]],["mobilenet_v1",["MobileNetV1ForSemanticSegmentation",pd]],["mobilenet_v2",["MobileNetV2ForSemanticSegmentation",md]],["mobilenet_v3",["MobileNetV3ForSemanticSegmentation",fd]],["mobilenet_v4",["MobileNetV4ForSemanticSegmentation",wd]]]),Qd=new Map([["detr",["DetrForSegmentation",Xo]],["maskformer",["MaskFormerForInstanceSegmentation",nc]]]),Xd=new Map([["sam",["SamModel",Mc]]]),Jd=new Map([["wav2vec2",["Wav2Vec2ForCTC",$s]],["wav2vec2-bert",["Wav2Vec2BertForCTC",Bc]],["unispeech",["UniSpeechForCTC",Ic]],["unispeech-sat",["UniSpeechSatForCTC",Dc]],["wavlm",["WavLMForCTC",Vc]],["hubert",["HubertForCTC",jc]]]),Yd=new Map([["wav2vec2",["Wav2Vec2ForSequenceClassification",Pc]],["wav2vec2-bert",["Wav2Vec2BertForSequenceClassification",Rc]],["unispeech",["UniSpeechForSequenceClassification",Ac]],["unispeech-sat",["UniSpeechSatForSequenceClassification",Oc]],["wavlm",["WavLMForSequenceClassification",Uc]],["hubert",["HubertForSequenceClassification",Nc]],["audio-spectrogram-transformer",["ASTForAudioClassification",Qi]]]),rp=new Map([["wavlm",["WavLMForXVector",Wc]]]),Zd=new Map([["unispeech-sat",["UniSpeechSatForAudioFrameClassification",Lc]],["wavlm",["WavLMForAudioFrameClassification",Ru]],["wav2vec2",["Wav2Vec2ForAudioFrameClassification",Ec]],["pyannote",["PyAnnoteForAudioFrameClassification",rn]]]),Un=new Map([["vitmatte",["VitMatteForImageMatting",Go]]]),np=new Map([["patchtst",["PatchTSTForPrediction",Pd]],["patchtsmixer",["PatchTSMixerForPrediction",Cd]]]),eu=new Map([["swin2sr",["Swin2SRForImageSuperResolution",ql]]]),op=new Map([["dpt",["DPTForDepthEstimation",Xl]],["depth_anything",["DepthAnythingForDepthEstimation",Jl]],["glpn",["GLPNForDepthEstimation",ic]],["sapiens",["SapiensForDepthEstimation",Su]],["depth_pro",["DepthProForDepthEstimation",ec]],["metric3d",["Metric3DForDepthEstimation",sc]],["metric3dv2",["Metric3Dv2ForDepthEstimation",rc]]]),tu=new Map([["sapiens",["SapiensForNormalEstimation",Zl]]]),zi=new Map([["vitpose",["VitPoseForPoseEstimation",Sr]]]),Bi=new Map([["clip",["CLIPVisionModelWithProjection",ca]],["siglip",["SiglipVisionModel",da]],["jina_clip",["JinaCLIPVisionModel",_a]]]),wr=[[Xu,L.EncoderOnly],[Ju,L.EncoderDecoder],[Yu,L.DecoderOnly],[Sp,L.AutoEncoder],[Zu,L.EncoderOnly],[Fi,L.EncoderOnly],[Di,L.Seq2Seq],[Ai,L.Seq2Seq],[Oi,L.DecoderOnly],[ep,L.MultiModality],[Ud,L.EncoderOnly],[tp,L.EncoderOnly],[Li,L.Vision2Seq],[Wd,L.ImageTextToText],[Gd,L.AudioTextToText],[Kd,L.EncoderOnly],[cn,L.EncoderOnly],[Qd,L.EncoderOnly],[qd,L.EncoderOnly],[Un,L.EncoderOnly],[np,L.EncoderOnly],[eu,L.EncoderOnly],[op,L.EncoderOnly],[tu,L.EncoderOnly],[zi,L.EncoderOnly],[sp,L.EncoderOnly],[Hd,L.EncoderOnly],[Xd,L.MaskGeneration],[Jd,L.EncoderOnly],[Yd,L.EncoderOnly],[Nd,L.Seq2Seq],[Vd,L.EncoderOnly],[rp,L.EncoderOnly],[Zd,L.EncoderOnly],[Bi,L.EncoderOnly]];for(const[t,r]of wr)for(const[o,i]of t.values())$.set(o,r),x.set(i,o),T.set(o,i);const ip=[["MusicgenForConditionalGeneration",Pi,L.Musicgen],["Phi3VForCausalLM",oo,L.Phi3V],["CLIPTextModelWithProjection",_u,L.EncoderOnly],["SiglipTextModel",Ks,L.EncoderOnly],["JinaCLIPTextModel",ma,L.EncoderOnly],["ClapTextModelWithProjection",on,L.EncoderOnly],["ClapAudioModelWithProjection",vi,L.EncoderOnly],["DacEncoderModel",Qu,L.EncoderOnly],["DacDecoderModel",Bd,L.EncoderOnly],["MimiEncoderModel",Fd,L.EncoderOnly],["MimiDecoderModel",Dd,L.EncoderOnly],["SnacEncoderModel",Ii,L.EncoderOnly],["SnacDecoderModel",jd,L.EncoderOnly],["Gemma3nForConditionalGeneration",ro,L.ImageAudioTextToText]];for(const[t,r,o]of ip)$.set(t,o),x.set(r,t),T.set(t,r);const Ri=new Map([["modnet",cn],["birefnet",cn],["isnet",cn],["ben",cn]]);for(const[t,r]of Ri.entries())r.set(t,["PreTrainedModel",j]),$.set(t,L.EncoderOnly),x.set(j,t),T.set(t,j);class ji extends Kt{static MODEL_CLASS_MAPPINGS=wr.map(r=>r[0]);static BASE_IF_FAIL=!0}class su extends Kt{static MODEL_CLASS_MAPPINGS=[Zu]}class ru extends Kt{static MODEL_CLASS_MAPPINGS=[Fi]}class nu extends Kt{static MODEL_CLASS_MAPPINGS=[Di]}class ou extends Kt{static MODEL_CLASS_MAPPINGS=[Ai]}class iu extends Kt{static MODEL_CLASS_MAPPINGS=[Nd]}class au extends Kt{static MODEL_CLASS_MAPPINGS=[Vd]}class ap extends Kt{static MODEL_CLASS_MAPPINGS=[Oi]}class Dr extends Kt{static MODEL_CLASS_MAPPINGS=[Ud]}class Qs extends Kt{static MODEL_CLASS_MAPPINGS=[tp]}class dn extends Kt{static MODEL_CLASS_MAPPINGS=[Li]}class Wn extends Kt{static MODEL_CLASS_MAPPINGS=[Kd]}class Gn extends Kt{static MODEL_CLASS_MAPPINGS=[cn]}class Ni extends Kt{static MODEL_CLASS_MAPPINGS=[qd]}class lu extends Kt{static MODEL_CLASS_MAPPINGS=[Qd]}class Vi extends Kt{static MODEL_CLASS_MAPPINGS=[sp]}class Ur extends Kt{static MODEL_CLASS_MAPPINGS=[Hd]}class Wr extends Kt{static MODEL_CLASS_MAPPINGS=[Xd]}class lp extends Kt{static MODEL_CLASS_MAPPINGS=[Jd]}class cp extends Kt{static MODEL_CLASS_MAPPINGS=[Yd]}class dp extends Kt{static MODEL_CLASS_MAPPINGS=[rp]}class up extends Kt{static MODEL_CLASS_MAPPINGS=[Zd]}class pp extends Kt{static MODEL_CLASS_MAPPINGS=[kp]}class hp extends Kt{static MODEL_CLASS_MAPPINGS=[Un]}class mp extends Kt{static MODEL_CLASS_MAPPINGS=[eu]}class _p extends Kt{static MODEL_CLASS_MAPPINGS=[op]}class fp extends Kt{static MODEL_CLASS_MAPPINGS=[tu]}class cu extends Kt{static MODEL_CLASS_MAPPINGS=[zi]}class gp extends Kt{static MODEL_CLASS_MAPPINGS=[Bi]}class wp extends Kt{static MODEL_CLASS_MAPPINGS=[Wd]}class Ip extends Kt{static MODEL_CLASS_MAPPINGS=[Gd]}class Mp extends ve{constructor({logits:r,past_key_values:o,encoder_outputs:i,decoder_attentions:a=null,cross_attentions:l=null}){super(),this.logits=r,this.past_key_values=o,this.encoder_outputs=i,this.decoder_attentions=a,this.cross_attentions=l}}class St extends ve{constructor({logits:r,...o}){super(),this.logits=r;const i=Object.values(o);i.length>0&&(this.attentions=i)}}class Ui extends ve{constructor({logits:r,embeddings:o}){super(),this.logits=r,this.embeddings=o}}class as extends ve{constructor({logits:r}){super(),this.logits=r}}class gs extends ve{constructor({logits:r}){super(),this.logits=r}}class bs extends ve{constructor({start_logits:r,end_logits:o}){super(),this.start_logits=r,this.end_logits=o}}class Gr extends ve{constructor({logits:r}){super(),this.logits=r}}class Ap extends ve{constructor({logits:r,past_key_values:o}){super(),this.logits=r,this.past_key_values=o}}class e extends ve{constructor({alphas:r}){super(),this.alphas=r}}class s extends ve{constructor({waveform:r,spectrogram:o}){super(),this.waveform=r,this.spectrogram=o}}},"./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js":(re,m,n)=>{n.r(m),n.d(m,{ASTFeatureExtractor:()=>F});var _=n("./src/base/feature_extraction_utils.js");n("./src/utils/tensor.js");var b=n("./src/utils/audio.js");class F extends _.FeatureExtractor{constructor(S){super(S);const f=this.config.sampling_rate,I=(0,b.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(f/2),f,null,"kaldi",!0);this.mel_filters=I,this.window=(0,b.window_function)(400,"hann",{periodic:!1}),this.mean=this.config.mean,this.std=this.config.std}async _extract_fbank_features(S,f){return(0,b.spectrogram)(S,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:f,transpose:!0})}async _call(S){(0,_.validate_audio_inputs)(S,"ASTFeatureExtractor");const f=await this._extract_fbank_features(S,this.config.max_length);if(this.config.do_normalize){const I=this.std*2,D=f.data;for(let y=0;y<D.length;++y)D[y]=(D[y]-this.mean)/I}return{input_values:f.unsqueeze_(0)}}}},"./src/models/auto/feature_extraction_auto.js":(re,m,n)=>{n.r(m),n.d(m,{AutoFeatureExtractor:()=>q});var _=n("./src/utils/constants.js"),b=n("./src/utils/hub.js");n("./src/base/feature_extraction_utils.js");var F=n("./src/models/feature_extractors.js");class q{static async from_pretrained(f,I={}){const D=await(0,b.getModelJSON)(f,_.FEATURE_EXTRACTOR_NAME,!0,I),y=D.feature_extractor_type,h=F[y];if(!h)throw new Error(`Unknown feature_extractor_type: '${y}'. Please report this at ${_.GITHUB_ISSUE_URL}.`);return new h(D)}}},"./src/models/auto/image_processing_auto.js":(re,m,n)=>{n.r(m),n.d(m,{AutoImageProcessor:()=>S});var _=n("./src/utils/constants.js"),b=n("./src/utils/hub.js"),F=n("./src/base/image_processors_utils.js"),q=n("./src/models/image_processors.js");class S{static async from_pretrained(I,D={}){const y=await(0,b.getModelJSON)(I,_.IMAGE_PROCESSOR_NAME,!0,D),h=y.image_processor_type??y.feature_extractor_type;let V=q[h?.replace(/Fast$/,"")];return V||(h!==void 0&&console.warn(`Image processor type '${h}' not found, assuming base ImageProcessor. Please report this at ${_.GITHUB_ISSUE_URL}.`),V=F.ImageProcessor),new V(y)}}},"./src/models/auto/processing_auto.js":(re,m,n)=>{n.r(m),n.d(m,{AutoProcessor:()=>I});var _=n("./src/utils/constants.js"),b=n("./src/utils/hub.js"),F=n("./src/base/processing_utils.js"),q=n("./src/models/processors.js"),S=n("./src/models/image_processors.js"),f=n("./src/models/feature_extractors.js");class I{static async from_pretrained(y,h={}){const V=await(0,b.getModelJSON)(y,_.IMAGE_PROCESSOR_NAME,!0,h),{image_processor_type:O,feature_extractor_type:K,processor_class:me}=V;if(me&&q[me])return q[me].from_pretrained(y,h);if(!O&&!K)throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");const R={};if(O){const X=S[O.replace(/Fast$/,"")];if(!X)throw new Error(`Unknown image_processor_type: '${O}'.`);R.image_processor=new X(V)}if(K){const X=S[K];if(X)R.image_processor=new X(V);else{const L=f[K];if(!L)throw new Error(`Unknown feature_extractor_type: '${K}'.`);R.feature_extractor=new L(V)}}const G={};return new F.Processor(G,R,null)}}},"./src/models/beit/image_processing_beit.js":(re,m,n)=>{n.r(m),n.d(m,{BeitFeatureExtractor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}},"./src/models/bit/image_processing_bit.js":(re,m,n)=>{n.r(m),n.d(m,{BitImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}},"./src/models/chinese_clip/image_processing_chinese_clip.js":(re,m,n)=>{n.r(m),n.d(m,{ChineseCLIPFeatureExtractor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}},"./src/models/clap/feature_extraction_clap.js":(re,m,n)=>{n.r(m),n.d(m,{ClapFeatureExtractor:()=>F});var _=n("./src/base/feature_extraction_utils.js");n("./src/utils/tensor.js");var b=n("./src/utils/audio.js");class F extends _.FeatureExtractor{constructor(S){super(S),this.mel_filters=(0,b.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,null,"htk"),this.mel_filters_slaney=(0,b.mel_filter_bank)(this.config.nb_frequency_bins,this.config.feature_size,this.config.frequency_min,this.config.frequency_max,this.config.sampling_rate,"slaney","slaney"),this.window=(0,b.window_function)(this.config.fft_window_size,"hann")}async _get_input_mel(S,f,I,D){let y;const h=S.length-f;if(h>0)if(I==="rand_trunc"){const V=Math.floor(Math.random()*(h+1));S=S.subarray(V,V+f),y=await this._extract_fbank_features(S,this.mel_filters_slaney,this.config.nb_max_samples)}else throw new Error(`Truncation strategy "${I}" not implemented`);else{if(h<0){let V=new Float64Array(f);if(V.set(S),D==="repeat")for(let O=S.length;O<f;O+=S.length)V.set(S.subarray(0,Math.min(S.length,f-O)),O);else if(D==="repeatpad")for(let O=S.length;O<-h;O+=S.length)V.set(S,O);S=V}if(I==="fusion")throw new Error(`Truncation strategy "${I}" not implemented`);y=await this._extract_fbank_features(S,this.mel_filters_slaney,this.config.nb_max_samples)}return y.unsqueeze_(0)}async _extract_fbank_features(S,f,I=null){return(0,b.spectrogram)(S,this.window,this.config.fft_window_size,this.config.hop_length,{power:2,mel_filters:f,log_mel:"dB",max_num_frames:I,do_pad:!1,transpose:!0})}async _call(S,{max_length:f=null}={}){return(0,_.validate_audio_inputs)(S,"ClapFeatureExtractor"),{input_features:(await this._get_input_mel(S,f??this.config.nb_max_samples,this.config.truncation,this.config.padding)).unsqueeze_(0)}}}},"./src/models/clip/image_processing_clip.js":(re,m,n)=>{n.r(m),n.d(m,{CLIPFeatureExtractor:()=>F,CLIPImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/convnext/image_processing_convnext.js":(re,m,n)=>{n.r(m),n.d(m,{ConvNextFeatureExtractor:()=>F,ConvNextImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{constructor(S){super(S),this.crop_pct=this.config.crop_pct??224/256}async resize(S){const f=this.size?.shortest_edge;if(f===void 0)throw new Error("Size dictionary must contain 'shortest_edge' key.");if(f<384){const I=Math.floor(f/this.crop_pct),[D,y]=this.get_resize_output_image_size(S,{shortest_edge:I});S=await S.resize(D,y,{resample:this.resample}),S=await S.center_crop(f,f)}else S=await S.resize(f,f,{resample:this.resample});return S}}class F extends b{}},"./src/models/dac/feature_extraction_dac.js":(re,m,n)=>{n.r(m),n.d(m,{DacFeatureExtractor:()=>b});var _=n("./src/models/encodec/feature_extraction_encodec.js");class b extends _.EncodecFeatureExtractor{}},"./src/models/deit/image_processing_deit.js":(re,m,n)=>{n.r(m),n.d(m,{DeiTFeatureExtractor:()=>F,DeiTImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/detr/image_processing_detr.js":(re,m,n)=>{n.r(m),n.d(m,{DetrFeatureExtractor:()=>q,DetrImageProcessor:()=>F});var _=n("./src/base/image_processors_utils.js"),b=n("./src/utils/tensor.js");class F extends _.ImageProcessor{async _call(f){const I=await super._call(f),D=[I.pixel_values.dims[0],64,64],y=(0,b.full)(D,1n);return{...I,pixel_mask:y}}post_process_object_detection(...f){return(0,_.post_process_object_detection)(...f)}post_process_panoptic_segmentation(...f){return(0,_.post_process_panoptic_segmentation)(...f)}post_process_instance_segmentation(...f){return(0,_.post_process_instance_segmentation)(...f)}}class q extends F{}},"./src/models/dinov3_vit/image_processing_dinov3_vit.js":(re,m,n)=>{n.r(m),n.d(m,{DINOv3ViTImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}},"./src/models/donut/image_processing_donut.js":(re,m,n)=>{n.r(m),n.d(m,{DonutFeatureExtractor:()=>F,DonutImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{pad_image(S,f,I,D={}){const[y,h,V]=f;let O=this.image_mean;Array.isArray(this.image_mean)||(O=new Array(V).fill(O));let K=this.image_std;Array.isArray(K)||(K=new Array(V).fill(O));const me=O.map((R,G)=>-R/K[G]);return super.pad_image(S,f,I,{center:!0,constant_values:me,...D})}}class F extends b{}},"./src/models/dpt/image_processing_dpt.js":(re,m,n)=>{n.r(m),n.d(m,{DPTFeatureExtractor:()=>F,DPTImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/efficientnet/image_processing_efficientnet.js":(re,m,n)=>{n.r(m),n.d(m,{EfficientNetImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{constructor(q){super(q),this.include_top=this.config.include_top??!0,this.include_top&&(this.image_std=this.image_std.map(S=>S*S))}}},"./src/models/encodec/feature_extraction_encodec.js":(re,m,n)=>{n.r(m),n.d(m,{EncodecFeatureExtractor:()=>F});var _=n("./src/base/feature_extraction_utils.js"),b=n("./src/utils/tensor.js");class F extends _.FeatureExtractor{async _call(S){(0,_.validate_audio_inputs)(S,"EncodecFeatureExtractor"),S instanceof Float64Array&&(S=new Float32Array(S));const f=this.config.feature_size;if(S.length%f!==0)throw new Error(`The length of the audio data must be a multiple of the number of channels (${f}).`);const I=[1,f,S.length/f];return{input_values:new b.Tensor("float32",S,I)}}}},"./src/models/feature_extractors.js":(re,m,n)=>{n.r(m),n.d(m,{ASTFeatureExtractor:()=>_.ASTFeatureExtractor,ClapFeatureExtractor:()=>F.ClapFeatureExtractor,DacFeatureExtractor:()=>q.DacFeatureExtractor,EncodecFeatureExtractor:()=>b.EncodecFeatureExtractor,Gemma3nAudioFeatureExtractor:()=>S.Gemma3nAudioFeatureExtractor,ImageFeatureExtractor:()=>me.ImageProcessor,MoonshineFeatureExtractor:()=>f.MoonshineFeatureExtractor,PyAnnoteFeatureExtractor:()=>I.PyAnnoteFeatureExtractor,SeamlessM4TFeatureExtractor:()=>D.SeamlessM4TFeatureExtractor,SnacFeatureExtractor:()=>y.SnacFeatureExtractor,SpeechT5FeatureExtractor:()=>h.SpeechT5FeatureExtractor,Wav2Vec2FeatureExtractor:()=>V.Wav2Vec2FeatureExtractor,WeSpeakerFeatureExtractor:()=>O.WeSpeakerFeatureExtractor,WhisperFeatureExtractor:()=>K.WhisperFeatureExtractor});var _=n("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"),b=n("./src/models/encodec/feature_extraction_encodec.js"),F=n("./src/models/clap/feature_extraction_clap.js"),q=n("./src/models/dac/feature_extraction_dac.js"),S=n("./src/models/gemma3n/feature_extraction_gemma3n.js"),f=n("./src/models/moonshine/feature_extraction_moonshine.js"),I=n("./src/models/pyannote/feature_extraction_pyannote.js"),D=n("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"),y=n("./src/models/snac/feature_extraction_snac.js"),h=n("./src/models/speecht5/feature_extraction_speecht5.js"),V=n("./src/models/wav2vec2/feature_extraction_wav2vec2.js"),O=n("./src/models/wespeaker/feature_extraction_wespeaker.js"),K=n("./src/models/whisper/feature_extraction_whisper.js"),me=n("./src/base/image_processors_utils.js")},"./src/models/florence2/processing_florence2.js":(re,m,n)=>{n.r(m),n.d(m,{Florence2Processor:()=>q});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js");class q extends _.Processor{static tokenizer_class=F.AutoTokenizer;static image_processor_class=b.AutoImageProcessor;constructor(f,I,D){super(f,I,D);const{tasks_answer_post_processing_type:y,task_prompts_without_inputs:h,task_prompts_with_input:V}=this.image_processor.config;this.tasks_answer_post_processing_type=new Map(Object.entries(y??{})),this.task_prompts_without_inputs=new Map(Object.entries(h??{})),this.task_prompts_with_input=new Map(Object.entries(V??{})),this.regexes={quad_boxes:/(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,bboxes:/([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm},this.size_per_bin=1e3}construct_prompts(f){typeof f=="string"&&(f=[f]);const I=[];for(const D of f)if(this.task_prompts_without_inputs.has(D))I.push(this.task_prompts_without_inputs.get(D));else{for(const[y,h]of this.task_prompts_with_input)if(D.includes(y)){I.push(h.replaceAll("{input}",D).replaceAll(y,""));break}I.length!==f.length&&I.push(D)}return I}post_process_generation(f,I,D){const y=this.tasks_answer_post_processing_type.get(I)??"pure_text";f=f.replaceAll("<s>","").replaceAll("</s>","");let h;switch(y){case"pure_text":h=f;break;case"description_with_bboxes":case"bboxes":case"phrase_grounding":case"ocr":const V=y==="ocr"?"quad_boxes":"bboxes",O=f.matchAll(this.regexes[V]),K=[],me=[];for(const[R,G,...X]of O)K.push(G?G.trim():K.at(-1)??""),me.push(X.map((L,$)=>(Number(L)+.5)/this.size_per_bin*D[$%2]));h={labels:K,[V]:me};break;default:throw new Error(`Task "${I}" (of type "${y}") not yet implemented.`)}return{[I]:h}}async _call(f,I=null,D={}){if(!f&&!I)throw new Error("Either text or images must be provided");const y=await this.image_processor(f,D),h=I?this.tokenizer(this.construct_prompts(I),D):{};return{...y,...h}}}},"./src/models/gemma3n/feature_extraction_gemma3n.js":(re,m,n)=>{n.r(m),n.d(m,{Gemma3nAudioFeatureExtractor:()=>q});var _=n("./src/base/feature_extraction_utils.js"),b=n("./src/utils/tensor.js"),F=n("./src/utils/audio.js");class q extends _.FeatureExtractor{constructor(f){super(f);const{fft_length:I,feature_size:D,min_frequency:y,max_frequency:h,sampling_rate:V,frame_length:O}=this.config,K=(0,F.mel_filter_bank)(Math.floor(1+I/2),D,y,h,V,null,"htk",!1);this.mel_filters=K,this.window=(0,F.window_function)(O,"hann")}async _extract_fbank_features(f,I){return(0,F.spectrogram)(f,this.window,this.config.frame_length,this.config.hop_length,{fft_length:this.config.fft_length,center:!1,onesided:!0,preemphasis:this.config.preemphasis,preemphasis_htk_flavor:this.config.preemphasis_htk_flavor,mel_filters:this.mel_filters,log_mel:"log",mel_floor:this.config.mel_floor,remove_dc_offset:!1,transpose:!0})}async _call(f,{max_length:I=48e4,truncation:D=!0,padding:y=!0,pad_to_multiple_of:h=128}={}){if((0,_.validate_audio_inputs)(f,"Gemma3nAudioFeatureExtractor"),D&&f.length>I&&(f=f.slice(0,I)),y&&f.length%h!==0){const K=h-f.length%h,me=new Float64Array(f.length+K);me.set(f),this.config.padding_value!==0&&me.fill(this.config.padding_value,f.length),f=me}const V=await this._extract_fbank_features(f,this.config.max_length),O=(0,b.full)([1,V.dims[0]],!0);return{input_features:V.unsqueeze_(0),input_features_mask:O}}}},"./src/models/gemma3n/processing_gemma3n.js":(re,m,n)=>{n.r(m),n.d(m,{Gemma3nProcessor:()=>S});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/models/auto/feature_extraction_auto.js"),q=n("./src/tokenizers.js");n("./src/utils/image.js"),n("./src/utils/audio.js");class S extends _.Processor{static image_processor_class=b.AutoImageProcessor;static feature_extractor_class=F.AutoFeatureExtractor;static tokenizer_class=q.AutoTokenizer;static uses_processor_config=!0;static uses_chat_template_file=!0;constructor(I,D,y){super(I,D,y),this.audio_seq_length=this.config.audio_seq_length,this.image_seq_length=this.config.image_seq_length;const{audio_token_id:h,boa_token:V,audio_token:O,eoa_token:K,image_token_id:me,boi_token:R,image_token:G,eoi_token:X}=this.tokenizer.config;this.audio_token_id=h,this.boa_token=V,this.audio_token=O;const L=O.repeat(this.audio_seq_length);this.full_audio_sequence=`

${V}${L}${K}

`,this.image_token_id=me,this.boi_token=R,this.image_token=G;const $=G.repeat(this.image_seq_length);this.full_image_sequence=`

${R}${$}${X}

`}async _call(I,D=null,y=null,h={}){typeof I=="string"&&(I=[I]);let V;y&&(V=await this.feature_extractor(y,h),I=I.map(me=>me.replaceAll(this.audio_token,this.full_audio_sequence)));let O;return D&&(O=await this.image_processor(D,h),I=I.map(me=>me.replaceAll(this.image_token,this.full_image_sequence))),{...this.tokenizer(I,h),...O,...V}}}},"./src/models/glpn/image_processing_glpn.js":(re,m,n)=>{n.r(m),n.d(m,{GLPNFeatureExtractor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}},"./src/models/grounding_dino/image_processing_grounding_dino.js":(re,m,n)=>{n.r(m),n.d(m,{GroundingDinoImageProcessor:()=>F});var _=n("./src/base/image_processors_utils.js"),b=n("./src/utils/tensor.js");class F extends _.ImageProcessor{async _call(S){const f=await super._call(S),I=f.pixel_values.dims,D=(0,b.ones)([I[0],I[2],I[3]]);return{...f,pixel_mask:D}}}},"./src/models/grounding_dino/processing_grounding_dino.js":(re,m,n)=>{n.r(m),n.d(m,{GroundingDinoProcessor:()=>f});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js"),q=n("./src/base/image_processors_utils.js");function S(I,D){const h=I.dims.at(-1)-1,V=I.tolist();V.fill(!1,0,0+1),V.fill(!1,h);const O=D.tolist();return V.map((K,me)=>K?me:null).filter(K=>K!==null).map(K=>O[K])}class f extends _.Processor{static tokenizer_class=F.AutoTokenizer;static image_processor_class=b.AutoImageProcessor;async _call(D,y,h={}){const V=D?await this.image_processor(D,h):{};return{...y?this.tokenizer(y,h):{},...V}}post_process_grounded_object_detection(D,y,{box_threshold:h=.25,text_threshold:V=.25,target_sizes:O=null}={}){const{logits:K,pred_boxes:me}=D,R=K.dims[0];if(O!==null&&O.length!==R)throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");const G=K.dims.at(1),X=K.sigmoid(),L=X.max(-1).tolist(),$=me.tolist().map(x=>x.map(E=>(0,q.center_to_corners_format)(E))),T=[];for(let x=0;x<R;++x){const E=O!==null?O[x]:null;E!==null&&($[x]=$[x].map(Z=>Z.map((he,ie)=>he*E[(ie+1)%2])));const Y=L[x],U=[],de=[],oe=[];for(let Z=0;Z<G;++Z){const he=Y[Z];if(he<=h)continue;const ie=$[x][Z],Me=X[x][Z];U.push(he),oe.push(ie);const be=S(Me.gt(V),y[x]);de.push(be)}T.push({scores:U,boxes:oe,labels:this.batch_decode(de)})}return T}}},"./src/models/idefics3/image_processing_idefics3.js":(re,m,n)=>{n.r(m),n.d(m,{Idefics3ImageProcessor:()=>F});var _=n("./src/base/image_processors_utils.js"),b=n("./src/utils/tensor.js");class F extends _.ImageProcessor{constructor(S){super(S),this.do_image_splitting=S.do_image_splitting??!0,this.max_image_size=S.max_image_size}get_resize_for_vision_encoder(S,f){let[I,D]=S.dims.slice(-2);const y=D/I;return D>=I?(D=Math.ceil(D/f)*f,I=Math.floor(D/y),I=Math.ceil(I/f)*f):(I=Math.ceil(I/f)*f,D=Math.floor(I*y),D=Math.ceil(D/f)*f),{height:I,width:D}}async _call(S,{do_image_splitting:f=null,return_row_col_info:I=!1}={}){let D;if(!Array.isArray(S))D=[[S]];else{if(S.length===0||!S[0])throw new Error("No images provided.");Array.isArray(S[0])?D=S:D=[S]}let y=[],h=[],V=[];const O=[],K=[];for(const x of D){let E=await Promise.all(x.map(de=>this.preprocess(de)));O.push(...E.map(de=>de.original_size)),K.push(...E.map(de=>de.reshaped_input_size)),E.forEach(de=>de.pixel_values.unsqueeze_(0));const{longest_edge:Y}=this.max_image_size;let U;if(f??this.do_image_splitting){let de=new Array(E.length),oe=new Array(E.length);U=await Promise.all(E.map(async(Z,he)=>{const ie=this.get_resize_for_vision_encoder(Z.pixel_values,Y),Me=await(0,b.interpolate_4d)(Z.pixel_values,{size:[ie.height,ie.width]}),{frames:be,num_splits_h:fe,num_splits_w:Re}=await this.split_image(Me,this.max_image_size);return de[he]=fe,oe[he]=Re,(0,b.cat)(be,0)})),h.push(de),V.push(oe)}else{const de=[Y,Y];U=await Promise.all(E.map(oe=>(0,b.interpolate_4d)(oe.pixel_values,{size:de}))),h.push(new Array(E.length).fill(0)),V.push(new Array(E.length).fill(0))}y.push((0,b.cat)(U,0))}const me=y.length,[R,G,X,L]=y[0].dims;let $,T;if(me===1)$=y[0].unsqueeze_(0),T=(0,b.full)([me,R,X,L],!0);else{const x=Math.max(...y.map(U=>U.dims.at(0)));T=(0,b.full)([me,x,X,L],!0);const E=T.data,Y=x*X*L;for(let U=0;U<me;++U){const de=y[U].dims[0];if(de<x){y[U]=(0,b.cat)([y[U],(0,b.full)([x-de,G,X,L],0)],0);const oe=U*Y+de*X*L,Z=(U+1)*Y;E.fill(!1,oe,Z)}}$=(0,b.stack)(y,0)}return{pixel_values:$,pixel_attention_mask:T,original_sizes:O,reshaped_input_sizes:K,...I?{rows:h,cols:V}:{}}}async split_image(S,{longest_edge:f}){const I=f,D=f,y=[],[h,V]=S.dims.slice(-2);let O=0,K=0;if(h>I||V>D){O=Math.ceil(h/I),K=Math.ceil(V/D);const me=Math.ceil(h/O),R=Math.ceil(V/K);for(let L=0;L<O;++L)for(let $=0;$<K;++$){let T,x,E,Y;L===O-1?(x=h-me,Y=h):(x=L*me,Y=(L+1)*me),$===K-1?(T=V-R,E=V):(T=$*R,E=($+1)*R);const U=[x,T],de=[Y,E],oe=await(0,b.slice)(S,U,de,[2,3]);y.push(oe)}const G=I,X=D;(h!==G||V!==X)&&(S=await(0,b.interpolate_4d)(S,{size:[G,X]}))}return y.push(S),{frames:y,num_splits_h:O,num_splits_w:K}}}},"./src/models/idefics3/processing_idefics3.js":(re,m,n)=>{n.r(m),n.d(m,{Idefics3Processor:()=>D});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js");n("./src/utils/image.js");var q=n("./src/utils/core.js");function S(y,h,V,O,K,me){let R="";for(let G=0;G<h;++G){for(let X=0;X<V;++X)R+=O+`<row_${G+1}_col_${X+1}>`+K.repeat(y);R+=`
`}return R+=`
${O}${me}`+K.repeat(y)+`${O}`,R}function f(y,h,V,O){return`${h}${O}`+V.repeat(y)+`${h}`}function I(y,h,V,O,K,me){return y===0&&h===0?f(V,O,K,me):S(V,y,h,O,K,me)}class D extends _.Processor{static image_processor_class=b.AutoImageProcessor;static tokenizer_class=F.AutoTokenizer;static uses_processor_config=!0;fake_image_token="<fake_token_around_image>";image_token="<image>";global_img_token="<global-img>";async _call(h,V=null,O={}){O.return_row_col_info??=!0;let K;V&&(K=await this.image_processor(V,O)),Array.isArray(h)||(h=[h]);const me=K.rows??[new Array(h.length).fill(0)],R=K.cols??[new Array(h.length).fill(0)],G=this.config.image_seq_len,X=[],L=[];for(let T=0;T<h.length;++T){const x=h[T],E=me[T],Y=R[T];X.push((0,q.count)(x,this.image_token));const U=E.map((Z,he)=>I(Z,Y[he],G,this.fake_image_token,this.image_token,this.global_img_token)),de=x.split(this.image_token);if(de.length===0)throw new Error("The image token should be present in the text.");let oe=de[0];for(let Z=0;Z<U.length;++Z)oe+=U[Z]+de[Z+1];L.push(oe)}return{...this.tokenizer(L),...K}}}},"./src/models/image_processors.js":(re,m,n)=>{n.r(m),n.d(m,{BeitFeatureExtractor:()=>_.BeitFeatureExtractor,BitImageProcessor:()=>b.BitImageProcessor,CLIPFeatureExtractor:()=>q.CLIPFeatureExtractor,CLIPImageProcessor:()=>q.CLIPImageProcessor,ChineseCLIPFeatureExtractor:()=>F.ChineseCLIPFeatureExtractor,ConvNextFeatureExtractor:()=>S.ConvNextFeatureExtractor,ConvNextImageProcessor:()=>S.ConvNextImageProcessor,DINOv3ViTImageProcessor:()=>D.DINOv3ViTImageProcessor,DPTFeatureExtractor:()=>h.DPTFeatureExtractor,DPTImageProcessor:()=>h.DPTImageProcessor,DeiTFeatureExtractor:()=>f.DeiTFeatureExtractor,DeiTImageProcessor:()=>f.DeiTImageProcessor,DetrFeatureExtractor:()=>I.DetrFeatureExtractor,DetrImageProcessor:()=>I.DetrImageProcessor,DonutFeatureExtractor:()=>y.DonutFeatureExtractor,DonutImageProcessor:()=>y.DonutImageProcessor,EfficientNetImageProcessor:()=>V.EfficientNetImageProcessor,GLPNFeatureExtractor:()=>O.GLPNFeatureExtractor,GroundingDinoImageProcessor:()=>K.GroundingDinoImageProcessor,Idefics3ImageProcessor:()=>me.Idefics3ImageProcessor,JinaCLIPImageProcessor:()=>G.JinaCLIPImageProcessor,LlavaOnevisionImageProcessor:()=>X.LlavaOnevisionImageProcessor,Mask2FormerImageProcessor:()=>L.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>$.MaskFormerFeatureExtractor,MaskFormerImageProcessor:()=>$.MaskFormerImageProcessor,MobileNetV1FeatureExtractor:()=>T.MobileNetV1FeatureExtractor,MobileNetV1ImageProcessor:()=>T.MobileNetV1ImageProcessor,MobileNetV2FeatureExtractor:()=>x.MobileNetV2FeatureExtractor,MobileNetV2ImageProcessor:()=>x.MobileNetV2ImageProcessor,MobileNetV3FeatureExtractor:()=>E.MobileNetV3FeatureExtractor,MobileNetV3ImageProcessor:()=>E.MobileNetV3ImageProcessor,MobileNetV4FeatureExtractor:()=>Y.MobileNetV4FeatureExtractor,MobileNetV4ImageProcessor:()=>Y.MobileNetV4ImageProcessor,MobileViTFeatureExtractor:()=>U.MobileViTFeatureExtractor,MobileViTImageProcessor:()=>U.MobileViTImageProcessor,NougatImageProcessor:()=>de.NougatImageProcessor,OwlViTFeatureExtractor:()=>Z.OwlViTFeatureExtractor,OwlViTImageProcessor:()=>Z.OwlViTImageProcessor,Owlv2ImageProcessor:()=>oe.Owlv2ImageProcessor,Phi3VImageProcessor:()=>he.Phi3VImageProcessor,PvtImageProcessor:()=>ie.PvtImageProcessor,Qwen2VLImageProcessor:()=>Me.Qwen2VLImageProcessor,RTDetrImageProcessor:()=>be.RTDetrImageProcessor,SamImageProcessor:()=>fe.SamImageProcessor,SegformerFeatureExtractor:()=>Re.SegformerFeatureExtractor,SegformerImageProcessor:()=>Re.SegformerImageProcessor,SiglipImageProcessor:()=>ke.SiglipImageProcessor,SmolVLMImageProcessor:()=>le.SmolVLMImageProcessor,Swin2SRImageProcessor:()=>W.Swin2SRImageProcessor,VLMImageProcessor:()=>R.VLMImageProcessor,ViTFeatureExtractor:()=>ne.ViTFeatureExtractor,ViTImageProcessor:()=>ne.ViTImageProcessor,VitMatteImageProcessor:()=>_e.VitMatteImageProcessor,VitPoseImageProcessor:()=>xe.VitPoseImageProcessor,YolosFeatureExtractor:()=>We.YolosFeatureExtractor,YolosImageProcessor:()=>We.YolosImageProcessor});var _=n("./src/models/beit/image_processing_beit.js"),b=n("./src/models/bit/image_processing_bit.js"),F=n("./src/models/chinese_clip/image_processing_chinese_clip.js"),q=n("./src/models/clip/image_processing_clip.js"),S=n("./src/models/convnext/image_processing_convnext.js"),f=n("./src/models/deit/image_processing_deit.js"),I=n("./src/models/detr/image_processing_detr.js"),D=n("./src/models/dinov3_vit/image_processing_dinov3_vit.js"),y=n("./src/models/donut/image_processing_donut.js"),h=n("./src/models/dpt/image_processing_dpt.js"),V=n("./src/models/efficientnet/image_processing_efficientnet.js"),O=n("./src/models/glpn/image_processing_glpn.js"),K=n("./src/models/grounding_dino/image_processing_grounding_dino.js"),me=n("./src/models/idefics3/image_processing_idefics3.js"),R=n("./src/models/janus/image_processing_janus.js"),G=n("./src/models/jina_clip/image_processing_jina_clip.js"),X=n("./src/models/llava_onevision/image_processing_llava_onevision.js"),L=n("./src/models/mask2former/image_processing_mask2former.js"),$=n("./src/models/maskformer/image_processing_maskformer.js"),T=n("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"),x=n("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"),E=n("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"),Y=n("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"),U=n("./src/models/mobilevit/image_processing_mobilevit.js"),de=n("./src/models/nougat/image_processing_nougat.js"),oe=n("./src/models/owlv2/image_processing_owlv2.js"),Z=n("./src/models/owlvit/image_processing_owlvit.js"),he=n("./src/models/phi3_v/image_processing_phi3_v.js"),ie=n("./src/models/pvt/image_processing_pvt.js"),Me=n("./src/models/qwen2_vl/image_processing_qwen2_vl.js"),be=n("./src/models/rt_detr/image_processing_rt_detr.js"),fe=n("./src/models/sam/image_processing_sam.js"),Re=n("./src/models/segformer/image_processing_segformer.js"),ke=n("./src/models/siglip/image_processing_siglip.js"),le=n("./src/models/smolvlm/image_processing_smolvlm.js"),W=n("./src/models/swin2sr/image_processing_swin2sr.js"),ne=n("./src/models/vit/image_processing_vit.js"),_e=n("./src/models/vitmatte/image_processing_vitmatte.js"),xe=n("./src/models/vitpose/image_processing_vitpose.js"),We=n("./src/models/yolos/image_processing_yolos.js")},"./src/models/janus/image_processing_janus.js":(re,m,n)=>{n.r(m),n.d(m,{VLMImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{constructor(q){super({do_pad:!0,pad_size:{width:q.image_size,height:q.image_size},...q}),this.constant_values=this.config.background_color.map(S=>S*this.rescale_factor)}pad_image(q,S,f,I){return super.pad_image(q,S,f,{constant_values:this.constant_values,center:!0,...I})}}},"./src/models/janus/processing_janus.js":(re,m,n)=>{n.r(m),n.d(m,{VLChatProcessor:()=>I});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js"),q=n("./src/utils/core.js"),S=n("./src/utils/tensor.js"),f=n("./src/utils/image.js");class I extends _.Processor{static image_processor_class=b.AutoImageProcessor;static tokenizer_class=F.AutoTokenizer;static uses_processor_config=!0;constructor(y,h,V){super(y,h,V),this.image_tag=this.config.image_tag,this.image_start_tag=this.config.image_start_tag,this.image_end_tag=this.config.image_end_tag,this.num_image_tokens=this.config.num_image_tokens}async _call(y,{images:h=null,chat_template:V="default"}={}){h?Array.isArray(h)||(h=[h]):h=await Promise.all(y.filter(U=>U.images).flatMap(U=>U.images).map(U=>f.RawImage.read(U)));const O=this.tokenizer,K=O.apply_chat_template(y,{tokenize:!1,add_generation_prompt:!0,chat_template:V}),me=U=>O.encode(U,{add_special_tokens:!1}),R=K.split(this.image_tag),G=R.length-1;if(h.length!==G)throw new Error(`Number of images provided (${h.length}) does not match number of "${this.image_tag}" image tags (${G})`);const[X,L,$]=O.model.convert_tokens_to_ids([this.image_tag,this.image_start_tag,this.image_end_tag]);let T=me(R[0]),x=new Array(T.length).fill(!1);for(let U=1;U<R.length;++U){const de=new Array(this.num_image_tokens).fill(X),oe=me(R[U]);T=(0,q.mergeArrays)(T,[L],de,[$],oe);const Z=new Array(this.num_image_tokens).fill(!0);x=(0,q.mergeArrays)(x,[!1],Z,[!1],new Array(oe.length).fill(!1))}const E=[1,T.length],Y={input_ids:new S.Tensor("int64",T,E),attention_mask:new S.Tensor("int64",new Array(T.length).fill(1),E),images_seq_mask:new S.Tensor("bool",x,E),images_emb_mask:new S.Tensor("bool",new Array(G*this.num_image_tokens).fill(!0),[1,G,this.num_image_tokens])};if(h&&h.length>0){const U=await this.image_processor(h);return U.pixel_values.unsqueeze_(0),{...Y,...U}}return Y}}},"./src/models/jina_clip/image_processing_jina_clip.js":(re,m,n)=>{n.r(m),n.d(m,{JinaCLIPImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{constructor(q){const{resize_mode:S,fill_color:f,interpolation:I,size:D,...y}=q,h=S==="squash"?{width:D,height:D}:S==="shortest"?{shortest_edge:D}:{longest_edge:D},V=I==="bicubic"?3:2;super({...y,size:h,resample:V,do_center_crop:!0,crop_size:D,do_normalize:!0})}}},"./src/models/jina_clip/processing_jina_clip.js":(re,m,n)=>{n.r(m),n.d(m,{JinaCLIPProcessor:()=>q});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js");class q extends _.Processor{static tokenizer_class=F.AutoTokenizer;static image_processor_class=b.AutoImageProcessor;async _call(f=null,I=null,D={}){if(!f&&!I)throw new Error("Either text or images must be provided");const y=f?this.tokenizer(f,D):{},h=I?await this.image_processor(I,D):{};return{...y,...h}}}},"./src/models/llava/processing_llava.js":(re,m,n)=>{n.r(m),n.d(m,{LlavaProcessor:()=>q});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js");class q extends _.Processor{static tokenizer_class=F.AutoTokenizer;static image_processor_class=b.AutoImageProcessor;static uses_processor_config=!0;async _call(f,I=null,D={}){const y=await this.image_processor(f,D);if(I){const[V,O]=y.pixel_values.dims.slice(-2),{image_token:K,patch_size:me,num_additional_image_tokens:R}=this.config,G=Math.floor(V/me)*Math.floor(O/me)+R;I=structuredClone(I),Array.isArray(I)||(I=[I]);for(let X=0;X<I.length;++X)I[X]=I[X].replace(K,K.repeat(G))}const h=I?this.tokenizer(I,D):{};return{...y,...h}}}},"./src/models/llava_onevision/image_processing_llava_onevision.js":(re,m,n)=>{n.r(m),n.d(m,{LlavaOnevisionImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}},"./src/models/mask2former/image_processing_mask2former.js":(re,m,n)=>{n.r(m),n.d(m,{Mask2FormerImageProcessor:()=>b});var _=n("./src/models/maskformer/image_processing_maskformer.js");class b extends _.MaskFormerImageProcessor{}},"./src/models/maskformer/image_processing_maskformer.js":(re,m,n)=>{n.r(m),n.d(m,{MaskFormerFeatureExtractor:()=>F,MaskFormerImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{post_process_panoptic_segmentation(...S){return(0,_.post_process_panoptic_segmentation)(...S)}post_process_instance_segmentation(...S){return(0,_.post_process_instance_segmentation)(...S)}}class F extends b{}},"./src/models/mgp_str/processing_mgp_str.js":(re,m,n)=>{n.r(m),n.d(m,{MgpstrProcessor:()=>f});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js"),q=n("./src/utils/maths.js");const S={char:["char_decode",1],bpe:["bpe_decode",2],wp:["wp_decode",102]};class f extends _.Processor{static tokenizer_class=F.AutoTokenizer;static image_processor_class=b.AutoImageProcessor;get char_tokenizer(){return this.components.char_tokenizer}get bpe_tokenizer(){return this.components.bpe_tokenizer}get wp_tokenizer(){return this.components.wp_tokenizer}_decode_helper(D,y){if(!S.hasOwnProperty(y))throw new Error(`Format ${y} is not supported.`);const[h,V]=S[y],O=this[h].bind(this),[K,me]=D.dims,R=[],G=[],X=D.tolist();for(let $=0;$<K;++$){const T=X[$],x=[],E=[];for(let U=1;U<me;++U){const[de,oe]=(0,q.max)((0,q.softmax)(T[U]));if(E.push(de),oe==V)break;x.push(oe)}const Y=E.length>0?E.reduce((U,de)=>U*de,1):0;G.push(x),R.push(Y)}return[O(G),R]}char_decode(D){return this.char_tokenizer.batch_decode(D).map(y=>y.replaceAll(" ",""))}bpe_decode(D){return this.bpe_tokenizer.batch_decode(D)}wp_decode(D){return this.wp_tokenizer.batch_decode(D).map(y=>y.replaceAll(" ",""))}batch_decode([D,y,h]){const[V,O]=this._decode_helper(D,"char"),[K,me]=this._decode_helper(y,"bpe"),[R,G]=this._decode_helper(h,"wp"),X=[],L=[];for(let $=0;$<V.length;++$){const[T,x]=(0,q.max)([O[$],me[$],G[$]]);X.push([V[$],K[$],R[$]][x]),L.push(T)}return{generated_text:X,scores:L,char_preds:V,bpe_preds:K,wp_preds:R}}static async from_pretrained(...D){const y=await super.from_pretrained(...D),h=await F.AutoTokenizer.from_pretrained("Xenova/gpt2"),V=await F.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");return y.components={image_processor:y.image_processor,char_tokenizer:y.tokenizer,bpe_tokenizer:h,wp_tokenizer:V},y}async _call(D,y=null){const h=await this.image_processor(D);return y&&(h.labels=this.tokenizer(y).input_ids),h}}},"./src/models/mobilenet_v1/image_processing_mobilenet_v1.js":(re,m,n)=>{n.r(m),n.d(m,{MobileNetV1FeatureExtractor:()=>F,MobileNetV1ImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/mobilenet_v2/image_processing_mobilenet_v2.js":(re,m,n)=>{n.r(m),n.d(m,{MobileNetV2FeatureExtractor:()=>F,MobileNetV2ImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/mobilenet_v3/image_processing_mobilenet_v3.js":(re,m,n)=>{n.r(m),n.d(m,{MobileNetV3FeatureExtractor:()=>F,MobileNetV3ImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/mobilenet_v4/image_processing_mobilenet_v4.js":(re,m,n)=>{n.r(m),n.d(m,{MobileNetV4FeatureExtractor:()=>F,MobileNetV4ImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/mobilevit/image_processing_mobilevit.js":(re,m,n)=>{n.r(m),n.d(m,{MobileViTFeatureExtractor:()=>F,MobileViTImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/moonshine/feature_extraction_moonshine.js":(re,m,n)=>{n.r(m),n.d(m,{MoonshineFeatureExtractor:()=>F});var _=n("./src/base/feature_extraction_utils.js"),b=n("./src/utils/tensor.js");class F extends _.FeatureExtractor{async _call(S){(0,_.validate_audio_inputs)(S,"MoonshineFeatureExtractor"),S instanceof Float64Array&&(S=new Float32Array(S));const f=[1,S.length];return{input_values:new b.Tensor("float32",S,f)}}}},"./src/models/moonshine/processing_moonshine.js":(re,m,n)=>{n.r(m),n.d(m,{MoonshineProcessor:()=>q});var _=n("./src/models/auto/feature_extraction_auto.js"),b=n("./src/tokenizers.js"),F=n("./src/base/processing_utils.js");class q extends F.Processor{static tokenizer_class=b.AutoTokenizer;static feature_extractor_class=_.AutoFeatureExtractor;async _call(f){return await this.feature_extractor(f)}}},"./src/models/nougat/image_processing_nougat.js":(re,m,n)=>{n.r(m),n.d(m,{NougatImageProcessor:()=>b});var _=n("./src/models/donut/image_processing_donut.js");class b extends _.DonutImageProcessor{}},"./src/models/owlv2/image_processing_owlv2.js":(re,m,n)=>{n.r(m),n.d(m,{Owlv2ImageProcessor:()=>b});var _=n("./src/models/owlvit/image_processing_owlvit.js");class b extends _.OwlViTImageProcessor{}},"./src/models/owlvit/image_processing_owlvit.js":(re,m,n)=>{n.r(m),n.d(m,{OwlViTFeatureExtractor:()=>F,OwlViTImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{post_process_object_detection(...S){return(0,_.post_process_object_detection)(...S)}}class F extends b{}},"./src/models/owlvit/processing_owlvit.js":(re,m,n)=>{n.r(m),n.d(m,{OwlViTProcessor:()=>q});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js");class q extends _.Processor{static tokenizer_class=F.AutoTokenizer;static image_processor_class=b.AutoImageProcessor}},"./src/models/paligemma/processing_paligemma.js":(re,m,n)=>{n.r(m),n.d(m,{PaliGemmaProcessor:()=>f});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js");const q="<image>";function S(I,D,y,h,V){return`${h.repeat(y*V)}${D}${I}
`}class f extends _.Processor{static tokenizer_class=F.AutoTokenizer;static image_processor_class=b.AutoImageProcessor;static uses_processor_config=!1;async _call(D,y=null,h={}){y||(console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."),y=""),Array.isArray(D)||(D=[D]),Array.isArray(y)||(y=[y]);const V=this.tokenizer.bos_token,O=this.image_processor.config.image_seq_length;let K;y.some(G=>G.includes(q))?K=y.map(G=>{const X=G.replaceAll(q,q.repeat(O)),L=X.lastIndexOf(q),$=L===-1?0:L+q.length;return X.slice(0,$)+V+X.slice($)+`
`}):(console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."),K=y.map(G=>S(G,V,O,q,D.length)));const me=this.tokenizer(K,h);return{...await this.image_processor(D,h),...me}}}},"./src/models/phi3_v/image_processing_phi3_v.js":(re,m,n)=>{n.r(m),n.d(m,{Phi3VImageProcessor:()=>D});var _=n("./src/base/image_processors_utils.js"),b=n("./src/utils/tensor.js");const F=336,q=[2,3],{ceil:S,floor:f,sqrt:I}=Math;class D extends _.ImageProcessor{constructor(h){super({...h,do_normalize:!0,do_pad:!0,pad_size:"custom",do_convert_rgb:!0,do_resize:!0}),this._num_crops=h.num_crops}calc_num_image_tokens_from_image_size(h,V){const{num_img_tokens:O}=this.config;return f((f(V/F)*f(h/F)+1)*O+1+(f(V/F)+1)*I(O))}get_resize_output_image_size(h,V){const O=this._num_crops,[K,me]=h.size;let R=K/me,G=1;for(;G*Math.ceil(G/R)<=O;)G+=1;G-=1;const X=Math.floor(G*336),L=Math.floor(X/R);return[X,L]}pad_image(h,V,O,K={}){const[me,R]=V,G=F*S(me/F),X=F*S(R/F),L=[1,1,1].map(($,T)=>($-this.image_mean[T])/this.image_std[T]);return super.pad_image(h,V,{width:X,height:G},{center:!0,constant_values:L,...K})}async _call(h,{num_crops:V=null}={}){if(this._num_crops=V??=this.config.num_crops,V<4||I(V)%1!==0)throw new Error("num_crops must be a square number >= 4");Array.isArray(h)||(h=[h]);const O=h.length,K=await Promise.all(h.map(x=>this.preprocess(x))),me=K.map(x=>x.original_size),R=K.map(x=>x.reshaped_input_size),G=[];for(const{pixel_values:x}of K){x.unsqueeze_(0);const[E,Y]=x.dims.slice(-2),U=await(0,b.interpolate_4d)(x,{size:[F,F],mode:"bicubic"});if(V>0){const de=[],oe=I(V),Z=f(Y/oe),he=f(E/oe);for(let Me=0;Me<oe;++Me)for(let be=0;be<oe;++be){let fe,Re,ke,le;Me===oe-1?(Re=E-he,le=E):(Re=Me*he,le=(Me+1)*he),be===oe-1?(fe=Y-Z,ke=Y):(fe=be*Z,ke=(be+1)*Z);const W=[Re,fe],ne=[le,ke],_e=await(0,b.slice)(x,W,ne,q);de.push(_e)}const ie=await(0,b.interpolate_4d)((0,b.cat)(de,0),{size:[F,F],mode:"bicubic"});G.push((0,b.cat)([U,ie],0))}else G.push(U)}const X=(0,b.stack)(G,0),L=R.map(x=>x.map(E=>F*S(E/F))),$=new b.Tensor("int64",L.flat(),[O,2]),T=L.map(([x,E])=>this.calc_num_image_tokens_from_image_size(E,x));return{pixel_values:X,original_sizes:me,reshaped_input_sizes:R,image_sizes:$,num_img_tokens:T}}}},"./src/models/phi3_v/processing_phi3_v.js":(re,m,n)=>{n.r(m),n.d(m,{Phi3VProcessor:()=>f});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js");n("./src/utils/image.js");const q="<|image|>",S=/<\|image_\d+\|>/g;class f extends _.Processor{static image_processor_class=b.AutoImageProcessor;static tokenizer_class=F.AutoTokenizer;async _call(D,y=null,{padding:h=!0,truncation:V=!0,num_crops:O=null}={}){Array.isArray(D)||(D=[D]);let K,me;if(y){me=await this.image_processor(y,{num_crops:O});const{num_img_tokens:R}=me,G=D.map((L,$)=>L.split(S).join(q.repeat(R[$])));K=this.tokenizer(G,{padding:h,truncation:V});const X=this.tokenizer.model.convert_tokens_to_ids([q])[0];K.input_ids.map_(L=>L==X?-L:L)}else K=this.tokenizer(D);return{...K,...me}}}},"./src/models/processors.js":(re,m,n)=>{n.r(m),n.d(m,{Florence2Processor:()=>_.Florence2Processor,Gemma3nProcessor:()=>b.Gemma3nProcessor,GroundingDinoProcessor:()=>F.GroundingDinoProcessor,Idefics3Processor:()=>q.Idefics3Processor,JinaCLIPProcessor:()=>f.JinaCLIPProcessor,LlavaProcessor:()=>I.LlavaProcessor,MgpstrProcessor:()=>D.MgpstrProcessor,MoonshineProcessor:()=>y.MoonshineProcessor,OwlViTProcessor:()=>h.OwlViTProcessor,PaliGemmaProcessor:()=>O.PaliGemmaProcessor,Phi3VProcessor:()=>V.Phi3VProcessor,PyAnnoteProcessor:()=>K.PyAnnoteProcessor,Qwen2VLProcessor:()=>me.Qwen2VLProcessor,SamProcessor:()=>R.SamProcessor,SmolVLMProcessor:()=>G.SmolVLMProcessor,SpeechT5Processor:()=>X.SpeechT5Processor,UltravoxProcessor:()=>L.UltravoxProcessor,VLChatProcessor:()=>S.VLChatProcessor,VoxtralProcessor:()=>$.VoxtralProcessor,Wav2Vec2Processor:()=>T.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>x.Wav2Vec2ProcessorWithLM,WhisperProcessor:()=>E.WhisperProcessor});var _=n("./src/models/florence2/processing_florence2.js"),b=n("./src/models/gemma3n/processing_gemma3n.js"),F=n("./src/models/grounding_dino/processing_grounding_dino.js"),q=n("./src/models/idefics3/processing_idefics3.js"),S=n("./src/models/janus/processing_janus.js"),f=n("./src/models/jina_clip/processing_jina_clip.js"),I=n("./src/models/llava/processing_llava.js"),D=n("./src/models/mgp_str/processing_mgp_str.js"),y=n("./src/models/moonshine/processing_moonshine.js"),h=n("./src/models/owlvit/processing_owlvit.js"),V=n("./src/models/phi3_v/processing_phi3_v.js"),O=n("./src/models/paligemma/processing_paligemma.js"),K=n("./src/models/pyannote/processing_pyannote.js"),me=n("./src/models/qwen2_vl/processing_qwen2_vl.js"),R=n("./src/models/sam/processing_sam.js"),G=n("./src/models/smolvlm/processing_smolvlm.js"),X=n("./src/models/speecht5/processing_speecht5.js"),L=n("./src/models/ultravox/processing_ultravox.js"),$=n("./src/models/voxtral/processing_voxtral.js"),T=n("./src/models/wav2vec2/processing_wav2vec2.js"),x=n("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"),E=n("./src/models/whisper/processing_whisper.js")},"./src/models/pvt/image_processing_pvt.js":(re,m,n)=>{n.r(m),n.d(m,{PvtImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}},"./src/models/pyannote/feature_extraction_pyannote.js":(re,m,n)=>{n.r(m),n.d(m,{PyAnnoteFeatureExtractor:()=>q});var _=n("./src/base/feature_extraction_utils.js"),b=n("./src/utils/tensor.js"),F=n("./src/utils/maths.js");class q extends _.FeatureExtractor{async _call(f){(0,_.validate_audio_inputs)(f,"PyAnnoteFeatureExtractor"),f instanceof Float64Array&&(f=new Float32Array(f));const I=[1,1,f.length];return{input_values:new b.Tensor("float32",f,I)}}samples_to_frames(f){return(f-this.config.offset)/this.config.step}post_process_speaker_diarization(f,I){const D=I/this.samples_to_frames(I)/this.config.sampling_rate,y=[];for(const h of f.tolist()){const V=[];let O=-1;for(let K=0;K<h.length;++K){const me=(0,F.softmax)(h[K]),[R,G]=(0,F.max)(me),[X,L]=[K,K+1];G!==O?(O=G,V.push({id:G,start:X,end:L,score:R})):(V.at(-1).end=L,V.at(-1).score+=R)}y.push(V.map(({id:K,start:me,end:R,score:G})=>({id:K,start:me*D,end:R*D,confidence:G/(R-me)})))}return y}}},"./src/models/pyannote/processing_pyannote.js":(re,m,n)=>{n.r(m),n.d(m,{PyAnnoteProcessor:()=>F});var _=n("./src/base/processing_utils.js"),b=n("./src/models/pyannote/feature_extraction_pyannote.js");class F extends _.Processor{static feature_extractor_class=b.PyAnnoteFeatureExtractor;async _call(S){return await this.feature_extractor(S)}post_process_speaker_diarization(...S){return this.feature_extractor.post_process_speaker_diarization(...S)}get sampling_rate(){return this.feature_extractor.config.sampling_rate}}},"./src/models/qwen2_vl/image_processing_qwen2_vl.js":(re,m,n)=>{n.r(m),n.d(m,{Qwen2VLImageProcessor:()=>F});var _=n("./src/base/image_processors_utils.js"),b=n("./src/utils/tensor.js");class F extends _.ImageProcessor{async _call(S,...f){const{pixel_values:I,original_sizes:D,reshaped_input_sizes:y}=await super._call(S,...f);let h=I;const{temporal_patch_size:V,merge_size:O,patch_size:K}=this.config;h.dims[0]===1&&(h=(0,b.cat)(Array.from({length:V},()=>h),0));const me=h.dims[0]/V,R=h.dims[1],G=Math.floor(h.dims[2]/K),X=Math.floor(h.dims[3]/K),L=h.view(me,V,R,Math.floor(G/O),O,K,Math.floor(X/O),O,K).permute(0,3,6,4,7,2,1,5,8).view(me*G*X,R*V*K*K),$=new b.Tensor("int64",[me,G,X],[1,3]);return{pixel_values:L,image_grid_thw:$,original_sizes:D,reshaped_input_sizes:y}}}},"./src/models/qwen2_vl/processing_qwen2_vl.js":(re,m,n)=>{n.r(m),n.d(m,{Qwen2VLProcessor:()=>q});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js"),F=n("./src/tokenizers.js");n("./src/utils/image.js");class q extends _.Processor{static image_processor_class=b.AutoImageProcessor;static tokenizer_class=F.AutoTokenizer;async _call(f,I=null,...D){Array.isArray(f)||(f=[f]);let y,h;if(I&&(y=await this.image_processor(I),h=y.image_grid_thw),h){let O=this.image_processor.config.merge_size**2,K=0;const me=h.tolist();f=f.map(R=>{for(;R.includes("<|image_pad|>");){const G=Number(me[K++].reduce((X,L)=>X*L,1n));R=R.replace("<|image_pad|>","<|placeholder|>".repeat(Math.floor(G/O)))}return R.replaceAll("<|placeholder|>","<|image_pad|>")})}return{...this.tokenizer(f),...y}}}},"./src/models/rt_detr/image_processing_rt_detr.js":(re,m,n)=>{n.r(m),n.d(m,{RTDetrImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{post_process_object_detection(...q){return(0,_.post_process_object_detection)(...q)}}},"./src/models/sam/image_processing_sam.js":(re,m,n)=>{n.r(m),n.d(m,{SamImageProcessor:()=>q});var _=n("./src/base/image_processors_utils.js"),b=n("./src/utils/core.js"),F=n("./src/utils/tensor.js");class q extends _.ImageProcessor{reshape_input_points(f,I,D,y=!1){f=structuredClone(f);let h=(0,b.calculateDimensions)(f);if(h.length===3)y||(h=[1,...h]),f=[f];else if(h.length!==4)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");for(let V=0;V<f.length;++V){let O=I[V],K=D[V],me=[K[0]/O[0],K[1]/O[1]];for(let R=0;R<f[V].length;++R)for(let G=0;G<f[V][R].length;++G)for(let X=0;X<f[V][R][G].length;++X)f[V][R][G][X]*=me[X%2]}return new F.Tensor("float32",Float32Array.from(f.flat(1/0)),h)}add_input_labels(f,I){let D=(0,b.calculateDimensions)(f);if(D.length===2)D=[1,...D],f=[f];else if(D.length!==3)throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");if(D.some((y,h)=>y!==I.dims[h]))throw Error(`The first ${D.length} dimensions of 'input_points' and 'input_labels' must be the same.`);return new F.Tensor("int64",f.flat(1/0).map(BigInt),D)}async _call(f,{input_points:I=null,input_labels:D=null,input_boxes:y=null}={}){const h=await super._call(f);if(I&&(h.input_points=this.reshape_input_points(I,h.original_sizes,h.reshaped_input_sizes)),D){if(!h.input_points)throw Error("`input_points` must be provided if `input_labels` are provided.");h.input_labels=this.add_input_labels(D,h.input_points)}return y&&(h.input_boxes=this.reshape_input_points(y,h.original_sizes,h.reshaped_input_sizes,!0)),h}async post_process_masks(f,I,D,{mask_threshold:y=0,binarize:h=!0,pad_size:V=null}={}){const O=[];V=V??this.pad_size;const K=[V.height,V.width];for(let me=0;me<I.length;++me){const R=I[me],G=D[me];let X=await(0,F.interpolate_4d)(f[me],{mode:"bilinear",size:K});if(X=X.slice(null,null,[0,G[0]],[0,G[1]]),X=await(0,F.interpolate_4d)(X,{mode:"bilinear",size:R}),h){const L=X.data,$=new Uint8Array(L.length);for(let T=0;T<L.length;++T)L[T]>y&&($[T]=1);X=new F.Tensor("bool",$,X.dims)}O.push(X)}return O}generate_crop_boxes(f,I,{crop_n_layers:D=0,overlap_ratio:y=512/1500,points_per_crop:h=32,crop_n_points_downscale_factor:V=1}={}){}}},"./src/models/sam/processing_sam.js":(re,m,n)=>{n.r(m),n.d(m,{SamProcessor:()=>F});var _=n("./src/base/processing_utils.js"),b=n("./src/models/auto/image_processing_auto.js");class F extends _.Processor{static image_processor_class=b.AutoImageProcessor;async _call(...S){return await this.image_processor(...S)}post_process_masks(...S){return this.image_processor.post_process_masks(...S)}reshape_input_points(...S){return this.image_processor.reshape_input_points(...S)}}},"./src/models/seamless_m4t/feature_extraction_seamless_m4t.js":(re,m,n)=>{n.r(m),n.d(m,{SeamlessM4TFeatureExtractor:()=>q});var _=n("./src/base/feature_extraction_utils.js"),b=n("./src/utils/tensor.js"),F=n("./src/utils/audio.js");class q extends _.FeatureExtractor{constructor(f){super(f);const I=this.config.sampling_rate,D=(0,F.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(I/2),I,null,"kaldi",!0);this.mel_filters=D,this.window=(0,F.window_function)(400,"povey",{periodic:!1})}async _extract_fbank_features(f,I){return f=f.map(D=>D*32768),(0,F.spectrogram)(f,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,max_num_frames:I,transpose:!0})}async _call(f,{padding:I=!0,pad_to_multiple_of:D=2,do_normalize_per_mel_bins:y=!0,return_attention_mask:h=!0}={}){(0,_.validate_audio_inputs)(f,"SeamlessM4TFeatureExtractor");let V=await this._extract_fbank_features(f,this.config.max_length);if(y){const[$,T]=V.dims,x=V.data;for(let E=0;E<T;++E){let Y=0;for(let Z=0;Z<$;++Z)Y+=x[Z*T+E];const U=Y/$;let de=0;for(let Z=0;Z<$;++Z)de+=(x[Z*T+E]-U)**2;de/=$-1;const oe=Math.sqrt(de+1e-7);for(let Z=0;Z<$;++Z){const he=Z*T+E;x[he]=(x[he]-U)/oe}}}let O;if(I){const[$,T]=V.dims,x=V.data,E=$%D;if(E>0){const Y=new Float32Array(T*($+E));Y.set(x),Y.fill(this.config.padding_value,x.length);const U=$+E;V=new b.Tensor(V.type,Y,[U,T]),h&&(O=new b.Tensor("int64",new BigInt64Array(U),[1,U]),O.data.fill(1n,0,$))}}const[K,me]=V.dims,R=this.config.stride;if(K%R!==0)throw new Error(`The number of frames (${K}) must be a multiple of the stride (${R}).`);const X=V.view(1,Math.floor(K/R),me*R),L={input_features:X};if(h){const $=X.dims[1],T=new BigInt64Array($);if(O){const x=O.data;for(let E=1,Y=0;E<K;E+=R,++Y)T[Y]=x[E]}else T.fill(1n);L.attention_mask=new b.Tensor("int64",T,[1,$])}return L}}},"./src/models/segformer/image_processing_segformer.js":(re,m,n)=>{n.r(m),n.d(m,{SegformerFeatureExtractor:()=>F,SegformerImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{post_process_semantic_segmentation(...S){return(0,_.post_process_semantic_segmentation)(...S)}}class F extends b{}},"./src/models/siglip/image_processing_siglip.js":(re,m,n)=>{n.r(m),n.d(m,{SiglipImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}},"./src/models/smolvlm/image_processing_smolvlm.js":(re,m,n)=>{n.r(m),n.d(m,{SmolVLMImageProcessor:()=>_.Idefics3ImageProcessor});var _=n("./src/models/idefics3/image_processing_idefics3.js")},"./src/models/smolvlm/processing_smolvlm.js":(re,m,n)=>{n.r(m),n.d(m,{SmolVLMProcessor:()=>_.Idefics3Processor});var _=n("./src/models/idefics3/processing_idefics3.js")},"./src/models/snac/feature_extraction_snac.js":(re,m,n)=>{n.r(m),n.d(m,{SnacFeatureExtractor:()=>b});var _=n("./src/models/dac/feature_extraction_dac.js");class b extends _.DacFeatureExtractor{}},"./src/models/speecht5/feature_extraction_speecht5.js":(re,m,n)=>{n.r(m),n.d(m,{SpeechT5FeatureExtractor:()=>b});var _=n("./src/base/feature_extraction_utils.js");class b extends _.FeatureExtractor{}},"./src/models/speecht5/processing_speecht5.js":(re,m,n)=>{n.r(m),n.d(m,{SpeechT5Processor:()=>q});var _=n("./src/base/processing_utils.js"),b=n("./src/tokenizers.js"),F=n("./src/models/auto/feature_extraction_auto.js");class q extends _.Processor{static tokenizer_class=b.AutoTokenizer;static feature_extractor_class=F.AutoFeatureExtractor;async _call(f){return await this.feature_extractor(f)}}},"./src/models/swin2sr/image_processing_swin2sr.js":(re,m,n)=>{n.r(m),n.d(m,{Swin2SRImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{pad_image(q,S,f,I={}){const[D,y,h]=S;return super.pad_image(q,S,{width:y+(f-y%f)%f,height:D+(f-D%f)%f},{mode:"symmetric",center:!1,constant_values:-1,...I})}}},"./src/models/ultravox/processing_ultravox.js":(re,m,n)=>{n.r(m),n.d(m,{UltravoxProcessor:()=>q});var _=n("./src/models/auto/feature_extraction_auto.js"),b=n("./src/tokenizers.js"),F=n("./src/base/processing_utils.js");class q extends F.Processor{static tokenizer_class=b.AutoTokenizer;static feature_extractor_class=_.AutoFeatureExtractor;static uses_processor_config=!0;async _call(f,I=null,D={}){if(Array.isArray(f))throw new Error("Batched inputs are not supported yet.");let y={};if(I){const V=I.length,{input_features:O}=await this.feature_extractor(I,{...D,max_length:V}),K=Math.round(V/this.config.encoder_ds_factor+1e-4),me=1+Math.ceil(K/this.config.stack_factor);y.audio_token_len=[me],y.audio_values=O;const R=this.config.audio_placeholder;if(!f.includes(R))throw new Error(`The input text does not contain the image token ${R}.`);f=f.replaceAll(R,R.repeat(me))}return{...this.tokenizer(f,{add_special_tokens:!1,...D}),...y}}}},"./src/models/vit/image_processing_vit.js":(re,m,n)=>{n.r(m),n.d(m,{ViTFeatureExtractor:()=>F,ViTImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{}class F extends b{}},"./src/models/vitmatte/image_processing_vitmatte.js":(re,m,n)=>{n.r(m),n.d(m,{VitMatteImageProcessor:()=>F});var _=n("./src/base/image_processors_utils.js"),b=n("./src/utils/tensor.js");class F extends _.ImageProcessor{async _call(S,f){Array.isArray(S)||(S=[S]),Array.isArray(f)||(f=[f]);const I=await Promise.all(S.map(h=>this.preprocess(h))),D=await Promise.all(f.map(h=>this.preprocess(h,{do_normalize:!1,do_convert_rgb:!1,do_convert_grayscale:!0})));return{pixel_values:(0,b.stack)(I.map((h,V)=>(0,b.cat)([h.pixel_values,D[V].pixel_values],0)),0),original_sizes:I.map(h=>h.original_size),reshaped_input_sizes:I.map(h=>h.reshaped_input_size)}}}},"./src/models/vitpose/image_processing_vitpose.js":(re,m,n)=>{n.r(m),n.d(m,{VitPoseImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{post_process_pose_estimation(q,S,{threshold:f=null}={}){const I=q.tolist(),[D,y,h,V]=q.dims,O=[];for(let K=0;K<D;++K){const me=I[K],R=S[K],G=[];for(let X=0;X<R.length;++X){const L=R[X],$=[],T=[],x=[],E=L.at(-2)/V,Y=L.at(-1)/h;for(let U=0;U<me.length;++U){let[de,oe]=[0,0],Z=0,he=-1/0;const ie=me[U];for(let be=0;be<ie.length;++be){const fe=ie[be];for(let Re=0;Re<fe.length;++Re){const ke=fe[Re];Z+=ke,he=Math.max(he,ke),de+=(Re+.5)*ke,oe+=be*ke}}if(f!=null&&he<f)continue;const Me=[E*de/Z,Y*oe/Z];$.push(Me),x.push(U),T.push(he)}G.push({bbox:L,scores:T,labels:x,keypoints:$})}O.push(G)}return O}}},"./src/models/voxtral/processing_voxtral.js":(re,m,n)=>{n.r(m),n.d(m,{VoxtralProcessor:()=>y});var _=n("./src/models/auto/feature_extraction_auto.js"),b=n("./src/tokenizers.js"),F=n("./src/base/processing_utils.js"),q=n("./src/utils/tensor.js");const S="[AUDIO]",f="[BEGIN_AUDIO]",I=375;function D(h,V){const O=[];for(let K=0;K<h.length;K+=V)O.push(h.subarray(K,Math.min(K+V,h.length)));return O}class y extends F.Processor{static tokenizer_class=b.AutoTokenizer;static feature_extractor_class=_.AutoFeatureExtractor;static uses_processor_config=!1;async _call(V,O=null,K={}){if(Array.isArray(V))throw new Error("Batched inputs are not supported yet.");const me={};if(O){if(!V.includes(S))throw new Error(`The input text does not contain the audio token ${S}.`);Array.isArray(O)||(O=[O]);const G=V.split(S),X=G.length-1;if(X!==O.length)throw new Error(`The number of audio inputs (${O.length}) does not match the number of audio tokens in the text (${X}).`);const L=this.feature_extractor.config.n_samples,$=O.map(U=>D(U,L)),T=$.map(U=>U.length),x=$.flat(),E=(await Promise.all(x.map(U=>this.feature_extractor(U,K)))).map(U=>U.input_features);me.audio_values=E.length>1?(0,q.cat)(E,0):E[0];let Y=G[0];for(let U=0;U<T.length;++U){Y+=f;for(let de=0;de<T[U];++de)Y+=S.repeat(I);Y+=G[U+1]}V=Y}return{...this.tokenizer(V,{add_special_tokens:!1,...K}),...me}}}},"./src/models/wav2vec2/feature_extraction_wav2vec2.js":(re,m,n)=>{n.r(m),n.d(m,{Wav2Vec2FeatureExtractor:()=>F});var _=n("./src/base/feature_extraction_utils.js"),b=n("./src/utils/tensor.js");class F extends _.FeatureExtractor{_zero_mean_unit_var_norm(S){const I=S.reduce((y,h)=>y+h,0)/S.length,D=S.reduce((y,h)=>y+(h-I)**2,0)/S.length;return S.map(y=>(y-I)/Math.sqrt(D+1e-7))}async _call(S){(0,_.validate_audio_inputs)(S,"Wav2Vec2FeatureExtractor"),S instanceof Float64Array&&(S=new Float32Array(S));let f=S;this.config.do_normalize&&(f=this._zero_mean_unit_var_norm(f));const I=[1,f.length];return{input_values:new b.Tensor("float32",f,I),attention_mask:new b.Tensor("int64",new BigInt64Array(f.length).fill(1n),I)}}}},"./src/models/wav2vec2/processing_wav2vec2.js":(re,m,n)=>{n.r(m),n.d(m,{Wav2Vec2Processor:()=>q});var _=n("./src/tokenizers.js"),b=n("./src/models/auto/feature_extraction_auto.js"),F=n("./src/base/processing_utils.js");class q extends F.Processor{static tokenizer_class=_.AutoTokenizer;static feature_extractor_class=b.AutoFeatureExtractor;async _call(f){return await this.feature_extractor(f)}}},"./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js":(re,m,n)=>{n.r(m),n.d(m,{Wav2Vec2ProcessorWithLM:()=>q});var _=n("./src/tokenizers.js"),b=n("./src/models/auto/feature_extraction_auto.js"),F=n("./src/base/processing_utils.js");class q extends F.Processor{static tokenizer_class=_.AutoTokenizer;static feature_extractor_class=b.AutoFeatureExtractor;async _call(f){return await this.feature_extractor(f)}}},"./src/models/wespeaker/feature_extraction_wespeaker.js":(re,m,n)=>{n.r(m),n.d(m,{WeSpeakerFeatureExtractor:()=>F});var _=n("./src/base/feature_extraction_utils.js");n("./src/utils/tensor.js");var b=n("./src/utils/audio.js");class F extends _.FeatureExtractor{constructor(S){super(S);const f=this.config.sampling_rate,I=(0,b.mel_filter_bank)(257,this.config.num_mel_bins,20,Math.floor(f/2),f,null,"kaldi",!0);this.mel_filters=I,this.window=(0,b.window_function)(400,"hamming",{periodic:!1}),this.min_num_frames=this.config.min_num_frames}async _extract_fbank_features(S){return S=S.map(f=>f*32768),(0,b.spectrogram)(S,this.window,400,160,{fft_length:512,power:2,center:!1,preemphasis:.97,mel_filters:this.mel_filters,log_mel:"log",mel_floor:1192092955078125e-22,remove_dc_offset:!0,transpose:!0,min_num_frames:this.min_num_frames})}async _call(S){(0,_.validate_audio_inputs)(S,"WeSpeakerFeatureExtractor");const f=(await this._extract_fbank_features(S)).unsqueeze_(0);if(this.config.fbank_centering_span===null){const I=f.mean(1).data,D=f.data,[y,h,V]=f.dims;for(let O=0;O<y;++O){const K=O*h*V,me=O*V;for(let R=0;R<h;++R){const G=K+R*V;for(let X=0;X<V;++X)D[G+X]-=I[me+X]}}}return{input_features:f}}}},"./src/models/whisper/common_whisper.js":(re,m,n)=>{n.r(m),n.d(m,{WHISPER_LANGUAGE_MAPPING:()=>b,WHISPER_TO_LANGUAGE_CODE_MAPPING:()=>F,whisper_language_to_code:()=>q});const _=[["en","english"],["zh","chinese"],["de","german"],["es","spanish"],["ru","russian"],["ko","korean"],["fr","french"],["ja","japanese"],["pt","portuguese"],["tr","turkish"],["pl","polish"],["ca","catalan"],["nl","dutch"],["ar","arabic"],["sv","swedish"],["it","italian"],["id","indonesian"],["hi","hindi"],["fi","finnish"],["vi","vietnamese"],["he","hebrew"],["uk","ukrainian"],["el","greek"],["ms","malay"],["cs","czech"],["ro","romanian"],["da","danish"],["hu","hungarian"],["ta","tamil"],["no","norwegian"],["th","thai"],["ur","urdu"],["hr","croatian"],["bg","bulgarian"],["lt","lithuanian"],["la","latin"],["mi","maori"],["ml","malayalam"],["cy","welsh"],["sk","slovak"],["te","telugu"],["fa","persian"],["lv","latvian"],["bn","bengali"],["sr","serbian"],["az","azerbaijani"],["sl","slovenian"],["kn","kannada"],["et","estonian"],["mk","macedonian"],["br","breton"],["eu","basque"],["is","icelandic"],["hy","armenian"],["ne","nepali"],["mn","mongolian"],["bs","bosnian"],["kk","kazakh"],["sq","albanian"],["sw","swahili"],["gl","galician"],["mr","marathi"],["pa","punjabi"],["si","sinhala"],["km","khmer"],["sn","shona"],["yo","yoruba"],["so","somali"],["af","afrikaans"],["oc","occitan"],["ka","georgian"],["be","belarusian"],["tg","tajik"],["sd","sindhi"],["gu","gujarati"],["am","amharic"],["yi","yiddish"],["lo","lao"],["uz","uzbek"],["fo","faroese"],["ht","haitian creole"],["ps","pashto"],["tk","turkmen"],["nn","nynorsk"],["mt","maltese"],["sa","sanskrit"],["lb","luxembourgish"],["my","myanmar"],["bo","tibetan"],["tl","tagalog"],["mg","malagasy"],["as","assamese"],["tt","tatar"],["haw","hawaiian"],["ln","lingala"],["ha","hausa"],["ba","bashkir"],["jw","javanese"],["su","sundanese"]],b=new Map(_),F=new Map([..._.map(([S,f])=>[f,S]),["burmese","my"],["valencian","ca"],["flemish","nl"],["haitian","ht"],["letzeburgesch","lb"],["pushto","ps"],["panjabi","pa"],["moldavian","ro"],["moldovan","ro"],["sinhalese","si"],["castilian","es"]]);function q(S){S=S.toLowerCase();let f=F.get(S);if(f===void 0){const I=S.match(/^<\|([a-z]{2})\|>$/);if(I&&(S=I[1]),b.has(S))f=S;else{const y=S.length===2?b.keys():b.values();throw new Error(`Language "${S}" is not supported. Must be one of: ${JSON.stringify(Array.from(y))}`)}}return f}},"./src/models/whisper/feature_extraction_whisper.js":(re,m,n)=>{n.r(m),n.d(m,{WhisperFeatureExtractor:()=>q});var _=n("./src/base/feature_extraction_utils.js");n("./src/utils/tensor.js");var b=n("./src/utils/audio.js"),F=n("./src/utils/maths.js");class q extends _.FeatureExtractor{constructor(f){super(f),this.config.mel_filters??=(0,b.mel_filter_bank)(Math.floor(1+this.config.n_fft/2),this.config.feature_size,0,8e3,this.config.sampling_rate,"slaney","slaney"),this.window=(0,b.window_function)(this.config.n_fft,"hann")}async _extract_fbank_features(f){const I=await(0,b.spectrogram)(f,this.window,this.config.n_fft,this.config.hop_length,{power:2,mel_filters:this.config.mel_filters,log_mel:"log10",max_num_frames:Math.min(Math.floor(f.length/this.config.hop_length),this.config.nb_max_frames)}),D=I.data,y=(0,F.max)(D)[0];for(let h=0;h<D.length;++h)D[h]=(Math.max(D[h],y-8)+4)/4;return I}async _call(f,{max_length:I=null}={}){(0,_.validate_audio_inputs)(f,"WhisperFeatureExtractor");let D;const y=I??this.config.n_samples;return f.length>y?(f.length>this.config.n_samples&&console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."),D=f.slice(0,y)):(D=new Float32Array(y),D.set(f)),{input_features:(await this._extract_fbank_features(D)).unsqueeze_(0)}}}},"./src/models/whisper/generation_whisper.js":(re,m,n)=>{n.r(m),n.d(m,{WhisperGenerationConfig:()=>b});var _=n("./src/generation/configuration_utils.js");class b extends _.GenerationConfig{return_timestamps=null;return_token_timestamps=null;num_frames=null;alignment_heads=null;task=null;language=null;no_timestamps_token_id=null;prompt_ids=null;is_multilingual=null;lang_to_id=null;task_to_id=null;max_initial_timestamp_index=1}},"./src/models/whisper/processing_whisper.js":(re,m,n)=>{n.r(m),n.d(m,{WhisperProcessor:()=>q});var _=n("./src/models/auto/feature_extraction_auto.js"),b=n("./src/tokenizers.js"),F=n("./src/base/processing_utils.js");class q extends F.Processor{static tokenizer_class=b.AutoTokenizer;static feature_extractor_class=_.AutoFeatureExtractor;async _call(f){return await this.feature_extractor(f)}}},"./src/models/yolos/image_processing_yolos.js":(re,m,n)=>{n.r(m),n.d(m,{YolosFeatureExtractor:()=>F,YolosImageProcessor:()=>b});var _=n("./src/base/image_processors_utils.js");class b extends _.ImageProcessor{post_process_object_detection(...S){return(0,_.post_process_object_detection)(...S)}}class F extends b{}},"./src/ops/registry.js":(re,m,n)=>{n.r(m),n.d(m,{TensorOpRegistry:()=>q});var _=n("./src/backends/onnx.js"),b=n("./src/utils/tensor.js");const F=async(S,f,I)=>{const D=await(0,_.createInferenceSession)(new Uint8Array(S),f);return async y=>{const h=(0,_.isONNXProxy)(),V=Object.fromEntries(Object.entries(y).map(([K,me])=>[K,(h?me.clone():me).ort_tensor])),O=await(0,_.runInferenceSession)(D,V);return Array.isArray(I)?I.map(K=>new b.Tensor(O[K])):new b.Tensor(O[I])}};class q{static session_options={};static get nearest_interpolate_4d(){return this._nearest_interpolate_4d||(this._nearest_interpolate_4d=F([8,10,18,0,58,129,1,10,41,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,18,10,4,109,111,100,101,34,7,110,101,97,114,101,115,116,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,21],this.session_options,"y")),this._nearest_interpolate_4d}static get bilinear_interpolate_4d(){return this._bilinear_interpolate_4d||(this._bilinear_interpolate_4d=F([8,9,18,0,58,128,1,10,40,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,17,10,4,109,111,100,101,34,6,108,105,110,101,97,114,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bilinear_interpolate_4d}static get bicubic_interpolate_4d(){return this._bicubic_interpolate_4d||(this._bicubic_interpolate_4d=F([8,9,18,0,58,127,10,39,10,1,120,10,0,10,0,10,1,115,18,1,121,34,6,82,101,115,105,122,101,42,16,10,4,109,111,100,101,34,5,99,117,98,105,99,160,1,3,18,1,114,90,31,10,1,120,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,90,15,10,1,115,18,10,10,8,8,7,18,4,10,2,8,4,98,31,10,1,121,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,99,10,3,18,1,104,10,3,18,1,119,66,2,16,20],this.session_options,"y")),this._bicubic_interpolate_4d}static get matmul(){return this._matmul||(this._matmul=F([8,9,18,0,58,55,10,17,10,1,97,10,1,98,18,1,99,34,6,77,97,116,77,117,108,18,1,114,90,9,10,1,97,18,4,10,2,8,1,90,9,10,1,98,18,4,10,2,8,1,98,9,10,1,99,18,4,10,2,8,1,66,2,16,20],this.session_options,"c")),this._matmul}static get stft(){return this._stft||(this._stft=F([8,7,18,0,58,148,1,10,38,10,1,115,10,1,106,10,1,119,10,1,108,18,1,111,34,4,83,84,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,115,90,26,10,1,115,18,21,10,19,8,1,18,15,10,3,18,1,98,10,3,18,1,115,10,3,18,1,99,90,11,10,1,106,18,6,10,4,8,7,18,0,90,16,10,1,119,18,11,10,9,8,1,18,5,10,3,18,1,119,90,11,10,1,108,18,6,10,4,8,7,18,0,98,31,10,1,111,18,26,10,24,8,1,18,20,10,3,18,1,98,10,3,18,1,102,10,3,18,1,100,10,3,18,1,99,66,2,16,17],this.session_options,"o")),this._stft}static get rfft(){return this._rfft||(this._rfft=F([8,9,18,0,58,97,10,33,10,1,120,10,0,10,1,97,18,1,121,34,3,68,70,84,42,15,10,8,111,110,101,115,105,100,101,100,24,1,160,1,2,18,1,100,90,21,10,1,120,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,90,11,10,1,97,18,6,10,4,8,7,18,0,98,21,10,1,121,18,16,10,14,8,1,18,10,10,3,18,1,115,10,3,18,1,99,66,2,16,20],this.session_options,"y")),this._rfft}static get top_k(){return this._top_k||(this._top_k=F([8,10,18,0,58,73,10,18,10,1,120,10,1,107,18,1,118,18,1,105,34,4,84,111,112,75,18,1,116,90,9,10,1,120,18,4,10,2,8,1,90,15,10,1,107,18,10,10,8,8,7,18,4,10,2,8,1,98,9,10,1,118,18,4,10,2,8,1,98,9,10,1,105,18,4,10,2,8,7,66,2,16,21],this.session_options,["v","i"])),this._top_k}static get slice(){return this._slice||(this._slice=F([8,7,18,0,58,96,10,25,10,1,120,10,1,115,10,1,101,10,1,97,10,1,116,18,1,121,34,5,83,108,105,99,101,18,1,114,90,9,10,1,120,18,4,10,2,8,1,90,9,10,1,115,18,4,10,2,8,7,90,9,10,1,101,18,4,10,2,8,7,90,9,10,1,97,18,4,10,2,8,7,90,9,10,1,116,18,4,10,2,8,7,98,9,10,1,121,18,4,10,2,8,1,66,2,16,13],this.session_options,"y")),this._slice}}},"./src/pipelines.js":(re,m,n)=>{n.r(m),n.d(m,{AudioClassificationPipeline:()=>oe,AutomaticSpeechRecognitionPipeline:()=>he,BackgroundRemovalPipeline:()=>fe,DepthEstimationPipeline:()=>xe,DocumentQuestionAnsweringPipeline:()=>W,FeatureExtractionPipeline:()=>U,FillMaskPipeline:()=>X,ImageClassificationPipeline:()=>Me,ImageFeatureExtractionPipeline:()=>de,ImageSegmentationPipeline:()=>be,ImageToImagePipeline:()=>_e,ImageToTextPipeline:()=>ie,ObjectDetectionPipeline:()=>ke,Pipeline:()=>K,QuestionAnsweringPipeline:()=>G,SummarizationPipeline:()=>$,Text2TextGenerationPipeline:()=>L,TextClassificationPipeline:()=>me,TextGenerationPipeline:()=>E,TextToAudioPipeline:()=>ne,TokenClassificationPipeline:()=>R,TranslationPipeline:()=>T,ZeroShotAudioClassificationPipeline:()=>Z,ZeroShotClassificationPipeline:()=>Y,ZeroShotImageClassificationPipeline:()=>Re,ZeroShotObjectDetectionPipeline:()=>le,pipeline:()=>He});var _=n("./src/tokenizers.js"),b=n("./src/models.js"),F=n("./src/models/auto/processing_auto.js");n("./src/base/processing_utils.js");var q=n("./src/utils/generic.js"),S=n("./src/utils/core.js"),f=n("./src/utils/maths.js"),I=n("./src/utils/audio.js"),D=n("./src/utils/tensor.js"),y=n("./src/utils/image.js");async function h(ze){return Array.isArray(ze)||(ze=[ze]),await Promise.all(ze.map(J=>y.RawImage.read(J)))}async function V(ze,J){return Array.isArray(ze)||(ze=[ze]),await Promise.all(ze.map(j=>typeof j=="string"||j instanceof URL?(0,I.read_audio)(j,J):j instanceof Float64Array?new Float32Array(j):j))}function O(ze,J){J&&(ze=ze.map(je=>je|0));const[j,ve,Fe,Oe]=ze;return{xmin:j,ymin:ve,xmax:Fe,ymax:Oe}}class K extends q.Callable{constructor({task:J,model:j,tokenizer:ve=null,processor:Fe=null}){super(),this.task=J,this.model=j,this.tokenizer=ve,this.processor=Fe}async dispose(){await this.model.dispose()}}class me extends K{constructor(J){super(J)}async _call(J,{top_k:j=1}={}){const ve=this.tokenizer(J,{padding:!0,truncation:!0}),Fe=await this.model(ve),Oe=this.model.config.problem_type==="multi_label_classification"?Ne=>Ne.sigmoid():Ne=>new D.Tensor("float32",(0,f.softmax)(Ne.data),Ne.dims),je=this.model.config.id2label,Ee=[];for(const Ne of Fe.logits){const $e=Oe(Ne),Ue=await(0,D.topk)($e,j),Ke=Ue[0].tolist(),De=Ue[1].tolist().map((Mt,et)=>({label:je?je[Mt]:`LABEL_${Mt}`,score:Ke[et]}));j===1?Ee.push(...De):Ee.push(De)}return Array.isArray(J)||j===1?Ee:Ee[0]}}class R extends K{constructor(J){super(J)}async _call(J,{ignore_labels:j=["O"]}={}){const ve=Array.isArray(J),Fe=this.tokenizer(ve?J:[J],{padding:!0,truncation:!0}),je=(await this.model(Fe)).logits,Ee=this.model.config.id2label,Ne=[];for(let $e=0;$e<je.dims[0];++$e){const Ue=Fe.input_ids[$e],Ke=je[$e],nt=[];for(let De=0;De<Ke.dims[0];++De){const Mt=Ke[De],et=(0,f.max)(Mt.data)[1],at=Ee?Ee[et]:`LABEL_${et}`;if(j.includes(at))continue;const dt=this.tokenizer.decode([Ue[De].item()],{skip_special_tokens:!0});if(dt==="")continue;const lt=(0,f.softmax)(Mt.data);nt.push({entity:at,score:lt[et],index:De,word:dt})}Ne.push(nt)}return ve?Ne:Ne[0]}}class G extends K{constructor(J){super(J)}async _call(J,j,{top_k:ve=1}={}){const Fe=this.tokenizer(J,{text_pair:j,padding:!0,truncation:!0}),{start_logits:Oe,end_logits:je}=await this.model(Fe),Ee=Fe.input_ids.tolist(),Ne=Fe.attention_mask.tolist(),$e=this.tokenizer.all_special_ids,Ue=[];for(let Ke=0;Ke<Oe.dims[0];++Ke){const nt=Ee[Ke],De=nt.findIndex(ct=>ct==this.tokenizer.sep_token_id);Ne[Ke].map((ct,ft)=>ct==1&&(ft===0||ft>De&&$e.findIndex(Vt=>Vt==nt[ft])===-1));const Mt=Oe[Ke].tolist(),et=je[Ke].tolist();for(let ct=1;ct<Mt.length;++ct)(Ne[Ke]==0||ct<=De||$e.findIndex(ft=>ft==nt[ct])!==-1)&&(Mt[ct]=-1/0,et[ct]=-1/0);const at=(0,f.softmax)(Mt).map((ct,ft)=>[ct,ft]),dt=(0,f.softmax)(et).map((ct,ft)=>[ct,ft]);at[0][0]=0,dt[0][0]=0;const lt=(0,S.product)(at,dt).filter(ct=>ct[0][1]<=ct[1][1]).map(ct=>[ct[0][1],ct[1][1],ct[0][0]*ct[1][0]]).sort((ct,ft)=>ft[2]-ct[2]);for(let ct=0;ct<Math.min(lt.length,ve);++ct){const[ft,Vt,Ut]=lt[ct],At=nt.slice(ft,Vt+1),ws=this.tokenizer.decode(At,{skip_special_tokens:!0});Ue.push({answer:ws,score:Ut})}}return ve===1?Ue[0]:Ue}}class X extends K{constructor(J){super(J)}async _call(J,{top_k:j=5}={}){const ve=this.tokenizer(J,{padding:!0,truncation:!0}),{logits:Fe}=await this.model(ve),Oe=[],je=ve.input_ids.tolist();for(let Ee=0;Ee<je.length;++Ee){const Ne=je[Ee],$e=Ne.findIndex(Mt=>Mt==this.tokenizer.mask_token_id);if($e===-1)throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);const Ue=Fe[Ee][$e],Ke=await(0,D.topk)(new D.Tensor("float32",(0,f.softmax)(Ue.data),Ue.dims),j),nt=Ke[0].tolist(),De=Ke[1].tolist();Oe.push(De.map((Mt,et)=>{const at=Ne.slice();return at[$e]=Mt,{score:nt[et],token:Number(Mt),token_str:this.tokenizer.decode([Mt]),sequence:this.tokenizer.decode(at,{skip_special_tokens:!0})}}))}return Array.isArray(J)?Oe:Oe[0]}}class L extends K{_key="generated_text";constructor(J){super(J)}async _call(J,j={}){Array.isArray(J)||(J=[J]),this.model.config.prefix&&(J=J.map(Ne=>this.model.config.prefix+Ne));const ve=this.model.config.task_specific_params;ve&&ve[this.task]&&ve[this.task].prefix&&(J=J.map(Ne=>ve[this.task].prefix+Ne));const Fe=this.tokenizer,Oe={padding:!0,truncation:!0};let je;this instanceof T&&"_build_translation_inputs"in Fe?je=Fe._build_translation_inputs(J,Oe,j):je=Fe(J,Oe);const Ee=await this.model.generate({...je,...j});return Fe.batch_decode(Ee,{skip_special_tokens:!0}).map(Ne=>({[this._key]:Ne}))}}class $ extends L{_key="summary_text";constructor(J){super(J)}}class T extends L{_key="translation_text";constructor(J){super(J)}}function x(ze){return Array.isArray(ze)&&ze.every(J=>"role"in J&&"content"in J)}class E extends K{constructor(J){super(J)}async _call(J,j={}){let ve=!1,Fe=!1,Oe=j.add_special_tokens??(this.tokenizer.add_bos_token||this.tokenizer.add_eos_token)??!1,je;if(typeof J=="string")je=J=[J];else if(Array.isArray(J)&&J.every(De=>typeof De=="string"))ve=!0,je=J;else{if(x(J))J=[J];else if(Array.isArray(J)&&J.every(x))ve=!0;else throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");Fe=!0,je=J.map(De=>this.tokenizer.apply_chat_template(De,{tokenize:!1,add_generation_prompt:!0})),Oe=!1}const Ee=Fe?!1:j.return_full_text??!0;this.tokenizer.padding_side="left";const Ne=this.tokenizer(je,{add_special_tokens:Oe,padding:!0,truncation:!0}),$e=await this.model.generate({...Ne,...j}),Ue=this.tokenizer.batch_decode($e,{skip_special_tokens:!0});let Ke;!Ee&&Ne.input_ids.dims.at(-1)>0&&(Ke=this.tokenizer.batch_decode(Ne.input_ids,{skip_special_tokens:!0}).map(De=>De.length));const nt=Array.from({length:J.length},De=>[]);for(let De=0;De<Ue.length;++De){const Mt=Math.floor(De/$e.dims[0]*J.length);Ke&&(Ue[De]=Ue[De].slice(Ke[Mt])),nt[Mt].push({generated_text:Fe?[...J[Mt],{role:"assistant",content:Ue[De]}]:Ue[De]})}return!ve&&nt.length===1?nt[0]:nt}}class Y extends K{constructor(J){super(J),this.label2id=Object.fromEntries(Object.entries(this.model.config.label2id).map(([j,ve])=>[j.toLowerCase(),ve])),this.entailment_id=this.label2id.entailment,this.entailment_id===void 0&&(console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."),this.entailment_id=2),this.contradiction_id=this.label2id.contradiction??this.label2id.not_entailment,this.contradiction_id===void 0&&(console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."),this.contradiction_id=0)}async _call(J,j,{hypothesis_template:ve="This example is {}.",multi_label:Fe=!1}={}){const Oe=Array.isArray(J);Oe||(J=[J]),Array.isArray(j)||(j=[j]);const je=j.map($e=>ve.replace("{}",$e)),Ee=Fe||j.length===1,Ne=[];for(const $e of J){const Ue=[];for(const De of je){const Mt=this.tokenizer($e,{text_pair:De,padding:!0,truncation:!0}),et=await this.model(Mt);Ee?Ue.push([et.logits.data[this.contradiction_id],et.logits.data[this.entailment_id]]):Ue.push(et.logits.data[this.entailment_id])}const nt=(Ee?Ue.map(De=>(0,f.softmax)(De)[1]):(0,f.softmax)(Ue)).map((De,Mt)=>[De,Mt]).sort((De,Mt)=>Mt[0]-De[0]);Ne.push({sequence:$e,labels:nt.map(De=>j[De[1]]),scores:nt.map(De=>De[0])})}return Oe?Ne:Ne[0]}}class U extends K{constructor(J){super(J)}async _call(J,{pooling:j="none",normalize:ve=!1,quantize:Fe=!1,precision:Oe="binary"}={}){const je=this.tokenizer(J,{padding:!0,truncation:!0}),Ee=await this.model(je);let Ne=Ee.last_hidden_state??Ee.logits??Ee.token_embeddings;switch(j){case"none":break;case"mean":Ne=(0,D.mean_pooling)(Ne,je.attention_mask);break;case"first_token":case"cls":Ne=Ne.slice(null,0);break;case"last_token":case"eos":Ne=Ne.slice(null,-1);break;default:throw Error(`Pooling method '${j}' not supported.`)}return ve&&(Ne=Ne.normalize(2,-1)),Fe&&(Ne=(0,D.quantize_embeddings)(Ne,Oe)),Ne}}class de extends K{constructor(J){super(J)}async _call(J,{pool:j=null}={}){const ve=await h(J),{pixel_values:Fe}=await this.processor(ve),Oe=await this.model({pixel_values:Fe});let je;if(j){if(!("pooler_output"in Oe))throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");je=Oe.pooler_output}else je=Oe.last_hidden_state??Oe.logits??Oe.image_embeds;return je}}class oe extends K{constructor(J){super(J)}async _call(J,{top_k:j=5}={}){const ve=this.processor.feature_extractor.config.sampling_rate,Fe=await V(J,ve),Oe=this.model.config.id2label,je=[];for(const Ee of Fe){const Ne=await this.processor(Ee),Ue=(await this.model(Ne)).logits[0],Ke=await(0,D.topk)(new D.Tensor("float32",(0,f.softmax)(Ue.data),Ue.dims),j),nt=Ke[0].tolist(),Mt=Ke[1].tolist().map((et,at)=>({label:Oe?Oe[et]:`LABEL_${et}`,score:nt[at]}));je.push(Mt)}return Array.isArray(J)?je:je[0]}}class Z extends K{constructor(J){super(J)}async _call(J,j,{hypothesis_template:ve="This is a sound of {}."}={}){const Fe=!Array.isArray(J);Fe&&(J=[J]);const Oe=j.map(Ue=>ve.replace("{}",Ue)),je=this.tokenizer(Oe,{padding:!0,truncation:!0}),Ee=this.processor.feature_extractor.config.sampling_rate,Ne=await V(J,Ee),$e=[];for(const Ue of Ne){const Ke=await this.processor(Ue),nt=await this.model({...je,...Ke}),De=(0,f.softmax)(nt.logits_per_audio.data);$e.push([...De].map((Mt,et)=>({score:Mt,label:j[et]})))}return Fe?$e[0]:$e}}class he extends K{constructor(J){super(J)}async _call(J,j={}){switch(this.model.config.model_type){case"whisper":case"lite-whisper":return this._call_whisper(J,j);case"wav2vec2":case"wav2vec2-bert":case"unispeech":case"unispeech-sat":case"hubert":return this._call_wav2vec2(J,j);case"moonshine":return this._call_moonshine(J,j);default:throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`)}}async _call_wav2vec2(J,j){j.language&&console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'),j.task&&console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');const ve=!Array.isArray(J);ve&&(J=[J]);const Fe=this.processor.feature_extractor.config.sampling_rate,Oe=await V(J,Fe),je=[];for(const Ee of Oe){const Ne=await this.processor(Ee),Ue=(await this.model(Ne)).logits[0],Ke=[];for(const De of Ue)Ke.push((0,f.max)(De.data)[1]);const nt=this.tokenizer.decode(Ke);je.push({text:nt})}return ve?je[0]:je}async _call_whisper(J,j){const ve=j.return_timestamps??!1,Fe=j.chunk_length_s??0,Oe=j.force_full_sequences??!1;let je=j.stride_length_s??null;const Ee={...j};ve==="word"&&(Ee.return_token_timestamps=!0,Ee.return_timestamps=!1);const Ne=!Array.isArray(J);Ne&&(J=[J]);const $e=this.processor.feature_extractor.config.chunk_length/this.model.config.max_source_positions,Ue=this.processor.feature_extractor.config.hop_length,Ke=this.processor.feature_extractor.config.sampling_rate,nt=await V(J,Ke),De=[];for(const Mt of nt){let et=[];if(Fe>0){if(je===null)je=Fe/6;else if(Fe<=je)throw Error("`chunk_length_s` must be larger than `stride_length_s`.");const lt=Ke*Fe,ct=Ke*je,ft=lt-2*ct;let Vt=0;for(;;){const Ut=Vt+lt,At=Mt.subarray(Vt,Ut),ws=await this.processor(At),Zt=Vt===0,Ss=Ut>=Mt.length;if(et.push({stride:[At.length,Zt?0:ct,Ss?0:ct],input_features:ws.input_features,is_last:Ss}),Ss)break;Vt+=ft}}else et=[{stride:[Mt.length,0,0],input_features:(await this.processor(Mt)).input_features,is_last:!0}];for(const lt of et){Ee.num_frames=Math.floor(lt.stride[0]/Ue);const ct=await this.model.generate({inputs:lt.input_features,...Ee});ve==="word"?(lt.tokens=ct.sequences.tolist()[0],lt.token_timestamps=ct.token_timestamps.tolist()[0].map(ft=>(0,f.round)(ft,2))):lt.tokens=ct[0].tolist(),lt.stride=lt.stride.map(ft=>ft/Ke)}const[at,dt]=this.tokenizer._decode_asr(et,{time_precision:$e,return_timestamps:ve,force_full_sequences:Oe});De.push({text:at,...dt})}return Ne?De[0]:De}async _call_moonshine(J,j){const ve=!Array.isArray(J);ve&&(J=[J]);const Fe=this.processor.feature_extractor.config.sampling_rate,Oe=await V(J,Fe),je=[];for(const Ee of Oe){const Ne=await this.processor(Ee),$e=Math.floor(Ee.length/Fe)*6,Ue=await this.model.generate({max_new_tokens:$e,...j,...Ne}),Ke=this.processor.batch_decode(Ue,{skip_special_tokens:!0})[0];je.push({text:Ke})}return ve?je[0]:je}}class ie extends K{constructor(J){super(J)}async _call(J,j={}){const ve=Array.isArray(J),Fe=await h(J),{pixel_values:Oe}=await this.processor(Fe),je=[];for(const Ee of Oe){Ee.dims=[1,...Ee.dims];const Ne=await this.model.generate({inputs:Ee,...j}),$e=this.tokenizer.batch_decode(Ne,{skip_special_tokens:!0}).map(Ue=>({generated_text:Ue.trim()}));je.push($e)}return ve?je:je[0]}}class Me extends K{constructor(J){super(J)}async _call(J,{top_k:j=5}={}){const ve=await h(J),{pixel_values:Fe}=await this.processor(ve),Oe=await this.model({pixel_values:Fe}),je=this.model.config.id2label,Ee=[];for(const Ne of Oe.logits){const $e=await(0,D.topk)(new D.Tensor("float32",(0,f.softmax)(Ne.data),Ne.dims),j),Ue=$e[0].tolist(),nt=$e[1].tolist().map((De,Mt)=>({label:je?je[De]:`LABEL_${De}`,score:Ue[Mt]}));Ee.push(nt)}return Array.isArray(J)?Ee:Ee[0]}}class be extends K{constructor(J){super(J),this.subtasks_mapping={panoptic:"post_process_panoptic_segmentation",instance:"post_process_instance_segmentation",semantic:"post_process_semantic_segmentation"}}async _call(J,{threshold:j=.5,mask_threshold:ve=.5,overlap_mask_area_threshold:Fe=.8,label_ids_to_fuse:Oe=null,target_sizes:je=null,subtask:Ee=null}={}){if(Array.isArray(J)&&J.length!==1)throw Error("Image segmentation pipeline currently only supports a batch size of 1.");const $e=await h(J),Ue=$e.map(lt=>[lt.height,lt.width]),Ke=await this.processor($e),{inputNames:nt,outputNames:De}=this.model.sessions.model;if(!nt.includes("pixel_values")){if(nt.length!==1)throw Error(`Expected a single input name, but got ${nt.length} inputs: ${nt}.`);const lt=nt[0];if(lt in Ke)throw Error(`Input name ${lt} already exists in the inputs.`);Ke[lt]=Ke.pixel_values}const Mt=await this.model(Ke);let et=null;if(Ee!==null)et=this.subtasks_mapping[Ee];else if(this.processor.image_processor){for(const[lt,ct]of Object.entries(this.subtasks_mapping))if(ct in this.processor.image_processor){et=this.processor.image_processor[ct].bind(this.processor.image_processor),Ee=lt;break}}const at=this.model.config.id2label,dt=[];if(Ee)if(Ee==="panoptic"||Ee==="instance"){const lt=et(Mt,j,ve,Fe,Oe,je??Ue)[0],ct=lt.segmentation;for(const ft of lt.segments_info){const Vt=new Uint8ClampedArray(ct.data.length);for(let At=0;At<ct.data.length;++At)ct.data[At]===ft.id&&(Vt[At]=255);const Ut=new y.RawImage(Vt,ct.dims[1],ct.dims[0],1);dt.push({score:ft.score,label:at[ft.label_id],mask:Ut})}}else if(Ee==="semantic"){const{segmentation:lt,labels:ct}=et(Mt,je??Ue)[0];for(const ft of ct){const Vt=new Uint8ClampedArray(lt.data.length);for(let At=0;At<lt.data.length;++At)lt.data[At]===ft&&(Vt[At]=255);const Ut=new y.RawImage(Vt,lt.dims[1],lt.dims[0],1);dt.push({score:null,label:at[ft],mask:Ut})}}else throw Error(`Subtask ${Ee} not supported.`);else{const ct=Mt[De[0]];for(let ft=0;ft<Ue.length;++ft){const Vt=Ue[ft],Ut=ct[ft];Ut.data.some(ws=>ws<-1e-5||ws>1+1e-5)&&Ut.sigmoid_();const At=await y.RawImage.fromTensor(Ut.mul_(255).to("uint8")).resize(Vt[1],Vt[0]);dt.push({label:null,score:null,mask:At})}}return dt}}class fe extends be{constructor(J){super(J)}async _call(J,j={}){if(Array.isArray(J)&&J.length!==1)throw Error("Background removal pipeline currently only supports a batch size of 1.");const Fe=await h(J),Oe=await super._call(J,j);return Fe.map((Ee,Ne)=>{const $e=Ee.clone();return $e.putAlpha(Oe[Ne].mask),$e})}}class Re extends K{constructor(J){super(J)}async _call(J,j,{hypothesis_template:ve="This is a photo of {}"}={}){const Fe=Array.isArray(J),Oe=await h(J),je=j.map(nt=>ve.replace("{}",nt)),Ee=this.tokenizer(je,{padding:this.model.config.model_type==="siglip"?"max_length":!0,truncation:!0}),{pixel_values:Ne}=await this.processor(Oe),$e=await this.model({...Ee,pixel_values:Ne}),Ue=this.model.config.model_type==="siglip"?nt=>nt.sigmoid().data:nt=>(0,f.softmax)(nt.data),Ke=[];for(const nt of $e.logits_per_image){const Mt=[...Ue(nt)].map((et,at)=>({score:et,label:j[at]}));Mt.sort((et,at)=>at.score-et.score),Ke.push(Mt)}return Fe?Ke:Ke[0]}}class ke extends K{constructor(J){super(J)}async _call(J,{threshold:j=.9,percentage:ve=!1}={}){const Fe=Array.isArray(J);if(Fe&&J.length!==1)throw Error("Object detection pipeline currently only supports a batch size of 1.");const Oe=await h(J),je=ve?null:Oe.map(De=>[De.height,De.width]),{pixel_values:Ee,pixel_mask:Ne}=await this.processor(Oe),$e=await this.model({pixel_values:Ee,pixel_mask:Ne}),Ue=this.processor.image_processor.post_process_object_detection($e,j,je),Ke=this.model.config.id2label,nt=Ue.map(De=>De.boxes.map((Mt,et)=>({score:De.scores[et],label:Ke[De.classes[et]],box:O(Mt,!ve)})));return Fe?nt:nt[0]}}class le extends K{constructor(J){super(J)}async _call(J,j,{threshold:ve=.1,top_k:Fe=null,percentage:Oe=!1}={}){const je=Array.isArray(J),Ee=await h(J),Ne=this.tokenizer(j,{padding:!0,truncation:!0}),$e=await this.processor(Ee),Ue=[];for(let Ke=0;Ke<Ee.length;++Ke){const nt=Ee[Ke],De=Oe?null:[[nt.height,nt.width]],Mt=$e.pixel_values[Ke].unsqueeze_(0),et=await this.model({...Ne,pixel_values:Mt});let at;if("post_process_grounded_object_detection"in this.processor){const dt=this.processor.post_process_grounded_object_detection(et,Ne.input_ids,{box_threshold:ve,text_threshold:ve,target_sizes:De})[0];at=dt.boxes.map((lt,ct)=>({score:dt.scores[ct],label:dt.labels[ct],box:O(lt,!Oe)}))}else{const dt=this.processor.image_processor.post_process_object_detection(et,ve,De,!0)[0];at=dt.boxes.map((lt,ct)=>({score:dt.scores[ct],label:j[dt.classes[ct]],box:O(lt,!Oe)}))}at.sort((dt,lt)=>lt.score-dt.score),Fe!==null&&(at=at.slice(0,Fe)),Ue.push(at)}return je?Ue:Ue[0]}}class W extends K{constructor(J){super(J)}async _call(J,j,ve={}){const Fe=(await h(J))[0],{pixel_values:Oe}=await this.processor(Fe),je=`<s_docvqa><s_question>${j}</s_question><s_answer>`,Ee=this.tokenizer(je,{add_special_tokens:!1,padding:!0,truncation:!0}).input_ids,Ne=await this.model.generate({inputs:Oe,max_length:this.model.config.decoder.max_position_embeddings,decoder_input_ids:Ee,...ve}),Ue=this.tokenizer.batch_decode(Ne)[0].match(/<s_answer>(.*?)<\/s_answer>/);let Ke=null;return Ue&&Ue.length>=2&&(Ke=Ue[1].trim()),[{answer:Ke}]}}class ne extends K{DEFAULT_VOCODER_ID="Xenova/speecht5_hifigan";constructor(J){super(J),this.vocoder=J.vocoder??null}async _call(J,{speaker_embeddings:j=null}={}){return this.processor?this._call_text_to_spectrogram(J,{speaker_embeddings:j}):this._call_text_to_waveform(J)}async _call_text_to_waveform(J){const j=this.tokenizer(J,{padding:!0,truncation:!0}),{waveform:ve}=await this.model(j),Fe=this.model.config.sampling_rate;return new I.RawAudio(ve.data,Fe)}async _call_text_to_spectrogram(J,{speaker_embeddings:j}){if(this.vocoder||(console.log("No vocoder specified, using default HifiGan vocoder."),this.vocoder=await b.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID,{dtype:"fp32"})),(typeof j=="string"||j instanceof URL)&&(j=new Float32Array(await(await fetch(j)).arrayBuffer())),j instanceof Float32Array)j=new D.Tensor("float32",j,[1,j.length]);else if(!(j instanceof D.Tensor))throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");const{input_ids:ve}=this.tokenizer(J,{padding:!0,truncation:!0}),{waveform:Fe}=await this.model.generate_speech(ve,j,{vocoder:this.vocoder}),Oe=this.processor.feature_extractor.config.sampling_rate;return new I.RawAudio(Fe.data,Oe)}}class _e extends K{constructor(J){super(J)}async _call(J){const j=await h(J),ve=await this.processor(j),Fe=await this.model(ve),Oe=[];for(const je of Fe.reconstruction){const Ee=je.squeeze().clamp_(0,1).mul_(255).round_().to("uint8");Oe.push(y.RawImage.fromTensor(Ee))}return Oe.length>1?Oe:Oe[0]}}class xe extends K{constructor(J){super(J)}async _call(J){const j=await h(J),ve=await this.processor(j),{predicted_depth:Fe}=await this.model(ve),Oe=[];for(let je=0;je<j.length;++je){const Ee=Fe[je],[Ne,$e]=Ee.dims.slice(-2),[Ue,Ke]=j[je].size,nt=(await(0,D.interpolate_4d)(Ee.view(1,1,Ne,$e),{size:[Ke,Ue],mode:"bilinear"})).view(Ke,Ue),De=nt.min().item(),Mt=nt.max().item(),et=nt.sub(De).div_(Mt-De).mul_(255).to("uint8").unsqueeze(0),at=y.RawImage.fromTensor(et);Oe.push({predicted_depth:nt,depth:at})}return Oe.length>1?Oe:Oe[0]}}const We=Object.freeze({"text-classification":{tokenizer:_.AutoTokenizer,pipeline:me,model:b.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-finetuned-sst-2-english"},type:"text"},"token-classification":{tokenizer:_.AutoTokenizer,pipeline:R,model:b.AutoModelForTokenClassification,default:{model:"Xenova/bert-base-multilingual-cased-ner-hrl"},type:"text"},"question-answering":{tokenizer:_.AutoTokenizer,pipeline:G,model:b.AutoModelForQuestionAnswering,default:{model:"Xenova/distilbert-base-cased-distilled-squad"},type:"text"},"fill-mask":{tokenizer:_.AutoTokenizer,pipeline:X,model:b.AutoModelForMaskedLM,default:{model:"Xenova/bert-base-uncased"},type:"text"},summarization:{tokenizer:_.AutoTokenizer,pipeline:$,model:b.AutoModelForSeq2SeqLM,default:{model:"Xenova/distilbart-cnn-6-6"},type:"text"},translation:{tokenizer:_.AutoTokenizer,pipeline:T,model:b.AutoModelForSeq2SeqLM,default:{model:"Xenova/t5-small"},type:"text"},"text2text-generation":{tokenizer:_.AutoTokenizer,pipeline:L,model:b.AutoModelForSeq2SeqLM,default:{model:"Xenova/flan-t5-small"},type:"text"},"text-generation":{tokenizer:_.AutoTokenizer,pipeline:E,model:b.AutoModelForCausalLM,default:{model:"Xenova/gpt2"},type:"text"},"zero-shot-classification":{tokenizer:_.AutoTokenizer,pipeline:Y,model:b.AutoModelForSequenceClassification,default:{model:"Xenova/distilbert-base-uncased-mnli"},type:"text"},"audio-classification":{pipeline:oe,model:b.AutoModelForAudioClassification,processor:F.AutoProcessor,default:{model:"Xenova/wav2vec2-base-superb-ks"},type:"audio"},"zero-shot-audio-classification":{tokenizer:_.AutoTokenizer,pipeline:Z,model:b.AutoModel,processor:F.AutoProcessor,default:{model:"Xenova/clap-htsat-unfused"},type:"multimodal"},"automatic-speech-recognition":{tokenizer:_.AutoTokenizer,pipeline:he,model:[b.AutoModelForSpeechSeq2Seq,b.AutoModelForCTC],processor:F.AutoProcessor,default:{model:"Xenova/whisper-tiny.en"},type:"multimodal"},"text-to-audio":{tokenizer:_.AutoTokenizer,pipeline:ne,model:[b.AutoModelForTextToWaveform,b.AutoModelForTextToSpectrogram],processor:[F.AutoProcessor,null],default:{model:"Xenova/speecht5_tts"},type:"text"},"image-to-text":{tokenizer:_.AutoTokenizer,pipeline:ie,model:b.AutoModelForVision2Seq,processor:F.AutoProcessor,default:{model:"Xenova/vit-gpt2-image-captioning"},type:"multimodal"},"image-classification":{pipeline:Me,model:b.AutoModelForImageClassification,processor:F.AutoProcessor,default:{model:"Xenova/vit-base-patch16-224"},type:"multimodal"},"image-segmentation":{pipeline:be,model:[b.AutoModelForImageSegmentation,b.AutoModelForSemanticSegmentation,b.AutoModelForUniversalSegmentation],processor:F.AutoProcessor,default:{model:"Xenova/detr-resnet-50-panoptic"},type:"multimodal"},"background-removal":{pipeline:fe,model:[b.AutoModelForImageSegmentation,b.AutoModelForSemanticSegmentation,b.AutoModelForUniversalSegmentation],processor:F.AutoProcessor,default:{model:"Xenova/modnet"},type:"image"},"zero-shot-image-classification":{tokenizer:_.AutoTokenizer,pipeline:Re,model:b.AutoModel,processor:F.AutoProcessor,default:{model:"Xenova/clip-vit-base-patch32"},type:"multimodal"},"object-detection":{pipeline:ke,model:b.AutoModelForObjectDetection,processor:F.AutoProcessor,default:{model:"Xenova/detr-resnet-50"},type:"multimodal"},"zero-shot-object-detection":{tokenizer:_.AutoTokenizer,pipeline:le,model:b.AutoModelForZeroShotObjectDetection,processor:F.AutoProcessor,default:{model:"Xenova/owlvit-base-patch32"},type:"multimodal"},"document-question-answering":{tokenizer:_.AutoTokenizer,pipeline:W,model:b.AutoModelForDocumentQuestionAnswering,processor:F.AutoProcessor,default:{model:"Xenova/donut-base-finetuned-docvqa"},type:"multimodal"},"image-to-image":{pipeline:_e,model:b.AutoModelForImageToImage,processor:F.AutoProcessor,default:{model:"Xenova/swin2SR-classical-sr-x2-64"},type:"image"},"depth-estimation":{pipeline:xe,model:b.AutoModelForDepthEstimation,processor:F.AutoProcessor,default:{model:"Xenova/dpt-large"},type:"image"},"feature-extraction":{tokenizer:_.AutoTokenizer,pipeline:U,model:b.AutoModel,default:{model:"Xenova/all-MiniLM-L6-v2"},type:"text"},"image-feature-extraction":{processor:F.AutoProcessor,pipeline:de,model:[b.AutoModelForImageFeatureExtraction,b.AutoModel],default:{model:"Xenova/vit-base-patch16-224-in21k"},type:"image"}}),Ge=Object.freeze({"sentiment-analysis":"text-classification",ner:"token-classification",asr:"automatic-speech-recognition","text-to-speech":"text-to-audio",embeddings:"feature-extraction"});async function He(ze,J=null,{progress_callback:j=null,config:ve=null,cache_dir:Fe=null,local_files_only:Oe=!1,revision:je="main",device:Ee=null,dtype:Ne=null,subfolder:$e="onnx",use_external_data_format:Ue=null,model_file_name:Ke=null,session_options:nt={}}={}){ze=Ge[ze]??ze;const De=We[ze.split("_",1)[0]];if(!De)throw Error(`Unsupported pipeline: ${ze}. Must be one of [${Object.keys(We)}]`);J||(J=De.default.model,console.log(`No model specified. Using default model: "${J}".`));const Mt={progress_callback:j,config:ve,cache_dir:Fe,local_files_only:Oe,revision:je,device:Ee,dtype:Ne,subfolder:$e,use_external_data_format:Ue,model_file_name:Ke,session_options:nt},et=new Map([["tokenizer",De.tokenizer],["model",De.model],["processor",De.processor]]),at=await pt(et,J,Mt);at.task=ze,(0,S.dispatchCallback)(j,{status:"ready",task:ze,model:J});const dt=De.pipeline;return new dt(at)}async function pt(ze,J,j){const ve=Object.create(null),Fe=[];for(const[Oe,je]of ze.entries()){if(!je)continue;let Ee;Array.isArray(je)?Ee=new Promise(async(Ne,$e)=>{let Ue;for(const Ke of je){if(Ke===null){Ne(null);return}try{Ne(await Ke.from_pretrained(J,j));return}catch(nt){if(nt.message?.includes("Unsupported model type"))Ue=nt;else if(nt.message?.includes("Could not locate file"))Ue=nt;else{$e(nt);return}}}$e(Ue)}):Ee=je.from_pretrained(J,j),ve[Oe]=Ee,Fe.push(Ee)}await Promise.all(Fe);for(const[Oe,je]of Object.entries(ve))ve[Oe]=await je;return ve}},"./src/tokenizers.js":(re,m,n)=>{n.r(m),n.d(m,{AlbertTokenizer:()=>ur,AutoTokenizer:()=>pn,BartTokenizer:()=>Nt,BertTokenizer:()=>vr,BlenderbotSmallTokenizer:()=>Xt,BlenderbotTokenizer:()=>gt,BloomTokenizer:()=>Ls,CLIPTokenizer:()=>Tr,CamembertTokenizer:()=>Ce,CodeGenTokenizer:()=>mr,CodeLlamaTokenizer:()=>zs,CohereTokenizer:()=>ar,ConvBertTokenizer:()=>ee,DebertaTokenizer:()=>g,DebertaV2Tokenizer:()=>te,DistilBertTokenizer:()=>Te,ElectraTokenizer:()=>mt,Ernie4_5_Tokenizer:()=>Pr,EsmTokenizer:()=>Os,FalconTokenizer:()=>Ds,GPT2Tokenizer:()=>_t,GPTNeoXTokenizer:()=>ks,GemmaTokenizer:()=>Rs,Grok1Tokenizer:()=>Vs,HerbertTokenizer:()=>N,LlamaTokenizer:()=>rs,M2M100Tokenizer:()=>xt,MBart50Tokenizer:()=>Qt,MBartTokenizer:()=>ts,MPNetTokenizer:()=>xr,MarianTokenizer:()=>qe,MgpstrTokenizer:()=>Se,MobileBertTokenizer:()=>Dt,NllbTokenizer:()=>hr,NougatTokenizer:()=>Cs,PreTrainedTokenizer:()=>Tt,Qwen2Tokenizer:()=>Bs,RoFormerTokenizer:()=>ue,RobertaTokenizer:()=>Fs,SiglipTokenizer:()=>Is,SpeechT5Tokenizer:()=>Ot,SqueezeBertTokenizer:()=>or,T5Tokenizer:()=>Ze,TokenizerModel:()=>de,VitsTokenizer:()=>Us,Wav2Vec2CTCTokenizer:()=>Qe,WhisperTokenizer:()=>js,XLMRobertaTokenizer:()=>pr,XLMTokenizer:()=>ut,is_chinese_char:()=>X});var _=n("./src/utils/generic.js"),b=n("./src/utils/core.js"),F=n("./src/utils/hub.js"),q=n("./src/utils/maths.js"),S=n("./src/utils/tensor.js"),f=n("./src/utils/data-structures.js"),I=n("./node_modules/@huggingface/jinja/dist/index.js"),D=n("./src/models/whisper/common_whisper.js");async function y(we,M){const B=await Promise.all([(0,F.getModelJSON)(we,"tokenizer.json",!0,M),(0,F.getModelJSON)(we,"tokenizer_config.json",!0,M)]);return M.legacy!==null&&(B[1].legacy=M.legacy),B}function h(we,M){const B=[];let ae=0;for(const pe of we.matchAll(M)){const Pe=pe[0];ae<pe.index&&B.push(we.slice(ae,pe.index)),Pe.length>0&&B.push(Pe),ae=pe.index+Pe.length}return ae<we.length&&B.push(we.slice(ae)),B}function V(we,M=!0){if(we.Regex!==void 0){let B=we.Regex.replace(/\\([#&~])/g,"$1");for(const[ae,pe]of Y)B=B.replaceAll(ae,pe);return new RegExp(B,"gu")}else if(we.String!==void 0){const B=(0,b.escapeRegExp)(we.String);return new RegExp(M?B:`(${B})`,"gu")}else return console.warn("Unknown pattern type:",we),null}function O(we){return new Map(Object.entries(we))}function K(we){const M=we.dims;switch(M.length){case 1:return we.tolist();case 2:if(M[0]!==1)throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");return we.tolist()[0];default:throw new Error(`Expected tensor to have 1-2 dimensions, got ${M.length}.`)}}function me(we){return we.replace(/ \./g,".").replace(/ \?/g,"?").replace(/ \!/g,"!").replace(/ ,/g,",").replace(/ \' /g,"'").replace(/ n\'t/g,"n't").replace(/ \'m/g,"'m").replace(/ \'s/g,"'s").replace(/ \'ve/g,"'ve").replace(/ \'re/g,"'re")}function R(we){return we.replace(/\p{M}/gu,"")}function G(we){return R(we.toLowerCase())}function X(we){return we>=19968&&we<=40959||we>=13312&&we<=19903||we>=131072&&we<=173791||we>=173824&&we<=177983||we>=177984&&we<=178207||we>=178208&&we<=183983||we>=63744&&we<=64255||we>=194560&&we<=195103}function L(we,M,B){const ae=[];let pe=0;for(;pe<we.length;){if(ae.push(we[pe]),(M.get(we[pe])??B)!==B){++pe;continue}for(;++pe<we.length&&(M.get(we[pe])??B)===B;)M.get(ae.at(-1))!==B&&(ae[ae.length-1]+=we[pe])}return ae}function $(we){return we.match(/\S+/g)||[]}const T="\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E",x=new RegExp(`^[${T}]+$`,"gu"),E=".,!?…。，、।۔،",Y=new Map([["(?i:'s|'t|'re|'ve|'m|'ll|'d)","(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"],[` ?[^(\\s|[${E}])]+`,` ?[^\\s${E}]+`]]);class U{constructor(M){this.content=M.content,this.id=M.id,this.single_word=M.single_word??!1,this.lstrip=M.lstrip??!1,this.rstrip=M.rstrip??!1,this.special=M.special??!1,this.normalized=M.normalized??null}}class de extends _.Callable{constructor(M){super(),this.config=M,this.vocab=[],this.tokens_to_ids=new Map,this.unk_token_id=void 0,this.unk_token=void 0,this.end_of_word_suffix=void 0,this.fuse_unk=this.config.fuse_unk??!1}static fromConfig(M,...B){switch(M.type){case"WordPiece":return new oe(M);case"Unigram":return new Z(M,...B);case"BPE":return new Me(M);default:if(M.vocab)return Array.isArray(M.vocab)?new Z(M,...B):Object.hasOwn(M,"continuing_subword_prefix")&&Object.hasOwn(M,"unk_token")?Object.hasOwn(M,"merges")?new Me(M):new oe(M):new be(M,...B);throw new Error(`Unknown TokenizerModel type: ${M.type}`)}}_call(M){return M=this.encode(M),this.fuse_unk&&(M=L(M,this.tokens_to_ids,this.unk_token_id)),M}encode(M){throw Error("encode should be implemented in subclass.")}convert_tokens_to_ids(M){return M.map(B=>this.tokens_to_ids.get(B)??this.unk_token_id)}convert_ids_to_tokens(M){return M.map(B=>this.vocab[B]??this.unk_token)}}class oe extends de{constructor(M){super(M),this.tokens_to_ids=O(M.vocab),this.unk_token_id=this.tokens_to_ids.get(M.unk_token),this.unk_token=M.unk_token,this.max_input_chars_per_word=M.max_input_chars_per_word??100,this.vocab=new Array(this.tokens_to_ids.size);for(const[B,ae]of this.tokens_to_ids)this.vocab[ae]=B}encode(M){const B=[];for(const ae of M){const pe=[...ae];if(pe.length>this.max_input_chars_per_word){B.push(this.unk_token);continue}let Pe=!1,Be=0;const st=[];for(;Be<pe.length;){let tt=pe.length,ot=null;for(;Be<tt;){let Ye=pe.slice(Be,tt).join("");if(Be>0&&(Ye=this.config.continuing_subword_prefix+Ye),this.tokens_to_ids.has(Ye)){ot=Ye;break}--tt}if(ot===null){Pe=!0;break}st.push(ot),Be=tt}Pe?B.push(this.unk_token):B.push(...st)}return B}}class Z extends de{constructor(M,B){super(M);const ae=M.vocab.length;this.vocab=new Array(ae),this.scores=new Array(ae);for(let pe=0;pe<ae;++pe)[this.vocab[pe],this.scores[pe]]=M.vocab[pe];this.unk_token_id=M.unk_id,this.unk_token=this.vocab[M.unk_id],this.tokens_to_ids=new Map(this.vocab.map((pe,Pe)=>[pe,Pe])),this.bos_token=" ",this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=B.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.unk_token=this.vocab[this.unk_token_id],this.minScore=(0,q.min)(this.scores)[0],this.unk_score=this.minScore-10,this.scores[this.unk_token_id]=this.unk_score,this.trie=new f.CharTrie,this.trie.extend(this.vocab),this.fuse_unk=!0}populateNodes(M){const B=M.chars,ae=1;let pe=0;for(;pe<B.length;){let Pe=!1;const Be=B.slice(pe).join(""),st=this.trie.commonPrefixSearch(Be);for(const tt of st){const ot=this.tokens_to_ids.get(tt),Ye=this.scores[ot],zt=(0,b.len)(tt);M.insert(pe,zt,Ye,ot),!Pe&&zt===ae&&(Pe=!0)}Pe||M.insert(pe,ae,this.unk_score,this.unk_token_id),pe+=ae}}tokenize(M){const B=new f.TokenLattice(M,this.bos_token_id,this.eos_token_id);return this.populateNodes(B),B.tokens()}encode(M){const B=[];for(const ae of M){const pe=this.tokenize(ae);B.push(...pe)}return B}}const he=(()=>{const we=[...Array.from({length:"~".charCodeAt(0)-"!".charCodeAt(0)+1},(pe,Pe)=>Pe+"!".charCodeAt(0)),...Array.from({length:"¬".charCodeAt(0)-"¡".charCodeAt(0)+1},(pe,Pe)=>Pe+"¡".charCodeAt(0)),...Array.from({length:"ÿ".charCodeAt(0)-"®".charCodeAt(0)+1},(pe,Pe)=>Pe+"®".charCodeAt(0))],M=we.slice();let B=0;for(let pe=0;pe<256;++pe)we.includes(pe)||(we.push(pe),M.push(256+B),B+=1);const ae=M.map(pe=>String.fromCharCode(pe));return Object.fromEntries(we.map((pe,Pe)=>[pe,ae[Pe]]))})(),ie=(0,b.reverseDictionary)(he);class Me extends de{constructor(M){super(M),this.tokens_to_ids=O(M.vocab),this.unk_token_id=this.tokens_to_ids.get(M.unk_token),this.unk_token=M.unk_token,this.vocab=new Array(this.tokens_to_ids.size);for(const[ae,pe]of this.tokens_to_ids)this.vocab[pe]=ae;const B=Array.isArray(M.merges[0]);this.merges=B?M.merges:M.merges.map(ae=>ae.split(" ",2)),this.bpe_ranks=new Map(this.merges.map((ae,pe)=>[JSON.stringify(ae),pe])),this.end_of_word_suffix=M.end_of_word_suffix,this.continuing_subword_suffix=M.continuing_subword_suffix??null,this.byte_fallback=this.config.byte_fallback??!1,this.byte_fallback&&(this.text_encoder=new TextEncoder),this.ignore_merges=this.config.ignore_merges??!1,this.max_length_to_cache=256,this.cache_capacity=1e4,this.cache=new f.LRUCache(this.cache_capacity)}clear_cache(){this.cache.clear()}bpe(M){if(M.length===0)return[];const B=this.cache.get(M);if(B!==void 0)return B;const ae=Array.from(M);this.end_of_word_suffix&&(ae[ae.length-1]+=this.end_of_word_suffix);let pe=[];if(ae.length>1){const Pe=new f.PriorityQueue((tt,ot)=>tt.score<ot.score);let Be={token:ae[0],bias:0,prev:null,next:null},st=Be;for(let tt=1;tt<ae.length;++tt){const ot={bias:tt/ae.length,token:ae[tt],prev:st,next:null};st.next=ot,this._add_node(Pe,st),st=ot}for(;!Pe.isEmpty();){const tt=Pe.pop();if(tt.deleted||!tt.next||tt.next.deleted)continue;if(tt.deleted=!0,tt.next.deleted=!0,tt.prev){const Ye={...tt.prev};tt.prev.deleted=!0,tt.prev=Ye,Ye.prev?Ye.prev.next=Ye:Be=Ye}const ot={token:tt.token+tt.next.token,bias:tt.bias,prev:tt.prev,next:tt.next.next};ot.prev?(ot.prev.next=ot,this._add_node(Pe,ot.prev)):Be=ot,ot.next&&(ot.next.prev=ot,this._add_node(Pe,ot))}for(let tt=Be;tt!==null;tt=tt.next)pe.push(tt.token)}else pe=ae;if(this.continuing_subword_suffix)for(let Pe=0;Pe<pe.length-1;++Pe)pe[Pe]+=this.continuing_subword_suffix;return M.length<this.max_length_to_cache&&this.cache.put(M,pe),pe}_add_node(M,B){const ae=this.bpe_ranks.get(JSON.stringify([B.token,B.next.token]));ae!==void 0&&(B.score=ae+B.bias,M.push(B))}encode(M){const B=[];for(const ae of M){if(this.ignore_merges&&this.tokens_to_ids.has(ae)){B.push(ae);continue}const pe=this.bpe(ae);for(const Pe of pe)if(this.tokens_to_ids.has(Pe))B.push(Pe);else if(this.byte_fallback){const Be=Array.from(this.text_encoder.encode(Pe)).map(st=>`<0x${st.toString(16).toUpperCase().padStart(2,"0")}>`);Be.every(st=>this.tokens_to_ids.has(st))?B.push(...Be):B.push(this.unk_token)}else B.push(this.unk_token)}return B}}class be extends de{constructor(M,B){super(M),this.tokens_to_ids=O(B.target_lang?M.vocab[B.target_lang]:M.vocab),this.bos_token=B.bos_token,this.bos_token_id=this.tokens_to_ids.get(this.bos_token),this.eos_token=B.eos_token,this.eos_token_id=this.tokens_to_ids.get(this.eos_token),this.pad_token=B.pad_token,this.pad_token_id=this.tokens_to_ids.get(this.pad_token),this.unk_token=B.unk_token,this.unk_token_id=this.tokens_to_ids.get(this.unk_token),this.vocab=new Array(this.tokens_to_ids.size);for(const[ae,pe]of this.tokens_to_ids)this.vocab[pe]=ae}encode(M){return M}}class fe extends _.Callable{constructor(M){super(),this.config=M}static fromConfig(M){if(M===null)return null;switch(M.type){case"BertNormalizer":return new ze(M);case"Precompiled":return new Ss(M);case"Sequence":return new pt(M);case"Replace":return new Re(M);case"NFC":return new le(M);case"NFD":return new W(M);case"NFKC":return new ne(M);case"NFKD":return new _e(M);case"Strip":return new xe(M);case"StripAccents":return new We(M);case"Lowercase":return new Ge(M);case"Prepend":return new He(M);default:throw new Error(`Unknown Normalizer type: ${M.type}`)}}normalize(M){throw Error("normalize should be implemented in subclass.")}_call(M){return this.normalize(M)}}class Re extends fe{normalize(M){const B=V(this.config.pattern);return B===null?M:M.replaceAll(B,this.config.content)}}class ke extends fe{form=void 0;normalize(M){return M=M.normalize(this.form),M}}class le extends ke{form="NFC"}class W extends ke{form="NFD"}class ne extends ke{form="NFKC"}class _e extends ke{form="NFKD"}class xe extends fe{normalize(M){return this.config.strip_left&&this.config.strip_right?M=M.trim():(this.config.strip_left&&(M=M.trimStart()),this.config.strip_right&&(M=M.trimEnd())),M}}class We extends fe{normalize(M){return M=R(M),M}}class Ge extends fe{normalize(M){return M=M.toLowerCase(),M}}class He extends fe{normalize(M){return M=this.config.prepend+M,M}}class pt extends fe{constructor(M){super(M),this.normalizers=M.normalizers.map(B=>fe.fromConfig(B))}normalize(M){return this.normalizers.reduce((B,ae)=>ae.normalize(B),M)}}class ze extends fe{_tokenize_chinese_chars(M){const B=[];for(let ae=0;ae<M.length;++ae){const pe=M[ae],Pe=pe.charCodeAt(0);X(Pe)?(B.push(" "),B.push(pe),B.push(" ")):B.push(pe)}return B.join("")}stripAccents(M){return M.normalize("NFD").replace(/\p{Mn}/gu,"")}_is_control(M){switch(M){case"	":case`
`:case"\r":return!1;default:return/^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(M)}}_clean_text(M){const B=[];for(const ae of M){const pe=ae.charCodeAt(0);pe===0||pe===65533||this._is_control(ae)||(/^\s$/.test(ae)?B.push(" "):B.push(ae))}return B.join("")}normalize(M){return this.config.clean_text&&(M=this._clean_text(M)),this.config.handle_chinese_chars&&(M=this._tokenize_chinese_chars(M)),this.config.lowercase?(M=M.toLowerCase(),this.config.strip_accents!==!1&&(M=this.stripAccents(M))):this.config.strip_accents&&(M=this.stripAccents(M)),M}}class J extends _.Callable{static fromConfig(M){if(M===null)return null;switch(M.type){case"BertPreTokenizer":return new j(M);case"Sequence":return new Es(M);case"Whitespace":return new es(M);case"WhitespaceSplit":return new xs(M);case"Metaspace":return new ws(M);case"ByteLevel":return new ve(M);case"Split":return new Fe(M);case"Punctuation":return new Oe(M);case"Digits":return new je(M);case"Replace":return new yr(M);default:throw new Error(`Unknown PreTokenizer type: ${M.type}`)}}pre_tokenize_text(M,B){throw Error("pre_tokenize_text should be implemented in subclass.")}pre_tokenize(M,B){return(Array.isArray(M)?M.map(ae=>this.pre_tokenize_text(ae,B)):this.pre_tokenize_text(M,B)).flat()}_call(M,B){return this.pre_tokenize(M,B)}}class j extends J{constructor(M){super(),this.pattern=new RegExp(`[^\\s${T}]+|[${T}]`,"gu")}pre_tokenize_text(M,B){return M.trim().match(this.pattern)||[]}}class ve extends J{constructor(M){super(),this.config=M,this.add_prefix_space=this.config.add_prefix_space,this.trim_offsets=this.config.trim_offsets,this.use_regex=this.config.use_regex??!0,this.pattern=/'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu,this.byte_encoder=he,this.text_encoder=new TextEncoder}pre_tokenize_text(M,B){return this.add_prefix_space&&!M.startsWith(" ")&&(M=" "+M),(this.use_regex?M.match(this.pattern)||[]:[M]).map(pe=>Array.from(this.text_encoder.encode(pe),Pe=>this.byte_encoder[Pe]).join(""))}}class Fe extends J{constructor(M){super(),this.config=M,this.pattern=V(this.config.pattern,this.config.invert)}pre_tokenize_text(M,B){return this.pattern===null?[]:this.config.invert?M.match(this.pattern)||[]:this.config.behavior?.toLowerCase()==="removed"?M.split(this.pattern).filter(ae=>ae):h(M,this.pattern)}}class Oe extends J{constructor(M){super(),this.config=M,this.pattern=new RegExp(`[^${T}]+|[${T}]+`,"gu")}pre_tokenize_text(M,B){return M.match(this.pattern)||[]}}class je extends J{constructor(M){super(),this.config=M;const B=`[^\\d]+|\\d${this.config.individual_digits?"":"+"}`;this.pattern=new RegExp(B,"gu")}pre_tokenize_text(M,B){return M.match(this.pattern)||[]}}class Ee extends _.Callable{constructor(M){super(),this.config=M}static fromConfig(M){if(M===null)return null;switch(M.type){case"TemplateProcessing":return new Ue(M);case"ByteLevel":return new Ke(M);case"RobertaProcessing":return new $e(M);case"BertProcessing":return new Ne(M);case"Sequence":return new nt(M);default:throw new Error(`Unknown PostProcessor type: ${M.type}`)}}post_process(M,...B){throw Error("post_process should be implemented in subclass.")}_call(M,...B){return this.post_process(M,...B)}}class Ne extends Ee{constructor(M){super(M),this.cls=M.cls[0],this.sep=M.sep[0]}post_process(M,B=null,{add_special_tokens:ae=!0}={}){ae&&(M=(0,b.mergeArrays)([this.cls],M,[this.sep]));let pe=new Array(M.length).fill(0);if(B!==null){const Pe=ae&&this instanceof $e?[this.sep]:[],Be=ae?[this.sep]:[];M=(0,b.mergeArrays)(M,Pe,B,Be),pe=(0,b.mergeArrays)(pe,new Array(B.length+Pe.length+Be.length).fill(1))}return{tokens:M,token_type_ids:pe}}}class $e extends Ne{}class Ue extends Ee{constructor(M){super(M),this.single=M.single,this.pair=M.pair}post_process(M,B=null,{add_special_tokens:ae=!0}={}){const pe=B===null?this.single:this.pair;let Pe=[],Be=[];for(const st of pe)"SpecialToken"in st?ae&&(Pe.push(st.SpecialToken.id),Be.push(st.SpecialToken.type_id)):"Sequence"in st&&(st.Sequence.id==="A"?(Pe=(0,b.mergeArrays)(Pe,M),Be=(0,b.mergeArrays)(Be,new Array(M.length).fill(st.Sequence.type_id))):st.Sequence.id==="B"&&(Pe=(0,b.mergeArrays)(Pe,B),Be=(0,b.mergeArrays)(Be,new Array(B.length).fill(st.Sequence.type_id))));return{tokens:Pe,token_type_ids:Be}}}class Ke extends Ee{post_process(M,B=null){return B&&(M=(0,b.mergeArrays)(M,B)),{tokens:M}}}class nt extends Ee{constructor(M){super(M),this.processors=M.processors.map(B=>Ee.fromConfig(B))}post_process(M,B=null,ae={}){let pe;for(const Pe of this.processors)if(Pe instanceof Ke)M=Pe.post_process(M).tokens,B&&(B=Pe.post_process(B).tokens);else{const Be=Pe.post_process(M,B,ae);M=Be.tokens,pe=Be.token_type_ids}return{tokens:M,token_type_ids:pe}}}class De extends _.Callable{constructor(M){super(),this.config=M,this.added_tokens=[],this.end_of_word_suffix=null,this.trim_offsets=M.trim_offsets}static fromConfig(M){if(M===null)return null;switch(M.type){case"WordPiece":return new lt(M);case"Metaspace":return new Zt(M);case"ByteLevel":return new ct(M);case"Replace":return new Mt(M);case"ByteFallback":return new et(M);case"Fuse":return new at(M);case"Strip":return new dt(M);case"Sequence":return new Vt(M);case"CTC":return new ft(M);case"BPEDecoder":return new Ut(M);default:throw new Error(`Unknown Decoder type: ${M.type}`)}}_call(M){return this.decode(M)}decode(M){return this.decode_chain(M).join("")}decode_chain(M){throw Error("`decode_chain` should be implemented in subclass.")}}class Mt extends De{decode_chain(M){const B=V(this.config.pattern);return B===null?M:M.map(ae=>ae.replaceAll(B,this.config.content))}}class et extends De{constructor(M){super(M),this.text_decoder=new TextDecoder}decode_chain(M){const B=[];let ae=[];for(const pe of M){let Pe=null;if(pe.length===6&&pe.startsWith("<0x")&&pe.endsWith(">")){const Be=parseInt(pe.slice(3,5),16);isNaN(Be)||(Pe=Be)}if(Pe!==null)ae.push(Pe);else{if(ae.length>0){const Be=this.text_decoder.decode(Uint8Array.from(ae));B.push(Be),ae=[]}B.push(pe)}}if(ae.length>0){const pe=this.text_decoder.decode(Uint8Array.from(ae));B.push(pe),ae=[]}return B}}class at extends De{decode_chain(M){return[M.join("")]}}class dt extends De{constructor(M){super(M),this.content=this.config.content,this.start=this.config.start,this.stop=this.config.stop}decode_chain(M){return M.map(B=>{let ae=0;for(let Pe=0;Pe<this.start&&B[Pe]===this.content;++Pe){ae=Pe+1;continue}let pe=B.length;for(let Pe=0;Pe<this.stop;++Pe){const Be=B.length-Pe-1;if(B[Be]===this.content){pe=Be;continue}else break}return B.slice(ae,pe)})}}class lt extends De{constructor(M){super(M),this.cleanup=M.cleanup}decode_chain(M){return M.map((B,ae)=>(ae!==0&&(B.startsWith(this.config.prefix)?B=B.replace(this.config.prefix,""):B=" "+B),this.cleanup&&(B=me(B)),B))}}class ct extends De{constructor(M){super(M),this.byte_decoder=ie,this.text_decoder=new TextDecoder("utf-8",{fatal:!1,ignoreBOM:!0}),this.end_of_word_suffix=null}convert_tokens_to_string(M){const B=M.join(""),ae=new Uint8Array([...B].map(Pe=>this.byte_decoder[Pe]));return this.text_decoder.decode(ae)}decode_chain(M){const B=[];let ae=[];for(const pe of M)this.added_tokens.find(Pe=>Pe.content===pe)!==void 0?(ae.length>0&&(B.push(this.convert_tokens_to_string(ae)),ae=[]),B.push(pe)):ae.push(pe);return ae.length>0&&B.push(this.convert_tokens_to_string(ae)),B}}class ft extends De{constructor(M){super(M),this.pad_token=this.config.pad_token,this.word_delimiter_token=this.config.word_delimiter_token,this.cleanup=this.config.cleanup}convert_tokens_to_string(M){if(M.length===0)return"";const B=[M[0]];for(let Pe=1;Pe<M.length;++Pe)M[Pe]!==B.at(-1)&&B.push(M[Pe]);let pe=B.filter(Pe=>Pe!==this.pad_token).join("");return this.cleanup&&(pe=me(pe).replaceAll(this.word_delimiter_token," ").trim()),pe}decode_chain(M){return[this.convert_tokens_to_string(M)]}}class Vt extends De{constructor(M){super(M),this.decoders=M.decoders.map(B=>De.fromConfig(B))}decode_chain(M){return this.decoders.reduce((B,ae)=>ae.decode_chain(B),M)}}class Ut extends De{constructor(M){super(M),this.suffix=this.config.suffix}decode_chain(M){return M.map((B,ae)=>B.replaceAll(this.suffix,ae===M.length-1?"":" "))}}class At extends De{decode_chain(M){let B="";for(let ae=1;ae<M.length;ae+=2)B+=M[ae];return[B]}}class ws extends J{constructor(M){super(),this.addPrefixSpace=M.add_prefix_space,this.replacement=M.replacement,this.strRep=M.str_rep||this.replacement,this.prepend_scheme=M.prepend_scheme??"always"}pre_tokenize_text(M,{section_index:B=void 0}={}){let ae=M.replaceAll(" ",this.strRep);return this.addPrefixSpace&&!ae.startsWith(this.replacement)&&(this.prepend_scheme==="always"||this.prepend_scheme==="first"&&B===0)&&(ae=this.strRep+ae),[ae]}}class Zt extends De{constructor(M){super(M),this.addPrefixSpace=M.add_prefix_space,this.replacement=M.replacement}decode_chain(M){const B=[];for(let ae=0;ae<M.length;++ae){let pe=M[ae].replaceAll(this.replacement," ");this.addPrefixSpace&&ae==0&&pe.startsWith(" ")&&(pe=pe.substring(1)),B.push(pe)}return B}}class Ss extends fe{constructor(M){super(M),this.charsmap=M.precompiled_charsmap}normalize(M){return M=M.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm,""),M=M.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm," "),M.includes("～")?M=M.split("～").map(ae=>ae.normalize("NFKC")).join("～"):M=M.normalize("NFKC"),M}}class Es extends J{constructor(M){super(),this.tokenizers=M.pretokenizers.map(B=>J.fromConfig(B))}pre_tokenize_text(M,B){return this.tokenizers.reduce((ae,pe)=>pe.pre_tokenize(ae,B),[M])}}class es extends J{constructor(M){super()}pre_tokenize_text(M,B){return M.match(/\w+|[^\w\s]+/g)||[]}}class xs extends J{constructor(M){super()}pre_tokenize_text(M,B){return $(M)}}class yr extends J{constructor(M){super(),this.config=M,this.pattern=V(this.config.pattern),this.content=this.config.content}pre_tokenize_text(M,B){return this.pattern===null?[M]:[M.replaceAll(this.pattern,this.config.content)]}}const Lr=["bos_token","eos_token","unk_token","sep_token","pad_token","cls_token","mask_token"];function br(we,M,B,ae){for(const pe of Object.keys(we)){const Pe=M-we[pe].length,Be=B(pe),st=new Array(Pe).fill(Be);we[pe]=ae==="right"?(0,b.mergeArrays)(we[pe],st):(0,b.mergeArrays)(st,we[pe])}}function Xs(we,M){for(const B of Object.keys(we))we[B].length=M}class Tt extends _.Callable{return_token_type_ids=!1;padding_side="right";constructor(M,B){super(),this.config=B,this.normalizer=fe.fromConfig(M.normalizer),this.pre_tokenizer=J.fromConfig(M.pre_tokenizer),this.model=de.fromConfig(M.model,B),this.post_processor=Ee.fromConfig(M.post_processor),this.decoder=De.fromConfig(M.decoder),this.special_tokens=[],this.all_special_ids=[],this.added_tokens=[];for(const ae of M.added_tokens){const pe=new U(ae);this.added_tokens.push(pe),this.model.tokens_to_ids.set(pe.content,pe.id),this.model.vocab[pe.id]=pe.content,pe.special&&(this.special_tokens.push(pe.content),this.all_special_ids.push(pe.id))}if(this.additional_special_tokens=B.additional_special_tokens??[],this.special_tokens.push(...this.additional_special_tokens),this.special_tokens=[...new Set(this.special_tokens)],this.decoder&&(this.decoder.added_tokens=this.added_tokens,this.decoder.end_of_word_suffix=this.model.end_of_word_suffix),this.added_tokens_splitter=new f.DictionarySplitter(this.added_tokens.map(ae=>ae.content)),this.added_tokens_map=new Map(this.added_tokens.map(ae=>[ae.content,ae])),this.mask_token=this.getToken("mask_token"),this.mask_token_id=this.model.tokens_to_ids.get(this.mask_token),this.pad_token=this.getToken("pad_token","eos_token"),this.pad_token_id=this.model.tokens_to_ids.get(this.pad_token),this.sep_token=this.getToken("sep_token"),this.sep_token_id=this.model.tokens_to_ids.get(this.sep_token),this.unk_token=this.getToken("unk_token"),this.unk_token_id=this.model.tokens_to_ids.get(this.unk_token),this.bos_token=this.getToken("bos_token"),this.bos_token_id=this.model.tokens_to_ids.get(this.bos_token),this.eos_token=this.getToken("eos_token"),this.eos_token_id=this.model.tokens_to_ids.get(this.eos_token),this.model_max_length=B.model_max_length,this.remove_space=B.remove_space,this.clean_up_tokenization_spaces=B.clean_up_tokenization_spaces??!0,this.do_lowercase_and_remove_accent=B.do_lowercase_and_remove_accent??!1,B.padding_side&&(this.padding_side=B.padding_side),this.add_bos_token=B.add_bos_token,this.add_eos_token=B.add_eos_token,this.legacy=!1,this.chat_template=B.chat_template??null,Array.isArray(this.chat_template)){const ae=Object.create(null);for(const{name:pe,template:Pe}of this.chat_template){if(typeof pe!="string"||typeof Pe!="string")throw new Error('Chat template must be a list of objects with "name" and "template" properties');ae[pe]=Pe}this.chat_template=ae}this._compiled_template_cache=new Map}getToken(...M){for(const B of M){const ae=this.config[B];if(ae)if(typeof ae=="object"){if(ae.__type==="AddedToken")return ae.content;throw Error(`Unknown token: ${ae}`)}else return ae}return null}static async from_pretrained(M,{progress_callback:B=null,config:ae=null,cache_dir:pe=null,local_files_only:Pe=!1,revision:Be="main",legacy:st=null}={}){const tt=await y(M,{progress_callback:B,config:ae,cache_dir:pe,local_files_only:Pe,revision:Be,legacy:st});return new this(...tt)}_call(M,{text_pair:B=null,add_special_tokens:ae=!0,padding:pe=!1,truncation:Pe=null,max_length:Be=null,return_tensor:st=!0,return_token_type_ids:tt=null}={}){const ot=Array.isArray(M);let Ye;if(ot){if(M.length===0)throw Error("text array must be non-empty");if(B!==null){if(Array.isArray(B)){if(M.length!==B.length)throw Error("text and text_pair must have the same length")}else throw Error("text_pair must also be an array");Ye=M.map((Ft,Yt)=>this._encode_plus(Ft,{text_pair:B[Yt],add_special_tokens:ae,return_token_type_ids:tt}))}else Ye=M.map(Ft=>this._encode_plus(Ft,{add_special_tokens:ae,return_token_type_ids:tt}))}else{if(M==null)throw Error("text may not be null or undefined");if(Array.isArray(B))throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");Ye=[this._encode_plus(M,{text_pair:B,add_special_tokens:ae,return_token_type_ids:tt})]}if(Be===null?Be=this.model_max_length:Pe===null&&(pe===!0?(console.warn("`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."),Be=this.model_max_length):pe===!1&&(console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length."),Pe=!0)),pe===!0&&(Be=Math.min((0,q.max)(Ye.map(Ft=>Ft.input_ids.length))[0],Be??1/0)),Be=Math.min(Be,this.model_max_length??1/0),pe||Pe)for(let Ft=0;Ft<Ye.length;++Ft)Ye[Ft].input_ids.length!==Be&&(Ye[Ft].input_ids.length>Be?Pe&&Xs(Ye[Ft],Be):pe&&br(Ye[Ft],Be,Yt=>Yt==="input_ids"?this.pad_token_id:0,this.padding_side));const zt={};if(st){if(!(pe&&Pe)&&Ye.some(Yt=>{for(const cs of Object.keys(Yt))if(Yt[cs].length!==Ye[0][cs]?.length)return!0;return!1}))throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");const Ft=[Ye.length,Ye[0].input_ids.length];for(const Yt of Object.keys(Ye[0]))zt[Yt]=new S.Tensor("int64",BigInt64Array.from(Ye.flatMap(cs=>cs[Yt]).map(BigInt)),Ft)}else{for(const Ft of Object.keys(Ye[0]))zt[Ft]=Ye.map(Yt=>Yt[Ft]);if(!ot)for(const Ft of Object.keys(zt))zt[Ft]=zt[Ft][0]}return zt}_encode_text(M){if(M===null)return null;const B=this.added_tokens_splitter.split(M);for(let pe=0;pe<B.length;++pe){const Pe=this.added_tokens_map.get(B[pe]);Pe&&(Pe.lstrip&&pe>0&&(B[pe-1]=B[pe-1].trimEnd()),Pe.rstrip&&pe<B.length-1&&(B[pe+1]=B[pe+1].trimStart()))}return B.flatMap((pe,Pe)=>{if(pe.length===0)return[];if(this.added_tokens_map.has(pe))return[pe];if(this.remove_space===!0&&(pe=pe.trim().split(/\s+/).join(" ")),this.do_lowercase_and_remove_accent&&(pe=G(pe)),this.normalizer!==null&&(pe=this.normalizer(pe)),pe.length===0)return[];const Be=this.pre_tokenizer!==null?this.pre_tokenizer(pe,{section_index:Pe}):[pe];return this.model(Be)})}_encode_plus(M,{text_pair:B=null,add_special_tokens:ae=!0,return_token_type_ids:pe=null}={}){const{tokens:Pe,token_type_ids:Be}=this._tokenize_helper(M,{pair:B,add_special_tokens:ae}),st=this.model.convert_tokens_to_ids(Pe),tt={input_ids:st,attention_mask:new Array(st.length).fill(1)};return(pe??this.return_token_type_ids)&&Be&&(tt.token_type_ids=Be),tt}_tokenize_helper(M,{pair:B=null,add_special_tokens:ae=!1}={}){const pe=this._encode_text(M),Pe=this._encode_text(B);return this.post_processor?this.post_processor(pe,Pe,{add_special_tokens:ae}):{tokens:(0,b.mergeArrays)(pe??[],Pe??[])}}tokenize(M,{pair:B=null,add_special_tokens:ae=!1}={}){return this._tokenize_helper(M,{pair:B,add_special_tokens:ae}).tokens}encode(M,{text_pair:B=null,add_special_tokens:ae=!0,return_token_type_ids:pe=null}={}){return this._encode_plus(M,{text_pair:B,add_special_tokens:ae,return_token_type_ids:pe}).input_ids}batch_decode(M,B={}){return M instanceof S.Tensor&&(M=M.tolist()),M.map(ae=>this.decode(ae,B))}decode(M,B={}){if(M instanceof S.Tensor&&(M=K(M)),!Array.isArray(M)||M.length===0||!(0,b.isIntegralNumber)(M[0]))throw Error("token_ids must be a non-empty array of integers.");return this.decode_single(M,B)}decode_single(M,{skip_special_tokens:B=!1,clean_up_tokenization_spaces:ae=null}){let pe=this.model.convert_ids_to_tokens(M);B&&(pe=pe.filter(Be=>!this.special_tokens.includes(Be)));let Pe=this.decoder?this.decoder(pe):pe.join(" ");return this.decoder&&this.decoder.end_of_word_suffix&&(Pe=Pe.replaceAll(this.decoder.end_of_word_suffix," "),B&&(Pe=Pe.trim())),(ae??this.clean_up_tokenization_spaces)&&(Pe=me(Pe)),Pe}get_chat_template({chat_template:M=null,tools:B=null}={}){if(this.chat_template&&typeof this.chat_template=="object"){const ae=this.chat_template;if(M!==null&&Object.hasOwn(ae,M))M=ae[M];else if(M===null)if(B!==null&&"tool_use"in ae)M=ae.tool_use;else if("default"in ae)M=ae.default;else throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(ae).sort()}.`)}else if(M===null)if(this.chat_template)M=this.chat_template;else throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");return M}apply_chat_template(M,{tools:B=null,documents:ae=null,chat_template:pe=null,add_generation_prompt:Pe=!1,tokenize:Be=!0,padding:st=!1,truncation:tt=!1,max_length:ot=null,return_tensor:Ye=!0,return_dict:zt=!1,tokenizer_kwargs:Ft={},...Yt}={}){if(pe=this.get_chat_template({chat_template:pe,tools:B}),typeof pe!="string")throw Error(`chat_template must be a string, but got ${typeof pe}`);let cs=this._compiled_template_cache.get(pe);cs===void 0&&(cs=new I.Template(pe),this._compiled_template_cache.set(pe,cs));const ss=Object.create(null);for(const ds of Lr){const Ws=this.getToken(ds);Ws&&(ss[ds]=Ws)}const ms=cs.render({messages:M,add_generation_prompt:Pe,tools:B,documents:ae,...ss,...Yt});if(Be){const ds=this._call(ms,{add_special_tokens:!1,padding:st,truncation:tt,max_length:ot,return_tensor:Ye,...Ft});return zt?ds:ds.input_ids}return ms}}class vr extends Tt{return_token_type_ids=!0}class ur extends Tt{return_token_type_ids=!0}class Dt extends Tt{return_token_type_ids=!0}class or extends Tt{return_token_type_ids=!0}class g extends Tt{return_token_type_ids=!0}class te extends Tt{return_token_type_ids=!0}class N extends Tt{return_token_type_ids=!0}class ee extends Tt{return_token_type_ids=!0}class ue extends Tt{return_token_type_ids=!0}class Te extends Tt{}class Ce extends Tt{}class ut extends Tt{return_token_type_ids=!0;constructor(M,B){super(M,B),console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}}class mt extends Tt{return_token_type_ids=!0}class Ze extends Tt{}class _t extends Tt{}class Nt extends Tt{}class ts extends Tt{constructor(M,B){super(M,B),this.languageRegex=/^[a-z]{2}_[A-Z]{2}$/,this.language_codes=this.special_tokens.filter(ae=>this.languageRegex.test(ae)),this.lang_to_token=ae=>ae}_build_translation_inputs(M,B,ae){return ir(this,M,B,ae)}}class Qt extends ts{}class Fs extends Tt{}class Ls extends Tt{}const Ts="▁";class rs extends Tt{padding_side="left";constructor(M,B){super(M,B),this.legacy=B.legacy??!0,this.legacy||(this.normalizer=null,this.pre_tokenizer=new ws({replacement:Ts,add_prefix_space:!0,prepend_scheme:"first"}))}_encode_text(M){if(M===null)return null;if(this.legacy||M.length===0)return super._encode_text(M);let B=super._encode_text(Ts+M.replaceAll(Ts," "));return B.length>1&&B[0]===Ts&&this.special_tokens.includes(B[1])&&(B=B.slice(1)),B}}class zs extends Tt{}class pr extends Tt{}class xr extends Tt{}class Ds extends Tt{}class ks extends Tt{}class Os extends Tt{}class Bs extends Tt{}class Rs extends Tt{}class Vs extends Tt{}function ir(we,M,B,ae){if(!("language_codes"in we)||!Array.isArray(we.language_codes))throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");if(!("languageRegex"in we)||!(we.languageRegex instanceof RegExp))throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");if(!("lang_to_token"in we)||typeof we.lang_to_token!="function")throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");const pe=ae.src_lang,Pe=ae.tgt_lang;if(!we.language_codes.includes(Pe))throw new Error(`Target language code "${Pe}" is not valid. Must be one of: {${we.language_codes.join(", ")}}`);if(pe!==void 0){if(!we.language_codes.includes(pe))throw new Error(`Source language code "${pe}" is not valid. Must be one of: {${we.language_codes.join(", ")}}`);for(const Be of we.post_processor.config.single)if("SpecialToken"in Be&&we.languageRegex.test(Be.SpecialToken.id)){Be.SpecialToken.id=we.lang_to_token(pe);break}}return ae.forced_bos_token_id=we.model.convert_tokens_to_ids([we.lang_to_token(Pe)])[0],we._call(M,B)}class hr extends Tt{constructor(M,B){super(M,B),this.languageRegex=/^[a-z]{3}_[A-Z][a-z]{3}$/,this.language_codes=this.special_tokens.filter(ae=>this.languageRegex.test(ae)),this.lang_to_token=ae=>ae}_build_translation_inputs(M,B,ae){return ir(this,M,B,ae)}}class xt extends Tt{constructor(M,B){super(M,B),this.languageRegex=/^__[a-z]{2,3}__$/,this.language_codes=this.special_tokens.filter(ae=>this.languageRegex.test(ae)).map(ae=>ae.slice(2,-2)),this.lang_to_token=ae=>`__${ae}__`}_build_translation_inputs(M,B,ae){return ir(this,M,B,ae)}}class js extends Tt{get timestamp_begin(){return this.model.convert_tokens_to_ids(["<|notimestamps|>"])[0]+1}_decode_asr(M,{return_timestamps:B=!1,return_language:ae=!1,time_precision:pe=null,force_full_sequences:Pe=!0}={}){if(pe===null)throw Error("Must specify time_precision");let Be=null;const st=B==="word";function tt(){return{language:Be,timestamp:[null,null],text:""}}const ot=[];let Ye=tt(),zt=0;const Ft=this.timestamp_begin,cs=Ft+1500;let ss=[],ms=[],ds=!1,Ws=null;const zr=new Set(this.all_special_ids);for(const qt of M){const ns=qt.tokens,Ms=st?qt.token_timestamps:null;let Js=null,Ys=Ft;if("stride"in qt){const[us,os,is]=qt.stride;if(zt-=os,Ws=us-is,os&&(Ys=os/pe+Ft),is)for(let Ct=ns.length-1;Ct>=0;--Ct){const Wt=Number(ns[Ct]);if(Wt>=Ft){if(Js!==null&&(Wt-Ft)*pe<Ws)break;Js=Wt}}}let ys=[],Zs=[];for(let us=0;us<ns.length;++us){const os=Number(ns[us]);if(zr.has(os)){const is=this.decode([os]),Ct=D.WHISPER_LANGUAGE_MAPPING.get(is.slice(2,-2));if(Ct!==void 0){if(Be!==null&&Ct!==Be&&!B){ss.push(ys);const Wt=this.findLongestCommonSequence(ss)[0],er=this.decode(Wt);Ye.text=er,ot.push(Ye),ss=[],ys=[],Ye=tt()}Be=Ye.language=Ct}}else if(os>=Ft&&os<=cs){const is=(os-Ft)*pe+zt,Ct=(0,q.round)(is,2);if(Js!==null&&os>=Js)ds=!0;else if(ds||ss.length>0&&os<Ys)ds=!1;else if(Ye.timestamp[0]===null)Ye.timestamp[0]=Ct;else if(Ct!==Ye.timestamp[0]){Ye.timestamp[1]=Ct,ss.push(ys),st&&ms.push(Zs);const[Wt,er]=this.findLongestCommonSequence(ss,ms),tr=this.decode(Wt);Ye.text=tr,st&&(Ye.words=this.collateWordTimestamps(Wt,er,Be)),ot.push(Ye),ss=[],ys=[],ms=[],Zs=[],Ye=tt()}}else if(ys.push(os),st){let is=(0,q.round)(Ms[us]+zt,2),Ct;if(us+1<Ms.length){Ct=(0,q.round)(Ms[us+1]+zt,2);const Wt=this.decode([os]);x.test(Wt)&&(Ct=(0,q.round)(Math.min(is+pe,Ct),2))}else Ct=null;Zs.push([is,Ct])}}if("stride"in qt){const[us,os,is]=qt.stride;zt+=us-is}ys.length>0?(ss.push(ys),st&&ms.push(Zs)):ss.every(us=>us.length===0)&&(Ye=tt(),ss=[],ys=[],ms=[],Zs=[])}if(ss.length>0){if(Pe&&B)throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");const[qt,ns]=this.findLongestCommonSequence(ss,ms),Ms=this.decode(qt);Ye.text=Ms,st&&(Ye.words=this.collateWordTimestamps(qt,ns,Be)),ot.push(Ye)}let _s=Object.create(null);const lr=ot.map(qt=>qt.text).join("");if(B||ae){for(let qt=0;qt<ot.length;++qt){const ns=ot[qt];B||delete ns.timestamp,ae||delete ns.language}if(st){const qt=[];for(const ns of ot)for(const Ms of ns.words)qt.push(Ms);_s={chunks:qt}}else _s={chunks:ot}}return[lr,_s]}findLongestCommonSequence(M,B=null){let ae=M[0],pe=ae.length,Pe=[];const Be=Array.isArray(B)&&B.length>0;let st=Be?[]:null,tt=Be?B[0]:null;for(let ot=1;ot<M.length;++ot){const Ye=M[ot];let zt=0,Ft=[pe,pe,0,0];const Yt=Ye.length;for(let _s=1;_s<pe+Yt;++_s){const lr=Math.max(0,pe-_s),qt=Math.min(pe,pe+Yt-_s),ns=ae.slice(lr,qt),Ms=Math.max(0,_s-pe),Js=Math.min(Yt,_s),Ys=Ye.slice(Ms,Js);if(ns.length!==Ys.length)throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");let ys;Be?ys=ns.filter((os,is)=>os===Ys[is]&&tt[lr+is]<=B[ot][Ms+is]).length:ys=ns.filter((os,is)=>os===Ys[is]).length;const Zs=_s/1e4,us=ys/_s+Zs;ys>1&&us>zt&&(zt=us,Ft=[lr,qt,Ms,Js])}const[cs,ss,ms,ds]=Ft,Ws=Math.floor((ss+cs)/2),zr=Math.floor((ds+ms)/2);Pe.push(...ae.slice(0,Ws)),ae=Ye.slice(zr),pe=ae.length,Be&&(st.push(...tt.slice(0,Ws)),tt=B[ot].slice(zr))}return Pe.push(...ae),Be?(st.push(...tt),[Pe,st]):[Pe,[]]}collateWordTimestamps(M,B,ae){const[pe,Pe,Be]=this.combineTokensIntoWords(M,ae),st=[];for(let tt=0;tt<pe.length;++tt){const ot=Be[tt];st.push({text:pe[tt],timestamp:[B[ot.at(0)][0],B[ot.at(-1)][1]]})}return st}combineTokensIntoWords(M,B,ae=`"'“¡¿([{-`,pe=`"'.。,，!！?？:：”)]}、`){B=B??"english";let Pe,Be,st;return["chinese","japanese","thai","lao","myanmar"].includes(B)?[Pe,Be,st]=this.splitTokensOnUnicode(M):[Pe,Be,st]=this.splitTokensOnSpaces(M),this.mergePunctuations(Pe,Be,st,ae,pe)}decode(M,B){let ae;return B?.decode_with_timestamps?(M instanceof S.Tensor&&(M=K(M)),ae=this.decodeWithTimestamps(M,B)):ae=super.decode(M,B),ae}decodeWithTimestamps(M,B){const ae=B?.time_precision??.02,pe=Array.from(this.all_special_ids).at(-1)+1;let Pe=[[]];for(let Be of M)if(Be=Number(Be),Be>=pe){const st=((Be-pe)*ae).toFixed(2);Pe.push(`<|${st}|>`),Pe.push([])}else Pe[Pe.length-1].push(Be);return Pe=Pe.map(Be=>typeof Be=="string"?Be:super.decode(Be,B)),Pe.join("")}splitTokensOnUnicode(M){const B=this.decode(M,{decode_with_timestamps:!0}),ae="�",pe=[],Pe=[],Be=[];let st=[],tt=[],ot=0;for(let Ye=0;Ye<M.length;++Ye){const zt=M[Ye];st.push(zt),tt.push(Ye);const Ft=this.decode(st,{decode_with_timestamps:!0});(!Ft.includes(ae)||B[ot+Ft.indexOf(ae)]===ae)&&(pe.push(Ft),Pe.push(st),Be.push(tt),st=[],tt=[],ot+=Ft.length)}return[pe,Pe,Be]}splitTokensOnSpaces(M){const[B,ae,pe]=this.splitTokensOnUnicode(M),Pe=[],Be=[],st=[],tt=new RegExp(`^[${T}]$`,"gu");for(let ot=0;ot<B.length;++ot){const Ye=B[ot],zt=ae[ot],Ft=pe[ot],Yt=zt[0]>=this.model.tokens_to_ids.get("<|endoftext|>"),cs=Ye.startsWith(" "),ss=Ye.trim(),ms=tt.test(ss);if(Yt||cs||ms||Pe.length===0)Pe.push(Ye),Be.push(zt),st.push(Ft);else{const ds=Pe.length-1;Pe[ds]+=Ye,Be[ds].push(...zt),st[ds].push(...Ft)}}return[Pe,Be,st]}mergePunctuations(M,B,ae,pe,Pe){const Be=structuredClone(M),st=structuredClone(B),tt=structuredClone(ae);let ot=Be.length-2,Ye=Be.length-1;for(;ot>=0;)Be[ot].startsWith(" ")&&pe.includes(Be[ot].trim())?(Be[Ye]=Be[ot]+Be[Ye],st[Ye]=(0,b.mergeArrays)(st[ot],st[Ye]),tt[Ye]=(0,b.mergeArrays)(tt[ot],tt[Ye]),Be[ot]="",st[ot]=[],tt[ot]=[]):Ye=ot,--ot;for(ot=0,Ye=1;Ye<Be.length;)!Be[ot].endsWith(" ")&&Pe.includes(Be[Ye])?(Be[ot]+=Be[Ye],st[ot]=(0,b.mergeArrays)(st[ot],st[Ye]),tt[ot]=(0,b.mergeArrays)(tt[ot],tt[Ye]),Be[Ye]="",st[Ye]=[],tt[Ye]=[]):ot=Ye,++Ye;return[Be.filter(zt=>zt),st.filter(zt=>zt.length>0),tt.filter(zt=>zt.length>0)]}}class mr extends Tt{}class Tr extends Tt{}class Is extends Tt{}class qe extends Tt{constructor(M,B){super(M,B),this.languageRegex=/^(>>\w+<<)\s*/g,this.supported_language_codes=this.model.vocab.filter(ae=>this.languageRegex.test(ae)),console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.')}_encode_text(M){if(M===null)return null;const[B,...ae]=M.trim().split(this.languageRegex);if(ae.length===0)return super._encode_text(B);if(ae.length===2){const[pe,Pe]=ae;return this.supported_language_codes.includes(pe)||console.warn(`Unsupported language code "${pe}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`),(0,b.mergeArrays)([pe],super._encode_text(Pe))}}}class Qe extends Tt{}class gt extends Tt{}class Xt extends Tt{}class Ot extends Tt{}class Cs extends Tt{}class Us extends Tt{constructor(M,B){super(M,B),this.decoder=new At({})}}class ar extends Tt{}class Se extends Tt{}class Pr extends Tt{}class pn{static TOKENIZER_CLASS_MAPPING={T5Tokenizer:Ze,DistilBertTokenizer:Te,CamembertTokenizer:Ce,DebertaTokenizer:g,DebertaV2Tokenizer:te,BertTokenizer:vr,HerbertTokenizer:N,ConvBertTokenizer:ee,RoFormerTokenizer:ue,XLMTokenizer:ut,ElectraTokenizer:mt,MobileBertTokenizer:Dt,SqueezeBertTokenizer:or,AlbertTokenizer:ur,GPT2Tokenizer:_t,BartTokenizer:Nt,MBartTokenizer:ts,MBart50Tokenizer:Qt,RobertaTokenizer:Fs,WhisperTokenizer:js,CodeGenTokenizer:mr,CLIPTokenizer:Tr,SiglipTokenizer:Is,MarianTokenizer:qe,BloomTokenizer:Ls,NllbTokenizer:hr,M2M100Tokenizer:xt,LlamaTokenizer:rs,CodeLlamaTokenizer:zs,XLMRobertaTokenizer:pr,MPNetTokenizer:xr,FalconTokenizer:Ds,GPTNeoXTokenizer:ks,EsmTokenizer:Os,Wav2Vec2CTCTokenizer:Qe,BlenderbotTokenizer:gt,BlenderbotSmallTokenizer:Xt,SpeechT5Tokenizer:Ot,NougatTokenizer:Cs,VitsTokenizer:Us,Qwen2Tokenizer:Bs,GemmaTokenizer:Rs,Grok1Tokenizer:Vs,CohereTokenizer:ar,MgpstrTokenizer:Se,Ernie4_5_Tokenizer:Pr,PreTrainedTokenizer:Tt};static async from_pretrained(M,{progress_callback:B=null,config:ae=null,cache_dir:pe=null,local_files_only:Pe=!1,revision:Be="main",legacy:st=null}={}){const[tt,ot]=await y(M,{progress_callback:B,config:ae,cache_dir:pe,local_files_only:Pe,revision:Be,legacy:st}),Ye=ot.tokenizer_class?.replace(/Fast$/,"")??"PreTrainedTokenizer";let zt=this.TOKENIZER_CLASS_MAPPING[Ye];return zt||(console.warn(`Unknown tokenizer class "${Ye}", attempting to construct from base class.`),zt=Tt),new zt(tt,ot)}}},"./src/utils/audio.js":(re,m,n)=>{n.r(m),n.d(m,{RawAudio:()=>oe,hamming:()=>h,hanning:()=>y,mel_filter_bank:()=>X,read_audio:()=>I,spectrogram:()=>E,window_function:()=>Y});var _=n("./src/utils/hub.js"),b=n("./src/utils/maths.js"),F=n("./src/utils/core.js"),q=n("./src/env.js"),S=n("./src/utils/tensor.js"),f=n("?7992");async function I(Z,he){if(typeof AudioContext>"u")throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");const ie=await(await(0,_.getFile)(Z)).arrayBuffer(),Me=new AudioContext({sampleRate:he});typeof he>"u"&&console.warn(`No sampling rate provided, using default of ${Me.sampleRate}Hz.`);const be=await Me.decodeAudioData(ie);let fe;if(be.numberOfChannels===2){const Re=Math.sqrt(2),ke=be.getChannelData(0),le=be.getChannelData(1);fe=new Float32Array(ke.length);for(let W=0;W<be.length;++W)fe[W]=Re*(ke[W]+le[W])/2}else fe=be.getChannelData(0);return fe}function D(Z,he){if(Z<1)return new Float64Array;if(Z===1)return new Float64Array([1]);const ie=1-he,Me=2*Math.PI/(Z-1),be=new Float64Array(Z);for(let fe=0;fe<Z;++fe)be[fe]=he-ie*Math.cos(fe*Me);return be}function y(Z){return D(Z,.5)}function h(Z){return D(Z,.54)}const V={htk:Z=>2595*Math.log10(1+Z/700),kaldi:Z=>1127*Math.log(1+Z/700),slaney:(Z,he=1e3,ie=15,Me=27/Math.log(6.4))=>Z>=he?ie+Math.log(Z/he)*Me:3*Z/200};function O(Z,he="htk"){const ie=V[he];if(!ie)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof Z=="number"?ie(Z):Z.map(Me=>ie(Me))}const K={htk:Z=>700*(10**(Z/2595)-1),kaldi:Z=>700*(Math.exp(Z/1127)-1),slaney:(Z,he=1e3,ie=15,Me=Math.log(6.4)/27)=>Z>=ie?he*Math.exp(Me*(Z-ie)):200*Z/3};function me(Z,he="htk"){const ie=K[he];if(!ie)throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');return typeof Z=="number"?ie(Z):Z.map(Me=>ie(Me))}function R(Z,he){const ie=Float64Array.from({length:he.length-1},(Re,ke)=>he[ke+1]-he[ke]),Me=Array.from({length:Z.length},()=>new Array(he.length));for(let Re=0;Re<Z.length;++Re){const ke=Me[Re];for(let le=0;le<he.length;++le)ke[le]=he[le]-Z[Re]}const be=he.length-2,fe=Array.from({length:be},()=>new Array(Z.length));for(let Re=0;Re<Z.length;++Re){const ke=Me[Re];for(let le=0;le<be;++le){const W=-ke[le]/ie[le],ne=ke[le+2]/ie[le+1];fe[le][Re]=Math.max(0,Math.min(W,ne))}}return fe}function G(Z,he,ie){const Me=(he-Z)/(ie-1);return Float64Array.from({length:ie},(be,fe)=>Z+Me*fe)}function X(Z,he,ie,Me,be,fe=null,Re="htk",ke=!1){if(fe!==null&&fe!=="slaney")throw new Error('norm must be one of null or "slaney"');if(Z<2)throw new Error(`Require num_frequency_bins: ${Z} >= 2`);if(ie>Me)throw new Error(`Require min_frequency: ${ie} <= max_frequency: ${Me}`);const le=O(ie,Re),W=O(Me,Re),ne=G(le,W,he+2);let _e=me(ne,Re),xe;if(ke){const Ge=be/((Z-1)*2);xe=O(Float64Array.from({length:Z},(He,pt)=>pt*Ge),Re),_e=ne}else xe=G(0,Math.floor(be/2),Z);const We=R(xe,_e);if(fe!==null&&fe==="slaney")for(let Ge=0;Ge<he;++Ge){const He=We[Ge],pt=2/(_e[Ge+2]-_e[Ge]);for(let ze=0;ze<Z;++ze)He[ze]*=pt}return We}function L(Z,he,ie){const Me=new Z.constructor(Z.length+he+ie),be=Z.length-1;for(let fe=0;fe<Z.length;++fe)Me[he+fe]=Z[fe];for(let fe=1;fe<=he;++fe)Me[he-fe]=Z[(0,F.calculateReflectOffset)(fe,be)];for(let fe=1;fe<=ie;++fe)Me[be+he+fe]=Z[(0,F.calculateReflectOffset)(be-fe,be)];return Me}function $(Z,he,ie,Me,be){if(ie<=0)throw new Error("reference must be greater than zero");if(Me<=0)throw new Error("min_value must be greater than zero");ie=Math.max(Me,ie);const fe=Math.log10(ie);for(let Re=0;Re<Z.length;++Re)Z[Re]=he*Math.log10(Math.max(Me,Z[Re])-fe);if(be!==null){if(be<=0)throw new Error("db_range must be greater than zero");const Re=(0,b.max)(Z)[0]-be;for(let ke=0;ke<Z.length;++ke)Z[ke]=Math.max(Z[ke],Re)}return Z}function T(Z,he=1,ie=1e-5,Me=null){return $(Z,20,he,ie,Me)}function x(Z,he=1,ie=1e-10,Me=null){return $(Z,10,he,ie,Me)}async function E(Z,he,ie,Me,{fft_length:be=null,power:fe=1,center:Re=!0,pad_mode:ke="reflect",onesided:le=!0,preemphasis:W=null,preemphasis_htk_flavor:ne=!0,mel_filters:_e=null,mel_floor:xe=1e-10,log_mel:We=null,reference:Ge=1,min_value:He=1e-10,db_range:pt=null,remove_dc_offset:ze=null,min_num_frames:J=null,max_num_frames:j=null,do_pad:ve=!0,transpose:Fe=!1}={}){const Oe=he.length;if(be===null&&(be=ie),ie>be)throw Error(`frame_length (${ie}) may not be larger than fft_length (${be})`);if(Oe!==ie)throw new Error(`Length of the window (${Oe}) must equal frame_length (${ie})`);if(Me<=0)throw new Error("hop_length must be greater than zero");if(fe===null&&_e!==null)throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");if(!ne)throw new Error("`preemphasis_htk_flavor=false` is not currently supported.");if(Re){if(ke!=="reflect")throw new Error(`pad_mode="${ke}" not implemented yet.`);const dt=Math.floor((be-1)/2)+1;Z=L(Z,dt,dt)}let je=Math.floor(1+Math.floor((Z.length-ie)/Me));J!==null&&je<J&&(je=J);const Ee=le?Math.floor(be/2)+1:be;let Ne=je,$e=je;j!==null&&(j>je?ve&&($e=j):$e=Ne=j);const Ue=new b.FFT(be),Ke=new Float64Array(be),nt=new Float64Array(Ue.outputBufferSize),De=new Float32Array(Ee*$e);for(let dt=0;dt<Ne;++dt){const lt=dt*Me,ct=Math.min(Z.length-lt,ie);ct!==ie&&Ke.fill(0,0,ie);for(let ft=0;ft<ct;++ft)Ke[ft]=Z[lt+ft];if(ze){let ft=0;for(let Ut=0;Ut<ct;++Ut)ft+=Ke[Ut];const Vt=ft/ct;for(let Ut=0;Ut<ct;++Ut)Ke[Ut]-=Vt}if(W!==null){for(let ft=ct-1;ft>=1;--ft)Ke[ft]-=W*Ke[ft-1];Ke[0]*=1-W}for(let ft=0;ft<he.length;++ft)Ke[ft]*=he[ft];Ue.realTransform(nt,Ke);for(let ft=0;ft<Ee;++ft){const Vt=ft<<1;De[ft*$e+dt]=nt[Vt]**2+nt[Vt+1]**2}}if(fe!==null&&fe!==2){const dt=fe/2;for(let lt=0;lt<De.length;++lt)De[lt]**=dt}const Mt=_e.length;let et=await(0,S.matmul)(new S.Tensor("float32",_e.flat(),[Mt,Ee]),new S.Tensor("float32",De,[Ee,$e]));Fe&&(et=et.transpose(1,0));const at=et.data;for(let dt=0;dt<at.length;++dt)at[dt]=Math.max(xe,at[dt]);if(fe!==null&&We!==null){const dt=Math.min(at.length,Ne*Mt);switch(We){case"log":for(let lt=0;lt<dt;++lt)at[lt]=Math.log(at[lt]);break;case"log10":for(let lt=0;lt<dt;++lt)at[lt]=Math.log10(at[lt]);break;case"dB":if(fe===1)T(at,Ge,He,pt);else if(fe===2)x(at,Ge,He,pt);else throw new Error(`Cannot use log_mel option '${We}' with power ${fe}`);break;default:throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${We}'`)}}return et}function Y(Z,he,{periodic:ie=!0,frame_length:Me=null,center:be=!0}={}){const fe=ie?Z+1:Z;let Re;switch(he){case"boxcar":Re=new Float64Array(fe).fill(1);break;case"hann":case"hann_window":Re=y(fe);break;case"hamming":Re=h(fe);break;case"povey":Re=y(fe).map(ke=>Math.pow(ke,.85));break;default:throw new Error(`Unknown window type ${he}.`)}if(ie&&(Re=Re.subarray(0,Z)),Me===null)return Re;if(Z>Me)throw new Error(`Length of the window (${Z}) may not be larger than frame_length (${Me})`);return Re}function U(Z,he){let ie=44;const Me=new ArrayBuffer(ie+Z.length*4),be=new DataView(Me);de(be,0,"RIFF"),be.setUint32(4,36+Z.length*4,!0),de(be,8,"WAVE"),de(be,12,"fmt "),be.setUint32(16,16,!0),be.setUint16(20,3,!0),be.setUint16(22,1,!0),be.setUint32(24,he,!0),be.setUint32(28,he*4,!0),be.setUint16(32,4,!0),be.setUint16(34,32,!0),de(be,36,"data"),be.setUint32(40,Z.length*4,!0);for(let fe=0;fe<Z.length;++fe,ie+=4)be.setFloat32(ie,Z[fe],!0);return Me}function de(Z,he,ie){for(let Me=0;Me<ie.length;++Me)Z.setUint8(he+Me,ie.charCodeAt(Me))}class oe{constructor(he,ie){this.audio=he,this.sampling_rate=ie}toWav(){return U(this.audio,this.sampling_rate)}toBlob(){const he=this.toWav();return new Blob([he],{type:"audio/wav"})}async save(he){let ie;if(q.apis.IS_BROWSER_ENV){if(q.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save a file from a Web Worker.");ie=F.saveBlob}else if(q.apis.IS_FS_AVAILABLE)ie=async(Me,be)=>{let fe=await be.arrayBuffer();f.writeFileSync(Me,Buffer.from(fe))};else throw new Error("Unable to save because filesystem is disabled in this environment.");await ie(he,this.toBlob())}}},"./src/utils/constants.js":(re,m,n)=>{n.r(m),n.d(m,{CHAT_TEMPLATE_NAME:()=>f,CONFIG_NAME:()=>b,FEATURE_EXTRACTOR_NAME:()=>F,GENERATION_CONFIG_NAME:()=>I,GITHUB_ISSUE_URL:()=>_,IMAGE_PROCESSOR_NAME:()=>q,PROCESSOR_NAME:()=>S});const _="https://github.com/huggingface/transformers.js/issues/new/choose",b="config.json",F="preprocessor_config.json",q=F,S="processor_config.json",f="chat_template.jinja",I="generation_config.json"},"./src/utils/core.js":(re,m,n)=>{n.r(m),n.d(m,{calculateDimensions:()=>I,calculateReflectOffset:()=>V,count:()=>R,dispatchCallback:()=>_,escapeRegExp:()=>F,isIntegralNumber:()=>S,isNullishDimension:()=>f,isTypedArray:()=>q,len:()=>me,mergeArrays:()=>y,pick:()=>K,pop:()=>D,product:()=>h,reverseDictionary:()=>b,saveBlob:()=>O});function _(G,X){G&&G(X)}function b(G){return Object.fromEntries(Object.entries(G).map(([X,L])=>[L,X]))}function F(G){return G.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function q(G){return G?.prototype?.__proto__?.constructor?.name==="TypedArray"}function S(G){return Number.isInteger(G)||typeof G=="bigint"}function f(G){return G==null||G===-1}function I(G){const X=[];let L=G;for(;Array.isArray(L);)X.push(L.length),L=L[0];return X}function D(G,X,L=void 0){const $=G[X];if($!==void 0)return delete G[X],$;if(L===void 0)throw Error(`Key ${X} does not exist in object.`);return L}function y(...G){return Array.prototype.concat.apply([],G)}function h(...G){return G.reduce((X,L)=>X.flatMap($=>L.map(T=>[$,T])))}function V(G,X){return Math.abs((G+X)%(2*X)-X)}function O(G,X){const L=URL.createObjectURL(X),$=document.createElement("a");$.href=L,$.download=G,$.click(),$.remove(),URL.revokeObjectURL(L)}function K(G,X){return Object.assign({},...X.map(L=>{if(G[L]!==void 0)return{[L]:G[L]}}))}function me(G){let X=0;for(const L of G)++X;return X}function R(G,X){let L=0;for(const $ of G)$===X&&++L;return L}},"./src/utils/data-structures.js":(re,m,n)=>{n.r(m),n.d(m,{CharTrie:()=>b,DictionarySplitter:()=>f,LRUCache:()=>I,PriorityQueue:()=>_,TokenLattice:()=>q});class _{constructor(y=(V,O)=>V>O,h=1/0){this._heap=[],this._comparator=y,this._maxSize=h}get size(){return this._heap.length}isEmpty(){return this.size===0}peek(){return this._heap[0]}push(...y){return this.extend(y)}extend(y){for(const h of y)if(this.size<this._maxSize)this._heap.push(h),this._siftUp();else{const V=this._smallest();this._comparator(h,this._heap[V])&&(this._heap[V]=h,this._siftUpFrom(V))}return this.size}pop(){const y=this.peek(),h=this.size-1;return h>0&&this._swap(0,h),this._heap.pop(),this._siftDown(),y}replace(y){const h=this.peek();return this._heap[0]=y,this._siftDown(),h}_parent(y){return(y+1>>>1)-1}_left(y){return(y<<1)+1}_right(y){return y+1<<1}_greater(y,h){return this._comparator(this._heap[y],this._heap[h])}_swap(y,h){const V=this._heap[y];this._heap[y]=this._heap[h],this._heap[h]=V}_siftUp(){this._siftUpFrom(this.size-1)}_siftUpFrom(y){for(;y>0&&this._greater(y,this._parent(y));)this._swap(y,this._parent(y)),y=this._parent(y)}_siftDown(){let y=0;for(;this._left(y)<this.size&&this._greater(this._left(y),y)||this._right(y)<this.size&&this._greater(this._right(y),y);){const h=this._right(y)<this.size&&this._greater(this._right(y),this._left(y))?this._right(y):this._left(y);this._swap(y,h),y=h}}_smallest(){return 2**Math.floor(Math.log2(this.size))-1}}class b{constructor(){this.root=F.default()}extend(y){for(const h of y)this.push(h)}push(y){let h=this.root;for(const V of y){let O=h.children.get(V);O===void 0&&(O=F.default(),h.children.set(V,O)),h=O}h.isLeaf=!0}*commonPrefixSearch(y){let h=this.root;if(h===void 0)return;let V="";for(const O of y){if(V+=O,h=h.children.get(O),h===void 0)return;h.isLeaf&&(yield V)}}}class F{constructor(y,h){this.isLeaf=y,this.children=h}static default(){return new F(!1,new Map)}}class q{constructor(y,h,V){this.chars=Array.from(y),this.len=this.chars.length,this.bosTokenId=h,this.eosTokenId=V,this.nodes=[],this.beginNodes=Array.from({length:this.len+1},()=>[]),this.endNodes=Array.from({length:this.len+1},()=>[]);const O=new S(this.bosTokenId,0,0,0,0),K=new S(this.eosTokenId,1,this.len,0,0);this.nodes.push(O.clone()),this.nodes.push(K.clone()),this.beginNodes[this.len].push(K),this.endNodes[0].push(O)}insert(y,h,V,O){const K=this.nodes.length,me=new S(O,K,y,h,V);this.beginNodes[y].push(me),this.endNodes[y+h].push(me),this.nodes.push(me)}viterbi(){const y=this.len;let h=0;for(;h<=y;){if(this.beginNodes[h].length==0)return[];for(let R of this.beginNodes[h]){R.prev=null;let G=0,X=null;for(let L of this.endNodes[h]){const $=L.backtraceScore+R.score;(X===null||$>G)&&(X=L.clone(),G=$)}if(X!==null)R.prev=X,R.backtraceScore=G;else return[]}++h}const V=[],K=this.beginNodes[y][0].prev;if(K===null)return[];let me=K.clone();for(;me.prev!==null;)V.push(me.clone()),me=me.clone().prev.clone();return V.reverse(),V}piece(y){return this.chars.slice(y.pos,y.pos+y.length).join("")}tokens(){return this.viterbi().map(h=>this.piece(h))}tokenIds(){return this.viterbi().map(h=>h.tokenId)}}class S{constructor(y,h,V,O,K){this.tokenId=y,this.nodeId=h,this.pos=V,this.length=O,this.score=K,this.prev=null,this.backtraceScore=0}clone(){const y=new S(this.tokenId,this.nodeId,this.pos,this.length,this.score);return y.prev=this.prev,y.backtraceScore=this.backtraceScore,y}}class f{constructor(y){this.trie=this._buildTrie(y)}_buildTrie(y){const h=Object.create(null);for(const V of y){let O=h;for(let K=0;K<V.length;++K)O=O[V[K]]??=Object.create(null);O.end=V}return h}split(y){const h=[],V=y.length;let O=0,K=0;for(;K<V;){let me=this.trie,R=null,G=K;for(;G<V&&(me=me[y[G]]);)me.end&&(R=me.end),++G;R?(K>O&&h.push(y.slice(O,K)),h.push(R),K+=R.length,O=K):++K}return O<V&&h.push(y.slice(O)),h}}class I{constructor(y){this.capacity=y,this.cache=new Map}get(y){if(!this.cache.has(y))return;const h=this.cache.get(y);return this.cache.delete(y),this.cache.set(y,h),h}put(y,h){this.cache.has(y)&&this.cache.delete(y),this.cache.set(y,h),this.cache.size>this.capacity&&this.cache.delete(this.cache.keys().next().value)}clear(){this.cache.clear()}}},"./src/utils/devices.js":(re,m,n)=>{n.r(m),n.d(m,{DEVICE_TYPES:()=>_});const _=Object.freeze({auto:"auto",gpu:"gpu",cpu:"cpu",wasm:"wasm",webgpu:"webgpu",cuda:"cuda",dml:"dml",webnn:"webnn","webnn-npu":"webnn-npu","webnn-gpu":"webnn-gpu","webnn-cpu":"webnn-cpu"})},"./src/utils/dtypes.js":(re,m,n)=>{n.r(m),n.d(m,{DATA_TYPES:()=>q,DEFAULT_DEVICE_DTYPE_MAPPING:()=>S,DEFAULT_DTYPE_SUFFIX_MAPPING:()=>f,isWebGpuFp16Supported:()=>F});var _=n("./src/env.js"),b=n("./src/utils/devices.js");const F=function(){let I;return async function(){if(I===void 0)if(!_.apis.IS_WEBGPU_AVAILABLE)I=!1;else try{I=(await navigator.gpu.requestAdapter()).features.has("shader-f16")}catch{I=!1}return I}}(),q=Object.freeze({auto:"auto",fp32:"fp32",fp16:"fp16",q8:"q8",int8:"int8",uint8:"uint8",q4:"q4",bnb4:"bnb4",q4f16:"q4f16"}),S=Object.freeze({[b.DEVICE_TYPES.wasm]:q.q8}),f=Object.freeze({[q.fp32]:"",[q.fp16]:"_fp16",[q.int8]:"_int8",[q.uint8]:"_uint8",[q.q8]:"_quantized",[q.q4]:"_q4",[q.q4f16]:"_q4f16",[q.bnb4]:"_bnb4"})},"./src/utils/generic.js":(re,m,n)=>{n.r(m),n.d(m,{Callable:()=>_});const _=class{constructor(){let b=function(...F){return b._call(...F)};return Object.setPrototypeOf(b,new.target.prototype)}_call(...b){throw Error("Must implement _call method in subclass")}}},"./src/utils/hub.js":(re,m,n)=>{n.r(m),n.d(m,{MAX_EXTERNAL_DATA_CHUNKS:()=>S,getFile:()=>V,getModelFile:()=>G,getModelJSON:()=>L,getModelText:()=>X});var _=n("?7992"),b=n("?5af5"),F=n("./src/env.js"),q=n("./src/utils/core.js");const S=100,f={txt:"text/plain",html:"text/html",css:"text/css",js:"text/javascript",json:"application/json",png:"image/png",jpg:"image/jpeg",jpeg:"image/jpeg",gif:"image/gif"};class I{constructor(E){if(this.filePath=E,this.headers=new Headers,this.exists=_.existsSync(E),this.exists){this.status=200,this.statusText="OK";let Y=_.statSync(E);this.headers.set("content-length",Y.size.toString()),this.updateContentType();const U=_.createReadStream(E);this.body=new ReadableStream({start(de){U.on("data",oe=>de.enqueue(oe)),U.on("end",()=>de.close()),U.on("error",oe=>de.error(oe))},cancel(){U.destroy()}})}else this.status=404,this.statusText="Not Found",this.body=null}updateContentType(){const E=this.filePath.toString().split(".").pop().toLowerCase();this.headers.set("content-type",f[E]??"application/octet-stream")}clone(){let E=new I(this.filePath);return E.exists=this.exists,E.status=this.status,E.statusText=this.statusText,E.headers=new Headers(this.headers),E}async arrayBuffer(){return(await _.promises.readFile(this.filePath)).buffer}async blob(){const E=await _.promises.readFile(this.filePath);return new Blob([E],{type:this.headers.get("content-type")})}async text(){return await _.promises.readFile(this.filePath,"utf8")}async json(){return JSON.parse(await this.text())}}function D(x,E=null,Y=null){let U;try{U=new URL(x)}catch{return!1}return!(E&&!E.includes(U.protocol)||Y&&!Y.includes(U.hostname))}const y=/^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;function h(x){return!(!y.test(x)||x.includes("..")||x.includes("--")||x.endsWith(".git")||x.endsWith(".ipynb"))}async function V(x){if(F.env.useFS&&!D(x,["http:","https:","blob:"]))return new I(x instanceof URL?x.protocol==="file:"?x.pathname:x.toString():x);if(typeof process<"u"&&process?.release?.name==="node"){const E=!!process.env?.TESTING_REMOTELY,Y=F.env.version,U=new Headers;if(U.set("User-Agent",`transformers.js/${Y}; is_ci/${E};`),D(x,["http:","https:"],["huggingface.co","hf.co"])){const oe=process.env?.HF_TOKEN??process.env?.HF_ACCESS_TOKEN;oe&&U.set("Authorization",`Bearer ${oe}`)}return fetch(x,{headers:U})}else return fetch(x)}const O={400:"Bad request error occurred while trying to load file",401:"Unauthorized access to file",403:"Forbidden access to file",404:"Could not locate file",408:"Request timeout error occurred while trying to load file",500:"Internal server error error occurred while trying to load file",502:"Bad gateway error occurred while trying to load file",503:"Service unavailable error occurred while trying to load file",504:"Gateway timeout error occurred while trying to load file"};function K(x,E,Y){if(!Y)return null;const U=O[x]??`Error (${x}) occurred while trying to load file`;throw Error(`${U}: "${E}".`)}class me{constructor(E){this.path=E}async match(E){let Y=b.join(this.path,E),U=new I(Y);if(U.exists)return U}async put(E,Y,U=void 0){let de=b.join(this.path,E);try{const oe=Y.headers.get("Content-Length"),Z=parseInt(oe??"0");let he=0;await _.promises.mkdir(b.dirname(de),{recursive:!0});const ie=_.createWriteStream(de),Me=Y.body.getReader();for(;;){const{done:be,value:fe}=await Me.read();if(be)break;await new Promise((ke,le)=>{ie.write(fe,W=>{if(W){le(W);return}ke()})}),he+=fe.length;const Re=Z?he/Z*100:0;U?.({progress:Re,loaded:he,total:Z})}ie.close()}catch(oe){try{await _.promises.unlink(de)}catch{}throw oe}}}async function R(x,...E){for(let Y of E)try{let U=await x.match(Y);if(U)return U}catch{continue}}async function G(x,E,Y=!0,U={},de=!1){if(!F.env.allowLocalModels){if(U.local_files_only)throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");if(!F.env.allowRemoteModels)throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.")}(0,q.dispatchCallback)(U.progress_callback,{status:"initiate",name:x,file:E});let oe;if(!oe&&F.env.useCustomCache){if(!F.env.customCache)throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");if(!F.env.customCache.match||!F.env.customCache.put)throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");oe=F.env.customCache}if(!oe&&F.env.useBrowserCache){if(typeof caches>"u")throw Error("Browser cache is not available in this environment.");try{oe=await caches.open("transformers-cache")}catch(xe){console.warn("An error occurred while opening the browser cache:",xe)}}if(!oe&&F.env.useFSCache){if(!F.apis.IS_FS_AVAILABLE)throw Error("File System Cache is not available in this environment.");oe=new me(U.cache_dir??F.env.cacheDir)}const Z=U.revision??"main",he=T(x,E),ie=h(x),Me=ie?T(F.env.localModelPath,he):he,be=T(F.env.remoteHost,F.env.remotePathTemplate.replaceAll("{model}",x).replaceAll("{revision}",encodeURIComponent(Z)),E);let fe;const Re=oe instanceof me?Z==="main"?he:T(x,Z,E):be;let ke=!1,le;oe&&(le=await R(oe,Me,Re));const W=le!==void 0;if(le===void 0){if(F.env.allowLocalModels)if(D(he,["http:","https:"])){if(U.local_files_only)throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${he}.`);if(!F.env.allowRemoteModels)throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${he}.`)}else try{le=await V(Me),fe=Me}catch(We){console.warn(`Unable to load from local path "${Me}": "${We}"`)}if(le===void 0||le.status===404){if(U.local_files_only||!F.env.allowRemoteModels){if(Y)throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${Me}".`);return null}if(!ie)throw Error(`Local file missing at "${Me}" and download aborted due to invalid model ID "${x}".`);if(le=await V(be),le.status!==200)return K(le.status,be,Y);fe=Re}ke=oe&&typeof Response<"u"&&le instanceof Response&&le.status===200}(0,q.dispatchCallback)(U.progress_callback,{status:"download",name:x,file:E});let ne;if(!(F.apis.IS_NODE_ENV&&de)){let xe;U.progress_callback?W&&typeof navigator<"u"&&/firefox/i.test(navigator.userAgent)?(xe=new Uint8Array(await le.arrayBuffer()),(0,q.dispatchCallback)(U.progress_callback,{status:"progress",name:x,file:E,progress:100,loaded:xe.length,total:xe.length})):xe=await $(le,We=>{(0,q.dispatchCallback)(U.progress_callback,{status:"progress",name:x,file:E,...We})}):xe=new Uint8Array(await le.arrayBuffer()),ne=xe}if(ke&&fe&&await oe.match(fe)===void 0)if(ne)await oe.put(fe,new Response(ne,{headers:le.headers})).catch(xe=>{console.warn(`Unable to add response to browser cache: ${xe}.`)});else{const xe=U.progress_callback?We=>(0,q.dispatchCallback)(U.progress_callback,{status:"progress",name:x,file:E,...We}):void 0;await oe.put(fe,le,xe)}if((0,q.dispatchCallback)(U.progress_callback,{status:"done",name:x,file:E}),ne){if(!F.apis.IS_NODE_ENV&&de)throw new Error("Cannot return path in a browser environment.");return ne}if(le instanceof I)return le.filePath;const _e=await oe?.match(fe);if(_e instanceof I)return _e.filePath;if(_e instanceof Response)return new Uint8Array(await _e.arrayBuffer());if(typeof _e=="string")return _e;throw new Error("Unable to get model file path or buffer.")}async function X(x,E,Y=!0,U={}){const de=await G(x,E,Y,U,!1);return de===null?null:new TextDecoder("utf-8").decode(de)}async function L(x,E,Y=!0,U={}){const de=await X(x,E,Y,U);return de===null?{}:JSON.parse(de)}async function $(x,E){const Y=x.headers.get("Content-Length");Y===null&&console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");let U=parseInt(Y??"0"),de=new Uint8Array(U),oe=0;const Z=x.body.getReader();async function he(){const{done:ie,value:Me}=await Z.read();if(ie)return;const be=oe+Me.length;if(be>U){U=be;const Re=new Uint8Array(U);Re.set(de),de=Re}de.set(Me,oe),oe=be;const fe=oe/U*100;return E({progress:fe,loaded:oe,total:U}),he()}return await he(),de}function T(...x){return x=x.map((E,Y)=>(Y&&(E=E.replace(new RegExp("^/"),"")),Y!==x.length-1&&(E=E.replace(new RegExp("/$"),"")),E)),x.join("/")}},"./src/utils/image.js":(re,m,n)=>{n.r(m),n.d(m,{RawImage:()=>O,load_image:()=>K});var _=n("./src/utils/core.js"),b=n("./src/utils/hub.js"),F=n("./src/env.js"),q=n("./src/utils/tensor.js"),S=n("?2b25");let f,I,D;const y=F.apis.IS_BROWSER_ENV||F.apis.IS_WEBWORKER_ENV;if(y)f=(me,R)=>{if(!self.OffscreenCanvas)throw new Error("OffscreenCanvas not supported by this browser.");return new self.OffscreenCanvas(me,R)},D=self.createImageBitmap,I=self.ImageData;else if(S)D=async me=>{const G=(await me.metadata()).channels,{data:X,info:L}=await me.rotate().raw().toBuffer({resolveWithObject:!0}),$=new O(new Uint8ClampedArray(X),L.width,L.height,L.channels);return G!==void 0&&G!==L.channels&&$.convert(G),$};else throw new Error("Unable to load image processing library.");const h={0:"nearest",1:"lanczos",2:"bilinear",3:"bicubic",4:"box",5:"hamming"},V=new Map([["png","image/png"],["jpg","image/jpeg"],["jpeg","image/jpeg"],["gif","image/gif"]]);class O{constructor(R,G,X,L){this.data=R,this.width=G,this.height=X,this.channels=L}get size(){return[this.width,this.height]}static async read(R){if(R instanceof O)return R;if(typeof R=="string"||R instanceof URL)return await this.fromURL(R);if(R instanceof Blob)return await this.fromBlob(R);if(typeof HTMLCanvasElement<"u"&&R instanceof HTMLCanvasElement||typeof OffscreenCanvas<"u"&&R instanceof OffscreenCanvas)return this.fromCanvas(R);throw new Error(`Unsupported input type: ${typeof R}`)}static fromCanvas(R){if(!y)throw new Error("fromCanvas() is only supported in browser environments.");const X=R.getContext("2d").getImageData(0,0,R.width,R.height).data;return new O(X,R.width,R.height,4)}static async fromURL(R){const G=await(0,b.getFile)(R);if(G.status!==200)throw new Error(`Unable to read image from "${R}" (${G.status} ${G.statusText})`);const X=await G.blob();return this.fromBlob(X)}static async fromBlob(R){if(y){const G=await D(R),X=f(G.width,G.height).getContext("2d");return X.drawImage(G,0,0),new this(X.getImageData(0,0,G.width,G.height).data,G.width,G.height,4)}else{const G=S(await R.arrayBuffer());return await D(G)}}static fromTensor(R,G="CHW"){if(R.dims.length!==3)throw new Error(`Tensor should have 3 dimensions, but has ${R.dims.length} dimensions.`);if(G==="CHW")R=R.transpose(1,2,0);else if(G!=="HWC")throw new Error(`Unsupported channel format: ${G}`);if(!(R.data instanceof Uint8ClampedArray||R.data instanceof Uint8Array))throw new Error(`Unsupported tensor type: ${R.type}`);switch(R.dims[2]){case 1:case 2:case 3:case 4:return new O(R.data,R.dims[1],R.dims[0],R.dims[2]);default:throw new Error(`Unsupported number of channels: ${R.dims[2]}`)}}grayscale(){if(this.channels===1)return this;const R=new Uint8ClampedArray(this.width*this.height*1);switch(this.channels){case 3:case 4:for(let G=0,X=0;G<this.data.length;G+=this.channels){const L=this.data[G],$=this.data[G+1],T=this.data[G+2];R[X++]=Math.round(.2989*L+.587*$+.114*T)}break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(R,this.width,this.height,1)}rgb(){if(this.channels===3)return this;const R=new Uint8ClampedArray(this.width*this.height*3);switch(this.channels){case 1:for(let G=0,X=0;G<this.data.length;++G)R[X++]=this.data[G],R[X++]=this.data[G],R[X++]=this.data[G];break;case 4:for(let G=0,X=0;G<this.data.length;G+=4)R[X++]=this.data[G],R[X++]=this.data[G+1],R[X++]=this.data[G+2];break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(R,this.width,this.height,3)}rgba(){if(this.channels===4)return this;const R=new Uint8ClampedArray(this.width*this.height*4);switch(this.channels){case 1:for(let G=0,X=0;G<this.data.length;++G)R[X++]=this.data[G],R[X++]=this.data[G],R[X++]=this.data[G],R[X++]=255;break;case 3:for(let G=0,X=0;G<this.data.length;G+=3)R[X++]=this.data[G],R[X++]=this.data[G+1],R[X++]=this.data[G+2],R[X++]=255;break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this._update(R,this.width,this.height,4)}putAlpha(R){if(R.width!==this.width||R.height!==this.height)throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${R.width}x${R.height}`);if(R.channels!==1)throw new Error(`Expected mask to have 1 channel, but got ${R.channels}`);const G=this.data,X=R.data,L=this.width*this.height;if(this.channels===3){const $=new Uint8ClampedArray(L*4);for(let T=0,x=0,E=0;T<L;++T)$[E++]=G[x++],$[E++]=G[x++],$[E++]=G[x++],$[E++]=X[T];return this._update($,this.width,this.height,4)}else if(this.channels===4){for(let $=0;$<L;++$)G[4*$+3]=X[$];return this}throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`)}async resize(R,G,{resample:X=2}={}){if(this.width===R&&this.height===G)return this;let L=h[X]??X;const $=(0,_.isNullishDimension)(R),T=(0,_.isNullishDimension)(G);if($&&T)return this;if($?R=G/this.height*this.width:T&&(G=R/this.width*this.height),y){const x=this.channels,E=this.toCanvas(),Y=f(R,G).getContext("2d");return Y.drawImage(E,0,0,R,G),new O(Y.getImageData(0,0,R,G).data,R,G,4).convert(x)}else{let x=this.toSharp();switch(L){case"box":case"hamming":(L==="box"||L==="hamming")&&(console.warn(`Resampling method ${L} is not yet supported. Using bilinear instead.`),L="bilinear");case"nearest":case"bilinear":case"bicubic":x=x.affine([R/this.width,0,0,G/this.height],{interpolator:L});break;case"lanczos":x=x.resize({width:R,height:G,fit:"fill",kernel:"lanczos3"});break;default:throw new Error(`Resampling method ${L} is not supported.`)}return await D(x)}}async pad([R,G,X,L]){if(R=Math.max(R,0),G=Math.max(G,0),X=Math.max(X,0),L=Math.max(L,0),R===0&&G===0&&X===0&&L===0)return this;if(y){const $=this.channels,T=this.toCanvas(),x=this.width+R+G,E=this.height+X+L,Y=f(x,E).getContext("2d");return Y.drawImage(T,0,0,this.width,this.height,R,X,this.width,this.height),new O(Y.getImageData(0,0,x,E).data,x,E,4).convert($)}else{const $=this.toSharp().extend({left:R,right:G,top:X,bottom:L});return await D($)}}async crop([R,G,X,L]){if(R=Math.max(R,0),G=Math.max(G,0),X=Math.min(X,this.width-1),L=Math.min(L,this.height-1),R===0&&G===0&&X===this.width-1&&L===this.height-1)return this;const $=X-R+1,T=L-G+1;if(y){const x=this.channels,E=this.toCanvas(),Y=f($,T).getContext("2d");return Y.drawImage(E,R,G,$,T,0,0,$,T),new O(Y.getImageData(0,0,$,T).data,$,T,4).convert(x)}else{const x=this.toSharp().extract({left:R,top:G,width:$,height:T});return await D(x)}}async center_crop(R,G){if(this.width===R&&this.height===G)return this;const X=(this.width-R)/2,L=(this.height-G)/2;if(y){const $=this.channels,T=this.toCanvas(),x=f(R,G).getContext("2d");let E=0,Y=0,U=0,de=0;return X>=0?E=X:U=-X,L>=0?Y=L:de=-L,x.drawImage(T,E,Y,R,G,U,de,R,G),new O(x.getImageData(0,0,R,G).data,R,G,4).convert($)}else{let $=this.toSharp();if(X>=0&&L>=0)$=$.extract({left:Math.floor(X),top:Math.floor(L),width:R,height:G});else if(X<=0&&L<=0){const T=Math.floor(-L),x=Math.floor(-X);$=$.extend({top:T,left:x,right:R-this.width-x,bottom:G-this.height-T})}else{let T=[0,0],x=0;L<0?(T[0]=Math.floor(-L),T[1]=G-this.height-T[0]):x=Math.floor(L);let E=[0,0],Y=0;X<0?(E[0]=Math.floor(-X),E[1]=R-this.width-E[0]):Y=Math.floor(X),$=$.extend({top:T[0],bottom:T[1],left:E[0],right:E[1]}).extract({left:Y,top:x,width:R,height:G})}return await D($)}}async toBlob(R="image/png",G=1){if(!y)throw new Error("toBlob() is only supported in browser environments.");return await this.toCanvas().convertToBlob({type:R,quality:G})}toTensor(R="CHW"){let G=new q.Tensor("uint8",new Uint8Array(this.data),[this.height,this.width,this.channels]);if(R!=="HWC")if(R==="CHW")G=G.permute(2,0,1);else throw new Error(`Unsupported channel format: ${R}`);return G}toCanvas(){if(!y)throw new Error("toCanvas() is only supported in browser environments.");const R=this.clone().rgba(),G=f(R.width,R.height),X=new I(R.data,R.width,R.height);return G.getContext("2d").putImageData(X,0,0),G}split(){const{data:R,width:G,height:X,channels:L}=this,$=R.constructor,T=R.length/L,x=Array.from({length:L},()=>new $(T));for(let E=0;E<T;++E){const Y=L*E;for(let U=0;U<L;++U)x[U][E]=R[Y+U]}return x.map(E=>new O(E,G,X,1))}_update(R,G,X,L=null){return this.data=R,this.width=G,this.height=X,L!==null&&(this.channels=L),this}clone(){return new O(this.data.slice(),this.width,this.height,this.channels)}convert(R){if(this.channels===R)return this;switch(R){case 1:this.grayscale();break;case 3:this.rgb();break;case 4:this.rgba();break;default:throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`)}return this}async save(R){if(y){if(F.apis.IS_WEBWORKER_ENV)throw new Error("Unable to save an image from a Web Worker.");const G=R.split(".").pop().toLowerCase(),X=V.get(G)??"image/png",L=await this.toBlob(X);(0,_.saveBlob)(R,L)}else{if(F.apis.IS_FS_AVAILABLE)return await this.toSharp().toFile(R);throw new Error("Unable to save the image because filesystem is disabled in this environment.")}}toSharp(){if(y)throw new Error("toSharp() is only supported in server-side environments.");return S(this.data,{raw:{width:this.width,height:this.height,channels:this.channels}})}}const K=O.read.bind(O)},"./src/utils/maths.js":(re,m,n)=>{n.r(m),n.d(m,{FFT:()=>K,bankers_round:()=>G,cos_sim:()=>f,dot:()=>S,dynamic_time_warping:()=>X,interpolate_data:()=>_,log_softmax:()=>q,magnitude:()=>I,max:()=>y,medianFilter:()=>me,min:()=>D,permute_data:()=>b,round:()=>R,softmax:()=>F});function _(L,[$,T,x],[E,Y],U="bilinear",de=!1){const oe=Y/x,Z=E/T,he=new L.constructor(E*Y*$),ie=T*x,Me=E*Y;for(let be=0;be<E;++be)for(let fe=0;fe<Y;++fe){const Re=be*Y+fe,ke=(fe+.5)/oe-.5,le=(be+.5)/Z-.5;let W=Math.floor(ke),ne=Math.floor(le);const _e=Math.min(W+1,x-1),xe=Math.min(ne+1,T-1);W=Math.max(W,0),ne=Math.max(ne,0);const We=ke-W,Ge=le-ne,He=(1-We)*(1-Ge),pt=We*(1-Ge),ze=(1-We)*Ge,J=We*Ge,j=ne*x,ve=xe*x,Fe=j+W,Oe=j+_e,je=ve+W,Ee=ve+_e;for(let Ne=0;Ne<$;++Ne){const $e=Ne*ie;he[Ne*Me+Re]=He*L[$e+Fe]+pt*L[$e+Oe]+ze*L[$e+je]+J*L[$e+Ee]}}return he}function b(L,$,T){const x=new Array(T.length),E=new Array(T.length);for(let de=T.length-1,oe=1;de>=0;--de)E[de]=oe,x[de]=$[T[de]],oe*=x[de];const Y=T.map((de,oe)=>E[T.indexOf(oe)]),U=new L.constructor(L.length);for(let de=0;de<L.length;++de){let oe=0;for(let Z=$.length-1,he=de;Z>=0;--Z)oe+=he%$[Z]*Y[Z],he=Math.floor(he/$[Z]);U[oe]=L[de]}return[U,x]}function F(L){const $=y(L)[0],T=L.map(Y=>Math.exp(Y-$)),x=T.reduce((Y,U)=>Y+U,0);return T.map(Y=>Y/x)}function q(L){const $=y(L)[0];let T=0;for(let Y=0;Y<L.length;++Y)T+=Math.exp(L[Y]-$);const x=Math.log(T);return L.map(Y=>Y-$-x)}function S(L,$){let T=0;for(let x=0;x<L.length;++x)T+=L[x]*$[x];return T}function f(L,$){const T=S(L,$),x=I(L),E=I($);return T/(x*E)}function I(L){return Math.sqrt(L.reduce(($,T)=>$+T*T,0))}function D(L){if(L.length===0)throw Error("Array must not be empty");let $=L[0],T=0;for(let x=1;x<L.length;++x)L[x]<$&&($=L[x],T=x);return[$,T]}function y(L){if(L.length===0)throw Error("Array must not be empty");let $=L[0],T=0;for(let x=1;x<L.length;++x)L[x]>$&&($=L[x],T=x);return[$,T]}function h(L){return L>0&&(L&L-1)===0}class V{constructor($){if(this.size=$|0,this.size<=1||!h(this.size))throw new Error("FFT size must be a power of two larger than 1");this._csize=$<<1,this.table=new Float64Array(this.size*2);for(let x=0;x<this.table.length;x+=2){const E=Math.PI*x/this.size;this.table[x]=Math.cos(E),this.table[x+1]=-Math.sin(E)}let T=0;for(let x=1;this.size>x;x<<=1)++T;this._width=T%2===0?T-1:T,this._bitrev=new Int32Array(1<<this._width);for(let x=0;x<this._bitrev.length;++x){this._bitrev[x]=0;for(let E=0;E<this._width;E+=2){const Y=this._width-E-2;this._bitrev[x]|=(x>>>E&3)<<Y}}}createComplexArray(){return new Float64Array(this._csize)}fromComplexArray($,T){const x=T||new Array($.length>>>1);for(let E=0;E<$.length;E+=2)x[E>>>1]=$[E];return x}toComplexArray($,T){const x=T||this.createComplexArray();for(let E=0;E<x.length;E+=2)x[E]=$[E>>>1],x[E+1]=0;return x}transform($,T){if($===T)throw new Error("Input and output buffers must be different");this._transform4($,T,1)}realTransform($,T){if($===T)throw new Error("Input and output buffers must be different");this._realTransform4($,T,1)}inverseTransform($,T){if($===T)throw new Error("Input and output buffers must be different");this._transform4($,T,-1);for(let x=0;x<$.length;++x)$[x]/=this.size}_transform4($,T,x){const E=this._csize;let U=1<<this._width,de=E/U<<1,oe,Z;const he=this._bitrev;if(de===4)for(oe=0,Z=0;oe<E;oe+=de,++Z){const Me=he[Z];this._singleTransform2(T,$,oe,Me,U)}else for(oe=0,Z=0;oe<E;oe+=de,++Z){const Me=he[Z];this._singleTransform4(T,$,oe,Me,U,x)}const ie=this.table;for(U>>=2;U>=2;U>>=2){de=E/U<<1;const Me=de>>>2;for(oe=0;oe<E;oe+=de){const be=oe+Me-1;for(let fe=oe,Re=0;fe<be;fe+=2,Re+=U){const ke=fe,le=ke+Me,W=le+Me,ne=W+Me,_e=$[ke],xe=$[ke+1],We=$[le],Ge=$[le+1],He=$[W],pt=$[W+1],ze=$[ne],J=$[ne+1],j=ie[Re],ve=x*ie[Re+1],Fe=We*j-Ge*ve,Oe=We*ve+Ge*j,je=ie[2*Re],Ee=x*ie[2*Re+1],Ne=He*je-pt*Ee,$e=He*Ee+pt*je,Ue=ie[3*Re],Ke=x*ie[3*Re+1],nt=ze*Ue-J*Ke,De=ze*Ke+J*Ue,Mt=_e+Ne,et=xe+$e,at=_e-Ne,dt=xe-$e,lt=Fe+nt,ct=Oe+De,ft=x*(Fe-nt),Vt=x*(Oe-De);$[ke]=Mt+lt,$[ke+1]=et+ct,$[le]=at+Vt,$[le+1]=dt-ft,$[W]=Mt-lt,$[W+1]=et-ct,$[ne]=at-Vt,$[ne+1]=dt+ft}}}}_singleTransform2($,T,x,E,Y){const U=$[E],de=$[E+1],oe=$[E+Y],Z=$[E+Y+1];T[x]=U+oe,T[x+1]=de+Z,T[x+2]=U-oe,T[x+3]=de-Z}_singleTransform4($,T,x,E,Y,U){const de=Y*2,oe=Y*3,Z=$[E],he=$[E+1],ie=$[E+Y],Me=$[E+Y+1],be=$[E+de],fe=$[E+de+1],Re=$[E+oe],ke=$[E+oe+1],le=Z+be,W=he+fe,ne=Z-be,_e=he-fe,xe=ie+Re,We=Me+ke,Ge=U*(ie-Re),He=U*(Me-ke);T[x]=le+xe,T[x+1]=W+We,T[x+2]=ne+He,T[x+3]=_e-Ge,T[x+4]=le-xe,T[x+5]=W-We,T[x+6]=ne-He,T[x+7]=_e+Ge}_realTransform4($,T,x){const E=this._csize;let U=1<<this._width,de=E/U<<1,oe,Z;const he=this._bitrev;if(de===4)for(oe=0,Z=0;oe<E;oe+=de,++Z){const be=he[Z];this._singleRealTransform2(T,$,oe,be>>>1,U>>>1)}else for(oe=0,Z=0;oe<E;oe+=de,++Z){const be=he[Z];this._singleRealTransform4(T,$,oe,be>>>1,U>>>1,x)}const ie=this.table;for(U>>=2;U>=2;U>>=2){de=E/U<<1;const be=de>>>1,fe=be>>>1,Re=fe>>>1;for(oe=0;oe<E;oe+=de)for(let ke=0,le=0;ke<=Re;ke+=2,le+=U){const W=oe+ke,ne=W+fe,_e=ne+fe,xe=_e+fe,We=$[W],Ge=$[W+1],He=$[ne],pt=$[ne+1],ze=$[_e],J=$[_e+1],j=$[xe],ve=$[xe+1],Fe=We,Oe=Ge,je=ie[le],Ee=x*ie[le+1],Ne=He*je-pt*Ee,$e=He*Ee+pt*je,Ue=ie[2*le],Ke=x*ie[2*le+1],nt=ze*Ue-J*Ke,De=ze*Ke+J*Ue,Mt=ie[3*le],et=x*ie[3*le+1],at=j*Mt-ve*et,dt=j*et+ve*Mt,lt=Fe+nt,ct=Oe+De,ft=Fe-nt,Vt=Oe-De,Ut=Ne+at,At=$e+dt,ws=x*(Ne-at),Zt=x*($e-dt);if($[W]=lt+Ut,$[W+1]=ct+At,$[ne]=ft+Zt,$[ne+1]=Vt-ws,ke===0){$[_e]=lt-Ut,$[_e+1]=ct-At;continue}if(ke===Re)continue;const Ss=oe+fe-ke,Es=oe+be-ke;$[Ss]=ft-x*Zt,$[Ss+1]=-Vt-x*ws,$[Es]=lt-x*Ut,$[Es+1]=-ct+x*At}}const Me=E>>>1;for(let be=2;be<Me;be+=2)$[E-be]=$[be],$[E-be+1]=-$[be+1]}_singleRealTransform2($,T,x,E,Y){const U=$[E],de=$[E+Y];T[x]=U+de,T[x+1]=0,T[x+2]=U-de,T[x+3]=0}_singleRealTransform4($,T,x,E,Y,U){const de=Y*2,oe=Y*3,Z=$[E],he=$[E+Y],ie=$[E+de],Me=$[E+oe],be=Z+ie,fe=Z-ie,Re=he+Me,ke=U*(he-Me);T[x]=be+Re,T[x+1]=0,T[x+2]=fe,T[x+3]=-ke,T[x+4]=be-Re,T[x+5]=0,T[x+6]=fe,T[x+7]=ke}}class O{constructor($){const T=2*($-1),x=2*(2*$-1),E=2**Math.ceil(Math.log2(x));this.bufferSize=E,this._a=T;const Y=new Float64Array(x),U=new Float64Array(E);this._chirpBuffer=new Float64Array(E),this._buffer1=new Float64Array(E),this._buffer2=new Float64Array(E),this._outBuffer1=new Float64Array(E),this._outBuffer2=new Float64Array(E);const de=-2*Math.PI/$,oe=Math.cos(de),Z=Math.sin(de);for(let he=0;he<x>>1;++he){const ie=(he+1-$)**2/2,Me=Math.sqrt(oe**2+Z**2)**ie,be=ie*Math.atan2(Z,oe),fe=2*he;Y[fe]=Me*Math.cos(be),Y[fe+1]=Me*Math.sin(be),U[fe]=Y[fe],U[fe+1]=-Y[fe+1]}this._slicedChirpBuffer=Y.subarray(T,x),this._f=new V(E>>1),this._f.transform(this._chirpBuffer,U)}_transform($,T,x){const E=this._buffer1,Y=this._buffer2,U=this._outBuffer1,de=this._outBuffer2,oe=this._chirpBuffer,Z=this._slicedChirpBuffer,he=this._a;if(x)for(let ie=0;ie<Z.length;ie+=2){const Me=ie+1,be=ie>>1,fe=T[be];E[ie]=fe*Z[ie],E[Me]=fe*Z[Me]}else for(let ie=0;ie<Z.length;ie+=2){const Me=ie+1;E[ie]=T[ie]*Z[ie]-T[Me]*Z[Me],E[Me]=T[ie]*Z[Me]+T[Me]*Z[ie]}this._f.transform(U,E);for(let ie=0;ie<oe.length;ie+=2){const Me=ie+1;Y[ie]=U[ie]*oe[ie]-U[Me]*oe[Me],Y[Me]=U[ie]*oe[Me]+U[Me]*oe[ie]}this._f.inverseTransform(de,Y);for(let ie=0;ie<de.length;ie+=2){const Me=de[ie+he],be=de[ie+he+1],fe=Z[ie],Re=Z[ie+1];$[ie]=Me*fe-be*Re,$[ie+1]=Me*Re+be*fe}}transform($,T){this._transform($,T,!1)}realTransform($,T){this._transform($,T,!0)}}class K{constructor($){this.fft_length=$,this.isPowerOfTwo=h($),this.isPowerOfTwo?(this.fft=new V($),this.outputBufferSize=2*$):(this.fft=new O($),this.outputBufferSize=this.fft.bufferSize)}realTransform($,T){this.fft.realTransform($,T)}transform($,T){this.fft.transform($,T)}}function me(L,$){if($%2===0||$<=0)throw new Error("Window size must be a positive odd number");const T=new L.constructor(L.length),x=new L.constructor($),E=Math.floor($/2);for(let Y=0;Y<L.length;++Y){let U=0;for(let de=-E;de<=E;++de){let oe=Y+de;oe<0?oe=Math.abs(oe):oe>=L.length&&(oe=2*(L.length-1)-oe),x[U++]=L[oe]}x.sort(),T[Y]=x[E]}return T}function R(L,$){const T=Math.pow(10,$);return Math.round(L*T)/T}function G(L){const $=Math.round(L);return Math.abs(L)%1===.5?$%2===0?$:$-1:$}function X(L){const $=L.length,T=L[0].length,x=[$+1,T+1],E=Array.from({length:x[0]},()=>Array(x[1]).fill(1/0));E[0][0]=0;const Y=Array.from({length:x[0]},()=>Array(x[1]).fill(-1));for(let he=1;he<x[1];++he)for(let ie=1;ie<x[0];++ie){const Me=E[ie-1][he-1],be=E[ie-1][he],fe=E[ie][he-1];let Re,ke;Me<be&&Me<fe?(Re=Me,ke=0):be<Me&&be<fe?(Re=be,ke=1):(Re=fe,ke=2),E[ie][he]=L[ie-1][he-1]+Re,Y[ie][he]=ke}for(let he=0;he<x[1];++he)Y[0][he]=2;for(let he=0;he<x[0];++he)Y[he][0]=1;let U=$,de=T,oe=[],Z=[];for(;U>0||de>0;)switch(oe.push(U-1),Z.push(de-1),Y[U][de]){case 0:--U,--de;break;case 1:--U;break;case 2:--de;break;default:throw new Error(`Internal error in dynamic time warping. Unexpected trace[${U}, ${de}]. Please file a bug report.`)}return oe.reverse(),Z.reverse(),[oe,Z]}},"./src/utils/tensor.js":(re,m,n)=>{n.r(m),n.d(m,{DataTypeMap:()=>q,Tensor:()=>S,cat:()=>T,full:()=>Z,full_like:()=>he,interpolate:()=>D,interpolate_4d:()=>y,layer_norm:()=>G,matmul:()=>h,mean:()=>U,mean_pooling:()=>R,ones:()=>ie,ones_like:()=>Me,permute:()=>I,quantize_embeddings:()=>ke,rand:()=>Re,rfft:()=>V,slice:()=>me,stack:()=>x,std_mean:()=>Y,topk:()=>O,zeros:()=>be,zeros_like:()=>fe});var _=n("./src/utils/maths.js"),b=n("./src/backends/onnx.js"),F=n("./src/ops/registry.js");const q=Object.freeze({float32:Float32Array,float16:typeof Float16Array<"u"?Float16Array:Uint16Array,float64:Float64Array,string:Array,int8:Int8Array,uint8:Uint8Array,int16:Int16Array,uint16:Uint16Array,int32:Int32Array,uint32:Uint32Array,int64:BigInt64Array,uint64:BigUint64Array,bool:Uint8Array,uint4:Uint8Array,int4:Int8Array});class S{get dims(){return this.ort_tensor.dims}set dims(W){this.ort_tensor.dims=W}get type(){return this.ort_tensor.type}get data(){return this.ort_tensor.data}get size(){return this.ort_tensor.size}get location(){return this.ort_tensor.location}ort_tensor;constructor(...W){return(0,b.isONNXTensor)(W[0])?this.ort_tensor=W[0]:this.ort_tensor=new b.Tensor(W[0],W[1],W[2]),new Proxy(this,{get:(ne,_e)=>{if(typeof _e=="string"){let xe=Number(_e);if(Number.isInteger(xe))return ne._getitem(xe)}return ne[_e]},set:(ne,_e,xe)=>ne[_e]=xe})}dispose(){this.ort_tensor.dispose()}*[Symbol.iterator](){const[W,...ne]=this.dims;if(ne.length>0){const _e=ne.reduce((xe,We)=>xe*We);for(let xe=0;xe<W;++xe)yield this._subarray(xe,_e,ne)}else yield*this.data}_getitem(W){const[ne,..._e]=this.dims;if(W=$(W,ne),_e.length>0){const xe=_e.reduce((We,Ge)=>We*Ge);return this._subarray(W,xe,_e)}else return new S(this.type,[this.data[W]],_e)}indexOf(W){const ne=this.data;for(let _e=0;_e<ne.length;++_e)if(ne[_e]==W)return _e;return-1}_subarray(W,ne,_e){const xe=W*ne,We=(W+1)*ne,Ge="subarray"in this.data?this.data.subarray(xe,We):this.data.slice(xe,We);return new S(this.type,Ge,_e)}item(){const W=this.data;if(W.length!==1)throw new Error(`a Tensor with ${W.length} elements cannot be converted to Scalar`);return W[0]}tolist(){return f(this.data,this.dims)}sigmoid(){return this.clone().sigmoid_()}sigmoid_(){const W=this.data;for(let ne=0;ne<W.length;++ne)W[ne]=1/(1+Math.exp(-W[ne]));return this}map(W){return this.clone().map_(W)}map_(W){const ne=this.data;for(let _e=0;_e<ne.length;++_e)ne[_e]=W(ne[_e],_e,ne);return this}mul(W){return this.clone().mul_(W)}mul_(W){const ne=this.data;for(let _e=0;_e<ne.length;++_e)ne[_e]*=W;return this}div(W){return this.clone().div_(W)}div_(W){const ne=this.data;for(let _e=0;_e<ne.length;++_e)ne[_e]/=W;return this}add(W){return this.clone().add_(W)}add_(W){const ne=this.data;for(let _e=0;_e<ne.length;++_e)ne[_e]+=W;return this}sub(W){return this.clone().sub_(W)}sub_(W){const ne=this.data;for(let _e=0;_e<ne.length;++_e)ne[_e]-=W;return this}clone(){return new S(this.type,this.data.slice(),this.dims.slice())}slice(...W){const ne=[],_e=[];for(let J=0;J<this.dims.length;++J){let j=W[J];if(j==null)_e.push([0,this.dims[J]]),ne.push(this.dims[J]);else if(typeof j=="number")j=$(j,this.dims[J],J),_e.push([j,j+1]);else if(Array.isArray(j)&&j.length===2){let[ve,Fe]=j;if(ve=ve===null?0:$(ve,this.dims[J],J,!1),Fe=Fe===null?this.dims[J]:$(Fe,this.dims[J],J,!1),ve>Fe)throw new Error(`Invalid slice: ${j}`);const Oe=[Math.max(ve,0),Math.min(Fe,this.dims[J])];_e.push(Oe),ne.push(Oe[1]-Oe[0])}else throw new Error(`Invalid slice: ${j}`)}const xe=_e.map(([J,j])=>j-J),We=xe.reduce((J,j)=>J*j),Ge=this.data,He=new Ge.constructor(We),pt=this.stride();let ze=!0;for(let J=1;J<xe.length;++J)if(_e[J][0]!==0||_e[J][1]!==this.dims[J]){ze=!1;break}if(ze){const J=_e[0][0]*pt[0],j=_e[0][1]*pt[0];if(ArrayBuffer.isView(Ge))He.set(Ge.subarray(J,j));else if(Array.isArray(Ge)){const ve=Ge.slice(J,j);for(let Fe=0;Fe<ve.length;++Fe)He[Fe]=ve[Fe]}else throw new Error("Unsupported data type for slicing")}else for(let J=0;J<We;++J){let j=0;for(let ve=xe.length-1,Fe=J;ve>=0;--ve){const Oe=xe[ve];j+=(Fe%Oe+_e[ve][0])*pt[ve],Fe=Math.floor(Fe/Oe)}He[J]=Ge[j]}return new S(this.type,He,ne)}permute(...W){return I(this,W)}transpose(...W){return this.permute(...W)}sum(W=null,ne=!1){return this.norm(1,W,ne)}norm(W="fro",ne=null,_e=!1){if(W==="fro")W=2;else if(typeof W=="string")throw Error(`Unsupported norm: ${W}`);const xe=this.data,We=(ze,J)=>ze+J**W;if(ne===null){const ze=xe.reduce(We,0)**(1/W);return new S(this.type,[ze],[])}const[Ge,He,pt]=E(We,this,ne,_e);if(W!==1)for(let ze=0;ze<He.length;++ze)He[ze]=He[ze]**(1/W);return new S(Ge,He,pt)}normalize_(W=2,ne=1){ne=$(ne,this.dims.length);const _e=this.norm(W,ne,!0),xe=this.data,We=_e.data;for(let Ge=0;Ge<xe.length;++Ge){let He=0;for(let pt=this.dims.length-1,ze=Ge,J=1;pt>=0;--pt){const j=this.dims[pt];if(pt!==ne){const ve=ze%j;He+=ve*J,J*=this.dims[pt]}ze=Math.floor(ze/j)}xe[Ge]/=We[He]}return this}normalize(W=2,ne=1){return this.clone().normalize_(W,ne)}stride(){return de(this.dims)}squeeze(W=null){return new S(this.type,this.data,X(this.dims,W))}squeeze_(W=null){return this.dims=X(this.dims,W),this}unsqueeze(W=null){return new S(this.type,this.data,L(this.dims,W))}unsqueeze_(W=null){return this.dims=L(this.dims,W),this}flatten_(W=0,ne=-1){ne=(ne+this.dims.length)%this.dims.length;let _e=this.dims.slice(0,W),xe=this.dims.slice(W,ne+1),We=this.dims.slice(ne+1);return this.dims=[..._e,xe.reduce((Ge,He)=>Ge*He,1),...We],this}flatten(W=0,ne=-1){return this.clone().flatten_(W,ne)}view(...W){let ne=-1;for(let xe=0;xe<W.length;++xe)if(W[xe]===-1){if(ne!==-1)throw new Error("Only one dimension can be inferred");ne=xe}const _e=this.data;if(ne!==-1){const xe=W.reduce((We,Ge,He)=>He!==ne?We*Ge:We,1);W[ne]=_e.length/xe}return new S(this.type,_e,W)}neg_(){const W=this.data;for(let ne=0;ne<W.length;++ne)W[ne]=-W[ne];return this}neg(){return this.clone().neg_()}gt(W){const ne=new Uint8Array(this.data.length),_e=this.data;for(let xe=0;xe<_e.length;++xe)ne[xe]=_e[xe]>W?1:0;return new S("bool",ne,this.dims)}lt(W){const ne=new Uint8Array(this.data.length),_e=this.data;for(let xe=0;xe<_e.length;++xe)ne[xe]=_e[xe]<W?1:0;return new S("bool",ne,this.dims)}clamp_(W,ne){const _e=this.data;for(let xe=0;xe<_e.length;++xe)_e[xe]=Math.min(Math.max(_e[xe],W),ne);return this}clamp(W,ne){return this.clone().clamp_(W,ne)}round_(){const W=this.data;for(let ne=0;ne<W.length;++ne)W[ne]=Math.round(W[ne]);return this}round(){return this.clone().round_()}mean(W=null,ne=!1){return U(this,W,ne)}min(W=null,ne=!1){if(W===null){const Ge=(0,_.min)(this.data)[0];return new S(this.type,[Ge],[])}const[_e,xe,We]=E((Ge,He)=>Math.min(Ge,He),this,W,ne,1/0);return new S(_e,xe,We)}max(W=null,ne=!1){if(W===null){const Ge=(0,_.max)(this.data)[0];return new S(this.type,[Ge],[])}const[_e,xe,We]=E((Ge,He)=>Math.max(Ge,He),this,W,ne,-1/0);return new S(_e,xe,We)}argmin(W=null,ne=!1){if(W!==null)throw new Error("`dim !== null` not yet implemented.");const _e=(0,_.min)(this.data)[1];return new S("int64",[BigInt(_e)],[])}argmax(W=null,ne=!1){if(W!==null)throw new Error("`dim !== null` not yet implemented.");const _e=(0,_.max)(this.data)[1];return new S("int64",[BigInt(_e)],[])}to(W){if(this.type===W)return this;if(!q.hasOwnProperty(W))throw new Error(`Unsupported type: ${W}`);let ne;const _e=["int64","uint64"].includes(this.type),xe=["int64","uint64"].includes(W);return _e&&!xe?ne=Number:!_e&&xe&&(ne=BigInt),new S(W,q[W].from(this.data,ne),this.dims)}}function f(le,W){const ne=le.length,_e=W.reduce((We,Ge)=>We*Ge);if(ne!==_e)throw Error(`cannot reshape array of size ${ne} into shape (${W})`);let xe=le;for(let We=W.length-1;We>=0;We--)xe=xe.reduce((Ge,He)=>{let pt=Ge[Ge.length-1];return pt.length<W[We]?pt.push(He):Ge.push([He]),Ge},[[]]);return xe[0]}function I(le,W){const[ne,_e]=(0,_.permute_data)(le.data,le.dims,W);return new S(le.type,ne,_e)}function D(le,[W,ne],_e="bilinear",xe=!1){const We=le.dims.at(-3)??1,Ge=le.dims.at(-2),He=le.dims.at(-1);let pt=(0,_.interpolate_data)(le.data,[We,Ge,He],[W,ne],_e,xe);return new S(le.type,pt,[We,W,ne])}async function y(le,{size:W=null,mode:ne="bilinear"}={}){if(le.dims.length!==4)throw new Error("`interpolate_4d` currently only supports 4D input.");if(!W)throw new Error("`interpolate_4d` requires a `size` argument.");let _e;if(W.length===2)_e=[...le.dims.slice(0,2),...W];else if(W.length===3)_e=[le.dims[0],...W];else if(W.length===4)_e=W;else throw new Error("`size` must be of length 2, 3, or 4.");let xe;if(ne==="nearest")xe=await F.TensorOpRegistry.nearest_interpolate_4d;else if(ne==="bilinear")xe=await F.TensorOpRegistry.bilinear_interpolate_4d;else if(ne==="bicubic")xe=await F.TensorOpRegistry.bicubic_interpolate_4d;else throw new Error(`Unsupported mode: ${ne}`);const We=new S("int64",new BigInt64Array(_e.map(BigInt)),[_e.length]);return await xe({x:le,s:We})}async function h(le,W){return await(await F.TensorOpRegistry.matmul)({a:le,b:W})}async function V(le,W){return await(await F.TensorOpRegistry.rfft)({x:le,a:W})}async function O(le,W){const ne=await F.TensorOpRegistry.top_k;return W==null?W=le.dims.at(-1):W=Math.min(W,le.dims.at(-1)),await ne({x:le,k:new S("int64",[BigInt(W)],[1])})}const K=le=>new S("int64",le,[le.length]);async function me(le,W,ne,_e,xe){return await(await F.TensorOpRegistry.slice)({x:le,s:K(W),e:K(ne),a:K(_e),t:K(xe??new Array(_e.length).fill(1))})}function R(le,W){const ne=le.data,_e=W.data,xe=[le.dims[0],le.dims[2]],We=new ne.constructor(xe[0]*xe[1]),[Ge,He,pt]=le.dims;let ze=0;for(let J=0;J<Ge;++J){const j=J*pt*He;for(let ve=0;ve<pt;++ve){let Fe=0,Oe=0;const je=J*He,Ee=j+ve;for(let $e=0;$e<He;++$e){const Ue=Number(_e[je+$e]);Oe+=Ue,Fe+=ne[Ee+$e*pt]*Ue}const Ne=Fe/Oe;We[ze++]=Ne}}return new S(le.type,We,xe)}function G(le,W,{eps:ne=1e-5}={}){if(le.dims.length!==2)throw new Error("`layer_norm` currently only supports 2D input.");const[_e,xe]=le.dims;if(W.length!==1&&W[0]!==xe)throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");const[We,Ge]=Y(le,1,0,!0),He=We.data,pt=Ge.data,ze=le.data,J=new ze.constructor(ze.length);for(let j=0;j<_e;++j){const ve=j*xe;for(let Fe=0;Fe<xe;++Fe){const Oe=ve+Fe;J[Oe]=(ze[Oe]-pt[j])/(He[j]+ne)}}return new S(le.type,J,le.dims)}function X(le,W){return le=le.slice(),W===null?le=le.filter(ne=>ne!==1):typeof W=="number"?le[W]===1&&le.splice(W,1):Array.isArray(W)&&(le=le.filter((ne,_e)=>ne!==1||!W.includes(_e))),le}function L(le,W){return W=$(W,le.length+1),le=le.slice(),le.splice(W,0,1),le}function $(le,W,ne=null,_e=!0){if(le<-W||le>=W){if(_e)throw new Error(`IndexError: index ${le} is out of bounds for dimension${ne===null?"":" "+ne} with size ${W}`);return le<-W?0:W}return le<0&&(le=(le%W+W)%W),le}function T(le,W=0){W=$(W,le[0].dims.length);const ne=le[0].dims.slice();ne[W]=le.reduce((Ge,He)=>Ge+He.dims[W],0);const _e=ne.reduce((Ge,He)=>Ge*He,1),xe=new le[0].data.constructor(_e),We=le[0].type;if(W===0){let Ge=0;for(const He of le){const pt=He.data;xe.set(pt,Ge),Ge+=pt.length}}else{let Ge=0;for(let He=0;He<le.length;++He){const{data:pt,dims:ze}=le[He];for(let J=0;J<pt.length;++J){let j=0;for(let ve=ze.length-1,Fe=J,Oe=1;ve>=0;--ve){const je=ze[ve];let Ee=Fe%je;ve===W&&(Ee+=Ge),j+=Ee*Oe,Oe*=ne[ve],Fe=Math.floor(Fe/je)}xe[j]=pt[J]}Ge+=ze[W]}}return new S(We,xe,ne)}function x(le,W=0){return T(le.map(ne=>ne.unsqueeze(W)),W)}function E(le,W,ne=null,_e=!1,xe=null){const We=W.data,Ge=W.dims;ne=$(ne,Ge.length);const He=Ge.slice();He[ne]=1;const pt=new We.constructor(We.length/Ge[ne]);xe!==null&&pt.fill(xe);for(let ze=0;ze<We.length;++ze){let J=0;for(let j=Ge.length-1,ve=ze,Fe=1;j>=0;--j){const Oe=Ge[j];if(j!==ne){const je=ve%Oe;J+=je*Fe,Fe*=He[j]}ve=Math.floor(ve/Oe)}pt[J]=le(pt[J],We[ze],ze,J)}return _e||He.splice(ne,1),[W.type,pt,He]}function Y(le,W=null,ne=1,_e=!1){const xe=le.data,We=le.dims;if(W===null){const Fe=xe.reduce((Ne,$e)=>Ne+$e,0)/xe.length,Oe=Math.sqrt(xe.reduce((Ne,$e)=>Ne+($e-Fe)**2,0)/(xe.length-ne)),je=new S(le.type,[Fe],[]);return[new S(le.type,[Oe],[]),je]}W=$(W,We.length);const Ge=U(le,W,_e),He=Ge.data,[pt,ze,J]=E((ve,Fe,Oe,je)=>ve+(Fe-He[je])**2,le,W,_e);for(let ve=0;ve<ze.length;++ve)ze[ve]=Math.sqrt(ze[ve]/(We[W]-ne));return[new S(pt,ze,J),Ge]}function U(le,W=null,ne=!1){const _e=le.dims,xe=le.data;if(W===null){const pt=xe.reduce((ze,J)=>ze+J,0);return new S(le.type,[pt/xe.length],[])}W=$(W,_e.length);const[We,Ge,He]=E((pt,ze)=>pt+ze,le,W,ne);if(_e[W]!==1)for(let pt=0;pt<Ge.length;++pt)Ge[pt]/=_e[W];return new S(We,Ge,He)}function de(le){const W=new Array(le.length);for(let ne=le.length-1,_e=1;ne>=0;--ne)W[ne]=_e,_e*=le[ne];return W}function oe(le,W,ne,_e){const xe=le.reduce((We,Ge)=>We*Ge,1);return new S(ne,new _e(xe).fill(W),le)}function Z(le,W){let ne,_e;if(typeof W=="number")ne="float32",_e=Float32Array;else if(typeof W=="bigint")ne="int64",_e=BigInt64Array;else if(typeof W=="boolean")ne="bool",_e=Uint8Array;else throw new Error(`Unsupported data type: ${typeof W}`);return oe(le,W,ne,_e)}function he(le,W){return Z(le.dims,W)}function ie(le){return oe(le,1n,"int64",BigInt64Array)}function Me(le){return ie(le.dims)}function be(le){return oe(le,0n,"int64",BigInt64Array)}function fe(le){return be(le.dims)}function Re(le){const W=le.reduce((ne,_e)=>ne*_e,1);return new S("float32",Float32Array.from({length:W},()=>Math.random()),le)}function ke(le,W){if(le.dims.length!==2)throw new Error("The tensor must have 2 dimensions");if(le.dims.at(-1)%8!==0)throw new Error("The last dimension of the tensor must be a multiple of 8");if(!["binary","ubinary"].includes(W))throw new Error("The precision must be either 'binary' or 'ubinary'");const ne=W==="binary",_e=ne?"int8":"uint8",xe=ne?Int8Array:Uint8Array,We=le.data,Ge=new xe(We.length/8);for(let He=0;He<We.length;++He){const pt=We[He]>0?1:0,ze=Math.floor(He/8),J=He%8;Ge[ze]|=pt<<7-J,ne&&J===0&&(Ge[ze]-=128)}return new S(_e,Ge,[le.dims[0],le.dims[1]/8])}},"./src/utils/video.js":(re,m,n)=>{n.r(m),n.d(m,{RawVideo:()=>q,RawVideoFrame:()=>F,load_video:()=>S});var _=n("./src/utils/image.js"),b=n("./src/env.js");class F{constructor(I,D){this.image=I,this.timestamp=D}}class q{constructor(I,D){I.length>0&&I[0]instanceof _.RawImage&&(I=I.map((y,h)=>new F(y,(h+1)/(I.length+1)*D))),this.frames=I,this.duration=D}get width(){return this.frames[0].image.width}get height(){return this.frames[0].image.height}get fps(){return this.frames.length/this.duration}}async function S(f,{num_frames:I=null,fps:D=null}={}){if(!b.apis.IS_BROWSER_ENV)throw new Error("`load_video` is currently only supported in browser environments.");if(I==null&&D==null)throw new Error("Either num_frames or fps must be provided.");const y=[],h=document.createElement("video");if(h.crossOrigin="anonymous",h.muted=!0,typeof f=="string")h.src=f;else if(f instanceof Blob)h.src=URL.createObjectURL(f);else if(f instanceof HTMLVideoElement)h.src=f.src;else throw new Error("Invalid URL or video element provided.");if(await new Promise(X=>h.onloadedmetadata=X),h.seekable.start(0)===h.seekable.end(0)){const L=await(await fetch(h.src)).blob();h.src=URL.createObjectURL(L),await new Promise($=>h.onloadedmetadata=$)}const V=h.duration;let O,K;I!=null?(O=I,K=I===1?0:V/(I-1)):(K=1/D,O=Math.floor(V/K));let me=[];for(let X=0;X<O;++X)me.push(I===1?V/2:X*K);const R=document.createElement("canvas");R.width=h.videoWidth,R.height=h.videoHeight;const G=R.getContext("2d",{willReadFrequently:!0});for(const X of me){h.currentTime=X,await new Promise(x=>{h.onseeked=x}),G.drawImage(h,0,0,R.width,R.height);const L=G.getImageData(0,0,R.width,R.height),$=new _.RawImage(L.data,R.width,R.height,4),T=new F($,X);y.push(T)}return h.remove(),new q(y,V)}}},Np={};function Ht(re){var m=Np[re];if(m!==void 0)return m.exports;var n=Np[re]={exports:{}};return ph[re](n,n.exports,Ht),n.exports}(()=>{var re=Object.getPrototypeOf?n=>Object.getPrototypeOf(n):n=>n.__proto__,m;Ht.t=function(n,_){if(_&1&&(n=this(n)),_&8||typeof n=="object"&&n&&(_&4&&n.__esModule||_&16&&typeof n.then=="function"))return n;var b=Object.create(null);Ht.r(b);var F={};m=m||[null,re({}),re([]),re(re)];for(var q=_&2&&n;typeof q=="object"&&!~m.indexOf(q);q=re(q))Object.getOwnPropertyNames(q).forEach(S=>F[S]=()=>n[S]);return F.default=()=>n,Ht.d(b,F),b}})(),Ht.d=(re,m)=>{for(var n in m)Ht.o(m,n)&&!Ht.o(re,n)&&Object.defineProperty(re,n,{enumerable:!0,get:m[n]})},Ht.o=(re,m)=>Object.prototype.hasOwnProperty.call(re,m),Ht.r=re=>{typeof Symbol<"u"&&Symbol.toStringTag&&Object.defineProperty(re,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(re,"__esModule",{value:!0})};var c={};(()=>{/*!*****************************!*\
  !*** ./src/transformers.js ***!
  \*****************************/Ht.r(c),Ht.d(c,{ASTFeatureExtractor:()=>y.ASTFeatureExtractor,ASTForAudioClassification:()=>n.ASTForAudioClassification,ASTModel:()=>n.ASTModel,ASTPreTrainedModel:()=>n.ASTPreTrainedModel,AlbertForMaskedLM:()=>n.AlbertForMaskedLM,AlbertForQuestionAnswering:()=>n.AlbertForQuestionAnswering,AlbertForSequenceClassification:()=>n.AlbertForSequenceClassification,AlbertModel:()=>n.AlbertModel,AlbertPreTrainedModel:()=>n.AlbertPreTrainedModel,AlbertTokenizer:()=>_.AlbertTokenizer,ArceeForCausalLM:()=>n.ArceeForCausalLM,ArceeModel:()=>n.ArceeModel,ArceePreTrainedModel:()=>n.ArceePreTrainedModel,AudioClassificationPipeline:()=>m.AudioClassificationPipeline,AutoConfig:()=>b.AutoConfig,AutoFeatureExtractor:()=>h.AutoFeatureExtractor,AutoImageProcessor:()=>K.AutoImageProcessor,AutoModel:()=>n.AutoModel,AutoModelForAudioClassification:()=>n.AutoModelForAudioClassification,AutoModelForAudioFrameClassification:()=>n.AutoModelForAudioFrameClassification,AutoModelForAudioTextToText:()=>n.AutoModelForAudioTextToText,AutoModelForCTC:()=>n.AutoModelForCTC,AutoModelForCausalLM:()=>n.AutoModelForCausalLM,AutoModelForDepthEstimation:()=>n.AutoModelForDepthEstimation,AutoModelForDocumentQuestionAnswering:()=>n.AutoModelForDocumentQuestionAnswering,AutoModelForImageClassification:()=>n.AutoModelForImageClassification,AutoModelForImageFeatureExtraction:()=>n.AutoModelForImageFeatureExtraction,AutoModelForImageMatting:()=>n.AutoModelForImageMatting,AutoModelForImageSegmentation:()=>n.AutoModelForImageSegmentation,AutoModelForImageTextToText:()=>n.AutoModelForImageTextToText,AutoModelForImageToImage:()=>n.AutoModelForImageToImage,AutoModelForMaskGeneration:()=>n.AutoModelForMaskGeneration,AutoModelForMaskedLM:()=>n.AutoModelForMaskedLM,AutoModelForNormalEstimation:()=>n.AutoModelForNormalEstimation,AutoModelForObjectDetection:()=>n.AutoModelForObjectDetection,AutoModelForPoseEstimation:()=>n.AutoModelForPoseEstimation,AutoModelForQuestionAnswering:()=>n.AutoModelForQuestionAnswering,AutoModelForSemanticSegmentation:()=>n.AutoModelForSemanticSegmentation,AutoModelForSeq2SeqLM:()=>n.AutoModelForSeq2SeqLM,AutoModelForSequenceClassification:()=>n.AutoModelForSequenceClassification,AutoModelForSpeechSeq2Seq:()=>n.AutoModelForSpeechSeq2Seq,AutoModelForTextToSpectrogram:()=>n.AutoModelForTextToSpectrogram,AutoModelForTextToWaveform:()=>n.AutoModelForTextToWaveform,AutoModelForTokenClassification:()=>n.AutoModelForTokenClassification,AutoModelForUniversalSegmentation:()=>n.AutoModelForUniversalSegmentation,AutoModelForVision2Seq:()=>n.AutoModelForVision2Seq,AutoModelForXVector:()=>n.AutoModelForXVector,AutoModelForZeroShotObjectDetection:()=>n.AutoModelForZeroShotObjectDetection,AutoProcessor:()=>G.AutoProcessor,AutoTokenizer:()=>_.AutoTokenizer,AutomaticSpeechRecognitionPipeline:()=>m.AutomaticSpeechRecognitionPipeline,BackgroundRemovalPipeline:()=>m.BackgroundRemovalPipeline,BartForConditionalGeneration:()=>n.BartForConditionalGeneration,BartForSequenceClassification:()=>n.BartForSequenceClassification,BartModel:()=>n.BartModel,BartPretrainedModel:()=>n.BartPretrainedModel,BartTokenizer:()=>_.BartTokenizer,BaseModelOutput:()=>n.BaseModelOutput,BaseStreamer:()=>X.BaseStreamer,BeitFeatureExtractor:()=>O.BeitFeatureExtractor,BeitForImageClassification:()=>n.BeitForImageClassification,BeitModel:()=>n.BeitModel,BeitPreTrainedModel:()=>n.BeitPreTrainedModel,BertForMaskedLM:()=>n.BertForMaskedLM,BertForQuestionAnswering:()=>n.BertForQuestionAnswering,BertForSequenceClassification:()=>n.BertForSequenceClassification,BertForTokenClassification:()=>n.BertForTokenClassification,BertModel:()=>n.BertModel,BertPreTrainedModel:()=>n.BertPreTrainedModel,BertTokenizer:()=>_.BertTokenizer,BitImageProcessor:()=>O.BitImageProcessor,BlenderbotForConditionalGeneration:()=>n.BlenderbotForConditionalGeneration,BlenderbotModel:()=>n.BlenderbotModel,BlenderbotPreTrainedModel:()=>n.BlenderbotPreTrainedModel,BlenderbotSmallForConditionalGeneration:()=>n.BlenderbotSmallForConditionalGeneration,BlenderbotSmallModel:()=>n.BlenderbotSmallModel,BlenderbotSmallPreTrainedModel:()=>n.BlenderbotSmallPreTrainedModel,BlenderbotSmallTokenizer:()=>_.BlenderbotSmallTokenizer,BlenderbotTokenizer:()=>_.BlenderbotTokenizer,BloomForCausalLM:()=>n.BloomForCausalLM,BloomModel:()=>n.BloomModel,BloomPreTrainedModel:()=>n.BloomPreTrainedModel,BloomTokenizer:()=>_.BloomTokenizer,CLIPFeatureExtractor:()=>O.CLIPFeatureExtractor,CLIPImageProcessor:()=>O.CLIPImageProcessor,CLIPModel:()=>n.CLIPModel,CLIPPreTrainedModel:()=>n.CLIPPreTrainedModel,CLIPSegForImageSegmentation:()=>n.CLIPSegForImageSegmentation,CLIPSegModel:()=>n.CLIPSegModel,CLIPSegPreTrainedModel:()=>n.CLIPSegPreTrainedModel,CLIPTextModel:()=>n.CLIPTextModel,CLIPTextModelWithProjection:()=>n.CLIPTextModelWithProjection,CLIPTokenizer:()=>_.CLIPTokenizer,CLIPVisionModel:()=>n.CLIPVisionModel,CLIPVisionModelWithProjection:()=>n.CLIPVisionModelWithProjection,CamembertForMaskedLM:()=>n.CamembertForMaskedLM,CamembertForQuestionAnswering:()=>n.CamembertForQuestionAnswering,CamembertForSequenceClassification:()=>n.CamembertForSequenceClassification,CamembertForTokenClassification:()=>n.CamembertForTokenClassification,CamembertModel:()=>n.CamembertModel,CamembertPreTrainedModel:()=>n.CamembertPreTrainedModel,CamembertTokenizer:()=>_.CamembertTokenizer,CausalLMOutput:()=>n.CausalLMOutput,CausalLMOutputWithPast:()=>n.CausalLMOutputWithPast,ChineseCLIPFeatureExtractor:()=>O.ChineseCLIPFeatureExtractor,ChineseCLIPModel:()=>n.ChineseCLIPModel,ChineseCLIPPreTrainedModel:()=>n.ChineseCLIPPreTrainedModel,ClapAudioModelWithProjection:()=>n.ClapAudioModelWithProjection,ClapFeatureExtractor:()=>y.ClapFeatureExtractor,ClapModel:()=>n.ClapModel,ClapPreTrainedModel:()=>n.ClapPreTrainedModel,ClapTextModelWithProjection:()=>n.ClapTextModelWithProjection,ClassifierFreeGuidanceLogitsProcessor:()=>$.ClassifierFreeGuidanceLogitsProcessor,CodeGenForCausalLM:()=>n.CodeGenForCausalLM,CodeGenModel:()=>n.CodeGenModel,CodeGenPreTrainedModel:()=>n.CodeGenPreTrainedModel,CodeGenTokenizer:()=>_.CodeGenTokenizer,CodeLlamaTokenizer:()=>_.CodeLlamaTokenizer,CohereForCausalLM:()=>n.CohereForCausalLM,CohereModel:()=>n.CohereModel,CoherePreTrainedModel:()=>n.CoherePreTrainedModel,CohereTokenizer:()=>_.CohereTokenizer,ConvBertForMaskedLM:()=>n.ConvBertForMaskedLM,ConvBertForQuestionAnswering:()=>n.ConvBertForQuestionAnswering,ConvBertForSequenceClassification:()=>n.ConvBertForSequenceClassification,ConvBertForTokenClassification:()=>n.ConvBertForTokenClassification,ConvBertModel:()=>n.ConvBertModel,ConvBertPreTrainedModel:()=>n.ConvBertPreTrainedModel,ConvBertTokenizer:()=>_.ConvBertTokenizer,ConvNextFeatureExtractor:()=>O.ConvNextFeatureExtractor,ConvNextForImageClassification:()=>n.ConvNextForImageClassification,ConvNextImageProcessor:()=>O.ConvNextImageProcessor,ConvNextModel:()=>n.ConvNextModel,ConvNextPreTrainedModel:()=>n.ConvNextPreTrainedModel,ConvNextV2ForImageClassification:()=>n.ConvNextV2ForImageClassification,ConvNextV2Model:()=>n.ConvNextV2Model,ConvNextV2PreTrainedModel:()=>n.ConvNextV2PreTrainedModel,DFineForObjectDetection:()=>n.DFineForObjectDetection,DFineModel:()=>n.DFineModel,DFinePreTrainedModel:()=>n.DFinePreTrainedModel,DINOv3ConvNextModel:()=>n.DINOv3ConvNextModel,DINOv3ConvNextPreTrainedModel:()=>n.DINOv3ConvNextPreTrainedModel,DINOv3ViTImageProcessor:()=>O.DINOv3ViTImageProcessor,DINOv3ViTModel:()=>n.DINOv3ViTModel,DINOv3ViTPreTrainedModel:()=>n.DINOv3ViTPreTrainedModel,DPTFeatureExtractor:()=>O.DPTFeatureExtractor,DPTForDepthEstimation:()=>n.DPTForDepthEstimation,DPTImageProcessor:()=>O.DPTImageProcessor,DPTModel:()=>n.DPTModel,DPTPreTrainedModel:()=>n.DPTPreTrainedModel,DacDecoderModel:()=>n.DacDecoderModel,DacDecoderOutput:()=>n.DacDecoderOutput,DacEncoderModel:()=>n.DacEncoderModel,DacEncoderOutput:()=>n.DacEncoderOutput,DacFeatureExtractor:()=>y.DacFeatureExtractor,DacModel:()=>n.DacModel,DacPreTrainedModel:()=>n.DacPreTrainedModel,DataTypeMap:()=>f.DataTypeMap,DebertaForMaskedLM:()=>n.DebertaForMaskedLM,DebertaForQuestionAnswering:()=>n.DebertaForQuestionAnswering,DebertaForSequenceClassification:()=>n.DebertaForSequenceClassification,DebertaForTokenClassification:()=>n.DebertaForTokenClassification,DebertaModel:()=>n.DebertaModel,DebertaPreTrainedModel:()=>n.DebertaPreTrainedModel,DebertaTokenizer:()=>_.DebertaTokenizer,DebertaV2ForMaskedLM:()=>n.DebertaV2ForMaskedLM,DebertaV2ForQuestionAnswering:()=>n.DebertaV2ForQuestionAnswering,DebertaV2ForSequenceClassification:()=>n.DebertaV2ForSequenceClassification,DebertaV2ForTokenClassification:()=>n.DebertaV2ForTokenClassification,DebertaV2Model:()=>n.DebertaV2Model,DebertaV2PreTrainedModel:()=>n.DebertaV2PreTrainedModel,DebertaV2Tokenizer:()=>_.DebertaV2Tokenizer,DecisionTransformerModel:()=>n.DecisionTransformerModel,DecisionTransformerPreTrainedModel:()=>n.DecisionTransformerPreTrainedModel,DeiTFeatureExtractor:()=>O.DeiTFeatureExtractor,DeiTForImageClassification:()=>n.DeiTForImageClassification,DeiTImageProcessor:()=>O.DeiTImageProcessor,DeiTModel:()=>n.DeiTModel,DeiTPreTrainedModel:()=>n.DeiTPreTrainedModel,DepthAnythingForDepthEstimation:()=>n.DepthAnythingForDepthEstimation,DepthAnythingPreTrainedModel:()=>n.DepthAnythingPreTrainedModel,DepthEstimationPipeline:()=>m.DepthEstimationPipeline,DepthProForDepthEstimation:()=>n.DepthProForDepthEstimation,DepthProPreTrainedModel:()=>n.DepthProPreTrainedModel,DetrFeatureExtractor:()=>O.DetrFeatureExtractor,DetrForObjectDetection:()=>n.DetrForObjectDetection,DetrForSegmentation:()=>n.DetrForSegmentation,DetrImageProcessor:()=>O.DetrImageProcessor,DetrModel:()=>n.DetrModel,DetrObjectDetectionOutput:()=>n.DetrObjectDetectionOutput,DetrPreTrainedModel:()=>n.DetrPreTrainedModel,DetrSegmentationOutput:()=>n.DetrSegmentationOutput,Dinov2ForImageClassification:()=>n.Dinov2ForImageClassification,Dinov2Model:()=>n.Dinov2Model,Dinov2PreTrainedModel:()=>n.Dinov2PreTrainedModel,Dinov2WithRegistersForImageClassification:()=>n.Dinov2WithRegistersForImageClassification,Dinov2WithRegistersModel:()=>n.Dinov2WithRegistersModel,Dinov2WithRegistersPreTrainedModel:()=>n.Dinov2WithRegistersPreTrainedModel,DistilBertForMaskedLM:()=>n.DistilBertForMaskedLM,DistilBertForQuestionAnswering:()=>n.DistilBertForQuestionAnswering,DistilBertForSequenceClassification:()=>n.DistilBertForSequenceClassification,DistilBertForTokenClassification:()=>n.DistilBertForTokenClassification,DistilBertModel:()=>n.DistilBertModel,DistilBertPreTrainedModel:()=>n.DistilBertPreTrainedModel,DistilBertTokenizer:()=>_.DistilBertTokenizer,DocumentQuestionAnsweringPipeline:()=>m.DocumentQuestionAnsweringPipeline,DonutFeatureExtractor:()=>O.DonutFeatureExtractor,DonutImageProcessor:()=>O.DonutImageProcessor,DonutSwinModel:()=>n.DonutSwinModel,DonutSwinPreTrainedModel:()=>n.DonutSwinPreTrainedModel,EfficientNetForImageClassification:()=>n.EfficientNetForImageClassification,EfficientNetImageProcessor:()=>O.EfficientNetImageProcessor,EfficientNetModel:()=>n.EfficientNetModel,EfficientNetPreTrainedModel:()=>n.EfficientNetPreTrainedModel,ElectraForMaskedLM:()=>n.ElectraForMaskedLM,ElectraForQuestionAnswering:()=>n.ElectraForQuestionAnswering,ElectraForSequenceClassification:()=>n.ElectraForSequenceClassification,ElectraForTokenClassification:()=>n.ElectraForTokenClassification,ElectraModel:()=>n.ElectraModel,ElectraPreTrainedModel:()=>n.ElectraPreTrainedModel,ElectraTokenizer:()=>_.ElectraTokenizer,EncodecFeatureExtractor:()=>y.EncodecFeatureExtractor,EosTokenCriteria:()=>L.EosTokenCriteria,Ernie4_5_ForCausalLM:()=>n.Ernie4_5_ForCausalLM,Ernie4_5_Model:()=>n.Ernie4_5_Model,Ernie4_5_PretrainedModel:()=>n.Ernie4_5_PretrainedModel,Ernie4_5_Tokenizer:()=>_.Ernie4_5_Tokenizer,EsmForMaskedLM:()=>n.EsmForMaskedLM,EsmForSequenceClassification:()=>n.EsmForSequenceClassification,EsmForTokenClassification:()=>n.EsmForTokenClassification,EsmModel:()=>n.EsmModel,EsmPreTrainedModel:()=>n.EsmPreTrainedModel,EsmTokenizer:()=>_.EsmTokenizer,ExaoneForCausalLM:()=>n.ExaoneForCausalLM,ExaoneModel:()=>n.ExaoneModel,ExaonePreTrainedModel:()=>n.ExaonePreTrainedModel,FFT:()=>I.FFT,FalconForCausalLM:()=>n.FalconForCausalLM,FalconModel:()=>n.FalconModel,FalconPreTrainedModel:()=>n.FalconPreTrainedModel,FalconTokenizer:()=>_.FalconTokenizer,FastViTForImageClassification:()=>n.FastViTForImageClassification,FastViTModel:()=>n.FastViTModel,FastViTPreTrainedModel:()=>n.FastViTPreTrainedModel,FeatureExtractionPipeline:()=>m.FeatureExtractionPipeline,FeatureExtractor:()=>D.FeatureExtractor,FillMaskPipeline:()=>m.FillMaskPipeline,Florence2ForConditionalGeneration:()=>n.Florence2ForConditionalGeneration,Florence2PreTrainedModel:()=>n.Florence2PreTrainedModel,Florence2Processor:()=>R.Florence2Processor,ForcedBOSTokenLogitsProcessor:()=>$.ForcedBOSTokenLogitsProcessor,ForcedEOSTokenLogitsProcessor:()=>$.ForcedEOSTokenLogitsProcessor,GLPNFeatureExtractor:()=>O.GLPNFeatureExtractor,GLPNForDepthEstimation:()=>n.GLPNForDepthEstimation,GLPNModel:()=>n.GLPNModel,GLPNPreTrainedModel:()=>n.GLPNPreTrainedModel,GPT2LMHeadModel:()=>n.GPT2LMHeadModel,GPT2Model:()=>n.GPT2Model,GPT2PreTrainedModel:()=>n.GPT2PreTrainedModel,GPT2Tokenizer:()=>_.GPT2Tokenizer,GPTBigCodeForCausalLM:()=>n.GPTBigCodeForCausalLM,GPTBigCodeModel:()=>n.GPTBigCodeModel,GPTBigCodePreTrainedModel:()=>n.GPTBigCodePreTrainedModel,GPTJForCausalLM:()=>n.GPTJForCausalLM,GPTJModel:()=>n.GPTJModel,GPTJPreTrainedModel:()=>n.GPTJPreTrainedModel,GPTNeoForCausalLM:()=>n.GPTNeoForCausalLM,GPTNeoModel:()=>n.GPTNeoModel,GPTNeoPreTrainedModel:()=>n.GPTNeoPreTrainedModel,GPTNeoXForCausalLM:()=>n.GPTNeoXForCausalLM,GPTNeoXModel:()=>n.GPTNeoXModel,GPTNeoXPreTrainedModel:()=>n.GPTNeoXPreTrainedModel,GPTNeoXTokenizer:()=>_.GPTNeoXTokenizer,Gemma2ForCausalLM:()=>n.Gemma2ForCausalLM,Gemma2Model:()=>n.Gemma2Model,Gemma2PreTrainedModel:()=>n.Gemma2PreTrainedModel,Gemma3ForCausalLM:()=>n.Gemma3ForCausalLM,Gemma3Model:()=>n.Gemma3Model,Gemma3PreTrainedModel:()=>n.Gemma3PreTrainedModel,Gemma3nAudioFeatureExtractor:()=>y.Gemma3nAudioFeatureExtractor,Gemma3nForConditionalGeneration:()=>n.Gemma3nForConditionalGeneration,Gemma3nPreTrainedModel:()=>n.Gemma3nPreTrainedModel,Gemma3nProcessor:()=>R.Gemma3nProcessor,GemmaForCausalLM:()=>n.GemmaForCausalLM,GemmaModel:()=>n.GemmaModel,GemmaPreTrainedModel:()=>n.GemmaPreTrainedModel,GemmaTokenizer:()=>_.GemmaTokenizer,GlmForCausalLM:()=>n.GlmForCausalLM,GlmModel:()=>n.GlmModel,GlmPreTrainedModel:()=>n.GlmPreTrainedModel,GraniteForCausalLM:()=>n.GraniteForCausalLM,GraniteModel:()=>n.GraniteModel,GraniteMoeHybridForCausalLM:()=>n.GraniteMoeHybridForCausalLM,GraniteMoeHybridModel:()=>n.GraniteMoeHybridModel,GraniteMoeHybridPreTrainedModel:()=>n.GraniteMoeHybridPreTrainedModel,GranitePreTrainedModel:()=>n.GranitePreTrainedModel,Grok1Tokenizer:()=>_.Grok1Tokenizer,GroundingDinoForObjectDetection:()=>n.GroundingDinoForObjectDetection,GroundingDinoImageProcessor:()=>O.GroundingDinoImageProcessor,GroundingDinoPreTrainedModel:()=>n.GroundingDinoPreTrainedModel,GroundingDinoProcessor:()=>R.GroundingDinoProcessor,GroupViTModel:()=>n.GroupViTModel,GroupViTPreTrainedModel:()=>n.GroupViTPreTrainedModel,HeliumForCausalLM:()=>n.HeliumForCausalLM,HeliumModel:()=>n.HeliumModel,HeliumPreTrainedModel:()=>n.HeliumPreTrainedModel,HerbertTokenizer:()=>_.HerbertTokenizer,HieraForImageClassification:()=>n.HieraForImageClassification,HieraModel:()=>n.HieraModel,HieraPreTrainedModel:()=>n.HieraPreTrainedModel,HubertForCTC:()=>n.HubertForCTC,HubertForSequenceClassification:()=>n.HubertForSequenceClassification,HubertModel:()=>n.HubertModel,HubertPreTrainedModel:()=>n.HubertPreTrainedModel,IJepaForImageClassification:()=>n.IJepaForImageClassification,IJepaModel:()=>n.IJepaModel,IJepaPreTrainedModel:()=>n.IJepaPreTrainedModel,Idefics3ForConditionalGeneration:()=>n.Idefics3ForConditionalGeneration,Idefics3ImageProcessor:()=>O.Idefics3ImageProcessor,Idefics3PreTrainedModel:()=>n.Idefics3PreTrainedModel,Idefics3Processor:()=>R.Idefics3Processor,ImageClassificationPipeline:()=>m.ImageClassificationPipeline,ImageFeatureExtractionPipeline:()=>m.ImageFeatureExtractionPipeline,ImageFeatureExtractor:()=>y.ImageFeatureExtractor,ImageMattingOutput:()=>n.ImageMattingOutput,ImageProcessor:()=>V.ImageProcessor,ImageSegmentationPipeline:()=>m.ImageSegmentationPipeline,ImageToImagePipeline:()=>m.ImageToImagePipeline,ImageToTextPipeline:()=>m.ImageToTextPipeline,InterruptableStoppingCriteria:()=>L.InterruptableStoppingCriteria,JAISLMHeadModel:()=>n.JAISLMHeadModel,JAISModel:()=>n.JAISModel,JAISPreTrainedModel:()=>n.JAISPreTrainedModel,JinaCLIPImageProcessor:()=>O.JinaCLIPImageProcessor,JinaCLIPModel:()=>n.JinaCLIPModel,JinaCLIPPreTrainedModel:()=>n.JinaCLIPPreTrainedModel,JinaCLIPProcessor:()=>R.JinaCLIPProcessor,JinaCLIPTextModel:()=>n.JinaCLIPTextModel,JinaCLIPVisionModel:()=>n.JinaCLIPVisionModel,Lfm2ForCausalLM:()=>n.Lfm2ForCausalLM,Lfm2Model:()=>n.Lfm2Model,Lfm2PreTrainedModel:()=>n.Lfm2PreTrainedModel,LiteWhisperForConditionalGeneration:()=>n.LiteWhisperForConditionalGeneration,Llama4ForCausalLM:()=>n.Llama4ForCausalLM,Llama4PreTrainedModel:()=>n.Llama4PreTrainedModel,LlamaForCausalLM:()=>n.LlamaForCausalLM,LlamaModel:()=>n.LlamaModel,LlamaPreTrainedModel:()=>n.LlamaPreTrainedModel,LlamaTokenizer:()=>_.LlamaTokenizer,LlavaForConditionalGeneration:()=>n.LlavaForConditionalGeneration,LlavaOnevisionForConditionalGeneration:()=>n.LlavaOnevisionForConditionalGeneration,LlavaOnevisionImageProcessor:()=>O.LlavaOnevisionImageProcessor,LlavaPreTrainedModel:()=>n.LlavaPreTrainedModel,LlavaProcessor:()=>R.LlavaProcessor,LlavaQwen2ForCausalLM:()=>n.LlavaQwen2ForCausalLM,LogitsProcessor:()=>$.LogitsProcessor,LogitsProcessorList:()=>$.LogitsProcessorList,LogitsWarper:()=>$.LogitsWarper,LongT5ForConditionalGeneration:()=>n.LongT5ForConditionalGeneration,LongT5Model:()=>n.LongT5Model,LongT5PreTrainedModel:()=>n.LongT5PreTrainedModel,M2M100ForConditionalGeneration:()=>n.M2M100ForConditionalGeneration,M2M100Model:()=>n.M2M100Model,M2M100PreTrainedModel:()=>n.M2M100PreTrainedModel,M2M100Tokenizer:()=>_.M2M100Tokenizer,MBart50Tokenizer:()=>_.MBart50Tokenizer,MBartForCausalLM:()=>n.MBartForCausalLM,MBartForConditionalGeneration:()=>n.MBartForConditionalGeneration,MBartForSequenceClassification:()=>n.MBartForSequenceClassification,MBartModel:()=>n.MBartModel,MBartPreTrainedModel:()=>n.MBartPreTrainedModel,MBartTokenizer:()=>_.MBartTokenizer,MPNetForMaskedLM:()=>n.MPNetForMaskedLM,MPNetForQuestionAnswering:()=>n.MPNetForQuestionAnswering,MPNetForSequenceClassification:()=>n.MPNetForSequenceClassification,MPNetForTokenClassification:()=>n.MPNetForTokenClassification,MPNetModel:()=>n.MPNetModel,MPNetPreTrainedModel:()=>n.MPNetPreTrainedModel,MPNetTokenizer:()=>_.MPNetTokenizer,MT5ForConditionalGeneration:()=>n.MT5ForConditionalGeneration,MT5Model:()=>n.MT5Model,MT5PreTrainedModel:()=>n.MT5PreTrainedModel,MarianMTModel:()=>n.MarianMTModel,MarianModel:()=>n.MarianModel,MarianPreTrainedModel:()=>n.MarianPreTrainedModel,MarianTokenizer:()=>_.MarianTokenizer,Mask2FormerImageProcessor:()=>O.Mask2FormerImageProcessor,MaskFormerFeatureExtractor:()=>O.MaskFormerFeatureExtractor,MaskFormerForInstanceSegmentation:()=>n.MaskFormerForInstanceSegmentation,MaskFormerImageProcessor:()=>O.MaskFormerImageProcessor,MaskFormerModel:()=>n.MaskFormerModel,MaskFormerPreTrainedModel:()=>n.MaskFormerPreTrainedModel,MaskedLMOutput:()=>n.MaskedLMOutput,MaxLengthCriteria:()=>L.MaxLengthCriteria,Metric3DForDepthEstimation:()=>n.Metric3DForDepthEstimation,Metric3DPreTrainedModel:()=>n.Metric3DPreTrainedModel,Metric3Dv2ForDepthEstimation:()=>n.Metric3Dv2ForDepthEstimation,Metric3Dv2PreTrainedModel:()=>n.Metric3Dv2PreTrainedModel,MgpstrForSceneTextRecognition:()=>n.MgpstrForSceneTextRecognition,MgpstrModelOutput:()=>n.MgpstrModelOutput,MgpstrPreTrainedModel:()=>n.MgpstrPreTrainedModel,MgpstrProcessor:()=>R.MgpstrProcessor,MgpstrTokenizer:()=>_.MgpstrTokenizer,MimiDecoderModel:()=>n.MimiDecoderModel,MimiDecoderOutput:()=>n.MimiDecoderOutput,MimiEncoderModel:()=>n.MimiEncoderModel,MimiEncoderOutput:()=>n.MimiEncoderOutput,MimiModel:()=>n.MimiModel,MimiPreTrainedModel:()=>n.MimiPreTrainedModel,MinLengthLogitsProcessor:()=>$.MinLengthLogitsProcessor,MinNewTokensLengthLogitsProcessor:()=>$.MinNewTokensLengthLogitsProcessor,MistralForCausalLM:()=>n.MistralForCausalLM,MistralModel:()=>n.MistralModel,MistralPreTrainedModel:()=>n.MistralPreTrainedModel,MobileBertForMaskedLM:()=>n.MobileBertForMaskedLM,MobileBertForQuestionAnswering:()=>n.MobileBertForQuestionAnswering,MobileBertForSequenceClassification:()=>n.MobileBertForSequenceClassification,MobileBertModel:()=>n.MobileBertModel,MobileBertPreTrainedModel:()=>n.MobileBertPreTrainedModel,MobileBertTokenizer:()=>_.MobileBertTokenizer,MobileLLMForCausalLM:()=>n.MobileLLMForCausalLM,MobileLLMModel:()=>n.MobileLLMModel,MobileLLMPreTrainedModel:()=>n.MobileLLMPreTrainedModel,MobileNetV1FeatureExtractor:()=>O.MobileNetV1FeatureExtractor,MobileNetV1ForImageClassification:()=>n.MobileNetV1ForImageClassification,MobileNetV1ForSemanticSegmentation:()=>n.MobileNetV1ForSemanticSegmentation,MobileNetV1ImageProcessor:()=>O.MobileNetV1ImageProcessor,MobileNetV1Model:()=>n.MobileNetV1Model,MobileNetV1PreTrainedModel:()=>n.MobileNetV1PreTrainedModel,MobileNetV2FeatureExtractor:()=>O.MobileNetV2FeatureExtractor,MobileNetV2ForImageClassification:()=>n.MobileNetV2ForImageClassification,MobileNetV2ForSemanticSegmentation:()=>n.MobileNetV2ForSemanticSegmentation,MobileNetV2ImageProcessor:()=>O.MobileNetV2ImageProcessor,MobileNetV2Model:()=>n.MobileNetV2Model,MobileNetV2PreTrainedModel:()=>n.MobileNetV2PreTrainedModel,MobileNetV3FeatureExtractor:()=>O.MobileNetV3FeatureExtractor,MobileNetV3ForImageClassification:()=>n.MobileNetV3ForImageClassification,MobileNetV3ForSemanticSegmentation:()=>n.MobileNetV3ForSemanticSegmentation,MobileNetV3ImageProcessor:()=>O.MobileNetV3ImageProcessor,MobileNetV3Model:()=>n.MobileNetV3Model,MobileNetV3PreTrainedModel:()=>n.MobileNetV3PreTrainedModel,MobileNetV4FeatureExtractor:()=>O.MobileNetV4FeatureExtractor,MobileNetV4ForImageClassification:()=>n.MobileNetV4ForImageClassification,MobileNetV4ForSemanticSegmentation:()=>n.MobileNetV4ForSemanticSegmentation,MobileNetV4ImageProcessor:()=>O.MobileNetV4ImageProcessor,MobileNetV4Model:()=>n.MobileNetV4Model,MobileNetV4PreTrainedModel:()=>n.MobileNetV4PreTrainedModel,MobileViTFeatureExtractor:()=>O.MobileViTFeatureExtractor,MobileViTForImageClassification:()=>n.MobileViTForImageClassification,MobileViTImageProcessor:()=>O.MobileViTImageProcessor,MobileViTModel:()=>n.MobileViTModel,MobileViTPreTrainedModel:()=>n.MobileViTPreTrainedModel,MobileViTV2ForImageClassification:()=>n.MobileViTV2ForImageClassification,MobileViTV2Model:()=>n.MobileViTV2Model,MobileViTV2PreTrainedModel:()=>n.MobileViTV2PreTrainedModel,ModelOutput:()=>n.ModelOutput,ModernBertDecoderForCausalLM:()=>n.ModernBertDecoderForCausalLM,ModernBertDecoderModel:()=>n.ModernBertDecoderModel,ModernBertDecoderPreTrainedModel:()=>n.ModernBertDecoderPreTrainedModel,ModernBertForMaskedLM:()=>n.ModernBertForMaskedLM,ModernBertForSequenceClassification:()=>n.ModernBertForSequenceClassification,ModernBertForTokenClassification:()=>n.ModernBertForTokenClassification,ModernBertModel:()=>n.ModernBertModel,ModernBertPreTrainedModel:()=>n.ModernBertPreTrainedModel,Moondream1ForConditionalGeneration:()=>n.Moondream1ForConditionalGeneration,MoonshineFeatureExtractor:()=>y.MoonshineFeatureExtractor,MoonshineForConditionalGeneration:()=>n.MoonshineForConditionalGeneration,MoonshineModel:()=>n.MoonshineModel,MoonshinePreTrainedModel:()=>n.MoonshinePreTrainedModel,MoonshineProcessor:()=>R.MoonshineProcessor,MptForCausalLM:()=>n.MptForCausalLM,MptModel:()=>n.MptModel,MptPreTrainedModel:()=>n.MptPreTrainedModel,MultiModalityCausalLM:()=>n.MultiModalityCausalLM,MultiModalityPreTrainedModel:()=>n.MultiModalityPreTrainedModel,MusicgenForCausalLM:()=>n.MusicgenForCausalLM,MusicgenForConditionalGeneration:()=>n.MusicgenForConditionalGeneration,MusicgenModel:()=>n.MusicgenModel,MusicgenPreTrainedModel:()=>n.MusicgenPreTrainedModel,NeoBertForMaskedLM:()=>n.NeoBertForMaskedLM,NeoBertForQuestionAnswering:()=>n.NeoBertForQuestionAnswering,NeoBertForSequenceClassification:()=>n.NeoBertForSequenceClassification,NeoBertForTokenClassification:()=>n.NeoBertForTokenClassification,NeoBertModel:()=>n.NeoBertModel,NeoBertPreTrainedModel:()=>n.NeoBertPreTrainedModel,NllbTokenizer:()=>_.NllbTokenizer,NoBadWordsLogitsProcessor:()=>$.NoBadWordsLogitsProcessor,NoRepeatNGramLogitsProcessor:()=>$.NoRepeatNGramLogitsProcessor,NomicBertModel:()=>n.NomicBertModel,NomicBertPreTrainedModel:()=>n.NomicBertPreTrainedModel,NougatImageProcessor:()=>O.NougatImageProcessor,NougatTokenizer:()=>_.NougatTokenizer,OPTForCausalLM:()=>n.OPTForCausalLM,OPTModel:()=>n.OPTModel,OPTPreTrainedModel:()=>n.OPTPreTrainedModel,ObjectDetectionPipeline:()=>m.ObjectDetectionPipeline,Olmo2ForCausalLM:()=>n.Olmo2ForCausalLM,Olmo2Model:()=>n.Olmo2Model,Olmo2PreTrainedModel:()=>n.Olmo2PreTrainedModel,OlmoForCausalLM:()=>n.OlmoForCausalLM,OlmoModel:()=>n.OlmoModel,OlmoPreTrainedModel:()=>n.OlmoPreTrainedModel,OpenELMForCausalLM:()=>n.OpenELMForCausalLM,OpenELMModel:()=>n.OpenELMModel,OpenELMPreTrainedModel:()=>n.OpenELMPreTrainedModel,OwlViTFeatureExtractor:()=>O.OwlViTFeatureExtractor,OwlViTForObjectDetection:()=>n.OwlViTForObjectDetection,OwlViTImageProcessor:()=>O.OwlViTImageProcessor,OwlViTModel:()=>n.OwlViTModel,OwlViTPreTrainedModel:()=>n.OwlViTPreTrainedModel,OwlViTProcessor:()=>R.OwlViTProcessor,Owlv2ForObjectDetection:()=>n.Owlv2ForObjectDetection,Owlv2ImageProcessor:()=>O.Owlv2ImageProcessor,Owlv2Model:()=>n.Owlv2Model,Owlv2PreTrainedModel:()=>n.Owlv2PreTrainedModel,PaliGemmaForConditionalGeneration:()=>n.PaliGemmaForConditionalGeneration,PaliGemmaPreTrainedModel:()=>n.PaliGemmaPreTrainedModel,PaliGemmaProcessor:()=>R.PaliGemmaProcessor,PatchTSMixerForPrediction:()=>n.PatchTSMixerForPrediction,PatchTSMixerModel:()=>n.PatchTSMixerModel,PatchTSMixerPreTrainedModel:()=>n.PatchTSMixerPreTrainedModel,PatchTSTForPrediction:()=>n.PatchTSTForPrediction,PatchTSTModel:()=>n.PatchTSTModel,PatchTSTPreTrainedModel:()=>n.PatchTSTPreTrainedModel,Phi3ForCausalLM:()=>n.Phi3ForCausalLM,Phi3Model:()=>n.Phi3Model,Phi3PreTrainedModel:()=>n.Phi3PreTrainedModel,Phi3VForCausalLM:()=>n.Phi3VForCausalLM,Phi3VImageProcessor:()=>O.Phi3VImageProcessor,Phi3VPreTrainedModel:()=>n.Phi3VPreTrainedModel,Phi3VProcessor:()=>R.Phi3VProcessor,PhiForCausalLM:()=>n.PhiForCausalLM,PhiModel:()=>n.PhiModel,PhiPreTrainedModel:()=>n.PhiPreTrainedModel,Pipeline:()=>m.Pipeline,PreTrainedModel:()=>n.PreTrainedModel,PreTrainedTokenizer:()=>_.PreTrainedTokenizer,PretrainedConfig:()=>b.PretrainedConfig,PretrainedMixin:()=>n.PretrainedMixin,Processor:()=>me.Processor,PvtForImageClassification:()=>n.PvtForImageClassification,PvtImageProcessor:()=>O.PvtImageProcessor,PvtModel:()=>n.PvtModel,PvtPreTrainedModel:()=>n.PvtPreTrainedModel,PyAnnoteFeatureExtractor:()=>y.PyAnnoteFeatureExtractor,PyAnnoteForAudioFrameClassification:()=>n.PyAnnoteForAudioFrameClassification,PyAnnoteModel:()=>n.PyAnnoteModel,PyAnnotePreTrainedModel:()=>n.PyAnnotePreTrainedModel,PyAnnoteProcessor:()=>R.PyAnnoteProcessor,QuestionAnsweringModelOutput:()=>n.QuestionAnsweringModelOutput,QuestionAnsweringPipeline:()=>m.QuestionAnsweringPipeline,Qwen2ForCausalLM:()=>n.Qwen2ForCausalLM,Qwen2Model:()=>n.Qwen2Model,Qwen2PreTrainedModel:()=>n.Qwen2PreTrainedModel,Qwen2Tokenizer:()=>_.Qwen2Tokenizer,Qwen2VLForConditionalGeneration:()=>n.Qwen2VLForConditionalGeneration,Qwen2VLImageProcessor:()=>O.Qwen2VLImageProcessor,Qwen2VLPreTrainedModel:()=>n.Qwen2VLPreTrainedModel,Qwen2VLProcessor:()=>R.Qwen2VLProcessor,Qwen3ForCausalLM:()=>n.Qwen3ForCausalLM,Qwen3Model:()=>n.Qwen3Model,Qwen3PreTrainedModel:()=>n.Qwen3PreTrainedModel,RFDetrForObjectDetection:()=>n.RFDetrForObjectDetection,RFDetrModel:()=>n.RFDetrModel,RFDetrObjectDetectionOutput:()=>n.RFDetrObjectDetectionOutput,RFDetrPreTrainedModel:()=>n.RFDetrPreTrainedModel,RTDetrForObjectDetection:()=>n.RTDetrForObjectDetection,RTDetrImageProcessor:()=>O.RTDetrImageProcessor,RTDetrModel:()=>n.RTDetrModel,RTDetrObjectDetectionOutput:()=>n.RTDetrObjectDetectionOutput,RTDetrPreTrainedModel:()=>n.RTDetrPreTrainedModel,RTDetrV2ForObjectDetection:()=>n.RTDetrV2ForObjectDetection,RTDetrV2Model:()=>n.RTDetrV2Model,RTDetrV2ObjectDetectionOutput:()=>n.RTDetrV2ObjectDetectionOutput,RTDetrV2PreTrainedModel:()=>n.RTDetrV2PreTrainedModel,RawAudio:()=>F.RawAudio,RawImage:()=>q.RawImage,RawVideo:()=>S.RawVideo,RawVideoFrame:()=>S.RawVideoFrame,RepetitionPenaltyLogitsProcessor:()=>$.RepetitionPenaltyLogitsProcessor,ResNetForImageClassification:()=>n.ResNetForImageClassification,ResNetModel:()=>n.ResNetModel,ResNetPreTrainedModel:()=>n.ResNetPreTrainedModel,RoFormerForMaskedLM:()=>n.RoFormerForMaskedLM,RoFormerForQuestionAnswering:()=>n.RoFormerForQuestionAnswering,RoFormerForSequenceClassification:()=>n.RoFormerForSequenceClassification,RoFormerForTokenClassification:()=>n.RoFormerForTokenClassification,RoFormerModel:()=>n.RoFormerModel,RoFormerPreTrainedModel:()=>n.RoFormerPreTrainedModel,RoFormerTokenizer:()=>_.RoFormerTokenizer,RobertaForMaskedLM:()=>n.RobertaForMaskedLM,RobertaForQuestionAnswering:()=>n.RobertaForQuestionAnswering,RobertaForSequenceClassification:()=>n.RobertaForSequenceClassification,RobertaForTokenClassification:()=>n.RobertaForTokenClassification,RobertaModel:()=>n.RobertaModel,RobertaPreTrainedModel:()=>n.RobertaPreTrainedModel,RobertaTokenizer:()=>_.RobertaTokenizer,SamImageProcessor:()=>O.SamImageProcessor,SamImageSegmentationOutput:()=>n.SamImageSegmentationOutput,SamModel:()=>n.SamModel,SamPreTrainedModel:()=>n.SamPreTrainedModel,SamProcessor:()=>R.SamProcessor,SapiensForDepthEstimation:()=>n.SapiensForDepthEstimation,SapiensForNormalEstimation:()=>n.SapiensForNormalEstimation,SapiensForSemanticSegmentation:()=>n.SapiensForSemanticSegmentation,SapiensPreTrainedModel:()=>n.SapiensPreTrainedModel,SeamlessM4TFeatureExtractor:()=>y.SeamlessM4TFeatureExtractor,SegformerFeatureExtractor:()=>O.SegformerFeatureExtractor,SegformerForImageClassification:()=>n.SegformerForImageClassification,SegformerForSemanticSegmentation:()=>n.SegformerForSemanticSegmentation,SegformerImageProcessor:()=>O.SegformerImageProcessor,SegformerModel:()=>n.SegformerModel,SegformerPreTrainedModel:()=>n.SegformerPreTrainedModel,Seq2SeqLMOutput:()=>n.Seq2SeqLMOutput,SequenceClassifierOutput:()=>n.SequenceClassifierOutput,SiglipImageProcessor:()=>O.SiglipImageProcessor,SiglipModel:()=>n.SiglipModel,SiglipPreTrainedModel:()=>n.SiglipPreTrainedModel,SiglipTextModel:()=>n.SiglipTextModel,SiglipTokenizer:()=>_.SiglipTokenizer,SiglipVisionModel:()=>n.SiglipVisionModel,SmolLM3ForCausalLM:()=>n.SmolLM3ForCausalLM,SmolLM3Model:()=>n.SmolLM3Model,SmolLM3PreTrainedModel:()=>n.SmolLM3PreTrainedModel,SmolVLMForConditionalGeneration:()=>n.SmolVLMForConditionalGeneration,SmolVLMImageProcessor:()=>O.SmolVLMImageProcessor,SmolVLMProcessor:()=>R.SmolVLMProcessor,SnacDecoderModel:()=>n.SnacDecoderModel,SnacEncoderModel:()=>n.SnacEncoderModel,SnacFeatureExtractor:()=>y.SnacFeatureExtractor,SnacModel:()=>n.SnacModel,SnacPreTrainedModel:()=>n.SnacPreTrainedModel,SpeechT5FeatureExtractor:()=>y.SpeechT5FeatureExtractor,SpeechT5ForSpeechToText:()=>n.SpeechT5ForSpeechToText,SpeechT5ForTextToSpeech:()=>n.SpeechT5ForTextToSpeech,SpeechT5HifiGan:()=>n.SpeechT5HifiGan,SpeechT5Model:()=>n.SpeechT5Model,SpeechT5PreTrainedModel:()=>n.SpeechT5PreTrainedModel,SpeechT5Processor:()=>R.SpeechT5Processor,SpeechT5Tokenizer:()=>_.SpeechT5Tokenizer,SqueezeBertForMaskedLM:()=>n.SqueezeBertForMaskedLM,SqueezeBertForQuestionAnswering:()=>n.SqueezeBertForQuestionAnswering,SqueezeBertForSequenceClassification:()=>n.SqueezeBertForSequenceClassification,SqueezeBertModel:()=>n.SqueezeBertModel,SqueezeBertPreTrainedModel:()=>n.SqueezeBertPreTrainedModel,SqueezeBertTokenizer:()=>_.SqueezeBertTokenizer,StableLmForCausalLM:()=>n.StableLmForCausalLM,StableLmModel:()=>n.StableLmModel,StableLmPreTrainedModel:()=>n.StableLmPreTrainedModel,Starcoder2ForCausalLM:()=>n.Starcoder2ForCausalLM,Starcoder2Model:()=>n.Starcoder2Model,Starcoder2PreTrainedModel:()=>n.Starcoder2PreTrainedModel,StoppingCriteria:()=>L.StoppingCriteria,StoppingCriteriaList:()=>L.StoppingCriteriaList,StyleTextToSpeech2Model:()=>n.StyleTextToSpeech2Model,StyleTextToSpeech2PreTrainedModel:()=>n.StyleTextToSpeech2PreTrainedModel,SummarizationPipeline:()=>m.SummarizationPipeline,SuppressTokensAtBeginLogitsProcessor:()=>$.SuppressTokensAtBeginLogitsProcessor,Swin2SRForImageSuperResolution:()=>n.Swin2SRForImageSuperResolution,Swin2SRImageProcessor:()=>O.Swin2SRImageProcessor,Swin2SRModel:()=>n.Swin2SRModel,Swin2SRPreTrainedModel:()=>n.Swin2SRPreTrainedModel,SwinForImageClassification:()=>n.SwinForImageClassification,SwinForSemanticSegmentation:()=>n.SwinForSemanticSegmentation,SwinModel:()=>n.SwinModel,SwinPreTrainedModel:()=>n.SwinPreTrainedModel,T5ForConditionalGeneration:()=>n.T5ForConditionalGeneration,T5Model:()=>n.T5Model,T5PreTrainedModel:()=>n.T5PreTrainedModel,T5Tokenizer:()=>_.T5Tokenizer,TableTransformerForObjectDetection:()=>n.TableTransformerForObjectDetection,TableTransformerModel:()=>n.TableTransformerModel,TableTransformerObjectDetectionOutput:()=>n.TableTransformerObjectDetectionOutput,TableTransformerPreTrainedModel:()=>n.TableTransformerPreTrainedModel,TemperatureLogitsWarper:()=>$.TemperatureLogitsWarper,Tensor:()=>f.Tensor,Text2TextGenerationPipeline:()=>m.Text2TextGenerationPipeline,TextClassificationPipeline:()=>m.TextClassificationPipeline,TextGenerationPipeline:()=>m.TextGenerationPipeline,TextStreamer:()=>X.TextStreamer,TextToAudioPipeline:()=>m.TextToAudioPipeline,TokenClassificationPipeline:()=>m.TokenClassificationPipeline,TokenClassifierOutput:()=>n.TokenClassifierOutput,TokenizerModel:()=>_.TokenizerModel,TopKLogitsWarper:()=>$.TopKLogitsWarper,TopPLogitsWarper:()=>$.TopPLogitsWarper,TrOCRForCausalLM:()=>n.TrOCRForCausalLM,TrOCRPreTrainedModel:()=>n.TrOCRPreTrainedModel,TranslationPipeline:()=>m.TranslationPipeline,UltravoxModel:()=>n.UltravoxModel,UltravoxPreTrainedModel:()=>n.UltravoxPreTrainedModel,UltravoxProcessor:()=>R.UltravoxProcessor,UniSpeechForCTC:()=>n.UniSpeechForCTC,UniSpeechForSequenceClassification:()=>n.UniSpeechForSequenceClassification,UniSpeechModel:()=>n.UniSpeechModel,UniSpeechPreTrainedModel:()=>n.UniSpeechPreTrainedModel,UniSpeechSatForAudioFrameClassification:()=>n.UniSpeechSatForAudioFrameClassification,UniSpeechSatForCTC:()=>n.UniSpeechSatForCTC,UniSpeechSatForSequenceClassification:()=>n.UniSpeechSatForSequenceClassification,UniSpeechSatModel:()=>n.UniSpeechSatModel,UniSpeechSatPreTrainedModel:()=>n.UniSpeechSatPreTrainedModel,VLChatProcessor:()=>R.VLChatProcessor,VLMImageProcessor:()=>O.VLMImageProcessor,VaultGemmaForCausalLM:()=>n.VaultGemmaForCausalLM,VaultGemmaModel:()=>n.VaultGemmaModel,VaultGemmaPreTrainedModel:()=>n.VaultGemmaPreTrainedModel,ViTFeatureExtractor:()=>O.ViTFeatureExtractor,ViTForImageClassification:()=>n.ViTForImageClassification,ViTImageProcessor:()=>O.ViTImageProcessor,ViTMAEModel:()=>n.ViTMAEModel,ViTMAEPreTrainedModel:()=>n.ViTMAEPreTrainedModel,ViTMSNForImageClassification:()=>n.ViTMSNForImageClassification,ViTMSNModel:()=>n.ViTMSNModel,ViTMSNPreTrainedModel:()=>n.ViTMSNPreTrainedModel,ViTModel:()=>n.ViTModel,ViTPreTrainedModel:()=>n.ViTPreTrainedModel,VisionEncoderDecoderModel:()=>n.VisionEncoderDecoderModel,VitMatteForImageMatting:()=>n.VitMatteForImageMatting,VitMatteImageProcessor:()=>O.VitMatteImageProcessor,VitMattePreTrainedModel:()=>n.VitMattePreTrainedModel,VitPoseForPoseEstimation:()=>n.VitPoseForPoseEstimation,VitPoseImageProcessor:()=>O.VitPoseImageProcessor,VitPosePreTrainedModel:()=>n.VitPosePreTrainedModel,VitsModel:()=>n.VitsModel,VitsModelOutput:()=>n.VitsModelOutput,VitsPreTrainedModel:()=>n.VitsPreTrainedModel,VitsTokenizer:()=>_.VitsTokenizer,VoxtralForConditionalGeneration:()=>n.VoxtralForConditionalGeneration,VoxtralProcessor:()=>R.VoxtralProcessor,Wav2Vec2BertForCTC:()=>n.Wav2Vec2BertForCTC,Wav2Vec2BertForSequenceClassification:()=>n.Wav2Vec2BertForSequenceClassification,Wav2Vec2BertModel:()=>n.Wav2Vec2BertModel,Wav2Vec2BertPreTrainedModel:()=>n.Wav2Vec2BertPreTrainedModel,Wav2Vec2CTCTokenizer:()=>_.Wav2Vec2CTCTokenizer,Wav2Vec2FeatureExtractor:()=>y.Wav2Vec2FeatureExtractor,Wav2Vec2ForAudioFrameClassification:()=>n.Wav2Vec2ForAudioFrameClassification,Wav2Vec2ForCTC:()=>n.Wav2Vec2ForCTC,Wav2Vec2ForSequenceClassification:()=>n.Wav2Vec2ForSequenceClassification,Wav2Vec2Model:()=>n.Wav2Vec2Model,Wav2Vec2PreTrainedModel:()=>n.Wav2Vec2PreTrainedModel,Wav2Vec2Processor:()=>R.Wav2Vec2Processor,Wav2Vec2ProcessorWithLM:()=>R.Wav2Vec2ProcessorWithLM,WavLMForAudioFrameClassification:()=>n.WavLMForAudioFrameClassification,WavLMForCTC:()=>n.WavLMForCTC,WavLMForSequenceClassification:()=>n.WavLMForSequenceClassification,WavLMForXVector:()=>n.WavLMForXVector,WavLMModel:()=>n.WavLMModel,WavLMPreTrainedModel:()=>n.WavLMPreTrainedModel,WeSpeakerFeatureExtractor:()=>y.WeSpeakerFeatureExtractor,WeSpeakerResNetModel:()=>n.WeSpeakerResNetModel,WeSpeakerResNetPreTrainedModel:()=>n.WeSpeakerResNetPreTrainedModel,WhisperFeatureExtractor:()=>y.WhisperFeatureExtractor,WhisperForConditionalGeneration:()=>n.WhisperForConditionalGeneration,WhisperModel:()=>n.WhisperModel,WhisperPreTrainedModel:()=>n.WhisperPreTrainedModel,WhisperProcessor:()=>R.WhisperProcessor,WhisperTextStreamer:()=>X.WhisperTextStreamer,WhisperTimeStampLogitsProcessor:()=>$.WhisperTimeStampLogitsProcessor,WhisperTokenizer:()=>_.WhisperTokenizer,XLMForQuestionAnswering:()=>n.XLMForQuestionAnswering,XLMForSequenceClassification:()=>n.XLMForSequenceClassification,XLMForTokenClassification:()=>n.XLMForTokenClassification,XLMModel:()=>n.XLMModel,XLMPreTrainedModel:()=>n.XLMPreTrainedModel,XLMRobertaForMaskedLM:()=>n.XLMRobertaForMaskedLM,XLMRobertaForQuestionAnswering:()=>n.XLMRobertaForQuestionAnswering,XLMRobertaForSequenceClassification:()=>n.XLMRobertaForSequenceClassification,XLMRobertaForTokenClassification:()=>n.XLMRobertaForTokenClassification,XLMRobertaModel:()=>n.XLMRobertaModel,XLMRobertaPreTrainedModel:()=>n.XLMRobertaPreTrainedModel,XLMRobertaTokenizer:()=>_.XLMRobertaTokenizer,XLMTokenizer:()=>_.XLMTokenizer,XLMWithLMHeadModel:()=>n.XLMWithLMHeadModel,XVectorOutput:()=>n.XVectorOutput,YolosFeatureExtractor:()=>O.YolosFeatureExtractor,YolosForObjectDetection:()=>n.YolosForObjectDetection,YolosImageProcessor:()=>O.YolosImageProcessor,YolosModel:()=>n.YolosModel,YolosObjectDetectionOutput:()=>n.YolosObjectDetectionOutput,YolosPreTrainedModel:()=>n.YolosPreTrainedModel,ZeroShotAudioClassificationPipeline:()=>m.ZeroShotAudioClassificationPipeline,ZeroShotClassificationPipeline:()=>m.ZeroShotClassificationPipeline,ZeroShotImageClassificationPipeline:()=>m.ZeroShotImageClassificationPipeline,ZeroShotObjectDetectionPipeline:()=>m.ZeroShotObjectDetectionPipeline,bankers_round:()=>I.bankers_round,cat:()=>f.cat,cos_sim:()=>I.cos_sim,dot:()=>I.dot,dynamic_time_warping:()=>I.dynamic_time_warping,env:()=>re.env,full:()=>f.full,full_like:()=>f.full_like,getCacheShapes:()=>b.getCacheShapes,hamming:()=>F.hamming,hanning:()=>F.hanning,interpolate:()=>f.interpolate,interpolate_4d:()=>f.interpolate_4d,interpolate_data:()=>I.interpolate_data,is_chinese_char:()=>_.is_chinese_char,layer_norm:()=>f.layer_norm,load_image:()=>q.load_image,load_video:()=>S.load_video,log_softmax:()=>I.log_softmax,magnitude:()=>I.magnitude,matmul:()=>f.matmul,max:()=>I.max,mean:()=>f.mean,mean_pooling:()=>f.mean_pooling,medianFilter:()=>I.medianFilter,mel_filter_bank:()=>F.mel_filter_bank,min:()=>I.min,ones:()=>f.ones,ones_like:()=>f.ones_like,permute:()=>f.permute,permute_data:()=>I.permute_data,pipeline:()=>m.pipeline,quantize_embeddings:()=>f.quantize_embeddings,rand:()=>f.rand,read_audio:()=>F.read_audio,rfft:()=>f.rfft,round:()=>I.round,slice:()=>f.slice,softmax:()=>I.softmax,spectrogram:()=>F.spectrogram,stack:()=>f.stack,std_mean:()=>f.std_mean,topk:()=>f.topk,window_function:()=>F.window_function,zeros:()=>f.zeros,zeros_like:()=>f.zeros_like});var re=Ht("./src/env.js"),m=Ht("./src/pipelines.js"),n=Ht("./src/models.js"),_=Ht("./src/tokenizers.js"),b=Ht("./src/configs.js"),F=Ht("./src/utils/audio.js"),q=Ht("./src/utils/image.js"),S=Ht("./src/utils/video.js"),f=Ht("./src/utils/tensor.js"),I=Ht("./src/utils/maths.js"),D=Ht("./src/base/feature_extraction_utils.js"),y=Ht("./src/models/feature_extractors.js"),h=Ht("./src/models/auto/feature_extraction_auto.js"),V=Ht("./src/base/image_processors_utils.js"),O=Ht("./src/models/image_processors.js"),K=Ht("./src/models/auto/image_processing_auto.js"),me=Ht("./src/base/processing_utils.js"),R=Ht("./src/models/processors.js"),G=Ht("./src/models/auto/processing_auto.js"),X=Ht("./src/generation/streamers.js"),L=Ht("./src/generation/stopping_criteria.js"),$=Ht("./src/generation/logits_process.js")})(),c.ASTFeatureExtractor,c.ASTForAudioClassification,c.ASTModel,c.ASTPreTrainedModel,c.AlbertForMaskedLM,c.AlbertForQuestionAnswering,c.AlbertForSequenceClassification,c.AlbertModel,c.AlbertPreTrainedModel,c.AlbertTokenizer,c.ArceeForCausalLM,c.ArceeModel,c.ArceePreTrainedModel,c.AudioClassificationPipeline,c.AutoConfig,c.AutoFeatureExtractor,c.AutoImageProcessor,c.AutoModel,c.AutoModelForAudioClassification,c.AutoModelForAudioFrameClassification,c.AutoModelForAudioTextToText,c.AutoModelForCTC,c.AutoModelForCausalLM,c.AutoModelForDepthEstimation,c.AutoModelForDocumentQuestionAnswering,c.AutoModelForImageClassification,c.AutoModelForImageFeatureExtraction,c.AutoModelForImageMatting,c.AutoModelForImageSegmentation,c.AutoModelForImageTextToText,c.AutoModelForImageToImage,c.AutoModelForMaskGeneration,c.AutoModelForMaskedLM,c.AutoModelForNormalEstimation,c.AutoModelForObjectDetection,c.AutoModelForPoseEstimation,c.AutoModelForQuestionAnswering,c.AutoModelForSemanticSegmentation,c.AutoModelForSeq2SeqLM,c.AutoModelForSequenceClassification,c.AutoModelForSpeechSeq2Seq,c.AutoModelForTextToSpectrogram,c.AutoModelForTextToWaveform,c.AutoModelForTokenClassification,c.AutoModelForUniversalSegmentation,c.AutoModelForVision2Seq,c.AutoModelForXVector,c.AutoModelForZeroShotObjectDetection,c.AutoProcessor,c.AutoTokenizer,c.AutomaticSpeechRecognitionPipeline,c.BackgroundRemovalPipeline,c.BartForConditionalGeneration,c.BartForSequenceClassification,c.BartModel,c.BartPretrainedModel,c.BartTokenizer,c.BaseModelOutput,c.BaseStreamer,c.BeitFeatureExtractor,c.BeitForImageClassification,c.BeitModel,c.BeitPreTrainedModel,c.BertForMaskedLM,c.BertForQuestionAnswering,c.BertForSequenceClassification,c.BertForTokenClassification,c.BertModel,c.BertPreTrainedModel,c.BertTokenizer,c.BitImageProcessor,c.BlenderbotForConditionalGeneration,c.BlenderbotModel,c.BlenderbotPreTrainedModel,c.BlenderbotSmallForConditionalGeneration,c.BlenderbotSmallModel,c.BlenderbotSmallPreTrainedModel,c.BlenderbotSmallTokenizer,c.BlenderbotTokenizer,c.BloomForCausalLM,c.BloomModel,c.BloomPreTrainedModel,c.BloomTokenizer,c.CLIPFeatureExtractor,c.CLIPImageProcessor,c.CLIPModel,c.CLIPPreTrainedModel,c.CLIPSegForImageSegmentation,c.CLIPSegModel,c.CLIPSegPreTrainedModel,c.CLIPTextModel,c.CLIPTextModelWithProjection,c.CLIPTokenizer,c.CLIPVisionModel,c.CLIPVisionModelWithProjection,c.CamembertForMaskedLM,c.CamembertForQuestionAnswering,c.CamembertForSequenceClassification,c.CamembertForTokenClassification,c.CamembertModel,c.CamembertPreTrainedModel,c.CamembertTokenizer,c.CausalLMOutput,c.CausalLMOutputWithPast,c.ChineseCLIPFeatureExtractor,c.ChineseCLIPModel,c.ChineseCLIPPreTrainedModel,c.ClapAudioModelWithProjection,c.ClapFeatureExtractor,c.ClapModel,c.ClapPreTrainedModel,c.ClapTextModelWithProjection,c.ClassifierFreeGuidanceLogitsProcessor,c.CodeGenForCausalLM,c.CodeGenModel,c.CodeGenPreTrainedModel,c.CodeGenTokenizer,c.CodeLlamaTokenizer,c.CohereForCausalLM,c.CohereModel,c.CoherePreTrainedModel,c.CohereTokenizer,c.ConvBertForMaskedLM,c.ConvBertForQuestionAnswering,c.ConvBertForSequenceClassification,c.ConvBertForTokenClassification,c.ConvBertModel,c.ConvBertPreTrainedModel,c.ConvBertTokenizer,c.ConvNextFeatureExtractor,c.ConvNextForImageClassification,c.ConvNextImageProcessor,c.ConvNextModel,c.ConvNextPreTrainedModel,c.ConvNextV2ForImageClassification,c.ConvNextV2Model,c.ConvNextV2PreTrainedModel,c.DFineForObjectDetection,c.DFineModel,c.DFinePreTrainedModel,c.DINOv3ConvNextModel,c.DINOv3ConvNextPreTrainedModel,c.DINOv3ViTImageProcessor,c.DINOv3ViTModel,c.DINOv3ViTPreTrainedModel,c.DPTFeatureExtractor,c.DPTForDepthEstimation,c.DPTImageProcessor,c.DPTModel,c.DPTPreTrainedModel,c.DacDecoderModel,c.DacDecoderOutput,c.DacEncoderModel,c.DacEncoderOutput,c.DacFeatureExtractor,c.DacModel,c.DacPreTrainedModel,c.DataTypeMap,c.DebertaForMaskedLM,c.DebertaForQuestionAnswering,c.DebertaForSequenceClassification,c.DebertaForTokenClassification,c.DebertaModel,c.DebertaPreTrainedModel,c.DebertaTokenizer,c.DebertaV2ForMaskedLM,c.DebertaV2ForQuestionAnswering,c.DebertaV2ForSequenceClassification,c.DebertaV2ForTokenClassification,c.DebertaV2Model,c.DebertaV2PreTrainedModel,c.DebertaV2Tokenizer,c.DecisionTransformerModel,c.DecisionTransformerPreTrainedModel,c.DeiTFeatureExtractor,c.DeiTForImageClassification,c.DeiTImageProcessor,c.DeiTModel,c.DeiTPreTrainedModel,c.DepthAnythingForDepthEstimation,c.DepthAnythingPreTrainedModel,c.DepthEstimationPipeline,c.DepthProForDepthEstimation,c.DepthProPreTrainedModel,c.DetrFeatureExtractor,c.DetrForObjectDetection,c.DetrForSegmentation,c.DetrImageProcessor,c.DetrModel,c.DetrObjectDetectionOutput,c.DetrPreTrainedModel,c.DetrSegmentationOutput,c.Dinov2ForImageClassification,c.Dinov2Model,c.Dinov2PreTrainedModel,c.Dinov2WithRegistersForImageClassification,c.Dinov2WithRegistersModel,c.Dinov2WithRegistersPreTrainedModel,c.DistilBertForMaskedLM,c.DistilBertForQuestionAnswering,c.DistilBertForSequenceClassification,c.DistilBertForTokenClassification,c.DistilBertModel,c.DistilBertPreTrainedModel,c.DistilBertTokenizer,c.DocumentQuestionAnsweringPipeline,c.DonutFeatureExtractor,c.DonutImageProcessor,c.DonutSwinModel,c.DonutSwinPreTrainedModel,c.EfficientNetForImageClassification,c.EfficientNetImageProcessor,c.EfficientNetModel,c.EfficientNetPreTrainedModel,c.ElectraForMaskedLM,c.ElectraForQuestionAnswering,c.ElectraForSequenceClassification,c.ElectraForTokenClassification,c.ElectraModel,c.ElectraPreTrainedModel,c.ElectraTokenizer,c.EncodecFeatureExtractor,c.EosTokenCriteria,c.Ernie4_5_ForCausalLM,c.Ernie4_5_Model,c.Ernie4_5_PretrainedModel,c.Ernie4_5_Tokenizer,c.EsmForMaskedLM,c.EsmForSequenceClassification,c.EsmForTokenClassification,c.EsmModel,c.EsmPreTrainedModel,c.EsmTokenizer,c.ExaoneForCausalLM,c.ExaoneModel,c.ExaonePreTrainedModel,c.FFT,c.FalconForCausalLM,c.FalconModel,c.FalconPreTrainedModel,c.FalconTokenizer,c.FastViTForImageClassification,c.FastViTModel,c.FastViTPreTrainedModel,c.FeatureExtractionPipeline,c.FeatureExtractor,c.FillMaskPipeline,c.Florence2ForConditionalGeneration,c.Florence2PreTrainedModel,c.Florence2Processor,c.ForcedBOSTokenLogitsProcessor,c.ForcedEOSTokenLogitsProcessor,c.GLPNFeatureExtractor,c.GLPNForDepthEstimation,c.GLPNModel,c.GLPNPreTrainedModel,c.GPT2LMHeadModel,c.GPT2Model,c.GPT2PreTrainedModel,c.GPT2Tokenizer,c.GPTBigCodeForCausalLM,c.GPTBigCodeModel,c.GPTBigCodePreTrainedModel,c.GPTJForCausalLM,c.GPTJModel,c.GPTJPreTrainedModel,c.GPTNeoForCausalLM,c.GPTNeoModel,c.GPTNeoPreTrainedModel,c.GPTNeoXForCausalLM,c.GPTNeoXModel,c.GPTNeoXPreTrainedModel,c.GPTNeoXTokenizer,c.Gemma2ForCausalLM,c.Gemma2Model,c.Gemma2PreTrainedModel,c.Gemma3ForCausalLM,c.Gemma3Model,c.Gemma3PreTrainedModel,c.Gemma3nAudioFeatureExtractor,c.Gemma3nForConditionalGeneration,c.Gemma3nPreTrainedModel,c.Gemma3nProcessor,c.GemmaForCausalLM,c.GemmaModel,c.GemmaPreTrainedModel,c.GemmaTokenizer,c.GlmForCausalLM,c.GlmModel,c.GlmPreTrainedModel,c.GraniteForCausalLM,c.GraniteModel,c.GraniteMoeHybridForCausalLM,c.GraniteMoeHybridModel,c.GraniteMoeHybridPreTrainedModel,c.GranitePreTrainedModel,c.Grok1Tokenizer,c.GroundingDinoForObjectDetection,c.GroundingDinoImageProcessor,c.GroundingDinoPreTrainedModel,c.GroundingDinoProcessor,c.GroupViTModel,c.GroupViTPreTrainedModel,c.HeliumForCausalLM,c.HeliumModel,c.HeliumPreTrainedModel,c.HerbertTokenizer,c.HieraForImageClassification,c.HieraModel,c.HieraPreTrainedModel,c.HubertForCTC,c.HubertForSequenceClassification,c.HubertModel,c.HubertPreTrainedModel,c.IJepaForImageClassification,c.IJepaModel,c.IJepaPreTrainedModel,c.Idefics3ForConditionalGeneration,c.Idefics3ImageProcessor,c.Idefics3PreTrainedModel,c.Idefics3Processor,c.ImageClassificationPipeline,c.ImageFeatureExtractionPipeline,c.ImageFeatureExtractor,c.ImageMattingOutput,c.ImageProcessor,c.ImageSegmentationPipeline,c.ImageToImagePipeline,c.ImageToTextPipeline,c.InterruptableStoppingCriteria,c.JAISLMHeadModel,c.JAISModel,c.JAISPreTrainedModel,c.JinaCLIPImageProcessor,c.JinaCLIPModel,c.JinaCLIPPreTrainedModel,c.JinaCLIPProcessor,c.JinaCLIPTextModel,c.JinaCLIPVisionModel,c.Lfm2ForCausalLM,c.Lfm2Model,c.Lfm2PreTrainedModel,c.LiteWhisperForConditionalGeneration,c.Llama4ForCausalLM,c.Llama4PreTrainedModel,c.LlamaForCausalLM,c.LlamaModel,c.LlamaPreTrainedModel,c.LlamaTokenizer,c.LlavaForConditionalGeneration,c.LlavaOnevisionForConditionalGeneration,c.LlavaOnevisionImageProcessor,c.LlavaPreTrainedModel,c.LlavaProcessor,c.LlavaQwen2ForCausalLM,c.LogitsProcessor,c.LogitsProcessorList,c.LogitsWarper,c.LongT5ForConditionalGeneration,c.LongT5Model,c.LongT5PreTrainedModel,c.M2M100ForConditionalGeneration,c.M2M100Model,c.M2M100PreTrainedModel,c.M2M100Tokenizer,c.MBart50Tokenizer,c.MBartForCausalLM,c.MBartForConditionalGeneration,c.MBartForSequenceClassification,c.MBartModel,c.MBartPreTrainedModel,c.MBartTokenizer,c.MPNetForMaskedLM,c.MPNetForQuestionAnswering,c.MPNetForSequenceClassification,c.MPNetForTokenClassification,c.MPNetModel,c.MPNetPreTrainedModel,c.MPNetTokenizer,c.MT5ForConditionalGeneration,c.MT5Model,c.MT5PreTrainedModel,c.MarianMTModel,c.MarianModel,c.MarianPreTrainedModel,c.MarianTokenizer,c.Mask2FormerImageProcessor,c.MaskFormerFeatureExtractor,c.MaskFormerForInstanceSegmentation,c.MaskFormerImageProcessor,c.MaskFormerModel,c.MaskFormerPreTrainedModel,c.MaskedLMOutput,c.MaxLengthCriteria,c.Metric3DForDepthEstimation,c.Metric3DPreTrainedModel,c.Metric3Dv2ForDepthEstimation,c.Metric3Dv2PreTrainedModel,c.MgpstrForSceneTextRecognition,c.MgpstrModelOutput,c.MgpstrPreTrainedModel,c.MgpstrProcessor,c.MgpstrTokenizer,c.MimiDecoderModel,c.MimiDecoderOutput,c.MimiEncoderModel,c.MimiEncoderOutput,c.MimiModel,c.MimiPreTrainedModel,c.MinLengthLogitsProcessor,c.MinNewTokensLengthLogitsProcessor,c.MistralForCausalLM,c.MistralModel,c.MistralPreTrainedModel,c.MobileBertForMaskedLM,c.MobileBertForQuestionAnswering,c.MobileBertForSequenceClassification,c.MobileBertModel,c.MobileBertPreTrainedModel,c.MobileBertTokenizer,c.MobileLLMForCausalLM,c.MobileLLMModel,c.MobileLLMPreTrainedModel,c.MobileNetV1FeatureExtractor,c.MobileNetV1ForImageClassification,c.MobileNetV1ForSemanticSegmentation,c.MobileNetV1ImageProcessor,c.MobileNetV1Model,c.MobileNetV1PreTrainedModel,c.MobileNetV2FeatureExtractor,c.MobileNetV2ForImageClassification,c.MobileNetV2ForSemanticSegmentation,c.MobileNetV2ImageProcessor,c.MobileNetV2Model,c.MobileNetV2PreTrainedModel,c.MobileNetV3FeatureExtractor,c.MobileNetV3ForImageClassification,c.MobileNetV3ForSemanticSegmentation,c.MobileNetV3ImageProcessor,c.MobileNetV3Model,c.MobileNetV3PreTrainedModel,c.MobileNetV4FeatureExtractor,c.MobileNetV4ForImageClassification,c.MobileNetV4ForSemanticSegmentation,c.MobileNetV4ImageProcessor,c.MobileNetV4Model,c.MobileNetV4PreTrainedModel,c.MobileViTFeatureExtractor,c.MobileViTForImageClassification,c.MobileViTImageProcessor,c.MobileViTModel,c.MobileViTPreTrainedModel,c.MobileViTV2ForImageClassification,c.MobileViTV2Model,c.MobileViTV2PreTrainedModel,c.ModelOutput,c.ModernBertDecoderForCausalLM,c.ModernBertDecoderModel,c.ModernBertDecoderPreTrainedModel,c.ModernBertForMaskedLM,c.ModernBertForSequenceClassification,c.ModernBertForTokenClassification,c.ModernBertModel,c.ModernBertPreTrainedModel,c.Moondream1ForConditionalGeneration,c.MoonshineFeatureExtractor,c.MoonshineForConditionalGeneration,c.MoonshineModel,c.MoonshinePreTrainedModel,c.MoonshineProcessor,c.MptForCausalLM,c.MptModel,c.MptPreTrainedModel,c.MultiModalityCausalLM,c.MultiModalityPreTrainedModel,c.MusicgenForCausalLM,c.MusicgenForConditionalGeneration,c.MusicgenModel,c.MusicgenPreTrainedModel,c.NeoBertForMaskedLM,c.NeoBertForQuestionAnswering,c.NeoBertForSequenceClassification,c.NeoBertForTokenClassification,c.NeoBertModel,c.NeoBertPreTrainedModel,c.NllbTokenizer,c.NoBadWordsLogitsProcessor,c.NoRepeatNGramLogitsProcessor,c.NomicBertModel,c.NomicBertPreTrainedModel,c.NougatImageProcessor,c.NougatTokenizer,c.OPTForCausalLM,c.OPTModel,c.OPTPreTrainedModel,c.ObjectDetectionPipeline,c.Olmo2ForCausalLM,c.Olmo2Model,c.Olmo2PreTrainedModel,c.OlmoForCausalLM,c.OlmoModel,c.OlmoPreTrainedModel,c.OpenELMForCausalLM,c.OpenELMModel,c.OpenELMPreTrainedModel,c.OwlViTFeatureExtractor,c.OwlViTForObjectDetection,c.OwlViTImageProcessor,c.OwlViTModel,c.OwlViTPreTrainedModel,c.OwlViTProcessor,c.Owlv2ForObjectDetection,c.Owlv2ImageProcessor,c.Owlv2Model,c.Owlv2PreTrainedModel,c.PaliGemmaForConditionalGeneration,c.PaliGemmaPreTrainedModel,c.PaliGemmaProcessor,c.PatchTSMixerForPrediction,c.PatchTSMixerModel,c.PatchTSMixerPreTrainedModel,c.PatchTSTForPrediction,c.PatchTSTModel,c.PatchTSTPreTrainedModel,c.Phi3ForCausalLM,c.Phi3Model,c.Phi3PreTrainedModel,c.Phi3VForCausalLM,c.Phi3VImageProcessor,c.Phi3VPreTrainedModel,c.Phi3VProcessor,c.PhiForCausalLM,c.PhiModel,c.PhiPreTrainedModel,c.Pipeline,c.PreTrainedModel,c.PreTrainedTokenizer,c.PretrainedConfig,c.PretrainedMixin,c.Processor,c.PvtForImageClassification,c.PvtImageProcessor,c.PvtModel,c.PvtPreTrainedModel,c.PyAnnoteFeatureExtractor,c.PyAnnoteForAudioFrameClassification,c.PyAnnoteModel,c.PyAnnotePreTrainedModel,c.PyAnnoteProcessor,c.QuestionAnsweringModelOutput,c.QuestionAnsweringPipeline,c.Qwen2ForCausalLM,c.Qwen2Model,c.Qwen2PreTrainedModel,c.Qwen2Tokenizer,c.Qwen2VLForConditionalGeneration,c.Qwen2VLImageProcessor,c.Qwen2VLPreTrainedModel,c.Qwen2VLProcessor,c.Qwen3ForCausalLM,c.Qwen3Model,c.Qwen3PreTrainedModel,c.RFDetrForObjectDetection,c.RFDetrModel,c.RFDetrObjectDetectionOutput,c.RFDetrPreTrainedModel,c.RTDetrForObjectDetection,c.RTDetrImageProcessor,c.RTDetrModel,c.RTDetrObjectDetectionOutput,c.RTDetrPreTrainedModel,c.RTDetrV2ForObjectDetection,c.RTDetrV2Model,c.RTDetrV2ObjectDetectionOutput,c.RTDetrV2PreTrainedModel,c.RawAudio,c.RawImage,c.RawVideo,c.RawVideoFrame,c.RepetitionPenaltyLogitsProcessor,c.ResNetForImageClassification,c.ResNetModel,c.ResNetPreTrainedModel,c.RoFormerForMaskedLM,c.RoFormerForQuestionAnswering,c.RoFormerForSequenceClassification,c.RoFormerForTokenClassification,c.RoFormerModel,c.RoFormerPreTrainedModel,c.RoFormerTokenizer,c.RobertaForMaskedLM,c.RobertaForQuestionAnswering,c.RobertaForSequenceClassification,c.RobertaForTokenClassification,c.RobertaModel,c.RobertaPreTrainedModel,c.RobertaTokenizer,c.SamImageProcessor,c.SamImageSegmentationOutput,c.SamModel,c.SamPreTrainedModel,c.SamProcessor,c.SapiensForDepthEstimation,c.SapiensForNormalEstimation,c.SapiensForSemanticSegmentation,c.SapiensPreTrainedModel,c.SeamlessM4TFeatureExtractor,c.SegformerFeatureExtractor,c.SegformerForImageClassification,c.SegformerForSemanticSegmentation,c.SegformerImageProcessor,c.SegformerModel,c.SegformerPreTrainedModel,c.Seq2SeqLMOutput,c.SequenceClassifierOutput,c.SiglipImageProcessor,c.SiglipModel,c.SiglipPreTrainedModel,c.SiglipTextModel,c.SiglipTokenizer,c.SiglipVisionModel,c.SmolLM3ForCausalLM,c.SmolLM3Model,c.SmolLM3PreTrainedModel,c.SmolVLMForConditionalGeneration,c.SmolVLMImageProcessor,c.SmolVLMProcessor,c.SnacDecoderModel,c.SnacEncoderModel,c.SnacFeatureExtractor,c.SnacModel,c.SnacPreTrainedModel,c.SpeechT5FeatureExtractor,c.SpeechT5ForSpeechToText,c.SpeechT5ForTextToSpeech,c.SpeechT5HifiGan,c.SpeechT5Model,c.SpeechT5PreTrainedModel,c.SpeechT5Processor,c.SpeechT5Tokenizer,c.SqueezeBertForMaskedLM,c.SqueezeBertForQuestionAnswering,c.SqueezeBertForSequenceClassification,c.SqueezeBertModel,c.SqueezeBertPreTrainedModel,c.SqueezeBertTokenizer,c.StableLmForCausalLM,c.StableLmModel,c.StableLmPreTrainedModel,c.Starcoder2ForCausalLM,c.Starcoder2Model,c.Starcoder2PreTrainedModel,c.StoppingCriteria,c.StoppingCriteriaList,c.StyleTextToSpeech2Model,c.StyleTextToSpeech2PreTrainedModel,c.SummarizationPipeline,c.SuppressTokensAtBeginLogitsProcessor,c.Swin2SRForImageSuperResolution,c.Swin2SRImageProcessor,c.Swin2SRModel,c.Swin2SRPreTrainedModel,c.SwinForImageClassification,c.SwinForSemanticSegmentation,c.SwinModel,c.SwinPreTrainedModel,c.T5ForConditionalGeneration,c.T5Model,c.T5PreTrainedModel,c.T5Tokenizer,c.TableTransformerForObjectDetection,c.TableTransformerModel,c.TableTransformerObjectDetectionOutput,c.TableTransformerPreTrainedModel,c.TemperatureLogitsWarper,c.Tensor,c.Text2TextGenerationPipeline,c.TextClassificationPipeline,c.TextGenerationPipeline,c.TextStreamer,c.TextToAudioPipeline,c.TokenClassificationPipeline,c.TokenClassifierOutput,c.TokenizerModel,c.TopKLogitsWarper,c.TopPLogitsWarper,c.TrOCRForCausalLM,c.TrOCRPreTrainedModel,c.TranslationPipeline,c.UltravoxModel,c.UltravoxPreTrainedModel,c.UltravoxProcessor,c.UniSpeechForCTC,c.UniSpeechForSequenceClassification,c.UniSpeechModel,c.UniSpeechPreTrainedModel,c.UniSpeechSatForAudioFrameClassification,c.UniSpeechSatForCTC,c.UniSpeechSatForSequenceClassification,c.UniSpeechSatModel,c.UniSpeechSatPreTrainedModel,c.VLChatProcessor,c.VLMImageProcessor,c.VaultGemmaForCausalLM,c.VaultGemmaModel,c.VaultGemmaPreTrainedModel,c.ViTFeatureExtractor,c.ViTForImageClassification,c.ViTImageProcessor,c.ViTMAEModel,c.ViTMAEPreTrainedModel,c.ViTMSNForImageClassification,c.ViTMSNModel,c.ViTMSNPreTrainedModel,c.ViTModel,c.ViTPreTrainedModel,c.VisionEncoderDecoderModel,c.VitMatteForImageMatting,c.VitMatteImageProcessor,c.VitMattePreTrainedModel,c.VitPoseForPoseEstimation,c.VitPoseImageProcessor,c.VitPosePreTrainedModel,c.VitsModel,c.VitsModelOutput,c.VitsPreTrainedModel,c.VitsTokenizer,c.VoxtralForConditionalGeneration,c.VoxtralProcessor,c.Wav2Vec2BertForCTC,c.Wav2Vec2BertForSequenceClassification,c.Wav2Vec2BertModel,c.Wav2Vec2BertPreTrainedModel,c.Wav2Vec2CTCTokenizer,c.Wav2Vec2FeatureExtractor,c.Wav2Vec2ForAudioFrameClassification,c.Wav2Vec2ForCTC,c.Wav2Vec2ForSequenceClassification,c.Wav2Vec2Model,c.Wav2Vec2PreTrainedModel,c.Wav2Vec2Processor,c.Wav2Vec2ProcessorWithLM,c.WavLMForAudioFrameClassification,c.WavLMForCTC,c.WavLMForSequenceClassification,c.WavLMForXVector,c.WavLMModel,c.WavLMPreTrainedModel,c.WeSpeakerFeatureExtractor,c.WeSpeakerResNetModel,c.WeSpeakerResNetPreTrainedModel,c.WhisperFeatureExtractor,c.WhisperForConditionalGeneration,c.WhisperModel,c.WhisperPreTrainedModel,c.WhisperProcessor,c.WhisperTextStreamer,c.WhisperTimeStampLogitsProcessor,c.WhisperTokenizer,c.XLMForQuestionAnswering,c.XLMForSequenceClassification,c.XLMForTokenClassification,c.XLMModel,c.XLMPreTrainedModel,c.XLMRobertaForMaskedLM,c.XLMRobertaForQuestionAnswering,c.XLMRobertaForSequenceClassification,c.XLMRobertaForTokenClassification,c.XLMRobertaModel,c.XLMRobertaPreTrainedModel,c.XLMRobertaTokenizer,c.XLMTokenizer,c.XLMWithLMHeadModel,c.XVectorOutput,c.YolosFeatureExtractor,c.YolosForObjectDetection,c.YolosImageProcessor,c.YolosModel,c.YolosObjectDetectionOutput,c.YolosPreTrainedModel,c.ZeroShotAudioClassificationPipeline,c.ZeroShotClassificationPipeline,c.ZeroShotImageClassificationPipeline,c.ZeroShotObjectDetectionPipeline,c.bankers_round,c.cat,c.cos_sim,c.dot,c.dynamic_time_warping;var Xn=c.env;c.full,c.full_like,c.getCacheShapes,c.hamming,c.hanning,c.interpolate,c.interpolate_4d,c.interpolate_data,c.is_chinese_char,c.layer_norm,c.load_image,c.load_video,c.log_softmax,c.magnitude,c.matmul,c.max,c.mean,c.mean_pooling,c.medianFilter,c.mel_filter_bank,c.min,c.ones,c.ones_like,c.permute,c.permute_data;var hh=c.pipeline;c.quantize_embeddings,c.rand,c.read_audio,c.rfft,c.round,c.slice,c.softmax,c.spectrogram,c.stack,c.std_mean,c.topk,c.window_function,c.zeros,c.zeros_like,Xn.allowLocalModels=!1,Xn.useBrowserCache=!1,Xn.remoteURL="https://huggingface.co/",Xn.remotePathTemplate="{model}/resolve/{revision}/",Xn.backends?.onnx?.wasm&&(Xn.backends.onnx.wasm.numThreads=1);let Ep=null,Cp=!1;console.log("🚀 Gemma worker started");async function mh(){if(Cp){console.log("⚠️ Model already initialized");return}try{self.postMessage({type:"progress",data:{progress:5,message:"Loading Transformers.js..."}});const re="gpu"in navigator;console.log(re?"🔧 WebGPU may be available":"🔧 Using WASM backend"),Ep=await hh("text-generation","onnx-community/gemma-3-270m-it-ONNX",{...{dtype:"fp32"},local_files_only:!1,use_auth_token:!1,revision:"main",progress_callback:n=>{if(n.status==="progress"){const _=Math.round(n.progress||0),F=n.file&&n.file.endsWith(".onnx")?`Downloading model... ${_}% (${Math.round(n.loaded/1024/1024)}MB)`:`Loading model... ${_}%`;self.postMessage({type:"progress",data:{progress:_,message:F}})}else if(n.status==="ready")self.postMessage({type:"progress",data:{progress:100,message:"Model ready!"}});else if(n.status==="initiate"){const b=n.cache_hit?"Loading cached model...":"Downloading model (270MB)...";self.postMessage({type:"progress",data:{progress:10,message:b}})}}}),Cp=!0,console.log("✅ Gemma model initialized"),self.postMessage({type:"ready",data:{message:"Model ready for generation"}})}catch(re){console.error("❌ Model initialization failed:",re),self.postMessage({type:"error",data:{error:re.message}})}}async function _h(re,m,n){if(!Cp||!Ep)throw new Error("Model not initialized");console.log(`🎯 Generating ${m} variations for: "${re.substring(0,50)}..."`);try{for(let _=0;_<m;_++){console.log(`📝 Generating variation ${_+1}/${m}...`);const b=await Ep([{role:"user",content:re}],{max_new_tokens:n.max_new_tokens||50,temperature:n.temperature||.9,top_p:n.top_p||.95,top_k:n.top_k||50,do_sample:!0,seed:Date.now()+_});let F="";if(b[0].generated_text&&Array.isArray(b[0].generated_text)){const q=b[0].generated_text,S=q[q.length-1];S&&S.role==="assistant"&&(F=S.content.trim())}else typeof b[0].generated_text=="string"&&(F=b[0].generated_text.trim());F||(F=`Generated variation ${_+1}`),self.postMessage({type:"variation",data:{text:F,index:_,total:m}}),console.log(`✅ Variation ${_+1}/${m}: ${F.substring(0,50)}...`)}self.postMessage({type:"complete",data:{count:m}}),console.log(`✅ All ${m} variations generated successfully`)}catch(_){console.error("❌ Generation error:",_),self.postMessage({type:"error",data:{error:_.message}})}}self.addEventListener("message",async re=>{const{type:m,data:n}=re.data;try{switch(m){case"initialize":await mh();break;case"generate":await _h(n.prompt,n.count,n.options);break;default:console.warn("Unknown message type:",m)}}catch(_){console.error("Worker error:",_),self.postMessage({type:"error",data:{error:_.message}})}}),console.log("✅ Gemma worker ready to receive messages")})();
//# sourceMappingURL=gemma-worker-9fe06813.js.map
