var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
(async () => {
  function _mergeNamespaces(i, e) {
    for (var t = 0; t < e.length; t++) {
      const s = e[t];
      if (typeof s != "string" && !Array.isArray(s)) {
        for (const l in s)
          if (l !== "default" && !(l in i)) {
            const f = Object.getOwnPropertyDescriptor(s, l);
            f && Object.defineProperty(i, l, f.get ? f : {
              enumerable: true,
              get: () => s[l]
            });
          }
      }
    }
    return Object.freeze(Object.defineProperty(i, Symbol.toStringTag, {
      value: "Module"
    }));
  }
  (function() {
    const e = document.createElement("link").relList;
    if (e && e.supports && e.supports("modulepreload"))
      return;
    for (const l of document.querySelectorAll('link[rel="modulepreload"]'))
      s(l);
    new MutationObserver((l) => {
      for (const f of l)
        if (f.type === "childList")
          for (const d of f.addedNodes)
            d.tagName === "LINK" && d.rel === "modulepreload" && s(d);
    }).observe(document, {
      childList: true,
      subtree: true
    });
    function t(l) {
      const f = {};
      return l.integrity && (f.integrity = l.integrity), l.referrerPolicy && (f.referrerPolicy = l.referrerPolicy), l.crossOrigin === "use-credentials" ? f.credentials = "include" : l.crossOrigin === "anonymous" ? f.credentials = "omit" : f.credentials = "same-origin", f;
    }
    function s(l) {
      if (l.ep)
        return;
      l.ep = true;
      const f = t(l);
      fetch(l.href, f);
    }
  })();
  const backends$1 = /* @__PURE__ */ new Map(), backendsSortedByPriority$1 = [], registerBackend$1 = (i, e, t) => {
    if (e && typeof e.init == "function" && typeof e.createInferenceSessionHandler == "function") {
      const s = backends$1.get(i);
      if (s === void 0)
        backends$1.set(i, {
          backend: e,
          priority: t
        });
      else {
        if (s.priority > t)
          return;
        if (s.priority === t && s.backend !== e)
          throw new Error(`cannot register backend "${i}" using priority ${t}`);
      }
      if (t >= 0) {
        const l = backendsSortedByPriority$1.indexOf(i);
        l !== -1 && backendsSortedByPriority$1.splice(l, 1);
        for (let f = 0; f < backendsSortedByPriority$1.length; f++)
          if (backends$1.get(backendsSortedByPriority$1[f]).priority <= t) {
            backendsSortedByPriority$1.splice(f, 0, i);
            return;
          }
        backendsSortedByPriority$1.push(i);
      }
      return;
    }
    throw new TypeError("not a valid backend");
  }, tryResolveAndInitializeBackend = async (i) => {
    const e = backends$1.get(i);
    if (!e)
      return "backend not found.";
    if (e.initialized)
      return e.backend;
    if (e.aborted)
      return e.error;
    {
      const t = !!e.initPromise;
      try {
        return t || (e.initPromise = e.backend.init(i)), await e.initPromise, e.initialized = true, e.backend;
      } catch (s) {
        return t || (e.error = `${s}`, e.aborted = true), e.error;
      } finally {
        delete e.initPromise;
      }
    }
  }, resolveBackendAndExecutionProviders = async (i) => {
    const e = i.executionProviders || [], t = e.map((g) => typeof g == "string" ? g : g.name), s = t.length === 0 ? backendsSortedByPriority$1 : t;
    let l;
    const f = [], d = /* @__PURE__ */ new Set();
    for (const g of s) {
      const _ = await tryResolveAndInitializeBackend(g);
      typeof _ == "string" ? f.push({
        name: g,
        err: _
      }) : (l || (l = _), l === _ && d.add(g));
    }
    if (!l)
      throw new Error(`no available backend found. ERR: ${f.map((g) => `[${g.name}] ${g.err}`).join(", ")}`);
    for (const { name: g, err: _ } of f)
      t.includes(g) && console.warn(`removing requested execution provider "${g}" from session options because it is not available: ${_}`);
    const w = e.filter((g) => d.has(typeof g == "string" ? g : g.name));
    return [
      l,
      new Proxy(i, {
        get: (g, _) => _ === "executionProviders" ? w : Reflect.get(g, _)
      })
    ];
  }, version = "1.21.0";
  let logLevelValue = "warning";
  const env$4 = {
    wasm: {},
    webgl: {},
    webgpu: {},
    versions: {
      common: version
    },
    set logLevel(i) {
      if (i !== void 0) {
        if (typeof i != "string" || [
          "verbose",
          "info",
          "warning",
          "error",
          "fatal"
        ].indexOf(i) === -1)
          throw new Error(`Unsupported logging level: ${i}`);
        logLevelValue = i;
      }
    },
    get logLevel() {
      return logLevelValue;
    }
  };
  Object.defineProperty(env$4, "logLevel", {
    enumerable: true
  });
  const env$3 = env$4, tensorToDataURL = (i, e) => {
    const t = typeof document < "u" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
    t.width = i.dims[3], t.height = i.dims[2];
    const s = t.getContext("2d");
    if (s != null) {
      let l, f;
      e?.tensorLayout !== void 0 && e.tensorLayout === "NHWC" ? (l = i.dims[2], f = i.dims[3]) : (l = i.dims[3], f = i.dims[2]);
      const d = e?.format !== void 0 ? e.format : "RGB", w = e?.norm;
      let g, _;
      w === void 0 || w.mean === void 0 ? g = [
        255,
        255,
        255,
        255
      ] : typeof w.mean == "number" ? g = [
        w.mean,
        w.mean,
        w.mean,
        w.mean
      ] : (g = [
        w.mean[0],
        w.mean[1],
        w.mean[2],
        0
      ], w.mean[3] !== void 0 && (g[3] = w.mean[3])), w === void 0 || w.bias === void 0 ? _ = [
        0,
        0,
        0,
        0
      ] : typeof w.bias == "number" ? _ = [
        w.bias,
        w.bias,
        w.bias,
        w.bias
      ] : (_ = [
        w.bias[0],
        w.bias[1],
        w.bias[2],
        0
      ], w.bias[3] !== void 0 && (_[3] = w.bias[3]));
      const h = f * l;
      let r = 0, n = h, u = h * 2, p = -1;
      d === "RGBA" ? (r = 0, n = h, u = h * 2, p = h * 3) : d === "RGB" ? (r = 0, n = h, u = h * 2) : d === "RBG" && (r = 0, u = h, n = h * 2);
      for (let M = 0; M < f; M++)
        for (let P = 0; P < l; P++) {
          const E = (i.data[r++] - _[0]) * g[0], k = (i.data[n++] - _[1]) * g[1], $ = (i.data[u++] - _[2]) * g[2], A = p === -1 ? 255 : (i.data[p++] - _[3]) * g[3];
          s.fillStyle = "rgba(" + E + "," + k + "," + $ + "," + A + ")", s.fillRect(P, M, 1, 1);
        }
      if ("toDataURL" in t)
        return t.toDataURL();
      throw new Error("toDataURL is not supported");
    } else
      throw new Error("Can not access image data");
  }, tensorToImageData = (i, e) => {
    const t = typeof document < "u" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d");
    let s;
    if (t != null) {
      let l, f, d;
      e?.tensorLayout !== void 0 && e.tensorLayout === "NHWC" ? (l = i.dims[2], f = i.dims[1], d = i.dims[3]) : (l = i.dims[3], f = i.dims[2], d = i.dims[1]);
      const w = e !== void 0 && e.format !== void 0 ? e.format : "RGB", g = e?.norm;
      let _, h;
      g === void 0 || g.mean === void 0 ? _ = [
        255,
        255,
        255,
        255
      ] : typeof g.mean == "number" ? _ = [
        g.mean,
        g.mean,
        g.mean,
        g.mean
      ] : (_ = [
        g.mean[0],
        g.mean[1],
        g.mean[2],
        255
      ], g.mean[3] !== void 0 && (_[3] = g.mean[3])), g === void 0 || g.bias === void 0 ? h = [
        0,
        0,
        0,
        0
      ] : typeof g.bias == "number" ? h = [
        g.bias,
        g.bias,
        g.bias,
        g.bias
      ] : (h = [
        g.bias[0],
        g.bias[1],
        g.bias[2],
        0
      ], g.bias[3] !== void 0 && (h[3] = g.bias[3]));
      const r = f * l;
      if (e !== void 0 && (e.format !== void 0 && d === 4 && e.format !== "RGBA" || d === 3 && e.format !== "RGB" && e.format !== "BGR"))
        throw new Error("Tensor format doesn't match input tensor dims");
      const n = 4;
      let u = 0, p = 1, M = 2, P = 3, E = 0, k = r, $ = r * 2, A = -1;
      w === "RGBA" ? (E = 0, k = r, $ = r * 2, A = r * 3) : w === "RGB" ? (E = 0, k = r, $ = r * 2) : w === "RBG" && (E = 0, $ = r, k = r * 2), s = t.createImageData(l, f);
      for (let C = 0; C < f * l; u += n, p += n, M += n, P += n, C++)
        s.data[u] = (i.data[E++] - h[0]) * _[0], s.data[p] = (i.data[k++] - h[1]) * _[1], s.data[M] = (i.data[$++] - h[2]) * _[2], s.data[P] = A === -1 ? 255 : (i.data[A++] - h[3]) * _[3];
    } else
      throw new Error("Can not access image data");
    return s;
  }, bufferToTensor = (i, e) => {
    if (i === void 0)
      throw new Error("Image buffer must be defined");
    if (e.height === void 0 || e.width === void 0)
      throw new Error("Image height and width must be defined");
    if (e.tensorLayout === "NHWC")
      throw new Error("NHWC Tensor layout is not supported yet");
    const { height: t, width: s } = e, l = e.norm ?? {
      mean: 255,
      bias: 0
    };
    let f, d;
    typeof l.mean == "number" ? f = [
      l.mean,
      l.mean,
      l.mean,
      l.mean
    ] : f = [
      l.mean[0],
      l.mean[1],
      l.mean[2],
      l.mean[3] ?? 255
    ], typeof l.bias == "number" ? d = [
      l.bias,
      l.bias,
      l.bias,
      l.bias
    ] : d = [
      l.bias[0],
      l.bias[1],
      l.bias[2],
      l.bias[3] ?? 0
    ];
    const w = e.format !== void 0 ? e.format : "RGBA", g = e.tensorFormat !== void 0 && e.tensorFormat !== void 0 ? e.tensorFormat : "RGB", _ = t * s, h = g === "RGBA" ? new Float32Array(_ * 4) : new Float32Array(_ * 3);
    let r = 4, n = 0, u = 1, p = 2, M = 3, P = 0, E = _, k = _ * 2, $ = -1;
    w === "RGB" && (r = 3, n = 0, u = 1, p = 2, M = -1), g === "RGBA" ? $ = _ * 3 : g === "RBG" ? (P = 0, k = _, E = _ * 2) : g === "BGR" && (k = 0, E = _, P = _ * 2);
    for (let C = 0; C < _; C++, n += r, p += r, u += r, M += r)
      h[P++] = (i[n] + d[0]) / f[0], h[E++] = (i[u] + d[1]) / f[1], h[k++] = (i[p] + d[2]) / f[2], $ !== -1 && M !== -1 && (h[$++] = (i[M] + d[3]) / f[3]);
    return g === "RGBA" ? new Tensor$4("float32", h, [
      1,
      4,
      t,
      s
    ]) : new Tensor$4("float32", h, [
      1,
      3,
      t,
      s
    ]);
  }, tensorFromImage = async (i, e) => {
    const t = typeof HTMLImageElement < "u" && i instanceof HTMLImageElement, s = typeof ImageData < "u" && i instanceof ImageData, l = typeof ImageBitmap < "u" && i instanceof ImageBitmap, f = typeof i == "string";
    let d, w = e ?? {};
    const g = () => {
      if (typeof document < "u")
        return document.createElement("canvas");
      if (typeof OffscreenCanvas < "u")
        return new OffscreenCanvas(1, 1);
      throw new Error("Canvas is not supported");
    }, _ = (h) => typeof HTMLCanvasElement < "u" && h instanceof HTMLCanvasElement || h instanceof OffscreenCanvas ? h.getContext("2d") : null;
    if (t) {
      const h = g();
      h.width = i.width, h.height = i.height;
      const r = _(h);
      if (r != null) {
        let n = i.height, u = i.width;
        if (e !== void 0 && e.resizedHeight !== void 0 && e.resizedWidth !== void 0 && (n = e.resizedHeight, u = e.resizedWidth), e !== void 0) {
          if (w = e, e.tensorFormat !== void 0)
            throw new Error("Image input config format must be RGBA for HTMLImageElement");
          w.tensorFormat = "RGBA", w.height = n, w.width = u;
        } else
          w.tensorFormat = "RGBA", w.height = n, w.width = u;
        r.drawImage(i, 0, 0), d = r.getImageData(0, 0, u, n).data;
      } else
        throw new Error("Can not access image data");
    } else if (s) {
      let h, r;
      if (e !== void 0 && e.resizedWidth !== void 0 && e.resizedHeight !== void 0 ? (h = e.resizedHeight, r = e.resizedWidth) : (h = i.height, r = i.width), e !== void 0 && (w = e), w.format = "RGBA", w.height = h, w.width = r, e !== void 0) {
        const n = g();
        n.width = r, n.height = h;
        const u = _(n);
        if (u != null)
          u.putImageData(i, 0, 0), d = u.getImageData(0, 0, r, h).data;
        else
          throw new Error("Can not access image data");
      } else
        d = i.data;
    } else if (l) {
      if (e === void 0)
        throw new Error("Please provide image config with format for Imagebitmap");
      const h = g();
      h.width = i.width, h.height = i.height;
      const r = _(h);
      if (r != null) {
        const n = i.height, u = i.width;
        return r.drawImage(i, 0, 0, u, n), d = r.getImageData(0, 0, u, n).data, w.height = n, w.width = u, bufferToTensor(d, w);
      } else
        throw new Error("Can not access image data");
    } else {
      if (f)
        return new Promise((h, r) => {
          const n = g(), u = _(n);
          if (!i || !u)
            return r();
          const p = new Image();
          p.crossOrigin = "Anonymous", p.src = i, p.onload = () => {
            n.width = p.width, n.height = p.height, u.drawImage(p, 0, 0, n.width, n.height);
            const M = u.getImageData(0, 0, n.width, n.height);
            w.height = n.height, w.width = n.width, h(bufferToTensor(M.data, w));
          };
        });
      throw new Error("Input data provided is not supported - aborted tensor creation");
    }
    if (d !== void 0)
      return bufferToTensor(d, w);
    throw new Error("Input data provided is not supported - aborted tensor creation");
  }, tensorFromTexture = (i, e) => {
    const { width: t, height: s, download: l, dispose: f } = e, d = [
      1,
      s,
      t,
      4
    ];
    return new Tensor$4({
      location: "texture",
      type: "float32",
      texture: i,
      dims: d,
      download: l,
      dispose: f
    });
  }, tensorFromGpuBuffer = (i, e) => {
    const { dataType: t, dims: s, download: l, dispose: f } = e;
    return new Tensor$4({
      location: "gpu-buffer",
      type: t ?? "float32",
      gpuBuffer: i,
      dims: s,
      download: l,
      dispose: f
    });
  }, tensorFromMLTensor = (i, e) => {
    const { dataType: t, dims: s, download: l, dispose: f } = e;
    return new Tensor$4({
      location: "ml-tensor",
      type: t ?? "float32",
      mlTensor: i,
      dims: s,
      download: l,
      dispose: f
    });
  }, tensorFromPinnedBuffer = (i, e, t) => new Tensor$4({
    location: "cpu-pinned",
    type: i,
    data: e,
    dims: t ?? [
      e.length
    ]
  }), NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP$1 = /* @__PURE__ */ new Map([
    [
      "float32",
      Float32Array
    ],
    [
      "uint8",
      Uint8Array
    ],
    [
      "int8",
      Int8Array
    ],
    [
      "uint16",
      Uint16Array
    ],
    [
      "int16",
      Int16Array
    ],
    [
      "int32",
      Int32Array
    ],
    [
      "bool",
      Uint8Array
    ],
    [
      "float64",
      Float64Array
    ],
    [
      "uint32",
      Uint32Array
    ],
    [
      "int4",
      Uint8Array
    ],
    [
      "uint4",
      Uint8Array
    ]
  ]), NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP$1 = /* @__PURE__ */ new Map([
    [
      Float32Array,
      "float32"
    ],
    [
      Uint8Array,
      "uint8"
    ],
    [
      Int8Array,
      "int8"
    ],
    [
      Uint16Array,
      "uint16"
    ],
    [
      Int16Array,
      "int16"
    ],
    [
      Int32Array,
      "int32"
    ],
    [
      Float64Array,
      "float64"
    ],
    [
      Uint32Array,
      "uint32"
    ]
  ]);
  let isTypedArrayChecked = false;
  const checkTypedArray = () => {
    if (!isTypedArrayChecked) {
      isTypedArrayChecked = true;
      const i = typeof BigInt64Array < "u" && BigInt64Array.from, e = typeof BigUint64Array < "u" && BigUint64Array.from, t = globalThis.Float16Array, s = typeof t < "u" && t.from;
      i && (NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP$1.set("int64", BigInt64Array), NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP$1.set(BigInt64Array, "int64")), e && (NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP$1.set("uint64", BigUint64Array), NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP$1.set(BigUint64Array, "uint64")), s ? (NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP$1.set("float16", t), NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP$1.set(t, "float16")) : NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP$1.set("float16", Uint16Array);
    }
  }, calculateSize$1 = (i) => {
    let e = 1;
    for (let t = 0; t < i.length; t++) {
      const s = i[t];
      if (typeof s != "number" || !Number.isSafeInteger(s))
        throw new TypeError(`dims[${t}] must be an integer, got: ${s}`);
      if (s < 0)
        throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${s}`);
      e *= s;
    }
    return e;
  }, tensorReshape = (i, e) => {
    switch (i.location) {
      case "cpu":
        return new Tensor$4(i.type, i.data, e);
      case "cpu-pinned":
        return new Tensor$4({
          location: "cpu-pinned",
          data: i.data,
          type: i.type,
          dims: e
        });
      case "texture":
        return new Tensor$4({
          location: "texture",
          texture: i.texture,
          type: i.type,
          dims: e
        });
      case "gpu-buffer":
        return new Tensor$4({
          location: "gpu-buffer",
          gpuBuffer: i.gpuBuffer,
          type: i.type,
          dims: e
        });
      case "ml-tensor":
        return new Tensor$4({
          location: "ml-tensor",
          mlTensor: i.mlTensor,
          type: i.type,
          dims: e
        });
      default:
        throw new Error(`tensorReshape: tensor location ${i.location} is not supported`);
    }
  };
  let Tensor$4 = class {
    constructor(e, t, s) {
      checkTypedArray();
      let l, f;
      if (typeof e == "object" && "location" in e)
        switch (this.dataLocation = e.location, l = e.type, f = e.dims, e.location) {
          case "cpu-pinned": {
            const w = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP$1.get(l);
            if (!w)
              throw new TypeError(`unsupported type "${l}" to create tensor from pinned buffer`);
            if (!(e.data instanceof w))
              throw new TypeError(`buffer should be of type ${w.name}`);
            this.cpuData = e.data;
            break;
          }
          case "texture": {
            if (l !== "float32")
              throw new TypeError(`unsupported type "${l}" to create tensor from texture`);
            this.gpuTextureData = e.texture, this.downloader = e.download, this.disposer = e.dispose;
            break;
          }
          case "gpu-buffer": {
            if (l !== "float32" && l !== "float16" && l !== "int32" && l !== "int64" && l !== "uint32" && l !== "uint8" && l !== "bool" && l !== "uint4" && l !== "int4")
              throw new TypeError(`unsupported type "${l}" to create tensor from gpu buffer`);
            this.gpuBufferData = e.gpuBuffer, this.downloader = e.download, this.disposer = e.dispose;
            break;
          }
          case "ml-tensor": {
            if (l !== "float32" && l !== "float16" && l !== "int32" && l !== "int64" && l !== "uint32" && l !== "uint64" && l !== "int8" && l !== "uint8" && l !== "bool" && l !== "uint4" && l !== "int4")
              throw new TypeError(`unsupported type "${l}" to create tensor from MLTensor`);
            this.mlTensorData = e.mlTensor, this.downloader = e.download, this.disposer = e.dispose;
            break;
          }
          default:
            throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
        }
      else {
        let w, g;
        if (typeof e == "string")
          if (l = e, g = s, e === "string") {
            if (!Array.isArray(t))
              throw new TypeError("A string tensor's data must be a string array.");
            w = t;
          } else {
            const _ = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP$1.get(e);
            if (_ === void 0)
              throw new TypeError(`Unsupported tensor type: ${e}.`);
            if (Array.isArray(t)) {
              if (e === "float16" && _ === Uint16Array || e === "uint4" || e === "int4")
                throw new TypeError(`Creating a ${e} tensor from number array is not supported. Please use ${_.name} as data.`);
              e === "uint64" || e === "int64" ? w = _.from(t, BigInt) : w = _.from(t);
            } else if (t instanceof _)
              w = t;
            else if (t instanceof Uint8ClampedArray)
              if (e === "uint8")
                w = Uint8Array.from(t);
              else
                throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");
            else if (e === "float16" && t instanceof Uint16Array && _ !== Uint16Array)
              w = new globalThis.Float16Array(t.buffer, t.byteOffset, t.length);
            else
              throw new TypeError(`A ${l} tensor's data must be type of ${_}`);
          }
        else if (g = t, Array.isArray(e)) {
          if (e.length === 0)
            throw new TypeError("Tensor type cannot be inferred from an empty array.");
          const _ = typeof e[0];
          if (_ === "string")
            l = "string", w = e;
          else if (_ === "boolean")
            l = "bool", w = Uint8Array.from(e);
          else
            throw new TypeError(`Invalid element type of data array: ${_}.`);
        } else if (e instanceof Uint8ClampedArray)
          l = "uint8", w = Uint8Array.from(e);
        else {
          const _ = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP$1.get(e.constructor);
          if (_ === void 0)
            throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);
          l = _, w = e;
        }
        if (g === void 0)
          g = [
            w.length
          ];
        else if (!Array.isArray(g))
          throw new TypeError("A tensor's dims must be a number array");
        f = g, this.cpuData = w, this.dataLocation = "cpu";
      }
      const d = calculateSize$1(f);
      if (this.cpuData && d !== this.cpuData.length && !((l === "uint4" || l === "int4") && Math.ceil(d / 2) === this.cpuData.length))
        throw new Error(`Tensor's size(${d}) does not match data length(${this.cpuData.length}).`);
      this.type = l, this.dims = f, this.size = d;
    }
    static async fromImage(e, t) {
      return tensorFromImage(e, t);
    }
    static fromTexture(e, t) {
      return tensorFromTexture(e, t);
    }
    static fromGpuBuffer(e, t) {
      return tensorFromGpuBuffer(e, t);
    }
    static fromMLTensor(e, t) {
      return tensorFromMLTensor(e, t);
    }
    static fromPinnedBuffer(e, t, s) {
      return tensorFromPinnedBuffer(e, t, s);
    }
    toDataURL(e) {
      return tensorToDataURL(this, e);
    }
    toImageData(e) {
      return tensorToImageData(this, e);
    }
    get data() {
      if (this.ensureValid(), !this.cpuData)
        throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
      return this.cpuData;
    }
    get location() {
      return this.dataLocation;
    }
    get texture() {
      if (this.ensureValid(), !this.gpuTextureData)
        throw new Error("The data is not stored as a WebGL texture.");
      return this.gpuTextureData;
    }
    get gpuBuffer() {
      if (this.ensureValid(), !this.gpuBufferData)
        throw new Error("The data is not stored as a WebGPU buffer.");
      return this.gpuBufferData;
    }
    get mlTensor() {
      if (this.ensureValid(), !this.mlTensorData)
        throw new Error("The data is not stored as a WebNN MLTensor.");
      return this.mlTensorData;
    }
    async getData(e) {
      switch (this.ensureValid(), this.dataLocation) {
        case "cpu":
        case "cpu-pinned":
          return this.data;
        case "texture":
        case "gpu-buffer":
        case "ml-tensor": {
          if (!this.downloader)
            throw new Error("The current tensor is not created with a specified data downloader.");
          if (this.isDownloading)
            throw new Error("The current tensor is being downloaded.");
          try {
            this.isDownloading = true;
            const t = await this.downloader();
            return this.downloader = void 0, this.dataLocation = "cpu", this.cpuData = t, e && this.disposer && (this.disposer(), this.disposer = void 0), t;
          } finally {
            this.isDownloading = false;
          }
        }
        default:
          throw new Error(`cannot get data from location: ${this.dataLocation}`);
      }
    }
    dispose() {
      if (this.isDownloading)
        throw new Error("The current tensor is being downloaded.");
      this.disposer && (this.disposer(), this.disposer = void 0), this.cpuData = void 0, this.gpuTextureData = void 0, this.gpuBufferData = void 0, this.mlTensorData = void 0, this.downloader = void 0, this.isDownloading = void 0, this.dataLocation = "none";
    }
    ensureValid() {
      if (this.dataLocation === "none")
        throw new Error("The tensor is disposed.");
    }
    reshape(e) {
      if (this.ensureValid(), this.downloader || this.disposer)
        throw new Error("Cannot reshape a tensor that owns GPU resource.");
      return tensorReshape(this, e);
    }
  };
  const Tensor$3 = Tensor$4, TRACE = (i, e) => {
    (typeof env$4.trace > "u" ? !env$4.wasm.trace : !env$4.trace) || console.timeStamp(`${i}::ORT::${e}`);
  }, TRACE_FUNC = (i, e) => {
    const t = new Error().stack?.split(/\r\n|\r|\n/g) || [];
    let s = false;
    for (let l = 0; l < t.length; l++) {
      if (s && !t[l].includes("TRACE_FUNC")) {
        let f = `FUNC_${i}::${t[l].trim().split(" ")[1]}`;
        e && (f += `::${e}`), TRACE("CPU", f);
        return;
      }
      t[l].includes("TRACE_FUNC") && (s = true);
    }
  }, TRACE_FUNC_BEGIN = (i) => {
    (typeof env$4.trace > "u" ? !env$4.wasm.trace : !env$4.trace) || TRACE_FUNC("BEGIN", i);
  }, TRACE_FUNC_END = (i) => {
    (typeof env$4.trace > "u" ? !env$4.wasm.trace : !env$4.trace) || TRACE_FUNC("END", i);
  };
  let InferenceSession$4 = class Sp {
    constructor(e) {
      this.handler = e;
    }
    async run(e, t, s) {
      TRACE_FUNC_BEGIN();
      const l = {};
      let f = {};
      if (typeof e != "object" || e === null || e instanceof Tensor$3 || Array.isArray(e))
        throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
      let d = true;
      if (typeof t == "object") {
        if (t === null)
          throw new TypeError("Unexpected argument[1]: cannot be null.");
        if (t instanceof Tensor$3)
          throw new TypeError("'fetches' cannot be a Tensor");
        if (Array.isArray(t)) {
          if (t.length === 0)
            throw new TypeError("'fetches' cannot be an empty array.");
          d = false;
          for (const _ of t) {
            if (typeof _ != "string")
              throw new TypeError("'fetches' must be a string array or an object.");
            if (this.outputNames.indexOf(_) === -1)
              throw new RangeError(`'fetches' contains invalid output name: ${_}.`);
            l[_] = null;
          }
          if (typeof s == "object" && s !== null)
            f = s;
          else if (typeof s < "u")
            throw new TypeError("'options' must be an object.");
        } else {
          let _ = false;
          const h = Object.getOwnPropertyNames(t);
          for (const r of this.outputNames)
            if (h.indexOf(r) !== -1) {
              const n = t[r];
              (n === null || n instanceof Tensor$3) && (_ = true, d = false, l[r] = n);
            }
          if (_) {
            if (typeof s == "object" && s !== null)
              f = s;
            else if (typeof s < "u")
              throw new TypeError("'options' must be an object.");
          } else
            f = t;
        }
      } else if (typeof t < "u")
        throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
      for (const _ of this.inputNames)
        if (typeof e[_] > "u")
          throw new Error(`input '${_}' is missing in 'feeds'.`);
      if (d)
        for (const _ of this.outputNames)
          l[_] = null;
      const w = await this.handler.run(e, l, f), g = {};
      for (const _ in w)
        if (Object.hasOwnProperty.call(w, _)) {
          const h = w[_];
          h instanceof Tensor$3 ? g[_] = h : g[_] = new Tensor$3(h.type, h.data, h.dims);
        }
      return TRACE_FUNC_END(), g;
    }
    async release() {
      return this.handler.dispose();
    }
    static async create(e, t, s, l) {
      TRACE_FUNC_BEGIN();
      let f, d = {};
      if (typeof e == "string") {
        if (f = e, typeof t == "object" && t !== null)
          d = t;
        else if (typeof t < "u")
          throw new TypeError("'options' must be an object.");
      } else if (e instanceof Uint8Array) {
        if (f = e, typeof t == "object" && t !== null)
          d = t;
        else if (typeof t < "u")
          throw new TypeError("'options' must be an object.");
      } else if (e instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && e instanceof SharedArrayBuffer) {
        const h = e;
        let r = 0, n = e.byteLength;
        if (typeof t == "object" && t !== null)
          d = t;
        else if (typeof t == "number") {
          if (r = t, !Number.isSafeInteger(r))
            throw new RangeError("'byteOffset' must be an integer.");
          if (r < 0 || r >= h.byteLength)
            throw new RangeError(`'byteOffset' is out of range [0, ${h.byteLength}).`);
          if (n = e.byteLength - r, typeof s == "number") {
            if (n = s, !Number.isSafeInteger(n))
              throw new RangeError("'byteLength' must be an integer.");
            if (n <= 0 || r + n > h.byteLength)
              throw new RangeError(`'byteLength' is out of range (0, ${h.byteLength - r}].`);
            if (typeof l == "object" && l !== null)
              d = l;
            else if (typeof l < "u")
              throw new TypeError("'options' must be an object.");
          } else if (typeof s < "u")
            throw new TypeError("'byteLength' must be a number.");
        } else if (typeof t < "u")
          throw new TypeError("'options' must be an object.");
        f = new Uint8Array(h, r, n);
      } else
        throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
      const [w, g] = await resolveBackendAndExecutionProviders(d), _ = await w.createInferenceSessionHandler(f, g);
      return TRACE_FUNC_END(), new Sp(_);
    }
    startProfiling() {
      this.handler.startProfiling();
    }
    endProfiling() {
      this.handler.endProfiling();
    }
    get inputNames() {
      return this.handler.inputNames;
    }
    get outputNames() {
      return this.handler.outputNames;
    }
  };
  const InferenceSession$3 = InferenceSession$4, __WEBPACK_EXTERNAL_MODULE_onnxruntime_common_82b39e9f__ = Object.freeze(Object.defineProperty({
    __proto__: null,
    InferenceSession: InferenceSession$3,
    TRACE,
    TRACE_FUNC_BEGIN,
    TRACE_FUNC_END,
    Tensor: Tensor$3,
    env: env$3,
    registerBackend: registerBackend$1
  }, Symbol.toStringTag, {
    value: "Module"
  })), scriptRel = "modulepreload", assetsURL = function(i) {
    return "/llm-wordgraph-exact/" + i;
  }, seen = {}, __vitePreload = function(e, t, s) {
    if (!t || t.length === 0)
      return e();
    const l = document.getElementsByTagName("link");
    return Promise.all(t.map((f) => {
      if (f = assetsURL(f), f in seen)
        return;
      seen[f] = true;
      const d = f.endsWith(".css"), w = d ? '[rel="stylesheet"]' : "";
      if (!!s)
        for (let h = l.length - 1; h >= 0; h--) {
          const r = l[h];
          if (r.href === f && (!d || r.rel === "stylesheet"))
            return;
        }
      else if (document.querySelector(`link[href="${f}"]${w}`))
        return;
      const _ = document.createElement("link");
      if (_.rel = d ? "stylesheet" : scriptRel, d || (_.as = "script", _.crossOrigin = ""), _.href = f, document.head.appendChild(_), d)
        return new Promise((h, r) => {
          _.addEventListener("load", h), _.addEventListener("error", () => r(new Error(`Unable to preload CSS for ${f}`)));
        });
    })).then(() => e()).catch((f) => {
      const d = new Event("vite:preloadError", {
        cancelable: true
      });
      if (d.payload = f, window.dispatchEvent(d), !d.defaultPrevented)
        throw f;
    });
  };
  function getDefaultExportFromCjs(i) {
    return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, "default") ? i.default : i;
  }
  function getAugmentedNamespace(i) {
    if (i.__esModule)
      return i;
    var e = i.default;
    if (typeof e == "function") {
      var t = function s() {
        return this instanceof s ? Reflect.construct(e, arguments, this.constructor) : e.apply(this, arguments);
      };
      t.prototype = e.prototype;
    } else
      t = {};
    return Object.defineProperty(t, "__esModule", {
      value: true
    }), Object.keys(i).forEach(function(s) {
      var l = Object.getOwnPropertyDescriptor(i, s);
      Object.defineProperty(t, s, l.get ? l : {
        enumerable: true,
        get: function() {
          return i[s];
        }
      });
    }), t;
  }
  function commonjsRequire(i) {
    throw new Error('Could not dynamically require "' + i + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
  }
  var ort_min$1 = {
    exports: {}
  };
  (function(i, e) {
    var t = (() => {
      var s = Object.defineProperty, l = Object.getOwnPropertyDescriptor, f = Object.getOwnPropertyNames, d = Object.prototype.hasOwnProperty, w = ((o) => typeof commonjsRequire < "u" ? commonjsRequire : typeof Proxy < "u" ? new Proxy(o, {
        get: (v, b) => (typeof commonjsRequire < "u" ? commonjsRequire : v)[b]
      }) : o)(function(o) {
        if (typeof commonjsRequire < "u")
          return commonjsRequire.apply(this, arguments);
        throw Error('Dynamic require of "' + o + '" is not supported');
      }), g = (o, v) => () => (o && (v = o(o = 0)), v), _ = (o, v) => {
        for (var b in v)
          s(o, b, {
            get: v[b],
            enumerable: true
          });
      }, h = (o, v, b, T) => {
        if (v && typeof v == "object" || typeof v == "function")
          for (let S of f(v))
            !d.call(o, S) && S !== b && s(o, S, {
              get: () => v[S],
              enumerable: !(T = l(v, S)) || T.enumerable
            });
        return o;
      }, r = (o) => h(s({}, "__esModule", {
        value: true
      }), o), n, u, p, M, P, E = g(() => {
        n = /* @__PURE__ */ new Map(), u = [], p = (o, v, b) => {
          if (v && typeof v.init == "function" && typeof v.createInferenceSessionHandler == "function") {
            let T = n.get(o);
            if (T === void 0)
              n.set(o, {
                backend: v,
                priority: b
              });
            else {
              if (T.priority > b)
                return;
              if (T.priority === b && T.backend !== v)
                throw new Error(`cannot register backend "${o}" using priority ${b}`);
            }
            if (b >= 0) {
              let S = u.indexOf(o);
              S !== -1 && u.splice(S, 1);
              for (let I = 0; I < u.length; I++)
                if (n.get(u[I]).priority <= b) {
                  u.splice(I, 0, o);
                  return;
                }
              u.push(o);
            }
            return;
          }
          throw new TypeError("not a valid backend");
        }, M = async (o) => {
          let v = n.get(o);
          if (!v)
            return "backend not found.";
          if (v.initialized)
            return v.backend;
          if (v.aborted)
            return v.error;
          {
            let b = !!v.initPromise;
            try {
              return b || (v.initPromise = v.backend.init(o)), await v.initPromise, v.initialized = true, v.backend;
            } catch (T) {
              return b || (v.error = `${T}`, v.aborted = true), v.error;
            } finally {
              delete v.initPromise;
            }
          }
        }, P = async (o) => {
          let v = o.executionProviders || [], b = v.map((z) => typeof z == "string" ? z : z.name), T = b.length === 0 ? u : b, S, I = [], O = /* @__PURE__ */ new Set();
          for (let z of T) {
            let B = await M(z);
            typeof B == "string" ? I.push({
              name: z,
              err: B
            }) : (S || (S = B), S === B && O.add(z));
          }
          if (!S)
            throw new Error(`no available backend found. ERR: ${I.map((z) => `[${z.name}] ${z.err}`).join(", ")}`);
          for (let { name: z, err: B } of I)
            b.includes(z) && console.warn(`removing requested execution provider "${z}" from session options because it is not available: ${B}`);
          let L = v.filter((z) => O.has(typeof z == "string" ? z : z.name));
          return [
            S,
            new Proxy(o, {
              get: (z, B) => B === "executionProviders" ? L : Reflect.get(z, B)
            })
          ];
        };
      }), k = g(() => {
        E();
      }), $, A = g(() => {
        $ = "1.22.0-dev.20250409-89f8206ba4";
      }), C, F, D = g(() => {
        A(), C = "warning", F = {
          wasm: {},
          webgl: {},
          webgpu: {},
          versions: {
            common: $
          },
          set logLevel(o) {
            if (o !== void 0) {
              if (typeof o != "string" || [
                "verbose",
                "info",
                "warning",
                "error",
                "fatal"
              ].indexOf(o) === -1)
                throw new Error(`Unsupported logging level: ${o}`);
              C = o;
            }
          },
          get logLevel() {
            return C;
          }
        }, Object.defineProperty(F, "logLevel", {
          enumerable: true
        });
      }), N, R = g(() => {
        D(), N = F;
      }), j, Z, te = g(() => {
        j = (o, v) => {
          let b = typeof document < "u" ? document.createElement("canvas") : new OffscreenCanvas(1, 1);
          b.width = o.dims[3], b.height = o.dims[2];
          let T = b.getContext("2d");
          if (T != null) {
            let S, I;
            v?.tensorLayout !== void 0 && v.tensorLayout === "NHWC" ? (S = o.dims[2], I = o.dims[3]) : (S = o.dims[3], I = o.dims[2]);
            let O = v?.format !== void 0 ? v.format : "RGB", L = v?.norm, z, B;
            L === void 0 || L.mean === void 0 ? z = [
              255,
              255,
              255,
              255
            ] : typeof L.mean == "number" ? z = [
              L.mean,
              L.mean,
              L.mean,
              L.mean
            ] : (z = [
              L.mean[0],
              L.mean[1],
              L.mean[2],
              0
            ], L.mean[3] !== void 0 && (z[3] = L.mean[3])), L === void 0 || L.bias === void 0 ? B = [
              0,
              0,
              0,
              0
            ] : typeof L.bias == "number" ? B = [
              L.bias,
              L.bias,
              L.bias,
              L.bias
            ] : (B = [
              L.bias[0],
              L.bias[1],
              L.bias[2],
              0
            ], L.bias[3] !== void 0 && (B[3] = L.bias[3]));
            let V = I * S, q = 0, X = V, ee = V * 2, ne = -1;
            O === "RGBA" ? (q = 0, X = V, ee = V * 2, ne = V * 3) : O === "RGB" ? (q = 0, X = V, ee = V * 2) : O === "RBG" && (q = 0, ee = V, X = V * 2);
            for (let se = 0; se < I; se++)
              for (let ge = 0; ge < S; ge++) {
                let ue = (o.data[q++] - B[0]) * z[0], re = (o.data[X++] - B[1]) * z[1], Te = (o.data[ee++] - B[2]) * z[2], we = ne === -1 ? 255 : (o.data[ne++] - B[3]) * z[3];
                T.fillStyle = "rgba(" + ue + "," + re + "," + Te + "," + we + ")", T.fillRect(ge, se, 1, 1);
              }
            if ("toDataURL" in b)
              return b.toDataURL();
            throw new Error("toDataURL is not supported");
          } else
            throw new Error("Can not access image data");
        }, Z = (o, v) => {
          let b = typeof document < "u" ? document.createElement("canvas").getContext("2d") : new OffscreenCanvas(1, 1).getContext("2d"), T;
          if (b != null) {
            let S, I, O;
            v?.tensorLayout !== void 0 && v.tensorLayout === "NHWC" ? (S = o.dims[2], I = o.dims[1], O = o.dims[3]) : (S = o.dims[3], I = o.dims[2], O = o.dims[1]);
            let L = v !== void 0 && v.format !== void 0 ? v.format : "RGB", z = v?.norm, B, V;
            z === void 0 || z.mean === void 0 ? B = [
              255,
              255,
              255,
              255
            ] : typeof z.mean == "number" ? B = [
              z.mean,
              z.mean,
              z.mean,
              z.mean
            ] : (B = [
              z.mean[0],
              z.mean[1],
              z.mean[2],
              255
            ], z.mean[3] !== void 0 && (B[3] = z.mean[3])), z === void 0 || z.bias === void 0 ? V = [
              0,
              0,
              0,
              0
            ] : typeof z.bias == "number" ? V = [
              z.bias,
              z.bias,
              z.bias,
              z.bias
            ] : (V = [
              z.bias[0],
              z.bias[1],
              z.bias[2],
              0
            ], z.bias[3] !== void 0 && (V[3] = z.bias[3]));
            let q = I * S;
            if (v !== void 0 && (v.format !== void 0 && O === 4 && v.format !== "RGBA" || O === 3 && v.format !== "RGB" && v.format !== "BGR"))
              throw new Error("Tensor format doesn't match input tensor dims");
            let X = 4, ee = 0, ne = 1, se = 2, ge = 3, ue = 0, re = q, Te = q * 2, we = -1;
            L === "RGBA" ? (ue = 0, re = q, Te = q * 2, we = q * 3) : L === "RGB" ? (ue = 0, re = q, Te = q * 2) : L === "RBG" && (ue = 0, Te = q, re = q * 2), T = b.createImageData(S, I);
            for (let Se = 0; Se < I * S; ee += X, ne += X, se += X, ge += X, Se++)
              T.data[ee] = (o.data[ue++] - V[0]) * B[0], T.data[ne] = (o.data[re++] - V[1]) * B[1], T.data[se] = (o.data[Te++] - V[2]) * B[2], T.data[ge] = we === -1 ? 255 : (o.data[we++] - V[3]) * B[3];
          } else
            throw new Error("Can not access image data");
          return T;
        };
      }), J, G, H, U, Q, he, fe = g(() => {
        vt(), J = (o, v) => {
          if (o === void 0)
            throw new Error("Image buffer must be defined");
          if (v.height === void 0 || v.width === void 0)
            throw new Error("Image height and width must be defined");
          if (v.tensorLayout === "NHWC")
            throw new Error("NHWC Tensor layout is not supported yet");
          let { height: b, width: T } = v, S = v.norm ?? {
            mean: 255,
            bias: 0
          }, I, O;
          typeof S.mean == "number" ? I = [
            S.mean,
            S.mean,
            S.mean,
            S.mean
          ] : I = [
            S.mean[0],
            S.mean[1],
            S.mean[2],
            S.mean[3] ?? 255
          ], typeof S.bias == "number" ? O = [
            S.bias,
            S.bias,
            S.bias,
            S.bias
          ] : O = [
            S.bias[0],
            S.bias[1],
            S.bias[2],
            S.bias[3] ?? 0
          ];
          let L = v.format !== void 0 ? v.format : "RGBA", z = v.tensorFormat !== void 0 && v.tensorFormat !== void 0 ? v.tensorFormat : "RGB", B = b * T, V = z === "RGBA" ? new Float32Array(B * 4) : new Float32Array(B * 3), q = 4, X = 0, ee = 1, ne = 2, se = 3, ge = 0, ue = B, re = B * 2, Te = -1;
          L === "RGB" && (q = 3, X = 0, ee = 1, ne = 2, se = -1), z === "RGBA" ? Te = B * 3 : z === "RBG" ? (ge = 0, re = B, ue = B * 2) : z === "BGR" && (re = 0, ue = B, ge = B * 2);
          for (let we = 0; we < B; we++, X += q, ne += q, ee += q, se += q)
            V[ge++] = (o[X] + O[0]) / I[0], V[ue++] = (o[ee] + O[1]) / I[1], V[re++] = (o[ne] + O[2]) / I[2], Te !== -1 && se !== -1 && (V[Te++] = (o[se] + O[3]) / I[3]);
          return z === "RGBA" ? new ot("float32", V, [
            1,
            4,
            b,
            T
          ]) : new ot("float32", V, [
            1,
            3,
            b,
            T
          ]);
        }, G = async (o, v) => {
          let b = typeof HTMLImageElement < "u" && o instanceof HTMLImageElement, T = typeof ImageData < "u" && o instanceof ImageData, S = typeof ImageBitmap < "u" && o instanceof ImageBitmap, I = typeof o == "string", O, L = v ?? {}, z = () => {
            if (typeof document < "u")
              return document.createElement("canvas");
            if (typeof OffscreenCanvas < "u")
              return new OffscreenCanvas(1, 1);
            throw new Error("Canvas is not supported");
          }, B = (V) => typeof HTMLCanvasElement < "u" && V instanceof HTMLCanvasElement || V instanceof OffscreenCanvas ? V.getContext("2d") : null;
          if (b) {
            let V = z();
            V.width = o.width, V.height = o.height;
            let q = B(V);
            if (q != null) {
              let X = o.height, ee = o.width;
              if (v !== void 0 && v.resizedHeight !== void 0 && v.resizedWidth !== void 0 && (X = v.resizedHeight, ee = v.resizedWidth), v !== void 0) {
                if (L = v, v.tensorFormat !== void 0)
                  throw new Error("Image input config format must be RGBA for HTMLImageElement");
                L.tensorFormat = "RGBA", L.height = X, L.width = ee;
              } else
                L.tensorFormat = "RGBA", L.height = X, L.width = ee;
              q.drawImage(o, 0, 0), O = q.getImageData(0, 0, ee, X).data;
            } else
              throw new Error("Can not access image data");
          } else if (T) {
            let V, q;
            if (v !== void 0 && v.resizedWidth !== void 0 && v.resizedHeight !== void 0 ? (V = v.resizedHeight, q = v.resizedWidth) : (V = o.height, q = o.width), v !== void 0 && (L = v), L.format = "RGBA", L.height = V, L.width = q, v !== void 0) {
              let X = z();
              X.width = q, X.height = V;
              let ee = B(X);
              if (ee != null)
                ee.putImageData(o, 0, 0), O = ee.getImageData(0, 0, q, V).data;
              else
                throw new Error("Can not access image data");
            } else
              O = o.data;
          } else if (S) {
            if (v === void 0)
              throw new Error("Please provide image config with format for Imagebitmap");
            let V = z();
            V.width = o.width, V.height = o.height;
            let q = B(V);
            if (q != null) {
              let X = o.height, ee = o.width;
              return q.drawImage(o, 0, 0, ee, X), O = q.getImageData(0, 0, ee, X).data, L.height = X, L.width = ee, J(O, L);
            } else
              throw new Error("Can not access image data");
          } else {
            if (I)
              return new Promise((V, q) => {
                let X = z(), ee = B(X);
                if (!o || !ee)
                  return q();
                let ne = new Image();
                ne.crossOrigin = "Anonymous", ne.src = o, ne.onload = () => {
                  X.width = ne.width, X.height = ne.height, ee.drawImage(ne, 0, 0, X.width, X.height);
                  let se = ee.getImageData(0, 0, X.width, X.height);
                  L.height = X.height, L.width = X.width, V(J(se.data, L));
                };
              });
            throw new Error("Input data provided is not supported - aborted tensor creation");
          }
          if (O !== void 0)
            return J(O, L);
          throw new Error("Input data provided is not supported - aborted tensor creation");
        }, H = (o, v) => {
          let { width: b, height: T, download: S, dispose: I } = v, O = [
            1,
            T,
            b,
            4
          ];
          return new ot({
            location: "texture",
            type: "float32",
            texture: o,
            dims: O,
            download: S,
            dispose: I
          });
        }, U = (o, v) => {
          let { dataType: b, dims: T, download: S, dispose: I } = v;
          return new ot({
            location: "gpu-buffer",
            type: b ?? "float32",
            gpuBuffer: o,
            dims: T,
            download: S,
            dispose: I
          });
        }, Q = (o, v) => {
          let { dataType: b, dims: T, download: S, dispose: I } = v;
          return new ot({
            location: "ml-tensor",
            type: b ?? "float32",
            mlTensor: o,
            dims: T,
            download: S,
            dispose: I
          });
        }, he = (o, v, b) => new ot({
          location: "cpu-pinned",
          type: o,
          data: v,
          dims: b ?? [
            v.length
          ]
        });
      }), Me, pe, oe, be, Ee = g(() => {
        Me = /* @__PURE__ */ new Map([
          [
            "float32",
            Float32Array
          ],
          [
            "uint8",
            Uint8Array
          ],
          [
            "int8",
            Int8Array
          ],
          [
            "uint16",
            Uint16Array
          ],
          [
            "int16",
            Int16Array
          ],
          [
            "int32",
            Int32Array
          ],
          [
            "bool",
            Uint8Array
          ],
          [
            "float64",
            Float64Array
          ],
          [
            "uint32",
            Uint32Array
          ],
          [
            "int4",
            Uint8Array
          ],
          [
            "uint4",
            Uint8Array
          ]
        ]), pe = /* @__PURE__ */ new Map([
          [
            Float32Array,
            "float32"
          ],
          [
            Uint8Array,
            "uint8"
          ],
          [
            Int8Array,
            "int8"
          ],
          [
            Uint16Array,
            "uint16"
          ],
          [
            Int16Array,
            "int16"
          ],
          [
            Int32Array,
            "int32"
          ],
          [
            Float64Array,
            "float64"
          ],
          [
            Uint32Array,
            "uint32"
          ]
        ]), oe = false, be = () => {
          if (!oe) {
            oe = true;
            let o = typeof BigInt64Array < "u" && BigInt64Array.from, v = typeof BigUint64Array < "u" && BigUint64Array.from, b = globalThis.Float16Array, T = typeof b < "u" && b.from;
            o && (Me.set("int64", BigInt64Array), pe.set(BigInt64Array, "int64")), v && (Me.set("uint64", BigUint64Array), pe.set(BigUint64Array, "uint64")), T ? (Me.set("float16", b), pe.set(b, "float16")) : Me.set("float16", Uint16Array);
          }
        };
      }), Oe, Ye, We = g(() => {
        vt(), Oe = (o) => {
          let v = 1;
          for (let b = 0; b < o.length; b++) {
            let T = o[b];
            if (typeof T != "number" || !Number.isSafeInteger(T))
              throw new TypeError(`dims[${b}] must be an integer, got: ${T}`);
            if (T < 0)
              throw new RangeError(`dims[${b}] must be a non-negative integer, got: ${T}`);
            v *= T;
          }
          return v;
        }, Ye = (o, v) => {
          switch (o.location) {
            case "cpu":
              return new ot(o.type, o.data, v);
            case "cpu-pinned":
              return new ot({
                location: "cpu-pinned",
                data: o.data,
                type: o.type,
                dims: v
              });
            case "texture":
              return new ot({
                location: "texture",
                texture: o.texture,
                type: o.type,
                dims: v
              });
            case "gpu-buffer":
              return new ot({
                location: "gpu-buffer",
                gpuBuffer: o.gpuBuffer,
                type: o.type,
                dims: v
              });
            case "ml-tensor":
              return new ot({
                location: "ml-tensor",
                mlTensor: o.mlTensor,
                type: o.type,
                dims: v
              });
            default:
              throw new Error(`tensorReshape: tensor location ${o.location} is not supported`);
          }
        };
      }), ot, vt = g(() => {
        te(), fe(), Ee(), We(), ot = class {
          constructor(o, v, b) {
            be();
            let T, S;
            if (typeof o == "object" && "location" in o)
              switch (this.dataLocation = o.location, T = o.type, S = o.dims, o.location) {
                case "cpu-pinned": {
                  let O = Me.get(T);
                  if (!O)
                    throw new TypeError(`unsupported type "${T}" to create tensor from pinned buffer`);
                  if (!(o.data instanceof O))
                    throw new TypeError(`buffer should be of type ${O.name}`);
                  this.cpuData = o.data;
                  break;
                }
                case "texture": {
                  if (T !== "float32")
                    throw new TypeError(`unsupported type "${T}" to create tensor from texture`);
                  this.gpuTextureData = o.texture, this.downloader = o.download, this.disposer = o.dispose;
                  break;
                }
                case "gpu-buffer": {
                  if (T !== "float32" && T !== "float16" && T !== "int32" && T !== "int64" && T !== "uint32" && T !== "uint8" && T !== "bool" && T !== "uint4" && T !== "int4")
                    throw new TypeError(`unsupported type "${T}" to create tensor from gpu buffer`);
                  this.gpuBufferData = o.gpuBuffer, this.downloader = o.download, this.disposer = o.dispose;
                  break;
                }
                case "ml-tensor": {
                  if (T !== "float32" && T !== "float16" && T !== "int32" && T !== "int64" && T !== "uint32" && T !== "uint64" && T !== "int8" && T !== "uint8" && T !== "bool" && T !== "uint4" && T !== "int4")
                    throw new TypeError(`unsupported type "${T}" to create tensor from MLTensor`);
                  this.mlTensorData = o.mlTensor, this.downloader = o.download, this.disposer = o.dispose;
                  break;
                }
                default:
                  throw new Error(`Tensor constructor: unsupported location '${this.dataLocation}'`);
              }
            else {
              let O, L;
              if (typeof o == "string")
                if (T = o, L = b, o === "string") {
                  if (!Array.isArray(v))
                    throw new TypeError("A string tensor's data must be a string array.");
                  O = v;
                } else {
                  let z = Me.get(o);
                  if (z === void 0)
                    throw new TypeError(`Unsupported tensor type: ${o}.`);
                  if (Array.isArray(v)) {
                    if (o === "float16" && z === Uint16Array || o === "uint4" || o === "int4")
                      throw new TypeError(`Creating a ${o} tensor from number array is not supported. Please use ${z.name} as data.`);
                    o === "uint64" || o === "int64" ? O = z.from(v, BigInt) : O = z.from(v);
                  } else if (v instanceof z)
                    O = v;
                  else if (v instanceof Uint8ClampedArray)
                    if (o === "uint8")
                      O = Uint8Array.from(v);
                    else
                      throw new TypeError("A Uint8ClampedArray tensor's data must be type of uint8");
                  else if (o === "float16" && v instanceof Uint16Array && z !== Uint16Array)
                    O = new globalThis.Float16Array(v.buffer, v.byteOffset, v.length);
                  else
                    throw new TypeError(`A ${T} tensor's data must be type of ${z}`);
                }
              else if (L = v, Array.isArray(o)) {
                if (o.length === 0)
                  throw new TypeError("Tensor type cannot be inferred from an empty array.");
                let z = typeof o[0];
                if (z === "string")
                  T = "string", O = o;
                else if (z === "boolean")
                  T = "bool", O = Uint8Array.from(o);
                else
                  throw new TypeError(`Invalid element type of data array: ${z}.`);
              } else if (o instanceof Uint8ClampedArray)
                T = "uint8", O = Uint8Array.from(o);
              else {
                let z = pe.get(o.constructor);
                if (z === void 0)
                  throw new TypeError(`Unsupported type for tensor data: ${o.constructor}.`);
                T = z, O = o;
              }
              if (L === void 0)
                L = [
                  O.length
                ];
              else if (!Array.isArray(L))
                throw new TypeError("A tensor's dims must be a number array");
              S = L, this.cpuData = O, this.dataLocation = "cpu";
            }
            let I = Oe(S);
            if (this.cpuData && I !== this.cpuData.length && !((T === "uint4" || T === "int4") && Math.ceil(I / 2) === this.cpuData.length))
              throw new Error(`Tensor's size(${I}) does not match data length(${this.cpuData.length}).`);
            this.type = T, this.dims = S, this.size = I;
          }
          static async fromImage(o, v) {
            return G(o, v);
          }
          static fromTexture(o, v) {
            return H(o, v);
          }
          static fromGpuBuffer(o, v) {
            return U(o, v);
          }
          static fromMLTensor(o, v) {
            return Q(o, v);
          }
          static fromPinnedBuffer(o, v, b) {
            return he(o, v, b);
          }
          toDataURL(o) {
            return j(this, o);
          }
          toImageData(o) {
            return Z(this, o);
          }
          get data() {
            if (this.ensureValid(), !this.cpuData)
              throw new Error("The data is not on CPU. Use `getData()` to download GPU data to CPU, or use `texture` or `gpuBuffer` property to access the GPU data directly.");
            return this.cpuData;
          }
          get location() {
            return this.dataLocation;
          }
          get texture() {
            if (this.ensureValid(), !this.gpuTextureData)
              throw new Error("The data is not stored as a WebGL texture.");
            return this.gpuTextureData;
          }
          get gpuBuffer() {
            if (this.ensureValid(), !this.gpuBufferData)
              throw new Error("The data is not stored as a WebGPU buffer.");
            return this.gpuBufferData;
          }
          get mlTensor() {
            if (this.ensureValid(), !this.mlTensorData)
              throw new Error("The data is not stored as a WebNN MLTensor.");
            return this.mlTensorData;
          }
          async getData(o) {
            switch (this.ensureValid(), this.dataLocation) {
              case "cpu":
              case "cpu-pinned":
                return this.data;
              case "texture":
              case "gpu-buffer":
              case "ml-tensor": {
                if (!this.downloader)
                  throw new Error("The current tensor is not created with a specified data downloader.");
                if (this.isDownloading)
                  throw new Error("The current tensor is being downloaded.");
                try {
                  this.isDownloading = true;
                  let v = await this.downloader();
                  return this.downloader = void 0, this.dataLocation = "cpu", this.cpuData = v, o && this.disposer && (this.disposer(), this.disposer = void 0), v;
                } finally {
                  this.isDownloading = false;
                }
              }
              default:
                throw new Error(`cannot get data from location: ${this.dataLocation}`);
            }
          }
          dispose() {
            if (this.isDownloading)
              throw new Error("The current tensor is being downloaded.");
            this.disposer && (this.disposer(), this.disposer = void 0), this.cpuData = void 0, this.gpuTextureData = void 0, this.gpuBufferData = void 0, this.mlTensorData = void 0, this.downloader = void 0, this.isDownloading = void 0, this.dataLocation = "none";
          }
          ensureValid() {
            if (this.dataLocation === "none")
              throw new Error("The tensor is disposed.");
          }
          reshape(o) {
            if (this.ensureValid(), this.downloader || this.disposer)
              throw new Error("Cannot reshape a tensor that owns GPU resource.");
            return Ye(this, o);
          }
        };
      }), qe, _e = g(() => {
        vt(), qe = ot;
      }), le, De, Be, Ze, rt = g(() => {
        D(), le = (o, v) => {
          (typeof F.trace > "u" ? !F.wasm.trace : !F.trace) || console.timeStamp(`${o}::ORT::${v}`);
        }, De = (o, v) => {
          let b = new Error().stack?.split(/\r\n|\r|\n/g) || [], T = false;
          for (let S = 0; S < b.length; S++) {
            if (T && !b[S].includes("TRACE_FUNC")) {
              let I = `FUNC_${o}::${b[S].trim().split(" ")[1]}`;
              v && (I += `::${v}`), le("CPU", I);
              return;
            }
            b[S].includes("TRACE_FUNC") && (T = true);
          }
        }, Be = (o) => {
          (typeof F.trace > "u" ? !F.wasm.trace : !F.trace) || De("BEGIN", o);
        }, Ze = (o) => {
          (typeof F.trace > "u" ? !F.wasm.trace : !F.trace) || De("END", o);
        };
      }), je, it = g(() => {
        E(), _e(), rt(), je = class kp {
          constructor(v) {
            this.handler = v;
          }
          async run(v, b, T) {
            Be();
            let S = {}, I = {};
            if (typeof v != "object" || v === null || v instanceof qe || Array.isArray(v))
              throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
            let O = true;
            if (typeof b == "object") {
              if (b === null)
                throw new TypeError("Unexpected argument[1]: cannot be null.");
              if (b instanceof qe)
                throw new TypeError("'fetches' cannot be a Tensor");
              if (Array.isArray(b)) {
                if (b.length === 0)
                  throw new TypeError("'fetches' cannot be an empty array.");
                O = false;
                for (let B of b) {
                  if (typeof B != "string")
                    throw new TypeError("'fetches' must be a string array or an object.");
                  if (this.outputNames.indexOf(B) === -1)
                    throw new RangeError(`'fetches' contains invalid output name: ${B}.`);
                  S[B] = null;
                }
                if (typeof T == "object" && T !== null)
                  I = T;
                else if (typeof T < "u")
                  throw new TypeError("'options' must be an object.");
              } else {
                let B = false, V = Object.getOwnPropertyNames(b);
                for (let q of this.outputNames)
                  if (V.indexOf(q) !== -1) {
                    let X = b[q];
                    (X === null || X instanceof qe) && (B = true, O = false, S[q] = X);
                  }
                if (B) {
                  if (typeof T == "object" && T !== null)
                    I = T;
                  else if (typeof T < "u")
                    throw new TypeError("'options' must be an object.");
                } else
                  I = b;
              }
            } else if (typeof b < "u")
              throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
            for (let B of this.inputNames)
              if (typeof v[B] > "u")
                throw new Error(`input '${B}' is missing in 'feeds'.`);
            if (O)
              for (let B of this.outputNames)
                S[B] = null;
            let L = await this.handler.run(v, S, I), z = {};
            for (let B in L)
              if (Object.hasOwnProperty.call(L, B)) {
                let V = L[B];
                V instanceof qe ? z[B] = V : z[B] = new qe(V.type, V.data, V.dims);
              }
            return Ze(), z;
          }
          async release() {
            return this.handler.dispose();
          }
          static async create(v, b, T, S) {
            Be();
            let I, O = {};
            if (typeof v == "string") {
              if (I = v, typeof b == "object" && b !== null)
                O = b;
              else if (typeof b < "u")
                throw new TypeError("'options' must be an object.");
            } else if (v instanceof Uint8Array) {
              if (I = v, typeof b == "object" && b !== null)
                O = b;
              else if (typeof b < "u")
                throw new TypeError("'options' must be an object.");
            } else if (v instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && v instanceof SharedArrayBuffer) {
              let V = v, q = 0, X = v.byteLength;
              if (typeof b == "object" && b !== null)
                O = b;
              else if (typeof b == "number") {
                if (q = b, !Number.isSafeInteger(q))
                  throw new RangeError("'byteOffset' must be an integer.");
                if (q < 0 || q >= V.byteLength)
                  throw new RangeError(`'byteOffset' is out of range [0, ${V.byteLength}).`);
                if (X = v.byteLength - q, typeof T == "number") {
                  if (X = T, !Number.isSafeInteger(X))
                    throw new RangeError("'byteLength' must be an integer.");
                  if (X <= 0 || q + X > V.byteLength)
                    throw new RangeError(`'byteLength' is out of range (0, ${V.byteLength - q}].`);
                  if (typeof S == "object" && S !== null)
                    O = S;
                  else if (typeof S < "u")
                    throw new TypeError("'options' must be an object.");
                } else if (typeof T < "u")
                  throw new TypeError("'byteLength' must be a number.");
              } else if (typeof b < "u")
                throw new TypeError("'options' must be an object.");
              I = new Uint8Array(V, q, X);
            } else
              throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
            let [L, z] = await P(O), B = await L.createInferenceSessionHandler(I, z);
            return Ze(), new kp(B);
          }
          startProfiling() {
            this.handler.startProfiling();
          }
          endProfiling() {
            this.handler.endProfiling();
          }
          get inputNames() {
            return this.handler.inputNames;
          }
          get outputNames() {
            return this.handler.outputNames;
          }
          get inputMetadata() {
            return this.handler.inputMetadata;
          }
          get outputMetadata() {
            return this.handler.outputMetadata;
          }
        };
      }), Ge, lt = g(() => {
        it(), Ge = je;
      }), ht = g(() => {
      }), mt = g(() => {
      }), Je = g(() => {
      }), Rt = g(() => {
      }), pt = {};
      _(pt, {
        InferenceSession: () => Ge,
        TRACE: () => le,
        TRACE_FUNC_BEGIN: () => Be,
        TRACE_FUNC_END: () => Ze,
        Tensor: () => qe,
        env: () => N,
        registerBackend: () => p
      });
      var At = g(() => {
        k(), R(), lt(), _e(), ht(), mt(), rt(), Je(), Rt();
      }), Ot = g(() => {
      }), Ct = {};
      _(Ct, {
        default: () => _n
      });
      var St, zt, _n, Zt = g(() => {
        sp(), Ft(), ar(), St = "ort-wasm-proxy-worker", zt = globalThis.self?.name === St, zt && (self.onmessage = (o) => {
          let { type: v, in: b } = o.data;
          try {
            switch (v) {
              case "init-wasm":
                Ue(b.wasm).then(() => {
                  Di(b).then(() => {
                    postMessage({
                      type: v
                    });
                  }, (T) => {
                    postMessage({
                      type: v,
                      err: T
                    });
                  });
                }, (T) => {
                  postMessage({
                    type: v,
                    err: T
                  });
                });
                break;
              case "init-ep": {
                let { epName: T, env: S } = b;
                Li(S, T).then(() => {
                  postMessage({
                    type: v
                  });
                }, (I) => {
                  postMessage({
                    type: v,
                    err: I
                  });
                });
                break;
              }
              case "copy-from": {
                let { buffer: T } = b, S = Ri(T);
                postMessage({
                  type: v,
                  out: S
                });
                break;
              }
              case "create": {
                let { model: T, options: S } = b;
                ed(T, S).then((I) => {
                  postMessage({
                    type: v,
                    out: I
                  });
                }, (I) => {
                  postMessage({
                    type: v,
                    err: I
                  });
                });
                break;
              }
              case "release":
                td(b), postMessage({
                  type: v
                });
                break;
              case "run": {
                let { sessionId: T, inputIndices: S, inputs: I, outputIndices: O, options: L } = b;
                rd(T, S, I, O, new Array(O.length).fill(null), L).then((z) => {
                  z.some((B) => B[3] !== "cpu") ? postMessage({
                    type: v,
                    err: "Proxy does not support non-cpu tensor location."
                  }) : postMessage({
                    type: v,
                    out: z
                  }, od([
                    ...I,
                    ...z
                  ]));
                }, (z) => {
                  postMessage({
                    type: v,
                    err: z
                  });
                });
                break;
              }
              case "end-profiling":
                sd(b), postMessage({
                  type: v
                });
                break;
              default:
            }
          } catch (T) {
            postMessage({
              type: v,
              err: T
            });
          }
        }), _n = zt ? null : (o) => new Worker(o ?? Cn, {
          type: "classic",
          name: St
        });
      }), en, qt, Cn, Hn, Un, kn, ln, nr, ur, rr, Jt, wt, tn, ar = g(() => {
        Ot(), en = typeof location > "u" ? void 0 : location.origin, qt = () => typeof document < "u" ? document.currentScript?.src : typeof self < "u" ? self.location?.href : void 0, Cn = qt(), Hn = () => {
          if (Cn && !Cn.startsWith("blob:"))
            return Cn.substring(0, Cn.lastIndexOf("/") + 1);
        }, Un = (o, v) => {
          try {
            let b = v ?? Cn;
            return (b ? new URL(o, b) : new URL(o)).origin === en;
          } catch {
            return false;
          }
        }, kn = (o, v) => {
          let b = v ?? Cn;
          try {
            return (b ? new URL(o, b) : new URL(o)).href;
          } catch {
            return;
          }
        }, ln = (o, v) => `${v ?? "./"}${o}`, nr = async (o) => {
          let v = await (await fetch(o, {
            credentials: "same-origin"
          })).blob();
          return URL.createObjectURL(v);
        }, ur = async (o) => (await __vitePreload(() => import(o).then(async (m2) => {
          await m2.__tla;
          return m2;
        }), [])).default, rr = (Zt(), r(Ct)).default, Jt = async () => {
          if (!Cn)
            throw new Error("Failed to load proxy worker: cannot determine the script source URL.");
          if (Un(Cn))
            return [
              void 0,
              rr()
            ];
          let o = await nr(Cn);
          return [
            o,
            rr(o)
          ];
        }, wt = void 0, tn = async (o, v, b) => {
          if (!o && !v && wt && Cn && Un(Cn))
            return [
              void 0,
              wt
            ];
          {
            let T = "ort-wasm-simd-threaded.jsep.mjs", S = o ?? kn(T, v), I = b && S && !Un(S, v), O = I ? await nr(S) : S ?? ln(T, v);
            return [
              I ? O : void 0,
              await ur(O)
            ];
          }
        };
      }), on, sr, W, ve, de, ye, ke, Ue, He, Ft = g(() => {
        ar(), sr = false, W = false, ve = false, de = () => {
          if (typeof SharedArrayBuffer > "u")
            return false;
          try {
            return typeof MessageChannel < "u" && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([
              0,
              97,
              115,
              109,
              1,
              0,
              0,
              0,
              1,
              4,
              1,
              96,
              0,
              0,
              3,
              2,
              1,
              0,
              5,
              4,
              1,
              3,
              1,
              1,
              10,
              11,
              1,
              9,
              0,
              65,
              0,
              254,
              16,
              2,
              0,
              26,
              11
            ]));
          } catch {
            return false;
          }
        }, ye = () => {
          try {
            return WebAssembly.validate(new Uint8Array([
              0,
              97,
              115,
              109,
              1,
              0,
              0,
              0,
              1,
              4,
              1,
              96,
              0,
              0,
              3,
              2,
              1,
              0,
              10,
              30,
              1,
              28,
              0,
              65,
              0,
              253,
              15,
              253,
              12,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              0,
              253,
              186,
              1,
              26,
              11
            ]));
          } catch {
            return false;
          }
        }, ke = () => {
          try {
            return WebAssembly.validate(new Uint8Array([
              0,
              97,
              115,
              109,
              1,
              0,
              0,
              0,
              1,
              5,
              1,
              96,
              0,
              1,
              123,
              3,
              2,
              1,
              0,
              10,
              19,
              1,
              17,
              0,
              65,
              1,
              253,
              15,
              65,
              2,
              253,
              15,
              65,
              3,
              253,
              15,
              253,
              147,
              2,
              11
            ]));
          } catch {
            return false;
          }
        }, Ue = async (o) => {
          if (sr)
            return Promise.resolve();
          if (W)
            throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
          if (ve)
            throw new Error("previous call to 'initializeWebAssembly()' failed.");
          W = true;
          let v = o.initTimeout, b = o.numThreads;
          if (o.simd !== false) {
            if (o.simd === "relaxed") {
              if (!ke())
                throw new Error("Relaxed WebAssembly SIMD is not supported in the current environment.");
            } else if (!ye())
              throw new Error("WebAssembly SIMD is not supported in the current environment.");
          }
          let T = de();
          b > 1 && !T && (typeof self < "u" && !self.crossOriginIsolated && console.warn("env.wasm.numThreads is set to " + b + ", but this will not work unless you enable crossOriginIsolated mode. See https://web.dev/cross-origin-isolation-guide/ for more info."), console.warn("WebAssembly multi-threading is not supported in the current environment. Falling back to single-threading."), o.numThreads = b = 1);
          let S = o.wasmPaths, I = typeof S == "string" ? S : void 0, O = S?.mjs, L = O?.href ?? O, z = S?.wasm, B = z?.href ?? z, V = o.wasmBinary, [q, X] = await tn(L, I, b > 1), ee = false, ne = [];
          if (v > 0 && ne.push(new Promise((se) => {
            setTimeout(() => {
              ee = true, se();
            }, v);
          })), ne.push(new Promise((se, ge) => {
            let ue = {
              numThreads: b
            };
            if (V)
              ue.wasmBinary = V;
            else if (B || I)
              ue.locateFile = (re) => B ?? I + re;
            else if (L && L.indexOf("blob:") !== 0)
              ue.locateFile = (re) => new URL(re, L).href;
            else if (q) {
              let re = Hn();
              re && (ue.locateFile = (Te) => re + Te);
            }
            X(ue).then((re) => {
              W = false, sr = true, on = re, se(), q && URL.revokeObjectURL(q);
            }, (re) => {
              W = false, ve = true, ge(re);
            });
          })), await Promise.race(ne), ee)
            throw new Error(`WebAssembly backend initializing failed due to timeout: ${v}ms`);
        }, He = () => {
          if (sr && on)
            return on;
          throw new Error("WebAssembly is not initialized yet.");
        };
      }), Bt, Et, jt, ie = g(() => {
        Ft(), Bt = (o, v) => {
          let b = He(), T = b.lengthBytesUTF8(o) + 1, S = b._malloc(T);
          return b.stringToUTF8(o, S, T), v.push(S), S;
        }, Et = (o, v, b, T) => {
          if (typeof o == "object" && o !== null) {
            if (b.has(o))
              throw new Error("Circular reference in options");
            b.add(o);
          }
          Object.entries(o).forEach(([S, I]) => {
            let O = v ? v + S : S;
            if (typeof I == "object")
              Et(I, O + ".", b, T);
            else if (typeof I == "string" || typeof I == "number")
              T(O, I.toString());
            else if (typeof I == "boolean")
              T(O, I ? "1" : "0");
            else
              throw new Error(`Can't handle extra config type: ${typeof I}`);
          });
        }, jt = (o) => {
          let v = He(), b = v.stackSave();
          try {
            let T = v.PTR_SIZE, S = v.stackAlloc(2 * T);
            v._OrtGetLastError(S, S + T);
            let I = Number(v.getValue(S, T === 4 ? "i32" : "i64")), O = v.getValue(S + T, "*"), L = O ? v.UTF8ToString(O) : "";
            throw new Error(`${o} ERROR_CODE: ${I}, ERROR_MESSAGE: ${L}`);
          } finally {
            v.stackRestore(b);
          }
        };
      }), xe, Ie = g(() => {
        Ft(), ie(), xe = (o) => {
          let v = He(), b = 0, T = [], S = o || {};
          try {
            if (o?.logSeverityLevel === void 0)
              S.logSeverityLevel = 2;
            else if (typeof o.logSeverityLevel != "number" || !Number.isInteger(o.logSeverityLevel) || o.logSeverityLevel < 0 || o.logSeverityLevel > 4)
              throw new Error(`log serverity level is not valid: ${o.logSeverityLevel}`);
            if (o?.logVerbosityLevel === void 0)
              S.logVerbosityLevel = 0;
            else if (typeof o.logVerbosityLevel != "number" || !Number.isInteger(o.logVerbosityLevel))
              throw new Error(`log verbosity level is not valid: ${o.logVerbosityLevel}`);
            o?.terminate === void 0 && (S.terminate = false);
            let I = 0;
            return o?.tag !== void 0 && (I = Bt(o.tag, T)), b = v._OrtCreateRunOptions(S.logSeverityLevel, S.logVerbosityLevel, !!S.terminate, I), b === 0 && jt("Can't create run options."), o?.extra !== void 0 && Et(o.extra, "", /* @__PURE__ */ new WeakSet(), (O, L) => {
              let z = Bt(O, T), B = Bt(L, T);
              v._OrtAddRunConfigEntry(b, z, B) !== 0 && jt(`Can't set a run config entry: ${O} - ${L}.`);
            }), [
              b,
              T
            ];
          } catch (I) {
            throw b !== 0 && v._OrtReleaseRunOptions(b), T.forEach((O) => v._free(O)), I;
          }
        };
      }), Re, Ve, Qe, _t, Gt, Lt, dn = g(() => {
        Ft(), ie(), Re = (o) => {
          switch (o) {
            case "disabled":
              return 0;
            case "basic":
              return 1;
            case "extended":
              return 2;
            case "all":
              return 99;
            default:
              throw new Error(`unsupported graph optimization level: ${o}`);
          }
        }, Ve = (o) => {
          switch (o) {
            case "sequential":
              return 0;
            case "parallel":
              return 1;
            default:
              throw new Error(`unsupported execution mode: ${o}`);
          }
        }, Qe = (o) => {
          o.extra || (o.extra = {}), o.extra.session || (o.extra.session = {});
          let v = o.extra.session;
          v.use_ort_model_bytes_directly || (v.use_ort_model_bytes_directly = "1"), o.executionProviders && o.executionProviders.some((b) => (typeof b == "string" ? b : b.name) === "webgpu") && (o.enableMemPattern = false);
        }, _t = (o, v, b, T) => {
          let S = Bt(v, T), I = Bt(b, T);
          He()._OrtAddSessionConfigEntry(o, S, I) !== 0 && jt(`Can't set a session config entry: ${v} - ${b}.`);
        }, Gt = async (o, v, b) => {
          for (let T of v) {
            let S = typeof T == "string" ? T : T.name, I = [];
            switch (S) {
              case "webnn":
                if (S = "WEBNN", typeof T != "string") {
                  let V = T?.deviceType;
                  V && _t(o, "deviceType", V, b);
                }
                break;
              case "webgpu":
                if (S = "JS", typeof T != "string") {
                  let V = T;
                  if (V?.preferredLayout) {
                    if (V.preferredLayout !== "NCHW" && V.preferredLayout !== "NHWC")
                      throw new Error(`preferredLayout must be either 'NCHW' or 'NHWC': ${V.preferredLayout}`);
                    _t(o, "preferredLayout", V.preferredLayout, b);
                  }
                }
                break;
              case "wasm":
              case "cpu":
                continue;
              default:
                throw new Error(`not supported execution provider: ${S}`);
            }
            let O = Bt(S, b), L = I.length, z = 0, B = 0;
            if (L > 0) {
              z = He()._malloc(L * He().PTR_SIZE), b.push(z), B = He()._malloc(L * He().PTR_SIZE), b.push(B);
              for (let V = 0; V < L; V++)
                He().setValue(z + V * He().PTR_SIZE, I[V][0], "*"), He().setValue(B + V * He().PTR_SIZE, I[V][1], "*");
            }
            await He()._OrtAppendExecutionProvider(o, O, z, B, L) !== 0 && jt(`Can't append execution provider: ${S}.`);
          }
        }, Lt = async (o) => {
          let v = He(), b = 0, T = [], S = o || {};
          Qe(S);
          try {
            let I = Re(S.graphOptimizationLevel ?? "all"), O = Ve(S.executionMode ?? "sequential"), L = typeof S.logId == "string" ? Bt(S.logId, T) : 0, z = S.logSeverityLevel ?? 2;
            if (!Number.isInteger(z) || z < 0 || z > 4)
              throw new Error(`log serverity level is not valid: ${z}`);
            let B = S.logVerbosityLevel ?? 0;
            if (!Number.isInteger(B) || B < 0 || B > 4)
              throw new Error(`log verbosity level is not valid: ${B}`);
            let V = typeof S.optimizedModelFilePath == "string" ? Bt(S.optimizedModelFilePath, T) : 0;
            if (b = v._OrtCreateSessionOptions(I, !!S.enableCpuMemArena, !!S.enableMemPattern, O, !!S.enableProfiling, 0, L, z, B, V), b === 0 && jt("Can't create session options."), S.executionProviders && await Gt(b, S.executionProviders, T), S.enableGraphCapture !== void 0) {
              if (typeof S.enableGraphCapture != "boolean")
                throw new Error(`enableGraphCapture must be a boolean value: ${S.enableGraphCapture}`);
              _t(b, "enableGraphCapture", S.enableGraphCapture.toString(), T);
            }
            if (S.freeDimensionOverrides)
              for (let [q, X] of Object.entries(S.freeDimensionOverrides)) {
                if (typeof q != "string")
                  throw new Error(`free dimension override name must be a string: ${q}`);
                if (typeof X != "number" || !Number.isInteger(X) || X < 0)
                  throw new Error(`free dimension override value must be a non-negative integer: ${X}`);
                let ee = Bt(q, T);
                v._OrtAddFreeDimensionOverride(b, ee, X) !== 0 && jt(`Can't set a free dimension override: ${q} - ${X}.`);
              }
            return S.extra !== void 0 && Et(S.extra, "", /* @__PURE__ */ new WeakSet(), (q, X) => {
              _t(b, q, X, T);
            }), [
              b,
              T
            ];
          } catch (I) {
            throw b !== 0 && v._OrtReleaseSessionOptions(b) !== 0 && jt("Can't release session options."), T.forEach((O) => v._free(O)), I;
          }
        };
      }), bn, Pn, Sn, et, cn, Tn, Ln, Xn, Kt = g(() => {
        bn = (o) => {
          switch (o) {
            case "int8":
              return 3;
            case "uint8":
              return 2;
            case "bool":
              return 9;
            case "int16":
              return 5;
            case "uint16":
              return 4;
            case "int32":
              return 6;
            case "uint32":
              return 12;
            case "float16":
              return 10;
            case "float32":
              return 1;
            case "float64":
              return 11;
            case "string":
              return 8;
            case "int64":
              return 7;
            case "uint64":
              return 13;
            case "int4":
              return 22;
            case "uint4":
              return 21;
            default:
              throw new Error(`unsupported data type: ${o}`);
          }
        }, Pn = (o) => {
          switch (o) {
            case 3:
              return "int8";
            case 2:
              return "uint8";
            case 9:
              return "bool";
            case 5:
              return "int16";
            case 4:
              return "uint16";
            case 6:
              return "int32";
            case 12:
              return "uint32";
            case 10:
              return "float16";
            case 1:
              return "float32";
            case 11:
              return "float64";
            case 8:
              return "string";
            case 7:
              return "int64";
            case 13:
              return "uint64";
            case 22:
              return "int4";
            case 21:
              return "uint4";
            default:
              throw new Error(`unsupported data type: ${o}`);
          }
        }, Sn = (o, v) => {
          let b = [
            -1,
            4,
            1,
            1,
            2,
            2,
            4,
            8,
            -1,
            1,
            2,
            8,
            4,
            8,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            -1,
            0.5,
            0.5
          ][o], T = typeof v == "number" ? v : v.reduce((S, I) => S * I, 1);
          return b > 0 ? Math.ceil(T * b) : void 0;
        }, et = (o) => {
          switch (o) {
            case "float16":
              return typeof Float16Array < "u" && Float16Array.from ? Float16Array : Uint16Array;
            case "float32":
              return Float32Array;
            case "uint8":
              return Uint8Array;
            case "int8":
              return Int8Array;
            case "uint16":
              return Uint16Array;
            case "int16":
              return Int16Array;
            case "int32":
              return Int32Array;
            case "bool":
              return Uint8Array;
            case "float64":
              return Float64Array;
            case "uint32":
              return Uint32Array;
            case "int64":
              return BigInt64Array;
            case "uint64":
              return BigUint64Array;
            default:
              throw new Error(`unsupported type: ${o}`);
          }
        }, cn = (o) => {
          switch (o) {
            case "verbose":
              return 0;
            case "info":
              return 1;
            case "warning":
              return 2;
            case "error":
              return 3;
            case "fatal":
              return 4;
            default:
              throw new Error(`unsupported logging level: ${o}`);
          }
        }, Tn = (o) => o === "float32" || o === "float16" || o === "int32" || o === "int64" || o === "uint32" || o === "uint8" || o === "bool" || o === "uint4" || o === "int4", Ln = (o) => o === "float32" || o === "float16" || o === "int32" || o === "int64" || o === "uint32" || o === "uint64" || o === "int8" || o === "uint8" || o === "bool" || o === "uint4" || o === "int4", Xn = (o) => {
          switch (o) {
            case "none":
              return 0;
            case "cpu":
              return 1;
            case "cpu-pinned":
              return 2;
            case "texture":
              return 3;
            case "gpu-buffer":
              return 4;
            case "ml-tensor":
              return 5;
            default:
              throw new Error(`unsupported data location: ${o}`);
          }
        };
      }), tr, fr = g(() => {
        Ot(), tr = async (o) => {
          if (typeof o == "string") {
            let v = await fetch(o);
            if (!v.ok)
              throw new Error(`failed to load external data file: ${o}`);
            let b = v.headers.get("Content-Length"), T = b ? parseInt(b, 10) : 0;
            if (T < 1073741824)
              return new Uint8Array(await v.arrayBuffer());
            {
              if (!v.body)
                throw new Error(`failed to load external data file: ${o}, no response body.`);
              let S = v.body.getReader(), I;
              try {
                I = new ArrayBuffer(T);
              } catch (L) {
                if (L instanceof RangeError) {
                  let z = Math.ceil(T / 65536);
                  I = new WebAssembly.Memory({
                    initial: z,
                    maximum: z
                  }).buffer;
                } else
                  throw L;
              }
              let O = 0;
              for (; ; ) {
                let { done: L, value: z } = await S.read();
                if (L)
                  break;
                let B = z.byteLength;
                new Uint8Array(I, O, B).set(z), O += B;
              }
              return new Uint8Array(I, 0, T);
            }
          } else
            return o instanceof Blob ? new Uint8Array(await o.arrayBuffer()) : o instanceof Uint8Array ? o : new Uint8Array(o);
        };
      }), Nn, Kn, bt, yt, Vt, On, mn, Gn = g(() => {
        Kt(), Nn = [
          "V",
          "I",
          "W",
          "E",
          "F"
        ], Kn = (o, v) => {
          console.log(`[${Nn[o]},${(/* @__PURE__ */ new Date()).toISOString()}]${v}`);
        }, Vt = (o, v) => {
          bt = o, yt = v;
        }, On = (o, v) => {
          let b = cn(o), T = cn(bt);
          b >= T && Kn(b, typeof v == "function" ? v() : v);
        }, mn = (...o) => {
          yt && On(...o);
        };
      }), or, dr, Xe, yr, Ir, Fe, K, ce = g(() => {
        or = class {
          static calcMatMulShape(o, v) {
            return o[1] !== v[0] ? void 0 : [
              o[0],
              v[1]
            ];
          }
        }, dr = class {
          static calcShape(o, v, b = false) {
            let T = o.length, S = v.length;
            if (T === 0)
              return v;
            if (S === 0)
              return o;
            let I = Math.max(o.length, v.length), O = new Array(I);
            if (b) {
              if (T < 2 || S < 2)
                return;
              let L = or.calcMatMulShape([
                o[T - 2],
                o[T - 1]
              ], [
                v[S - 2],
                v[S - 1]
              ]);
              if (L === void 0)
                return;
              [O[I - 2], O[I - 1]] = L;
            }
            for (let L = b ? 3 : 1; L <= I; L++) {
              let z = T - L < 0 ? 1 : o[T - L], B = S - L < 0 ? 1 : v[S - L];
              if (z !== B && z > 1 && B > 1)
                return;
              let V = Math.max(z, B);
              if (z && B)
                O[I - L] = Math.max(z, B);
              else {
                if (V > 1)
                  return;
                O[I - L] = 0;
              }
            }
            return O;
          }
          static isValidBroadcast(o, v) {
            let b = o.length, T = v.length;
            if (b > T)
              return false;
            for (let S = 1; S <= b; S++)
              if (o[b - S] !== 1 && o[b - S] !== v[T - S])
                return false;
            return true;
          }
        }, Xe = class bp {
          static size(v) {
            return bp.getSizeFromDimensionRange(v, 0, v.length);
          }
          static convertShape(v, b = 4) {
            let T = v.length;
            if (T === 0)
              return [];
            let S = new Array(T), I = T - 1;
            for (; I >= 0; ) {
              if (v[I] % b === 0) {
                S[I] = v[I] / b;
                break;
              }
              if (b % v[I] !== 0)
                throw new Error("cannot convert shape");
              S[I] = 1, b /= v[I], I--;
            }
            for (I--; I >= 0; I--)
              S[I] = v[I];
            return S;
          }
          static sizeFromDimension(v, b) {
            if (b < 0 || b > v.length)
              throw new Error(`invalid dimension of ${b} for sizeFromDimension as Tensor has ${v.length} dimensions.`);
            return bp.getSizeFromDimensionRange(v, b, v.length);
          }
          static sizeToDimension(v, b) {
            if (b < 0 || b > v.length)
              throw new Error(`invalid dimension of ${b} for sizeToDimension as Tensor has ${v.length} dimensions.`);
            return bp.getSizeFromDimensionRange(v, 0, b);
          }
          static getSizeFromDimensionRange(v, b, T) {
            let S = 1;
            for (let I = b; I < T; I++) {
              if (v[I] < 0)
                throw new Error("cannot get valid size from specified dimension range. Most likely the range contains negative values in them.");
              S *= Number(v[I]);
            }
            return S;
          }
          static computeStrides(v) {
            let b = v.length;
            if (b === 0)
              return [];
            if (b === 1)
              return [
                1
              ];
            let T = new Array(b);
            T[b - 1] = 1, T[b - 2] = v[b - 1];
            for (let S = b - 3; S >= 0; --S)
              T[S] = T[S + 1] * v[S + 1];
            return T;
          }
          static normalizeAxis(v, b) {
            if (v < -b && v >= b)
              throw new Error("unsupported axis for this operation.");
            return v < 0 ? v + b : v;
          }
          static normalizeAxes(v, b) {
            return v.map((T) => this.normalizeAxis(T, b ?? v.length));
          }
          static sortBasedOnPerm(v, b) {
            return b ? b.map((T) => v[T]) : v.slice().reverse();
          }
          static padShape(v, b) {
            let T = v.length;
            return v.map((S, I) => S + b[I] + b[I + T]);
          }
          static areEqual(v, b) {
            return v.length !== b.length ? false : v.every((T, S) => T === b[S]);
          }
        }, yr = class ud {
          static adjustPoolAttributes(v, b, T, S, I, O) {
            if (!v && T.length !== b.length - 2)
              throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");
            if (v)
              for (let L = 0; L < b.length - 2; L++)
                L >= T.length ? T.push(b[L + 2]) : T[L] = b[L + 2];
            for (let L = 0; L < T.length; L++)
              if (L < S.length) {
                if (S[L] < 0)
                  throw new Error("strides should be greater than or equal to 1");
              } else
                S.push(1);
            for (let L = 0; L < T.length; L++)
              if (L < I.length) {
                if (I[L] < 0)
                  throw new Error("dilations should be greater than or equal to 1");
              } else
                I.push(1);
            for (let L = 0; L < T.length * 2; L++)
              if (L < O.length) {
                if (O[L] < 0)
                  throw new Error("pad should be greater than or equal to 1");
              } else
                O.push(0);
            for (let L = 0; L < T.length; L++) {
              if (T[L] <= 0)
                throw new Error("kernel shapes need to be greater than 0");
              if (O[L] >= T[L] || O[L + T.length] >= T[L])
                throw new Error("pads should be smaller than kernel");
            }
          }
          static adjustPadsBasedOnAutoPad(v, b, T, S, I, O, L) {
            if (L) {
              if (I.length !== 2 * (v.length - 2))
                throw new Error("length of pads should be twice the length of data dimensions");
              if (b.length !== v.length - 2)
                throw new Error("length of strides should be the length of data dimensions");
              if (S.length !== v.length - 2)
                throw new Error("length of kernel shapes should be the length of data dimensions");
              for (let z = 0; z < v.length - 2; z++)
                ud.adjustPadAndReturnShape(v[z + (O ? 1 : 2)], b[z], T[z], S[z], I, z, z + v.length - 2, L);
            }
          }
          static computePoolOutputShape(v, b, T, S, I, O, L) {
            if (b.length <= 0)
              throw new Error("input shape must be of size greater than 0");
            let z = [
              b[0],
              b[1]
            ];
            return ud.computeShapeHelper(v, b, z, T, S, I, O, L), z;
          }
          static computeConvOutputShape(v, b, T, S, I, O, L) {
            if (v.length <= 0 || b.length <= 0)
              throw new Error("invalid input tensor dims or invalid filter tensor dims");
            let z = [
              v[0],
              b[0]
            ];
            return ud.computeShapeHelper(false, v, z, T, S, I, O, L), z;
          }
          static computeShapeHelper(v, b, T, S, I, O, L, z) {
            if (v)
              for (let B = 0; B < b.length - 2; B++)
                T.push(1);
            else
              for (let B = 0; B < b.length - 2; B++)
                T.push(ud.adjustPadAndReturnShape(b[B + 2], S[B], I[B], O[B], L, B, B + b.length - 2, z));
          }
          static adjustPadAndReturnShape(v, b, T, S, I, O, L, z) {
            let B = T * (S - 1) + 1;
            if (z && z !== "NOTSET")
              switch (z) {
                case "VALID":
                  return I[O] = 0, I[L] = 0, Math.floor((v - B) / b + 1);
                case "SAME_LOWER":
                case "SAME_UPPER":
                  if (T !== 1)
                    throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");
                  {
                    let V = ((v + b - 1) / b - 1) * b + S - v;
                    return I[O] = Math.floor(z === "SAME_LOWER" ? (V + 1) / 2 : V / 2), I[L] = V - I[O], Math.floor((v + V - S) / b + 1);
                  }
                default:
                  throw new Error("Unsupported AutoPad type");
              }
            else
              return Math.floor((v + I[O] + I[L] - B) / b + 1);
          }
        }, Ir = class {
          static getShapeOfGemmResult(o, v, b, T, S) {
            if (o.length !== 2 || b.length !== 2)
              throw new Error("shape need to be of size 2");
            let I, O, L;
            v ? (I = o[1], O = o[0]) : (I = o[0], O = o[1]);
            let z = -1;
            if (T ? (L = b[0], z = 1) : (L = b[1], z = 0), b[z] !== O)
              throw new Error("dimension mismatch");
            if (I <= 0 || L <= 0 || O <= 0)
              throw new Error("invalid shape specified");
            if (S && !dr.isValidBroadcast(S, [
              I,
              L
            ]))
              throw new Error("gemm: invalid bias shape for broadcast");
            return [
              I,
              L,
              O
            ];
          }
        }, Fe = -34028234663852886e22, K = 34028234663852886e22;
      }), Pe, Ce = g(() => {
        Kt(), Pe = (o, v) => new (et(v))(o);
      }), $e, at, dt, ut, It, Tt, gn, pn, $n, Rn, Fn = g(() => {
        Gn(), $e = (o, v = true) => {
          if (o.byteLength % 8 !== 0)
            throw new Error("Invalid Uint8Array length - must be a multiple of 8 (BigInt).");
          let b = o.byteLength / 8, T = new BigInt64Array(o.buffer, o.byteOffset, b), S = new Int32Array(b);
          for (let I = 0; I < b; I++) {
            let O = T[I];
            if (O > 2147483647n || O < -2147483648n)
              throw new Error(`Overflow occurred when converting BigInt to Int32 at index ${I}: ${O}`);
            S[I] = Number(O);
          }
          return v ? new Uint8Array(S.buffer) : S;
        }, at = (o, v = true) => {
          if (o.byteLength % 4 !== 0)
            throw new Error("Invalid Uint8Array length - must be a multiple of 4 (Int32).");
          let b = o.byteLength / 4, T = new Int32Array(o.buffer, o.byteOffset, b), S = BigInt64Array.from(T, BigInt);
          return v ? new Uint8Array(S.buffer) : S;
        }, dt = 1, ut = () => dt++, It = /* @__PURE__ */ new Map([
          [
            "float32",
            32
          ],
          [
            "float16",
            16
          ],
          [
            "int32",
            32
          ],
          [
            "uint32",
            32
          ],
          [
            "int64",
            64
          ],
          [
            "uint64",
            64
          ],
          [
            "int8",
            8
          ],
          [
            "uint8",
            8
          ],
          [
            "int4",
            4
          ],
          [
            "uint4",
            4
          ]
        ]), Tt = (o, v) => {
          let b = It.get(o);
          if (!b)
            throw new Error("Unsupported data type.");
          return v.length > 0 ? Math.ceil(v.reduce((T, S) => T * S) * b / 8) : 0;
        }, gn = class {
          constructor(o) {
            this.shouldConvertInt64toInt32 = false, this.isInt64ToInt32Converted = false;
            let { sessionId: v, context: b, tensor: T, dataType: S, shape: I, shouldConvertInt64toInt32: O = false } = o;
            this.sessionId = v, this.mlContext = b, this.mlTensor = T, this.dataType = S, this.tensorShape = I, this.shouldConvertInt64toInt32 = O;
          }
          get tensor() {
            return this.mlTensor;
          }
          get type() {
            return this.dataType;
          }
          get shape() {
            return this.tensorShape;
          }
          get byteLength() {
            return Tt(this.dataType, this.tensorShape);
          }
          destroy() {
            mn("verbose", () => "[WebNN] TensorWrapper.destroy"), this.mlTensor.destroy();
          }
          write(o) {
            this.mlContext.writeTensor(this.mlTensor, o);
          }
          async read(o, v) {
            if (o) {
              let b = await this.mlContext.readTensor(this.mlTensor), T = at(new Uint8Array(b));
              if (v) {
                (v instanceof ArrayBuffer ? new Uint8Array(v) : new Uint8Array(v.buffer, v.byteOffset, v.byteLength)).set(T);
                return;
              } else
                return T.buffer;
            } else
              return v ? this.mlContext.readTensor(this.mlTensor, v) : this.mlContext.readTensor(this.mlTensor);
          }
          canReuseTensor(o, v, b) {
            return this.mlContext === o && this.dataType === v && this.tensorShape.length === b.length && this.tensorShape.every((T, S) => T === b[S]);
          }
          setIsInt64ToInt32Converted(o) {
            this.isInt64ToInt32Converted = o;
          }
        }, pn = class {
          constructor(o, v) {
            this.tensorManager = o, this.wrapper = v;
          }
          get tensorWrapper() {
            return this.wrapper;
          }
          releaseTensor() {
            this.tensorWrapper && (this.tensorManager.releaseTensor(this.tensorWrapper), this.wrapper = void 0);
          }
          async ensureTensor(o, v, b, T) {
            let S = v, I = this.tensorManager.getMLContext(o), O = S === "int64" && !I.opSupportLimits().input.dataTypes.includes("int64");
            if (O && (S = "int32", mn("verbose", () => "[WebNN] TensorIdTracker.ensureTensor: convert dataType from int64 to int32")), this.wrapper) {
              if (this.wrapper.canReuseTensor(I, S, b))
                return this.wrapper.tensor;
              if (T) {
                if (this.wrapper.byteLength !== Tt(S, b))
                  throw new Error("Unable to copy data to tensor with different size.");
                this.activeUpload = new Uint8Array(await this.wrapper.read());
              }
              this.tensorManager.releaseTensor(this.wrapper);
            }
            let L = typeof MLTensorUsage > "u" ? void 0 : MLTensorUsage.READ | MLTensorUsage.WRITE;
            return this.wrapper = await this.tensorManager.getCachedTensor(o, S, b, L, true, true, O), T && this.activeUpload && (this.wrapper.write(this.activeUpload), this.activeUpload = void 0), this.wrapper.tensor;
          }
          upload(o) {
            let v = o;
            if (this.wrapper)
              if (this.wrapper.shouldConvertInt64toInt32 && (v = $e(o, true), this.wrapper.setIsInt64ToInt32Converted(true)), v.byteLength === this.wrapper.byteLength) {
                this.wrapper.write(v);
                return;
              } else
                mn("verbose", () => "Data size does not match tensor size. Releasing tensor."), this.releaseTensor();
            this.activeUpload ? this.activeUpload.set(v) : this.activeUpload = new Uint8Array(v);
          }
          async download(o) {
            if (this.activeUpload) {
              let v = this.wrapper?.isInt64ToInt32Converted ? at(this.activeUpload) : this.activeUpload;
              if (o) {
                o instanceof ArrayBuffer ? new Uint8Array(o).set(v) : new Uint8Array(o.buffer, o.byteOffset, o.byteLength).set(v);
                return;
              } else
                return v.buffer;
            }
            if (!this.wrapper)
              throw new Error("Tensor has not been created.");
            return o ? this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32, o) : this.wrapper.read(this.wrapper?.shouldConvertInt64toInt32);
          }
        }, $n = class {
          constructor(o) {
            this.backend = o, this.tensorTrackersById = /* @__PURE__ */ new Map(), this.freeTensors = [], this.externalTensors = /* @__PURE__ */ new Set();
          }
          getMLContext(o) {
            let v = this.backend.getMLContext(o);
            if (!v)
              throw new Error("MLContext not found for session.");
            return v;
          }
          reserveTensorId() {
            let o = ut();
            return this.tensorTrackersById.set(o, new pn(this)), o;
          }
          releaseTensorId(o) {
            let v = this.tensorTrackersById.get(o);
            v && (this.tensorTrackersById.delete(o), v.tensorWrapper && this.releaseTensor(v.tensorWrapper));
          }
          async ensureTensor(o, v, b, T, S) {
            mn("verbose", () => `[WebNN] TensorManager.ensureTensor {tensorId: ${v}, dataType: ${b}, shape: ${T}, copyOld: ${S}}`);
            let I = this.tensorTrackersById.get(v);
            if (!I)
              throw new Error("Tensor not found.");
            return I.ensureTensor(o, b, T, S);
          }
          upload(o, v) {
            let b = this.tensorTrackersById.get(o);
            if (!b)
              throw new Error("Tensor not found.");
            b.upload(v);
          }
          async download(o, v) {
            mn("verbose", () => `[WebNN] TensorManager.download {tensorId: ${o}, dstBuffer: ${v?.byteLength}}`);
            let b = this.tensorTrackersById.get(o);
            if (!b)
              throw new Error("Tensor not found.");
            return b.download(v);
          }
          releaseTensorsForSession(o) {
            for (let v of this.freeTensors)
              v.sessionId === o && v.destroy();
            this.freeTensors = this.freeTensors.filter((v) => v.sessionId !== o);
          }
          registerTensor(o, v, b, T) {
            let S = this.getMLContext(o), I = ut(), O = new gn({
              sessionId: o,
              context: S,
              tensor: v,
              dataType: b,
              shape: T
            });
            return this.tensorTrackersById.set(I, new pn(this, O)), this.externalTensors.add(O), I;
          }
          async getCachedTensor(o, v, b, T, S, I, O = false) {
            let L = this.getMLContext(o);
            for (let [B, V] of this.freeTensors.entries())
              if (V.canReuseTensor(L, v, b)) {
                mn("verbose", () => `[WebNN] Reusing tensor {dataType: ${v}, shape: ${b}}`);
                let q = this.freeTensors.splice(B, 1)[0];
                return q.sessionId = o, q;
              }
            mn("verbose", () => `[WebNN] MLContext.createTensor {dataType: ${v}, shape: ${b}}`);
            let z = await L.createTensor({
              dataType: v,
              shape: b,
              dimensions: b,
              usage: T,
              writable: S,
              readable: I
            });
            return new gn({
              sessionId: o,
              context: L,
              tensor: z,
              dataType: v,
              shape: b,
              shouldConvertInt64toInt32: O
            });
          }
          releaseTensor(o) {
            this.externalTensors.has(o) && this.externalTensors.delete(o), this.freeTensors.push(o);
          }
        }, Rn = (...o) => new $n(...o);
      }), Bn, zn, lr, Mr = g(() => {
        Kt(), Ft(), Ce(), Fn(), Gn(), Bn = /* @__PURE__ */ new Map([
          [
            1,
            "float32"
          ],
          [
            10,
            "float16"
          ],
          [
            6,
            "int32"
          ],
          [
            12,
            "uint32"
          ],
          [
            7,
            "int64"
          ],
          [
            13,
            "uint64"
          ],
          [
            22,
            "int4"
          ],
          [
            21,
            "uint4"
          ],
          [
            3,
            "int8"
          ],
          [
            2,
            "uint8"
          ],
          [
            9,
            "uint8"
          ]
        ]), zn = (o, v) => {
          if (o === v)
            return true;
          if (o === void 0 || v === void 0)
            return false;
          let b = Object.keys(o).sort(), T = Object.keys(v).sort();
          return b.length === T.length && b.every((S, I) => S === T[I] && o[S] === v[S]);
        }, lr = class {
          constructor(o) {
            this.tensorManager = Rn(this), this.mlContextBySessionId = /* @__PURE__ */ new Map(), this.sessionIdsByMLContext = /* @__PURE__ */ new Map(), this.mlContextCache = [], this.sessionGraphInputs = /* @__PURE__ */ new Map(), this.temporaryGraphInputs = [], this.temporarySessionTensorIds = /* @__PURE__ */ new Map(), Vt(o.logLevel, !!o.debug);
          }
          get currentSessionId() {
            if (this.activeSessionId === void 0)
              throw new Error("No active session");
            return this.activeSessionId;
          }
          onRunStart(o) {
            mn("verbose", () => `[WebNN] onRunStart {sessionId: ${o}}`), this.activeSessionId = o;
          }
          onRunEnd(o) {
            mn("verbose", () => `[WebNN] onRunEnd {sessionId: ${o}}`);
            let v = this.temporarySessionTensorIds.get(o);
            if (v) {
              for (let b of v)
                mn("verbose", () => `[WebNN] releasing temporary tensor {tensorId: ${b}}`), this.tensorManager.releaseTensorId(b);
              this.temporarySessionTensorIds.delete(o), this.activeSessionId = void 0;
            }
          }
          async createMLContext(o) {
            if (o instanceof GPUDevice) {
              let b = this.mlContextCache.findIndex((T) => T.gpuDevice === o);
              if (b !== -1)
                return this.mlContextCache[b].mlContext;
              {
                let T = await navigator.ml.createContext(o);
                return this.mlContextCache.push({
                  gpuDevice: o,
                  mlContext: T
                }), T;
              }
            } else if (o === void 0) {
              let b = this.mlContextCache.findIndex((T) => T.options === void 0 && T.gpuDevice === void 0);
              if (b !== -1)
                return this.mlContextCache[b].mlContext;
              {
                let T = await navigator.ml.createContext();
                return this.mlContextCache.push({
                  mlContext: T
                }), T;
              }
            }
            let v = this.mlContextCache.findIndex((b) => zn(b.options, o));
            if (v !== -1)
              return this.mlContextCache[v].mlContext;
            {
              let b = await navigator.ml.createContext(o);
              return this.mlContextCache.push({
                options: o,
                mlContext: b
              }), b;
            }
          }
          registerMLContext(o, v) {
            this.mlContextBySessionId.set(o, v);
            let b = this.sessionIdsByMLContext.get(v);
            b || (b = /* @__PURE__ */ new Set(), this.sessionIdsByMLContext.set(v, b)), b.add(o), this.temporaryGraphInputs.length > 0 && (this.sessionGraphInputs.set(o, this.temporaryGraphInputs), this.temporaryGraphInputs = []);
          }
          onReleaseSession(o) {
            this.sessionGraphInputs.delete(o);
            let v = this.mlContextBySessionId.get(o);
            if (!v)
              return;
            this.tensorManager.releaseTensorsForSession(o), this.mlContextBySessionId.delete(o);
            let b = this.sessionIdsByMLContext.get(v);
            if (b.delete(o), b.size === 0) {
              this.sessionIdsByMLContext.delete(v);
              let T = this.mlContextCache.findIndex((S) => S.mlContext === v);
              T !== -1 && this.mlContextCache.splice(T, 1);
            }
          }
          getMLContext(o) {
            return this.mlContextBySessionId.get(o);
          }
          reserveTensorId() {
            return this.tensorManager.reserveTensorId();
          }
          releaseTensorId(o) {
            mn("verbose", () => `[WebNN] releaseTensorId {tensorId: ${o}}`), this.tensorManager.releaseTensorId(o);
          }
          async ensureTensor(o, v, b, T, S) {
            let I = Bn.get(b);
            if (!I)
              throw new Error(`Unsupported ONNX data type: ${b}`);
            return this.tensorManager.ensureTensor(o ?? this.currentSessionId, v, I, T, S);
          }
          async createTemporaryTensor(o, v, b) {
            mn("verbose", () => `[WebNN] createTemporaryTensor {onnxDataType: ${v}, shape: ${b}}`);
            let T = Bn.get(v);
            if (!T)
              throw new Error(`Unsupported ONNX data type: ${v}`);
            let S = this.tensorManager.reserveTensorId();
            await this.tensorManager.ensureTensor(o, S, T, b, false);
            let I = this.temporarySessionTensorIds.get(o);
            return I ? I.push(S) : this.temporarySessionTensorIds.set(o, [
              S
            ]), S;
          }
          uploadTensor(o, v) {
            if (!He().shouldTransferToMLTensor)
              throw new Error("Trying to upload to a MLTensor while shouldTransferToMLTensor is false");
            mn("verbose", () => `[WebNN] uploadTensor {tensorId: ${o}, data: ${v.byteLength}}`), this.tensorManager.upload(o, v);
          }
          async downloadTensor(o, v) {
            return this.tensorManager.download(o, v);
          }
          createMLTensorDownloader(o, v) {
            return async () => {
              let b = await this.tensorManager.download(o);
              return Pe(b, v);
            };
          }
          registerMLTensor(o, v, b, T) {
            let S = Bn.get(b);
            if (!S)
              throw new Error(`Unsupported ONNX data type: ${b}`);
            let I = this.tensorManager.registerTensor(o, v, S, T);
            return mn("verbose", () => `[WebNN] registerMLTensor {tensor: ${v}, dataType: ${S}, dimensions: ${T}} -> {tensorId: ${I}}`), I;
          }
          registerMLConstant(o, v, b, T, S, I, O = false) {
            if (!I)
              throw new Error("External mounted files are not available.");
            let L = o;
            o.startsWith("./") && (L = o.substring(2));
            let z = I.get(L);
            if (!z)
              throw new Error(`File with name ${L} not found in preloaded files.`);
            if (v + b > z.byteLength)
              throw new Error("Out of bounds: data offset and length exceed the external file data size.");
            let B = z.slice(v, v + b).buffer, V;
            switch (S.dataType) {
              case "float32":
                V = new Float32Array(B);
                break;
              case "float16":
                V = typeof Float16Array < "u" && Float16Array.from ? new Float16Array(B) : new Uint16Array(B);
                break;
              case "int32":
                V = new Int32Array(B);
                break;
              case "uint32":
                V = new Uint32Array(B);
                break;
              case "int64":
                O ? (V = $e(new Uint8Array(B), false), S.dataType = "int32") : V = new BigInt64Array(B);
                break;
              case "uint64":
                V = new BigUint64Array(B);
                break;
              case "int8":
                V = new Int8Array(B);
                break;
              case "int4":
              case "uint4":
              case "uint8":
                V = new Uint8Array(B);
                break;
              default:
                throw new Error(`Unsupported data type: ${S.dataType} in creating WebNN Constant from external data.`);
            }
            return mn("verbose", () => `[WebNN] registerMLConstant {dataType: ${S.dataType}, shape: ${S.shape}}} ${O ? "(Note: it was int64 data type and registered to int32 as workaround)" : ""}`), T.constant(S, V);
          }
          registerGraphInput(o) {
            this.temporaryGraphInputs.push(o);
          }
          isGraphInput(o, v) {
            let b = this.sessionGraphInputs.get(o);
            return b ? b.includes(v) : false;
          }
          isInt64Supported(o) {
            return !!this.mlContextBySessionId.get(o)?.opSupportLimits().input.dataTypes.includes("int64");
          }
          flush() {
          }
        };
      }), jn = g(() => {
      }), pr, In, Y, ae, me, Ae, Ne, tt, gt, Nt = g(() => {
        Gn(), jn(), pr = /* @__PURE__ */ new Map([
          [
            64,
            250
          ],
          [
            128,
            200
          ],
          [
            256,
            200
          ],
          [
            512,
            200
          ],
          [
            2048,
            230
          ],
          [
            4096,
            200
          ],
          [
            8192,
            50
          ],
          [
            16384,
            50
          ],
          [
            32768,
            50
          ],
          [
            65536,
            50
          ],
          [
            131072,
            50
          ],
          [
            262144,
            50
          ],
          [
            524288,
            50
          ],
          [
            1048576,
            50
          ],
          [
            2097152,
            30
          ],
          [
            4194304,
            20
          ],
          [
            8388608,
            10
          ],
          [
            12582912,
            10
          ],
          [
            16777216,
            10
          ],
          [
            26214400,
            15
          ],
          [
            33554432,
            22
          ],
          [
            44236800,
            2
          ],
          [
            58982400,
            6
          ],
          [
            67108864,
            6
          ],
          [
            134217728,
            6
          ],
          [
            167772160,
            6
          ]
        ]), In = [], Y = (o) => Math.ceil(Number(o) / 16) * 16, ae = (o) => {
          for (let v = 0; v < In.length; v++) {
            let b = In[v];
            if (o <= b)
              return b;
          }
          return Math.ceil(o / 16) * 16;
        }, me = 1, Ae = () => me++, Ne = async (o, v, b, T) => {
          let S = Y(b), I = o.device.createBuffer({
            size: S,
            usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ
          });
          try {
            let O = o.getCommandEncoder();
            o.endComputePass(), O.copyBufferToBuffer(v, 0, I, 0, S), o.flush(), await I.mapAsync(GPUMapMode.READ);
            let L = I.getMappedRange();
            if (T) {
              let z = T();
              return z.set(new Uint8Array(L, 0, b)), z;
            } else
              return new Uint8Array(L.slice(0, b));
          } finally {
            I.destroy();
          }
        }, tt = class {
          constructor(o) {
            this.backend = o, this.storageCache = /* @__PURE__ */ new Map(), this.freeBuffers = /* @__PURE__ */ new Map(), this.freeUniformBuffers = /* @__PURE__ */ new Map(), this.buffersPending = [], this.capturedPendingBuffers = /* @__PURE__ */ new Map();
            for (let [v] of pr)
              In.push(v), this.freeBuffers.set(v, []), this.freeUniformBuffers.set(v, []);
            this.sessionCount = 0;
          }
          upload(o, v) {
            let b = v.buffer, T = v.byteOffset, S = v.byteLength, I = Y(S), O = this.storageCache.get(o);
            if (!O)
              throw new Error("gpu data for uploading does not exist");
            if (Number(O.originalSize) !== S)
              throw new Error(`inconsistent data size. gpu data size=${O.originalSize}, data size=${S}`);
            let L = this.backend.device.createBuffer({
              mappedAtCreation: true,
              size: I,
              usage: GPUBufferUsage.MAP_WRITE | GPUBufferUsage.COPY_SRC
            }), z = L.getMappedRange();
            new Uint8Array(z).set(new Uint8Array(b, T, S)), L.unmap();
            let B = this.backend.device.createCommandEncoder();
            B.copyBufferToBuffer(L, 0, O.gpuData.buffer, 0, I), this.backend.device.queue.submit([
              B.finish()
            ]), L.destroy(), mn("verbose", () => `[WebGPU] GpuDataManager.upload(id=${o})`);
          }
          memcpy(o, v) {
            let b = this.storageCache.get(o);
            if (!b)
              throw new Error("source gpu data for memcpy does not exist");
            let T = this.storageCache.get(v);
            if (!T)
              throw new Error("destination gpu data for memcpy does not exist");
            if (b.originalSize !== T.originalSize)
              throw new Error("inconsistent source and destination gpu data size");
            let S = Y(b.originalSize), I = this.backend.getCommandEncoder();
            this.backend.endComputePass(), I.copyBufferToBuffer(b.gpuData.buffer, 0, T.gpuData.buffer, 0, S);
          }
          registerExternalBuffer(o, v, b) {
            let T;
            if (b) {
              if (T = b[0], o === b[1])
                return mn("verbose", () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${v}) => id=${T}, buffer is the same, skip.`), T;
              if (this.backend.capturedCommandList.has(this.backend.currentSessionId))
                throw new Error(`Registering a different external buffer under graph capture mode is not supported yet.
             Please use the previous external buffer!`);
            } else
              T = Ae();
            return this.storageCache.set(T, {
              gpuData: {
                id: T,
                type: 0,
                buffer: o
              },
              originalSize: v
            }), mn("verbose", () => `[WebGPU] GpuDataManager.registerExternalBuffer(size=${v}) => id=${T}, registered.`), T;
          }
          unregisterExternalBuffer(o) {
            o !== void 0 && (this.storageCache.delete(o), mn("verbose", () => `[WebGPU] GpuDataManager.unregisterExternalBuffer() => id=${o}`));
          }
          create(o, v = GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST) {
            let b = ae(o), T, S = (v & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE, I = (v & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM;
            if (S || I) {
              let L = (S ? this.freeBuffers : this.freeUniformBuffers).get(b);
              L ? L.length > 0 ? T = L.pop() : T = this.backend.device.createBuffer({
                size: b,
                usage: v
              }) : T = this.backend.device.createBuffer({
                size: b,
                usage: v
              });
            } else
              T = this.backend.device.createBuffer({
                size: b,
                usage: v
              });
            let O = {
              id: Ae(),
              type: 0,
              buffer: T
            };
            return this.storageCache.set(O.id, {
              gpuData: O,
              originalSize: Number(o)
            }), mn("verbose", () => `[WebGPU] GpuDataManager.create(size=${o}) => id=${O.id}`), O;
          }
          get(o) {
            return this.storageCache.get(o)?.gpuData;
          }
          release(o) {
            let v = typeof o == "bigint" ? Number(o) : o, b = this.storageCache.get(v);
            if (!b) {
              if (this.storageCache.size === 0)
                return 0;
              throw new Error("releasing data does not exist");
            }
            return mn("verbose", () => `[WebGPU] GpuDataManager.release(id=${v}), gpuDataId=${b.gpuData.id}`), this.storageCache.delete(v), this.buffersPending.push(b.gpuData.buffer), b.originalSize;
          }
          async download(o, v) {
            let b = this.storageCache.get(Number(o));
            if (!b)
              throw new Error("data does not exist");
            await Ne(this.backend, b.gpuData.buffer, b.originalSize, v);
          }
          refreshPendingBuffers() {
            if (this.buffersPending.length !== 0)
              if (this.backend.sessionStatus === "default") {
                for (let o of this.buffersPending) {
                  let v = pr.get(o.size);
                  if ((o.usage & GPUBufferUsage.STORAGE) === GPUBufferUsage.STORAGE) {
                    let b = this.freeBuffers.get(o.size) || [];
                    v === void 0 || b.length >= v ? o.destroy() : b.push(o);
                  } else if ((o.usage & GPUBufferUsage.UNIFORM) === GPUBufferUsage.UNIFORM) {
                    let b = this.freeUniformBuffers.get(o.size) || [];
                    v === void 0 || b.length >= v ? o.destroy() : b.push(o);
                  } else
                    o.destroy();
                }
                this.buffersPending = [];
              } else {
                let o = this.capturedPendingBuffers.get(this.backend.currentSessionId);
                o || (o = [], this.capturedPendingBuffers.set(this.backend.currentSessionId, o));
                for (let v of this.buffersPending)
                  o.push(v);
                this.buffersPending = [];
              }
          }
          dispose() {
            this.freeBuffers.forEach((o) => {
              o.forEach((v) => {
                v.destroy();
              });
            }), this.freeUniformBuffers.forEach((o) => {
              o.forEach((v) => {
                v.destroy();
              });
            }), this.storageCache.forEach((o) => {
              o.gpuData.buffer.destroy();
            }), this.capturedPendingBuffers.forEach((o) => {
              o.forEach((v) => {
                v.destroy();
              });
            }), this.storageCache = /* @__PURE__ */ new Map(), this.freeBuffers = /* @__PURE__ */ new Map(), this.freeUniformBuffers = /* @__PURE__ */ new Map(), this.capturedPendingBuffers = /* @__PURE__ */ new Map();
          }
          onCreateSession() {
            this.sessionCount += 1;
          }
          onReleaseSession(o) {
            let v = this.capturedPendingBuffers.get(o);
            v && (v.forEach((b) => {
              b.destroy();
            }), this.capturedPendingBuffers.delete(o)), this.sessionCount -= 1, this.sessionCount === 0 && (mn("warning", () => "[WebGPU] Clearing webgpu buffer cache"), this.storageCache.forEach((b) => {
              b.gpuData.buffer.destroy();
            }), this.storageCache = /* @__PURE__ */ new Map());
          }
        }, gt = (...o) => new tt(...o);
      }), Xt, Pt, Qt = g(() => {
        Xt = class {
          constructor(o) {
            Object.assign(this, o);
          }
          get cacheKey() {
            return this.key || (this.key = Object.getOwnPropertyNames(this).sort().map((o) => `${this[o]}`).join(";")), this.key;
          }
        }, Pt = (o) => new Xt(o);
      }), Vn, Dn, Ke, sn, kt, Mn, xr, vr, Pr, Ht, Qr, ct, Wt, Vr, Ys, Ui, Gi, fn = g(() => {
        Kt(), ce(), Vn = 64, Dn = (o, v) => {
          if (v === 3)
            throw new Error("vec3 has same alignment as vec4, use vec4 instead");
          switch (Number(o)) {
            case 10:
              return v > 1 ? `vec${v}<f16>` : "f16";
            case 1:
              return v > 1 ? `vec${v}<f32>` : "f32";
            case 6:
              return v > 1 ? `vec${v}<i32>` : "i32";
            case 12:
              return v > 1 ? `vec${v}<u32>` : "u32";
            case 7:
              if (v > 1)
                throw new Error("currently not supported vecX of uint64 yet");
              return [
                "vec2<u32>",
                "i32"
              ];
            case 13:
              if (v > 1)
                throw new Error("currently not supported vecX of uint64 yet");
              return [
                "vec2<u32>",
                "u32"
              ];
            case 9:
              if (v !== 4)
                throw new Error("bool must be vec4");
              return [
                "u32",
                "vec4<bool>"
              ];
            case 22:
              return "i32";
            case 21:
              return "u32";
            default:
              throw new Error(`Unknown data type: ${o}`);
          }
        }, Ke = (o, v = 1) => {
          let b = Dn(o, v);
          return typeof b == "string" ? b : b[0];
        }, sn = (o, v = 1) => {
          let b = Dn(o, v);
          return typeof b == "string" ? b : b[1];
        }, kt = (...o) => {
          let v = [];
          return o.forEach((b) => {
            b.length !== 0 && v.push({
              type: 12,
              data: b
            }, {
              type: 12,
              data: Xe.computeStrides(b)
            });
          }), v;
        }, Mn = (o) => o % 4 === 0 ? 4 : o % 2 === 0 ? 2 : 1, xr = (o = "f32", v, b = "0") => !v || v === 1 ? `${o}(${b})` : `vec${v}<${o}>(${b})`, vr = (o, v, b) => o === "f32" ? b : v === 1 ? `f32(${b})` : `vec${v}<f32>(${b})`, Pr = (o, v) => v === 4 ? `(${o}.x + ${o}.y + ${o}.z + ${o}.w)` : v === 2 ? `(${o}.x + ${o}.y)` : v === 3 ? `(${o}.x + ${o}.y + ${o}.z)` : o, Ht = (o, v, b, T) => o.startsWith("uniforms.") && b > 4 ? typeof v == "string" ? T === "f16" ? `${o}[(${v}) / 8][(${v}) % 8 / 4][(${v}) % 8 % 4]` : `${o}[(${v}) / 4][(${v}) % 4]` : T === "f16" ? `${o}[${Math.floor(v / 8)}][${Math.floor(v % 8 / 4)}][${v % 8 % 4}]` : `${o}[${Math.floor(v / 4)}][${v % 4}]` : b > 1 ? `${o}[${v}]` : o, Qr = (o, v, b, T, S) => {
          let I = typeof b == "number", O = I ? b : b.length, L = [
            ...new Array(O).keys()
          ], z = O < 2 ? "u32" : O <= 4 ? `vec${O}<u32>` : `array<u32, ${O}>`, B = Dn(v, S), V = typeof B == "string" ? B : B[1], q = typeof B == "string" ? B : B[0], X = {
            indices: z,
            value: V,
            storage: q,
            tensor: v
          }, ee = (ft) => typeof ft == "string" ? ft : `${ft}u`, ne = {
            offsetToIndices: false,
            indicesToOffset: false,
            broadcastedIndicesToOffset: false,
            set: false,
            setByIndices: false,
            get: false,
            getByIndices: false
          }, se = I ? "uniforms." : "", ge = `${se}${o}_shape`, ue = `${se}${o}_strides`, re = "";
          for (let ft = 0; ft < O - 1; ft++)
            re += `
    let dim${ft} = current / ${Ht(ue, ft, O)};
    let rest${ft} = current % ${Ht(ue, ft, O)};
    indices[${ft}] = dim${ft};
    current = rest${ft};
    `;
          re += `indices[${O - 1}] = current;`;
          let Te = O < 2 ? "" : `
  fn o2i_${o}(offset: u32) -> ${X.indices} {
    var indices: ${X.indices};
    var current = offset;
    ${re}
    return indices;
  }`, we = (ft) => (ne.offsetToIndices = true, O < 2 ? ft : `o2i_${o}(${ft})`), Se = [];
          if (O >= 2)
            for (let ft = O - 1; ft >= 0; ft--)
              Se.push(`${Ht(ue, ft, O)} * (indices[${ft}])`);
          let ze = O < 2 ? "" : `
  fn i2o_${o}(indices: ${X.indices}) -> u32 {
    return ${Se.join("+")};
  }`, Le = (ft) => (ne.indicesToOffset = true, O < 2 ? ft : `i2o_${o}(${ft})`), nt = (...ft) => O === 0 ? "0u" : `${X.indices}(${ft.map(ee).join(",")})`, st = (ft, Dt) => O < 2 ? `${ft}` : `${Ht(ft, Dt, O)}`, Mt = (ft, Dt, an) => O < 2 ? `${ft}=${an};` : `${Ht(ft, Dt, O)}=${an};`, Ut = {}, Yt = (ft, Dt) => {
            ne.broadcastedIndicesToOffset = true;
            let an = `${Dt.name}broadcastedIndicesTo${o}Offset`;
            if (an in Ut)
              return `${an}(${ft})`;
            let vn = [];
            for (let Yn = O - 1; Yn >= 0; Yn--) {
              let jr = Dt.indicesGet("outputIndices", Yn + Dt.rank - O);
              vn.push(`${st(ue, Yn)} * (${jr} % ${st(ge, Yn)})`);
            }
            return Ut[an] = `fn ${an}(outputIndices: ${Dt.type.indices}) -> u32 {
             return ${vn.length > 0 ? vn.join("+") : "0u"};
           }`, `${an}(${ft})`;
          }, xt = (ft, Dt) => (() => {
            if (X.storage === X.value)
              return `${o}[${ft}]=${Dt};`;
            if (X.storage === "vec2<u32>" && X.value === "i32")
              return `${o}[${ft}]=vec2<u32>(u32(${Dt}), select(0u, 0xFFFFFFFFu, ${Dt} < 0));`;
            if (X.storage === "vec2<u32>" && X.value === "u32")
              return `${o}[${ft}]=vec2<u32>(u32(${Dt}), 0u);`;
            if (X.storage === "u32" && X.value === "vec4<bool>")
              return `${o}[${ft}]=dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(${Dt}));`;
            throw new Error(`not supported combination of storage type ${X.storage} and value type ${X.value} yet`);
          })(), hn = (ft) => (() => {
            if (X.storage === X.value)
              return `${o}[${ft}]`;
            if (X.storage === "vec2<u32>" && X.value === "i32")
              return `i32(${o}[${ft}].x)`;
            if (X.storage === "vec2<u32>" && X.value === "u32")
              return `u32(${o}[${ft}].x)`;
            if (X.storage === "u32" && X.value === "vec4<bool>")
              return `vec4<bool>(bool(${o}[${ft}] & 0xFFu), bool(${o}[${ft}] & 0xFF00u), bool(${o}[${ft}] & 0xFF0000u), bool(${o}[${ft}] & 0xFF000000u))`;
            throw new Error(`not supported combination of storage type ${X.storage} and value type ${X.value} yet`);
          })(), yn = O < 2 ? "" : `
  fn get_${o}ByIndices(indices: ${X.indices}) -> ${V} {
    return ${hn(`i2o_${o}(indices)`)};
  }`, $t = O < 2 ? "" : (() => {
            let ft = L.map((an) => `d${an}: u32`).join(", "), Dt = L.map((an) => `d${an}`).join(", ");
            return `
  fn get_${o}(${ft}) -> ${V} {
    return get_${o}ByIndices(${nt(Dt)});
  }`;
          })(), nn = (...ft) => {
            if (ft.length !== O)
              throw new Error(`indices length must be ${O}`);
            let Dt = ft.map(ee).join(",");
            return O === 0 ? hn("0u") : O === 1 ? hn(Dt[0]) : (ne.get = true, ne.getByIndices = true, ne.indicesToOffset = true, `get_${o}(${Dt})`);
          }, wn = (ft) => O < 2 ? hn(ft) : (ne.getByIndices = true, ne.indicesToOffset = true, `get_${o}ByIndices(${ft})`), rn = O < 2 ? "" : `
  fn set_${o}ByIndices(indices: ${X.indices}, value: ${V}) {
    ${xt(`i2o_${o}(indices)`, "value")}
  }`, xn = O < 2 ? "" : (() => {
            let ft = L.map((an) => `d${an}: u32`).join(", "), Dt = L.map((an) => `d${an}`).join(", ");
            return `
  fn set_${o}(${ft}, value: ${V}) {
    set_${o}ByIndices(${nt(Dt)}, value);
  }`;
          })();
          return {
            impl: () => {
              let ft = [], Dt = false;
              return ne.offsetToIndices && (ft.push(Te), Dt = true), ne.indicesToOffset && (ft.push(ze), Dt = true), ne.broadcastedIndicesToOffset && (Object.values(Ut).forEach((an) => ft.push(an)), Dt = true), ne.set && (ft.push(xn), Dt = true), ne.setByIndices && (ft.push(rn), Dt = true), ne.get && (ft.push($t), Dt = true), ne.getByIndices && (ft.push(yn), Dt = true), !I && Dt && ft.unshift(`const ${ge} = ${X.indices}(${b.join(",")});`, `const ${ue} = ${X.indices}(${Xe.computeStrides(b).join(",")});`), ft.join(`
`);
            },
            type: X,
            offsetToIndices: we,
            indicesToOffset: Le,
            broadcastedIndicesToOffset: Yt,
            indices: nt,
            indicesGet: st,
            indicesSet: Mt,
            set: (...ft) => {
              if (ft.length !== O + 1)
                throw new Error(`indices length must be ${O}`);
              let Dt = ft[O];
              if (typeof Dt != "string")
                throw new Error("value must be string");
              let an = ft.slice(0, O).map(ee).join(",");
              return O === 0 ? xt("0u", Dt) : O === 1 ? xt(an[0], Dt) : (ne.set = true, ne.setByIndices = true, ne.indicesToOffset = true, `set_${o}(${an}, ${Dt})`);
            },
            setByOffset: xt,
            setByIndices: (ft, Dt) => O < 2 ? xt(ft, Dt) : (ne.setByIndices = true, ne.indicesToOffset = true, `set_${o}ByIndices(${ft}, ${Dt});`),
            get: nn,
            getByOffset: hn,
            getByIndices: wn,
            usage: T,
            name: o,
            strides: ue,
            shape: ge,
            rank: O
          };
        }, ct = (o, v, b, T = 1) => Qr(o, v, b, "input", T), Wt = (o, v, b, T = 1) => Qr(o, v, b, "output", T), Vr = (o, v, b) => Qr(o, v, b, "atomicOutput", 1), Ys = (o, v, b, T = 1) => Qr(o, v, b, "internal", T), Ui = class {
          constructor(o, v) {
            this.normalizedDispatchGroup = o, this.limits = v, this.internalVariables = [], this.variables = [], this.uniforms = [], this.variableIndex = 0;
          }
          guardAgainstOutOfBoundsWorkgroupSizes(o) {
            return `if (global_idx >= ${typeof o == "number" ? `${o}u` : o}) { return; }`;
          }
          mainStart(o = Vn) {
            let v = typeof o == "number" ? o : o[0], b = typeof o == "number" ? 1 : o[1], T = typeof o == "number" ? 1 : o[2];
            if (v > this.limits.maxComputeWorkgroupSizeX || b > this.limits.maxComputeWorkgroupSizeY || T > this.limits.maxComputeWorkgroupSizeZ)
              throw new Error(`workgroup size [${v}, ${b}, ${T}] exceeds the maximum workgroup size [${this.limits.maxComputeWorkgroupSizeX}, ${this.limits.maxComputeWorkgroupSizeY}, ${this.limits.maxComputeWorkgroupSizeZ}].`);
            if (v * b * T > this.limits.maxComputeInvocationsPerWorkgroup)
              throw new Error(`workgroup size [${v}, ${b}, ${T}] exceeds the maximum workgroup invocations ${this.limits.maxComputeInvocationsPerWorkgroup}.`);
            let S = this.normalizedDispatchGroup[1] === 1 && this.normalizedDispatchGroup[2] === 1, I = S ? `@builtin(global_invocation_id) global_id : vec3<u32>,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(local_invocation_id) local_id : vec3<u32>` : `@builtin(global_invocation_id) global_id : vec3<u32>,
                                             @builtin(local_invocation_id) local_id : vec3<u32>,
    @builtin(local_invocation_index) local_idx : u32,
    @builtin(workgroup_id) workgroup_id : vec3<u32>,
    @builtin(num_workgroups) num_workgroups : vec3<u32>`, O = S ? `let global_idx = global_id.x;
         let workgroup_index = workgroup_id.x;` : `let workgroup_index = workgroup_id.z * num_workgroups[0] * num_workgroups[1] +
             workgroup_id.y * num_workgroups[0] + workgroup_id.x;
         let global_idx = workgroup_index * ${v * b * T}u + local_idx;`;
            return `@compute @workgroup_size(${v}, ${b}, ${T})
  fn main(${I}) {
    ${O}
  `;
          }
          appendVariableUniforms(o) {
            o.rank !== 0 && (o.shape.startsWith("uniforms.") && this.uniforms.push({
              name: o.shape.replace("uniforms.", ""),
              type: "u32",
              length: o.rank
            }), o.strides.startsWith("uniforms.") && this.uniforms.push({
              name: o.strides.replace("uniforms.", ""),
              type: "u32",
              length: o.rank
            }));
          }
          declareVariable(o, v) {
            if (o.usage === "internal")
              throw new Error("cannot use internal variable with declareVariable(). use registerInternalVariables() instead.");
            this.variables.push(o), this.appendVariableUniforms(o);
            let b = o.usage === "input" ? "read" : "read_write", T = o.usage === "atomicOutput" ? "atomic<i32>" : o.type.storage;
            return `@group(0) @binding(${v}) var<storage, ${b}> ${o.name}: array<${T}>;`;
          }
          declareVariables(...o) {
            return o.map((v) => this.declareVariable(v, this.variableIndex++)).join(`
`);
          }
          registerInternalVariable(o) {
            if (o.usage !== "internal")
              throw new Error("cannot use input or output variable with registerInternalVariable(). use declareVariables() instead.");
            this.internalVariables.push(o), this.appendVariableUniforms(o);
          }
          registerInternalVariables(...o) {
            return o.forEach((v) => this.registerInternalVariable(v)), this;
          }
          registerUniform(o, v, b = 1) {
            return this.uniforms.push({
              name: o,
              type: v,
              length: b
            }), this;
          }
          registerUniforms(o) {
            return this.uniforms = this.uniforms.concat(o), this;
          }
          uniformDeclaration() {
            if (this.uniforms.length === 0)
              return "";
            let o = [];
            for (let { name: v, type: b, length: T } of this.uniforms)
              if (T && T > 4)
                b === "f16" ? o.push(`@align(16) ${v}:array<mat2x4<${b}>, ${Math.ceil(T / 8)}>`) : o.push(`${v}:array<vec4<${b}>, ${Math.ceil(T / 4)}>`);
              else {
                let S = T == null || T === 1 ? b : `vec${T}<${b}>`;
                o.push(`${v}:${S}`);
              }
            return `
      struct Uniforms { ${o.join(", ")} };
      @group(0) @binding(${this.variableIndex}) var<uniform> uniforms: Uniforms;`;
          }
          get additionalImplementations() {
            return this.uniformDeclaration() + this.variables.map((o) => o.impl()).join(`
`) + this.internalVariables.map((o) => o.impl()).join(`
`);
          }
          get variablesInfo() {
            if (this.uniforms.length === 0)
              return;
            let o = (v) => [
              12,
              10,
              1,
              6
            ][[
              "u32",
              "f16",
              "f32",
              "i32"
            ].indexOf(v)];
            return this.uniforms.map((v) => [
              o(v.type),
              v.length ?? 1
            ]);
          }
        }, Gi = (o, v) => new Ui(o, v);
      }), Wi, fs, qi, Hi, Xs, Ki, cr, Yi, Qs, Or = g(() => {
        Kt(), ce(), Qt(), fn(), Wi = (o, v) => {
          if (!o || o.length !== 1)
            throw new Error("Transpose requires 1 input.");
          if (v.length !== 0 && v.length !== o[0].dims.length)
            throw new Error(`perm size ${v.length} does not match input rank ${o[0].dims.length}`);
        }, fs = (o, v) => v.length !== 0 ? v : [
          ...new Array(o).keys()
        ].reverse(), qi = (o, v) => Xe.sortBasedOnPerm(o, fs(o.length, v)), Hi = (o, v, b, T) => {
          let S = `fn perm(i: ${T.type.indices}) -> ${b.type.indices} {
    var a: ${b.type.indices};`;
          for (let I = 0; I < v; ++I)
            S += `a[${o[I]}]=i[${I}];`;
          return S += "return a;}";
        }, Xs = (o, v) => {
          let b = [], T = [];
          for (let S = 0; S < o.length; ++S)
            o[S] !== 1 && b.push(o[S]), o[v[S]] !== 1 && T.push(v[S]);
          return {
            newShape: b,
            newPerm: T
          };
        }, Ki = (o, v) => {
          let b = 0;
          for (let T = 0; T < o.length; ++T)
            if (v[o[T]] !== 1) {
              if (o[T] < b)
                return false;
              b = o[T];
            }
          return true;
        }, cr = (o, v) => {
          let b = o.dataType, T = o.dims.length, S = fs(T, v), I = qi(o.dims, S), O = o.dims, L = I, z = T < 2 || Ki(S, o.dims), B;
          if (z)
            return B = (ne) => {
              let se = ct("input", b, O, 4), ge = Wt("output", b, L, 4);
              return `
  ${ne.registerUniform("output_size", "u32").declareVariables(se, ge)}
  ${ne.mainStart()}
    ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    output[global_idx] = input[global_idx];
  }`;
            }, {
              name: "TransposeCopy",
              shaderCache: {
                inputDependencies: [
                  "type"
                ]
              },
              getRunData: () => {
                let ne = Xe.size(I);
                return {
                  outputs: [
                    {
                      dims: I,
                      dataType: o.dataType
                    }
                  ],
                  dispatchGroup: {
                    x: Math.ceil(ne / 64 / 4)
                  },
                  programUniforms: [
                    {
                      type: 12,
                      data: Math.ceil(ne / 4)
                    }
                  ]
                };
              },
              getShaderSource: B
            };
          let { newShape: V, newPerm: q } = Xs(o.dims, S), X = Xe.areEqual(q, [
            2,
            3,
            1
          ]), ee = Xe.areEqual(q, [
            3,
            1,
            2
          ]);
          if (V.length === 2 || X || ee) {
            O = X ? [
              V[0],
              V[1] * V[2]
            ] : ee ? [
              V[0] * V[1],
              V[2]
            ] : V, L = [
              O[1],
              O[0]
            ];
            let ne = 16;
            return B = (se) => {
              let ge = ct("a", b, O.length), ue = Wt("output", b, L.length);
              return `
  ${se.registerUniform("output_size", "u32").declareVariables(ge, ue)}
  var<workgroup> tile : array<array<${ue.type.value}, ${ne + 1}>, ${ne}>;
  ${se.mainStart([
                ne,
                ne,
                1
              ])}
    let stride = (uniforms.output_shape[1] - 1) / ${ne} + 1;
    let workgroup_id_x = workgroup_index % stride;
    let workgroup_id_y = workgroup_index / stride;
    let input_col = workgroup_id_y * ${ne}u + local_id.x;
    let input_row = workgroup_id_x * ${ne}u + local_id.y;
    if (input_row < uniforms.a_shape[0] && input_col < uniforms.a_shape[1]) {
      tile[local_id.y][local_id.x] = ${ge.getByIndices(`${ge.type.indices}(input_row, input_col)`)};
    }
    workgroupBarrier();

    let output_col = workgroup_id_x * ${ne}u + local_id.x;
    let output_row = workgroup_id_y * ${ne}u + local_id.y;
    if (output_row < uniforms.output_shape[0] && output_col < uniforms.output_shape[1]) {
      ${ue.setByIndices(`${ue.type.indices}(output_row, output_col)`, "tile[local_id.x][local_id.y]")}
    }
  }`;
            }, {
              name: "TransposeShared",
              shaderCache: {
                inputDependencies: [
                  "type"
                ]
              },
              getRunData: () => {
                let se = Xe.size(I);
                return {
                  outputs: [
                    {
                      dims: I,
                      dataType: o.dataType
                    }
                  ],
                  dispatchGroup: {
                    x: Math.ceil(L[1] / ne),
                    y: Math.ceil(L[0] / ne)
                  },
                  programUniforms: [
                    {
                      type: 12,
                      data: se
                    },
                    ...kt(O, L)
                  ]
                };
              },
              getShaderSource: B
            };
          }
          return B = (ne) => {
            let se = ct("a", b, O.length), ge = Wt("output", b, L.length);
            return `
  ${ne.registerUniform("output_size", "u32").declareVariables(se, ge)}

  ${Hi(S, T, se, ge)}

  ${ne.mainStart()}
    ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${ge.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${ge.setByOffset("global_idx", se.getByIndices("aIndices"))}
  }`;
          }, {
            name: "Transpose",
            shaderCache: {
              hint: `${v}`,
              inputDependencies: [
                "rank"
              ]
            },
            getRunData: () => {
              let ne = Xe.size(I);
              return {
                outputs: [
                  {
                    dims: I,
                    dataType: o.dataType
                  }
                ],
                dispatchGroup: {
                  x: Math.ceil(ne / 64)
                },
                programUniforms: [
                  {
                    type: 12,
                    data: ne
                  },
                  ...kt(O, L)
                ]
              };
            },
            getShaderSource: B
          };
        }, Yi = (o, v) => {
          Wi(o.inputs, v.perm), o.compute(cr(o.inputs[0], v.perm));
        }, Qs = (o) => Pt({
          perm: o.perm
        });
      }), Xi, Js, Zs, _s, Qi, Ji, Zi, ea, ta, na, _r, ra, eo, sa, ms, to, oa, no, $r, ia, dd, pd = g(() => {
        Kt(), ce(), fn(), lo(), Or(), Xi = {
          max: "select(bestValue, candidate, candidate > bestValue)",
          min: "select(bestValue, candidate, candidate < bestValue)",
          mean: "bestValue + candidate",
          sum: "bestValue + candidate",
          prod: "bestValue * candidate",
          sumSquare: "bestValue + candidate * candidate",
          logSumExp: "bestValue + exp(candidate)",
          l1: "bestValue + abs(candidate)",
          l2: "bestValue + candidate * candidate",
          logSum: "bestValue + candidate"
        }, Js = {
          max: "select(bestValue, candidate, candidate > bestValue)",
          min: "select(bestValue, candidate, candidate < bestValue)",
          mean: "bestValue + candidate",
          sum: "bestValue + candidate",
          prod: "bestValue * candidate",
          sumSquare: "bestValue + candidate",
          logSumExp: "bestValue + candidate",
          l1: "bestValue + candidate",
          l2: "bestValue + candidate",
          logSum: "bestValue + candidate"
        }, Zs = {
          max: "_A[offset]",
          min: "_A[offset]",
          mean: "0",
          sum: "0",
          prod: "1",
          sumSquare: "0",
          logSumExp: "0",
          l1: "0",
          l2: "0",
          logSum: "0"
        }, _s = {
          max: "bestValue",
          min: "bestValue",
          sum: "bestValue",
          prod: "bestValue",
          sumSquare: "bestValue",
          logSumExp: "log(bestValue)",
          l1: "bestValue",
          l2: "sqrt(bestValue)",
          logSum: "log(bestValue)"
        }, Qi = (o, v) => {
          let b = [];
          for (let T = v - o; T < v; ++T)
            b.push(T);
          return b;
        }, Ji = (o, v) => {
          let b = [], T = o.length;
          for (let I = 0; I < T; I++)
            v.indexOf(I) === -1 && b.push(o[I]);
          let S = v.map((I) => o[I]);
          return [
            b,
            S
          ];
        }, Zi = (o, v) => {
          let b = o.length + v.length, T = [], S = 0;
          for (let I = 0; I < b; I++)
            v.indexOf(I) === -1 ? T.push(o[S++]) : T.push(1);
          return T;
        }, ea = (o, v) => {
          for (let b = 0; b < o.length; ++b)
            if (o[o.length - b - 1] !== v - 1 - b)
              return false;
          return true;
        }, ta = (o, v) => {
          let b = [];
          if (!ea(o, v)) {
            for (let T = 0; T < v; ++T)
              o.indexOf(T) === -1 && b.push(T);
            o.forEach((T) => b.push(T));
          }
          return b;
        }, na = (o, v, b, T, S, I, O) => {
          let L = b[0].dims, z = Xe.size(I), B = Xe.size(O), V = ct("_A", b[0].dataType, L), q = Wt("output", S, I), X = 64;
          z === 1 && (X = 256);
          let ee = `
          var<workgroup> aBestValues : array<f32, ${X}>;
       `, ne = (se) => `
        ${se.registerUniform("reduceSize", "u32").declareVariables(V, q)}
        ${ee}
        fn DIV_CEIL(a : u32, b : u32) -> u32 {
          return ((a - 1u) / b + 1u);
         }
         ${se.mainStart(X)}

          let outputIndex = global_idx / ${X};
          let offset = outputIndex * uniforms.reduceSize;

          var bestValue = f32(${Zs[T]});
          let Length = uniforms.reduceSize;
          for (var k = local_idx; k < Length; k = k + ${X}) {
           let candidate = f32(${V.getByOffset("offset + k")});
           bestValue = ${Xi[T]};
          }
          aBestValues[local_idx] = bestValue;
          workgroupBarrier();

         var reduceSize = min(Length, ${X}u);
         for (var currentSize = reduceSize / 2u; reduceSize > 1u;
             currentSize = reduceSize / 2u) {
           let interval = DIV_CEIL(reduceSize, 2u);
           if (local_idx < currentSize) {
            let candidate = aBestValues[local_idx + interval];
            bestValue = ${Js[T]};
            aBestValues[local_idx] = bestValue;
           }
           reduceSize = interval;
           workgroupBarrier();
         }

         if (local_idx == 0u) {
          ${q.setByOffset("outputIndex", `${T === "mean" ? `${q.type.storage}(bestValue / f32(uniforms.reduceSize))` : `${q.type.storage}(${_s[T]})`}`)};
         }
        }`;
          return {
            name: o,
            shaderCache: {
              hint: `${v};${X}`,
              inputDependencies: [
                "type"
              ]
            },
            getShaderSource: ne,
            getRunData: () => ({
              outputs: [
                {
                  dims: I,
                  dataType: S
                }
              ],
              dispatchGroup: {
                x: z
              },
              programUniforms: [
                {
                  type: 12,
                  data: B
                }
              ]
            })
          };
        }, _r = (o, v, b, T) => {
          let S = o.inputs.length === 1 ? b : ro(o.inputs, b), I = S.axes;
          I.length === 0 && !S.noopWithEmptyAxes && (I = o.inputs[0].dims.map((ee, ne) => ne));
          let O = Xe.normalizeAxes(I, o.inputs[0].dims.length), L = O, z = o.inputs[0], B = ta(L, o.inputs[0].dims.length);
          B.length > 0 && (z = o.compute(cr(o.inputs[0], B), {
            inputs: [
              0
            ],
            outputs: [
              -1
            ]
          })[0], L = Qi(L.length, z.dims.length));
          let [V, q] = Ji(z.dims, L), X = V;
          S.keepDims && (X = Zi(V, O)), o.compute(na(v, S.cacheKey, [
            z
          ], T, o.inputs[0].dataType, X, q), {
            inputs: [
              z
            ]
          });
        }, ra = (o, v) => {
          _r(o, "ReduceMeanShared", v, "mean");
        }, eo = (o, v) => {
          _r(o, "ReduceL1Shared", v, "l1");
        }, sa = (o, v) => {
          _r(o, "ReduceL2Shared", v, "l2");
        }, ms = (o, v) => {
          _r(o, "ReduceLogSumExpShared", v, "logSumExp");
        }, to = (o, v) => {
          _r(o, "ReduceMaxShared", v, "max");
        }, oa = (o, v) => {
          _r(o, "ReduceMinShared", v, "min");
        }, no = (o, v) => {
          _r(o, "ReduceProdShared", v, "prod");
        }, $r = (o, v) => {
          _r(o, "ReduceSumShared", v, "sum");
        }, ia = (o, v) => {
          _r(o, "ReduceSumSquareShared", v, "sumSquare");
        }, dd = (o, v) => {
          _r(o, "ReduceLogSumShared", v, "logSum");
        };
      }), Tr, aa, Jr, ro, mr, la, ca, ua, gs, da, pa, ha, so, fa, _a, hr, ma, ga, oo, ba, wa, io, ya, xa, ao, va, lo = g(() => {
        Kt(), ce(), Qt(), fn(), pd(), Tr = (o) => {
          if (!o || o.length === 0 || o.length > 2)
            throw new Error("Reduce op requires 1 or 2 inputs.");
          if (o.length === 2 && o[1].dims.length !== 1)
            throw new Error("Invalid axes input dims.");
        }, aa = (o) => [
          "",
          "",
          `var value = ${o.getByIndices("input_indices")};`,
          ""
        ], Jr = (o, v, b, T, S, I, O = false, L = false) => {
          let z = [], B = b[0].dims, V = B.length, q = Xe.normalizeAxes(S, V), X = !L && q.length === 0;
          B.forEach((se, ge) => {
            X || q.indexOf(ge) >= 0 ? O && z.push(1) : z.push(se);
          });
          let ee = z.length, ne = Xe.size(z);
          return {
            name: o,
            shaderCache: v,
            getShaderSource: (se) => {
              let ge = [], ue = ct("_A", b[0].dataType, V), re = Wt("output", I, ee), Te = T(ue, re, q), we = Te[2];
              for (let Se = 0, ze = 0; Se < V; Se++)
                X || q.indexOf(Se) >= 0 ? (O && ze++, we = `for(var j${Se}: u32 = 0; j${Se} < ${B[Se]}; j${Se}++) {
                  ${Te[2].includes("last_index") ? `let last_index = j${Se};` : ""}
                  ${ue.indicesSet("input_indices", Se, `j${Se}`)}
                  ${we}
                }`) : (ge.push(`${ue.indicesSet("input_indices", Se, re.indicesGet("output_indices", ze))};`), ze++);
              return `

        ${se.registerUniform("output_size", "u32").declareVariables(ue, re)}

        ${se.mainStart()}
          ${se.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          var input_indices: ${ue.type.indices};
          let output_indices = ${re.offsetToIndices("global_idx")};

          ${ge.join(`
`)}
          ${Te[0]}       // init ops for reduce max/min
          ${Te[1]}
          ${we}
          ${Te[3]}
          ${Te.length === 4 ? re.setByOffset("global_idx", "value") : Te.slice(4).join(`
`)}
        }`;
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: z,
                  dataType: I
                }
              ],
              dispatchGroup: {
                x: Math.ceil(ne / 64)
              },
              programUniforms: [
                {
                  type: 12,
                  data: ne
                },
                ...kt(B, z)
              ]
            })
          };
        }, ro = (o, v) => {
          let b = [];
          return o[1].dims[0] > 0 && o[1].getBigInt64Array().forEach((T) => b.push(Number(T))), Pt({
            axes: b,
            keepDims: v.keepDims,
            noopWithEmptyAxes: v.noopWithEmptyAxes
          });
        }, mr = (o, v, b, T) => {
          let S = o.inputs, I = S.length === 1 ? b : ro(S, b);
          o.compute(Jr(v, {
            hint: I.cacheKey,
            inputDependencies: [
              "rank"
            ]
          }, [
            S[0]
          ], I.noopWithEmptyAxes && I.axes.length === 0 ? aa : T, I.axes, S[0].dataType, I.keepDims, I.noopWithEmptyAxes), {
            inputs: [
              0
            ]
          });
        }, la = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceLogSum", v, (b, T) => [
            `var value = ${T.type.storage}(0);`,
            "",
            `value += ${b.getByIndices("input_indices")};`,
            "value = log(value);"
          ]);
        }, ca = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceL1", v, (b, T) => [
            `var value = ${T.type.storage}(0);`,
            "",
            `value += abs(${b.getByIndices("input_indices")});`,
            ""
          ]);
        }, ua = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceL2", v, (b, T) => [
            `var t = ${T.type.value}(0); var value = ${T.type.value}(0);`,
            "",
            `t = ${b.getByIndices("input_indices")}; value += (t * t);`,
            "value = sqrt(value);"
          ]);
        }, gs = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceLogSumExp", v, (b, T) => [
            `var value = ${T.type.storage}(0);`,
            "",
            `value += exp(${b.getByIndices("input_indices")});`,
            "value = log(value);"
          ]);
        }, da = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceMax", v, (b, T, S) => {
            let I = [];
            for (let O = 0; O < b.rank; O++)
              (S.indexOf(O) >= 0 || S.length === 0) && I.push(b.indicesSet("input_indices", O, 0));
            return [
              `${I.join(`
`)}`,
              `var value = ${b.getByIndices("input_indices")};`,
              `value = max(value, ${b.getByIndices("input_indices")});`,
              ""
            ];
          });
        }, pa = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceMean", v, (b, T, S) => {
            let I = 1;
            for (let O = 0; O < b.rank; O++)
              (S.indexOf(O) >= 0 || S.length === 0) && (I *= o.inputs[0].dims[O]);
            return [
              "var sum = f32(0);",
              "",
              `sum += f32(${b.getByIndices("input_indices")});`,
              `let value = ${T.type.value}(sum / ${I});`
            ];
          });
        }, ha = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceMin", v, (b, T, S) => {
            let I = [];
            for (let O = 0; O < b.rank; O++)
              (S.indexOf(O) >= 0 || S.length === 0) && I.push(`input_indices[${O}] = 0;`);
            return [
              `${I.join(`
`)}`,
              `var value = ${b.getByIndices("input_indices")};`,
              `value = min(value, ${b.getByIndices("input_indices")});`,
              ""
            ];
          });
        }, so = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceProd", v, (b, T) => [
            `var value = ${T.type.storage}(1);`,
            "",
            `value *= ${b.getByIndices("input_indices")};`,
            ""
          ]);
        }, fa = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceSum", v, (b, T) => [
            `var value = ${T.type.storage}(0);`,
            "",
            `value += ${b.getByIndices("input_indices")};`,
            ""
          ]);
        }, _a = (o, v) => {
          Tr(o.inputs), mr(o, "ReduceSumSquare", v, (b, T) => [
            `var t = ${T.type.value}(0); var value = ${T.type.value}(0);`,
            "",
            `t = ${b.getByIndices("input_indices")}; value += t * t;`,
            ""
          ]);
        }, hr = (o, v, b) => {
          if (v.length === 0)
            return b;
          let T = 1, S = 1;
          for (let I = 0; I < v.length; I++)
            v.indexOf(I) === -1 ? T *= o[I] : S *= o[I];
          return S < 32 && T > 1024;
        }, ma = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? pa(o, v) : ra(o, v);
        }, ga = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? ca(o, v) : eo(o, v);
        }, oo = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? ua(o, v) : sa(o, v);
        }, ba = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? gs(o, v) : ms(o, v);
        }, wa = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? da(o, v) : to(o, v);
        }, io = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? ha(o, v) : oa(o, v);
        }, ya = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? so(o, v) : no(o, v);
        }, xa = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? fa(o, v) : $r(o, v);
        }, ao = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? _a(o, v) : ia(o, v);
        }, va = (o, v) => {
          hr(o.inputs[0].dims, v.axes, v.noopWithEmptyAxes) ? la(o, v) : dd(o, v);
        };
      }), bs, Ta, Ma, ws, hd = g(() => {
        Kt(), Qt(), lo(), bs = (o) => {
          if (!o || o.length === 0 || o.length > 2)
            throw new Error("ArgMinMaxOp op requires 1 or 2 inputs.");
          if (o[0].dataType !== 1)
            throw new Error("Invalid input type.");
        }, Ta = (o, v) => {
          bs(o.inputs);
          let b = (T, S, I) => {
            let O = [];
            for (let L = 0; L < T.rank; L++)
              (I.indexOf(L) >= 0 || I.length === 0) && O.push(`input_indices[${L}] = 0;`);
            return [
              `${O.join(`
`)}`,
              `var value = ${T.getByIndices("input_indices")};
var best_index : i32 = 0;`,
              `if (${T.getByIndices("input_indices")} ${v.selectLastIndex > 0 ? "<=" : "<"} value) {
         value = ${T.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,
              "",
              S.setByOffset("global_idx", "best_index")
            ];
          };
          o.compute(Jr("ArgMin", {
            hint: v.cacheKey,
            inputDependencies: [
              "rank"
            ]
          }, [
            o.inputs[0]
          ], b, [
            v.axis
          ], 7, v.keepDims), {
            inputs: [
              0
            ]
          });
        }, Ma = (o, v) => {
          bs(o.inputs);
          let b = (T, S, I) => {
            let O = [];
            for (let L = 0; L < T.rank; L++)
              (I.indexOf(L) >= 0 || I.length === 0) && O.push(`input_indices[${L}] = 0;`);
            return [
              `${O.join(`
`)}`,
              `var value = ${T.getByIndices("input_indices")};
var best_index : i32 = 0;`,
              `if (${T.getByIndices("input_indices")} ${v.selectLastIndex > 0 ? ">=" : ">"} value) {
         value = ${T.getByIndices("input_indices")};
         best_index = i32(last_index);
       }`,
              "",
              S.setByOffset("global_idx", "best_index")
            ];
          };
          o.compute(Jr("argMax", {
            hint: v.cacheKey,
            inputDependencies: [
              "rank"
            ]
          }, [
            o.inputs[0]
          ], b, [
            v.axis
          ], 7, v.keepDims), {
            inputs: [
              0
            ]
          });
        }, ws = (o) => Pt(o);
      }), Ea, Zr, Pa, Sa, co, es, ka, Aa, uo = g(() => {
        Kt(), ce(), jn(), fn(), Ea = (o, v) => {
          let b = o[0], T = o[1], S = o[2], I = o[3], O = o[4], L = o[5];
          if (O && L)
            throw new Error("Attention cannot have both past and attention_bias");
          if (b.dims.length !== 3)
            throw new Error('Input "input" must have 3 dimensions');
          let z = b.dims[0], B = b.dims[1], V = b.dims[2];
          if (S.dims.length !== 1)
            throw new Error('Input "bias" is expected to have 1 dimensions');
          if (T.dims.length !== 2)
            throw new Error('Input "weights" is expected to have 2 dimensions');
          if (T.dims[0] !== V)
            throw new Error("Input 1 dimension 0 should have same length as dimension 2 of input 0");
          if (S.dims[0] !== T.dims[1])
            throw new Error('Input "bias" dimension 0 should have same length as dimension 1 of input "weights"');
          let q = S.dims[0] / 3, X = q, ee = X;
          if (v.qkvHiddenSizes.length > 0) {
            if (v.qkvHiddenSizes.length !== 3)
              throw new Error("qkv_hidden_sizes attribute should have 3 elements");
            for (let Te of v.qkvHiddenSizes)
              if (Te % v.numHeads !== 0)
                throw new Error("qkv_hidden_sizes should be divisible by num_heads");
            q = v.qkvHiddenSizes[0], X = v.qkvHiddenSizes[1], ee = v.qkvHiddenSizes[2];
          }
          let ne = B;
          if (q !== X)
            throw new Error("qkv_hidden_sizes first element should be same as the second");
          if (S.dims[0] !== q + X + ee)
            throw new Error('Input "bias" dimension 0 should have same length as sum of Q/K/V hidden sizes');
          let se = 0;
          if (O) {
            if (X !== ee)
              throw new Error('Input "past" expect k_hidden_size == v_hidden_size');
            if (O.dims.length !== 5)
              throw new Error('Input "past" must have 5 dimensions');
            if (O.dims[0] !== 2)
              throw new Error('Input "past" first dimension must be 2');
            if (O.dims[1] !== z)
              throw new Error('Input "past" second dimension must be batch_size');
            if (O.dims[2] !== v.numHeads)
              throw new Error('Input "past" third dimension must be num_heads');
            if (O.dims[4] !== X / v.numHeads)
              throw new Error('Input "past" fifth dimension must be k_hidden_size / num_heads');
            v.pastPresentShareBuffer || (se = O.dims[3]);
          }
          let ge = ne + se, ue = -1, re = 0;
          if (I)
            throw new Error("Mask not supported");
          if (O)
            throw new Error("past is not supported");
          if (L) {
            if (L.dims.length !== 4)
              throw new Error('Input "attention_bias" must have 4 dimensions');
            if (L.dims[0] !== z || L.dims[1] !== v.numHeads || L.dims[2] !== B || L.dims[3] !== ge)
              throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)');
          }
          return {
            batchSize: z,
            sequenceLength: B,
            pastSequenceLength: se,
            kvSequenceLength: ne,
            totalSequenceLength: ge,
            maxSequenceLength: ue,
            inputHiddenSize: V,
            hiddenSize: q,
            vHiddenSize: ee,
            headSize: Math.floor(q / v.numHeads),
            vHeadSize: Math.floor(ee / v.numHeads),
            numHeads: v.numHeads,
            isUnidirectional: false,
            pastPresentShareBuffer: false,
            maskFilterValue: v.maskFilterValue,
            maskType: re,
            scale: v.scale,
            broadcastResPosBias: false,
            passPastInKv: false,
            qkvFormat: 1
          };
        }, Zr = (o, v, b) => v && o ? `
      let total_sequence_length_input = u32(${v.getByOffset("0")});
      let present_sequence_length = max(total_sequence_length_input, uniforms.past_sequence_length);
      let is_subsequent_prompt: bool = sequence_length > 1 && sequence_length != total_sequence_length_input;
      let is_first_prompt: bool = is_subsequent_prompt == false && sequence_length == total_sequence_length_input;
      total_sequence_length = u32(${o?.getByOffset("batchIdx")}) + 1;
      var past_sequence_length: u32 = 0;
      if (is_first_prompt == false) {
        past_sequence_length = total_sequence_length - sequence_length;
      }
       ` : `
    ${b ? "let past_sequence_length = uniforms.past_sequence_length" : ""};
    let present_sequence_length = total_sequence_length;
    `, Pa = (o, v, b, T, S, I, O, L) => {
          let z = Mn(O ? 1 : I), B = 64, V = I / z;
          V < B && (B = 32);
          let q = Math.ceil(I / z / B), X = [
            {
              type: 12,
              data: v
            },
            {
              type: 12,
              data: b
            },
            {
              type: 12,
              data: T
            },
            {
              type: 12,
              data: S
            },
            {
              type: 12,
              data: V
            },
            {
              type: 12,
              data: q
            }
          ], ee = Ke(o.dataType, z), ne = sn(1, z), se = [
            "type"
          ];
          O && se.push("type"), L && se.push("type");
          let ge = (ue) => {
            let re = Wt("x", o.dataType, o.dims, z), Te = [
              re
            ], we = O ? ct("seq_lens", O.dataType, O.dims) : void 0;
            we && Te.push(we);
            let Se = L ? ct("total_sequence_length_input", L.dataType, L.dims) : void 0;
            Se && Te.push(Se);
            let ze = sn(o.dataType), Le = [
              {
                name: "batch_size",
                type: "u32"
              },
              {
                name: "num_heads",
                type: "u32"
              },
              {
                name: "past_sequence_length",
                type: "u32"
              },
              {
                name: "sequence_length",
                type: "u32"
              },
              {
                name: "total_sequence_length",
                type: "u32"
              },
              {
                name: "elements_per_thread",
                type: "u32"
              }
            ];
            return `
  var<workgroup> thread_max: array<f32, ${B}>;
  var<workgroup> thread_sum: array<f32, ${B}>;
  ${ue.registerUniforms(Le).declareVariables(...Te)}
  ${ue.mainStart([
              B,
              1,
              1
            ])}
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let sequence_length = uniforms.sequence_length;
    var total_sequence_length = uniforms.total_sequence_length;
    ${Zr(we, Se, false)}
    let local_offset = local_idx * uniforms.elements_per_thread;
    let offset = (global_idx / ${B}) * uniforms.total_sequence_length + local_offset;
    let seq_causal_length = ${O ? "u32(past_sequence_length + workgroup_id.y + 1)" : "total_sequence_length"};
    var thread_max_vector = ${ne}(-3.402823e+38f);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      thread_max_vector = max(${ne}(x[offset + i]), thread_max_vector);
    }
    thread_max[local_idx] = ${(() => {
              switch (z) {
                case 1:
                  return "thread_max_vector";
                case 2:
                  return "max(thread_max_vector.x, thread_max_vector.y)";
                case 4:
                  return "max(max(thread_max_vector.x, thread_max_vector.y), max(thread_max_vector.z, thread_max_vector.w))";
                default:
                  throw new Error(`Unsupported components: ${z}`);
              }
            })()};
    workgroupBarrier();

    var max_value =  f32(-3.402823e+38f);
    for (var i = 0u; i < ${B}; i++) {
      max_value = max(thread_max[i], max_value);
    }

    var sum_vector = ${ne}(0);
    for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
      sum_vector += exp(${ne}(x[offset + i]) - max_value);
    }
    thread_sum[local_idx] = ${(() => {
              switch (z) {
                case 1:
                  return "sum_vector";
                case 2:
                  return "sum_vector.x + sum_vector.y";
                case 4:
                  return "sum_vector.x + sum_vector.y + sum_vector.z + sum_vector.w";
                default:
                  throw new Error(`Unsupported components: ${z}`);
              }
            })()};
    workgroupBarrier();

    var sum: f32 = 0;
    for (var i = 0u; i < ${B}; i++) {
      sum += thread_sum[i];
    }

    if (sum == 0) {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        x[offset + i] = ${re.type.value}(${ze}(1.0) / ${ze}(seq_causal_length));
      }
    } else {
      for (var i: u32 = 0; i < uniforms.elements_per_thread && i + local_offset < seq_causal_length; i++) {
        var f32input = ${ne}(x[offset + i]);
        x[offset + i] = ${re.type.value}(exp(f32input - max_value) / sum);
      }
    }
      ${O ? `
        for (var total_seq_id: u32 = seq_causal_length; total_seq_id + local_offset < uniforms.total_sequence_length; total_seq_id++) {
          x[offset + total_seq_id] = ${re.type.value}(${ze}(0));
        }` : ""};
  }`;
          };
          return {
            name: "AttentionProbsSoftmax",
            shaderCache: {
              hint: `${B};${ee};${z}`,
              inputDependencies: se
            },
            getShaderSource: ge,
            getRunData: () => ({
              outputs: [],
              dispatchGroup: {
                x: 1,
                y: S,
                z: v * b
              },
              programUniforms: X
            })
          };
        }, Sa = (o, v, b, T, S, I, O, L, z) => {
          let B = O + I.kvSequenceLength, V = [
            I.batchSize,
            I.numHeads,
            I.sequenceLength,
            B
          ], q = o > 1 && T, X = I.kvNumHeads ? I.kvNumHeads : I.numHeads, ee = q ? [
            I.batchSize,
            X,
            B,
            I.headSize
          ] : void 0, ne = I.nReps ? I.nReps : 1, se = I.scale === 0 ? 1 / Math.sqrt(I.headSize) : I.scale, ge = Mn(I.headSize), ue = I.headSize / ge, re = 12, Te = {
            x: Math.ceil(B / re),
            y: Math.ceil(I.sequenceLength / re),
            z: I.batchSize * I.numHeads
          }, we = [
            {
              type: 12,
              data: I.sequenceLength
            },
            {
              type: 12,
              data: ue
            },
            {
              type: 12,
              data: B
            },
            {
              type: 12,
              data: I.numHeads
            },
            {
              type: 12,
              data: I.headSize
            },
            {
              type: 1,
              data: se
            },
            {
              type: 12,
              data: O
            },
            {
              type: 12,
              data: I.kvSequenceLength
            },
            {
              type: 12,
              data: ne
            }
          ], Se = q && T && Xe.size(T.dims) > 0, ze = [
            "type",
            "type"
          ];
          Se && ze.push("type"), S && ze.push("type"), L && ze.push("type"), z && ze.push("type");
          let Le = [
            {
              dims: V,
              dataType: v.dataType,
              gpuDataType: 0
            }
          ];
          q && Le.push({
            dims: ee,
            dataType: v.dataType,
            gpuDataType: 0
          });
          let nt = (st) => {
            let Mt = ct("q", v.dataType, v.dims, ge), Ut = ct("key", b.dataType, b.dims, ge), Yt = [
              Mt,
              Ut
            ];
            if (Se) {
              let rn = ct("past_key", T.dataType, T.dims, ge);
              Yt.push(rn);
            }
            S && Yt.push(ct("attention_bias", S.dataType, S.dims));
            let xt = L ? ct("seq_lens", L.dataType, L.dims) : void 0;
            xt && Yt.push(xt);
            let hn = z ? ct("total_sequence_length_input", z.dataType, z.dims) : void 0;
            hn && Yt.push(hn);
            let yn = Wt("output", v.dataType, V), $t = [
              yn
            ];
            q && $t.push(Wt("present_key", v.dataType, ee, ge));
            let nn = sn(1, ge), wn = [
              {
                name: "M",
                type: "u32"
              },
              {
                name: "K",
                type: "u32"
              },
              {
                name: "N",
                type: "u32"
              },
              {
                name: "num_heads",
                type: "u32"
              },
              {
                name: "head_size",
                type: "u32"
              },
              {
                name: "alpha",
                type: "f32"
              },
              {
                name: "past_sequence_length",
                type: "u32"
              },
              {
                name: "kv_sequence_length",
                type: "u32"
              },
              {
                name: "n_reps",
                type: "u32"
              }
            ];
            return `
  const TILE_SIZE = ${re}u;

  var<workgroup> tileQ: array<${Mt.type.storage}, ${re * re}>;
  var<workgroup> tileK: array<${Mt.type.storage}, ${re * re}>;
  ${st.registerUniforms(wn).declareVariables(...Yt, ...$t)}
  ${st.mainStart([
              re,
              re,
              1
            ])}
    // x holds the N and y holds the M
    let headIdx = workgroup_id.z % uniforms.num_heads;
    let kvHeadIdx = ${ne === 1 ? "headIdx" : "headIdx / uniforms.n_reps"};
    let kv_num_heads = ${ne === 1 ? "uniforms.num_heads" : "uniforms.num_heads / uniforms.n_reps"};
    let batchIdx = workgroup_id.z / uniforms.num_heads;
    let m = workgroup_id.y * TILE_SIZE;
    let n = workgroup_id.x * TILE_SIZE;
    let sequence_length = uniforms.M;
    var total_sequence_length = uniforms.N;
    ${Zr(xt, hn, true)}
    let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx;
    let qOffset = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
    ${Se && q ? "let pastKeyOffset = absKvHeadIdx * uniforms.past_sequence_length * uniforms.K;" : ""};
    let kOffset = absKvHeadIdx * uniforms.kv_sequence_length * uniforms.K;
    ${q ? "let presentKeyOffset = absKvHeadIdx * uniforms.N * uniforms.K;" : ""}
    var value = ${nn}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (global_id.y < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = q[qOffset + local_id.y * uniforms.K + w + local_id.x];
      }
      if (n + local_id.y < uniforms.N && w + local_id.x < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
      ${Se && q ? `
              if (n + local_id.y < past_sequence_length) {
                tileK[idx] = past_key[pastKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
              } else if (n + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
                tileK[idx] = key[kOffset + (n + local_id.y - past_sequence_length) * uniforms.K + w + local_id.x];
              }` : `
          if (n + local_id.y < uniforms.kv_sequence_length) {
            tileK[idx] = key[kOffset + (n + local_id.y) * uniforms.K + w + local_id.x];
          }`}
      ${q ? `if (n + local_id.y < present_sequence_length) {
        present_key[presentKeyOffset + (n + local_id.y) * uniforms.K + w + local_id.x] = tileK[idx];
      }` : ""}
      }
      workgroupBarrier();

      for (var k: u32 = 0u; k < TILE_SIZE && w+k < uniforms.K; k++) {
          value += ${nn}(tileQ[TILE_SIZE * local_id.y + k] * tileK[TILE_SIZE * local_id.x + k]);
      }

      workgroupBarrier();
    }

    if (global_id.y < uniforms.M && global_id.x < total_sequence_length) {
      let headOffset = workgroup_id.z * uniforms.M * uniforms.N;
      let outputIdx = headOffset + global_id.y * uniforms.N + global_id.x;
      var sum: f32 = ${(() => {
              switch (ge) {
                case 1:
                  return "value";
                case 2:
                  return "value.x + value.y";
                case 4:
                  return "value.x + value.y + value.z + value.w";
                default:
                  throw new Error(`Unsupported components: ${ge}`);
              }
            })()};
        output[outputIdx] = ${yn.type.value} (sum * uniforms.alpha) + ${S ? "attention_bias[outputIdx]" : "0.0"};
    }
  }`;
          };
          return {
            name: "AttentionProbs",
            shaderCache: {
              hint: `${ge};${S !== void 0};${T !== void 0};${o}`,
              inputDependencies: ze
            },
            getRunData: () => ({
              outputs: Le,
              dispatchGroup: Te,
              programUniforms: we
            }),
            getShaderSource: nt
          };
        }, co = (o, v, b, T, S, I, O = void 0, L = void 0) => {
          let z = I + S.kvSequenceLength, B = S.nReps ? S.nReps : 1, V = S.vHiddenSize * B, q = o > 1 && T, X = S.kvNumHeads ? S.kvNumHeads : S.numHeads, ee = q ? [
            S.batchSize,
            X,
            z,
            S.headSize
          ] : void 0, ne = [
            S.batchSize,
            S.sequenceLength,
            V
          ], se = 12, ge = {
            x: Math.ceil(S.vHeadSize / se),
            y: Math.ceil(S.sequenceLength / se),
            z: S.batchSize * S.numHeads
          }, ue = [
            {
              type: 12,
              data: S.sequenceLength
            },
            {
              type: 12,
              data: z
            },
            {
              type: 12,
              data: S.vHeadSize
            },
            {
              type: 12,
              data: S.numHeads
            },
            {
              type: 12,
              data: S.headSize
            },
            {
              type: 12,
              data: V
            },
            {
              type: 12,
              data: I
            },
            {
              type: 12,
              data: S.kvSequenceLength
            },
            {
              type: 12,
              data: B
            }
          ], re = q && T && Xe.size(T.dims) > 0, Te = [
            "type",
            "type"
          ];
          re && Te.push("type"), O && Te.push("type"), L && Te.push("type");
          let we = [
            {
              dims: ne,
              dataType: v.dataType,
              gpuDataType: 0
            }
          ];
          q && we.push({
            dims: ee,
            dataType: v.dataType,
            gpuDataType: 0
          });
          let Se = (ze) => {
            let Le = ct("probs", v.dataType, v.dims), nt = ct("v", b.dataType, b.dims), st = [
              Le,
              nt
            ];
            re && st.push(ct("past_value", T.dataType, T.dims));
            let Mt = O ? ct("seq_lens", O.dataType, O.dims) : void 0;
            O && st.push(Mt);
            let Ut = L ? ct("total_sequence_length_input", L.dataType, L.dims) : void 0;
            L && st.push(Ut);
            let Yt = [
              Wt("output", v.dataType, ne)
            ];
            q && Yt.push(Wt("present_value", v.dataType, ee));
            let xt = [
              {
                name: "M",
                type: "u32"
              },
              {
                name: "K",
                type: "u32"
              },
              {
                name: "N",
                type: "u32"
              },
              {
                name: "num_heads",
                type: "u32"
              },
              {
                name: "head_size",
                type: "u32"
              },
              {
                name: "v_hidden_size",
                type: "u32"
              },
              {
                name: "past_sequence_length",
                type: "u32"
              },
              {
                name: "kv_sequence_length",
                type: "u32"
              },
              {
                name: "n_reps",
                type: "u32"
              }
            ];
            return `
  const TILE_SIZE = ${se}u;
  var<workgroup> tileQ: array<${Le.type.value}, ${se * se}>;
  var<workgroup> tileV: array<${Le.type.value}, ${se * se}>;
  ${ze.registerUniforms(xt).declareVariables(...st, ...Yt)}
  ${ze.mainStart([
              se,
              se,
              1
            ])}
   let headIdx = workgroup_id.z % uniforms.num_heads;
   let batchIdx = workgroup_id.z / uniforms.num_heads;
   let kvHeadIdx = ${B === 1 ? "headIdx" : "headIdx / uniforms.n_reps"};
   let kv_num_heads = ${B === 1 ? "uniforms.num_heads" : "uniforms.num_heads / uniforms.n_reps"};
   let m = global_id.y;
   let n = global_id.x;
   let sequence_length = uniforms.M;
   var total_sequence_length = uniforms.K;
   ${Zr(Mt, Ut, true)}
   let offsetA = workgroup_id.z * uniforms.M * uniforms.K + m * uniforms.K;
   let absKvHeadIdx = batchIdx * kv_num_heads + kvHeadIdx; // kvHeadIdx is relative to the batch
   ${re && q ? "let pastValueOffset = absKvHeadIdx * uniforms.N * uniforms.past_sequence_length + n;" : ""};
   let vOffset = absKvHeadIdx * uniforms.N * uniforms.kv_sequence_length + n;
   ${q ? "let presentValueOffset = absKvHeadIdx * uniforms.N * uniforms.K + n;" : ""}
   var value = ${Le.type.storage}(0);
   for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileQ[TILE_SIZE * local_id.y + local_id.x] = probs[offsetA + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        var idx = TILE_SIZE * local_id.y + local_id.x;
        ${re && q ? `
        if (w + local_id.y < past_sequence_length) {
          tileV[idx] = past_value[pastValueOffset + (w + local_id.y) * uniforms.N];
        } else if (w + local_id.y - past_sequence_length < uniforms.kv_sequence_length) {
          tileV[idx] = v[vOffset + (w + local_id.y - past_sequence_length) * uniforms.N];
        }
      ` : `
            if (w + local_id.y < uniforms.kv_sequence_length) {
              tileV[idx] = v[vOffset + (w + local_id.y) * uniforms.N];
            }`}
        ${q ? `
            if (w + local_id.y < present_sequence_length) {
          present_value[presentValueOffset + (w + local_id.y) * uniforms.N] = tileV[idx];
        }` : ""}
      }
     workgroupBarrier();
     for (var k: u32 = 0u; k < TILE_SIZE && w+k < total_sequence_length; k++) {
       value += tileQ[TILE_SIZE * local_id.y + k] * tileV[TILE_SIZE * k + local_id.x];
     }
     workgroupBarrier();
   }

   // we need to transpose output from BNSH_v to BSND_v
   if (m < uniforms.M && n < uniforms.N) {
     let outputIdx = batchIdx * uniforms.M * uniforms.v_hidden_size + m * uniforms.v_hidden_size
       + headIdx * uniforms.N + n;
     output[outputIdx] = value;
   }
  }`;
          };
          return {
            name: "AttentionScore",
            shaderCache: {
              hint: `${T !== void 0};${o}`,
              inputDependencies: Te
            },
            getRunData: () => ({
              outputs: we,
              dispatchGroup: ge,
              programUniforms: ue
            }),
            getShaderSource: Se
          };
        }, es = (o, v, b, T, S, I, O, L, z, B, V = void 0, q = void 0) => {
          let X = Math.min(o.outputCount, 1 + (O ? 1 : 0) + (L ? 1 : 0)), ee = X > 1 ? B.pastSequenceLength : 0, ne = ee + B.kvSequenceLength, se = z && Xe.size(z.dims) > 0 ? z : void 0, ge = [
            v,
            b
          ];
          X > 1 && O && Xe.size(O.dims) > 0 && ge.push(O), se && ge.push(se), V && ge.push(V), q && ge.push(q);
          let ue = o.compute(Sa(X, v, b, O, se, B, ee, V, q), {
            inputs: ge,
            outputs: X > 1 ? [
              -1,
              1
            ] : [
              -1
            ]
          })[0];
          o.compute(Pa(ue, B.batchSize, B.numHeads, ee, B.sequenceLength, ne, V, q), {
            inputs: V && q ? [
              ue,
              V,
              q
            ] : [
              ue
            ],
            outputs: []
          });
          let re = [
            ue,
            T
          ];
          X > 1 && L && Xe.size(L.dims) > 0 && re.push(L), V && re.push(V), q && re.push(q), o.compute(co(X, ue, T, L, B, ee, V, q), {
            inputs: re,
            outputs: X > 1 ? [
              0,
              2
            ] : [
              0
            ]
          });
        }, ka = (o, v) => {
          let b = [
            v.batchSize,
            v.numHeads,
            v.sequenceLength,
            v.headSize
          ], T = v.sequenceLength, S = v.inputHiddenSize, I = v.headSize, O = 12, L = {
            x: Math.ceil(v.headSize / O),
            y: Math.ceil(v.sequenceLength / O),
            z: v.batchSize * v.numHeads
          }, z = [
            o.inputs[0],
            o.inputs[1],
            o.inputs[2]
          ], B = [
            {
              type: 12,
              data: T
            },
            {
              type: 12,
              data: S
            },
            {
              type: 12,
              data: I
            },
            {
              type: 12,
              data: v.numHeads
            },
            {
              type: 12,
              data: v.headSize
            },
            {
              type: 12,
              data: v.hiddenSize
            },
            {
              type: 12,
              data: v.hiddenSize + v.hiddenSize + v.vHiddenSize
            }
          ], V = (q) => {
            let X = Wt("output_q", z[0].dataType, b), ee = Wt("output_k", z[0].dataType, b), ne = Wt("output_v", z[0].dataType, b), se = ct("input", z[0].dataType, z[0].dims), ge = ct("weight", z[1].dataType, z[1].dims), ue = ct("bias", z[2].dataType, z[2].dims), re = se.type.storage, Te = [
              {
                name: "M",
                type: "u32"
              },
              {
                name: "K",
                type: "u32"
              },
              {
                name: "N",
                type: "u32"
              },
              {
                name: "num_heads",
                type: "u32"
              },
              {
                name: "head_size",
                type: "u32"
              },
              {
                name: "hidden_size",
                type: "u32"
              },
              {
                name: "ldb",
                type: "u32"
              }
            ];
            return `
  const TILE_SIZE = ${O}u;
  var<workgroup> tileInput: array<${re}, ${O * O}>;
  var<workgroup> tileWeightQ: array<${re}, ${O * O}>;
  var<workgroup> tileWeightK: array<${re}, ${O * O}>;
  var<workgroup> tileWeightV: array<${re}, ${O * O}>;
  ${q.registerUniforms(Te).declareVariables(se, ge, ue, X, ee, ne)}
  ${q.mainStart([
              O,
              O,
              1
            ])}
    let batchIndex = workgroup_id.z / uniforms.num_heads;
    let headNumber = workgroup_id.z % uniforms.num_heads;
    let m = global_id.y;
    let n = global_id.x;

    let inputOffset = batchIndex * (uniforms.M * uniforms.K) + m * uniforms.K;
    let biasOffsetQ = headNumber * uniforms.head_size;
    let biasOffsetK = uniforms.hidden_size + biasOffsetQ;
    let biasOffsetV = uniforms.hidden_size + biasOffsetK;

    var valueQ = ${re}(0);
    var valueK = ${re}(0);
    var valueV = ${re}(0);
    for (var w: u32 = 0u; w < uniforms.K; w += TILE_SIZE) {
      if (m < uniforms.M && w + local_id.x < uniforms.K) {
        tileInput[TILE_SIZE * local_id.y + local_id.x] = input[inputOffset + w + local_id.x];
      }
      if (n < uniforms.N && w + local_id.y < uniforms.K) {
        let offset = n + (w + local_id.y) * uniforms.ldb;
        tileWeightQ[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetQ + offset];
        tileWeightK[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetK + offset];
        tileWeightV[TILE_SIZE * local_id.y + local_id.x] = weight[biasOffsetV + offset];
      }
      workgroupBarrier();
      for (var k: u32 = 0u; k<TILE_SIZE && w+k < uniforms.K; k++) {
        let inputTileOffset = TILE_SIZE * local_id.y + k;
        let weightTileOffset = TILE_SIZE * k + local_id.x;
        valueQ += tileInput[inputTileOffset] * tileWeightQ[weightTileOffset];
        valueK += tileInput[inputTileOffset] * tileWeightK[weightTileOffset];
        valueV += tileInput[inputTileOffset] * tileWeightV[weightTileOffset];
      }

      workgroupBarrier();
    }

    let headOffset = (m * uniforms.N + n) % uniforms.head_size;
    valueQ += bias[headOffset + biasOffsetQ];
    valueK += bias[headOffset + biasOffsetK];
    valueV += bias[headOffset + biasOffsetV];

    let offset = workgroup_id.z * uniforms.M * uniforms.N;
    if (m < uniforms.M && n < uniforms.N) {
      let outputIdx = offset + m * uniforms.N + n;
      output_q[outputIdx] = valueQ;
      output_k[outputIdx] = valueK;
      output_v[outputIdx] = valueV;
    }
  }`;
          };
          return o.compute({
            name: "AttentionPrepare",
            shaderCache: {
              inputDependencies: [
                "type",
                "type",
                "type"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: b,
                  dataType: o.inputs[0].dataType,
                  gpuDataType: 0
                },
                {
                  dims: b,
                  dataType: o.inputs[0].dataType,
                  gpuDataType: 0
                },
                {
                  dims: b,
                  dataType: o.inputs[0].dataType,
                  gpuDataType: 0
                }
              ],
              dispatchGroup: L,
              programUniforms: B
            }),
            getShaderSource: V
          }, {
            inputs: z,
            outputs: [
              -1,
              -1,
              -1
            ]
          });
        }, Aa = (o, v) => {
          let b = Ea(o.inputs, v), [T, S, I] = ka(o, b);
          return es(o, T, S, I, o.inputs[4], void 0, void 0, void 0, o.inputs[5], b);
        };
      }), po, Ca, Ia, ho, fd = g(() => {
        At(), Kt(), ce(), Qt(), fn(), po = (o, v) => {
          if (!o || o.length !== 5)
            throw new Error("BatchNormalization requires 5 inputs");
          let b = (T, S, I) => {
            let O = S.length;
            if (O !== T.length)
              throw new Error(`${I}: num dimensions != ${O}`);
            S.forEach((L, z) => {
              if (L !== T[z])
                throw new Error(`${I}: dim[${z}] do not match`);
            });
          };
          if (o[0].dims.length > 1) {
            let T = v.format === "NHWC" ? v.spatial ? o[0].dims.slice(-1) : o[0].dims.slice(-1).concat(o[0].dims.slice(1, o[0].dims.length - 1)) : o[0].dims.slice(1, v.spatial ? 2 : void 0);
            b(o[1].dims, T, "Invalid input scale"), b(o[2].dims, T, "Invalid input B"), b(o[3].dims, T, "Invalid input mean"), b(o[4].dims, T, "Invalid input var");
          } else
            b(o[1].dims, [
              1
            ], "Invalid input scale"), b(o[2].dims, [
              1
            ], "Invalid input B"), b(o[3].dims, [
              1
            ], "Invalid input mean"), b(o[4].dims, [
              1
            ], "Invalid input var");
        }, Ca = (o, v) => {
          let { epsilon: b, spatial: T, format: S } = v, I = o[0].dims, O = T ? Mn(I[I.length - 1]) : 1, L = S === "NHWC" && I.length > 1 ? O : 1, z = Xe.size(I) / O, B = T, V = B ? I.length : I, q = ct("x", o[0].dataType, o[0].dims, O), X = ct("scale", o[1].dataType, o[1].dims, L), ee = ct("bias", o[2].dataType, o[2].dims, L), ne = ct("inputMean", o[3].dataType, o[3].dims, L), se = ct("inputVar", o[4].dataType, o[4].dims, L), ge = Wt("y", o[0].dataType, V, O), ue = () => {
            let Te = "";
            if (T)
              Te = `let cOffset = ${I.length === 1 ? "0u" : S === "NHWC" ? `outputIndices[${I.length - 1}] / ${O}` : "outputIndices[1]"};`;
            else if (S === "NCHW")
              Te = `
            ${ge.indicesSet("outputIndices", "0", "0")}
            let cOffset = ${ge.indicesToOffset("outputIndices")};`;
            else {
              Te = `var cIndices = ${X.type.indices}(0);
                       cIndices[0] = outputIndices[${I.length - 1}];`;
              for (let we = 1; we < X.rank; we++)
                Te += `cIndices[${we}] = outputIndices[${we}];`;
              Te += `let cOffset = ${X.indicesToOffset("cIndices")};`;
            }
            return Te;
          }, re = (Te) => `
  const epsilon = ${b};
  ${Te.registerUniform("outputSize", "u32").declareVariables(q, X, ee, ne, se, ge)}
  ${Te.mainStart()}
  ${Te.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
    var outputIndices = ${ge.offsetToIndices(`global_idx * ${O}`)};
    ${ue()}
    let scale = ${X.getByOffset("cOffset")};
    let bias = ${ee.getByOffset("cOffset")};
    let inputMean = ${ne.getByOffset("cOffset")};
    let inputVar = ${se.getByOffset("cOffset")};
    let x = ${q.getByOffset("global_idx")};
    let value = (x - inputMean) * inverseSqrt(inputVar + epsilon) * scale + bias;
    ${ge.setByOffset("global_idx", "value")}
  }`;
          return {
            name: "BatchNormalization",
            shaderCache: {
              hint: `${v.epsilon}_${v.format}_${T}_${O}`,
              inputDependencies: B ? [
                "rank",
                "type",
                "type",
                "type",
                "type"
              ] : void 0
            },
            getShaderSource: re,
            getRunData: () => ({
              outputs: [
                {
                  dims: o[0].dims,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(z / 64)
              },
              programUniforms: B ? [
                {
                  type: 12,
                  data: z
                },
                ...kt(I)
              ] : [
                {
                  type: 12,
                  data: z
                }
              ]
            })
          };
        }, Ia = (o) => Pt(o), ho = (o, v) => {
          let { inputs: b, outputCount: T } = o, S = Ia({
            ...v,
            outputCount: T
          });
          if (N.webgpu.validateInputContent && po(b, S), v.trainingMode)
            throw new Error("BatchNormalization trainingMode is not supported yet.");
          o.compute(Ca(b, S));
        };
      }), Oa, fo, $a, _d = g(() => {
        ce(), fn(), Oa = (o) => {
          if (o[0].dims.length !== 3)
            throw new Error("input should have 3 dimensions");
          if (![
            320,
            640,
            1280
          ].includes(o[0].dims[2]))
            throw new Error("number of channels should be 320, 640 or 1280");
          if (o[1].dims.length !== 1)
            throw new Error("bias is expected to have 1 dimensions");
          if (o[0].dims[2] !== o[1].dims[0])
            throw new Error("last dimension of input and bias are not the same");
        }, fo = (o) => {
          let v = o[0].dims, b = o[0].dims[2], T = Xe.size(v) / 4, S = o[0].dataType, I = ct("input", S, v, 4), O = ct("bias", S, [
            b
          ], 4), L = ct("residual", S, v, 4), z = Wt("output", S, v, 4);
          return {
            name: "BiasAdd",
            getRunData: () => ({
              outputs: [
                {
                  dims: v,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(T / 64)
              }
            }),
            getShaderSource: (B) => `
  const channels = ${b}u / 4;
  ${B.declareVariables(I, O, L, z)}

  ${B.mainStart()}
    ${B.guardAgainstOutOfBoundsWorkgroupSizes(T)}
    let value = ${I.getByOffset("global_idx")}
      + ${O.getByOffset("global_idx % channels")} + ${L.getByOffset("global_idx")};
    ${z.setByOffset("global_idx", "value")}
  }`
          };
        }, $a = (o) => {
          Oa(o.inputs), o.compute(fo(o.inputs));
        };
      }), _o, En, Fa, mo, Da, La, go, Na, Ra, bo, za, Ba, wo, ja, Va, yo, ts, Ua, ns, Ga, Wa, xo, qa, Ha, vo, Ka, Ya, To, Xa, Qa, Mo, Ja, Za, Eo, el, Po, So, ko, Ao, Co, tl, nl, Io, rl, sl, ys = g(() => {
        Kt(), ce(), Qt(), fn(), _o = (o, v, b, T, S, I, O) => {
          let L = Math.ceil(v / 4), z = "";
          typeof S == "string" ? z = `${S}(a)` : z = S("a");
          let B = ct("inputData", b, [
            L
          ], 4), V = Wt("outputData", T, [
            L
          ], 4), q = [
            {
              name: "vec_size",
              type: "u32"
            }
          ];
          return O && q.push(...O), `
      ${o.registerUniforms(q).declareVariables(B, V)}

  ${I ?? ""}

  ${o.mainStart()}
    ${o.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}

    let a = ${B.getByOffset("global_idx")};
    ${V.setByOffset("global_idx", z)}
  }`;
        }, En = (o, v, b, T, S, I = o.dataType, O, L) => {
          let z = [
            {
              type: 12,
              data: Math.ceil(Xe.size(o.dims) / 4)
            }
          ];
          return O && z.push(...O), {
            name: v,
            shaderCache: {
              hint: S,
              inputDependencies: [
                "type"
              ]
            },
            getShaderSource: (B) => _o(B, Xe.size(o.dims), o.dataType, I, b, T, L),
            getRunData: (B) => ({
              outputs: [
                {
                  dims: o.dims,
                  dataType: I
                }
              ],
              dispatchGroup: {
                x: Math.ceil(Xe.size(B[0].dims) / 64 / 4)
              },
              programUniforms: z
            })
          };
        }, Fa = (o) => {
          o.compute(En(o.inputs[0], "Abs", "abs"));
        }, mo = (o) => {
          o.compute(En(o.inputs[0], "Acos", "acos"));
        }, Da = (o) => {
          o.compute(En(o.inputs[0], "Acosh", "acosh"));
        }, La = (o) => {
          o.compute(En(o.inputs[0], "Asin", "asin"));
        }, go = (o) => {
          o.compute(En(o.inputs[0], "Asinh", "asinh"));
        }, Na = (o) => {
          o.compute(En(o.inputs[0], "Atan", "atan"));
        }, Ra = (o) => {
          o.compute(En(o.inputs[0], "Atanh", "atanh"));
        }, bo = (o) => Pt(o), za = (o, v) => {
          let b;
          switch (v.to) {
            case 10:
              b = "vec4<f16>";
              break;
            case 1:
              b = "vec4<f32>";
              break;
            case 12:
              b = "vec4<u32>";
              break;
            case 6:
              b = "vec4<i32>";
              break;
            case 9:
              b = "vec4<bool>";
              break;
            default:
              throw new RangeError(`not supported type (specified in attribute 'to' from 'Cast' operator): ${v.to}`);
          }
          o.compute(En(o.inputs[0], "Cast", b, void 0, v.cacheKey, v.to));
        }, Ba = (o) => {
          let v, b, T = o.length >= 2 && o[1].data !== 0, S = o.length >= 3 && o[2].data !== 0;
          switch (o[0].dataType) {
            case 1:
              v = T ? o[1].getFloat32Array()[0] : -34028234663852886e22, b = S ? o[2].getFloat32Array()[0] : 34028234663852886e22;
              break;
            case 10:
              v = T ? o[1].getUint16Array()[0] : 64511, b = S ? o[2].getUint16Array()[0] : 31743;
              break;
            default:
              throw new Error("Unsupport data type");
          }
          return Pt({
            min: v,
            max: b
          });
        }, wo = (o, v) => {
          let b = v || Ba(o.inputs), T = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "Clip", (S) => `clamp(${S}, vec4<${T}>(uniforms.min), vec4<${T}>(uniforms.max))`, void 0, b.cacheKey, void 0, [
            {
              type: o.inputs[0].dataType,
              data: b.min
            },
            {
              type: o.inputs[0].dataType,
              data: b.max
            }
          ], [
            {
              name: "min",
              type: T
            },
            {
              name: "max",
              type: T
            }
          ]), {
            inputs: [
              0
            ]
          });
        }, ja = (o) => {
          o.compute(En(o.inputs[0], "Ceil", "ceil"));
        }, Va = (o) => {
          o.compute(En(o.inputs[0], "Cos", "cos"));
        }, yo = (o) => {
          o.compute(En(o.inputs[0], "Cosh", "cosh"));
        }, ts = (o) => Pt(o), Ua = (o, v) => {
          let b = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "Elu", (T) => `elu_vf32(${T})`, `
  const elu_alpha_ = ${b}(${v.alpha});

  fn elu_f32(a: ${b}) -> ${b} {
  return select((exp(a) - 1.0) * elu_alpha_, a, a >= 0.0);
  }

  fn elu_vf32(v: vec4<${b}>) -> vec4<${b}> {
  return vec4(elu_f32(v.x), elu_f32(v.y), elu_f32(v.z), elu_f32(v.w));
  }`, v.cacheKey));
        }, ns = (o = "f32") => `
const r0: ${o} = 0.3275911;
const r1: ${o} = 0.254829592;
const r2: ${o} = -0.284496736;
const r3: ${o} = 1.421413741;
const r4: ${o} = -1.453152027;
const r5: ${o} = 1.061405429;

fn erf_vf32(v: vec4<${o}>) -> vec4<${o}> {
  let absv = abs(v);
  let x = 1.0 / (1.0 + r0 * absv);
  return sign(v) * (1.0 - ((((r5 * x + r4) * x + r3) * x + r2) * x + r1) * x * exp(-absv * absv));
}`, Ga = (o) => {
          let v = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "Erf", (b) => `erf_vf32(${b})`, ns(v)));
        }, Wa = (o) => {
          o.compute(En(o.inputs[0], "Exp", "exp"));
        }, xo = (o) => {
          o.compute(En(o.inputs[0], "Floor", "floor"));
        }, qa = (o) => {
          let v = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "Gelu", (b) => `0.5 * ${b} * (1.0 + erf_vf32(${b} * 0.7071067811865475))`, ns(v)));
        }, Ha = (o, v) => {
          let b = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "LeakyRelu", (T) => `select(leaky_relu_alpha_ * ${T}, ${T}, ${T} >= vec4<${b}>(0.0))`, `const leaky_relu_alpha_ = ${b}(${v.alpha});`, v.cacheKey));
        }, vo = (o) => {
          o.compute(En(o.inputs[0], "Not", (v) => `!${v}`));
        }, Ka = (o) => {
          o.compute(En(o.inputs[0], "Neg", (v) => `-${v}`));
        }, Ya = (o) => {
          o.compute(En(o.inputs[0], "Reciprocal", (v) => `1.0/${v}`));
        }, To = (o) => {
          let v = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "Relu", (b) => `select(vec4<${v}>(0.0), ${b}, ${b} > vec4<${v}>(0.0))`));
        }, Xa = (o) => {
          o.compute(En(o.inputs[0], "Sigmoid", (v) => `(1.0 / (1.0 + exp(-${v})))`));
        }, Qa = (o) => Pt(o), Mo = (o, v) => {
          let b = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "HardSigmoid", (T) => `max(vec4<${b}>(0.0), min(vec4<${b}>(1.0), ${v.alpha} * ${T} + vec4<${b}>(${v.beta})))`, void 0, v.cacheKey));
        }, Ja = (o) => {
          o.compute(En(o.inputs[0], "Sin", "sin"));
        }, Za = (o) => {
          o.compute(En(o.inputs[0], "Sinh", "sinh"));
        }, Eo = (o) => {
          o.compute(En(o.inputs[0], "Sqrt", "sqrt"));
        }, el = (o) => {
          o.compute(En(o.inputs[0], "Tan", "tan"));
        }, Po = (o) => `sign(${o}) * (1 - exp(-2 * abs(${o}))) / (1 + exp(-2 * abs(${o})))`, So = (o) => {
          o.compute(En(o.inputs[0], "Tanh", Po));
        }, ko = (o = "f32") => `
const fast_gelu_a: ${o} = 0.5;
const fast_gelu_b: ${o} = 0.7978845608028654;
const fast_gelu_c: ${o} = 0.035677408136300125;

fn tanh_v(v: vec4<${o}>) -> vec4<${o}> {
  return ${Po("v")};
}
`, Ao = (o) => `(fast_gelu_a + fast_gelu_a * tanh_v(${o} * (fast_gelu_c * ${o} * ${o} + fast_gelu_b))) * ${o}`, Co = (o) => {
          let v = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "FastGelu", Ao, ko(v), void 0, o.inputs[0].dataType));
        }, tl = (o, v) => {
          let b = sn(o.inputs[0].dataType);
          return o.compute(En(o.inputs[0], "ThresholdedRelu", (T) => `select(vec4<${b}>(0.0), ${T}, ${T} > thresholded_relu_alpha_)`, `const thresholded_relu_alpha_ = vec4<${b}>(${v.alpha});`, v.cacheKey)), 0;
        }, nl = (o) => {
          o.compute(En(o.inputs[0], "Log", "log"));
        }, Io = (o, v) => `
const alpha = vec4<${o}>(${v});
const one = ${o}(1.0);
const zero = ${o}(0.0);

fn quick_gelu_impl(x: vec4<${o}>) -> vec4<${o}> {
  let v = x *alpha;
  var x1 : vec4<${o}>;
  for (var i = 0; i < 4; i = i + 1) {
    if (v[i] >= zero) {
      x1[i] = one / (one + exp(-v[i]));
    } else {
      x1[i] = one - one / (one + exp(v[i]));
    }
  }
  return x * x1;
}
`, rl = (o) => `quick_gelu_impl(${o})`, sl = (o, v) => {
          let b = sn(o.inputs[0].dataType);
          o.compute(En(o.inputs[0], "QuickGelu", rl, Io(b, v.alpha), v.cacheKey, o.inputs[0].dataType));
        };
      }), ol, il, al, md = g(() => {
        ce(), fn(), ys(), ol = (o) => {
          if (o[0].dims.length !== 3)
            throw new Error("input should have 3 dimensions");
          if (![
            2560,
            5120,
            10240
          ].includes(o[0].dims[2]))
            throw new Error("hidden state should be 2560, 5120 or 10240");
          if (o[1].dims.length !== 1)
            throw new Error("bias is expected to have 1 dimensions");
          if (o[0].dims[2] !== o[1].dims[0])
            throw new Error("last dimension of input and bias are not the same");
        }, il = (o) => {
          let v = o[0].dims.slice();
          v[2] = v[2] / 2;
          let b = ct("input", o[0].dataType, o[0].dims, 4), T = ct("bias", o[0].dataType, [
            o[0].dims[2]
          ], 4), S = Wt("output", o[0].dataType, v, 4), I = Xe.size(v) / 4, O = Ke(o[0].dataType);
          return {
            name: "BiasSplitGelu",
            getRunData: () => ({
              outputs: [
                {
                  dims: v,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(I / 64)
              }
            }),
            getShaderSource: (L) => `
  const M_SQRT2 = sqrt(2.0);
  const halfChannels = ${o[0].dims[2] / 4 / 2}u;

  ${L.declareVariables(b, T, S)}

  ${ns(O)}

  ${L.mainStart()}
    ${L.guardAgainstOutOfBoundsWorkgroupSizes(I)}
    let biasIdx = global_idx % halfChannels;
    let batchIndex = global_idx / halfChannels;
    let inputOffset = biasIdx + batchIndex * halfChannels * 2;
    let valueLeft = input[inputOffset] + bias[biasIdx];
    let valueRight = input[inputOffset + halfChannels] + bias[biasIdx + halfChannels];
    let geluRight = valueRight * 0.5 * (erf_vf32(valueRight / M_SQRT2) + 1);

    ${S.setByOffset("global_idx", "valueLeft * geluRight")}
  }`
          };
        }, al = (o) => {
          ol(o.inputs), o.compute(il(o.inputs));
        };
      }), Oo, ll, gr, $o, cl, ul, Fo, dl, pl, Do, hl, fl, Lo, gd = g(() => {
        Kt(), ce(), fn(), Oo = (o, v, b, T, S, I, O, L, z, B, V, q) => {
          let X, ee;
          typeof L == "string" ? X = ee = (re, Te) => `${L}((${re}),(${Te}))` : typeof L == "function" ? X = ee = L : (X = L.scalar, ee = L.vector);
          let ne = Wt("outputData", V, T.length, 4), se = ct("aData", z, v.length, 4), ge = ct("bData", B, b.length, 4), ue;
          if (S)
            if (I) {
              let re = Xe.size(v) === 1, Te = Xe.size(b) === 1, we = v.length > 0 && v[v.length - 1] % 4 === 0, Se = b.length > 0 && b[b.length - 1] % 4 === 0;
              re || Te ? ue = ne.setByOffset("global_idx", ee(re ? `${se.type.value}(${se.getByOffset("0")}.x)` : se.getByOffset("global_idx"), Te ? `${ge.type.value}(${ge.getByOffset("0")}.x)` : ge.getByOffset("global_idx"))) : ue = `
            let outputIndices = ${ne.offsetToIndices("global_idx * 4u")};
            let offsetA = ${se.broadcastedIndicesToOffset("outputIndices", ne)};
            let offsetB = ${ge.broadcastedIndicesToOffset("outputIndices", ne)};
            ${ne.setByOffset("global_idx", ee(O || we ? se.getByOffset("offsetA / 4u") : `${se.type.value}(${se.getByOffset("offsetA / 4u")}[offsetA % 4u])`, O || Se ? ge.getByOffset("offsetB / 4u") : `${ge.type.value}(${ge.getByOffset("offsetB / 4u")}[offsetB % 4u])`))}
          `;
            } else
              ue = ne.setByOffset("global_idx", ee(se.getByOffset("global_idx"), ge.getByOffset("global_idx")));
          else {
            if (!I)
              throw new Error("no necessary to use scalar implementation for element-wise binary op implementation.");
            let re = (Te, we, Se = "") => {
              let ze = `aData[indexA${we}][componentA${we}]`, Le = `bData[indexB${we}][componentB${we}]`;
              return `
            let outputIndices${we} = ${ne.offsetToIndices(`global_idx * 4u + ${we}u`)};
            let offsetA${we} = ${se.broadcastedIndicesToOffset(`outputIndices${we}`, ne)};
            let offsetB${we} = ${ge.broadcastedIndicesToOffset(`outputIndices${we}`, ne)};
            let indexA${we} = offsetA${we} / 4u;
            let indexB${we} = offsetB${we} / 4u;
            let componentA${we} = offsetA${we} % 4u;
            let componentB${we} = offsetB${we} % 4u;
            ${Te}[${we}] = ${Se}(${X(ze, Le)});
          `;
            };
            V === 9 ? ue = `
            var data = vec4<u32>(0);
            ${re("data", 0, "u32")}
            ${re("data", 1, "u32")}
            ${re("data", 2, "u32")}
            ${re("data", 3, "u32")}
            outputData[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));` : ue = `
            ${re("outputData[global_idx]", 0)}
            ${re("outputData[global_idx]", 1)}
            ${re("outputData[global_idx]", 2)}
            ${re("outputData[global_idx]", 3)}
          `;
          }
          return `
        ${o.registerUniform("vec_size", "u32").declareVariables(se, ge, ne)}

        ${q ?? ""}

        ${o.mainStart()}
        ${o.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${ue}
      }`;
        }, ll = (o, v, b, T, S, I, O = b.dataType) => {
          let L = b.dims.map((se) => Number(se) ?? 1), z = T.dims.map((se) => Number(se) ?? 1), B = !Xe.areEqual(L, z), V = L, q = Xe.size(L), X = false, ee = false, ne = [
            B
          ];
          if (B) {
            let se = dr.calcShape(L, z, false);
            if (!se)
              throw new Error("Can't perform binary op on the given tensors");
            V = se.slice(), q = Xe.size(V);
            let ge = Xe.size(L) === 1, ue = Xe.size(z) === 1, re = L.length > 0 && L[L.length - 1] % 4 === 0, Te = z.length > 0 && z[z.length - 1] % 4 === 0;
            ne.push(ge), ne.push(ue), ne.push(re), ne.push(Te);
            let we = 1;
            for (let Se = 1; Se < V.length; Se++) {
              let ze = L[L.length - Se], Le = z[z.length - Se];
              if (ze === Le)
                we *= ze;
              else
                break;
            }
            we % 4 === 0 ? (ee = true, X = true) : (ge || ue || re || Te) && (X = true);
          } else
            X = true;
          return ne.push(X), {
            name: o,
            shaderCache: {
              hint: v + ne.map((se) => se.toString()).join("_"),
              inputDependencies: [
                "rank",
                "rank"
              ]
            },
            getShaderSource: (se) => Oo(se, L, z, V, X, B, ee, S, b.dataType, T.dataType, O, I),
            getRunData: () => ({
              outputs: [
                {
                  dims: V,
                  dataType: O
                }
              ],
              dispatchGroup: {
                x: Math.ceil(q / 64 / 4)
              },
              programUniforms: [
                {
                  type: 12,
                  data: Math.ceil(Xe.size(V) / 4)
                },
                ...kt(L, z, V)
              ]
            })
          };
        }, gr = (o, v, b, T, S, I) => {
          o.compute(ll(v, S ?? "", o.inputs[0], o.inputs[1], b, T, I));
        }, $o = (o) => {
          gr(o, "Add", (v, b) => `${v}+${b}`);
        }, cl = (o) => {
          gr(o, "Div", (v, b) => `${v}/${b}`);
        }, ul = (o) => {
          gr(o, "Equal", {
            scalar: (v, b) => `u32(${v}==${b})`,
            vector: (v, b) => `vec4<u32>(${v}==${b})`
          }, void 0, void 0, 9);
        }, Fo = (o) => {
          gr(o, "Mul", (v, b) => `${v}*${b}`);
        }, dl = (o) => {
          let v = ct("input", o.inputs[0].dataType, o.inputs[0].dims).type.value;
          gr(o, "Pow", {
            scalar: (b, T) => `pow_custom(${b},${T})`,
            vector: (b, T) => `pow_vector_custom(${b},${T})`
          }, `
    fn pow_custom(a : ${v}, b : ${v}) -> ${v} {
      if (b == ${v}(0.0)) {
        return ${v}(1.0);
      } else if (a < ${v}(0.0) && f32(b) != floor(f32(b))) {
        return ${v}(pow(f32(a), f32(b))); // NaN
      }
      return select(sign(a), ${v}(1.0), round(f32(abs(b) % ${v}(2.0))) != 1.0) * ${v}(${v === "i32" ? "round" : ""}(pow(f32(abs(a)), f32(b))));
    }
    fn pow_vector_custom(a : vec4<${v}>, b : vec4<${v}>) -> vec4<${v}> {
      // TODO: implement vectorized pow
      return vec4<${v}>(pow_custom(a.x, b.x), pow_custom(a.y, b.y), pow_custom(a.z, b.z), pow_custom(a.w, b.w));
    }
      `);
        }, pl = (o) => {
          gr(o, "Sub", (v, b) => `${v}-${b}`);
        }, Do = (o) => {
          gr(o, "Greater", {
            scalar: (v, b) => `u32(${v}>${b})`,
            vector: (v, b) => `vec4<u32>(${v}>${b})`
          }, void 0, void 0, 9);
        }, hl = (o) => {
          gr(o, "Less", {
            scalar: (v, b) => `u32(${v}<${b})`,
            vector: (v, b) => `vec4<u32>(${v}<${b})`
          }, void 0, void 0, 9);
        }, fl = (o) => {
          gr(o, "GreaterOrEqual", {
            scalar: (v, b) => `u32(${v}>=${b})`,
            vector: (v, b) => `vec4<u32>(${v}>=${b})`
          }, void 0, void 0, 9);
        }, Lo = (o) => {
          gr(o, "LessOrEqual", {
            scalar: (v, b) => `u32(${v}<=${b})`,
            vector: (v, b) => `vec4<u32>(${v}<=${b})`
          }, void 0, void 0, 9);
        };
      }), _l, No, ml, gl, Ro, bl, bd = g(() => {
        Kt(), ce(), Qt(), fn(), _l = (o, v) => {
          if (!o || o.length < 1)
            throw new Error("too few inputs");
          let b = 0, T = o[b], S = T.dataType, I = T.dims.length;
          o.forEach((O, L) => {
            if (L !== b) {
              if (O.dataType !== S)
                throw new Error("input tensors should be one type");
              if (O.dims.length !== I)
                throw new Error("input tensors should have the same shape");
              O.dims.forEach((z, B) => {
                if (B !== v && z !== T.dims[B])
                  throw new Error("non concat dimensions must match");
              });
            }
          });
        }, No = (o, v) => `
  fn calculateInputIndex(index: u32) -> u32 {
    let sizeInConcatAxis = array<u32, ${o}u>(${v});
    for (var i: u32 = 0u; i < ${o}; i += 1u ) {
      if (index < sizeInConcatAxis[i]) {
        return i;
      }
    }
    return ${o}u;
  }`, ml = (o, v) => {
          let b = o.length, T = [];
          for (let S = 0; S < b; ++S) {
            let I = v.setByOffset("global_idx", o[S].getByIndices("indices"));
            b === 1 ? T.push(I) : S === 0 ? T.push(`if (inputIndex == ${S}u) { ${I} }`) : S === b - 1 ? T.push(`else { ${I} }`) : T.push(`else if (inputIndex == ${S}) { ${I} }`);
          }
          return T.join(`
`);
        }, gl = (o, v, b, T) => {
          let S = Xe.size(b), I = new Array(o.length), O = new Array(o.length), L = 0, z = [], B = [], V = [
            {
              type: 12,
              data: S
            }
          ];
          for (let se = 0; se < o.length; ++se)
            L += o[se].dims[v], I[se] = L, B.push(o[se].dims.length), O[se] = ct(`input${se}`, T, B[se]), z.push("rank"), V.push({
              type: 12,
              data: I[se]
            });
          for (let se = 0; se < o.length; ++se)
            V.push(...kt(o[se].dims));
          V.push(...kt(b));
          let q = Wt("output", T, b.length), X = q.indicesGet("indices", v), ee = Array.from(Array(I.length).keys()).map((se) => `uniforms.sizeInConcatAxis${se}`).join(","), ne = (se) => `

  ${(() => {
            se.registerUniform("outputSize", "u32");
            for (let ge = 0; ge < o.length; ge++)
              se.registerUniform(`sizeInConcatAxis${ge}`, "u32");
            return se.declareVariables(...O, q);
          })()}

  ${No(I.length, ee)}

  ${se.mainStart()}
    ${se.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

    var indices = ${q.offsetToIndices("global_idx")};

    let inputIndex = calculateInputIndex(${X});
    if (inputIndex != 0u) {
      let sizeInConcatAxis = array<u32, ${I.length}u>(${ee});
      ${X} -= sizeInConcatAxis[inputIndex - 1u];
    }

    ${ml(O, q)}
  }`;
          return {
            name: "Concat",
            shaderCache: {
              hint: `${v}`,
              inputDependencies: z
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: b,
                  dataType: T
                }
              ],
              dispatchGroup: {
                x: Math.ceil(S / 64)
              },
              programUniforms: V
            }),
            getShaderSource: ne
          };
        }, Ro = (o, v) => {
          let b = o.inputs, T = b[0].dims, S = Xe.normalizeAxis(v.axis, T.length);
          _l(b, S);
          let I = T.slice();
          I[S] = b.reduce((L, z) => L + (z.dims.length > S ? z.dims[S] : 0), 0);
          let O = b.filter((L) => Xe.size(L.dims) > 0);
          o.compute(gl(O, S, I, b[0].dataType), {
            inputs: O
          });
        }, bl = (o) => Pt({
          axis: o.axis
        });
      }), Fr, Dr, Sr, zo, Lr = g(() => {
        Kt(), ce(), Fr = (o, v, b = "f32") => {
          switch (o.activation) {
            case "Relu":
              return `value = max(value, ${v}(0.0));`;
            case "Sigmoid":
              return `value = (${v}(1.0) / (${v}(1.0) + exp(-value)));`;
            case "Clip":
              return `value = clamp(value, ${v}(${b}(uniforms.clip_min)), ${v}(${b}(uniforms.clip_max)));`;
            case "HardSigmoid":
              return `value = max(${v}(0.0), min(${v}(1.0), ${b}(uniforms.alpha) * value + ${b}(uniforms.beta)));`;
            case "LeakyRelu":
              return `value = select(${b}(uniforms.alpha) * value, value, value >= ${v}(0.0));`;
            case "Tanh":
              return `let e2x = exp(-2.0 * abs(value));
              value = sign(value) * (1.0 - e2x) / (1.0 + e2x);
        `;
            case "":
              return "";
            default:
              throw new Error(`Unsupported activation ${o.activation}`);
          }
        }, Dr = (o, v) => {
          o.activation === "Clip" ? v.push({
            type: 1,
            data: o.clipMax
          }, {
            type: 1,
            data: o.clipMin
          }) : o.activation === "HardSigmoid" ? v.push({
            type: 1,
            data: o.alpha
          }, {
            type: 1,
            data: o.beta
          }) : o.activation === "LeakyRelu" && v.push({
            type: 1,
            data: o.alpha
          });
        }, Sr = (o, v) => {
          o.activation === "Clip" ? v.push({
            name: "clip_max",
            type: "f32"
          }, {
            name: "clip_min",
            type: "f32"
          }) : o.activation === "HardSigmoid" ? v.push({
            name: "alpha",
            type: "f32"
          }, {
            name: "beta",
            type: "f32"
          }) : o.activation === "LeakyRelu" && v.push({
            name: "alpha",
            type: "f32"
          });
        }, zo = (o) => {
          let v = o?.activation || "";
          if (v === "HardSigmoid") {
            let [b, T] = o?.activation_params || [
              0.2,
              0.5
            ];
            return {
              activation: v,
              alpha: b,
              beta: T
            };
          } else if (v === "Clip") {
            let [b, T] = o?.activation_params || [
              Fe,
              K
            ];
            return {
              activation: v,
              clipMax: T,
              clipMin: b
            };
          } else if (v === "LeakyRelu") {
            let [b] = o?.activation_params || [
              0.01
            ];
            return {
              activation: v,
              alpha: b
            };
          }
          return {
            activation: v
          };
        };
      }), Qn, wl, xs = g(() => {
        Qn = (o, v) => {
          switch (o) {
            case 1:
              return v;
            case 2:
              return `vec2<${v}>`;
            case 3:
              return `vec3<${v}>`;
            case 4:
              return `vec4<${v}>`;
            default:
              throw new Error(`${o}-component is not supported.`);
          }
        }, wl = (o) => `
      ${o ? "value = value + getBiasByOutputCoords(coords);" : ""}
      `;
      }), yl, wd = g(() => {
        yl = (o) => `
fn getIndexFromCoords4D(coords : vec4<i32>, shape : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
      shape.y * shape.z * shape.w, shape.z * shape.w, shape.w, 1));
}
fn getOutputIndexFromCoords(coords : vec4<i32>) -> i32 {
  return dot(coords, vec4<i32>(
    i32(${o}.x), i32(${o}.y), i32(${o}.z), 1));
}
`;
      }), rs, Bo, vs = g(() => {
        Kt(), ce(), fn(), Lr(), rs = (o, v, b, T, S) => {
          let I = T - b;
          return `
      ${Array.from({
            length: b
          }).map((O, L) => `
      if (${Ht(v.shape, L, v.rank)} != 1) {
        ${v.indicesSet(o, L, Ht(S, L + I, T))}
      } else {
        ${v.indicesSet(o, L, 0)}
      }`).join("")}
`;
        }, Bo = (o, v, b, T, S = false, I) => {
          let O = o[0].dims, L = o[1].dims, z = O[O.length - 2], B = L[L.length - 1], V = O[O.length - 1], q = Mn(B), X = Mn(V), ee = Mn(z), ne = Xe.size(b) / q / ee, se = o.length > 2, ge = T ? T.slice(0, -2) : b.slice(0, -2), ue = [
            Xe.size(ge),
            z,
            B
          ], re = [
            {
              type: 12,
              data: ne
            },
            {
              type: 12,
              data: z
            },
            {
              type: 12,
              data: B
            },
            {
              type: 12,
              data: V
            }
          ];
          Dr(v, re), re.push(...kt(ge, O, L)), se && re.push(...kt(o[2].dims)), re.push(...kt(ue));
          let Te = (we) => {
            let Se = Ys("batch_dims", o[0].dataType, ge.length), ze = ct("a", o[0].dataType, O.length, X), Le = ct("b", o[1].dataType, L.length, q), nt = Wt("output", o[0].dataType, ue.length, q), st = Ke(nt.type.tensor), Mt = Fr(v, nt.type.value, st), Ut = [
              ze,
              Le
            ], Yt = "";
            if (se) {
              let yn = S ? q : 1;
              Ut.push(ct("bias", o[2].dataType, o[2].dims.length, yn)), Yt = `${S ? `value += bias[col / ${yn}];` : `value += ${nt.type.value}(bias[row + i]);`}`;
            }
            let xt = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "M",
                type: "u32"
              },
              {
                name: "N",
                type: "u32"
              },
              {
                name: "K",
                type: "u32"
              }
            ];
            Sr(v, xt);
            let hn = () => {
              let yn = `var a_data: ${ze.type.value};`;
              for (let $t = 0; $t < X; $t++)
                yn += `
              let b_data${$t} = b[(b_offset + (k + ${$t}) * uniforms.N + col) / ${q}];`;
              for (let $t = 0; $t < ee; $t++) {
                yn += `a_data = a[(a_offset + (row + ${$t}) * uniforms.K + k) / ${X}];`;
                for (let nn = 0; nn < X; nn++)
                  yn += `
            values[${$t}] = fma(${Le.type.value}(a_data${X === 1 ? "" : `[${nn}]`}), b_data${nn}, values[${$t}]);
`;
              }
              return yn;
            };
            return `
  ${we.registerUniforms(xt).registerInternalVariables(Se).declareVariables(...Ut, nt)}
  ${we.mainStart()}
    ${we.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let col = (global_idx % (uniforms.N / ${q})) * ${q};
    var index1 = global_idx / (uniforms.N / ${q});
    let stride1 = uniforms.M / ${ee};
    let row = (index1 % stride1) * ${ee};
    let batch = index1 / stride1;

    ${b.length === 2 ? "" : `let batch_indices = ${Se.offsetToIndices("batch")};`}

    var a_indices: ${ze.type.indices};
    ${rs("a_indices", ze, ze.rank - 2, Se.rank, "batch_indices")}
    ${ze.indicesSet("a_indices", ze.rank - 2, 0)}
    ${ze.indicesSet("a_indices", ze.rank - 1, 0)}
    let a_offset = ${ze.indicesToOffset("a_indices")};

    var b_indices: ${Le.type.indices};
    ${rs("b_indices", Le, Le.rank - 2, Se.rank, "batch_indices")}
    ${Le.indicesSet("b_indices", Le.rank - 2, 0)}
    ${Le.indicesSet("b_indices", Le.rank - 1, 0)}
    let b_offset = ${Le.indicesToOffset("b_indices")};
    var values: array<${nt.type.value}, ${ee}>;
    for (var k: u32 = 0u; k < uniforms.K; k = k + ${X}) {
      ${hn()}
    }
    for (var i = 0u; i < ${ee}u; i++) {
      var value = values[i];
      ${Yt}
      ${Mt}
      let cur_indices = ${nt.type.indices}(batch, row + i, col);
      let offset = ${nt.indicesToOffset("cur_indices")};
      ${nt.setByOffset(`offset / ${q}`, "value")};
    }
  }
  `;
          };
          return {
            name: "MatMulNaive",
            shaderCache: {
              hint: `${v.activation};${q};${X};${ee};${S}`,
              inputDependencies: se ? [
                "rank",
                "rank",
                "rank"
              ] : [
                "rank",
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: I ? I(b) : b,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(ne / 64)
              },
              programUniforms: re
            }),
            getShaderSource: Te
          };
        };
      }), xl, vl, jo, Vo, Uo, Go, Tl, ss, Wo = g(() => {
        Kt(), ce(), fn(), Lr(), vs(), xs(), xl = (o, v) => o ? `
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          kStart + inputRow,
          globalRowStart / innerElementSize + inputCol${v ? ", batchIndices" : ""});
        ` : `
        mm_Asub[inputRow][inputCol] = mm_readA(batch,
          globalRow + innerRow,
          kStart / innerElementSize + inputCol${v ? ", batchIndices" : ""});
        `, vl = (o, v) => o ? `
        let ACached0 = mm_Asub[k * innerElementSize][localRow];
        let ACached1 = mm_Asub[k * innerElementSize + 1][localRow];
        let ACached2 = mm_Asub[k * innerElementSize + 2][localRow];
        ${v === 3 ? "" : "let ACached3 = mm_Asub[k * innerElementSize + 3][localRow];"}
        for (var i = 0; i < rowPerThread; i = i + 1) {
          acc[i] = BCached0 * ACached0[i] + acc[i];
          acc[i] = BCached1 * ACached1[i] + acc[i];
          acc[i] = BCached2 * ACached2[i] + acc[i];
          ${v === 3 ? "" : "acc[i] = BCached3 * ACached3[i] + acc[i];"}
        }` : `
        for (var i = 0; i < rowPerThread; i = i + 1) {
          let ACached = mm_Asub[tileRow + i][k];
          acc[i] = BCached0 * ACached.x + acc[i];
          acc[i] = BCached1 * ACached.y + acc[i];
          acc[i] = BCached2 * ACached.z + acc[i];
          ${v === 3 ? "" : "acc[i] = BCached3 * ACached.w + acc[i];"}
        }`, jo = (o, v, b = "f32", T, S = false, I = 32, O = false, L = 32) => {
          let z = v[1] * o[1], B = v[0] * o[0], V = S ? z : I, q = S ? I : z, X = V / v[0], ee = I / v[1];
          if (!((S && X === 4 && o[1] === 4 || !S && (X === 3 || X === 4)) && V % v[0] === 0 && I % v[1] === 0 && o[0] === 4))
            throw new Error(`If transposeA ${S} is true, innerElementSize ${X} and workPerThread[1] ${o[1]} must be 4.
      Otherwise, innerElementSize ${X} must be 3 or 4.
  tileAWidth ${V} must be divisible by workgroupSize[0]${v[0]}. tileInner ${I} must be divisible by workgroupSize[1] ${v[1]}. colPerThread ${o[0]} must be 4.`);
          return `
var<workgroup> mm_Asub: array<array<vec${X}<${b}>, ${V / X}>, ${q}>;
var<workgroup> mm_Bsub: array<array<vec4<${b}>, ${B / o[0]}>, ${I}>;

const rowPerThread = ${o[1]};
const colPerThread = ${o[0]};
const innerElementSize = ${X};
const tileInner = ${I};

@compute @workgroup_size(${v[0]}, ${v[1]}, ${v[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
  let localRow = i32(localId.y);
  let tileRow = localRow * rowPerThread;
  let tileCol = i32(localId.x);

  let globalRow =i32(globalId.y) * rowPerThread;
  let globalCol = i32(globalId.x);
  let batch = ${O ? "0" : "i32(globalId.z)"};
  ${T ? `let batchIndices = ${T.offsetToIndices("u32(batch)")};` : ""}
  let globalRowStart = i32(workgroupId.y) * ${z};

  let num_tiles = ${O ? `${Math.ceil(L / I)}` : "(uniforms.dim_inner - 1) / tileInner + 1"};
  var kStart = ${O ? `i32(globalId.z) * ${L}` : "0"};

  var acc: array<vec4<${b}>, rowPerThread>;

  // Loop over shared dimension.
  let tileRowB = localRow * ${ee};
  for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let inputRow = tileRow + innerRow;
          let inputCol = tileCol;
          ${xl(S, T)}
      }

      // Load one tile of B into local memory.
      for (var innerRow = 0; innerRow < ${ee}; innerRow = innerRow + 1) {
          let inputRow = tileRowB + innerRow;
          let inputCol = tileCol;
          mm_Bsub[inputRow][inputCol] = mm_readB(batch, kStart + inputRow, globalCol${T ? ", batchIndices" : ""});
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      for (var k = 0; k < tileInner / innerElementSize; k = k + 1) {
          let BCached0 = mm_Bsub[k * innerElementSize][tileCol];
          let BCached1 = mm_Bsub[k * innerElementSize + 1][tileCol];
          let BCached2 = mm_Bsub[k * innerElementSize + 2][tileCol];
          ${X === 3 ? "" : "let BCached3 = mm_Bsub[k * innerElementSize + 3][tileCol];"}

          ${vl(S, X)}
      }

      workgroupBarrier();
  }

  for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      mm_write(batch, globalRow + innerRow, globalCol, acc[innerRow]);
  }
}`;
        }, Vo = (o, v) => o ? `
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              kStart + inputRow,
              globalRowStart + inputCol${v ? ", batchIndices" : ""});
            ` : `
            mm_Asub[inputRow][inputCol] = mm_readA(batch,
              globalRowStart + inputRow,
              kStart + inputCol${v ? ", batchIndices" : ""});
            `, Uo = (o) => o ? "let ACached = mm_Asub[k][tileRow + innerRow];" : "let ACached = mm_Asub[tileRow + innerRow][k];", Go = (o, v, b = "f32", T, S = false, I = 32, O = false, L = 32, z = false) => {
          let B = o[1] * v[1], V = o[0] * v[0], q = S ? B : I, X = S ? I : B;
          if (!(X % v[1] === 0 && q % v[0] === 0 && I % v[1] === 0))
            throw new Error(`tileAHight ${X} must be divisible by workgroupSize[1]${v[1]}, tileAWidth ${q} must be divisible by workgroupSize[0]${v[0]}, tileInner ${I} must be divisible by workgroupSize[1]${v[1]}`);
          let ee = X / v[1], ne = q / v[0], se = I / v[1], ge = z ? `
    let localRow = i32(localId.y);
    let localCol = i32(localId.x);
    let globalRowStart = i32(workgroupId.y) * ${B};
    let globalColStart = i32(workgroupId.x) * ${V};

    // Loop over shared dimension.
    for (var t = 0; t < num_tiles; t = t + 1) {
      // Load one tile of A into local memory.
      for (var inputRow = localRow; inputRow < ${X}; inputRow = inputRow + ${v[1]}) {
        for (var inputCol = localCol; inputCol < ${q}; inputCol = inputCol + ${v[0]}) {
          ${Vo(S, T)}
        }
      }
      // Load one tile of B into local memory.
      for (var inputRow = localRow; inputRow < ${I}; inputRow = inputRow + ${v[1]}) {
            for (var inputCol = localCol; inputCol < ${V}; inputCol = inputCol + ${v[0]}) {
          mm_Bsub[inputRow][inputCol] = mm_readB(batch,
            kStart + inputRow,
            globalColStart + inputCol${T ? ", batchIndices" : ""});
        }
      }
      kStart = kStart + tileInner;
      workgroupBarrier();

      // Compute acc values for a single thread.
      var BCached : array<${b}, colPerThread>;
      for (var k = 0; k < tileInner; k = k + 1) {
        for (var inner = 0; inner < colPerThread; inner = inner + 1) {
          BCached[inner] = mm_Bsub[k][localCol + inner * ${v[0]}];
        }
        for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
          let ACached = ${S ? `mm_Asub[k][localRow + innerRow * ${v[1]}];` : `mm_Asub[localRow + innerRow * ${v[1]}][k];`}
          for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
            acc[innerRow][innerCol] = acc[innerRow][innerCol] +
                ACached * BCached[innerCol];
          }
        }
      }
      workgroupBarrier();
    }
    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      let gRow = globalRowStart + localRow + innerRow * ${v[1]};
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        let gCol = globalColStart + localCol + innerCol * ${v[0]};
        mm_write(batch, gRow, gCol, acc[innerRow][innerCol]);
      }
    }
    ` : `
let tileRow = i32(localId.y) * rowPerThread;
let tileCol = i32(localId.x) * colPerThread;

let globalRow = i32(globalId.y) * rowPerThread;
let globalCol = i32(globalId.x) * colPerThread;
let globalRowStart = i32(workgroupId.y) * ${B};

let tileRowA = i32(localId.y) * ${ee};
let tileColA = i32(localId.x) * ${ne};
let tileRowB = i32(localId.y) * ${se};
// Loop over shared dimension.
for (var t = 0; t < num_tiles; t = t + 1) {
  // Load one tile of A into local memory.
  for (var innerRow = 0; innerRow < ${ee}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < ${ne}; innerCol = innerCol + 1) {
      let inputRow = tileRowA + innerRow;
      let inputCol = tileColA + innerCol;
      ${Vo(S, T)}
    }
  }

  // Load one tile of B into local memory.
  for (var innerRow = 0; innerRow < ${se}; innerRow = innerRow + 1) {
    for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
      let inputRow = tileRowB + innerRow;
      let inputCol = tileCol + innerCol;
      mm_Bsub[inputRow][inputCol] = mm_readB(batch,
        kStart + inputRow,
        globalCol + innerCol${T ? ", batchIndices" : ""});
    }
  }
  kStart = kStart + tileInner;
  workgroupBarrier();

  // Compute acc values for a single thread.
  var BCached : array<${b}, colPerThread>;
  for (var k = 0; k < tileInner; k = k + 1) {
    for (var inner = 0; inner < colPerThread; inner = inner + 1) {
      BCached[inner] = mm_Bsub[k][tileCol + inner];
    }

    for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
      ${Uo(S)}
      for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
        acc[innerRow][innerCol] = acc[innerRow][innerCol] + ACached * BCached[innerCol];
      }
    }
  }

  workgroupBarrier();
}

for (var innerRow = 0; innerRow < rowPerThread; innerRow = innerRow + 1) {
  for (var innerCol = 0; innerCol < colPerThread; innerCol = innerCol + 1) {
    mm_write(batch, globalRow + innerRow, globalCol + innerCol,
        acc[innerRow][innerCol]);
  }
}
`;
          return `
  var<workgroup> mm_Asub : array<array<${b}, ${q}>, ${X}>;
  var<workgroup> mm_Bsub : array<array<${b}, ${V}>, ${I}>;
  const rowPerThread = ${o[1]};
  const colPerThread = ${o[0]};
  const tileInner = ${I};

@compute @workgroup_size(${v[0]}, ${v[1]}, ${v[2]})
fn main(@builtin(local_invocation_id) localId : vec3<u32>,
        @builtin(global_invocation_id) globalId : vec3<u32>,
        @builtin(workgroup_id) workgroupId : vec3<u32>) {
    let batch = ${O ? "0" : "i32(globalId.z)"};
    ${T ? `let batchIndices = ${T.offsetToIndices("u32(batch)")};` : ""}
    let num_tiles = ${O ? `${Math.ceil(L / I)}` : "(uniforms.dim_inner - 1) / tileInner + 1"};
    var kStart = ${O ? `i32(globalId.z) * ${L}` : "0"};

    var acc : array<array<${b}, colPerThread>, rowPerThread>;
    ${ge}
  }
`;
        }, Tl = (o, v, b, T, S = false) => {
          let [I, O, L, z] = T, B = Ke(T[0].type.tensor);
          return `
    fn mm_readA(batch: i32, row: i32, colIn: i32, batchIndices: ${I.type.indices}) -> ${Qn(o, B)} {
      var value = ${Qn(o, B)}(0.0);
      let col = colIn * ${o};
      if(row < uniforms.dim_a_outer && col < uniforms.dim_inner)
      {
        var aIndices: ${O.type.indices};
        ${rs("aIndices", O, O.rank - 2, I.rank, "batchIndices")}
        ${O.indicesSet("aIndices", O.rank - 2, "u32(row)")}
        ${O.indicesSet("aIndices", O.rank - 1, "u32(colIn)")}
        value = ${O.getByIndices("aIndices")};
      }
      return value;
    }

    fn mm_readB(batch: i32, row: i32, colIn: i32, batchIndices: ${I.type.indices}) -> ${Qn(o, B)} {
      var value = ${Qn(o, B)}(0.0);
      let col = colIn * ${o};
      if(row < uniforms.dim_inner && col < uniforms.dim_b_outer)
      {
        var bIndices: ${L.type.indices};
        ${rs("bIndices", L, L.rank - 2, I.rank, "batchIndices")}
        ${L.indicesSet("bIndices", L.rank - 2, "u32(row)")}
        ${L.indicesSet("bIndices", L.rank - 1, "u32(colIn)")}
        value = ${L.getByIndices("bIndices")};
      }
      return value;
    }

    fn mm_write(batch: i32, row: i32, colIn: i32, valueIn: ${Qn(o, B)}) {
      let col = colIn * ${o};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer) {
        var value = valueIn;
        let coords = vec3<i32>(batch, row, colIn);
        ${v ? `value = value + ${S ? "bias[colIn]" : `${Qn(o, B)}(bias[row])`};` : ""}
        ${b}
        ${z.setByIndices("vec3<u32>(coords)", "value")}
      }
    }
    `;
        }, ss = (o, v, b, T, S = false, I) => {
          let O = o[0].dims, L = o[1].dims, z = O.slice(0, -2), B = L.slice(0, -2), V = T ? T.slice(0, -2) : b.slice(0, -2), q = Xe.size(V), X = O[O.length - 2], ee = O[O.length - 1], ne = L[L.length - 1], se = ee % 4 === 0 && ne % 4 === 0, ge = X <= 8 ? [
            4,
            1,
            1
          ] : [
            4,
            4,
            1
          ], ue = [
            8,
            8,
            1
          ], re = [
            Math.ceil(ne / ue[0] / ge[0]),
            Math.ceil(X / ue[1] / ge[1]),
            Math.ceil(q / ue[2] / ge[2])
          ], Te = se ? 4 : 1, we = [
            ...z,
            X,
            ee / Te
          ], Se = we.length, ze = [
            ...B,
            ee,
            ne / Te
          ], Le = ze.length, nt = [
            q,
            X,
            ne / Te
          ], st = [
            {
              type: 6,
              data: X
            },
            {
              type: 6,
              data: ne
            },
            {
              type: 6,
              data: ee
            }
          ];
          Dr(v, st), st.push(...kt(V, we, ze));
          let Mt = [
            "rank",
            "rank"
          ], Ut = o.length > 2;
          Ut && (st.push(...kt(o[2].dims)), Mt.push("rank")), st.push(...kt(nt));
          let Yt = (xt) => {
            let hn = V.length, yn = Ys("batchDims", o[0].dataType, hn, 1), $t = Ke(o[0].dataType), nn = ct("a", o[0].dataType, Se, Te), wn = ct("b", o[1].dataType, Le, Te), rn = Wt("result", o[0].dataType, nt.length, Te), xn = [
              nn,
              wn
            ];
            if (Ut) {
              let Yn = S ? Te : 1;
              xn.push(ct("bias", o[2].dataType, o[2].dims.length, Yn));
            }
            let ft = [
              {
                name: "dim_a_outer",
                type: "i32"
              },
              {
                name: "dim_b_outer",
                type: "i32"
              },
              {
                name: "dim_inner",
                type: "i32"
              }
            ];
            Sr(v, ft);
            let Dt = Ke(rn.type.tensor), an = Fr(v, rn.type.value, Dt), vn = Tl(Te, Ut, an, [
              yn,
              nn,
              wn,
              rn
            ], S);
            return `
  ${xt.registerUniforms(ft).registerInternalVariables(yn).declareVariables(...xn, rn)}
  ${vn}
  ${se ? jo(ge, ue, $t, yn) : Go(ge, ue, $t, yn)}
                   `;
          };
          return {
            name: "MatMul",
            shaderCache: {
              hint: `${ge};${v.activation};${se};${S}`,
              inputDependencies: Mt
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: I ? I(b) : b,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: re[0],
                y: re[1],
                z: re[2]
              },
              programUniforms: st
            }),
            getShaderSource: Yt
          };
        };
      }), Ml, qo, yd = g(() => {
        Kt(), Gn(), fn(), Lr(), xs(), wd(), Wo(), Ml = (o, v, b, T, S = false, I, O = 4, L = 4, z = 4, B = "f32") => {
          let V = (st) => {
            switch (st) {
              case 1:
                return "resData = x[xIndex];";
              case 3:
                return `resData = vec3<${B}>(x[xIndex], x[xIndex + 1], x[xIndex + 2]);`;
              case 4:
                return "resData = x[xIndex / 4];";
              default:
                throw new Error(`innerElementSize ${st} is not supported.`);
            }
          }, q = (st) => {
            switch (st) {
              case 1:
                return "return w[row * i32(uniforms.w_shape[3]) + colIn];";
              case 4:
                return "return w[row * i32(uniforms.w_shape[3]) / 4 + colIn];";
              default:
                throw new Error(`innerElementSize ${st} is not supported.`);
            }
          }, X = o ? `
    let coord = vec4<i32>(batch, xRow, xCol, xCh);
    ` : `
    let coord = vec4<i32>(batch, xCh, xRow, xCol);
    `, ee = o ? `
    let coords = vec4<i32>(
      batch,
      row / outWidth,
      row % outWidth,
      col);
    ` : `
    let coords = vec4<i32>(
      batch,
      row,
      col / outWidth,
      col % outWidth);
    `, ne = o ? "i32(uniforms.x_shape[1])" : "i32(uniforms.x_shape[2])", se = o ? "i32(uniforms.x_shape[2])" : "i32(uniforms.x_shape[3])", ge = o ? "row" : "col", ue = o ? "col" : "row", re = `
    let inChannels = i32(uniforms.w_shape[2]);
    let outWidth = ${o ? "i32(uniforms.result_shape[2])" : "i32(uniforms.result_shape[3])"};
    let outRow = ${ge} / outWidth;
    let outCol = ${ge} % outWidth;

    let WRow = ${ue} / (i32(uniforms.w_shape[1]) * inChannels);
    let WCol = ${ue} / inChannels % i32(uniforms.w_shape[1]);
    let xRow = outRow * uniforms.stride[0] + uniforms.dilation[0] * WRow - uniforms.pad[0];
    let xCol = outCol * uniforms.stride[1] + uniforms.dilation[1] * WCol - uniforms.pad[1];
    let xCh = ${ue} % inChannels;
    var resData = ${Qn(O, B)}(0.0);
    // The bounds checking is always needed since we use it to pad zero for
    // the 'same' padding type.
    if (xRow >= 0 && xRow < ${ne} && xCol >= 0 && xCol < ${se}) {
      ${X}
      let xIndex = getIndexFromCoords4D(coord, vec4<i32>(uniforms.x_shape));
      ${V(O)}
    }
    return resData;`, Te = o ? v && T ? `
    let col = colIn * ${O};
    ${re}` : `
    let col = colIn * ${O};
    if (row < uniforms.dim_a_outer && col < uniforms.dim_inner) {
      ${re}
    }
    return ${Qn(O, B)}(0.0);` : T && b ? `
    let col = colIn * ${O};
    ${re}` : `
    let col = colIn * ${O};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${re}
    }
    return ${Qn(O, B)}(0.0);`, we = o ? T && b ? q(L) : `
    let col = colIn * ${L};
    if (row < uniforms.dim_inner && col < uniforms.dim_b_outer) {
      ${q(L)}
    }
    return ${Qn(L, B)}(0.0);` : `
    let col = colIn * ${L};
    if (row < uniforms.dim_inner && col < uniforms.dim_a_outer) {
      ${q(L)}
    }
    return ${Qn(L, B)}(0.0);`, Se = Qn(z, B), ze = Qn(o ? O : L, B), Le = Qn(o ? L : O, B), nt = Fr(I, Se, B);
          return `
    fn mm_readA(batch: i32, row : i32, colIn : i32) -> ${ze} {
      ${o ? Te : we}
    }

    fn mm_readB(batch: i32, row : i32, colIn : i32) -> ${Le} {
      ${o ? we : Te}
    }

    fn mm_write(batch: i32, row : i32, colIn : i32, valueIn : ${Se}) {
      let col = colIn * ${z};
      if (row < uniforms.dim_a_outer && col < uniforms.dim_b_outer)
      {
      var value = valueIn;
      let outWidth = ${o ? "i32(uniforms.result_shape[2])" : "i32(uniforms.result_shape[3])"};
      ${ee}
      ${wl(S)}
      ${nt}
      setOutputAtCoords(coords[0], coords[1], coords[2], coords[3], value);
      }
    }`;
        }, qo = (o, v, b, T, S, I, O, L, z) => {
          let B = v.format === "NHWC", V = B ? o[0].dims[3] : o[0].dims[1], q = b[0], X = B ? b[2] : b[3], ee = B ? b[1] : b[2], ne = B ? b[3] : b[1], se = B && (V % 4 === 0 || V % 3 === 0) && ne % 4 === 0, ge = B ? ne : X * ee, ue = B ? X * ee : ne, re = [
            8,
            8,
            1
          ], Te = T <= 8 ? [
            4,
            1,
            1
          ] : [
            4,
            4,
            1
          ], we = [
            Math.ceil(ge / re[0] / Te[0]),
            Math.ceil(ue / re[1] / Te[1]),
            Math.ceil(q / re[2] / Te[2])
          ];
          mn("verbose", () => `[conv2d_mm_webgpu] dispatch = ${we}`);
          let Se = se ? B && V % 4 !== 0 ? 3 : 4 : 1, ze = re[1] * Te[1], Le = re[0] * Te[0], nt = Math.max(re[0] * Se, re[1]), st = T % ze === 0, Mt = S % Le === 0, Ut = I % nt === 0, Yt = se ? [
            Se,
            4,
            4
          ] : [
            1,
            1,
            1
          ], xt = [
            {
              type: 6,
              data: T
            },
            {
              type: 6,
              data: S
            },
            {
              type: 6,
              data: I
            },
            {
              type: 6,
              data: [
                v.pads[0],
                v.pads[1]
              ]
            },
            {
              type: 6,
              data: v.strides
            },
            {
              type: 6,
              data: v.dilations
            }
          ];
          Dr(v, xt), xt.push(...kt(o[0].dims, o[1].dims));
          let hn = [
            "rank",
            "rank"
          ];
          O && (xt.push(...kt(o[2].dims)), hn.push("rank")), xt.push(...kt(b));
          let yn = ($t) => {
            let nn = [
              {
                name: "dim_a_outer",
                type: "i32"
              },
              {
                name: "dim_b_outer",
                type: "i32"
              },
              {
                name: "dim_inner",
                type: "i32"
              },
              {
                name: "pad",
                type: "i32",
                length: 2
              },
              {
                name: "stride",
                type: "i32",
                length: 2
              },
              {
                name: "dilation",
                type: "i32",
                length: 2
              }
            ];
            Sr(v, nn);
            let wn = se ? 4 : 1, rn = Ke(o[0].dataType), xn = `
      fn setOutputAtIndex(flatIndex : i32, value : ${se ? `vec4<${rn}>` : rn}) {
        result[flatIndex] = ${se ? `vec4<${rn}>` : rn}(value);
      }
      fn setOutputAtCoords(d0 : i32, d1 : i32, d2 : i32, d3 : i32, value : ${se ? `vec4<${rn}>` : rn}) {
        let flatIndex = getOutputIndexFromCoords(vec4<i32>(d0, d1, d2, d3));
        setOutputAtIndex(flatIndex ${se ? "/ 4" : ""}, value);
      }`, ft = ct("x", o[0].dataType, o[0].dims.length, Se === 3 ? 1 : Se), Dt = ct("w", o[1].dataType, o[1].dims.length, wn), an = [
              ft,
              Dt
            ], vn = Wt("result", o[0].dataType, b.length, wn);
            if (O) {
              let Yn = ct("bias", o[2].dataType, o[2].dims.length, wn);
              an.push(Yn), xn += `
        fn getBiasByOutputCoords(coords : vec4<i32>) -> ${se ? `vec4<${rn}>` : rn} {
          return bias[coords.${B ? "w" : "y"}${se ? "/ 4" : ""}];
        }`;
            }
            return `
        ${yl("uniforms.result_strides")}
        //struct Uniforms { xShape : vec4<i32>, wShape : vec4<i32>, outShape : vec4<i32>,
        //  outShapeStrides: vec3<i32>, filterDims : vec2<i32>, pad : vec2<i32>, stride : vec2<i32>,
        //  dilation : vec2<i32>, dimAOuter : i32, dimBOuter : i32, dimInner : i32 };
        ${$t.registerUniforms(nn).declareVariables(...an, vn)}
        ${xn}
        ${Ml(B, st, Mt, Ut, O, v, Yt[0], Yt[1], Yt[2], rn)}
        ${se ? jo(Te, re, rn, void 0, !B, nt) : Go(Te, re, rn, void 0, !B, nt, false, void 0, L)}`;
          };
          return {
            name: "Conv2DMatMul",
            shaderCache: {
              hint: `${v.cacheKey};${Se};${se};${st};${Mt};${Ut};${ze};${Le};${nt}`,
              inputDependencies: hn
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: z ? z(b) : b,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: we[0],
                y: we[1],
                z: we[2]
              },
              programUniforms: xt
            }),
            getShaderSource: yn
          };
        };
      }), El, Ts, os, Pl, Ms, Sl, kl, Es, xd = g(() => {
        Kt(), Gn(), ce(), fn(), Lr(), xs(), El = (o) => {
          let v = 1;
          for (let b = 0; b < o.length; b++)
            v *= o[b];
          return v;
        }, Ts = (o) => typeof o == "number" ? [
          o,
          o,
          o
        ] : o, os = (o, v) => v <= 1 ? o : o + (o - 1) * (v - 1), Pl = (o, v, b, T = 1) => {
          let S = os(v, T);
          return Math.floor((o[0] * (b - 1) - b + S) / 2);
        }, Ms = (o, v, b, T, S) => {
          S == null && (S = Pl(o, v[0], T[0]));
          let I = [
            0,
            0,
            0,
            b
          ];
          for (let O = 0; O < 3; O++)
            o[O] + 2 * S >= v[O] && (I[O] = Math.trunc((o[O] - v[O] + 2 * S) / T[O] + 1));
          return I;
        }, Sl = (o, v, b, T, S, I, O, L, z, B) => {
          let V, q, X, ee;
          if (o === "VALID" && (o = 0), typeof o == "number") {
            V = {
              top: o,
              bottom: o,
              left: o,
              right: o,
              front: o,
              back: o
            };
            let ne = Ms([
              v,
              b,
              T,
              1
            ], [
              L,
              z,
              B
            ], 1, [
              S,
              I,
              O
            ], o);
            q = ne[0], X = ne[1], ee = ne[2];
          } else if (Array.isArray(o)) {
            if (!o.every((se, ge, ue) => se === ue[0]))
              throw Error(`Unsupported padding parameter: ${o}`);
            V = {
              top: o[0],
              bottom: o[1],
              left: o[2],
              right: o[3],
              front: o[4],
              back: o[5]
            };
            let ne = Ms([
              v,
              b,
              T,
              1
            ], [
              L,
              z,
              B
            ], 1, [
              S,
              I,
              O
            ], o[0]);
            q = ne[0], X = ne[1], ee = ne[2];
          } else if (o === "SAME_UPPER") {
            q = Math.ceil(v / S), X = Math.ceil(b / I), ee = Math.ceil(T / O);
            let ne = (q - 1) * S + L - v, se = (X - 1) * I + z - b, ge = (ee - 1) * O + B - T, ue = Math.floor(ne / 2), re = ne - ue, Te = Math.floor(se / 2), we = se - Te, Se = Math.floor(ge / 2), ze = ge - Se;
            V = {
              top: Te,
              bottom: we,
              left: Se,
              right: ze,
              front: ue,
              back: re
            };
          } else
            throw Error(`Unknown padding parameter: ${o}`);
          return {
            padInfo: V,
            outDepth: q,
            outHeight: X,
            outWidth: ee
          };
        }, kl = (o, v, b, T, S, I = false, O = "channelsLast") => {
          let L, z, B, V, q;
          if (O === "channelsLast")
            [L, z, B, V, q] = o;
          else if (O === "channelsFirst")
            [L, q, z, B, V] = o;
          else
            throw new Error(`Unknown dataFormat ${O}`);
          let [X, , ee, ne, se] = v, [ge, ue, re] = Ts(b), [Te, we, Se] = Ts(T), ze = os(ee, Te), Le = os(ne, we), nt = os(se, Se), { padInfo: st, outDepth: Mt, outHeight: Ut, outWidth: Yt } = Sl(S, z, B, V, ge, ue, re, ze, Le, nt), xt = I ? X * q : X, hn = [
            0,
            0,
            0,
            0,
            0
          ];
          return O === "channelsFirst" ? hn = [
            L,
            xt,
            Mt,
            Ut,
            Yt
          ] : O === "channelsLast" && (hn = [
            L,
            Mt,
            Ut,
            Yt,
            xt
          ]), {
            batchSize: L,
            dataFormat: O,
            inDepth: z,
            inHeight: B,
            inWidth: V,
            inChannels: q,
            outDepth: Mt,
            outHeight: Ut,
            outWidth: Yt,
            outChannels: xt,
            padInfo: st,
            strideDepth: ge,
            strideHeight: ue,
            strideWidth: re,
            filterDepth: ee,
            filterHeight: ne,
            filterWidth: se,
            effectiveFilterDepth: ze,
            effectiveFilterHeight: Le,
            effectiveFilterWidth: nt,
            dilationDepth: Te,
            dilationHeight: we,
            dilationWidth: Se,
            inShape: o,
            outShape: hn,
            filterShape: v
          };
        }, Es = (o, v, b, T, S, I) => {
          let O = I === "channelsLast";
          O ? o[0].dims[3] : o[0].dims[1];
          let L = [
            64,
            1,
            1
          ], z = {
            x: b.map((ge, ue) => ue)
          }, B = [
            Math.ceil(El(z.x.map((ge) => b[ge])) / L[0]),
            1,
            1
          ];
          mn("verbose", () => `[conv3d_naive_webgpu] dispatch = ${B}`);
          let V = 1, q = Xe.size(b), X = [
            {
              type: 12,
              data: q
            },
            {
              type: 12,
              data: T
            },
            {
              type: 12,
              data: S
            },
            {
              type: 12,
              data: v.strides
            },
            {
              type: 12,
              data: v.dilations
            }
          ];
          Dr(v, X), X.push(...kt(o[0].dims, o[1].dims));
          let ee = [
            "rank",
            "rank"
          ], ne = o.length === 3;
          ne && (X.push(...kt(o[2].dims)), ee.push("rank")), X.push(...kt(b));
          let se = (ge) => {
            let ue = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "filter_dims",
                type: "u32",
                length: T.length
              },
              {
                name: "pads",
                type: "u32",
                length: S.length
              },
              {
                name: "strides",
                type: "u32",
                length: v.strides.length
              },
              {
                name: "dilations",
                type: "u32",
                length: v.dilations.length
              }
            ];
            Sr(v, ue);
            let re = 1, Te = Ke(o[0].dataType), we = ct("x", o[0].dataType, o[0].dims.length, V), Se = ct("W", o[1].dataType, o[1].dims.length, re), ze = [
              we,
              Se
            ], Le = Wt("result", o[0].dataType, b.length, re), nt = "";
            if (ne) {
              let Ut = ct("bias", o[2].dataType, o[2].dims.length, re);
              ze.push(Ut), nt += `
        fn getBiasByOutputCoords(coords : array<u32, 5>) -> ${Te} {
          return bias[${O ? Ht("coords", 4, 5) : Ht("coords", 1, 5)}];
        }`;
            }
            let st = Qn(V, Te), Mt = Fr(v, st, Te);
            return `
            ${nt}
            fn getX(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${we.getByIndices("aIndices")};
            }
            fn getW(d0 : u32, d1 : u32, d2 : u32, d3 : u32, d4 : u32) -> f32 {
              let aIndices = array<u32, 5>(d0, d1, d2, d3, d4);
              return ${Se.getByIndices("aIndices")};
            }
          ${ge.registerUniforms(ue).declareVariables(...ze, Le)}
          ${ge.mainStart()}
          ${ge.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
              let coords = ${Le.offsetToIndices("global_idx")};
              let batch = ${Ht("coords", 0, we.rank)};
              let d2 = ${O ? Ht("coords", we.rank - 1, we.rank) : Ht("coords", 1, we.rank)};
              let xFRCCorner = vec3<u32>(${O ? Ht("coords", 1, we.rank) : Ht("coords", 2, we.rank)},
              ${O ? Ht("coords", 2, we.rank) : Ht("coords", 3, we.rank)},
              ${O ? Ht("coords", 3, we.rank) : Ht("coords", 4, we.rank)}) * uniforms.strides - uniforms.pads;
              let xFCorner = xFRCCorner.x;
              let xRCorner = xFRCCorner.y;
              let xCCorner = xFRCCorner.z;
              let xShapeY = ${O ? Ht("uniforms.x_shape", 1, we.rank) : Ht("uniforms.x_shape", 2, we.rank)};
              let xShapeZ = ${O ? Ht("uniforms.x_shape", 2, we.rank) : Ht("uniforms.x_shape", 3, we.rank)};
              let xShapeW = ${O ? Ht("uniforms.x_shape", 3, we.rank) : Ht("uniforms.x_shape", 4, we.rank)};
              let xShapeU = ${O ? Ht("uniforms.x_shape", 4, we.rank) : Ht("uniforms.x_shape", 1, we.rank)};
              let inputDepthNearestVec4 = (xShapeU / 4) * 4;
              let inputDepthVec4Remainder = xShapeU % 4;

              var value = 0.0;
              for (var wF = 0u; wF < uniforms.filter_dims[0]; wF++) {
                let xF = xFCorner + wF * uniforms.dilations[0];
                if (xF < 0 || xF >= xShapeY) {
                  continue;
                }

                for (var wR = 0u; wR < uniforms.filter_dims[1]; wR++) {
                  let xR = xRCorner + wR * uniforms.dilations[1];
                  if (xR < 0 || xR >= xShapeZ) {
                    continue;
                  }

                  for (var wC = 0u; wC < uniforms.filter_dims[2]; wC++) {
                    let xC = xCCorner + wC * uniforms.dilations[2];
                    if (xC < 0 || xC >= xShapeW) {
                      continue;
                    }

                    for (var d1 = 0u; d1 < inputDepthNearestVec4; d1 += 4) {
                      ${O ? `let xValues = vec4<f32>(
                               getX(batch, xF, xR, xC, d1),
                               getX(batch, xF, xR, xC, d1 + 1),
                               getX(batch, xF, xR, xC, d1 + 2),
                               getX(batch, xF, xR, xC, d1 + 3));
                            ` : `let xValues = vec4<f32>(
                               getX(batch, d1, xF, xR, xC),
                               getX(batch, d1 + 1, xF, xR, xC),
                               getX(batch, d1 + 2, xF, xR, xC),
                               getX(batch, d1 + 3, xF, xR, xC));
                            `}
                            let wValues = vec4<f32>(
                              getW(d2, d1, wF, wR, wC),
                              getW(d2, d1 + 1, wF, wR, wC),
                              getW(d2, d1 + 2, wF, wR, wC),
                              getW(d2, d1 + 3, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                    if (inputDepthVec4Remainder == 1) {
                        ${O ? `value += getX(batch, xF, xR, xC, inputDepthNearestVec4)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);` : `value += getX(batch, inputDepthNearestVec4, xF, xR, xC)
                          * getW(d2, inputDepthNearestVec4, wF, wR, wC);`}
                    } else if (inputDepthVec4Remainder == 2) {
                      ${O ? `let xValues = vec2<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1));
                      ` : `let xValues = vec2<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC));
                    `}
                    let wValues = vec2<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC));
                      value += dot(xValues, wValues);
                    } else if (inputDepthVec4Remainder == 3) {
                      ${O ? `let xValues = vec3<f32>(
                        getX(batch, xF, xR, xC, inputDepthNearestVec4),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 1),
                        getX(batch, xF, xR, xC, inputDepthNearestVec4 + 2));
                      ` : `let xValues = vec3<f32>(
                        getX(batch, inputDepthNearestVec4, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 1, xF, xR, xC),
                        getX(batch, inputDepthNearestVec4 + 2, xF, xR, xC));
                    `}
                    let wValues = vec3<f32>(
                      getW(d2, inputDepthNearestVec4, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 1, wF, wR, wC),
                      getW(d2, inputDepthNearestVec4 + 2, wF, wR, wC));
                      value += dot(xValues, wValues);
                    }
                  }
                }
              }
              ${ne ? "value = value + getBiasByOutputCoords(coords)" : ""};
              ${Mt}
              result[global_idx] = f32(value);
          }`;
          };
          return {
            name: "Conv3DNaive",
            shaderCache: {
              hint: `${v.cacheKey};${O};${V};${ne}`,
              inputDependencies: ee
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: b,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: B[0],
                y: B[1],
                z: B[2]
              },
              programUniforms: X
            }),
            getShaderSource: se
          };
        };
      }), Al, Ho, Cl = g(() => {
        Kt(), ce(), fn(), Lr(), Al = (o, v, b, T) => {
          let S = o.length > 2, I = S ? "value += b[output_channel];" : "", O = o[0].dims, L = o[1].dims, z = v.format === "NHWC", B = z ? b[3] : b[1], V = B / v.group, q = z && V >= 4 ? Mn(B) : 1, X = Xe.size(b) / q, ee = [
            {
              type: 12,
              data: X
            },
            {
              type: 12,
              data: v.dilations
            },
            {
              type: 12,
              data: [
                v.strides[0],
                v.strides[1]
              ]
            },
            {
              type: 12,
              data: [
                v.pads[0],
                v.pads[1]
              ]
            },
            {
              type: 12,
              data: V
            }
          ];
          Dr(v, ee), ee.push(...kt(O, [
            L[0],
            L[1],
            L[2],
            L[3] / q
          ]));
          let ne = S ? [
            "rank",
            "rank",
            "rank"
          ] : [
            "rank",
            "rank"
          ];
          ee.push(...kt([
            b[0],
            b[1],
            b[2],
            b[3] / q
          ]));
          let se = (ge) => {
            let ue = Wt("output", o[0].dataType, b.length, q), re = Ke(ue.type.tensor), Te = Fr(v, ue.type.value, re), we = ct("x", o[0].dataType, O.length), Se = ct("w", o[1].dataType, L.length, q), ze = [
              we,
              Se
            ];
            S && ze.push(ct("b", o[2].dataType, o[2].dims, q));
            let Le = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "dilations",
                type: "u32",
                length: v.dilations.length
              },
              {
                name: "strides",
                type: "u32",
                length: 2
              },
              {
                name: "pads",
                type: "u32",
                length: 2
              },
              {
                name: "output_channels_per_group",
                type: "u32"
              }
            ];
            Sr(v, Le);
            let nt = z ? `
      for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[0]; wHeight++) {
        let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

        if (xHeight < 0u || xHeight >= uniforms.x_shape[1]) {
          continue;
        }

        for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[1]; wWidth++) {
          let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
          if (xWidth < 0u || xWidth >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[2]; wInChannel++) {
            let input_channel = in_channel_offset + wInChannel;
            let xVal = ${we.get("batch", "xHeight", "xWidth", "input_channel")};
            let wVal = ${Se.get("wHeight", "wWidth", "wInChannel", "output_channel")};
            value += xVal * wVal;
          }
        }
      }
      ` : `
      for (var wInChannel: u32 = 0u; wInChannel < uniforms.w_shape[1]; wInChannel++) {
        let input_channel = in_channel_offset + wInChannel;
        for (var wHeight: u32 = 0u; wHeight < uniforms.w_shape[2]; wHeight++) {
          let xHeight = xRCCorner.x + wHeight * uniforms.dilations[0];

          if (xHeight < 0u || xHeight >= uniforms.x_shape[2]) {
            continue;
          }

          for (var wWidth: u32 = 0u; wWidth < uniforms.w_shape[3]; wWidth++) {
            let xWidth = xRCCorner.y + wWidth * uniforms.dilations[1];
            if (xWidth < 0u || xWidth >= uniforms.x_shape[3]) {
              continue;
            }

            let xVal = ${we.get("batch", "input_channel", "xHeight", "xWidth")};
            let wVal = ${Se.get("output_channel", "wInChannel", "wHeight", "wWidth")};
            value += xVal * wVal;
          }
        }
      }
      `;
            return `
  ${ge.registerUniforms(Le).declareVariables(...ze, ue)}

  ${ge.mainStart()}
    ${ge.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let outputIndices = ${ue.offsetToIndices("global_idx")};
    let batch: u32 = outputIndices[0];
    let output_channel: u32 = outputIndices[${z ? 3 : 1}];
    let xRCCorner: vec2<u32> = vec2<u32>(outputIndices[${z ? 1 : 2}], outputIndices[${z ? 2 : 3}]) * uniforms.strides - uniforms.pads;
    let group_id: u32 = output_channel * ${q} / uniforms.output_channels_per_group;
    var in_channel_offset = group_id * uniforms.w_shape[${z ? 2 : 1}];

    var value: ${ue.type.value} = ${ue.type.value}(0);
    ${nt}
    ${I}
    ${Te}
    ${ue.setByOffset("global_idx", "value")}
  }`;
          };
          return {
            name: "GroupedConv",
            shaderCache: {
              hint: `${v.cacheKey}_${q}`,
              inputDependencies: ne
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: T ? T(b) : b,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(X / 64)
              },
              programUniforms: ee
            }),
            getShaderSource: se
          };
        }, Ho = (o, v, b, T) => {
          let S = o.length > 2, I = Mn(b[3]), O = Mn(b[2]), L = Xe.size(b) / I / O, z = [
            o[0].dims[0],
            o[0].dims[1],
            o[0].dims[2],
            o[0].dims[3] / I
          ], B = [
            o[1].dims[0],
            o[1].dims[1],
            o[1].dims[2],
            o[1].dims[3] / I
          ], V = [
            b[0],
            b[1],
            b[2],
            b[3] / I
          ], q = [
            {
              type: 12,
              data: L
            },
            {
              type: 6,
              data: [
                v.strides[0],
                v.strides[1]
              ]
            },
            {
              type: 6,
              data: [
                v.pads[0],
                v.pads[1]
              ]
            }
          ];
          Dr(v, q), q.push(...kt(z, B, V));
          let X = (O - 1) * v.strides[1] + B[1], ee = (ne) => {
            let se = Wt("output", o[0].dataType, V.length, I), ge = Ke(se.type.tensor), ue = Fr(v, se.type.value, ge), re = ct("x", o[0].dataType, z.length, I), Te = ct("w", o[1].dataType, B.length, I), we = [
              re,
              Te
            ];
            S && we.push(ct("b", o[2].dataType, o[2].dims, I));
            let Se = S ? "value += b[output_channel];" : "", ze = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "strides",
                type: "i32",
                length: 2
              },
              {
                name: "pads",
                type: "i32",
                length: 2
              }
            ];
            return Sr(v, ze), `
  ${ne.registerUniforms(ze).declareVariables(...we, se)}
  ${ne.mainStart()}
    ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let width0 = uniforms.output_shape[3];
    let output_channel = global_idx % width0;
    var index1 = global_idx / width0;
    let width1 = uniforms.output_shape[2] / ${O}u;
    let col = (index1 % width1) * ${O}u;
    index1 = index1 / width1;
    let row = index1 % uniforms.output_shape[1];
    let batch = index1 / uniforms.output_shape[1];

    let x_corner = vec2<i32>(i32(row), i32(col)) * uniforms.strides - uniforms.pads;

    var x_vals: array<${re.type.value}, ${X}>;
    var values: array<${se.type.value}, ${O}>;
    let input_channel = output_channel;
    // Use constant instead of uniform can give better performance for w's height/width.
    for (var w_height: u32 = 0u; w_height < ${B[0]}; w_height++) {
      let x_height = x_corner.x + i32(w_height);
      if (x_height >= 0 && u32(x_height) < uniforms.x_shape[1]) {
        for (var i = 0; i < ${X}; i++) {
          let x_width = x_corner.y + i;
          if (x_width >= 0 && u32(x_width) < uniforms.x_shape[2]) {
            x_vals[i] = ${re.get("batch", "u32(x_height)", "u32(x_width)", "input_channel")};
          } else {
            x_vals[i] = ${re.type.value}(0);
          }
        }
        for (var w_width: u32 = 0u; w_width < ${B[1]}; w_width++) {
          let w_val = ${Te.get("w_height", "w_width", "0", "output_channel")};
          for (var i = 0u; i < ${O}u; i++) {
            values[i] = fma(x_vals[i * u32(uniforms.strides[1]) + w_width], w_val, values[i]);
          }
        }
      }
    }

    for (var i = 0u; i < ${O}u; i++) {
      var value = values[i];
      ${Se}
      ${ue}
      ${se.set("batch", "row", "col + i", "output_channel", "value")};
    }
  }`;
          };
          return {
            name: "GroupedConv-Vectorize",
            shaderCache: {
              hint: `${v.cacheKey};${I};${O};${X};${B[0]};${B[1]}`,
              inputDependencies: S ? [
                "rank",
                "rank",
                "type"
              ] : [
                "rank",
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: T ? T(b) : b,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(L / 64)
              },
              programUniforms: q
            }),
            getShaderSource: ee
          };
        };
      }), Il, is, Ol, Ps, Ur, Ss, $l, Fl, Ko, Dl = g(() => {
        ce(), yd(), xd(), Wo(), Cl(), Lr(), vs(), Or(), Il = (o, v, b, T, S, I) => {
          let O = o[0], L = o.slice(I ? 1 : 2, I ? 3 : 4), z = L.length, B = v[0], V = v.slice(2).map((X, ee) => X + (X - 1) * (b[ee] - 1)), q = L.map((X, ee) => X + T[ee] + T[ee + z]).map((X, ee) => Math.floor((X - V[ee] + S[ee]) / S[ee]));
          return q.splice(0, 0, O), q.splice(I ? 3 : 1, 0, B), q;
        }, is = [
          2,
          3,
          1,
          0
        ], Ol = (o, v) => {
          if (!o || o.length !== 2 && o.length !== 3)
            throw new Error("Conv requires 2 or 3 inputs");
          if (o[0].dims.length > 5)
            throw new Error("greater than 5D is not supported");
          if (o[0].dims.length !== o[1].dims.length)
            throw new Error("filter does not have same dimension as input");
          let b = o[0].dims[v.format === "NHWC" ? o[0].dims.length - 1 : 1], T = o[1].dims[1] * v.group;
          if (b !== T)
            throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
          if (o.length === 3 && (o[2].dims.length !== 1 || o[1].dims[0] !== o[2].dims[0]))
            throw new Error("invalid bias");
          let S = o[0].dims.length - 2;
          if (v.dilations.length !== S)
            throw new Error(`dilations should be ${S}D`);
          if (v.strides.length !== S)
            throw new Error(`strides should be ${S}D`);
          if (v.pads.length !== S * 2)
            throw new Error(`pads should be ${S * 2}D`);
          if (v.kernelShape.length !== 0 && v.kernelShape.length !== o[1].dims.length - 2)
            throw new Error("invalid kernel shape");
        }, Ps = (o, v) => {
          let b = o.kernelShape.slice();
          b.length < v[1].dims.length - 2 && b.push(...Array(v[1].dims.length - 2 - b.length).fill(0));
          for (let I = 2; I < v[1].dims.length; ++I)
            b[I - 2] === 0 && (b[I - 2] = v[1].dims[I]);
          let T = o.pads.slice();
          yr.adjustPadsBasedOnAutoPad(v[0].dims, o.strides, o.dilations, b, T, o.format === "NHWC", o.autoPad);
          let S = Object.assign({}, o);
          return Object.assign(S, {
            kernelShape: b,
            pads: T
          }), S;
        }, Ur = (o) => {
          let v = zo(o), b = o.format, T = [
            "NOTSET",
            "VALID",
            "SAME_UPPER",
            "SAME_LOWER"
          ][o.auto_pad], S = o.dilations, I = o.group, O = o.kernel_shape, L = o.pads, z = o.strides, B = o.w_is_const();
          return {
            autoPad: T,
            format: b,
            dilations: S,
            group: I,
            kernelShape: O,
            pads: L,
            strides: z,
            wIsConst: B,
            ...v,
            cacheKey: `${o.format};${v.activation};`
          };
        }, Ss = (o, v, b, T) => {
          let S = b.format === "NHWC", I = Il(v[0].dims, v[1].dims, b.dilations, b.pads, b.strides, S);
          if (b.group !== 1) {
            let ze = [
              v[0]
            ];
            if (S) {
              let Le = o.kernelCustomData.wT ?? o.compute(cr(v[1], is), {
                inputs: [
                  1
                ],
                outputs: [
                  b.wIsConst ? -2 : -1
                ]
              })[0];
              b.wIsConst && !o.kernelCustomData.wT && (o.kernelCustomData.wT = Le), ze.push(Le);
            } else
              ze.push(v[1]);
            v.length === 3 && ze.push(v[2]), !o.adapterInfo.isArchitecture("ampere") && S && v[1].dims[0] === b.group && v[1].dims[1] === 1 && b.dilations[0] === 1 && b.dilations[1] === 1 ? o.compute(Ho(ze, b, I, T), {
              inputs: ze
            }) : o.compute(Al(ze, b, I, T), {
              inputs: ze
            });
            return;
          }
          let O = v.length === 3, L = v[0].dims[S ? 1 : 2], z = v[0].dims[S ? 2 : 3], B = v[0].dims[S ? 3 : 1], V = v[1].dims[2], q = v[1].dims[3], X = I[S ? 1 : 2], ee = I[S ? 2 : 3], ne = I[S ? 3 : 1], se = S && V === L && q === z && b.pads[0] === 0 && b.pads[1] === 0;
          if (se || V === 1 && q === 1 && b.dilations[0] === 1 && b.dilations[1] === 1 && b.strides[0] === 1 && b.strides[1] === 1 && b.pads[0] === 0 && b.pads[1] === 0) {
            let ze = I[0], Le, nt, st, Mt = [];
            if (S) {
              let xt = o.kernelCustomData.wT ?? o.compute(cr(v[1], is), {
                inputs: [
                  1
                ],
                outputs: [
                  b.wIsConst ? -2 : -1
                ]
              })[0];
              if (b.wIsConst && !o.kernelCustomData.wT && (o.kernelCustomData.wT = xt), se) {
                let hn = L * z * B;
                Le = v[0].reshape([
                  1,
                  ze,
                  hn
                ]), nt = xt.reshape([
                  1,
                  hn,
                  ne
                ]), st = [
                  1,
                  ze,
                  ne
                ];
              } else
                Le = v[0].reshape([
                  ze,
                  L * z,
                  B
                ]), nt = xt.reshape([
                  1,
                  B,
                  ne
                ]), st = [
                  ze,
                  X * ee,
                  ne
                ];
              Mt.push(Le), Mt.push(nt);
            } else
              Le = v[0].reshape([
                ze,
                B,
                L * z
              ]), nt = v[1].reshape([
                1,
                ne,
                B
              ]), st = [
                ze,
                ne,
                X * ee
              ], Mt.push(nt), Mt.push(Le);
            O && Mt.push(v[2]);
            let Ut = st[2], Yt = Mt[0].dims[Mt[0].dims.length - 1];
            Ut < 8 && Yt < 8 ? o.compute(Bo(Mt, b, I, st, S, T), {
              inputs: Mt
            }) : o.compute(ss(Mt, b, I, st, S, T), {
              inputs: Mt
            });
            return;
          }
          let ge = true, ue = o.kernelCustomData.wT ?? o.compute(cr(v[1], is), {
            inputs: [
              1
            ],
            outputs: [
              b.wIsConst ? -2 : -1
            ]
          })[0];
          b.wIsConst && !o.kernelCustomData.wT && (o.kernelCustomData.wT = ue);
          let re = [
            v[0],
            ue
          ];
          O && re.push(v[2]);
          let Te = S ? X * ee : ne, we = S ? ne : X * ee, Se = V * q * B;
          o.compute(qo(re, b, I, Te, we, Se, O, ge, T), {
            inputs: re
          });
        }, $l = (o, v) => {
          let b = v.format === "NHWC", T = [
            o.inputs[0].reshape(b ? [
              o.inputs[0].dims[0],
              1,
              o.inputs[0].dims[1],
              o.inputs[0].dims[2]
            ] : [
              o.inputs[0].dims[0],
              o.inputs[0].dims[1],
              1,
              o.inputs[0].dims[2]
            ]),
            o.inputs[1].reshape([
              o.inputs[1].dims[0],
              o.inputs[1].dims[1],
              1,
              o.inputs[1].dims[2]
            ])
          ];
          o.inputs.length === 3 && T.push(o.inputs[2]);
          let S = [
            0,
            v.pads[0],
            0,
            v.pads[1]
          ], I = [
            1
          ].concat(v.strides), O = [
            1
          ].concat(v.dilations), L = [
            1
          ].concat(v.kernelShape), z = Ps({
            ...v,
            pads: S,
            strides: I,
            dilations: O,
            kernelShape: L
          }, T);
          Ss(o, T, z, (B) => b ? [
            B[0],
            B[2],
            B[3]
          ] : [
            B[0],
            B[1],
            B[3]
          ]);
        }, Fl = (o, v, b) => {
          let T = b.format === "NHWC" ? "channelsLast" : "channelsFirst", S = Ps(b, v), I = b.autoPad === "NOTSET" ? b.pads : b.autoPad, O = kl(v[0].dims, v[1].dims, b.strides, b.dilations, I, false, T);
          o.compute(Es(v, S, O.outShape, [
            O.filterDepth,
            O.filterHeight,
            O.filterWidth
          ], [
            O.padInfo.front,
            O.padInfo.top,
            O.padInfo.left
          ], T));
        }, Ko = (o, v) => {
          if (Ol(o.inputs, v), o.inputs[0].dims.length === 3)
            $l(o, v);
          else if (o.inputs[0].dims.length === 5)
            Fl(o, o.inputs, v);
          else {
            let b = Ps(v, o.inputs);
            Ss(o, o.inputs, b);
          }
        };
      }), Ll, vd = g(() => {
        Kt(), Gn(), ce(), fn(), Ll = (o, v, b) => {
          let T = o.length > 2, S = v.outputShape, I = v.format === "NHWC", O = v.group, L = o[1].dims, z = L[2] / O, B = L[3], V = I ? Mn(z) : 1, q = I && B === 1 && z >= 4, X = q ? Math.floor(z / 4) * 4 : Math.floor(z / V) * V, ee = z - X, ne = I ? Mn(B) : 1, se = I ? B === 1 ? V : ne : 1, ge = Xe.size(S) / ne, ue = [
            Math.ceil(ge / 64),
            1,
            1
          ];
          mn("verbose", () => `[conv2d_backprop_webgpu] dispatch = ${ue}`);
          let re = [
            "rank",
            "rank"
          ], Te = [
            v.strides[0],
            v.strides[1]
          ], we = [
            v.kernelShape[I ? 1 : 2],
            v.kernelShape[I ? 2 : 3]
          ], Se = [
            v.dilations[0],
            v.dilations[1]
          ], ze = [
            we[0] + (v.dilations[0] <= 1 ? 0 : (v.kernelShape[I ? 1 : 2] - 1) * (v.dilations[0] - 1)),
            we[1] + (v.dilations[1] <= 1 ? 0 : (v.kernelShape[I ? 2 : 3] - 1) * (v.dilations[1] - 1))
          ], Le = [
            ze[0] - 1 - Math.floor((v.pads[0] + v.pads[2]) / 2),
            ze[1] - 1 - Math.floor((v.pads[1] + v.pads[3]) / 2)
          ], nt = [
            {
              type: 12,
              data: ge
            },
            {
              type: 12,
              data: Te
            },
            {
              type: 12,
              data: we
            },
            {
              type: 12,
              data: Se
            },
            {
              type: 12,
              data: ze
            },
            {
              type: 6,
              data: Le
            },
            {
              type: 12,
              data: X
            },
            {
              type: 12,
              data: z
            },
            {
              type: 12,
              data: B
            },
            ...kt(o[0].dims, o[1].dims)
          ];
          T && (nt.push(...kt(o[2].dims)), re.push("rank")), nt.push(...kt(S));
          let st = (Mt) => {
            let Ut = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "strides",
                type: "u32",
                length: Te.length
              },
              {
                name: "filter_dims",
                type: "u32",
                length: we.length
              },
              {
                name: "dilations",
                type: "u32",
                length: we.length
              },
              {
                name: "effective_filter_dims",
                type: "u32",
                length: ze.length
              },
              {
                name: "pads",
                type: "i32",
                length: Le.length
              },
              {
                name: "input_channels_per_group_int",
                type: "u32"
              },
              {
                name: "input_channels_per_group",
                type: "u32"
              },
              {
                name: "output_channels_per_group",
                type: "u32"
              }
            ], Yt = Ke(o[0].dataType), xt = I ? 1 : 2, hn = I ? 2 : 3, yn = I ? 3 : 1, $t = ct("W", o[1].dataType, o[1].dims.length, se), nn = ct("Dy", o[0].dataType, o[0].dims.length, V), wn = [
              nn,
              $t
            ];
            T && wn.push(ct("bias", o[2].dataType, [
              S[yn]
            ].length, ne));
            let rn = Wt("result", o[0].dataType, S.length, ne), xn = () => {
              let an = "";
              if (q)
                V === 4 ? an += `
        let xValue = ${nn.getByOffset("x_offset")};
        let wValue = ${$t.getByOffset("w_offset")};
        dotProd = dotProd + dot(xValue, wValue);
        x_offset += 1u;
        w_offset += 1u;` : V === 2 ? an += `
          dotProd = dotProd + dot(vec4<${Yt}>(${nn.getByOffset("x_offset")}, ${nn.getByOffset("x_offset + 1u")}), vec4<${Yt}>(${$t.getByOffset("w_offset")}, ${$t.getByOffset("w_offset + 1u")}));
          x_offset += 2u;
          w_offset += 2u;` : V === 1 && (an += `
          dotProd = dotProd + dot(vec4<${Yt}>(${nn.getByOffset("x_offset")}, ${nn.getByOffset("x_offset + 1u")}, ${nn.getByOffset("x_offset + 2u")}, ${nn.getByOffset("x_offset + 3u")}), vec4<${Yt}>(${$t.getByOffset("w_offset")}, ${$t.getByOffset("w_offset + 1u")}, ${$t.getByOffset("w_offset + 2u")}, ${$t.getByOffset("w_offset + 3u")}));
          x_offset += 4u;
          w_offset += 4u;`);
              else if (an += `
                  let xValue = ${I ? nn.getByOffset(`${nn.indicesToOffset(`${nn.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${V}`) : nn.get("batch", "inputChannel", "idyR", "idyC")};
        `, V === 1)
                an += `
          let w_offset = ${$t.indicesToOffset(`${$t.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel, wOutChannel)`)};
          let wValue = ${$t.getByOffset(`w_offset / ${se}`)};
          dotProd = dotProd + xValue * wValue;`;
              else
                for (let vn = 0; vn < V; vn++)
                  an += `
            let wValue${vn} = ${$t.getByOffset(`${$t.indicesToOffset(`${$t.type.indices}(u32(wRPerm), u32(wCPerm), inputChannel + ${vn}, wOutChannel)`)} / ${se}`)};
            dotProd = dotProd + xValue[${vn}] * wValue${vn};`;
              return an;
            }, ft = () => {
              if (ee === 0)
                return "";
              if (!q)
                throw new Error(`packInputAs4 ${q} is not true.`);
              let an = "";
              if (V === 1) {
                an += "dotProd = dotProd";
                for (let vn = 0; vn < ee; vn++)
                  an += `
            + ${nn.getByOffset(`x_offset + ${vn}`)} * ${$t.getByOffset(`w_offset + ${vn}`)}`;
                an += ";";
              } else if (V === 2) {
                if (ee !== 2)
                  throw new Error(`Invalid inputChannelsRemainder ${ee}.`);
                an += `
          let xValue = ${nn.getByOffset("x_offset")};
          let wValue = ${$t.getByOffset("w_offset")};
          dotProd = dotProd + dot(xValue, wValue);`;
              }
              return an;
            }, Dt = `
            let outputIndices = ${rn.offsetToIndices(`global_idx * ${ne}`)};
            let batch = ${rn.indicesGet("outputIndices", 0)};
            let d1 = ${rn.indicesGet("outputIndices", yn)};
            let r = ${rn.indicesGet("outputIndices", xt)};
            let c = ${rn.indicesGet("outputIndices", hn)};
            let dyCorner = vec2<i32>(i32(r), i32(c)) - uniforms.pads;
            let dyRCorner = dyCorner.x;
            let dyCCorner = dyCorner.y;
            let groupId = d1 / uniforms.output_channels_per_group;
            let wOutChannel = d1 - groupId * uniforms.output_channels_per_group;
            // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).
            // ? = to be determined. : = across all values in that axis.
            var dotProd = ${rn.type.value}(0.0);
            var wR: u32 = 0;
            if (uniforms.dilations.x == 1) {
              // Minimum wR >= 0 that satisfies (dyRCorner + wR) % (uniforms.strides.x) == 0
              wR = u32(((dyRCorner + i32(uniforms.strides.x) - 1) / i32(uniforms.strides.x)) * i32(uniforms.strides.x) - dyRCorner);
            }
            for (; wR < uniforms.effective_filter_dims.x; wR = wR + 1) {
              if (wR % uniforms.dilations.x != 0) {
                continue;
              }
              let dyR = (${Yt}(dyRCorner) + ${Yt}(wR)) / ${Yt}(uniforms.strides[0]);
              let wRPerm = uniforms.filter_dims.x - 1 - wR / uniforms.dilations.x;
              if (dyR < 0.0 || dyR >= ${Yt}(uniforms.Dy_shape[${xt}]) || fract(dyR) > 0.0 ||
                  wRPerm < 0) {
                continue;
              }
              let idyR: u32 = u32(dyR);
              var wC: u32 = 0;
              if (uniforms.dilations.y == 1) {
                // Minimum wC >= 0 that satisfies (dyCCorner + wC) % (uniforms.strides.y) == 0
                wC = u32(((dyCCorner + i32(uniforms.strides.y) - 1) / i32(uniforms.strides.y)) * i32(uniforms.strides.y) - dyCCorner);
              }
              for (; wC < uniforms.effective_filter_dims.y; wC = wC + 1) {
                if (wC % uniforms.dilations.y != 0) {
                  continue;
                }
                let dyC = (${Yt}(dyCCorner) + ${Yt}(wC)) / ${Yt}(uniforms.strides.y);
                let wCPerm = uniforms.filter_dims.y - 1 - wC / uniforms.dilations.y;
                if (dyC < 0.0 || dyC >= ${Yt}(uniforms.Dy_shape[${hn}]) ||
                    fract(dyC) > 0.0 || wCPerm < 0) {
                  continue;
                }
                let idyC: u32 = u32(dyC);
                var inputChannel = groupId * uniforms.input_channels_per_group;
                ${q ? `
                var x_offset = ${nn.indicesToOffset(`${nn.type.indices}(batch, idyR, idyC, inputChannel)`)} / ${V};
                var w_offset = ${$t.indicesToOffset(`${$t.type.indices}(wRPerm, wCPerm, inputChannel, wOutChannel)`)} / ${se};
                  ` : ""}
                for (var d2: u32 = 0; d2 < uniforms.input_channels_per_group_int; d2 = d2 + ${q ? 4 : V}) {
                  ${xn()}
                  inputChannel = inputChannel + ${q ? 4 : V};
                }
                ${ft()}
                wC = wC + uniforms.strides.y - 1;
              }
              wR = wR + uniforms.strides[0] - 1;
            }
            let value = dotProd${T ? ` + bias[d1 / ${ne}]` : ""};
            ${rn.setByOffset("global_idx", "value")};
          `;
            return `
    ${Mt.registerUniforms(Ut).declareVariables(...wn, rn)}
      ${Mt.mainStart()}
      ${Mt.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")};
    ${Dt}}`;
          };
          return {
            name: "ConvTranspose2D",
            shaderCache: {
              hint: `${v.cacheKey};${V}${se}${ne}${q}${ee}`,
              inputDependencies: re
            },
            getRunData: () => ({
              dispatchGroup: {
                x: ue[0],
                y: ue[1],
                z: ue[2]
              },
              outputs: [
                {
                  dims: b ? b(S) : S,
                  dataType: o[0].dataType
                }
              ],
              programUniforms: nt
            }),
            getShaderSource: st
          };
        };
      }), Nl, Yo, Rl, Xo, Qo, zl, Jo, Bl, Zo, Td = g(() => {
        vd(), Lr(), Or(), Nl = (o, v, b, T, S, I) => (o - 1) * v + b + (T - 1) * S + 1 - I, Yo = (o, v, b, T, S) => {
          let I = Math.floor(o / 2);
          v === "SAME_UPPER" ? (b[T] = I, b[S] = o - I) : v === "SAME_LOWER" && (b[T] = o - I, b[S] = I);
        }, Rl = (o, v, b, T, S, I, O, L, z, B) => {
          let V = o.length - 2, q = B.length === 0;
          z.length < V && z.push(...Array(V - z.length).fill(0));
          let X = o[0], ee = v[L ? 3 : 1] * S;
          for (let ne = 0, se = o.length - V - (L ? 1 : 0); ne < V; ++ne, ++se) {
            let ge = o[se], ue = q ? ge * O[ne] : B[ne], re = Nl(ge, O[ne], I[ne], v[se], b[ne], ue);
            Yo(re, T, I, ne, ne + V), q && B.push(O[ne] * (ge - 1) + z[ne] + (v[se] - 1) * b[ne] + 1 - I[ne] - I[ne + V]);
          }
          B.splice(0, 0, X), B.splice(L ? 3 : 1, 0, ee);
        }, Xo = (o, v) => {
          let b = o.kernelShape.slice();
          if (o.kernelShape.length === 0 || o.kernelShape.reduce((q, X) => q * X, 1) === 0) {
            b.length = 0;
            for (let q = 2; q < v[1].dims.length; ++q)
              b.push(v[1].dims[q]);
          }
          let T = o.format === "NHWC";
          b.splice(0, 0, v[1].dims[0]), b.splice(T ? 3 : 1, 0, v[1].dims[1]);
          let S = o.pads.slice(), I = o.outputShape.slice(), O = o.outputPadding.slice(), L = v[0].dims, z = o.dilations.slice();
          if (z.reduce((q, X) => q + X, 0) === 0) {
            let q = v[0].dims.length - 2;
            z = new Array(q).fill(1);
          }
          let B = o.strides.slice();
          if (B.reduce((q, X) => q + X, 0) === 0) {
            let q = v[0].dims.length - 2;
            B = new Array(q).fill(1);
          }
          Rl(L, b, z, o.autoPad, o.group, S, B, T, O, I);
          let V = Object.assign({}, o);
          return Object.assign(V, {
            kernelShape: b,
            pads: S,
            outputPadding: O,
            outputShape: I,
            dilations: z,
            strides: B
          }), V;
        }, Qo = (o) => {
          let v = zo(o), b = o.format, T = [
            "NOTSET",
            "VALID",
            "SAME_UPPER",
            "SAME_LOWER"
          ][typeof o.autoPad > "u" ? 0 : o.autoPad], S = o.dilations, I = o.group, O = o.kernelShape, L = o.pads, z = o.strides, B = o.wIsConst(), V = o.outputPadding, q = o.outputShape;
          return {
            autoPad: T,
            format: b,
            dilations: S,
            group: I,
            kernelShape: O,
            outputPadding: V,
            outputShape: q,
            pads: L,
            strides: z,
            wIsConst: B,
            ...v,
            cacheKey: `${o.format};${v.activation};`
          };
        }, zl = (o, v) => {
          if (!o || o.length !== 2 && o.length !== 3)
            throw new Error("Conv requires 2 or 3 inputs");
          if (o[0].dims.length !== 4 && o[0].dims.length !== 3)
            throw new Error("currently only support 2-dimensional conv");
          if (o[0].dims.length !== o[1].dims.length)
            throw new Error("filter does not have same dimension as input");
          let b = o[0].dims[v.format === "NHWC" ? o[0].dims.length - 1 : 1], T = o[1].dims[0];
          if (b !== T)
            throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
          let S = o[1].dims[1] * v.group;
          if (o.length === 3 && (o[2].dims.length !== 1 || o[2].dims[0] !== S))
            throw new Error("invalid bias");
          let I = o[0].dims.length - 2;
          if (v.dilations.reduce((O, L) => O + L, 0) > 0 && v.dilations.length !== I)
            throw new Error(`dilations should be ${I}D`);
          if (v.strides.reduce((O, L) => O + L, 0) > 0 && v.strides.length !== I)
            throw new Error(`strides should be ${I}D`);
          if (v.pads.reduce((O, L) => O + L, 0) > 0 && v.pads.length !== I * 2)
            throw new Error(`pads should be ${I * 2}D`);
          if (v.outputPadding.length !== I && v.outputPadding.length !== 0)
            throw new Error(`output_padding should be ${I}D`);
          if (v.kernelShape.reduce((O, L) => O + L, 0) > 0 && v.kernelShape.length !== 0 && v.kernelShape.length !== o[1].dims.length - 2)
            throw new Error("invalid kernel shape");
          if (v.outputShape.length !== 0 && v.outputShape.length !== o[0].dims.length - 2)
            throw new Error("invalid output shape");
        }, Jo = (o, v, b, T) => {
          let S = o.kernelCustomData.wT ?? o.compute(cr(v[1], [
            2,
            3,
            0,
            1
          ]), {
            inputs: [
              1
            ],
            outputs: [
              b.wIsConst ? -2 : -1
            ]
          })[0];
          b.wIsConst && !o.kernelCustomData.wT && (o.kernelCustomData.wT = S);
          let I = [
            v[0],
            S
          ];
          v.length === 3 && I.push(v[2]), o.compute(Ll(I, b, T), {
            inputs: I
          });
        }, Bl = (o, v) => {
          let b = v.format === "NHWC", T = [
            o.inputs[0].reshape(b ? [
              o.inputs[0].dims[0],
              1,
              o.inputs[0].dims[1],
              o.inputs[0].dims[2]
            ] : [
              o.inputs[0].dims[0],
              o.inputs[0].dims[1],
              1,
              o.inputs[0].dims[2]
            ]),
            o.inputs[1].reshape([
              o.inputs[1].dims[0],
              o.inputs[1].dims[1],
              1,
              o.inputs[1].dims[2]
            ])
          ];
          o.inputs.length === 3 && T.push(o.inputs[2]);
          let S = v.kernelShape;
          (S.length === 0 || S[0] === 0) && (S = [
            o.inputs[1].dims[2]
          ]);
          let I = v.dilations;
          (I.length === 0 || I[0] === 0) && (I = [
            1
          ]);
          let O = v.strides;
          (O.length === 0 || O[0] === 0) && (O = [
            1
          ]);
          let L = v.pads;
          L.length === 0 && (L = [
            0,
            0
          ]), L = [
            0,
            L[0],
            0,
            L[1]
          ], O = [
            1
          ].concat(O), I = [
            1
          ].concat(I), S = [
            1
          ].concat(S);
          let z = v.outputPadding;
          z = [
            0
          ].concat(z);
          let B = Xo({
            ...v,
            pads: L,
            strides: O,
            dilations: I,
            kernelShape: S,
            outputPadding: z
          }, T);
          Jo(o, T, B, (V) => b ? [
            V[0],
            V[2],
            V[3]
          ] : [
            V[0],
            V[1],
            V[3]
          ]);
        }, Zo = (o, v) => {
          if (zl(o.inputs, v), o.inputs[0].dims.length === 3)
            Bl(o, v);
          else {
            let b = Xo(v, o.inputs);
            Jo(o, o.inputs, b);
          }
        };
      }), jl, ei, Vl, Md = g(() => {
        Kt(), ce(), Qt(), fn(), jl = (o, v, b, T) => {
          let S = Xe.size(v), I = v.length, O = ct("input", o, I), L = Wt("output", o, I), z = b.dataType === 6 ? b.getInt32Array()[0] : Number(b.getBigInt64Array()[0]), B = Xe.normalizeAxis(z, I), V = (q) => {
            let X = ` i32(${O.indicesGet("inputIndices", "uniforms.axis")}) `, ee = Ht("uniforms.input_shape", "uniforms.axis", I), ne = T.reverse ? X + (T.exclusive ? " + 1" : "") : "0", se = T.reverse ? ee : X + (T.exclusive ? "" : " + 1");
            return `
                ${q.registerUniform("outputSize", "u32").registerUniform("axis", "u32").declareVariables(O, L)}
                ${q.mainStart()}
                  ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
                  var inputIndices = ${L.offsetToIndices("global_idx")};
                  var sum = ${L.type.value}(0);
                  let first : i32 = ${ne};
                  let last : i32 = ${se};
                  for (var i : i32 = first; i < last; i++) {
                    ${O.indicesSet("inputIndices", "uniforms.axis", "u32(i)")};
                    sum = sum + ${O.getByIndices("inputIndices")};
                  }
                  ${L.setByOffset("global_idx", "sum")};
                }`;
          };
          return {
            name: "CumSum",
            shaderCache: {
              hint: T.cacheKey,
              inputDependencies: [
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: v,
                  dataType: o
                }
              ],
              dispatchGroup: {
                x: Math.ceil(S / 64)
              },
              programUniforms: [
                {
                  type: 12,
                  data: S
                },
                {
                  type: 12,
                  data: B
                },
                ...kt(v, v)
              ]
            }),
            getShaderSource: V
          };
        }, ei = (o, v) => {
          let b = o.inputs[0].dims, T = o.inputs[0].dataType, S = o.inputs[1];
          o.compute(jl(T, b, S, v), {
            inputs: [
              0
            ]
          });
        }, Vl = (o) => {
          let v = o.exclusive === 1, b = o.reverse === 1;
          return Pt({
            exclusive: v,
            reverse: b
          });
        };
      }), ti, Ul, Gl, ks, Wl, Ed = g(() => {
        Kt(), ce(), Qt(), fn(), ti = (o) => {
          if (!o || o.length !== 1)
            throw new Error("DepthToSpace requires 1 input.");
          if (o[0].dims.length !== 4)
            throw new Error("DepthToSpace requires 4D input.");
        }, Ul = (o, v, b, T) => {
          let S = [];
          S.push(`fn perm(i: ${T.type.indices}) -> ${b.type.indices} {
    var a: ${b.type.indices};`);
          for (let I = 0; I < v; ++I)
            S.push(b.indicesSet("a", o[I], `i[${I}]`));
          return S.push("return a;}"), S.join(`
`);
        }, Gl = (o, v) => {
          let b, T, S, I, O, L, z = v.format === "NHWC", B = v.blocksize, V = v.mode === "DCR";
          z ? ([b, T, S, I] = o.dims, O = V ? [
            b,
            T,
            S,
            B,
            B,
            I / B ** 2
          ] : [
            b,
            T,
            S,
            I / B ** 2,
            B,
            B
          ], L = V ? [
            0,
            1,
            3,
            2,
            4,
            5
          ] : [
            0,
            1,
            4,
            2,
            5,
            3
          ]) : ([b, T, S, I] = [
            o.dims[0],
            o.dims[2],
            o.dims[3],
            o.dims[1]
          ], O = V ? [
            b,
            B,
            B,
            I / B ** 2,
            T,
            S
          ] : [
            b,
            I / B ** 2,
            B,
            B,
            T,
            S
          ], L = V ? [
            0,
            3,
            4,
            1,
            5,
            2
          ] : [
            0,
            1,
            4,
            2,
            5,
            3
          ]);
          let q = o.reshape(O), X = q.dims.length, ee = o.dataType, ne = ct("a", ee, X), se = Wt("output", ee, X), ge = (ue) => `
  ${ue.registerUniform("output_size", "u32").declareVariables(ne, se)}

  ${Ul(L, X, ne, se)}

  ${ue.mainStart()}
    ${ue.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let indices = ${se.offsetToIndices("global_idx")};
    let aIndices = perm(indices);

    ${se.setByOffset("global_idx", ne.getByIndices("aIndices"))}
  }`;
          return {
            name: "DepthToSpace",
            shaderCache: {
              hint: `${o.dims};${v.blocksize};${v.mode}`,
              inputDependencies: [
                "rank"
              ]
            },
            getRunData: (ue) => {
              let re = z ? [
                b,
                T * B,
                S * B,
                I / B ** 2
              ] : [
                b,
                I / B ** 2,
                T * B,
                S * B
              ], Te = Xe.size(re), we = q.dims, Se = Xe.sortBasedOnPerm(we, L);
              return {
                outputs: [
                  {
                    dims: re,
                    dataType: ue[0].dataType
                  }
                ],
                dispatchGroup: {
                  x: Math.ceil(Te / 64)
                },
                programUniforms: [
                  {
                    type: 12,
                    data: Te
                  },
                  ...kt(we, Se)
                ]
              };
            },
            getShaderSource: ge
          };
        }, ks = (o, v) => {
          ti(o.inputs), o.compute(Gl(o.inputs[0], v));
        }, Wl = (o) => Pt({
          blocksize: o.blocksize,
          mode: o.mode,
          format: o.format
        });
      }), As, Gr, ni, ql, ri, Hl, Kl, si, Yl, Cs, Xl, Pd = g(() => {
        Kt(), ce(), Qt(), fn(), As = "[a-zA-Z]|\\.\\.\\.", Gr = "(" + As + ")+", ni = "^" + Gr + "$", ql = "(" + Gr + ",)*" + Gr, ri = "^" + ql + "$", Hl = class {
          constructor(o = -1) {
            this.symbolToIndices = /* @__PURE__ */ new Map(), this.inputIndex = o;
          }
          addSymbol(o, v) {
            let b = this.symbolToIndices.get(o);
            b === void 0 ? b = [
              v
            ] : b.push(v), this.symbolToIndices.set(o, b);
          }
        }, Kl = class {
          constructor(o, v) {
            this.equation = v, this.hasEllipsis = false, this.symbolToInfo = /* @__PURE__ */ new Map(), this.lhs = new Array(), this.outputDims = [];
            let [b, T] = v.includes("->") ? v.split("->", 2) : [
              v,
              ""
            ];
            if (!b.match(RegExp(ri)))
              throw new Error("Invalid LHS term");
            if (b.split(",").forEach((S, I) => {
              let O = o[I].dims.slice();
              if (!S.match(RegExp(ni)))
                throw new Error("Invalid LHS term");
              let L = this.processTerm(S, true, O, I);
              this.lhs.push(L);
            }), T === "")
              T += [
                ...this.symbolToInfo.entries()
              ].filter(([S, I]) => I.count === 1 || S === "...").map(([S]) => S).join("");
            else if (!T.match(RegExp(Gr)))
              throw new Error("Invalid RHS");
            T.match(RegExp(As, "g"))?.forEach((S) => {
              if (S === "...")
                this.outputDims = this.outputDims.concat(this.ellipsisDims);
              else {
                let I = this.symbolToInfo.get(S);
                if (I === void 0)
                  throw new Error("Invalid RHS symbol");
                this.outputDims.push(I.dimValue);
              }
            }), this.rhs = this.processTerm(T, false, this.outputDims);
          }
          addSymbol(o, v, b) {
            let T = this.symbolToInfo.get(o);
            if (T !== void 0) {
              if (T.dimValue !== v && T.count !== 1)
                throw new Error("Dimension mismatch");
              T.count++, T.inputIndices.push(b);
            } else
              T = {
                count: 1,
                dimValue: v,
                inputIndices: [
                  b
                ]
              };
            this.symbolToInfo.set(o, T);
          }
          processTerm(o, v, b, T = -1) {
            let S = b.length, I = false, O = [], L = 0;
            if (!o.match(RegExp(ni)) && !v && o !== "")
              throw new Error("Invalid LHS term");
            let z = o.match(RegExp(As, "g")), B = new Hl(T);
            return z?.forEach((V, q) => {
              if (V === "...") {
                if (I)
                  throw new Error("Only one ellipsis is allowed per input term");
                I = true;
                let X = S - z.length + 1;
                if (X < 0)
                  throw new Error("Ellipsis out of bounds");
                if (O = b.slice(L, L + X), this.hasEllipsis) {
                  if (this.ellipsisDims.length !== O.length || this.ellipsisDims.toString() !== O.toString())
                    throw new Error("Ellipsis dimensions mismatch");
                } else if (v)
                  this.hasEllipsis = true, this.ellipsisDims = O;
                else
                  throw new Error("Ellipsis must be specified in the LHS");
                for (let ee = 0; ee < O.length; ee++) {
                  let ne = String.fromCharCode(48 + ee);
                  B.addSymbol(ne, q + ee), this.addSymbol(ne, b[L++], T);
                }
              } else
                B.addSymbol(V, q + (this.hasEllipsis ? this.ellipsisDims.length - 1 : 0)), this.addSymbol(V, b[L++], T);
            }), B;
          }
        }, si = (o) => o + "_max", Yl = (o, v, b, T) => {
          let S = o.map((B) => B.length).map((B, V) => ct(`input${V}`, v, B)), I = Xe.size(T), O = Wt("output", v, T.length), L = [
            ...b.symbolToInfo.keys()
          ].filter((B) => !b.rhs.symbolToIndices.has(B)), z = (B) => {
            let V = [], q = "var prod = 1.0;", X = "var sum = 0.0;", ee = "sum += prod;", ne = [], se = [], ge = [], ue = [], re = b.symbolToInfo.size === b.rhs.symbolToIndices.size;
            b.symbolToInfo.forEach((we, Se) => {
              if (b.rhs.symbolToIndices.has(Se)) {
                let ze = b.rhs.symbolToIndices.get(Se)?.[0];
                ze !== void 0 && b.lhs.forEach((Le, nt) => {
                  if (we.inputIndices.includes(nt)) {
                    let st = Le.symbolToIndices.get(Se);
                    if (st === void 0)
                      throw new Error("Invalid symbol error");
                    st.forEach((Mt) => {
                      V.push(`${S[nt].indicesSet(`input${nt}Indices`, Mt, O.indicesGet("outputIndices", ze))}`);
                    });
                  }
                });
              } else
                b.lhs.forEach((ze, Le) => {
                  if (we.inputIndices.includes(Le)) {
                    let nt = ze.symbolToIndices.get(Se);
                    if (nt === void 0)
                      throw new Error("Invalid symbol error");
                    nt.forEach((st) => {
                      ne.push(`${S[Le].indicesSet(`input${Le}Indices`, st, `${Se}`)}`);
                    }), ue.push(`prod *= ${S[Le].getByIndices(`input${Le}Indices`)};`);
                  }
                }), se.push(`for(var ${Se}: u32 = 0; ${Se} < uniforms.${si(Se)}; ${Se}++) {`), ge.push("}");
            });
            let Te = re ? [
              ...V,
              `let sum = ${S.map((we, Se) => we.getByIndices(`input${Se}Indices`)).join(" * ")};`
            ] : [
              ...V,
              X,
              ...se,
              ...ne,
              q,
              ...ue,
              ee,
              ...ge
            ];
            return `
            ${B.registerUniforms(L.map((we) => ({
              name: `${si(we)}`,
              type: "u32"
            }))).registerUniform("outputSize", "u32").declareVariables(...S, O)}

            ${B.mainStart()}
            ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
            var outputIndices = ${O.offsetToIndices("global_idx")};
            ${S.map((we, Se) => `var input${Se}Indices: ${S[Se].type.indices};`).join(`
`)}
            ${Te.join(`
`)};
            ${O.setByOffset("global_idx", "sum")};
          }`;
          };
          return {
            name: "Einsum",
            shaderCache: {
              hint: b.equation,
              inputDependencies: o.map(() => "rank")
            },
            getRunData: () => {
              let B = L.filter((q) => b.symbolToInfo.has(q)).map((q) => ({
                type: 12,
                data: b.symbolToInfo.get(q)?.dimValue || 0
              }));
              B.push({
                type: 12,
                data: I
              });
              let V = o.map((q, X) => [
                ...kt(q)
              ]).reduce((q, X) => q.concat(X), B);
              return V.push(...kt(T)), {
                outputs: [
                  {
                    dims: T,
                    dataType: v
                  }
                ],
                dispatchGroup: {
                  x: Math.ceil(I / 64)
                },
                programUniforms: V
              };
            },
            getShaderSource: z
          };
        }, Cs = (o, v) => {
          let b = new Kl(o.inputs, v.equation), T = b.outputDims, S = o.inputs.map((I, O) => I.dims);
          o.compute(Yl(S, o.inputs[0].dataType, b, T));
        }, Xl = (o) => {
          let v = o.equation.replace(/\s+/g, "");
          return Pt({
            equation: v
          });
        };
      }), Ql, oi, Jl, Zl, ec, Sd = g(() => {
        Kt(), ce(), fn(), Ql = (o) => {
          if (!o || o.length !== 2)
            throw new Error("Expand requires 2 input.");
          let v = o[0].dims, b = Array.from(o[1].getBigInt64Array(), Number), T = b.length < v.length ? 0 : b.length - v.length, S = v.length < b.length ? 0 : v.length - b.length;
          for (; T < b.length && S < v.length; ++T, ++S)
            if (b[T] !== v[S] && b[T] !== 1 && v[S] !== 1)
              throw new Error("Expand requires shape to be broadcastable to input");
        }, oi = (o, v) => {
          let b = o.length - v.length, T = [];
          for (let S = 0; S < b; ++S)
            T.push(o[S]);
          for (let S = 0; S < v.length; ++S)
            T.push(v[S] === 1 ? o[S + b] : v[S]);
          return T;
        }, Jl = (o, v) => o.length > v.length ? oi(o, v) : oi(v, o), Zl = (o) => {
          let v = o[0].dims, b = Array.from(o[1].getBigInt64Array(), Number), T = Jl(v, b), S = o[0].dataType, I = S === 9 || Xe.size(v) === 1, O = S === 9 || v.length > 0 && v[v.length - 1] % 4 === 0 ? 4 : 1, L = I || T.length > 0 && T[T.length - 1] % 4 === 0 ? 4 : 1, z = Math.ceil(Xe.size(T) / L), B = (q) => {
            let X = ct("input", S, v.length, O), ee = Wt("output", S, T.length, L), ne;
            if (S === 9) {
              let se = (ge, ue, re = "") => `
          let outputIndices${ue} = ${ee.offsetToIndices(`outputOffset + ${ue}u`)};
          let offset${ue} = ${X.broadcastedIndicesToOffset(`outputIndices${ue}`, ee)};
          let index${ue} = offset${ue} / 4u;
          let component${ue} = offset${ue} % 4u;
          ${ge}[${ue}] = ${re}(${X.getByOffset(`index${ue}`)}[component${ue}]);
        `;
              ne = `
        let outputOffset = global_idx * ${L};
        var data = vec4<u32>(0);
        ${se("data", 0, "u32")}
        ${se("data", 1, "u32")}
        ${se("data", 2, "u32")}
        ${se("data", 3, "u32")}
        ${ee.setByOffset("global_idx", "data")}
      }`;
            } else
              ne = `
        let outputIndices = ${ee.offsetToIndices(`global_idx * ${L}`)};
        let inputOffset = ${X.broadcastedIndicesToOffset("outputIndices", ee)};
        let data = ${ee.type.value}(${X.getByOffset(`inputOffset / ${O}`)});
        ${ee.setByOffset("global_idx", "data")}
      }`;
            return `
    ${q.registerUniform("vec_size", "u32").declareVariables(X, ee)}
    ${q.mainStart()}
    ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
    ${ne}`;
          }, V = [
            {
              type: 12,
              data: z
            },
            ...kt(v, T)
          ];
          return {
            name: "Expand",
            shaderCache: {
              hint: `${T.length};${O}${L}`,
              inputDependencies: [
                "rank"
              ]
            },
            getShaderSource: B,
            getRunData: () => ({
              outputs: [
                {
                  dims: T,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(z / 64)
              },
              programUniforms: V
            })
          };
        }, ec = (o) => {
          Ql(o.inputs), o.compute(Zl(o.inputs), {
            inputs: [
              0
            ]
          });
        };
      }), tc, ii, kd = g(() => {
        Kt(), ce(), fn(), ys(), tc = (o) => {
          let v = o[0].dataType, b = Xe.size(o[0].dims), T = Xe.size(o[1].dims), S = T % 4 === 0, I = (O) => {
            let L = ct("x", v, [
              1
            ], 4), z = ct("bias", v, [
              1
            ], 4), B = Wt("y", v, [
              1
            ], 4), V = [
              {
                name: "output_vec_size",
                type: "u32"
              },
              {
                name: "bias_size",
                type: "u32"
              }
            ], q = (ee) => `
      let bias${ee}_offset: u32 = (global_idx * 4 + ${ee}) % uniforms.bias_size;
      let bias${ee} = ${z.getByOffset(`bias${ee}_offset / 4`)}[bias${ee}_offset % 4];`, X = S ? `
      let bias = ${z.getByOffset("global_idx % (uniforms.bias_size / 4)")};` : `${q(0)}${q(1)}${q(2)}${q(3)}
      let bias = ${L.type.value}(bias0, bias1, bias2, bias3);`;
            return `${O.registerUniforms(V).declareVariables(L, z, B)}

    ${ko(sn(v))}

    ${O.mainStart(Vn)}
      ${O.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_vec_size")}

      let x = ${L.getByOffset("global_idx")};
      ${X}
      let x_in = x + bias;
      ${B.setByOffset("global_idx", Ao("x_in"))}
    }`;
          };
          return {
            name: "FastGeluWithBias",
            shaderCache: {
              hint: `${S}`,
              inputDependencies: [
                "type",
                "type"
              ]
            },
            getShaderSource: I,
            getRunData: (O) => ({
              outputs: [
                {
                  dims: O[0].dims,
                  dataType: O[0].dataType
                }
              ],
              programUniforms: [
                {
                  type: 12,
                  data: Math.ceil(b / 4)
                },
                {
                  type: 12,
                  data: T
                }
              ],
              dispatchGroup: {
                x: Math.ceil(b / Vn / 4)
              }
            })
          };
        }, ii = (o) => {
          o.inputs.length < 2 || Xe.size(o.inputs[1].dims) === 0 ? Co(o) : o.compute(tc(o.inputs));
        };
      }), nc, ai, rc, sc, Ad = g(() => {
        Kt(), ce(), Qt(), fn(), nc = (o) => {
          if (!o || o.length !== 2)
            throw new Error("Gather requires 2 inputs.");
        }, ai = (o, v) => {
          let b = o[0].dims, T = o[1].dims, S = b.length, I = Xe.normalizeAxis(v.axis, S), O = b.slice(0);
          O.splice(I, 1, ...T);
          let L = b[I], z = o[0].dataType === 9 ? 4 : 1, B = Math.ceil(Xe.size(O) / z), V = [
            {
              type: 12,
              data: B
            },
            {
              type: 6,
              data: L
            },
            {
              type: 12,
              data: I
            },
            ...kt(o[0].dims, o[1].dims, O)
          ], q = (X) => {
            let ee = ct("data", o[0].dataType, o[0].dims.length, z), ne = ct("inputIndices", o[1].dataType, o[1].dims.length), se = Wt("output", o[0].dataType, O.length, z), ge = (re) => {
              let Te = T.length, we = `var indicesIndices${re}  = ${ne.type.indices}(0);`;
              for (let Se = 0; Se < Te; Se++)
                we += `${Te > 1 ? `indicesIndices${re}[${Se}]` : `indicesIndices${re}`} = ${O.length > 1 ? `outputIndices${re}[uniforms.axis + ${Se}]` : `outputIndices${re}`};`;
              we += `
          var idx${re} = ${ne.getByIndices(`indicesIndices${re}`)};
          if (idx${re} < 0) {
            idx${re} = idx${re} + uniforms.axisDimLimit;
          }
          var dataIndices${re} : ${ee.type.indices};
        `;
              for (let Se = 0, ze = 0; Se < S; Se++)
                Se === I ? (we += `${S > 1 ? `dataIndices${re}[${Se}]` : `dataIndices${re}`} = u32(idx${re});`, ze += Te) : (we += `${S > 1 ? `dataIndices${re}[${Se}]` : `dataIndices${re}`} = ${O.length > 1 ? `outputIndices${re}[${ze}]` : `outputIndices${re}`};`, ze++);
              return we;
            }, ue;
            if (o[0].dataType === 9) {
              let re = (Te, we, Se = "") => `
          let outputIndices${we} = ${se.offsetToIndices(`outputOffset + ${we}u`)};
          ${ge(we)};
          let offset${we} = ${ee.indicesToOffset(`dataIndices${we}`)};
          let index${we} = offset${we} / 4u;
          let component${we} = offset${we} % 4u;
          ${Te}[${we}] = ${Se}(${ee.getByOffset(`index${we}`)}[component${we}]);
        `;
              ue = `
        let outputOffset = global_idx * ${z};
        var value = vec4<u32>(0);
        ${re("value", 0, "u32")}
        ${re("value", 1, "u32")}
        ${re("value", 2, "u32")}
        ${re("value", 3, "u32")}
        ${se.setByOffset("global_idx", "value")}
      `;
            } else
              ue = `
      let outputIndices = ${se.offsetToIndices("global_idx")};
      ${ge("")};
      let value = ${ee.getByIndices("dataIndices")};
      ${se.setByOffset("global_idx", "value")};
      `;
            return `
      ${X.registerUniform("outputSize", "u32").registerUniform("axisDimLimit", "i32").registerUniform("axis", "u32").declareVariables(ee, ne, se)}
      ${X.mainStart()}
        ${X.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        ${ue}
      }`;
          };
          return {
            name: "Gather",
            shaderCache: {
              hint: v.cacheKey,
              inputDependencies: [
                "rank",
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: O,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(B / 64)
              },
              programUniforms: V
            }),
            getShaderSource: q
          };
        }, rc = (o) => Pt({
          axis: o.axis
        }), sc = (o, v) => {
          let b = o.inputs;
          nc(b), o.compute(ai(o.inputs, v));
        };
      }), oc, li, ic, Cd = g(() => {
        Kt(), ce(), fn(), oc = (o, v, b, T, S, I, O, L, z) => {
          let B = [
            {
              type: 12,
              data: I
            },
            {
              type: 12,
              data: T
            },
            {
              type: 12,
              data: S
            },
            {
              type: 12,
              data: b
            },
            {
              type: 12,
              data: O
            },
            {
              type: 12,
              data: L
            },
            {
              type: 12,
              data: z
            }
          ], V = [
            I
          ];
          B.push(...kt(v.dims, V));
          let q = (X) => {
            let ee = ct("indices_data", v.dataType, v.dims.length), ne = Wt("input_slice_offsets_data", 12, 1, 1), se = [
              ee,
              ne
            ], ge = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "batch_dims",
                type: "u32"
              },
              {
                name: "input_dims",
                type: "u32",
                length: S.length
              },
              {
                name: "sizes_from_slice_dims_data",
                type: "u32",
                length: b.length
              },
              {
                name: "num_slices_per_batch",
                type: "u32"
              },
              {
                name: "input_batch_stride",
                type: "u32"
              },
              {
                name: "num_slice_dims",
                type: "u32"
              }
            ];
            return `
  ${X.registerUniforms(ge).declareVariables(...se)}
  ${X.mainStart()}
    ${X.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let batch_idx = global_idx / uniforms.num_slices_per_batch;
    let base_offset = batch_idx * uniforms.input_batch_stride;

    let slice_indices_base_offset = global_idx * uniforms.num_slice_dims;
    var relative_slice_offset = 0;
    for (var dim_idx = 0u; dim_idx < uniforms.num_slice_dims; dim_idx ++) {
      var index = i32(indices_data[dim_idx + slice_indices_base_offset].x);
      let input_dim_idx = uniforms.batch_dims + dim_idx;
      if (index < 0) {
        ${S.length === 1 ? "index += i32(uniforms.input_dims);" : "index += i32(uniforms.input_dims[input_dim_idx]);"}
      }
      ${b.length === 1 ? "relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data);" : "relative_slice_offset += index * i32(uniforms.sizes_from_slice_dims_data[dim_idx]);"}
    }

    input_slice_offsets_data[global_idx] =  base_offset + u32(relative_slice_offset);
  }`;
          };
          return o.compute({
            name: "computeSliceOffsets",
            shaderCache: {
              hint: `${S.length}_${b.length}`,
              inputDependencies: [
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: V,
                  dataType: o.inputs[1].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(I / 64)
              },
              programUniforms: B
            }),
            getShaderSource: q
          }, {
            inputs: [
              v
            ],
            outputs: [
              -1
            ]
          })[0];
        }, li = (o, v) => {
          let b = o.inputs, T = b[0].dims, S = b[0].dataType, I = b[1].dims, O = I[I.length - 1], L = Xe.sizeToDimension(I, I.length - 1), z = Xe.sizeFromDimension(T, v.batchDims + O), B = Xe.sizeToDimension(T, v.batchDims), V = Xe.sizeFromDimension(T, v.batchDims), q = L / B, X = new Array(O), ee = z;
          for (let we = 0; we < O; ++we)
            X[O - 1 - we] = ee, ee *= T[v.batchDims + O - 1 - we];
          let ne = oc(o, b[1], X, v.batchDims, T, L, q, V, O), se = v.batchDims + O;
          if (se > T.length)
            throw new Error("last dimension of indices must not be larger than rank of input tensor");
          let ge = I.slice(0, -1).concat(T.slice(se)), ue = Xe.size(ge), re = [
            {
              type: 12,
              data: ue
            },
            {
              type: 12,
              data: z
            },
            ...kt(b[0].dims, ne.dims, ge)
          ], Te = (we) => {
            let Se = ct("data", b[0].dataType, b[0].dims.length), ze = ct("slice_offsets", 12, ne.dims.length), Le = Wt("output", b[0].dataType, ge.length);
            return `
          ${we.registerUniform("output_size", "u32").registerUniform("slice_size", "u32").declareVariables(Se, ze, Le)}
            ${we.mainStart()}
            ${we.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let slice_offset = slice_offsets[global_idx / uniforms.slice_size];
          output[global_idx] = data[u32(slice_offset) + global_idx % uniforms.slice_size];
        }`;
          };
          o.compute({
            name: "GatherND",
            shaderCache: {
              hint: v.cacheKey,
              inputDependencies: [
                "rank",
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: ge,
                  dataType: S
                }
              ],
              dispatchGroup: {
                x: Math.ceil(ue / 64)
              },
              programUniforms: re
            }),
            getShaderSource: Te
          }, {
            inputs: [
              b[0],
              ne
            ]
          });
        }, ic = (o) => ({
          batchDims: o.batch_dims,
          cacheKey: ""
        });
      }), ci, ac, lc, ui, Id = g(() => {
        Kt(), ce(), Qt(), fn(), ci = (o, v) => {
          if (o.length < 3 || o.length > 4)
            throw new Error("GatherBlockQuantized requires 3 or 4 inputs.");
          let b = Xe.normalizeAxis(v.quantizeAxis, o[0].dims.length), T = v.blockSize, S = o[0], I = o[2], O = o.length === 4 ? o[3] : void 0;
          if (I.dims.length !== S.dims.length || !S.dims.map((L, z) => z === b ? Math.ceil(L / T) === I.dims[z] : L === I.dims[z]).reduce((L, z) => L && z, true))
            throw new Error("Scales must have the same rank as the input tensor and the dims should match except on gatherAxis.");
          if (O) {
            if (O.dataType !== S.dataType)
              throw new Error("Zero point must have the same data type as the input tensor.");
            if (O.dims.length !== I.dims.length || !O.dims.map((L, z) => L === I.dims[z]).reduce((L, z) => L && z, true))
              throw new Error("Zero point must have the same rank as the input tensor and the dims should match except on quantizeAxis.");
          }
        }, ac = (o, v) => {
          let b = o[0].dims, T = o[1].dims, S = b.length, I = Xe.normalizeAxis(v.gatherAxis, S), O = Xe.normalizeAxis(v.quantizeAxis, S), L = b.slice(0);
          L.splice(I, 1, ...T);
          let z = Xe.size(L), B = o[2].dataType, V = o[0].dataType === 22, q = [
            {
              type: 12,
              data: z
            },
            {
              type: 12,
              data: O
            },
            {
              type: 12,
              data: I
            },
            {
              type: 12,
              data: v.blockSize
            },
            ...kt(...o.map((ee, ne) => ee.dims), L)
          ], X = (ee) => {
            let ne = ct("data", o[0].dataType, o[0].dims.length), se = ct("inputIndices", o[1].dataType, o[1].dims.length), ge = ct("scales", o[2].dataType, o[2].dims.length), ue = o.length > 3 ? ct("zeroPoint", o[3].dataType, o[3].dims.length) : void 0, re = Wt("output", B, L.length), Te = [
              ne,
              se,
              ge
            ];
            ue && Te.push(ue);
            let we = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "quantize_axis",
                type: "u32"
              },
              {
                name: "gather_axis",
                type: "u32"
              },
              {
                name: "block_size",
                type: "u32"
              }
            ];
            return `
        ${ee.registerUniforms(we).declareVariables(...Te, re)}
        ${ee.mainStart()}
        let output_indices = ${re.offsetToIndices("global_idx")};
        var indices_indices = ${se.type.indices}(0);
        ${T.length > 1 ? `
          for (var i: u32 = 0; i < ${T.length}; i++) {
            let index = ${re.indicesGet("output_indices", "uniforms.gather_axis + i")};
            ${se.indicesSet("indices_indices", "i", "index")};
          }` : `indices_indices = ${re.indicesGet("output_indices", "uniforms.gather_axis")};`};
        var data_indices = ${ne.type.indices}(0);
        for (var i: u32 = 0; i < uniforms.gather_axis; i++) {
          let index = ${re.indicesGet("output_indices", "i")};
          ${ne.indicesSet("data_indices", "i", "index")};
        }
        var index_from_indices = ${se.getByIndices("indices_indices")};
        if (index_from_indices < 0) {
          index_from_indices += ${b[I]};
        }
        ${ne.indicesSet("data_indices", "uniforms.gather_axis", "u32(index_from_indices)")};
        for (var i = uniforms.gather_axis + 1; i < ${L.length}; i++) {
          let index = ${re.indicesGet("output_indices", `i + ${T.length} - 1`)};
          ${ne.indicesSet("data_indices", "i", "index")};
        }
        let data_offset = ${ne.indicesToOffset("data_indices")};
        let data_index = data_offset % 8;
        // Convert 4-bit packed data to 8-bit packed data.
        let packed_4bit_quantized_data = ${ne.getByOffset("data_offset / 8")};
        let packed_8bit_quantized_data = (packed_4bit_quantized_data >> (4 * (data_index % 2))) & 0x0f0f0f0f;
        let quantized_data_vec = ${V ? "unpack4xI8" : "unpack4xU8"}(u32(packed_8bit_quantized_data));
        let quantized_data = quantized_data_vec[data_index / 2];
        var scale_indices = data_indices;
        let quantize_axis_index = ${ge.indicesGet("data_indices", "uniforms.quantize_axis")} / uniforms.block_size;
        ${ge.indicesSet("scale_indices", "uniforms.quantize_axis", "quantize_axis_index")};
        var scale = ${ge.getByIndices("scale_indices")};
        ${ue ? `
              let zero_point_indices = scale_indices;
              let zero_point_offset = ${ue.indicesToOffset("zero_point_indices")};
              let zero_point_index = zero_point_offset % 8;
              let packed_4bit_zero_points = ${ue.getByOffset("zero_point_offset / 8")};
              let packed_8bit_zero_points = (packed_4bit_zero_points >> (4 * (zero_point_index % 2))) & 0x0f0f0f0f;
              let zero_point_vec = ${V ? "unpack4xI8" : "unpack4xU8"}(u32(packed_8bit_zero_points));
              let zero_point = zero_point_vec[zero_point_index / 2];` : "var zero_point = 0"};
        let dequantized_data = ${sn(B)}(quantized_data - zero_point) * scale;
        ${re.setByOffset("global_idx", "dequantized_data")};
    }`;
          };
          return {
            name: "GatherBlockQuantized",
            shaderCache: {
              hint: `${v.cacheKey};${o.filter((ee, ne) => ne !== 1).map((ee) => ee.dims.join("_")).join(";")}`,
              inputDependencies: Array.from({
                length: o.length
              }, (ee, ne) => "rank")
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: L,
                  dataType: B
                }
              ],
              dispatchGroup: {
                x: Math.ceil(z / 64)
              },
              programUniforms: q
            }),
            getShaderSource: X
          };
        }, lc = (o, v) => {
          let b = o.inputs;
          ci(b, v), o.compute(ac(o.inputs, v));
        }, ui = (o) => Pt({
          blockSize: o.blockSize,
          gatherAxis: o.gatherAxis,
          quantizeAxis: o.quantizeAxis
        });
      }), cc, di, uc, dc, Od = g(() => {
        Kt(), ce(), Qt(), fn(), cc = (o) => {
          if (!o || o.length !== 2)
            throw new Error("GatherElements requires 2 inputs.");
          if (o[0].dims.length < 1)
            throw new Error("GatherElements requires that the data input be rank >= 1.");
          if (o[0].dims.length !== o[1].dims.length)
            throw new Error(`GatherElements requires that the data input and
                     indices input tensors be of same rank.`);
        }, di = (o, v) => {
          let b = o[0].dims, T = o[0].dataType, S = b.length, I = o[1].dims, O = o[1].dataType, L = Xe.normalizeAxis(v.axis, S), z = b[L], B = I.slice(0), V = Xe.size(B), q = ct("input", T, S), X = ct("indicesInput", O, I.length), ee = Wt("output", T, B.length), ne = [
            {
              type: 12,
              data: V
            },
            {
              type: 6,
              data: z
            },
            {
              type: 12,
              data: L
            }
          ];
          return ne.push(...kt(b, I, B)), {
            name: "GatherElements",
            shaderCache: {
              inputDependencies: [
                "rank",
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: B,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(V / 64)
              },
              programUniforms: ne
            }),
            getShaderSource: (se) => `
      ${se.registerUniform("outputSize", "u32").registerUniform("axisDimLimit", "i32").registerUniform("axis", "u32").declareVariables(q, X, ee)}
      ${se.mainStart()}
      ${se.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

      let outputIndices = ${ee.offsetToIndices("global_idx")};

      var idx = ${X.getByOffset("global_idx")};
      if (idx < 0) {
        idx = idx + uniforms.axisDimLimit;
      }
      var inputIndices = ${q.type.indices}(outputIndices);
      ${q.indicesSet("inputIndices", "uniforms.axis", "u32(idx)")};
      let value = ${q.getByIndices("inputIndices")};

      ${ee.setByOffset("global_idx", "value")};
  }`
          };
        }, uc = (o) => Pt({
          axis: o.axis
        }), dc = (o, v) => {
          let b = o.inputs;
          cc(b), o.compute(di(o.inputs, v));
        };
      }), pc, hc, fc, _c, $d = g(() => {
        Kt(), ce(), fn(), pc = (o) => {
          if (!o)
            throw new Error("Input is missing");
          if (o.length < 2 || o.length > 3)
            throw new Error("Invaid input number.");
          if (o.length === 3 && o[2].dims.length > 2)
            throw new Error("Invalid input shape of C");
          if (o[0].dataType !== o[1].dataType || o.length === 3 && o[0].dataType !== o[2].dataType)
            throw new Error("Input types are mismatched");
        }, hc = (o, v) => {
          let b = o[0].dims.slice(), T = o[1].dims.slice(), [S, I, O] = Ir.getShapeOfGemmResult(b, v.transA, T, v.transB, o.length === 3 ? o[2].dims : void 0), L = [
            S,
            I
          ];
          if (!L)
            throw new Error("Can't use gemm on the given tensors");
          let z = 16, B = Math.ceil(I / z), V = Math.ceil(S / z), q = true, X = Xe.size(L), ee = [
            {
              type: 12,
              data: q ? B : X
            },
            {
              type: 12,
              data: S
            },
            {
              type: 12,
              data: I
            },
            {
              type: 12,
              data: O
            },
            {
              type: 1,
              data: v.alpha
            },
            {
              type: 1,
              data: v.beta
            }
          ], ne = [
            "type",
            "type"
          ];
          o.length === 3 && (ee.push(...kt(o[2].dims)), ne.push("rank")), ee.push(...kt(L));
          let se = (ue) => {
            let re = "";
            v.transA && v.transB ? re = "value += a[k * uniforms.M + m] * b[n * uniforms.K + k];" : v.transA && !v.transB ? re = "value += a[k * uniforms.M + m] * b[k * uniforms.N + n];" : !v.transA && v.transB ? re = "value += a[m * uniforms.K + k] * b[n * uniforms.K + k];" : !v.transA && !v.transB && (re = "value += a[m * uniforms.K + k] * b[k * uniforms.N + n];");
            let Te = v.alpha === 1 ? "" : "value *= uniforms.alpha;", we = ct("a", o[0].dataType, o[0].dims), Se = ct("b", o[1].dataType, o[1].dims), ze = we.type.value, Le = null, nt = [
              we,
              Se
            ];
            o.length === 3 && (Le = ct("c", o[2].dataType, o[2].dims.length), nt.push(Le));
            let st = Wt("output", o[0].dataType, L.length);
            nt.push(st);
            let Mt = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "M",
                type: "u32"
              },
              {
                name: "N",
                type: "u32"
              },
              {
                name: "K",
                type: "u32"
              },
              {
                name: "alpha",
                type: "f32"
              },
              {
                name: "beta",
                type: "f32"
              }
            ];
            return `
  ${ue.registerUniforms(Mt).declareVariables(...nt)}

  ${ue.mainStart()}
    ${ue.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

    let m = global_idx / uniforms.N;
    let n = global_idx % uniforms.N;

    var value = ${ze}(0);
    for (var k: u32 = 0u; k < uniforms.K; k++) {
      ${re}
    }

    ${Te}
    ${Le != null ? `let cOffset = ${Le.broadcastedIndicesToOffset("vec2(m, n)", st)}; value += ${ze}(uniforms.beta) * ${Le.getByOffset("cOffset")};` : ""}
    output[global_idx] = value;
  }`;
          }, ge = (ue) => {
            let re = ct("a", o[0].dataType, o[0].dims), Te = ct("b", o[1].dataType, o[1].dims), we = null, Se = [
              re,
              Te
            ];
            o.length === 3 && (we = ct("c", o[2].dataType, o[2].dims.length), Se.push(we));
            let ze = Wt("output", o[0].dataType, L.length);
            Se.push(ze);
            let Le = [
              {
                name: "num_tile_n",
                type: "u32"
              },
              {
                name: "M",
                type: "u32"
              },
              {
                name: "N",
                type: "u32"
              },
              {
                name: "K",
                type: "u32"
              },
              {
                name: "alpha",
                type: "f32"
              },
              {
                name: "beta",
                type: "f32"
              }
            ], nt = "", st = "";
            v.transA && v.transB ? (st = `
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${re.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${Te.type.value}(0);
      }
      `, nt = "value += tile_a[k][local_id.y] * tile_b[local_id.x][k];") : v.transA && !v.transB ? (st = `
      var col = tile_row_start + local_id.x;
      var row = k_start + local_id.y;
      if (col < uniforms.M && row < uniforms.K) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.M + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${re.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${Te.type.value}(0);
      }
      `, nt = "value += tile_a[k][local_id.y] * tile_b[k][local_id.x];") : !v.transA && v.transB ? (st = `
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${re.type.value}(0);
      }

      col = k_start + local_id.x;
      row = tile_col_start + local_id.y;
      if (col < uniforms.K && row < uniforms.N) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.K + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${Te.type.value}(0);
      }
      `, nt = "value += tile_a[local_id.y][k] * tile_b[local_id.x][k];") : !v.transA && !v.transB && (st = `
      var col = k_start + local_id.x;
      var row = tile_row_start + local_id.y;
      if (col < uniforms.K && row < uniforms.M) {
        tile_a[local_id.y][local_id.x] = a[row * uniforms.K + col];
      } else {
        tile_a[local_id.y][local_id.x] = ${re.type.value}(0);
      }

      col = tile_col_start + local_id.x;
      row = k_start + local_id.y;
      if (col < uniforms.N && row < uniforms.K) {
        tile_b[local_id.y][local_id.x] = b[row * uniforms.N + col];
      } else {
        tile_b[local_id.y][local_id.x] = ${Te.type.value}(0);
      }
      `, nt = "value += tile_a[local_id.y][k] * tile_b[k][local_id.x];");
            let Mt = v.alpha === 1 ? "" : "value *= uniforms.alpha;";
            return `
  ${ue.registerUniforms(Le).declareVariables(...Se)}
  var<workgroup> tile_a: array<array<${re.type.storage}, ${z}>, ${z}>;
  var<workgroup> tile_b: array<array<${Te.type.storage}, ${z}>, ${z}>;
  ${ue.mainStart([
              z,
              z,
              1
            ])}
    let tile_col_start = (workgroup_index % uniforms.num_tile_n) * ${z};
    let tile_row_start = (workgroup_index / uniforms.num_tile_n) * ${z};
    let num_tiles = (uniforms.K - 1) / ${z} + 1;
    var k_start = 0u;
    var value = ${ze.type.value}(0);
    for (var t: u32 = 0u; t < num_tiles; t++) {
      ${st}
      k_start = k_start + ${z};
      workgroupBarrier();

      for (var k: u32 = 0u; k < ${z}; k++) {
        ${nt}
      }
      workgroupBarrier();
    }

    ${Mt}
    let m = tile_row_start + local_id.y;
    let n = tile_col_start + local_id.x;
    ${we != null ? `let cOffset = ${we.broadcastedIndicesToOffset("vec2(m, n)", ze)}; value += ${ze.type.value}(uniforms.beta) * ${we.getByOffset("cOffset")};` : ""}
    if (m < uniforms.M && n < uniforms.N) {
      output[m * uniforms.N + n] = value;
    }
  }`;
          };
          return q ? {
            name: "GemmShared",
            shaderCache: {
              hint: `${v.cacheKey}`,
              inputDependencies: ne
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: L,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: B * V
              },
              programUniforms: ee
            }),
            getShaderSource: ge
          } : {
            name: "Gemm",
            shaderCache: {
              hint: `${v.cacheKey}`,
              inputDependencies: ne
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: L,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(X / 64)
              },
              programUniforms: ee
            }),
            getShaderSource: se
          };
        }, fc = (o) => {
          let v = o.transA, b = o.transB, T = o.alpha, S = o.beta;
          return {
            transA: v,
            transB: b,
            alpha: T,
            beta: S,
            cacheKey: `${o.transA};${o.transB};${o.alpha === 1}`
          };
        }, _c = (o, v) => {
          pc(o.inputs), o.compute(hc(o.inputs, v));
        };
      }), br, Er, Nr, Rr, mc, gc, bc, hi, wc, yc, fi, xc, vc, kr, Fd = g(() => {
        Kt(), ce(), Qt(), fn(), [br, Er, Nr, Rr] = [
          0,
          1,
          2,
          3
        ], mc = (o) => {
          if (o[0].dims.length !== 4)
            throw new Error("only 4-D tensor is supported.");
          if (o[0].dims.length !== o[1].dims.length)
            throw new Error("input dimensions must be equal to grid dimensions");
          if (o[0].dims.length - 2 !== o[1].dims[o[1].dims.length - 1])
            throw new Error(`last dimension of grid must be equal to ${o[0].dims.length - 2}`);
          if (o[0].dims[0] !== o[1].dims[0])
            throw new Error("grid batch size must match input batch size");
        }, gc = `
  fn gs_get_cubic_coeffs(x: f32) -> vec4<f32> {
    let cubic_alpha = -0.75f;
    let x_abs = abs(x);
    var coeffs: vec4<f32>;
    coeffs[0] = (((cubic_alpha * (x_abs + 1) - 5 * cubic_alpha) * (x_abs + 1) + 8 * cubic_alpha) * (x_abs + 1) - 4 * cubic_alpha);
    coeffs[1] = (((cubic_alpha + 2) * x_abs - (cubic_alpha + 3)) * x_abs * x_abs + 1);
    coeffs[2] = (((cubic_alpha + 2) * (1 - x_abs) - (cubic_alpha + 3)) * (1 - x_abs) * (1 - x_abs) + 1);
    coeffs[3] = (((cubic_alpha * (2 - x_abs) - 5 * cubic_alpha) * (2 - x_abs) + 8 * cubic_alpha) * (2 - x_abs) - 4 * cubic_alpha);
    return coeffs;
  }
`, bc = (o) => `
  fn gs_bicubic_interpolate(p: mat4x4<${o}>, x: f32, y: f32) -> ${o} {
    var v: vec4<f32>;
    var coeffs = gs_get_cubic_coeffs(x);
    for (var i = 0; i < 4; i++) {
      v[i] = coeffs[0] * p[i][0] + coeffs[1] * p[i][1] + coeffs[2] * p[i][2] + coeffs[3] * p[i][3];
    }
    coeffs = gs_get_cubic_coeffs(y);
    let pixel = ${o}(coeffs[0] * v[0] + coeffs[1] * v[1] + coeffs[2] * v[2] + coeffs[3] * v[3]);
    return pixel;
  }
`, hi = (o) => `
  fn gs_denormalize(n: f32, length: i32) -> f32 {
    ${o.alignCorners === 0 ? `
    // alignCorners: false => [-1, 1] to [-0.5, length - 0.5]
    return ((n + 1.0) * f32(length) - 1.0) / 2.0;
    ` : `
    // alignCorners: true => [-1, 1] to [0, length - 1]
    return (n + 1.0) / 2.0 * (f32(length - 1));
    `}
  }
`, wc = (o) => `
  ${o.paddingMode === "reflection" ? `
      fn gs_reflect(x: i32, x_min: f32, x_max: f32) -> u32 {
        var dx = 0.0;
        var fx = f32(x);
        let range = x_max - x_min;
        if (fx < x_min) {
          dx = x_min - fx;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_min + r;
          } else {
            fx = x_max - r;
          }
        } else if (fx > x_max) {
          dx = fx - x_max;
          let n = u32(dx / range);
          let r = dx - f32(n) * range;
          if (n % 2 == 0) {
            fx = x_max - r;
          } else {
            fx = x_min + r;
          }
        }
        return u32(fx);
      }` : ""}
`, yc = (o, v, b) => `
  fn pixel_at_grid(r: i32, c: i32, H: i32, W: i32, batch: u32, channel: u32, border: vec4<f32>) -> ${v} {
     var pixel = ${v}(0);
     var indices = vec4<u32>(0);
     indices[${br}] = batch;
     indices[${Er}] = channel;` + (() => {
          switch (b.paddingMode) {
            case "zeros":
              return `
          if (r >= 0 && r < H && c >=0 && c < W) {
            indices[${Nr}] = u32(r);
            indices[${Rr}] = u32(c);
          } else {
            return ${v}(0);
          }
        `;
            case "border":
              return `
          indices[${Nr}] = u32(clamp(r, 0, H - 1));
          indices[${Rr}] = u32(clamp(c, 0, W - 1));
        `;
            case "reflection":
              return `
          indices[${Nr}] = gs_reflect(r, border[1], border[3]);
          indices[${Rr}] = gs_reflect(c, border[0], border[2]);
        `;
            default:
              throw new Error(`padding mode ${b.paddingMode} is not supported`);
          }
        })() + `
    return ${o.getByIndices("indices")};
  }
`, fi = (o, v, b) => (() => {
          switch (b.mode) {
            case "nearest":
              return `
          let result = pixel_at_grid(i32(round(y)), i32(round(x)), H_in, W_in, indices[${br}], indices[${Er}], border);
        `;
            case "bilinear":
              return `
          let x1 = i32(floor(x));
          let y1 = i32(floor(y));
          let x2 = x1 + 1;
          let y2 = y1 + 1;

          let p11 = pixel_at_grid(y1, x1, H_in, W_in, indices[${br}], indices[${Er}], border);
          let p12 = pixel_at_grid(y1, x2, H_in, W_in, indices[${br}], indices[${Er}], border);
          let p21 = pixel_at_grid(y2, x1, H_in, W_in, indices[${br}], indices[${Er}], border);
          let p22 = pixel_at_grid(y2, x2, H_in, W_in, indices[${br}], indices[${Er}], border);

          let dx2 = ${v}(f32(x2) - x);
          let dx1 = ${v}(x - f32(x1));
          let dy2 = ${v}(f32(y2) - y);
          let dy1 = ${v}(y - f32(y1));
          let result = dy2 * (dx2 * p11 + dx1 * p12) + dy1 * (dx2 * p21 + dx1 * p22);
        `;
            case "bicubic":
              return `
          let x0 = i32(floor(x)) - 1;
          let y0 = i32(floor(y)) - 1;
          var p: mat4x4<${v}>;
          for (var h = 0; h < 4; h++) {
            for (var w = 0; w < 4; w++) {
              p[h][w] = pixel_at_grid(h + y0, w + x0, H_in, W_in, indices[${br}], indices[${Er}], border);
            }
          }

          let dx = x - f32(x0 + 1);
          let dy = y - f32(y0 + 1);
          let result = gs_bicubic_interpolate(p, dx, dy);
        `;
            default:
              throw new Error(`mode ${b.mode} is not supported`);
          }
        })() + `${o.setByOffset("global_idx", "result")}`, xc = (o, v) => {
          let b = ct("x", o[0].dataType, o[0].dims.length), T = [
            o[1].dims[0],
            o[1].dims[1],
            o[1].dims[2]
          ], S = ct("grid", o[1].dataType, T.length, 2), I = [
            o[0].dims[0],
            o[0].dims[1],
            o[1].dims[1],
            o[1].dims[2]
          ];
          v.format === "NHWC" && (I = [
            o[0].dims[0],
            o[1].dims[1],
            o[1].dims[2],
            o[0].dims[3]
          ], [br, Er, Nr, Rr] = [
            0,
            3,
            1,
            2
          ]);
          let O = Wt("output", o[0].dataType, I.length), L = b.type.value, z = Xe.size(I), B = [
            {
              type: 12,
              data: z
            },
            ...kt(o[0].dims, T, I)
          ], V = (q) => `
  ${q.registerUniform("output_size", "u32").declareVariables(b, S, O)}
  ${gc}
  ${bc(L)}
  ${hi(v)}
  ${wc(v)}
  ${yc(b, L, v)}

  ${q.mainStart()}
    ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let H_in = i32(uniforms.x_shape[${Nr}]);
      let W_in = i32(uniforms.x_shape[${Rr}]);

      ${v.alignCorners === 0 ? `
      let x_min = -0.5;
      let x_max = f32(W_in) - 0.5;
      let y_min = -0.5;
      let y_max = f32(H_in) - 0.5;
      ` : `
      let x_min = 0.0;
      let x_max = f32(W_in) - 1.0;
      let y_min = 0.0;
      let y_max = f32(H_in) - 1.0;
      `};
      let border = vec4<f32>(x_min, y_min, x_max, y_max);

      let indices = ${O.offsetToIndices("global_idx")};
      var grid_indices = vec3<u32>(indices[${br}], indices[${Nr}], indices[${Rr}]);
      let nxy = ${S.getByIndices("grid_indices")};
      var x = gs_denormalize(f32(nxy[0]), W_in);
      var y = gs_denormalize(f32(nxy[1]), H_in);

      ${fi(O, L, v)}
  }`;
          return {
            name: "GridSample",
            shaderCache: {
              hint: `${v.cacheKey}`,
              inputDependencies: [
                "type",
                "type"
              ]
            },
            getRunData: (q) => {
              let X = Xe.size(I);
              return {
                outputs: [
                  {
                    dims: I,
                    dataType: q[0].dataType
                  }
                ],
                dispatchGroup: {
                  x: Math.ceil(X / 64)
                },
                programUniforms: B
              };
            },
            getShaderSource: V
          };
        }, vc = (o, v) => {
          mc(o.inputs), o.compute(xc(o.inputs, v));
        }, kr = (o) => Pt({
          alignCorners: o.align_corners,
          mode: o.mode,
          paddingMode: o.padding_mode,
          format: o.format
        });
      }), ir, Tc, Mc, Is, Ec, as, Pc, Sc = g(() => {
        Kt(), ce(), Qt(), jn(), uo(), fn(), Or(), ir = (o, v) => o.length > v && o[v].dims.length > 0 ? o[v] : void 0, Tc = (o, v) => {
          let b = o[0], T = ir(o, 1), S = ir(o, 2), I = ir(o, 3), O = ir(o, 4), L = ir(o, 5), z = ir(o, 6), B = ir(o, 7);
          if (b.dims.length !== 3 && b.dims.length !== 5)
            throw new Error("Input query is expected to have 3 or 5 dimensions");
          let V = b.dims[0], q = b.dims[1], X = b.dims.length === 3 ? b.dims[2] : v.numHeads * b.dims[4], ee = q, ne = 0, se = 0, ge = Math.floor(X / v.numHeads);
          if (z && B && Xe.size(z.dims) && Xe.size(B.dims)) {
            if (z.dims.length !== 4)
              throw new Error('Input "past_key" is expected to have 4 dimensions');
            if (z.dims[0] !== V || z.dims[1] !== v.numHeads || z.dims[3] !== ge)
              throw new Error('Input "past_key" shape (batch_size, num_heads, past_sequence_length, head_size)');
            if (B.dims[0] !== V || B.dims[1] !== v.numHeads || B.dims[3] !== ge)
              throw new Error('Input "past_value" shape (batch_size, num_heads, past_sequence_length, head_size)');
            if (z.dims[2] !== B.dims[2])
              throw new Error('Input "past_key" and "past_value" shall have same dim 2 (past_sequence_length)');
            if (B.dims.length !== 4)
              throw new Error('Input "past_value" is expected to have 4 dimensions');
            ne = z.dims[2], se = z.dims[2];
          } else if (z && Xe.size(z.dims) || B && Xe.size(B.dims))
            throw new Error('Input "past_key" and "past_value" shall be both present or both absent');
          let ue;
          if (T && Xe.size(T.dims) > 0) {
            if (b.dims.length !== 3)
              throw new Error('Input "query" is expected to have 3 dimensions when key is given');
            if (T.dims.length < 3 || T.dims.length > 5)
              throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');
            if (b.dims[0] !== T.dims[0])
              throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');
            if (T.dims.length === 3) {
              if (T.dims[2] !== b.dims[2])
                throw new Error('Input "query" and "key" shall have same dim 2 (hidden_size)');
              ue = 2, ee = T.dims[1];
            } else if (T.dims.length === 5) {
              if (T.dims[2] !== v.numHeads || T.dims[3] !== 2 || T.dims[4] !== ge)
                throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');
              if (S)
                throw new Error('Expect "value" be none when "key" has packed kv format.');
              ue = 5, ee = T.dims[1];
            } else {
              if (T.dims[1] !== v.numHeads || T.dims[3] !== ge)
                throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');
              ue = 0, ee = T.dims[2];
            }
          } else {
            if (b.dims.length !== 5)
              throw new Error('Input "query" is expected to have 5 dimensions when key is empty');
            if (b.dims[2] !== v.numHeads || b.dims[3] !== 3)
              throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');
            ue = 3;
          }
          if (I && Xe.size(I.dims) > 0) {
            if (I.dims.length !== 1)
              throw new Error('Input "bias" is expected to have 1 dimension');
            if (T && T.dims.length === 5 && T.dims[3] === 2)
              throw new Error("bias is not allowed for packed kv.");
          }
          let re = ne + ee, Te = 0;
          if (O && Xe.size(O.dims) > 0) {
            Te = 8;
            let Le = O.dims;
            throw Le.length === 1 ? Le[0] === V ? Te = 1 : Le[0] === 3 * V + 2 && (Te = 3) : Le.length === 2 && Le[0] === V && Le[1] === re && (Te = 5), Te === 8 ? new Error('Input "key_padding_mask" shape shall be (batch_size) or (batch_size, total_sequence_length)') : new Error("Mask not supported");
          }
          let we = false, Se = X;
          if (S && Xe.size(S.dims) > 0) {
            if (S.dims.length !== 3 && S.dims.length !== 4)
              throw new Error('Input "value" is expected to have 3 or 4 dimensions');
            if (b.dims[0] !== S.dims[0])
              throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');
            if (S.dims.length === 3) {
              if (ee !== S.dims[1])
                throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');
              Se = S.dims[2];
            } else {
              if (ee !== S.dims[2])
                throw new Error('Input "key" and "value" shall have the same dim 2 (kv_sequence_length)');
              Se = S.dims[1] * S.dims[3], we = true;
            }
          }
          let ze = false;
          if (O && Xe.size(O.dims) > 0)
            throw new Error("Key padding mask is not supported");
          if (L && Xe.size(L.dims) > 0) {
            if (L.dims.length !== 4)
              throw new Error('Input "attention_bias" is expected to have 4 dimensions');
            if (L.dims[0] !== V || L.dims[1] !== v.numHeads || L.dims[2] !== q || L.dims[3] !== re)
              throw new Error('Expect "attention_bias" shape (batch_size, num_heads, sequence_length, total_sequence_length)');
          }
          return {
            batchSize: V,
            sequenceLength: q,
            pastSequenceLength: ne,
            kvSequenceLength: ee,
            totalSequenceLength: re,
            maxSequenceLength: se,
            inputHiddenSize: 0,
            hiddenSize: X,
            vHiddenSize: Se,
            headSize: ge,
            vHeadSize: Math.floor(Se / v.numHeads),
            numHeads: v.numHeads,
            isUnidirectional: false,
            pastPresentShareBuffer: false,
            maskFilterValue: v.maskFilterValue,
            maskType: Te,
            scale: v.scale,
            broadcastResPosBias: ze,
            passPastInKv: we,
            qkvFormat: ue
          };
        }, Mc = (o) => Pt({
          ...o
        }), Is = Pt({
          perm: [
            0,
            2,
            1,
            3
          ]
        }), Ec = (o, v, b, T, S, I, O) => {
          let L = [
            T,
            S,
            I
          ], z = Xe.size(L), B = [
            {
              type: 12,
              data: z
            },
            {
              type: 12,
              data: O
            },
            {
              type: 12,
              data: I
            }
          ], V = (q) => {
            let X = Wt("qkv_with_bias", v.dataType, L), ee = ct("qkv", v.dataType, L), ne = ct("bias", b.dataType, L), se = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "bias_offset",
                type: "u32"
              },
              {
                name: "hidden_size",
                type: "u32"
              }
            ];
            return `
  ${q.registerUniforms(se).declareVariables(ee, ne, X)}
  ${q.mainStart()}
    ${q.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let bias_offset_idx = (global_idx % uniforms.hidden_size) + uniforms.bias_offset;

    qkv_with_bias[global_idx] = qkv[global_idx] + bias[bias_offset_idx];
  }`;
          };
          return o.compute({
            name: "MultiHeadAttentionAddBias",
            shaderCache: {
              inputDependencies: [
                "type",
                "type"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: L,
                  dataType: v.dataType,
                  gpuDataType: 0
                }
              ],
              dispatchGroup: {
                x: Math.ceil(z / 64)
              },
              programUniforms: B
            }),
            getShaderSource: V
          }, {
            inputs: [
              v,
              b
            ],
            outputs: [
              -1
            ]
          })[0];
        }, as = (o, v, b, T, S, I, O, L) => {
          let z = I;
          if (O && Xe.size(O.dims) > 0) {
            if (T === 1)
              throw new Error("AddBiasReshape is not implemented. Please export your model with packed QKV or KV");
            return z = Ec(o, I, O, v, T, b * S, L), z = z.reshape([
              v,
              T,
              b,
              S
            ]), b === 1 || T === 1 ? z : o.compute(cr(z, Is.perm), {
              inputs: [
                z
              ],
              outputs: [
                -1
              ]
            })[0];
          } else
            return I.dims.length === 3 && (z = I.reshape([
              v,
              T,
              b,
              S
            ])), b === 1 || T === 1 ? z : o.compute(cr(z, Is.perm), {
              inputs: [
                z
              ],
              outputs: [
                -1
              ]
            })[0];
        }, Pc = (o, v) => {
          let b = Tc(o.inputs, v), T = o.inputs[0], S = ir(o.inputs, 1), I = ir(o.inputs, 2), O = ir(o.inputs, 3), L = ir(o.inputs, 4), z = ir(o.inputs, 5), B = ir(o.inputs, 6), V = ir(o.inputs, 7);
          if (T.dims.length === 5)
            throw new Error("Packed QKV is not implemented");
          if (S?.dims.length === 5)
            throw new Error("Packed KV is not implemented");
          let q = S && I && S.dims.length === 4 && I.dims.length === 4, X = as(o, b.batchSize, b.numHeads, b.sequenceLength, b.headSize, T, O, 0);
          if (q)
            return es(o, X, S, I, L, void 0, B, V, z, b);
          if (!S || !I)
            throw new Error("key and value must be provided");
          let ee = as(o, b.batchSize, b.numHeads, b.kvSequenceLength, b.headSize, S, O, b.hiddenSize), ne = as(o, b.batchSize, b.numHeads, b.kvSequenceLength, b.vHeadSize, I, O, 2 * b.hiddenSize);
          es(o, X, ee, ne, L, void 0, B, V, z, b);
        };
      }), Os, kc, Ac, Cc, Wr, Ic, Oc, $c = g(() => {
        Kt(), ce(), Qt(), fn(), Os = (o) => {
          if (!o || o.length < 1)
            throw new Error("too few inputs");
        }, kc = (o, v) => {
          let b = [], T = v.numOutputs;
          return o[1].dims[0] > 0 && (o[1].getBigInt64Array().forEach((S) => b.push(Number(S))), T = b.length), Pt({
            numOutputs: T,
            axis: v.axis,
            splitSizes: b
          });
        }, Ac = (o) => `
fn calculateOutputIndex(index: u32) -> u32 {
    for (var i: u32 = 0u; i < ${o}u; i += 1u ) {
    if (index < ${Ht("uniforms.size_in_split_axis", "i", o)}) {
        return i;
    }
    }
    return ${o}u;
}`, Cc = (o) => {
          let v = o.length, b = [];
          for (let T = 0; T < v; ++T) {
            let S = o[T].setByIndices("indices", "input[global_idx]");
            v === 1 ? b.push(S) : T === 0 ? b.push(`if (output_number == ${T}u) { ${S} }`) : T === v - 1 ? b.push(`else { ${S} }`) : b.push(`else if (output_number == ${T}) { ${S} }`);
          }
          return `
      fn writeBufferData(output_number: u32, indices: ${o[0].type.indices}, global_idx: u32) {
        ${b.join(`
`)}
      }`;
        }, Wr = (o, v) => {
          let b = o[0].dims, T = Xe.size(b), S = o[0].dataType, I = Xe.normalizeAxis(v.axis, b.length), O = new Array(v.numOutputs), L = ct("input", S, b.length), z = new Array(v.numOutputs), B = [], V = [], q = 0, X = [
            {
              type: 12,
              data: T
            }
          ];
          for (let ne = 0; ne < v.numOutputs; ne++) {
            q += v.splitSizes[ne], z[ne] = q;
            let se = b.slice();
            se[I] = v.splitSizes[ne], V.push(se), O[ne] = Wt(`output${ne}`, S, se.length), B.push({
              dims: V[ne],
              dataType: o[0].dataType
            });
          }
          X.push({
            type: 12,
            data: z
          }, ...kt(b, ...V));
          let ee = (ne) => `
  ${ne.registerUniform("input_size", "u32").registerUniform("size_in_split_axis", "u32", z.length).declareVariables(L, ...O)}
  ${Ac(z.length)}
  ${Cc(O)}

  ${ne.mainStart()}
    ${ne.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.input_size")}

    var indices = ${L.offsetToIndices("global_idx")};
    var index = ${L.indicesGet("indices", I)};
    let output_number = calculateOutputIndex(index);
    if (output_number != 0) {
      index -= ${Ht("uniforms.size_in_split_axis", "output_number - 1u", z.length)};
      ${L.indicesSet("indices", I, "index")};
    }
    writeBufferData(output_number, indices, global_idx);
  }`;
          return {
            name: "Split",
            shaderCache: {
              hint: v.cacheKey,
              inputDependencies: [
                "rank"
              ]
            },
            getShaderSource: ee,
            getRunData: () => ({
              outputs: B,
              dispatchGroup: {
                x: Math.ceil(T / 64)
              },
              programUniforms: X
            })
          };
        }, Ic = (o, v) => {
          Os(o.inputs);
          let b = o.inputs.length === 1 ? v : kc(o.inputs, v);
          o.compute(Wr(o.inputs, b), {
            inputs: [
              0
            ]
          });
        }, Oc = (o) => {
          let v = o.axis, b = o.splitSizes, T = o.numOutputs < 0 ? b.length : o.numOutputs;
          if (T !== b.length)
            throw new Error("numOutputs and splitSizes lengh must be equal");
          return Pt({
            axis: v,
            numOutputs: T,
            splitSizes: b
          });
        };
      }), Fc, qr, Dc, Lc = g(() => {
        Kt(), ce(), Qt(), fn(), Fc = (o, v) => {
          let [b, T, S, I] = o, { numHeads: O, rotaryEmbeddingDim: L } = v;
          if (b.dims.length !== 3 && b.dims.length !== 4)
            throw new Error(`Input 'x' is expected to have 3 or 4 dimensions, got ${b.dims.length}`);
          if (!Xe.areEqual(T.dims, []) && !Xe.areEqual(T.dims, [
            1
          ]) && T.dims.length !== 2)
            throw new Error(`Input 'position_ids' is expected to have 0, 1, or 2 dimensions, got ${T.dims.length}`);
          if (S.dims.length !== 2)
            throw new Error(`Input 'cos_cache' is expected to have 2 dimensions, got ${S.dims.length}`);
          if (I.dims.length !== 2)
            throw new Error(`Input 'sin_cache' is expected to have 2 dimensions, got ${I.dims.length}`);
          if (!Xe.areEqual(S.dims, I.dims))
            throw new Error("Inputs 'cos_cache' and 'sin_cache' are expected to have the same shape");
          if (L > 0 && O === 0)
            throw new Error("num_heads must be provided if rotary_embedding_dim is specified");
          let z = b.dims[0], B = b.dims[b.dims.length - 2], V = S.dims[0], q = Xe.sizeFromDimension(b.dims, 1) / B, X = L === 0 ? S.dims[1] * 2 : q / O;
          if (L > X)
            throw new Error("rotary_embedding_dim must be less than or equal to head_size");
          if (T.dims.length === 2) {
            if (z !== T.dims[0])
              throw new Error(`Input 'position_ids' dimension 0 should be of size batch_size, got ${T.dims[0]}`);
            if (B !== T.dims[1])
              throw new Error(`Input 'position_ids' dimension 1 should be of size sequence_length, got ${T.dims[1]}`);
          }
          if (X / 2 !== S.dims[1] && L / 2 !== S.dims[1])
            throw new Error(`Input 'cos_cache' dimension 1 should be same as head_size / 2 or rotary_embedding_dim / 2, got ${S.dims[1]}`);
          if (B > V)
            throw new Error("Updating cos_cache and sin_cache in RotaryEmbedding is not currently supported");
        }, qr = (o, v) => {
          let { interleaved: b, numHeads: T, rotaryEmbeddingDim: S, scale: I } = v, O = o[0].dims[0], L = Xe.sizeFromDimension(o[0].dims, 1), z = o[0].dims[o[0].dims.length - 2], B = L / z, V = o[2].dims[1], q = S === 0 ? V * 2 : B / T, X = new Array(O, z, B / q, q - V), ee = Xe.computeStrides(X), ne = [
            {
              type: 1,
              data: I
            },
            {
              type: 12,
              data: X
            },
            {
              type: 12,
              data: ee
            },
            ...o[0].dims.length === 3 ? new Array({
              type: 12,
              data: [
                L,
                B,
                q,
                1
              ]
            }) : [],
            ...o[0].dims.length === 4 ? new Array({
              type: 12,
              data: [
                L,
                q,
                z * q,
                1
              ]
            }) : [],
            ...kt(o[0].dims, o[1].dims, o[2].dims, o[3].dims, o[0].dims)
          ], se = (ge) => {
            let ue = ct("input", o[0].dataType, o[0].dims.length), re = ct("position_ids", o[1].dataType, o[1].dims.length), Te = ct("cos_cache", o[2].dataType, o[2].dims.length), we = ct("sin_cache", o[3].dataType, o[3].dims.length), Se = Wt("output", o[0].dataType, o[0].dims.length);
            return ge.registerUniforms([
              {
                name: "scale",
                type: "f32"
              },
              {
                name: "global_shape",
                type: "u32",
                length: X.length
              },
              {
                name: "global_strides",
                type: "u32",
                length: ee.length
              },
              {
                name: "input_output_strides",
                type: "u32",
                length: ee.length
              }
            ]), `
        ${ge.declareVariables(ue, re, Te, we, Se)}

        ${ge.mainStart(Vn)}
          let half_rotary_emb_dim = uniforms.${Te.name}_shape[1];
          let bsnh = global_idx / uniforms.global_strides % uniforms.global_shape;
          let size = uniforms.global_shape[0] * uniforms.global_strides[0];
          ${ge.guardAgainstOutOfBoundsWorkgroupSizes("size")}

          if (bsnh[3] < half_rotary_emb_dim) {
            let position_ids_idx =
                ${re.broadcastedIndicesToOffset("bsnh.xy", Wt("", re.type.tensor, 2))};
            let position_id =
                u32(${re.getByOffset("position_ids_idx")}) + select(0, bsnh[1], position_ids_idx == 0);
            let i = dot(bsnh, uniforms.input_output_strides) + select(0, bsnh[3], ${b});
            let j = i + select(half_rotary_emb_dim, 1, ${b});
            let re = ${ue.getByOffset("i")} * ${Te.get("position_id", "bsnh[3]")} -
                ${ue.getByOffset("j")} * ${we.get("position_id", "bsnh[3]")};
            ${Se.setByOffset("i", "re")}
            let im = ${ue.getByOffset("i")} * ${we.get("position_id", "bsnh[3]")} +
                ${ue.getByOffset("j")} * ${Te.get("position_id", "bsnh[3]")};
            ${Se.setByOffset("j", "im")}
          } else {
            let k = dot(bsnh, uniforms.input_output_strides) + half_rotary_emb_dim;
            ${Se.setByOffset("k", ue.getByOffset("k"))}
          }
        }`;
          };
          return {
            name: "RotaryEmbedding",
            shaderCache: {
              hint: Pt({
                interleaved: b
              }).cacheKey,
              inputDependencies: [
                "rank",
                "rank",
                "rank",
                "rank"
              ]
            },
            getShaderSource: se,
            getRunData: () => ({
              outputs: [
                {
                  dims: o[0].dims,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(Xe.size(X) / Vn)
              },
              programUniforms: ne
            })
          };
        }, Dc = (o, v) => {
          Fc(o.inputs, v), o.compute(qr(o.inputs, v));
        };
      }), Nc, Dd, _i, Rc, zc, ls = g(() => {
        Qt(), Kt(), uo(), Sc(), $c(), Or(), Lc(), fn(), Nc = (o, v) => {
          if (v.doRotary && o.length <= 7)
            throw new Error("cos_cache and sin_cache inputs are required if do_rotary is specified");
          let b = o[0], T = o[1], S = o[2], I = o[3], O = o[4];
          if (v.doRotary !== 0 && o.length <= 7)
            throw new Error("cos_cast and sin_cache are expected if do_rotary attribute is non-zero");
          if (v.localWindowSize !== -1)
            throw new Error("Local attention is not supported");
          if (v.softcap !== 0)
            throw new Error("Softcap is not supported");
          if (v.rotaryInterleaved !== 0)
            throw new Error("Rotary interleaved is not supported");
          if (v.smoothSoftmax)
            throw new Error("Smooth softmax is not supported");
          if (b.dims.length !== 3 && b.dims.length !== 5)
            throw new Error("Input query is expected to have 3 or 5 dimensions");
          let L = false, z = b.dims[0], B = b.dims[1], V = b.dims.length === 3 ? L ? b.dims[2] / 3 : b.dims[2] : v.numHeads * b.dims[4], q = B, X = 0, ee = !T || T.dims.length === 0, ne = Math.floor(ee ? V / (v.numHeads + 2 * v.kvNumHeads) : V / v.numHeads);
          ee && (V = ne * v.numHeads);
          let se = I && I.dims.length !== 0, ge = O && O.dims.length !== 0;
          if (se && I.dims.length === 4 && I.dims[0] === z && I.dims[1] !== v.kvNumHeads && I.dims[2] === v.kvNumHeads && I.dims[3] === ne)
            throw new Error("BSNH pastKey/pastValue is not supported");
          if (se && ge) {
            if (I.dims.length !== 4)
              throw new Error('Input "past_key" is expected to have 4 dimensions');
            if (O.dims.length !== 4)
              throw new Error('Input "past_value" is expected to have 4 dimensions');
            X = I.dims[2];
          } else if (se || ge)
            throw new Error('Input "past_key" and "past_value" shall be both present or both absent');
          let ue = 1;
          if (T && T.dims.length > 0) {
            if (b.dims.length !== 3)
              throw new Error('Input "query" is expected to have 3 dimensions when key is given');
            if (T.dims.length < 3 || T.dims.length > 5)
              throw new Error('Input "key" is expected to have 3, 4, or 5 dimensions');
            if (b.dims[0] !== T.dims[0])
              throw new Error('Input "query" and "key" shall have same dim 0 (batch size)');
            if (T.dims.length === 3) {
              if (b.dims[2] % T.dims[2] !== 0)
                throw new Error('Dimension 2 of "query" should be a multiple of "key"');
              q = T.dims[1];
            } else if (T.dims.length === 5) {
              if (T.dims[2] !== v.numHeads || T.dims[3] !== 2 || T.dims[4] !== ne)
                throw new Error('Expect "key" shape (batch_size, kv_sequence_length, num_heads, 2, head_size) for packed kv');
              if (S)
                throw new Error('Expect "value" be none when "key" has packed kv format.');
              q = T.dims[1];
            } else {
              if (T.dims[1] !== v.numHeads || T.dims[3] !== ne)
                throw new Error('Expect "key" shape (batch_size, num_heads, kv_sequence_length, head_size) for past_key');
              q = T.dims[2];
            }
          } else {
            if (b.dims.length !== 3 && b.dims.length !== 5)
              throw new Error('Input "query" is expected to have 3 or 5 dimensions when key is empty');
            if (b.dims.length === 5 && (b.dims[2] !== v.numHeads || b.dims[3] !== 3))
              throw new Error('Expect "query" shape (batch_size, kv_sequence_length, num_heads, 3, head_size) for packed kv');
            ue = 3;
          }
          let re = 0, Te = false, we = v.kvNumHeads ? ne * v.kvNumHeads : V;
          if (S && S.dims.length > 0) {
            if (S.dims.length !== 3 && S.dims.length !== 4)
              throw new Error('Input "value" is expected to have 3 or 4 dimensions');
            if (b.dims[0] !== S.dims[0])
              throw new Error('Input "query" and "value" shall have same dim 0 (batch_size)');
            if (S.dims.length === 3) {
              if (q !== S.dims[1])
                throw new Error('Input "key" and "value" shall have the same dim 1 (kv_sequence_length)');
              we = S.dims[2];
            } else {
              if (q !== S.dims[2])
                throw new Error('Input "past_key" and "past_value" shall have the same dim 2 (kv_sequence_length)');
              we = S.dims[1] * S.dims[3], Te = true;
            }
          }
          let Se = o.length > 4 ? o[5] : void 0;
          if (Se && Se.dims.length !== 1 && Se.dims[0] !== z)
            throw new Error('Input "seqlens" is expected to have 1 dimension and the same dim 0 as batch_size');
          return {
            batchSize: z,
            sequenceLength: B,
            pastSequenceLength: X,
            kvSequenceLength: q,
            totalSequenceLength: -1,
            maxSequenceLength: -1,
            inputHiddenSize: 0,
            hiddenSize: V,
            vHiddenSize: we,
            headSize: ne,
            vHeadSize: Math.floor(we / v.kvNumHeads),
            numHeads: v.numHeads,
            kvNumHeads: v.kvNumHeads,
            nReps: v.numHeads / v.kvNumHeads,
            pastPresentShareBuffer: false,
            maskType: re,
            scale: v.scale,
            broadcastResPosBias: false,
            passPastInKv: Te,
            qkvFormat: ue
          };
        }, Dd = Pt({
          perm: [
            0,
            2,
            1,
            3
          ]
        }), _i = (o, v, b) => {
          let T = v, S = b.kvNumHeads;
          return v.dims.length === 3 && b.kvSequenceLength !== 0 && (T = v.reshape([
            b.batchSize,
            b.kvSequenceLength,
            S,
            b.headSize
          ]), T = o.compute(cr(T, Dd.perm), {
            inputs: [
              T
            ],
            outputs: [
              -1
            ]
          })[0]), T;
        }, Rc = (o, v, b, T) => {
          let S = 7, I = [
            "type",
            "type"
          ], O = [
            o * v
          ], L = o * v, z = [
            {
              type: 12,
              data: L
            },
            {
              type: 12,
              data: v
            },
            {
              type: 12,
              data: o
            }
          ], B = (V) => {
            let q = ct("seq_lens", b.dataType, b.dims), X = ct("total_seq_lens", T.dataType, T.dims), ee = Wt("pos_ids", S, O), ne = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "sequence_length",
                type: "u32"
              },
              {
                name: "batch_size",
                type: "u32"
              }
            ];
            return `
  ${V.registerUniforms(ne).declareVariables(q, X, ee)}
  ${V.mainStart()}
    ${V.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
    let total_sequence_length = u32(${X.getByOffset("0")});
    let is_subsequent_prompt = uniforms.sequence_length > 1 && uniforms.sequence_length != total_sequence_length;
    let is_first_prompt = !is_subsequent_prompt && uniforms.sequence_length == total_sequence_length;
    let batch_idx = global_idx / uniforms.sequence_length;
    let sequence_idx = i32(global_idx % uniforms.sequence_length);
    var pos_id: i32 = 0;
    let seqlen = ${q.getByOffset("batch_idx")};
    let total_seqlen = seqlen + 1;
    if (is_first_prompt) {
      if (sequence_idx < total_seqlen) {
        pos_id = sequence_idx;
      } else {
        pos_id = 1;
      }
      ${ee.setByOffset("global_idx", "pos_id")}
    } else if (is_subsequent_prompt) {
      let past_seqlen = total_seqlen - i32(uniforms.sequence_length);
      if (past_seqlen + sequence_idx < total_seqlen) {
        pos_id = past_seqlen + sequence_idx;
      } else {
        pos_id = 1;
      }
      ${ee.setByOffset("global_idx", "pos_id")}
    } else if (global_idx < uniforms.batch_size) {
      ${ee.setByOffset("global_idx", "seqlen")}
    };
  }
  `;
          };
          return {
            name: "GeneratePositionIds",
            shaderCache: {
              hint: `${o};${v}`,
              inputDependencies: I
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: O,
                  dataType: S
                }
              ],
              dispatchGroup: {
                x: Math.ceil(L / 64)
              },
              programUniforms: z
            }),
            getShaderSource: B
          };
        }, zc = (o, v) => {
          let b = Nc(o.inputs, v);
          if (o.inputs[0].dims.length === 5)
            throw new Error("Packed QKV is not implemented");
          if (o.inputs[1]?.dims.length === 5)
            throw new Error("Packed KV is not implemented");
          let T = o.inputs[0], S = o.inputs[1] && o.inputs[1].dims.length > 0 ? o.inputs[1] : void 0, I = o.inputs[2] && o.inputs[2].dims.length > 0 ? o.inputs[2] : void 0, O = o.inputs[3] && o.inputs[3].dims.length !== 0 ? o.inputs[3] : void 0, L = o.inputs[4] && o.inputs[4].dims.length !== 0 ? o.inputs[4] : void 0, z = o.inputs.length > 4 ? o.inputs[5] : void 0, B = o.inputs.length > 5 ? o.inputs[6] : void 0, V = b.kvNumHeads ? b.kvNumHeads : b.numHeads, q = Pt({
            axis: 2,
            numOutputs: 3,
            splitSizes: [
              b.numHeads * b.headSize,
              V * b.headSize,
              V * b.headSize
            ]
          }), [X, ee, ne] = !S && !I ? o.compute(Wr([
            T
          ], q), {
            inputs: [
              T
            ],
            outputs: [
              -1,
              -1,
              -1
            ]
          }) : [
            T,
            S,
            I
          ], se, ge;
          if (v.doRotary) {
            let we = o.compute(Rc(b.batchSize, b.sequenceLength, z, B), {
              inputs: [
                z,
                B
              ],
              outputs: [
                -1
              ]
            })[0], Se = o.inputs[7], ze = o.inputs[8], Le = Pt({
              interleaved: v.rotaryInterleaved !== 0,
              numHeads: b.numHeads,
              rotaryEmbeddingDim: 0,
              scale: v.scale
            }), nt = [
              X,
              we,
              Se,
              ze
            ], st = [
              -1
            ];
            se = o.compute(qr(nt, Le), {
              inputs: nt,
              outputs: st
            })[0], nt.splice(0, 1, ee);
            let Mt = Pt({
              interleaved: v.rotaryInterleaved !== 0,
              numHeads: b.kvNumHeads,
              rotaryEmbeddingDim: 0,
              scale: v.scale
            });
            ge = o.compute(qr(nt, Mt), {
              inputs: nt,
              outputs: st
            })[0];
          }
          let ue = as(o, b.batchSize, b.numHeads, b.sequenceLength, b.headSize, v.doRotary ? se : X, void 0, 0), re = _i(o, v.doRotary ? ge : ee, b), Te = _i(o, ne, b);
          es(o, ue, re, Te, void 0, void 0, O, L, void 0, b, z, B);
        };
      }), mi, Bc, jc, Vc, Ld = g(() => {
        Kt(), ce(), Or(), fn(), mi = (o, v, b, T, S, I, O, L) => {
          let z = Mn(I), B = z === 1 ? "f32" : `vec${z}f`, V = z === 1 ? "vec2f" : `mat2x${z}f`, q = S * O, X = 64;
          q === 1 && (X = 256);
          let ee = [
            S,
            O,
            I / z
          ], ne = [
            S,
            O,
            2
          ], se = [
            "rank",
            "type",
            "type"
          ], ge = [];
          ge.push(...kt(ee, ne));
          let ue = (re) => {
            let Te = ct("x", v.dataType, 3, z), we = ct("scale", b.dataType, b.dims), Se = ct("bias", T.dataType, T.dims), ze = Wt("output", 1, 3, 2), Le = [
              Te,
              we,
              Se,
              ze
            ];
            return `
  var<workgroup> workgroup_shared : array<${V}, ${X}>;
  const workgroup_size = ${X}u;
  ${re.declareVariables(...Le)}
  ${re.mainStart(X)}
    let batch = workgroup_index / uniforms.x_shape[1];
    let channel = workgroup_index % uniforms.x_shape[1];
    let hight = uniforms.x_shape[2];
    // initialize workgroup memory
    var sum = ${B}(0);
    var squared_sum = ${B}(0);
    for (var h = local_idx; h < hight; h += workgroup_size) {
      let value = ${B}(${Te.get("batch", "channel", "h")});
      sum += value;
      squared_sum += value * value;
    }
    workgroup_shared[local_idx] = ${V}(sum, squared_sum);
    workgroupBarrier();

    for (var currSize = workgroup_size >> 1;  currSize > 0; currSize = currSize >> 1) {
      if (local_idx < currSize) {
        workgroup_shared[local_idx] = workgroup_shared[local_idx] + workgroup_shared[local_idx + currSize];
      }
      workgroupBarrier();
    }
    if (local_idx == 0) {
      let sum_final = ${Pr("workgroup_shared[0][0]", z)} / f32(hight * ${z});
      let squared_sum_final = ${Pr("workgroup_shared[0][1]", z)} / f32(hight * ${z});

      let inv_std_dev = inverseSqrt(squared_sum_final - sum_final * sum_final + f32(${L}));
      let channel_scale = inv_std_dev * f32(scale[channel]);
      let channel_shift = f32(bias[channel]) - sum_final * channel_scale;
      output[workgroup_index] = vec2f(channel_scale, channel_shift);
    }
  }`;
          };
          return o.compute({
            name: "InstanceNormComputeChannelScaleShift",
            shaderCache: {
              hint: `${z};${L};${X}`,
              inputDependencies: se
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: ne,
                  dataType: 1
                }
              ],
              dispatchGroup: {
                x: q
              },
              programUniforms: ge
            }),
            getShaderSource: ue
          }, {
            inputs: [
              v,
              b,
              T
            ],
            outputs: [
              -1
            ]
          })[0];
        }, Bc = (o, v, b) => {
          let T = v[0].dims, S = T, I = 2, O = T[0], L = T[1], z = Xe.sizeFromDimension(T, I), B = Mn(z), V = Xe.size(S) / B, q = mi(o, v[0], v[1], v[2], O, z, L, b.epsilon), X = [
            O,
            L,
            z / B
          ], ee = [
            O,
            L
          ], ne = [
            "type",
            "none"
          ], se = (ge) => {
            let ue = ct("x", v[0].dataType, X.length, B), re = ct("scale_shift", 1, ee.length, 2), Te = Wt("output", v[0].dataType, X.length, B), we = [
              ue,
              re,
              Te
            ];
            return `
  ${ge.registerUniform("output_size", "u32").declareVariables(...we)}
  ${ge.mainStart()}
  ${ge.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let outputIndices = ${Te.offsetToIndices("global_idx")};
      let batch = outputIndices[0];
      let channel = outputIndices[1];
      let scale_shift = ${re.getByIndices("vec2<u32>(batch, channel)")};
      let value = ${ue.getByOffset("global_idx")} * ${Te.type.value}(scale_shift.x) + ${Te.type.value}(scale_shift.y);
      ${Te.setByOffset("global_idx", "value")};
  }`;
          };
          o.compute({
            name: "InstanceNormalization",
            shaderCache: {
              hint: `${B}`,
              inputDependencies: ne
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: S,
                  dataType: v[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(V / 64)
              },
              programUniforms: [
                {
                  type: 12,
                  data: V
                },
                ...kt(X, ee, X)
              ]
            }),
            getShaderSource: se
          }, {
            inputs: [
              v[0],
              q
            ]
          });
        }, jc = (o, v, b) => {
          let T = v[0].dims, S = T, I = T[0], O = T[T.length - 1], L = Xe.sizeFromDimension(T, 1) / O, z = Mn(O), B = Xe.size(S) / z, V = [
            {
              type: 12,
              data: L
            },
            {
              type: 12,
              data: Math.floor(O / z)
            }
          ], q = [
            "type",
            "type"
          ], X = false, ee = [
            0,
            T.length - 1
          ];
          for (let ue = 0; ue < T.length - 2; ue++)
            X = X || T[ue + 1] !== 1, ee.push(ue + 1);
          X = X && T[T.length - 1] !== 1;
          let ne = X ? o.compute(cr(o.inputs[0], ee), {
            inputs: [
              o.inputs[0]
            ],
            outputs: [
              -1
            ]
          })[0] : o.inputs[0].reshape(Array.from({
            length: T.length
          }, (ue, re) => T[ee[re]])), se = mi(o, ne, v[1], v[2], I, L, O, b.epsilon), ge = (ue) => {
            let re = Ke(v[0].dataType), Te = z === 1 ? "vec2f" : `mat${z}x2f`, we = (Le) => {
              let nt = Le === 0 ? "x" : "y", st = z === 1 ? "f32" : `vec${z}f`;
              switch (z) {
                case 1:
                  return `${re}(${st}(scale.${nt}))`;
                case 2:
                  return `vec2<${re}>(${st}(scale[0].${nt}, scale[1].${nt}))`;
                case 4:
                  return `vec4<${re}>(${st}(scale[0].${nt}, scale[1].${nt}, scale[2].${nt}, scale[3].${nt}))`;
                default:
                  throw new Error(`Not supported compoents ${z}`);
              }
            }, Se = ct("input", v[0].dataType, v[0].dims, z), ze = Wt("output", v[0].dataType, S, z);
            return `
  @group(0) @binding(0) var<storage, read> input : array<${Se.type.storage}>;
  @group(0) @binding(1) var<storage, read> scale_input : array<${Te}>;
  @group(0) @binding(2) var<storage, read_write> output : array<${ze.type.storage}>;
  struct Uniforms {H: u32, C : u32};
  @group(0) @binding(3) var<uniform> uniforms: Uniforms;

  ${ue.mainStart()}
    let current_image_number = global_idx / (uniforms.C * uniforms.H);
    let current_channel_number = global_idx % uniforms.C;

    let scale_offset = current_image_number * uniforms.C + current_channel_number;
    let scale = scale_input[scale_offset];
    output[global_idx] = fma(input[global_idx], ${we(0)}, ${we(1)});
  }`;
          };
          o.compute({
            name: "InstanceNormalizationNHWC",
            shaderCache: {
              hint: `${z}`,
              inputDependencies: q
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: S,
                  dataType: v[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(B / 64)
              },
              programUniforms: V
            }),
            getShaderSource: ge
          }, {
            inputs: [
              v[0],
              se
            ]
          });
        }, Vc = (o, v) => {
          v.format === "NHWC" ? jc(o, o.inputs, v) : Bc(o, o.inputs, v);
        };
      }), Uc, Gc, $s, wp = g(() => {
        Kt(), ce(), fn(), Uc = (o) => {
          if (!o || o.length < 2)
            throw new Error("layerNorm requires at least 2 inputs.");
        }, Gc = (o, v, b) => {
          let T = v.simplified, S = o[0].dims, I = o[1], O = !T && o[2], L = S, z = Xe.normalizeAxis(v.axis, S.length), B = Xe.sizeToDimension(S, z), V = Xe.sizeFromDimension(S, z), q = Xe.size(I.dims), X = O ? Xe.size(O.dims) : 0;
          if (q !== V || O && X !== V)
            throw new Error(`Size of X.shape()[axis:] == ${V}.
       Size of scale and bias (if provided) must match this.
       Got scale size of ${q} and bias size of ${X}`);
          let ee = [];
          for (let Se = 0; Se < S.length; ++Se)
            Se < z ? ee.push(S[Se]) : ee.push(1);
          let ne = Mn(V), se = [
            "type",
            "type"
          ], ge = [
            {
              type: 12,
              data: B
            },
            {
              type: 1,
              data: V
            },
            {
              type: 12,
              data: Math.floor(V / ne)
            },
            {
              type: 1,
              data: v.epsilon
            }
          ];
          O && se.push("type");
          let ue = b > 1, re = b > 2, Te = (Se) => {
            let ze = Ke(o[0].dataType), Le = [
              ct("x", o[0].dataType, o[0].dims, ne),
              ct("scale", I.dataType, I.dims, ne)
            ];
            O && Le.push(ct("bias", O.dataType, O.dims, ne)), Le.push(Wt("output", o[0].dataType, L, ne)), ue && Le.push(Wt("mean_data_output", 1, ee)), re && Le.push(Wt("inv_std_output", 1, ee));
            let nt = [
              {
                name: "norm_count",
                type: "u32"
              },
              {
                name: "norm_size",
                type: "f32"
              },
              {
                name: "norm_size_vectorized",
                type: "u32"
              },
              {
                name: "epsilon",
                type: "f32"
              }
            ];
            return `
  ${Se.registerUniforms(nt).declareVariables(...Le)}
  ${Se.mainStart()}
    ${Se.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.norm_count")}
    let offset = global_idx * uniforms.norm_size_vectorized;
    var mean_vector = ${xr("f32", ne)};
    var mean_square_vector = ${xr("f32", ne)};

    for (var h: u32 = 0u; h < uniforms.norm_size_vectorized; h++) {
      let value = ${vr(ze, ne, "x[h + offset]")};
      mean_vector += value;
      mean_square_vector += value * value;
    }
    let mean = ${Pr("mean_vector", ne)} / uniforms.norm_size;
    let inv_std_dev = inverseSqrt(${Pr("mean_square_vector", ne)} / uniforms.norm_size ${T ? "" : "- mean * mean"} + uniforms.epsilon);

    for (var j: u32 = 0; j < uniforms.norm_size_vectorized; j++) {
      let f32input = ${vr(ze, ne, "x[j + offset]")};
      let f32scale = ${vr(ze, ne, "scale[j]")};
      output[j + offset] = ${Le[0].type.value}((f32input ${T ? "" : "- mean"}) * inv_std_dev * f32scale
        ${O ? `+ ${vr(ze, ne, "bias[j]")}` : ""}
      );
    }

    ${ue ? "mean_data_output[global_idx] = mean" : ""};
    ${re ? "inv_std_output[global_idx] = inv_std_dev" : ""};
  }`;
          }, we = [
            {
              dims: L,
              dataType: o[0].dataType
            }
          ];
          return ue && we.push({
            dims: ee,
            dataType: 1
          }), re && we.push({
            dims: ee,
            dataType: 1
          }), {
            name: "LayerNormalization",
            shaderCache: {
              hint: `${ne};${b};${T}`,
              inputDependencies: se
            },
            getRunData: () => ({
              outputs: we,
              dispatchGroup: {
                x: Math.ceil(B / 64)
              },
              programUniforms: ge
            }),
            getShaderSource: Te
          };
        }, $s = (o, v) => {
          Uc(o.inputs), o.compute(Gc(o.inputs, v, o.outputCount));
        };
      }), Wc, qc, Nd = g(() => {
        ce(), vs(), Wo(), Wc = (o) => {
          if (!o || o.length !== 2)
            throw new Error("MatMul requires 2 inputs.");
          if (o[0].dims[o[0].dims.length - 1] !== o[1].dims[o[1].dims.length - 2])
            throw new Error("shared dimension does not match.");
        }, qc = (o) => {
          Wc(o.inputs);
          let v = dr.calcShape(o.inputs[0].dims, o.inputs[1].dims, true);
          if (!v)
            throw new Error("Can't use matmul on the given tensors");
          let b = v[v.length - 1], T = o.inputs[0].dims[o.inputs[0].dims.length - 1];
          if (b < 8 && T < 8)
            o.compute(Bo(o.inputs, {
              activation: ""
            }, v));
          else {
            let S = v[v.length - 2], I = Xe.size(o.inputs[0].dims.slice(0, -2)), O = Xe.size(o.inputs[1].dims.slice(0, -2));
            if (I !== 1 && S === 1 && O === 1) {
              let L = o.inputs[0].reshape([
                1,
                I,
                T
              ]), z = o.inputs[1].reshape([
                1,
                T,
                b
              ]), B = [
                1,
                I,
                b
              ], V = [
                L,
                z
              ];
              o.compute(ss(V, {
                activation: ""
              }, v, B), {
                inputs: V
              });
            } else
              o.compute(ss(o.inputs, {
                activation: ""
              }, v));
          }
        };
      }), Hc, Kc, gi, Yc, Xc, Qc = g(() => {
        Kt(), ce(), Qt(), fn(), Hc = (o, v) => {
          if (o.length < 3 || o.length > 4)
            throw new Error("MatMulNBits requires 3 or 4 inputs");
          let b = o[0], T = b.dims.length;
          if (b.dims[T - 1] !== v.k)
            throw new Error("The last dim of input shape does not match the k value");
          let S = Math.floor((v.k + v.blockSize - 1) / v.blockSize), I = v.blockSize / 8 * v.bits, O = o[1];
          if (!Xe.areEqual(O.dims, [
            v.n,
            S,
            I
          ]))
            throw new Error("The second inputs must be 3D tensor with shape N X nBlocksPerCol X blobSize");
          let L = o[2].dims;
          if (Xe.size(L) !== v.n * S)
            throw new Error("scales input size error.");
          if (o.length === 4) {
            let z = o[3].dims, B = v.bits > 4 ? v.n * S : v.n * Math.floor((S + 1) / 2);
            if (Xe.size(z) !== B)
              throw new Error("zeroPoints input size error.");
          }
        }, Kc = (o, v) => {
          let b = o[0].dims, T = b.length, S = b[T - 2], I = v.k, O = v.n, L = b.slice(0, T - 2), z = Xe.size(L), B = o[1].dims[2] / 4, V = o[0].dataType, q = Mn(v.k), X = Mn(B), ee = Mn(O), ne = L.concat([
            S,
            O
          ]), se = S > 1 && O / ee % 2 === 0 ? 2 : 1, ge = Xe.size(ne) / ee / se, ue = 64, re = [], Te = [
            z,
            S,
            I / q
          ], we = Xe.convertShape(o[1].dims).slice();
          we.splice(-1, 1, B / X), re.push(...kt(Te)), re.push(...kt(we)), re.push(...kt(o[2].dims)), o.length === 4 && re.push(...kt(Xe.convertShape(o[3].dims)));
          let Se = [
            z,
            S,
            O / ee
          ];
          re.push(...kt(Se));
          let ze = (Le) => {
            let nt = Te.length, st = ct("a", o[0].dataType, nt, q), Mt = ct("b", 12, we.length, X), Ut = ct("scales", o[2].dataType, o[2].dims.length), Yt = [
              st,
              Mt,
              Ut
            ], xt = o.length === 4 ? ct("zero_points", 12, o[3].dims.length) : void 0;
            xt && Yt.push(xt);
            let hn = Se.length, yn = Wt("output", o[0].dataType, hn, ee), $t = Ke(o[0].dataType), nn = (() => {
              switch (q) {
                case 1:
                  return `array<${$t}, 8>`;
                case 2:
                  return `mat4x2<${$t}>`;
                case 4:
                  return `mat2x4<${$t}>`;
                default:
                  throw new Error(`${q}-component is not supported.`);
              }
            })(), wn = () => {
              let ft = `
          // reuse a data
            var input_offset = ${st.indicesToOffset(`${st.type.indices}(batch, row, word_offset)`)};
            var a_data: ${nn};
            for (var j: u32 = 0; j < ${8 / q}; j++) {
              a_data[j] = ${st.getByOffset("input_offset")};
              input_offset++;
            }
          `;
              for (let Dt = 0; Dt < ee * se; Dt++)
                ft += `
            b_value = ${X === 1 ? `b${Dt}_data` : `b${Dt}_data[i]`};
            b_value_lower = unpack4xU8(b_value & b_mask);
            b_value_upper = unpack4xU8((b_value >> 4) & b_mask);
            b_quantized_values = ${nn}(${Array.from({
                  length: 4
                }, (an, vn) => `${$t}(b_value_lower[${vn}]), ${$t}(b_value_upper[${vn}])`).join(", ")});
            b_dequantized_values = ${q === 1 ? `${nn}(${Array.from({
                  length: 8
                }, (an, vn) => `(b_quantized_values[${vn}] - ${xt ? `zero_point${Dt}` : "zero_point"}) * scale${Dt}`).join(", ")});` : `(b_quantized_values - ${nn}(${Array(8).fill(`${xt ? `zero_point${Dt}` : "zero_point"}`).join(",")})) * scale${Dt};`};
            workgroup_shared[local_id.x * ${se} + ${Math.floor(Dt / ee)}]${ee > 1 ? `[${Dt % ee}]` : ""} += ${Array.from({
                  length: 8 / q
                }, (an, vn) => `${q === 1 ? `a_data[${vn}] * b_dequantized_values[${vn}]` : `dot(a_data[${vn}], b_dequantized_values[${vn}])`}`).join(" + ")};
          `;
              return ft;
            }, rn = () => {
              let ft = `
            var col_index = col * ${ee};
            ${xt ? `
            let zero_point_bytes_per_col = (nBlocksPerCol + 1) / 2;
            var zero_point_byte_count: u32;
            var zero_point_word_index: u32;
            var zero_point_byte_offset: u32;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            var zero_point_bits_offset: u32;
            var zero_point_word: u32;` : `
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${$t}(8);`}
            `;
              for (let Dt = 0; Dt < ee * se; Dt++)
                ft += `
            let scale${Dt} = ${Ut.getByOffset("col_index * nBlocksPerCol + block")};
            ${xt ? `
            zero_point_byte_count = col_index * zero_point_bytes_per_col + (block >> 0x1u);
            zero_point_word_index = zero_point_byte_count >> 0x2u;
            zero_point_byte_offset = zero_point_byte_count & 0x3u;
            zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            zero_point_word = ${xt.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point${Dt} = ${$t}((zero_point_word) & 0xFu);` : ""}
            col_index += 1;`;
              return ft;
            }, xn = () => {
              let ft = `col_index = col * ${ee};`;
              for (let Dt = 0; Dt < ee * se; Dt++)
                ft += `
            let b${Dt}_data = ${Mt.getByIndices(`${Mt.type.indices}(col_index, block, word)`)};
            col_index += 1;`;
              return ft += `
            var b_value: u32;
            let b_mask: u32 = 0x0F0F0F0Fu;
            var b_value_lower: vec4<u32>;
            var b_value_upper: vec4<u32>;
            var b_quantized_values: ${nn};
            var b_dequantized_values: ${nn};`, ft;
            };
            return `
        var<workgroup> workgroup_shared: array<${yn.type.value}, ${se * ue}>;
        ${Le.declareVariables(...Yt, yn)}
        ${Le.mainStart([
              ue,
              1,
              1
            ])}
          let output_indices = ${yn.offsetToIndices(`(global_idx / ${ue}) * ${se}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let nBlocksPerCol = uniforms.b_shape[1];

          for (var block = local_id.x; block < nBlocksPerCol; block += ${ue}) {
            //process one block
            var word_offset: u32 = block * ${v.blockSize / q};
            ${rn()}
            for (var word: u32 = 0; word < ${B}; word += ${X}) {
              ${xn()}
              for (var i: u32 = 0; i < ${X}; i++) {
                ${wn()}
                word_offset += ${8 / q};
              }
            }
          }
          workgroupBarrier();

          if (local_id.x < ${se}) {
            var output_value: ${yn.type.value} = ${yn.type.value}(0);
            var workgroup_shared_offset: u32 = local_id.x;
            for (var b: u32 = 0u; b < ${ue}u; b++) {
              output_value += workgroup_shared[workgroup_shared_offset];
              workgroup_shared_offset += ${se};
            }
            ${yn.setByIndices(`${yn.type.indices}(batch, row, col + local_id.x)`, "output_value")};
          }
        }`;
          };
          return {
            name: "MatMulNBits",
            shaderCache: {
              hint: `${v.blockSize};${v.bits};${q};${X};${ee};${se};${ue}`,
              inputDependencies: Array(o.length).fill("rank")
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: ne,
                  dataType: V
                }
              ],
              dispatchGroup: {
                x: ge
              },
              programUniforms: re
            }),
            getShaderSource: ze
          };
        }, gi = (o, v) => {
          let b = o[0].dims, T = b.length, S = b[T - 2], I = v.k, O = v.n, L = b.slice(0, T - 2), z = Xe.size(L), B = o[1].dims[2] / 4, V = o[0].dataType, q = Mn(v.k), X = Mn(B), ee = L.concat([
            S,
            O
          ]), ne = 128, se = O % 8 === 0 ? 8 : O % 4 === 0 ? 4 : 1, ge = ne / se, ue = ge * X * 8, re = ue / q, Te = ue / v.blockSize, we = Xe.size(ee) / se, Se = [], ze = [
            z,
            S,
            I / q
          ], Le = Xe.convertShape(o[1].dims).slice();
          Le.splice(-1, 1, B / X), Se.push(...kt(ze)), Se.push(...kt(Le)), Se.push(...kt(o[2].dims)), o.length === 4 && Se.push(...kt(Xe.convertShape(o[3].dims)));
          let nt = [
            z,
            S,
            O
          ];
          Se.push(...kt(nt));
          let st = (Mt) => {
            let Ut = ze.length, Yt = ct("a", o[0].dataType, Ut, q), xt = ct("b", 12, Le.length, X), hn = ct("scales", o[2].dataType, o[2].dims.length), yn = [
              Yt,
              xt,
              hn
            ], $t = o.length === 4 ? ct("zero_points", 12, o[3].dims.length) : void 0;
            $t && yn.push($t);
            let nn = nt.length, wn = Wt("output", o[0].dataType, nn), rn = Ke(o[0].dataType), xn = () => {
              switch (q) {
                case 1:
                  return `
          let a_data0 = vec4<${rn}>(sub_a[word_offset], sub_a[word_offset + 1], sub_a[word_offset + 2], sub_a[word_offset + 3]);
          let a_data1 = vec4<${rn}>(sub_a[word_offset + 4], sub_a[word_offset + 5], sub_a[word_offset + 6], sub_a[word_offset + 7]);`;
                case 2:
                  return `
          let a_data0 = vec4<${rn}>(sub_a[word_offset], sub_a[word_offset + 1]);
          let a_data1 = vec4<${rn}>(sub_a[word_offset + 2], sub_a[word_offset + 3]);`;
                case 4:
                  return `
          let a_data0 = sub_a[word_offset];
          let a_data1 = sub_a[word_offset + 1];`;
                default:
                  throw new Error(`${q}-component is not supported.`);
              }
            };
            return `
        var<workgroup> sub_a: array<${Yt.type.value}, ${re}>;
        var<workgroup> inter_results: array<array<${wn.type.value}, ${ge}>, ${se}>;
        ${Mt.declareVariables(...yn, wn)}
        ${Mt.mainStart([
              ge,
              se,
              1
            ])}
          let output_indices = ${wn.offsetToIndices(`workgroup_index * ${se}`)};
          let col = output_indices[2];
          let row = output_indices[1];
          let batch = output_indices[0];
          let n_blocks_per_col = uniforms.b_shape[1];
          let num_tiles =  (n_blocks_per_col - 1) / ${Te} + 1;

          // Loop over shared dimension.
          for (var tile: u32 = 0; tile < num_tiles; tile += 1) {
            let a_col_start = tile * ${re};
            // load one tile A data into shared memory.
            for (var a_offset = local_idx; a_offset < ${re}; a_offset += ${ne})
            {
              let a_col = a_col_start + a_offset;
              if (a_col < uniforms.a_shape[2])
              {
                sub_a[a_offset] = ${Yt.getByIndices(`${Yt.type.indices}(batch, row, a_col)`)};
              } else {
                sub_a[a_offset] = ${Yt.type.value}(0);
              }
            }
            workgroupBarrier();

            // each thread process one block
            let b_row = col + local_id.y;
            let block = tile * ${Te} + local_id.x;
            ${$t ? `
            let zero_point_bytes_per_col = (n_blocks_per_col + 1) / 2;
            let zero_point_byte_count = b_row * zero_point_bytes_per_col + (block >> 0x1u);
            let zero_point_word_index = zero_point_byte_count >> 0x2u;
            let zero_point_byte_offset = zero_point_byte_count & 0x3u;
            let zero_point_nibble_offset: u32 = block & 0x1u;
            let zero_point_bits_offset = (zero_point_byte_offset << 3) + (zero_point_nibble_offset << 2);
            let zero_point_word = ${$t.getByOffset("zero_point_word_index")} >> zero_point_bits_offset;
            let zero_point = ${rn}((zero_point_word) & 0xFu);` : `
            // The default zero point is 8 for unsigned 4-bit quantization.
            let zero_point = ${rn}(8);`}
            let scale = ${hn.getByOffset("b_row * n_blocks_per_col + block")};
            let b_data = ${xt.getByIndices(`${xt.type.indices}(b_row, block, 0)`)};
            var word_offset = local_id.x * ${v.blockSize / q};
            for (var i: u32 = 0; i < ${X}; i++) {
              ${xn()}
              let b_value = ${X === 1 ? "b_data" : "b_data[i]"};
              let b_value_lower = unpack4xU8(b_value & 0x0F0F0F0Fu);
              let b_value_upper = unpack4xU8((b_value >> 4) & 0x0F0F0F0Fu);
              let b_quantized_values = mat2x4<${rn}>(${Array.from({
              length: 4
            }, (ft, Dt) => `${rn}(b_value_lower[${Dt}]), ${rn}(b_value_upper[${Dt}])`).join(", ")});
              let b_dequantized_values = (b_quantized_values - mat2x4<${rn}>(${Array(8).fill("zero_point").join(",")})) * scale;
              inter_results[local_id.y][local_id.x] += ${Array.from({
              length: 2
            }, (ft, Dt) => `${`dot(a_data${Dt}, b_dequantized_values[${Dt}])`}`).join(" + ")};
              word_offset += ${8 / q};
            }
            workgroupBarrier();
          }

          if (local_idx < ${se}) {
            var output_value: ${wn.type.value} = ${wn.type.value}(0);
            for (var b = 0u; b < ${ge}; b++) {
              output_value += inter_results[local_idx][b];
            }
            if (col + local_idx < uniforms.output_shape[2])
            {
              ${wn.setByIndices(`${wn.type.indices}(batch, row, col + local_idx)`, "output_value")}
            }
          }
        }`;
          };
          return {
            name: "BlockwiseMatMulNBits32",
            shaderCache: {
              hint: `${v.blockSize};${q};${X};${ge};${se}`,
              inputDependencies: Array(o.length).fill("rank")
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: ee,
                  dataType: V
                }
              ],
              dispatchGroup: {
                x: we
              },
              programUniforms: Se
            }),
            getShaderSource: st
          };
        }, Yc = (o, v) => {
          Hc(o.inputs, v), v.blockSize === 32 && o.adapterInfo.isVendor("intel") && o.adapterInfo.isArchitecture("gen-12lp") ? o.compute(gi(o.inputs, v)) : o.compute(Kc(o.inputs, v));
        }, Xc = (o) => Pt(o);
      }), Jc, Zc, bi, eu, tu, wi, nu, ru, Fs, Rd = g(() => {
        Kt(), ce(), fn(), Jc = (o) => {
          if (!o || o.length < 1)
            throw new Error("Too few inputs");
          if (o[0].dataType !== 1 && o[0].dataType !== 10)
            throw new Error("Input type must be float or float16.");
          if (o.length >= 2) {
            let v = o[0].dims.length * 2 === o[1].dims[0];
            if (o.length === 4 && (v = o[3].dims[0] * 2 === o[1].dims[0]), !v)
              throw new Error("The pads should be a 1D tensor of shape [2 * input_rank] or [2 * num_axes].");
          }
        }, Zc = (o, v, b) => {
          let T = "";
          for (let S = v - 1; S >= 0; --S)
            T += `
            k = i32(${o.indicesGet("indices", S)}) - ${Ht("uniforms.pads", S, b)};
            if (k < 0) {
              break;
            }
            if (k >= i32(${Ht("uniforms.x_shape", S, v)})) {
              break;
            }
            offset += k * i32(${Ht("uniforms.x_strides", S, v)});
        `;
          return `
          value = ${o.type.value}(uniforms.constant_value);
          for (var i = 0; i < 1; i++) {
            var offset = 0;
            var k = 0;
            ${T}
            value = x[offset];
          }
      `;
        }, bi = (o, v, b) => {
          let T = "";
          for (let S = v - 1; S >= 0; --S)
            T += `
                k = i32(${o.indicesGet("indices", S)}) - ${Ht("uniforms.pads", S, b)};
                if (k < 0) {
                  k = -k;
                }
                {
                  let _2n_1 = 2 * (i32(${Ht("uniforms.x_shape", S, v)}) - 1);
                  k = k % _2n_1;
                  if(k >= i32(${Ht("uniforms.x_shape", S, v)})) {
                    k = _2n_1 - k;
                  }
                }
                offset += k * i32(${Ht("uniforms.x_strides", S, v)});
            `;
          return `
              var offset = 0;
              var k = 0;
              ${T}
              value = x[offset];
          `;
        }, eu = (o, v, b) => {
          let T = "";
          for (let S = v - 1; S >= 0; --S)
            T += `
                k = i32(${o.indicesGet("indices", S)}) - ${Ht("uniforms.pads", S, b)};
                if (k < 0) {
                  k = 0;
                }
                if (k >= i32(${Ht("uniforms.x_shape", S, v)})) {
                  k = i32(${Ht("uniforms.x_shape", S, v)}) - 1;
                }
                offset += k * i32(${Ht("uniforms.x_strides", S, v)});
            `;
          return `
              var offset = 0;
              var k = 0;
              ${T}
              value = x[offset];
          `;
        }, tu = (o, v, b) => {
          let T = "";
          for (let S = v - 1; S >= 0; --S)
            T += `
                k = i32(${o.indicesGet("indices", S)}) - ${Ht("uniforms.pads", S, b)};
                if (k < 0)  {
                  k += i32(${Ht("uniforms.x_shape", S, v)}]);
                }
                if (k >= i32(${Ht("uniforms.x_shape", S, v)})) {
                  k -= i32(${Ht("uniforms.x_shape", S, v)});
                }
                offset += k * i32(${Ht("uniforms.x_strides", S, v)});
            `;
          return `
              var offset = 0;
              var k = 0;
              ${T}
              value = x[offset];
          `;
        }, wi = (o, v, b) => {
          switch (b.mode) {
            case 0:
              return Zc(o, v, b.pads.length);
            case 1:
              return bi(o, v, b.pads.length);
            case 2:
              return eu(o, v, b.pads.length);
            case 3:
              return tu(o, v, b.pads.length);
            default:
              throw new Error("Invalid mode");
          }
        }, nu = (o, v) => {
          let b = Xe.padShape(o[0].dims.slice(), v.pads), T = o[0].dims, S = Xe.size(b), I = [
            {
              type: 12,
              data: S
            },
            {
              type: 6,
              data: v.pads
            }
          ], O = o.length >= 3 && o[2].data;
          v.mode === 0 && I.push({
            type: O ? o[2].dataType : 1,
            data: v.value
          }), I.push(...kt(o[0].dims, b));
          let L = [
            "rank"
          ], z = (B) => {
            let V = Wt("output", o[0].dataType, b.length), q = ct("x", o[0].dataType, T.length), X = q.type.value, ee = wi(V, T.length, v), ne = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "pads",
                type: "i32",
                length: v.pads.length
              }
            ];
            return v.mode === 0 && ne.push({
              name: "constant_value",
              type: O ? X : "f32"
            }), `
            ${B.registerUniforms(ne).declareVariables(q, V)}
            ${B.mainStart()}
            ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}

            let indices = ${V.offsetToIndices("global_idx")};

            var value = ${X}(0);
            ${ee}
            output[global_idx] = value;
        }`;
          };
          return {
            name: "Pad",
            shaderCache: {
              hint: `${v.mode}${O}`,
              inputDependencies: L
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: b,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(Xe.size(b) / 64)
              },
              programUniforms: I
            }),
            getShaderSource: z
          };
        }, ru = (o, v) => {
          if (o.length > 1) {
            let b = o[1].getBigInt64Array(), T = o.length >= 3 && o[2].data ? o[2].dataType === 10 ? o[2].getUint16Array()[0] : o[2].getFloat32Array()[0] : 0, S = o[0].dims.length, I = new Int32Array(2 * S).fill(0);
            if (o.length >= 4) {
              let L = o[3].getBigInt64Array();
              for (let z = 0; z < L.length; z++)
                I[Number(L[z])] = Number(b[z]), I[Number(L[z]) + S] = Number(b[z + L.length]);
            } else
              b.forEach((L, z) => I[Number(z)] = Number(L));
            let O = [];
            return I.forEach((L) => O.push(L)), {
              mode: v.mode,
              value: T,
              pads: O
            };
          } else
            return v;
        }, Fs = (o, v) => {
          Jc(o.inputs);
          let b = ru(o.inputs, v);
          o.compute(nu(o.inputs, b), {
            inputs: [
              0
            ]
          });
        };
      }), cs, yi, xi, Ds, us, zd, su, vi, Ls, ou, iu, Ns, au, lu, Rs, Bd, jd, Ti, zs, Vd = g(() => {
        At(), Kt(), ce(), fn(), cs = (o) => {
          if (N.webgpu.validateInputContent && (!o || o.length !== 1))
            throw new Error("Pool ops requires 1 input.");
        }, yi = (o, v, b) => {
          let T = v.format === "NHWC", S = o.dims.slice();
          T && S.splice(1, 0, S.pop());
          let I = Object.hasOwnProperty.call(v, "dilations"), O = v.kernelShape.slice(), L = v.strides.slice(), z = I ? v.dilations.slice() : [], B = v.pads.slice();
          yr.adjustPoolAttributes(b, S, O, L, z, B);
          let V = yr.computePoolOutputShape(b, S, L, z, O, B, v.autoPad), q = Object.assign({}, v);
          I ? Object.assign(q, {
            kernelShape: O,
            strides: L,
            pads: B,
            dilations: z,
            cacheKey: v.cacheKey
          }) : Object.assign(q, {
            kernelShape: O,
            strides: L,
            pads: B,
            cacheKey: v.cacheKey
          });
          let X = V.slice();
          return X.push(X.splice(1, 1)[0]), [
            q,
            T ? X : V
          ];
        }, xi = (o, v) => {
          let b = v.format === "NHWC", T = Xe.size(o), S = Xe.size(v.kernelShape), I = [
            {
              type: 12,
              data: T
            },
            {
              type: 12,
              data: S
            }
          ], O = [
            {
              name: "outputSize",
              type: "u32"
            },
            {
              name: "kernelSize",
              type: "u32"
            }
          ];
          if (v.kernelShape.length <= 2) {
            let L = v.kernelShape[v.kernelShape.length - 1], z = v.strides[v.strides.length - 1], B = v.pads[v.pads.length / 2 - 1], V = v.pads[v.pads.length - 1], q = !!(B + V);
            I.push({
              type: 12,
              data: L
            }, {
              type: 12,
              data: z
            }, {
              type: 12,
              data: B
            }, {
              type: 12,
              data: V
            }), O.push({
              name: "kw",
              type: "u32"
            }, {
              name: "sw",
              type: "u32"
            }, {
              name: "pwStart",
              type: "u32"
            }, {
              name: "pwEnd",
              type: "u32"
            });
            let X = false;
            if (v.kernelShape.length === 2) {
              let ee = v.kernelShape[v.kernelShape.length - 2], ne = v.strides[v.strides.length - 2], se = v.pads[v.pads.length / 2 - 2], ge = v.pads[v.pads.length - 2];
              X = !!(se + ge), I.push({
                type: 12,
                data: ee
              }, {
                type: 12,
                data: ne
              }, {
                type: 12,
                data: se
              }, {
                type: 12,
                data: ge
              }), O.push({
                name: "kh",
                type: "u32"
              }, {
                name: "sh",
                type: "u32"
              }, {
                name: "phStart",
                type: "u32"
              }, {
                name: "phEnd",
                type: "u32"
              });
            }
            return [
              I,
              O,
              true,
              q,
              X
            ];
          } else {
            if (b)
              throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");
            let L = Xe.computeStrides(v.kernelShape);
            I.push({
              type: 12,
              data: L
            }, {
              type: 12,
              data: v.pads
            }, {
              type: 12,
              data: v.strides
            }), O.push({
              name: "kernelStrides",
              type: "u32",
              length: L.length
            }, {
              name: "pads",
              type: "u32",
              length: v.pads.length
            }, {
              name: "strides",
              type: "u32",
              length: v.strides.length
            });
            let z = v.pads.reduce((B, V) => B + V);
            return [
              I,
              O,
              !!z,
              false,
              false
            ];
          }
        }, Ds = (o, v, b, T, S, I, O, L, z, B, V, q) => {
          let X = S.format === "NHWC", ee = v.type.value, ne = Wt("output", v.type.tensor, T);
          if (S.kernelShape.length <= 2) {
            let se = "", ge = "", ue = "", re = b - (X ? 2 : 1);
            if (V ? se = `
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${re}] = indices[${re}] * uniforms.sw - uniforms.pwStart + i;
                  if (xIndices[${re}] < 0 || xIndices[${re}]
                      >= uniforms.x_shape[${re}]) {
                    pad++;
                    continue;
                  }
                  let x_val = x[${v.indicesToOffset("xIndices")}];
                  ${I}
                }` : se = `
                for (var i: u32 = 0u; i < uniforms.kw; i++) {
                  xIndices[${re}] = indices[${re}] * uniforms.sw - uniforms.pwStart + i;
                  let x_val = x[${v.indicesToOffset("xIndices")}];
                  ${I}
                }`, S.kernelShape.length === 2) {
              let Te = b - (X ? 3 : 2);
              q ? ge = `
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${Te}] = indices[${Te}] * uniforms.sh - uniforms.phStart + j;
                  if (xIndices[${Te}] < 0 || xIndices[${Te}] >= uniforms.x_shape[${Te}]) {
                    pad += i32(uniforms.kw);
                    continue;
                  }
              ` : ge = `
                for (var j: u32 = 0u; j < uniforms.kh; j++) {
                  xIndices[${Te}] = indices[${Te}] * uniforms.sh - uniforms.phStart + j;
                `, ue = `
              }
            `;
            }
            return `
            ${o.registerUniforms(z).declareVariables(v, ne)}

            ${o.mainStart()}
              ${o.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}

              let indices = ${ne.offsetToIndices("global_idx")};
              var xIndices = ${ne.offsetToIndices("global_idx")};

              var value = ${ee}(${L});
              var pad = 0;
              ${ge}
              ${se}
              ${ue}
              ${O}

              output[global_idx] = value;
            }`;
          } else {
            if (X)
              throw new Error("Pooling with kernelShape.length > 2 is not supported for NHWC format.");
            let se = S.kernelShape.length, ge = S.pads.length, ue = "";
            return B ? ue = `
                if (xIndices[j] >= uniforms.x_shape[j]) {
                  pad++;
                  isPad = true;
                  break;
                }
              }
              if (!isPad) {
                let x_val = x[${v.indicesToOffset("xIndices")}];
                ${I}
              }` : ue = `
              }
              let x_val = x[${v.indicesToOffset("xIndices")}];
              ${I}
            `, `
            ${o.registerUniforms(z).declareVariables(v, ne)}

            ${o.mainStart()}
              ${o.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
              let indices = ${ne.offsetToIndices("global_idx")};
              var xIndices = ${ne.offsetToIndices("global_idx")};

              var offsets: array<u32, ${se}>;

              var value = ${ee}(${L});
              var pad = 0;
              var isPad = false;

              for (var i: u32 = 0u; i < uniforms.kernelSize; i++) {
                var offset = i;
                for (var j = 0u; j < ${se - 1}u; j++) {
                  offsets[j] = offset / ${Ht("uniforms.kernelStrides", "j", se)};
                  offset -= offsets[j] * ${Ht("uniforms.kernelStrides", "j", se)};
                }
                offsets[${se - 1}] = offset;

                isPad = false;
                for (var j = ${b - se}u; j < ${b}u; j++) {
                  xIndices[j] = indices[j] * ${Ht("uniforms.strides", `j - ${b - se}u`, se)}
                    + offsets[j - ${b - se}u] - ${Ht("uniforms.pads", "j - 2u", ge)};
                  ${ue}
              }
              ${O}

              output[global_idx] = value;
            }`;
          }
        }, us = (o) => `${o.format};${o.ceilMode};${o.autoPad};${o.kernelShape.length}`, zd = (o) => `${us(o)};${o.countIncludePad}`, su = (o) => `${us(o)};${o.storageOrder};${o.dilations}`, vi = (o) => ({
          format: o.format,
          autoPad: [
            "NOTSET",
            "VALID",
            "SAME_UPPER",
            "SAME_LOWER"
          ][o.auto_pad],
          ceilMode: o.ceil_mode,
          kernelShape: o.kernel_shape,
          strides: o.strides,
          pads: o.pads
        }), Ls = (o, v, b, T) => {
          let [S, I] = yi(v, T, b), O = ct("x", v.dataType, v.dims.length), L = O.type.value, z = "value += x_val;", B = "";
          S.countIncludePad ? B += `value /= ${L}(uniforms.kernelSize);` : B += `value /= ${L}(i32(uniforms.kernelSize) - pad);`;
          let [V, q, X, ee, ne] = xi(I, S);
          V.push(...kt(v.dims, I));
          let se = [
            "rank"
          ];
          return {
            name: o,
            shaderCache: {
              hint: `${T.cacheKey};${X};${ee};${ne}`,
              inputDependencies: se
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: I,
                  dataType: v.dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(Xe.size(I) / 64)
              },
              programUniforms: V
            }),
            getShaderSource: (ge) => Ds(ge, O, v.dims.length, I.length, S, z, B, 0, q, X, ee, ne)
          };
        }, ou = (o) => {
          let v = o.count_include_pad !== 0, b = vi(o);
          if (b.ceilMode !== 0)
            throw new Error("using ceil() in shape computation is not yet supported for AveragePool");
          let T = {
            countIncludePad: v,
            ...b,
            cacheKey: ""
          };
          return {
            ...T,
            cacheKey: zd(T)
          };
        }, iu = (o, v) => {
          cs(o.inputs), o.compute(Ls("AveragePool", o.inputs[0], false, v));
        }, Ns = {
          autoPad: "",
          ceilMode: 0,
          countIncludePad: false,
          kernelShape: [],
          strides: [],
          pads: [],
          storageOrder: 0,
          dilations: []
        }, au = (o) => {
          let v = o.format;
          return {
            format: v,
            ...Ns,
            cacheKey: v
          };
        }, lu = (o, v) => {
          cs(o.inputs), o.compute(Ls("GlobalAveragePool", o.inputs[0], true, v));
        }, Rs = (o, v, b, T) => {
          let [S, I] = yi(v, T, b), O = `
      value = max(x_val, value);
    `, L = "", z = ct("x", v.dataType, v.dims.length), B = [
            "rank"
          ], [V, q, X, ee, ne] = xi(I, S);
          return V.push(...kt(v.dims, I)), {
            name: o,
            shaderCache: {
              hint: `${T.cacheKey};${X};${ee};${ne}`,
              inputDependencies: B
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: I,
                  dataType: v.dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(Xe.size(I) / 64)
              },
              programUniforms: V
            }),
            getShaderSource: (se) => Ds(se, z, v.dims.length, I.length, S, O, L, v.dataType === 10 ? -65504 : -1e5, q, X, ee, ne)
          };
        }, Bd = (o, v) => {
          cs(o.inputs), o.compute(Rs("MaxPool", o.inputs[0], false, v));
        }, jd = (o) => {
          let v = o.storage_order, b = o.dilations, T = vi(o);
          if (v !== 0)
            throw new Error("column major storage order is not yet supported for MaxPool");
          if (T.ceilMode !== 0)
            throw new Error("using ceil() in shape computation is not yet supported for MaxPool");
          let S = {
            storageOrder: v,
            dilations: b,
            ...T,
            cacheKey: ""
          };
          return {
            ...S,
            cacheKey: su(S)
          };
        }, Ti = (o) => {
          let v = o.format;
          return {
            format: v,
            ...Ns,
            cacheKey: v
          };
        }, zs = (o, v) => {
          cs(o.inputs), o.compute(Rs("GlobalMaxPool", o.inputs[0], true, v));
        };
      }), cu, uu, Bs, du, Ud = g(() => {
        Kt(), ce(), Qt(), fn(), cu = (o, v) => {
          if (o.length < 2 || o.length > 3)
            throw new Error("DequantizeLinear requires 2 or 3 inputs.");
          if (o.length === 3 && o[1].dims === o[2].dims)
            throw new Error("x-scale and x-zero-point must have the same shape.");
          if (o.length === 3 && o[0].dataType !== o[2].dataType)
            throw new Error("x and x-zero-point must have the same data type.");
          if (o[0].dataType === 6 && o.length > 2)
            throw new Error("In the case of dequantizing int32 there is no zero point.");
          if (o[1].dims.length !== 0 && o[1].dims.length !== 1 && o[1].dims.length !== o[0].dims.length)
            throw new Error("scale input must be a scalar, a 1D tensor, or have the same rank as the input tensor.");
          if (o.length > 2) {
            if (o[0].dataType !== o[2].dataType)
              throw new Error("x and x-zero-point must have the same data type.");
            if (o[1].dims.length !== o[2].dims.length)
              throw new Error("scale and zero-point inputs must have the same rank.");
            if (!o[1].dims.map((b, T) => b === o[2].dims[T]).reduce((b, T) => b && T, true))
              throw new Error("scale and zero-point inputs must have the same shape.");
          }
          if (v.blockSize > 0) {
            if (o[1].dims.length === 0 || o[1].dims.length === 1 && o[1].dims[0] === 1)
              throw new Error("blockSize must be set only for block quantization.");
            if (!o[1].dims.map((S, I) => I === v.axis || S === o[0].dims[I]).reduce((S, I) => S && I, true))
              throw new Error("For block qunatization, scale input shape to match the input shape except for the axis");
            if (o[1].dims.length !== o[0].dims.length)
              throw new Error("For block qunatization the scale input rank must be the same as the x rank.");
            let b = o[0].dims[v.axis], T = o[1].dims[v.axis];
            if (v.blockSize < Math.ceil(b / T) || v.blockSize > Math.ceil(b / (T - 1) - 1))
              throw new Error("blockSize must be with in the range [ceil(dI / Si), ceil(dI / (Si - 1) - 1)].");
          }
        }, uu = (o, v) => {
          let b = Xe.normalizeAxis(v.axis, o[0].dims.length), T = o[0].dataType, S = T === 3, I = o[0].dims, O = o[1].dataType, L = Xe.size(I), z = T === 3 || T === 2, B = z ? [
            Math.ceil(Xe.size(o[0].dims) / 4)
          ] : o[0].dims, V = o[1].dims, q = o.length > 2 ? o[2] : void 0, X = q ? z ? [
            Math.ceil(Xe.size(q.dims) / 4)
          ] : q.dims : void 0, ee = V.length === 0 || V.length === 1 && V[0] === 1, ne = ee === false && V.length === 1, se = Mn(L), ge = ee && (!z || se === 4), ue = ge ? se : 1, re = ge && !z ? se : 1, Te = ct("input", z ? 12 : T, B.length, re), we = ct("scale", O, V.length), Se = q ? ct("zero_point", z ? 12 : T, X.length) : void 0, ze = Wt("output", O, I.length, ue), Le = [
            Te,
            we
          ];
          Se && Le.push(Se);
          let nt = [
            B,
            V
          ];
          q && nt.push(X);
          let st = [
            {
              type: 12,
              data: L / ue
            },
            {
              type: 12,
              data: b
            },
            {
              type: 12,
              data: v.blockSize
            },
            ...kt(...nt, I)
          ], Mt = (Ut) => {
            let Yt = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "axis",
                type: "u32"
              },
              {
                name: "block_size",
                type: "u32"
              }
            ];
            return `
      ${Ut.registerUniforms(Yt).declareVariables(...Le, ze)}
      ${Ut.mainStart()}
          ${Ut.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
          let output_indices = ${ze.offsetToIndices("global_idx")};

          // Set input x
          ${z ? `
            let input = ${Te.getByOffset("global_idx / 4")};
            let x_vec = ${S ? "unpack4xI8(input)" : "unpack4xU8(input)"};
            let x_value = ${ue === 1 ? "x_vec[global_idx % 4]" : "x_vec"};` : `let x_value = ${Te.getByOffset("global_idx")};`};

          // Set scale input
          ${ee ? `let scale_value= ${we.getByOffset("0")}` : ne ? `
            let scale_index = ${ze.indicesGet("output_indices", "uniforms.axis")};
            let scale_value= ${we.getByOffset("scale_index")};` : `
            var scale_indices: ${we.type.indices} = output_indices;
            let index = ${we.indicesGet("scale_indices", "uniforms.axis")} / uniforms.block_size;
            ${we.indicesSet("scale_indices", "uniforms.axis", "index")};
            let scale_value= ${we.getByIndices("scale_indices")};`};

          // Set zero-point input
          ${Se ? ee ? z ? `
                let zero_point_input = ${Se.getByOffset("0")};
                let zero_point_vec =  ${S ? "unpack4xI8(zero_point_input)" : "unpack4xU8(zero_point_input)"};
                let zero_point_value= zero_point_vec[0]` : `let zero_point_value = ${Se.getByOffset("0")}` : ne ? z ? `
                let zero_point_index = ${ze.indicesGet("output_indices", "uniforms.axis")};
                let zero_point_input = ${Se.getByOffset("zero_point_index / 4")};
                let zero_point_vec =  ${S ? "unpack4xI8(zero_point_input)" : "unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_index % 4]` : `
                let zero_point_index = ${ze.indicesGet("output_indices", "uniforms.axis")};
                let zero_point_value = ${Se.getByOffset("zero_point_index")};` : z ? `
                let zero_point_offset = ${we.indicesToOffset("scale_indices")};
                let zero_point_input = ${Se.getByOffset("zero_point_offset / 4")};
                let zero_point_vec = ${S ? "unpack4xI8(zero_point_input)" : "unpack4xU8(zero_point_input)"};
                let zero_point_value = zero_point_vec[zero_point_offset % 4];` : `let zero_point_value = ${Se.getByIndices("scale_indices")};` : `let zero_point_value = ${z ? S ? "i32" : "u32" : Te.type.value}(0);`};
      // Compute and write output
      ${ze.setByOffset("global_idx", `${ze.type.value}(x_value - zero_point_value) * scale_value`)};
      }`;
          };
          return {
            name: "DequantizeLinear",
            shaderCache: {
              hint: v.cacheKey,
              inputDependencies: Se ? [
                "rank",
                "rank",
                "rank"
              ] : [
                "rank",
                "rank"
              ]
            },
            getShaderSource: Mt,
            getRunData: () => ({
              outputs: [
                {
                  dims: I,
                  dataType: O
                }
              ],
              dispatchGroup: {
                x: Math.ceil(L / ue / 64),
                y: 1,
                z: 1
              },
              programUniforms: st
            })
          };
        }, Bs = (o, v) => {
          cu(o.inputs, v), o.compute(uu(o.inputs, v));
        }, du = (o) => Pt({
          axis: o.axis,
          blockSize: o.blockSize
        });
      }), pu, js, hu, Gd = g(() => {
        At(), Kt(), fn(), pu = (o, v, b) => {
          let T = o === v, S = o < v && b < 0, I = o > v && b > 0;
          if (T || S || I)
            throw new Error("Range these inputs' contents are invalid.");
        }, js = (o, v, b, T) => {
          let S = Math.abs(Math.ceil((v - o) / b)), I = [
            S
          ], O = S, L = [
            {
              type: 12,
              data: O
            },
            {
              type: T,
              data: o
            },
            {
              type: T,
              data: b
            },
            ...kt(I)
          ], z = (B) => {
            let V = Wt("output", T, I.length), q = V.type.value, X = [
              {
                name: "outputSize",
                type: "u32"
              },
              {
                name: "start",
                type: q
              },
              {
                name: "delta",
                type: q
              }
            ];
            return `
        ${B.registerUniforms(X).declareVariables(V)}
        ${B.mainStart()}
        ${B.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
        output[global_idx] = uniforms.start + ${q}(global_idx) * uniforms.delta;
      }`;
          };
          return {
            name: "Range",
            shaderCache: {
              hint: `${T}`
            },
            getShaderSource: z,
            getRunData: () => ({
              outputs: [
                {
                  dims: I,
                  dataType: T
                }
              ],
              dispatchGroup: {
                x: Math.ceil(O / 64)
              },
              programUniforms: L
            })
          };
        }, hu = (o) => {
          let v = 0, b = 0, T = 0;
          o.inputs[0].dataType === 6 ? (v = o.inputs[0].getInt32Array()[0], b = o.inputs[1].getInt32Array()[0], T = o.inputs[2].getInt32Array()[0]) : o.inputs[0].dataType === 1 && (v = o.inputs[0].getFloat32Array()[0], b = o.inputs[1].getFloat32Array()[0], T = o.inputs[2].getFloat32Array()[0]), N.webgpu.validateInputContent && pu(v, b, T), o.compute(js(v, b, T, o.inputs[0].dataType), {
            inputs: []
          });
        };
      }), fu, ds, Mi, _u, mu, gu, Wd = g(() => {
        Kt(), ce(), Qt(), fn(), fu = (o, v, b, T) => {
          if (o !== "none" && T !== "i32" && T !== "u32" && T !== "f32")
            throw new Error(`Input ${T} is not supported with reduction ${o}.`);
          let S = `{
                var oldValue = 0;
                loop {
                  let newValueF32 =`, I = `;
                  let newValue = bitcast<i32>(newValueF32);
                  let res = atomicCompareExchangeWeak(&${v}, oldValue, newValue);
                  if res.exchanged {
                    break;
                  }
                  oldValue = res.old_value;
                }
              }`;
          switch (o) {
            case "none":
              return `${v}=${b};`;
            case "add":
              return T === "i32" || T === "u32" ? `atomicAdd(&${v}, bitcast<${T}>(${b}));` : `
              ${S}bitcast<${T}>(oldValue) + (${b})${I}`;
            case "max":
              return T === "i32" || T === "u32" ? `atomicMax(&${v}, bitcast<${T}>(${b}));` : `
                ${S}max(bitcast<f32>(oldValue), (${b}))${I}`;
            case "min":
              return T === "i32" || T === "u32" ? `atomicMin(&${v}, bitcast<${T}>(${b}));` : `${S}min(bitcast<${T}>(oldValue), (${b}))${I}`;
            case "mul":
              return `${S}(bitcast<${T}>(oldValue) * (${b}))${I}`;
            default:
              throw new Error(`Reduction ${o} is not supported.`);
          }
        }, ds = (o, v) => `${o === 1 ? `
    let element_count_dim = uniforms.output_strides;
    let dim_value = uniforms.output_shape;` : `
    let element_count_dim = uniforms.output_strides[${v ? "i - indices_start" : "i"}];
    let dim_value = uniforms.output_shape[${v ? "i - indices_start" : "i"} + uniforms.last_index_dimension];`}
    
    if (index >= 0) {
      if (index >= i32(dim_value)) {
        index = i32(dim_value - 1);
      }
    } else {
      if (index < -i32(dim_value)) {
        index = 0;
      } else {
        index += i32(dim_value);
      }
    }
    data_offset += u32((u32(index) * element_count_dim));`, Mi = (o, v, b) => `for (var i = 0u; i < uniforms.num_updates_elements; i++) {
        let value = updates[uniforms.num_updates_elements * ${b ? "global_idx" : "idx"} + i];
        ${fu(o.reduction, "output[data_offset + i]", "value", v)}
      }`, _u = (o, v) => {
          let b = o[0].dims, T = o[1].dims, S = b, I = 1, O = Math.ceil(Xe.size(T) / I), L = T[T.length - 1], z = Xe.sizeFromDimension(b, L), B = Xe.sizeFromDimension(T, 0) / L, V = [
            {
              type: 12,
              data: O
            },
            {
              type: 12,
              data: L
            },
            {
              type: 12,
              data: z
            },
            ...kt(o[1].dims, o[2].dims, S)
          ], q = (X) => {
            let ee = ct("indices", o[1].dataType, o[1].dims.length), ne = ct("updates", o[2].dataType, o[2].dims.length, I), se = v.reduction !== "none" && v.reduction !== "" ? Vr("output", o[0].dataType, S.length) : Wt("output", o[0].dataType, S.length, I);
            return `
      ${X.registerUniform("output_size", "u32").registerUniform("last_index_dimension", "u32").registerUniform("num_updates_elements", "u32").declareVariables(ee, ne, se)}
      ${X.mainStart()}
        ${X.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
  var hasDuplicates = false;
  if (${v.reduction === "none"}) {
    for (var i = 0; i < ${B}; i = i + 1) {
      for (var j = i + 1; j < ${B}; j = j + 1) {
        var index_i = i32(indices[i].x);
        var index_j = i32(indices[j].x);
        if (index_i == index_j) {
          hasDuplicates = true;
          break;
        }
      }
      if (hasDuplicates) {
        break;
      }
    }
  }

  if (${v.reduction === "none"} && hasDuplicates) {
    if (global_idx != 0u) {
      return;
    }
    // Process each index-update pair individually when duplicates exist
    for (var idx = 0u; idx < ${B}u; idx++) {
      var data_offset = 0u;
      for (var i = 0u; i < uniforms.last_index_dimension; i++) {
        var index = i32(indices[idx * uniforms.last_index_dimension + i].x);
        ${ds(b.length, false)}
      }
      ${Mi(v, se.type.value, false)}
    }
    return;
  }

  var data_offset = 0u;
  var indices_start = uniforms.last_index_dimension * global_idx;
  var indices_end = indices_start + uniforms.last_index_dimension;
  for (var i = indices_start; i < indices_end; i++) {
    var index = i32(indices[i].x);
    ${ds(b.length, true)}
  }
  ${Mi(v, se.type.value, true)}
  }`;
          };
          return {
            name: "ScatterND",
            shaderCache: {
              hint: `${v.cacheKey}_${v.reduction}`,
              inputDependencies: [
                "rank",
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: S,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(O / 64)
              },
              programUniforms: V
            }),
            getShaderSource: q
          };
        }, mu = (o) => Pt({
          reduction: o.reduction
        }), gu = (o, v) => {
          o.compute(_u(o.inputs, v), {
            inputs: [
              o.inputs[1],
              o.inputs[2]
            ],
            outputs: []
          });
        };
      }), bu, wu, yu, Ei, xu, Pi, vu, Tu, Si, Mu, Eu, Pu, Vs, Su, Us, ku, Au, Cu, Iu, Ou, ki = g(() => {
        Kt(), ce(), Qt(), fn(), bu = (o, v) => {
          if (o.every((b) => b > 0 || (() => {
            throw new Error("Resize requires scales input values to be positive");
          })), o.length > 0) {
            if (v.mode === "linear") {
              if (!(o.length === 2 || o.length === 3 || o.length === 4 && o[0] === 1 && o[1] === 1 || o.length === 4 && o[0] === 1 && o[3] === 1 || o.length === 5 && o[0] === 1 && o[1] === 1))
                throw new Error(`For linear mode, Resize requires scales to be 2D, 3D, 4D with either two outermost or one innermost and
            one outermost scale values equal to 1, or 5D with two outermost scale values equal to 1`);
            } else if (v.mode === "cubic" && !(o.length === 2 || o.length === 4 && o[0] === 1 && o[1] === 1 || o.length === 4 && o[0] === 1 && o[3] === 1))
              throw new Error("Resize requires scales input size to be 2 or 4 for cubic mode");
          }
        }, wu = (o, v, b) => {
          v.every((S) => S >= 0 && S < b || (() => {
            throw new Error("Resize requires axes input values to be positive and less than rank");
          }));
          let T = new Array(b).fill(1);
          return v.forEach((S, I) => T[S] = o[I]), T;
        }, yu = (o, v, b, T, S, I) => {
          let [O, L, z] = b > 10 ? [
            1,
            2,
            3
          ] : [
            -1,
            o.length > 1 ? 1 : -1,
            -1
          ], B = o[0].dims.length;
          if (O > 0 && o.length > O && o[O].dims.length > 0)
            o[O].getFloat32Array().forEach((V) => I.push(V));
          else if (v.coordinateTransformMode === "tf_crop_and_resize")
            throw new Error("Resize requires RoI input to be specified when coordinateTransformMode is tfCropAndResize");
          if (L > 0 && o.length > L && o[L].dims.length === 1 && o[L].dims[0] > 0) {
            if (o[L].getFloat32Array().forEach((V) => T.push(V)), T.length !== 0 && T.length !== B && b >= 18 && T.length !== v.axes.length)
              throw new Error("Resize requires scales input size to be same as input rank or axes size for opset 18 and up");
            bu(T, v), v.axes.length > 0 && wu(T, v.axes, B).forEach((V, q) => T[q] = V);
          }
          if (z > 0 && o.length > z && o[z].dims.length === 1 && o[z].dims[0] > 0 && (o[z].getBigInt64Array().forEach((V) => S.push(Number(V))), S.length !== 0 && S.length !== B && b >= 18 && S.length !== v.axes.length))
            throw new Error("Resize requires sizes input size to be same as input rank or axes size for opset 18 and up");
          if (v.axes.length > 0) {
            if (T.length !== 0 && T.length !== v.axes.length)
              throw new Error('Resize requires "scales" input size to be of axes rank when axes attributes is specified');
            if (S.length !== 0 && S.length !== v.axes.length)
              throw new Error('Resize requires "sizes" input size to be of rank axes rank when axes attributes is specified');
          }
          if (typeof T < "u" && typeof S < "u" && T.length > 0 && S.length > B)
            throw new Error("Resize requires only of scales or sizes to be specified");
        }, Ei = (o, v, b, T) => `
  // The whole part and the fractional part are calculated separately due to inaccuracy of floating
  // point division. As an example, f32(21) / f32(7) may evaluate to 2.99... instead of 3, causing an
  // offset-by-one error later in floor().
  let big = (${o}) * (${v});
  let whole = ${T}(big / (${b}));
  let fract = ${T}(big % (${b})) / ${T}(${b});
  return whole + fract;
`, xu = (o, v) => `fn getOriginalCoordinateFromResizedCoordinate(xResized: u32, xScale: f32, lengthResized: u32,
     lengthOriginal: u32, roiStart: f32, roiEnd: f32) -> ${v} { ` + (() => {
          switch (o) {
            case "asymmetric":
              return `
          if (xScale < 1.0 || floor(xScale) != xScale) {
            return ${v}(xResized) / ${v}(xScale);
          } else {
            ${Ei("xResized", "lengthOriginal", "lengthResized", v)}
          }
        `;
            case "pytorch_half_pixel":
              return `if (lengthResized > 1) {
                    return (${v}(xResized) + 0.5) / ${v}(xScale) - 0.5;
                  } else {
                    return 0.0;
                  }`;
            case "tf_half_pixel_for_nn":
              return `return (${v}(xResized) + 0.5) / ${v}(xScale);`;
            case "align_corners":
              return `if (lengthResized == 1) {
                    return 0.0;
                  } else {
                    ${Ei("xResized", "lengthOriginal - 1", "lengthResized - 1", v)}
                  }`;
            case "tf_crop_and_resize":
              return `if (lengthResized > 1) {
                    return ${v}(roiStart) * ${v}(lengthOriginal - 1) +
                        (${v}(xResized) * ${v}(roiEnd - roiStart) * ${v}(lengthOriginal - 1)) /
                        ${v}(lengthResized - 1);
                  } else {
                    return 0.5 * ${v}(roiStart + roiEnd) * ${v}(lengthOriginal - 1);
                  }`;
            case "half_pixel_symmetric":
              return `const outputWidth = ${v}xScale * ${v}(lengthResized);
                  const adjustment = ${v}(lengthResized) / outputWidth;
                  const center = ${v}(lengthOriginal) / 2;
                  const offset = center * (1 - adjustment);
                  return offset + ((${v}(xResized) + 0.5) / ${v}(xScale)) - 0.5;`;
            case "half_pixel":
              return `return ((${v}(xResized) + 0.5) / ${v}(xScale)) - 0.5;`;
            default:
              throw new Error(`Coordinate transform mode ${o} is not supported`);
          }
        })() + "}", Pi = (o, v, b) => `fn getNearestPixelFromOriginal(xOriginal: ${b}, isDownSample: bool) -> ${b} {` + (() => {
          switch (o) {
            case "round_prefer_ceil":
              return "if (fract(xOriginal) == 0.5) {             return ceil(xOriginal);           } else {             return round(xOriginal);           }";
            case "floor":
              return "return floor(xOriginal);";
            case "ceil":
              return "return ceil(xOriginal);";
            case "round_prefer_floor":
              return "if (fract(xOriginal) == 0.5) {                     return floor(xOriginal);                   } else {                     return round(xOriginal);                   }";
            case "simple":
            default:
              if (v < 11)
                return "if (isDownSample)                     {                       return ceil(xOriginal);                     } else {                       return xOriginal;                     }";
              throw new Error(`Nearest mode ${o} is not supported`);
          }
        })() + "}", vu = (o, v, b) => {
          let T = new Array(b).fill(0).concat(new Array(b).fill(1)), S = o.length === 0 ? T : o.slice();
          return v.length > 0 ? (v.forEach((I, O) => {
            T[I] = S[O], T[O + b] = S[v.length + O];
          }), T) : S;
        }, Tu = (o, v, b, T) => {
          let S = [];
          if (b.length > 0)
            if (T.length > 0) {
              if (o.forEach((I) => S.push(I)), Math.max(...T) > o.length)
                throw new Error("axes is out of bound");
              T.forEach((I, O) => S[I] = b[O]);
            } else
              b.forEach((I) => S.push(I));
          else {
            if (v.length === 0)
              throw new Error("Resize requires either scales or sizes.");
            S = o.map((I, O) => Math.round(I * v[O]));
          }
          return S;
        }, Si = (o, v, b) => {
          let T = (() => {
            switch (b.keepAspectRatioPolicy) {
              case "not_larger":
                return b.axes.length > 0 ? Math.min(...b.axes.map((I) => v[I]), Number.MAX_VALUE) : Math.min(...v, Number.MAX_VALUE);
              case "not_smaller":
                return b.axes.length > 0 ? Math.max(...b.axes.map((I) => v[I]), Number.MIN_VALUE) : Math.max(...v, Number.MIN_VALUE);
              default:
                throw new Error(`Keep aspect ratio policy ${b.keepAspectRatioPolicy} is not supported`);
            }
          })();
          v.fill(1, 0, v.length);
          let S = o.slice();
          return b.axes.length > 0 ? (b.axes.forEach((I) => v[I] = T), b.axes.forEach((I) => S[I] = Math.round(o[I] * v[I]))) : (v.fill(T, 0, v.length), S.forEach((I, O) => S[O] = Math.round(I * v[O]))), S;
        }, Mu = (o, v, b, T, S) => `
    fn calculateOriginalIndicesFromOutputIndices(output_indices: ${o.type.indices}) -> array<${o.type.value}, ${b.length}> {
      var original_indices: array<${o.type.value}, ${b.length}>;
      for (var i:u32 = 0; i < ${b.length}; i++) {
        var output_index = ${o.indicesGet("output_indices", "i")};
        var scale = ${Ht("uniforms.scales", "i", T)};
        var roi_low = ${Ht("uniforms.roi", "i", S)};
        var roi_hi = ${Ht("uniforms.roi", `i + ${v.length}`, S)};
        if (scale == 1.0) {
          original_indices[i] = ${o.type.value}(output_index);
        } else {
          var input_shape_i = ${Ht("uniforms.input_shape", "i", v.length)};
          var output_shape_i = ${Ht("uniforms.output_shape", "i", b.length)};
          original_indices[i] = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                           input_shape_i, roi_low, roi_hi);
        }
      }
      return original_indices;
    }`, Eu = (o, v, b, T, S, I, O) => `
    fn calculateInputIndicesFromOutputIndices(output_indices: ${v.type.indices}) -> ${o.type.indices} {
      var input_indices: ${o.type.indices};
      for (var i:u32 = 0; i < ${T.length}; i++) {
        var output_index = ${v.indicesGet("output_indices", "i")};
        var input_index: u32;
        var scale = ${Ht("uniforms.scales", "i", S)};
        if (scale == 1.0) {
          input_index = output_index;
        } else {
          var roi_low = ${Ht("uniforms.roi", "i", I)};
          var roi_hi = ${Ht("uniforms.roi", `i + ${b.length}`, I)};
          var input_shape_i = ${Ht("uniforms.input_shape", "i", b.length)};
          var output_shape_i = ${Ht("uniforms.output_shape", "i", T.length)};
          var original_idx = getOriginalCoordinateFromResizedCoordinate(output_index, scale, output_shape_i,
                                                                        input_shape_i, roi_low, roi_hi);
          if (!${O} || (original_idx >= 0 && original_idx < ${v.type.value}(input_shape_i))) {
            if (original_idx < 0) {
              input_index = 0;
            } else if (original_idx > ${v.type.value}(input_shape_i - 1)) {
              input_index = input_shape_i - 1;
            } else {
              input_index = u32(getNearestPixelFromOriginal(original_idx, scale < 1));
            }
          } else {
            input_index = u32(original_idx);
          }
        }
        ${o.indicesSet("input_indices", "i", "input_index")}
      }
      return input_indices;
    }`, Pu = (o, v) => `
    fn checkInputIndices(input_indices: ${o.type.indices}) -> bool {
      for (var i:u32 = 0; i < ${v.length}; i++) {
        var input_index = ${o.indicesGet("input_indices", "i")};
        if (input_index < 0 || input_index >= ${Ht("uniforms.input_shape", "i", v.length)}) {
          return false;
        }
      }
      return true;
    }`, Vs = (o, v, b, T) => o.rank > T ? `
    ${o.indicesSet("input_indices", v, "channel")};
    ${o.indicesSet("input_indices", b, "batch")};
` : "", Su = (o, v, b, T, S) => {
          let [I, O, L, z] = b.length === 2 ? [
            -1,
            0,
            1,
            -1
          ] : [
            0,
            2,
            3,
            1
          ], B = o.type.value;
          return `
    fn getInputValue(batch: u32, channel: u32, row: u32, col: u32) -> ${B} {
      var input_indices: ${o.type.indices};
      ${o.indicesSet("input_indices", O, `max(0, min(row, ${b[O]} - 1))`)};
      ${o.indicesSet("input_indices", L, `max(0, min(col, ${b[L]} - 1))`)};
      ${Vs(o, z, I, 2)}
      return ${o.getByIndices("input_indices")};
    }

    fn bilinearInterpolation(output_indices: ${v.type.indices}) -> ${B} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var row:${B} = originalIndices[${O}];
      var col:${B} = originalIndices[${L}];
      ${T ? `if (row < 0 || row > (${b[O]} - 1) || col < 0 || col > (${b[L]} - 1)) {
        return ${S};
      }` : ""};
      row = max(0, min(row, ${b[O]} - 1));
      col = max(0, min(col, ${b[L]} - 1));
      var row1: u32 = u32(row);
      var col1: u32 = u32(col);
      var row2: u32 = u32(row + 1);
      var col2: u32 = u32(col + 1);
      var channel: u32 = ${b.length > 2 ? `u32(originalIndices[${z}])` : "0"};
      var batch: u32 =  ${b.length > 2 ? `u32(originalIndices[${I}])` : "0"};
      var x11: ${B} = getInputValue(batch, channel, row1, col1);
      var x12: ${B} = getInputValue(batch, channel, row1, col2);
      var x21: ${B} = getInputValue(batch, channel, row2, col1);
      var x22: ${B} = getInputValue(batch, channel, row2, col2);
      var dx1: ${B} = abs(row - ${B}(row1));
      var dx2: ${B} = abs(${B}(row2) - row);
      var dy1: ${B} = abs(col - ${B}(col1));
      var dy2: ${B} = abs(${B}(col2) - col);
      if (row1 == row2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (col1 == col2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      return (x11 * dx2 * dy2 + x12 * dx2 * dy1 + x21 * dx1 * dy2 + x22 * dx1 * dy1);
    }`;
        }, Us = (o, v, b, T, S, I, O, L, z, B) => {
          let V = b.length === 2, [q, X] = V ? [
            0,
            1
          ] : [
            2,
            3
          ], ee = o.type.value, ne = (se) => {
            let ge = se === q ? "row" : "col";
            return `
      fn ${ge}CubicInterpolation(input_indices: ${o.type.indices}, output_indices: ${v.type.indices}) -> ${ee} {
        var output_index = ${v.indicesGet("output_indices", se)};
        var originalIdx: ${ee} = getOriginalCoordinateFromResizedCoordinate(output_index, ${S[se]},
        ${T[se]}, ${b[se]}, ${I[se]}, ${I[se]} + ${b.length});
        var fractOriginalIdx: ${ee} = originalIdx - floor(originalIdx);
        var coefs = getCubicInterpolationCoefs(fractOriginalIdx);

        if (${L} && (originalIdx < 0 || originalIdx > (${b[se]} - 1))) {
          return ${z};
        }
        var data: array<${ee}, 4> = array<${ee}, 4>(0.0, 0.0, 0.0, 0.0);
        for (var i: i32 = -1; i < 3; i++) {
          var ${ge}: ${ee} = originalIdx + ${ee}(i);
          if (${ge} < 0 || ${ge} >= ${b[se]}) {
            ${B ? `coefs[i + 1] = 0.0;
                        continue;` : L ? `return ${z};` : `${ge} = max(0, min(${ge}, ${b[se]} - 1));`};
          }
        var input_indices_copy: ${o.type.indices} = input_indices;
          ${o.indicesSet("input_indices_copy", se, `u32(${ge})`)};
          data[i + 1] = ${se === q ? o.getByIndices("input_indices_copy") : "rowCubicInterpolation(input_indices_copy, output_indices)"};
        }
        return cubicInterpolation1D(data, coefs);
      }`;
          };
          return `
    ${ne(q)};
    ${ne(X)};
  fn getCubicInterpolationCoefs(s: ${ee}) -> array<${ee}, 4> {
    var absS = abs(s);
    var coeffs: array<${ee}, 4> = array<${ee}, 4>(0.0, 0.0, 0.0, 0.0);
    var oneMinusAbsS: ${ee} = 1.0 - absS;
    var twoMinusAbsS: ${ee} = 2.0 - absS;
    var onePlusAbsS: ${ee} = 1.0 + absS;
    coeffs[0] = ((${O} * onePlusAbsS - 5 * ${O}) * onePlusAbsS + 8 * ${O}) * onePlusAbsS - 4 * ${O};
    coeffs[1] = ((${O} + 2) * absS - (${O} + 3)) * absS * absS + 1;
    coeffs[2] = ((${O} + 2) * oneMinusAbsS - (${O} + 3)) * oneMinusAbsS * oneMinusAbsS + 1;
    coeffs[3] = ((${O} * twoMinusAbsS - 5 * ${O}) * twoMinusAbsS + 8 * ${O}) * twoMinusAbsS - 4 * ${O};
    return coeffs;
  }

  fn cubicInterpolation1D(x: array<${ee}, 4>, coefs: array<${ee}, 4>) -> ${ee} {
    var coefsSum: ${ee} = coefs[0] + coefs[1] + coefs[2] + coefs[3];
    return (x[0] * coefs[0] + x[1] * coefs[1]+ x[2] * coefs[2]+ x[3] * coefs[3]) / coefsSum;
  }

  fn bicubicInterpolation(output_indices: ${v.type.indices}) -> ${ee} {
    var input_indices: ${o.type.indices} = output_indices;
    return colCubicInterpolation(input_indices, output_indices);
  }
    `;
        }, ku = (o, v, b, T, S) => {
          let [I, O, L, z, B] = b.length === 3 ? [
            -1,
            0,
            1,
            2,
            -1
          ] : [
            0,
            2,
            3,
            4,
            1
          ], V = o.type.value;
          return `
    fn getInputValue(batch: u32, channel: u32, depth:u32, height: u32, width: u32) -> ${V} {
      var input_indices: ${o.type.indices};
      ${o.indicesSet("input_indices", O, `max(0, min(depth, ${b[O]} - 1))`)};
      ${o.indicesSet("input_indices", L, `max(0, min(height, ${b[L]} - 1))`)};
      ${o.indicesSet("input_indices", z, `max(0, min(width, ${b[z]} - 1))`)};
      ${Vs(o, B, I, 3)}
      return ${o.getByIndices("input_indices")};
    }

    fn trilinearInterpolation(output_indices: ${v.type.indices}) -> ${V} {
      var originalIndices = calculateOriginalIndicesFromOutputIndices(output_indices);
      var depth:${V} = originalIndices[${O}];
      var height:${V} = originalIndices[${L}];
      var width:${V} = originalIndices[${z}];
      ${T ? `if (depth < 0 || depth > (${b[O]} - 1) || height < 0 || height > (${b[L]} - 1) || width < 0 || (width > ${b[z]} - 1)) {
      return ${S};
        }` : ""};

    depth = max(0, min(depth, ${b[O]} - 1));
      height = max(0, min(height, ${b[L]} - 1));
      width = max(0, min(width, ${b[z]} - 1));
      var depth1: u32 = u32(depth);
      var height1: u32 = u32(height);
      var width1: u32 = u32(width);
      var depth2: u32 = u32(depth + 1);
      var height2: u32 = u32(height + 1);
      var width2: u32 = u32(width + 1);
      var channel: u32 = ${b.length > 3 ? `u32(originalIndices[${B}])` : "0"};
      var batch: u32 =  ${b.length > 3 ? `u32(originalIndices[${I}])` : "0"};

      var x111: ${V} = getInputValue(batch, channel, depth1, height1, width1);
      var x112: ${V} = getInputValue(batch, channel, depth1, height1, width2);
      var x121: ${V} = getInputValue(batch, channel, depth1, height2, width1);
      var x122: ${V} = getInputValue(batch, channel, depth1, height2, width2);
      var x211: ${V} = getInputValue(batch, channel, depth2, height1, width1);
      var x212: ${V} = getInputValue(batch, channel, depth2, height1, width2);
      var x221: ${V} = getInputValue(batch, channel, depth2, height2, width1);
      var x222: ${V} = getInputValue(batch, channel, depth2, height2, width2);
      var dx1: ${V} = abs(depth - ${V}(depth1));
      var dx2: ${V} = abs(${V}(depth2) - depth);
      var dy1: ${V} = abs(height - ${V}(height1));
      var dy2: ${V} = abs(${V}(height2) - height);
      var dz1: ${V} = abs(width - ${V}(width1));
      var dz2: ${V} = abs(${V}(width2) - width);
      if (depth1 == depth2) {
        dx1 = 0.5;
        dx2 = 0.5;
      }
      if (height1 == height2) {
        dy1 = 0.5;
        dy2 = 0.5;
      }
      if (width1 == width2) {
        dz1 = 0.5;
        dz2 = 0.5;
      }
      return (x111 * dx2 * dy2 * dz2 + x112 * dx2 * dy2 * dz1 + x121 * dx2 * dy1 *dz2 + x122 * dx2 * dy1 * dz1 +
              x211 * dx1 * dy2 * dz2 + x212 * dx1 * dy2 * dz1 + x221 * dx1 * dy1 *dz2 + x222 * dx1 * dy1 * dz1);
    }`;
        }, Au = (o, v, b, T, S, I) => {
          let O = o.dims, L = vu(I, v.axes, O.length), z = Tu(O, T, S, v.axes), B = T.slice();
          T.length === 0 && (B = O.map((re, Te) => re === 0 ? 1 : z[Te] / re), v.keepAspectRatioPolicy !== "stretch" && (z = Si(O, B, v)));
          let V = Wt("output", o.dataType, z.length), q = ct("input", o.dataType, O.length), X = Xe.size(z), ee = O.length === z.length && O.every((re, Te) => re === z[Te]), ne = v.coordinateTransformMode === "tf_crop_and_resize", se = v.extrapolationValue, ge = q.type.value, ue = (re) => `
      ${ee ? "" : `
      ${xu(v.coordinateTransformMode, ge)};
      ${(() => {
            switch (v.mode) {
              case "nearest":
                return `
              ${Pu(q, O)};
              ${Pi(v.nearestMode, b, ge)};
              ${Eu(q, V, O, z, B.length, L.length, ne)};
              `;
              case "linear":
                return `
              ${Mu(V, O, z, B.length, L.length)};
              ${(() => {
                  if (O.length === 2 || O.length === 4)
                    return `${Su(q, V, O, ne, se)}`;
                  if (O.length === 3 || O.length === 5)
                    return `${ku(q, V, O, ne, se)}`;
                  throw Error("Linear mode only supports input dims 2, 3, 4 and 5 are supported in linear mode.");
                })()};
            `;
              case "cubic":
                return `
            ${(() => {
                  if (O.length === 2 || O.length === 4)
                    return `${Us(q, V, O, z, B, L, v.cubicCoeffA, ne, v.extrapolationValue, v.excludeOutside)}`;
                  throw Error("Cubic mode only supports input dims 2 and 4 are supported in linear mode.");
                })()};
            `;
              default:
                throw Error("Invalid resize mode");
            }
          })()};
      `}
      ${re.registerUniform("output_size", "u32").registerUniform("scales", "f32", B.length).registerUniform("roi", "f32", L.length).declareVariables(q, V)}
      ${re.mainStart()}
        ${re.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
        ${ee ? "output[global_idx] = input[global_idx];" : `
        let output_indices = ${V.offsetToIndices("global_idx")};
        var input_indices: ${q.type.indices};
        ${(() => {
            switch (v.mode) {
              case "nearest":
                return `input_indices = calculateInputIndicesFromOutputIndices(output_indices);
                if (checkInputIndices(input_indices)) {
                  output[global_idx] = ${q.getByIndices("input_indices")};
                } else {
                  output[global_idx] = ${v.extrapolationValue};
                }`;
              case "linear":
                return `output[global_idx] = ${O.length === 2 || O.length === 4 ? "bilinearInterpolation" : "trilinearInterpolation"}(output_indices);`;
              case "cubic":
                return "output[global_idx] = bicubicInterpolation(output_indices);";
              default:
                throw Error(`Unsupported resize mode: ${v.mode}`);
            }
          })()};
`}
      }`;
          return {
            name: "Resize",
            shaderCache: {
              hint: `${v.cacheKey}|${b}|${B.length > 0 ? v.mode === "cubic" ? B : B.length : ""}|${S.length > 0 ? S : ""}|${L.length > 0 ? L : ""}|${ee}|${v.mode === "nearest" ? O.length : O}`,
              inputDependencies: [
                "rank"
              ]
            },
            getShaderSource: ue,
            getRunData: () => ({
              outputs: [
                {
                  dims: z,
                  dataType: o.dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(X / 64)
              },
              programUniforms: [
                {
                  type: 12,
                  data: X
                },
                {
                  type: 1,
                  data: B
                },
                {
                  type: 1,
                  data: L
                },
                ...kt(O, z)
              ]
            })
          };
        }, Cu = (o) => {
          let v = o.customDataBuffer;
          return new Uint32Array(v, v.byteOffset, 1)[0];
        }, Iu = (o, v) => {
          let b = [], T = [], S = [], I = Cu(o);
          if (v.antialias !== 0)
            throw Error("Only default value (0) for Antialias attribute is supported");
          yu(o.inputs, v, I, b, T, S), o.compute(Au(o.inputs[0], v, I, b, T, S), {
            inputs: [
              0
            ]
          });
        }, Ou = (o) => {
          let v = o.antialias, b = o.axes, T = o.coordinateTransformMode, S = o.cubicCoeffA, I = o.excludeOutside !== 0, O = o.extrapolationValue, L = o.keepAspectRatioPolicy, z = o.mode, B = o.nearestMode === "" ? "simple" : o.nearestMode;
          return Pt({
            antialias: v,
            axes: b,
            coordinateTransformMode: T,
            cubicCoeffA: S,
            excludeOutside: I,
            extrapolationValue: O,
            keepAspectRatioPolicy: L,
            mode: z,
            nearestMode: B
          });
        };
      }), $u, Fu, Du, qd = g(() => {
        Kt(), ce(), fn(), $u = (o) => {
          if (!o || o.length < 3)
            throw new Error("layerNorm requires at least 3 inputs.");
          let v = o[0], b = o[1], T = o[2];
          if (v.dataType !== b.dataType || v.dataType !== T.dataType)
            throw new Error("All inputs must have the same data type");
          if (v.dims.length !== 3 && v.dims.length !== 2)
            throw new Error("Input must be 2D or 3D");
          if (b.dims.length !== 3 && b.dims.length !== 2)
            throw new Error("Skip must be 2D or 3D");
          let S = v.dims[v.dims.length - 1], I = v.dims[v.dims.length - 2];
          if (b.dims[b.dims.length - 1] !== S)
            throw new Error("Skip must have the same hidden size as input");
          if (b.dims[b.dims.length - 2] !== I)
            throw new Error("Skip must have the same sequence length as input");
          if (T.dims.length !== 1)
            throw new Error("Gamma must be 1D");
          if (T.dims[T.dims.length - 1] !== S)
            throw new Error("Gamma must have the same hidden size as input");
          if (o.length > 3) {
            let O = o[3];
            if (O.dims.length !== 1)
              throw new Error("Beta must be 1D");
            if (O.dims[O.dims.length - 1] !== S)
              throw new Error("Beta must have the same hidden size as input");
          }
          if (o.length > 4) {
            let O = o[4];
            if (O.dims.length !== 1)
              throw new Error("Bias must be 1D");
            if (O.dims[O.dims.length - 1] !== S)
              throw new Error("Bias must have the same hidden size as input");
          }
        }, Fu = (o, v, b, T) => {
          let S = v.simplified, I = o[0].dims, O = Xe.size(I), L = I, z = O, B = I.slice(-1)[0], V = T ? I.slice(0, -1).concat(1) : [], q = !S && o.length > 3, X = o.length > 4, ee = T && b > 1, ne = T && b > 2, se = b > 3, ge = 64, ue = Mn(B), re = [
            {
              type: 12,
              data: z
            },
            {
              type: 12,
              data: ue
            },
            {
              type: 12,
              data: B
            },
            {
              type: 1,
              data: v.epsilon
            }
          ], Te = (Se) => {
            let ze = [
              {
                name: "output_size",
                type: "u32"
              },
              {
                name: "components",
                type: "u32"
              },
              {
                name: "hidden_size",
                type: "u32"
              },
              {
                name: "epsilon",
                type: "f32"
              }
            ], Le = [
              ct("x", o[0].dataType, o[0].dims, ue),
              ct("skip", o[1].dataType, o[1].dims, ue),
              ct("gamma", o[2].dataType, o[2].dims, ue)
            ];
            q && Le.push(ct("beta", o[3].dataType, o[3].dims, ue)), X && Le.push(ct("bias", o[4].dataType, o[4].dims, ue)), Le.push(Wt("output", o[0].dataType, L, ue)), ee && Le.push(Wt("mean_output", 1, V)), ne && Le.push(Wt("inv_std_output", 1, V)), se && Le.push(Wt("input_skip_bias_sum", o[0].dataType, L, ue));
            let nt = Ke(o[0].dataType), st = Ke(1, ue);
            return `

      ${Se.registerUniforms(ze).declareVariables(...Le)}
      var<workgroup> sum_shared : array<${st}, ${ge}>;
      var<workgroup> sum_squared_shared : array<${st}, ${ge}>;

      ${Se.mainStart([
              ge,
              1,
              1
            ])}
        let ix = local_id.x;
        let iy = global_id.x / ${ge};

        let hidden_size_vectorized: u32 = uniforms.hidden_size / uniforms.components;
        var stride = hidden_size_vectorized / ${ge};
        let offset = ix * stride + iy * hidden_size_vectorized;
        let offset1d = stride * ix;
        if (ix == ${ge - 1}) {
          stride = hidden_size_vectorized - stride * ix;
        }
        for (var i: u32 = 0; i < stride; i++) {
          let skip_value = skip[offset + i];
          let bias_value = ${X ? "bias[offset1d + i]" : nt + "(0.0)"};
          let input_value = x[offset + i];
          let value = input_value + skip_value + bias_value;
          ${se ? "input_skip_bias_sum[offset + i] = value;" : ""}
          output[offset + i] = value;
          let f32_value = ${vr(nt, ue, "value")};
          sum_shared[ix] += f32_value;
          sum_squared_shared[ix] += f32_value * f32_value;
        }
        workgroupBarrier();

        var reduce_size : u32 = ${ge};
        for (var curr_size = reduce_size >> 1;  curr_size > 0; curr_size = reduce_size >> 1) {
          reduce_size = curr_size + (reduce_size & 1);
          if (ix < curr_size) {
            sum_shared[ix] += sum_shared[ix + reduce_size];
            sum_squared_shared[ix] += sum_squared_shared[ix + reduce_size];
          }
          workgroupBarrier();
        }

        let sum = sum_shared[0];
        let square_sum = sum_squared_shared[0];
        let mean = ${Pr("sum", ue)} / f32(uniforms.hidden_size);
        let inv_std_dev = inverseSqrt(${Pr("square_sum", ue)} / f32(uniforms.hidden_size) ${S ? "" : "- mean * mean"} + uniforms.epsilon);
        ${ee ? "mean_output[global_idx] = mean;" : ""}
        ${ne ? "inv_std_output[global_idx] = inv_std_dev;" : ""}

        for (var i: u32 = 0; i < stride; i++) {
          output[offset + i] = (output[offset + i] ${S ? "" : `- ${nt}(mean)`}) *
            ${nt}(inv_std_dev) * gamma[offset1d + i]
            ${q ? "+ beta[offset1d + i]" : ""};
        }
      }`;
          }, we = [
            {
              dims: L,
              dataType: o[0].dataType
            }
          ];
          return b > 1 && we.push({
            dims: V,
            dataType: 1
          }), b > 2 && we.push({
            dims: V,
            dataType: 1
          }), b > 3 && we.push({
            dims: I,
            dataType: o[0].dataType
          }), {
            name: "SkipLayerNormalization",
            shaderCache: {
              hint: `${ue};${ee};${ne};${se}`,
              inputDependencies: o.map((Se, ze) => "type")
            },
            getShaderSource: Te,
            getRunData: () => ({
              outputs: we,
              dispatchGroup: {
                x: Math.ceil(z / B)
              },
              programUniforms: re
            })
          };
        }, Du = (o, v) => {
          $u(o.inputs);
          let b = [
            0
          ];
          o.outputCount > 1 && b.push(-3), o.outputCount > 2 && b.push(-3), o.outputCount > 3 && b.push(3), o.compute(Fu(o.inputs, v, o.outputCount, false), {
            outputs: b
          });
        };
      }), Lu, zr, Nu, Ai, Ru, An, Hd, Kd, yp = g(() => {
        Kt(), ce(), Qt(), fn(), Lu = (o, v) => {
          if (!o || o.length < 1)
            throw new Error("too few inputs");
          if (v.axes.length !== 0) {
            if (v.axes.length !== v.starts.length || v.axes.length !== v.ends.length)
              throw new Error("axes, starts and ends must have the same length");
          } else if (v.starts.length !== v.ends.length)
            throw new Error("starts and ends must have the same length");
          o.slice(1).forEach((b, T) => {
            if (o[T + 1].dataType !== 6 && o[T + 1].dataType !== 7)
              throw new Error(`Input ${T} must be an array of int32 or int64`);
          });
        }, zr = (o, v) => {
          let b = [];
          if (o.length > v)
            if (o[v].dataType === 7)
              o[v].getBigInt64Array().forEach((T) => b.push(Number(T)));
            else if (o[v].dataType === 6)
              o[v].getInt32Array().forEach((T) => b.push(Number(T)));
            else
              throw new Error(`Input ${v} must be an array of int32 or int64`);
          return b;
        }, Nu = (o, v) => {
          if (o.length > 1) {
            let b = zr(o, 1), T = zr(o, 2), S = zr(o, 3);
            return S.length === 0 && (S = [
              ...Array(o[0].dims.length).keys()
            ]), Pt({
              starts: b,
              ends: T,
              axes: S
            });
          } else
            return v;
        }, Ai = (o, v, b, T, S) => {
          let I = o;
          return o < 0 && (I += b[T[v]]), S[v] < 0 ? Math.max(0, Math.min(I, b[T[v]] - 1)) : Math.max(0, Math.min(I, b[T[v]]));
        }, Ru = (o, v, b) => `fn calculateInputIndices(output_indices: ${v.type.indices}) -> ${o.type.indices} {
          var input_indices: ${o.type.indices};
          var carry = 0u;
          for (var i = ${b.length}; i >= 0; i--) {
            let input_shape_i = ${Ht("uniforms.input_shape", "i", b.length)};
            let steps_i = ${Ht("uniforms.steps", "i", b.length)};
            let signs_i = ${Ht("uniforms.signs", "i", b.length)};
            let starts_i = ${Ht("uniforms.starts", "i", b.length)};
            var output_index = ${v.indicesGet("output_indices", "i")};
            var input_index = output_index * steps_i + starts_i + carry;
            carry = input_index / input_shape_i;
            input_index = input_index % input_shape_i;
            if (signs_i < 0) {
              input_index = input_shape_i - input_index - 1u + starts_i;
            }
            ${o.indicesSet("input_indices", "i", "input_index")};
          }
          return input_indices;
      }`, An = (o, v) => {
          let b = o[0].dims, T = Xe.size(b), S = v.axes.length > 0 ? Xe.normalizeAxes(v.axes, b.length) : [
            ...Array(b.length).keys()
          ], I = zr(o, 4);
          I.forEach((ue) => ue !== 0 || (() => {
            throw new Error("step cannot be 0");
          })), I.length === 0 && (I = Array(S.length).fill(1));
          let O = v.starts.map((ue, re) => Ai(ue, re, b, S, I)), L = v.ends.map((ue, re) => Ai(ue, re, b, S, I));
          if (S.length !== O.length || S.length !== L.length)
            throw new Error("start, ends and axes should have the same number of elements");
          if (S.length !== b.length)
            for (let ue = 0; ue < b.length; ++ue)
              S.includes(ue) || (O.splice(ue, 0, 0), L.splice(ue, 0, b[ue]), I.splice(ue, 0, 1));
          let z = I.map((ue) => Math.sign(ue));
          I.forEach((ue, re, Te) => {
            if (ue < 0) {
              let we = (L[re] - O[re]) / ue, Se = O[re], ze = Se + we * I[re];
              O[re] = ze, L[re] = Se, Te[re] = -ue;
            }
          });
          let B = b.slice(0);
          S.forEach((ue, re) => {
            B[ue] = Math.ceil((L[ue] - O[ue]) / I[ue]);
          });
          let V = {
            dims: B,
            dataType: o[0].dataType
          }, q = Wt("output", o[0].dataType, B.length), X = ct("input", o[0].dataType, o[0].dims.length), ee = Xe.size(B), ne = [
            {
              name: "outputSize",
              type: "u32"
            },
            {
              name: "starts",
              type: "u32",
              length: O.length
            },
            {
              name: "signs",
              type: "i32",
              length: z.length
            },
            {
              name: "steps",
              type: "u32",
              length: I.length
            }
          ], se = [
            {
              type: 12,
              data: ee
            },
            {
              type: 12,
              data: O
            },
            {
              type: 6,
              data: z
            },
            {
              type: 12,
              data: I
            },
            ...kt(o[0].dims, B)
          ], ge = (ue) => `
      ${ue.registerUniforms(ne).declareVariables(X, q)}
        ${Ru(X, q, b)}
        ${ue.mainStart()}
          ${ue.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.outputSize")}
          let output_indices = ${q.offsetToIndices("global_idx")};
          let input_indices = calculateInputIndices(output_indices);
          ${q.setByOffset("global_idx", X.getByIndices("input_indices"))}
      }`;
          return {
            name: "Slice",
            shaderCache: {
              hint: `${z.length}_${O.length}_${I.length}`,
              inputDependencies: [
                "rank"
              ]
            },
            getShaderSource: ge,
            getRunData: () => ({
              outputs: [
                V
              ],
              dispatchGroup: {
                x: Math.ceil(T / 64)
              },
              programUniforms: se
            })
          };
        }, Hd = (o, v) => {
          Lu(o.inputs, v);
          let b = Nu(o.inputs, v);
          o.compute(An(o.inputs, b), {
            inputs: [
              0
            ]
          });
        }, Kd = (o) => {
          let v = o.starts, b = o.ends, T = o.axes;
          return Pt({
            starts: v,
            ends: b,
            axes: T
          });
        };
      }), Yd, Ci, zu, Bu, Xd = g(() => {
        Kt(), ce(), Qt(), Or(), fn(), Yd = (o) => {
          if (!o || o.length !== 1)
            throw new Error("Softmax op requires 1 input.");
        }, Ci = (o, v) => {
          let b = o.inputs[0], T = b.dims, S = Xe.size(T), I = T.length, O = Xe.normalizeAxis(v.axis, I), L = O < T.length - 1, z, B = [];
          L ? (B = Array.from({
            length: I
          }, (Le, nt) => nt), B[O] = I - 1, B[I - 1] = O, z = o.compute(cr(b, B), {
            inputs: [
              b
            ],
            outputs: [
              -1
            ]
          })[0]) : z = b;
          let V = z.dims, q = V[I - 1], X = S / q, ee = Mn(q), ne = q / ee, se = 64;
          X === 1 && (se = 256);
          let ge = (Le, nt) => nt === 4 ? `max(max(${Le}.x, ${Le}.y), max(${Le}.z, ${Le}.w))` : nt === 2 ? `max(${Le}.x, ${Le}.y)` : nt === 3 ? `max(max(${Le}.x, ${Le}.y), ${Le}.z)` : Le, ue = ct("x", z.dataType, z.dims, ee), re = Wt("result", z.dataType, z.dims, ee), Te = ue.type.value, we = Ke(z.dataType) === "f32" ? `var threadMax = ${Te}(-3.402823e+38f);` : `var threadMax = ${Te}(-65504.0h);`, Se = (Le) => `
      var<workgroup> rowMaxShared : ${Te};
      var<workgroup> rowSumShared : ${Te};
      var<workgroup> threadShared : array<${Te}, ${se}>;

      fn getValue(row: i32, col: i32, row_stride: i32) -> ${Te} {
        let index = row * row_stride + col;
        return x[index];
      }

      fn setValue(row: i32, col: i32, row_stride: i32, value: ${Te}) {
        let index = row * row_stride + col;
        result[index] = value;
      }
      ${Le.registerUniform("packedCols", "i32").declareVariables(ue, re)}
      ${Le.mainStart(se)}
        let gindex = i32(global_idx);
        let lindex = i32(local_idx);
        const wg = ${se};
        let row = gindex / wg;
        let cols = uniforms.packedCols;
        let row_stride : i32 = uniforms.packedCols;

        // find the rows max
        ${we}
        for (var col = lindex; col < cols; col += wg) {
          let value = getValue(row, col, row_stride);
          threadMax = max(threadMax, value);
        }
        if (lindex < cols) {
          threadShared[lindex] = threadMax;
        }
        workgroupBarrier();

        var reduceSize = min(cols, wg);
        for (var currSize = reduceSize >> 1;  currSize > 0; currSize = reduceSize >> 1) {
          reduceSize = currSize + (reduceSize & 1);
          if (lindex < currSize) {
            threadShared[lindex] = max(threadShared[lindex], threadShared[lindex + reduceSize]);
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowMaxShared = ${Te}(${ge("threadShared[0]", ee)});
        }
        workgroupBarrier();

        // find the rows sum
        var threadSum = ${Te}(0.0);
        for (var col = lindex; col < cols; col += wg) {
          let subExp = exp(getValue(row, col, row_stride) - rowMaxShared);
          threadSum += subExp;
        }
        threadShared[lindex] = threadSum;
        workgroupBarrier();

        for (var currSize = wg >> 1;  currSize > 0; currSize = currSize >> 1) {
          if (lindex < currSize) {
            threadShared[lindex] = threadShared[lindex] + threadShared[lindex + currSize];
          }
          workgroupBarrier();
        }
        if (lindex == 0) {
          rowSumShared = ${Te}(${Pr("threadShared[0]", ee)});
        }
        workgroupBarrier();

        // calculate final value for each element in the row
        for (var col = lindex; col < cols; col += wg) {
          let value = exp(getValue(row, col, row_stride) - rowMaxShared) / rowSumShared;
          setValue(row, col, row_stride, value);
        }
      }`, ze = o.compute({
            name: "Softmax",
            shaderCache: {
              hint: `${ee};${se}`,
              inputDependencies: [
                "type"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: V,
                  dataType: z.dataType
                }
              ],
              dispatchGroup: {
                x: X
              },
              programUniforms: [
                {
                  type: 6,
                  data: ne
                }
              ]
            }),
            getShaderSource: Se
          }, {
            inputs: [
              z
            ],
            outputs: [
              L ? -1 : 0
            ]
          })[0];
          L && o.compute(cr(ze, B), {
            inputs: [
              ze
            ]
          });
        }, zu = (o, v) => {
          Yd(o.inputs), Ci(o, v);
        }, Bu = (o) => Pt({
          axis: o.axis
        });
      }), Ii, Oi, $i, Qd, ju, Jd = g(() => {
        Kt(), ce(), fn(), Ii = (o) => Array.from(o.getBigInt64Array(), Number), Oi = (o) => {
          if (!o || o.length !== 2)
            throw new Error("Tile requires 2 inputs.");
          if (o[0].dataType !== 1 && o[0].dataType !== 10 && o[0].dataType !== 6 && o[0].dataType !== 12)
            throw new Error("Tile only support float, float16, int32, and uint32 data types");
          if (o[1].dataType !== 7)
            throw new Error("Tile `repeats` input should be of int64 data type");
          if (o[1].dims.length !== 1)
            throw new Error("Tile `repeats` input should be 1-D");
          if (Ii(o[1]).length !== o[0].dims.length)
            throw new Error("Tile `repeats` input should have same number of elements as rank of input data tensor");
        }, $i = (o, v) => {
          let b = [];
          for (let T = 0; T < o.length; ++T)
            b.push(o[T] * v[T]);
          return b;
        }, Qd = (o, v) => {
          let b = o[0].dims, T = v ?? Ii(o[1]), S = $i(b, T), I = Xe.size(S), O = o[0].dataType, L = ct("input", O, b.length), z = Wt("output", O, S.length), B = (V) => `
      const inputShape = ${L.indices(...b)};
      ${V.registerUniform("output_size", "u32").declareVariables(L, z)}
      ${V.mainStart()}
      ${V.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.output_size")}
      let output_indices = ${z.offsetToIndices("global_idx")};
      var input_indices: ${L.type.indices};
      for (var i = 0; i < ${b.length}; i++) {
        let input_dim_i = ${L.indicesGet("uniforms.input_shape", "i")};
        let input_dim_value = ${z.indicesGet("output_indices", "i")}  % input_dim_i;

        ${L.indicesSet("input_indices", "i", "input_dim_value")}
      }
      ${z.setByOffset("global_idx", L.getByIndices("input_indices"))}
    }`;
          return {
            name: "Tile",
            shaderCache: {
              hint: `${T}`,
              inputDependencies: [
                "rank"
              ]
            },
            getRunData: () => ({
              outputs: [
                {
                  dims: S,
                  dataType: o[0].dataType
                }
              ],
              dispatchGroup: {
                x: Math.ceil(I / 64)
              },
              programUniforms: [
                {
                  type: 12,
                  data: I
                },
                ...kt(o[0].dims, S)
              ]
            }),
            getShaderSource: B
          };
        }, ju = (o) => {
          Oi(o.inputs), o.compute(Qd(o.inputs), {
            inputs: [
              0
            ]
          });
        };
      }), Fi, Vu, Uu, xp = g(() => {
        Kt(), ce(), fn(), Fi = (o, v, b, T, S) => {
          let I = Wt("output_data", S, b.length, 4), O = ct("a_data", v[1].dataType, v[1].dims.length, 4), L = ct("b_data", v[2].dataType, v[2].dims.length, 4), z = ct("c_data", v[0].dataType, v[0].dims.length, 4), B, V = (q, X, ee) => `select(${X}, ${q}, ${ee})`;
          if (!T)
            B = I.setByOffset("global_idx", V(O.getByOffset("global_idx"), L.getByOffset("global_idx"), z.getByOffset("global_idx")));
          else {
            let q = (X, ee, ne = "") => {
              let se = `a_data[index_a${ee}][component_a${ee}]`, ge = `b_data[index_b${ee}][component_b${ee}]`, ue = `bool(c_data[index_c${ee}] & (0xffu << (component_c${ee} * 8)))`;
              return `
            let output_indices${ee} = ${I.offsetToIndices(`global_idx * 4u + ${ee}u`)};
            let offset_a${ee} = ${O.broadcastedIndicesToOffset(`output_indices${ee}`, I)};
            let offset_b${ee} = ${L.broadcastedIndicesToOffset(`output_indices${ee}`, I)};
            let offset_c${ee} = ${z.broadcastedIndicesToOffset(`output_indices${ee}`, I)};
            let index_a${ee} = offset_a${ee} / 4u;
            let index_b${ee} = offset_b${ee} / 4u;
            let index_c${ee} = offset_c${ee} / 4u;
            let component_a${ee} = offset_a${ee} % 4u;
            let component_b${ee} = offset_b${ee} % 4u;
            let component_c${ee} = offset_c${ee} % 4u;
            ${X}[${ee}] = ${ne}(${V(se, ge, ue)});
          `;
            };
            S === 9 ? B = `
            var data = vec4<u32>(0);
            ${q("data", 0, "u32")}
            ${q("data", 1, "u32")}
            ${q("data", 2, "u32")}
            ${q("data", 3, "u32")}
            output_data[global_idx] = dot(vec4<u32>(0x1, 0x100, 0x10000, 0x1000000), vec4<u32>(data));` : B = `
            ${q("output_data[global_idx]", 0)}
            ${q("output_data[global_idx]", 1)}
            ${q("output_data[global_idx]", 2)}
            ${q("output_data[global_idx]", 3)}
          `;
          }
          return `
        ${o.registerUniform("vec_size", "u32").declareVariables(z, O, L, I)}
        ${o.mainStart()}
        ${o.guardAgainstOutOfBoundsWorkgroupSizes("uniforms.vec_size")}
        ${B}
      }`;
        }, Vu = (o) => {
          let v = o[1].dims, b = o[2].dims, T = o[0].dims, S = o[1].dataType, I = !(Xe.areEqual(v, b) && Xe.areEqual(b, T)), O = v, L = Xe.size(v);
          if (I) {
            let B = dr.calcShape(dr.calcShape(v, b, false), T, false);
            if (!B)
              throw new Error("Can't perform where op on the given tensors");
            O = B, L = Xe.size(O);
          }
          let z = Math.ceil(L / 4);
          return {
            name: "Where",
            shaderCache: {
              inputDependencies: [
                "rank",
                "rank",
                "rank"
              ]
            },
            getShaderSource: (B) => Fi(B, o, O, I, S),
            getRunData: () => ({
              outputs: [
                {
                  dims: O,
                  dataType: S
                }
              ],
              dispatchGroup: {
                x: Math.ceil(L / 64 / 4)
              },
              programUniforms: [
                {
                  type: 12,
                  data: z
                },
                ...kt(T, v, b, O)
              ]
            })
          };
        }, Uu = (o) => {
          o.compute(Vu(o.inputs));
        };
      }), Gu, Zd = g(() => {
        hd(), uo(), fd(), _d(), md(), gd(), bd(), Dl(), Td(), Md(), Ed(), Pd(), Sd(), kd(), Ad(), Cd(), Id(), Od(), $d(), Fd(), ls(), Ld(), wp(), Nd(), Qc(), Sc(), Rd(), Vd(), Ud(), Gd(), Wd(), lo(), ki(), Lc(), qd(), yp(), Xd(), $c(), Jd(), Or(), ys(), xp(), Gu = /* @__PURE__ */ new Map([
          [
            "Abs",
            [
              Fa
            ]
          ],
          [
            "Acos",
            [
              mo
            ]
          ],
          [
            "Acosh",
            [
              Da
            ]
          ],
          [
            "Add",
            [
              $o
            ]
          ],
          [
            "ArgMax",
            [
              Ma,
              ws
            ]
          ],
          [
            "ArgMin",
            [
              Ta,
              ws
            ]
          ],
          [
            "Asin",
            [
              La
            ]
          ],
          [
            "Asinh",
            [
              go
            ]
          ],
          [
            "Atan",
            [
              Na
            ]
          ],
          [
            "Atanh",
            [
              Ra
            ]
          ],
          [
            "Attention",
            [
              Aa
            ]
          ],
          [
            "AveragePool",
            [
              iu,
              ou
            ]
          ],
          [
            "BatchNormalization",
            [
              ho
            ]
          ],
          [
            "BiasAdd",
            [
              $a
            ]
          ],
          [
            "BiasSplitGelu",
            [
              al
            ]
          ],
          [
            "Cast",
            [
              za,
              bo
            ]
          ],
          [
            "Ceil",
            [
              ja
            ]
          ],
          [
            "Clip",
            [
              wo
            ]
          ],
          [
            "Concat",
            [
              Ro,
              bl
            ]
          ],
          [
            "Conv",
            [
              Ko,
              Ur
            ]
          ],
          [
            "ConvTranspose",
            [
              Zo,
              Qo
            ]
          ],
          [
            "Cos",
            [
              Va
            ]
          ],
          [
            "Cosh",
            [
              yo
            ]
          ],
          [
            "CumSum",
            [
              ei,
              Vl
            ]
          ],
          [
            "DepthToSpace",
            [
              ks,
              Wl
            ]
          ],
          [
            "DequantizeLinear",
            [
              Bs,
              du
            ]
          ],
          [
            "Div",
            [
              cl
            ]
          ],
          [
            "Einsum",
            [
              Cs,
              Xl
            ]
          ],
          [
            "Elu",
            [
              Ua,
              ts
            ]
          ],
          [
            "Equal",
            [
              ul
            ]
          ],
          [
            "Erf",
            [
              Ga
            ]
          ],
          [
            "Exp",
            [
              Wa
            ]
          ],
          [
            "Expand",
            [
              ec
            ]
          ],
          [
            "FastGelu",
            [
              ii
            ]
          ],
          [
            "Floor",
            [
              xo
            ]
          ],
          [
            "FusedConv",
            [
              Ko,
              Ur
            ]
          ],
          [
            "Gather",
            [
              sc,
              rc
            ]
          ],
          [
            "GatherElements",
            [
              dc,
              uc
            ]
          ],
          [
            "GatherBlockQuantized",
            [
              lc,
              ui
            ]
          ],
          [
            "GatherND",
            [
              li,
              ic
            ]
          ],
          [
            "Gelu",
            [
              qa
            ]
          ],
          [
            "Gemm",
            [
              _c,
              fc
            ]
          ],
          [
            "GlobalAveragePool",
            [
              lu,
              au
            ]
          ],
          [
            "GlobalMaxPool",
            [
              zs,
              Ti
            ]
          ],
          [
            "Greater",
            [
              Do
            ]
          ],
          [
            "GreaterOrEqual",
            [
              fl
            ]
          ],
          [
            "GridSample",
            [
              vc,
              kr
            ]
          ],
          [
            "GroupQueryAttention",
            [
              zc
            ]
          ],
          [
            "HardSigmoid",
            [
              Mo,
              Qa
            ]
          ],
          [
            "InstanceNormalization",
            [
              Vc
            ]
          ],
          [
            "LayerNormalization",
            [
              $s
            ]
          ],
          [
            "LeakyRelu",
            [
              Ha,
              ts
            ]
          ],
          [
            "Less",
            [
              hl
            ]
          ],
          [
            "LessOrEqual",
            [
              Lo
            ]
          ],
          [
            "Log",
            [
              nl
            ]
          ],
          [
            "MatMul",
            [
              qc
            ]
          ],
          [
            "MatMulNBits",
            [
              Yc,
              Xc
            ]
          ],
          [
            "MaxPool",
            [
              Bd,
              jd
            ]
          ],
          [
            "Mul",
            [
              Fo
            ]
          ],
          [
            "MultiHeadAttention",
            [
              Pc,
              Mc
            ]
          ],
          [
            "Neg",
            [
              Ka
            ]
          ],
          [
            "Not",
            [
              vo
            ]
          ],
          [
            "Pad",
            [
              Fs
            ]
          ],
          [
            "Pow",
            [
              dl
            ]
          ],
          [
            "QuickGelu",
            [
              sl,
              ts
            ]
          ],
          [
            "Range",
            [
              hu
            ]
          ],
          [
            "Reciprocal",
            [
              Ya
            ]
          ],
          [
            "ReduceMin",
            [
              io
            ]
          ],
          [
            "ReduceMean",
            [
              ma
            ]
          ],
          [
            "ReduceMax",
            [
              wa
            ]
          ],
          [
            "ReduceSum",
            [
              xa
            ]
          ],
          [
            "ReduceProd",
            [
              ya
            ]
          ],
          [
            "ReduceL1",
            [
              ga
            ]
          ],
          [
            "ReduceL2",
            [
              oo
            ]
          ],
          [
            "ReduceLogSum",
            [
              va
            ]
          ],
          [
            "ReduceLogSumExp",
            [
              ba
            ]
          ],
          [
            "ReduceSumSquare",
            [
              ao
            ]
          ],
          [
            "Relu",
            [
              To
            ]
          ],
          [
            "Resize",
            [
              Iu,
              Ou
            ]
          ],
          [
            "RotaryEmbedding",
            [
              Dc
            ]
          ],
          [
            "ScatterND",
            [
              gu,
              mu
            ]
          ],
          [
            "Sigmoid",
            [
              Xa
            ]
          ],
          [
            "Sin",
            [
              Ja
            ]
          ],
          [
            "Sinh",
            [
              Za
            ]
          ],
          [
            "Slice",
            [
              Hd,
              Kd
            ]
          ],
          [
            "SkipLayerNormalization",
            [
              Du
            ]
          ],
          [
            "Split",
            [
              Ic,
              Oc
            ]
          ],
          [
            "Sqrt",
            [
              Eo
            ]
          ],
          [
            "Softmax",
            [
              zu,
              Bu
            ]
          ],
          [
            "Sub",
            [
              pl
            ]
          ],
          [
            "Tan",
            [
              el
            ]
          ],
          [
            "Tanh",
            [
              So
            ]
          ],
          [
            "ThresholdedRelu",
            [
              tl,
              ts
            ]
          ],
          [
            "Tile",
            [
              ju
            ]
          ],
          [
            "Transpose",
            [
              Yi,
              Qs
            ]
          ],
          [
            "Where",
            [
              Uu
            ]
          ]
        ]);
      }), Wu, ps = g(() => {
        At(), Gn(), fn(), Wu = class {
          constructor(o) {
            this.backend = o, this.repo = /* @__PURE__ */ new Map(), this.attributesBound = false;
          }
          getArtifact(o) {
            return this.repo.get(o);
          }
          setArtifact(o, v) {
            this.repo.set(o, v);
          }
          run(o, v, b, T, S) {
            Be(o.programInfo.name);
            let I = this.backend.device, O = this.backend.getComputePassEncoder();
            this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2);
            let L = [];
            for (let B of v)
              L.push({
                binding: L.length,
                resource: {
                  buffer: B.buffer
                }
              });
            for (let B of b)
              L.push({
                binding: L.length,
                resource: {
                  buffer: B.buffer
                }
              });
            S && L.push({
              binding: L.length,
              resource: S
            });
            let z = I.createBindGroup({
              layout: o.computePipeline.getBindGroupLayout(0),
              entries: L,
              label: o.programInfo.name
            });
            if (this.backend.sessionStatus === "capturing") {
              let B = {
                kernelId: this.backend.currentKernelId,
                computePipeline: o.computePipeline,
                bindGroup: z,
                dispatchGroup: T
              };
              this.backend.capturedCommandList.get(this.backend.currentSessionId).push(B);
            }
            O.setPipeline(o.computePipeline), O.setBindGroup(0, z), O.dispatchWorkgroups(...T), this.backend.writeTimestamp(this.backend.pendingDispatchNumber * 2 + 1), this.backend.pendingDispatchNumber++, (this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber || this.backend.queryType === "at-passes") && this.backend.endComputePass(), this.backend.pendingDispatchNumber >= this.backend.maxDispatchNumber && this.backend.flush(), Ze(o.programInfo.name);
          }
          dispose() {
          }
          build(o, v) {
            Be(o.name);
            let b = this.backend.device, T = [];
            [
              {
                feature: "shader-f16",
                extension: "f16"
              },
              {
                feature: "subgroups",
                extension: "subgroups"
              }
            ].forEach((B) => {
              b.features.has(B.feature) && T.push(`enable ${B.extension};`);
            });
            let S = Gi(v, this.backend.device.limits), I = o.getShaderSource(S), O = `${T.join(`
`)}
${S.additionalImplementations}
${I}`, L = b.createShaderModule({
              code: O,
              label: o.name
            });
            mn("verbose", () => `[WebGPU] ${o.name} shader code: ${O}`);
            let z = b.createComputePipeline({
              compute: {
                module: L,
                entryPoint: "main"
              },
              layout: "auto",
              label: o.name
            });
            return Ze(o.name), {
              programInfo: o,
              computePipeline: z,
              uniformVariablesInfo: S.variablesInfo
            };
          }
          normalizeDispatchGroupSize(o) {
            let v = typeof o == "number" ? o : o.x, b = typeof o == "number" ? 1 : o.y || 1, T = typeof o == "number" ? 1 : o.z || 1, S = this.backend.device.limits.maxComputeWorkgroupsPerDimension;
            if (v <= S && b <= S && T <= S)
              return [
                v,
                b,
                T
              ];
            let I = v * b * T, O = Math.ceil(Math.sqrt(I));
            if (O > S) {
              if (O = Math.ceil(Math.cbrt(I)), O > S)
                throw new Error("Total dispatch size exceeds WebGPU maximum.");
              return [
                O,
                O,
                O
              ];
            } else
              return [
                O,
                O,
                1
              ];
          }
        };
      }), qu = {};
      _(qu, {
        WebGpuBackend: () => Xu
      });
      var Hu, Ku, Yu, Xu, ep = g(() => {
        At(), Kt(), Gn(), Ce(), Nt(), Zd(), ps(), Hu = (o, v) => {
          if (v.length !== o.length)
            throw new Error(`inputDependencies length ${v.length} is not equal to inputTensors length ${o.length}.`);
          let b = [];
          for (let T = 0; T < o.length; ++T) {
            let S = o[T].dataType;
            switch (v[T]) {
              case "none": {
                b.push("");
                break;
              }
              case "type": {
                b.push(`${S}`);
                break;
              }
              case "rank": {
                let I = o[T].dims.length;
                b.push(`${S};${I}`);
                break;
              }
              case "dims": {
                let I = o[T].dims.join(",");
                b.push(`${S};${I}`);
                break;
              }
              default:
                throw new Error(`unsupported input dependency: ${v[T]}`);
            }
          }
          return b.join("|");
        }, Ku = (o, v, b) => {
          let T = o.name;
          return o.shaderCache?.hint && (T += "[" + o.shaderCache.hint + "]"), T += ":" + b + `:${Hu(v, o.shaderCache?.inputDependencies ?? new Array(v.length).fill("dims"))}`, T;
        }, Yu = class {
          constructor(o) {
            o && (this.architecture = o.architecture, this.vendor = o.vendor);
          }
          isArchitecture(o) {
            return this.architecture === o;
          }
          isVendor(o) {
            return this.vendor === o;
          }
        }, Xu = class {
          constructor() {
            this.currentSessionId = null, this.currentKernelId = null, this.commandEncoder = null, this.computePassEncoder = null, this.maxDispatchNumber = 16, this.pendingDispatchNumber = 0, this.pendingKernels = [], this.pendingQueries = /* @__PURE__ */ new Map(), this.sessionStatus = "default", this.capturedCommandList = /* @__PURE__ */ new Map(), this.capturedPendingKernels = /* @__PURE__ */ new Map(), this.sessionExternalDataMapping = /* @__PURE__ */ new Map();
          }
          get currentKernelCustomData() {
            if (this.currentKernelId === null)
              throw new Error("currentKernelCustomData(): currentKernelId is null. (should not happen)");
            let o = this.kernelCustomData.get(this.currentKernelId);
            return o || (o = {}, this.kernelCustomData.set(this.currentKernelId, o)), o;
          }
          async initialize(o, v) {
            this.env = o;
            let b = [], T = {
              requiredLimits: {
                maxComputeWorkgroupStorageSize: v.limits.maxComputeWorkgroupStorageSize,
                maxComputeWorkgroupsPerDimension: v.limits.maxComputeWorkgroupsPerDimension,
                maxStorageBufferBindingSize: v.limits.maxStorageBufferBindingSize,
                maxBufferSize: v.limits.maxBufferSize,
                maxComputeInvocationsPerWorkgroup: v.limits.maxComputeInvocationsPerWorkgroup,
                maxComputeWorkgroupSizeX: v.limits.maxComputeWorkgroupSizeX,
                maxComputeWorkgroupSizeY: v.limits.maxComputeWorkgroupSizeY,
                maxComputeWorkgroupSizeZ: v.limits.maxComputeWorkgroupSizeZ
              },
              requiredFeatures: b
            }, S = (I) => v.features.has(I) && b.push(I) && true;
            S("chromium-experimental-timestamp-query-inside-passes") || S("timestamp-query"), S("shader-f16"), S("subgroups"), this.device = await v.requestDevice(T), this.adapterInfo = new Yu(v.info || await v.requestAdapterInfo()), this.gpuDataManager = gt(this), this.programManager = new Wu(this), this.kernels = /* @__PURE__ */ new Map(), this.kernelPersistentData = /* @__PURE__ */ new Map(), this.kernelCustomData = /* @__PURE__ */ new Map(), Vt(o.logLevel, !!o.debug), this.device.onuncapturederror = (I) => {
              I.error instanceof GPUValidationError && console.error(`An uncaught WebGPU validation error was raised: ${I.error.message}`);
            }, Object.defineProperty(this.env.webgpu, "device", {
              value: this.device,
              writable: false,
              enumerable: true,
              configurable: false
            }), Object.defineProperty(this.env.webgpu, "adapter", {
              value: v,
              writable: false,
              enumerable: true,
              configurable: false
            }), this.setQueryType();
          }
          dispose() {
            typeof this.querySet < "u" && this.querySet.destroy(), this.gpuDataManager.dispose();
          }
          getCommandEncoder() {
            return this.commandEncoder || (this.commandEncoder = this.device.createCommandEncoder()), this.commandEncoder;
          }
          getComputePassEncoder() {
            if (!this.computePassEncoder) {
              let o = this.getCommandEncoder(), v = {};
              this.queryType === "at-passes" && (v.timestampWrites = {
                querySet: this.querySet,
                beginningOfPassWriteIndex: this.pendingDispatchNumber * 2,
                endOfPassWriteIndex: this.pendingDispatchNumber * 2 + 1
              }), this.computePassEncoder = o.beginComputePass(v);
            }
            return this.computePassEncoder;
          }
          endComputePass() {
            this.computePassEncoder && (this.computePassEncoder.end(), this.computePassEncoder = null);
          }
          flush() {
            if (!this.commandEncoder)
              return;
            Be(), this.endComputePass();
            let o;
            this.queryType !== "none" && (this.commandEncoder.resolveQuerySet(this.querySet, 0, this.pendingDispatchNumber * 2, this.queryResolveBuffer, 0), o = this.device.createBuffer({
              size: this.pendingDispatchNumber * 2 * 8,
              usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
            }), this.pendingQueries.set(o, this.pendingKernels), this.pendingKernels = [], this.commandEncoder.copyBufferToBuffer(this.queryResolveBuffer, 0, o, 0, this.pendingDispatchNumber * 2 * 8)), this.device.queue.submit([
              this.commandEncoder.finish()
            ]), this.gpuDataManager.refreshPendingBuffers(), this.commandEncoder = null, this.pendingDispatchNumber = 0, this.queryType !== "none" && o.mapAsync(GPUMapMode.READ).then(() => {
              let v = new BigUint64Array(o.getMappedRange()), b = this.pendingQueries.get(o);
              for (let T = 0; T < v.length / 2; T++) {
                let S = b[T], I = S.kernelId, O = this.kernels.get(I), L = O.kernelType, z = O.kernelName, B = S.programName, V = S.inputTensorViews, q = S.outputTensorViews, X = v[T * 2], ee = v[T * 2 + 1];
                typeof this.queryTimeBase > "u" && (this.queryTimeBase = X);
                let ne = Number(X - this.queryTimeBase), se = Number(ee - this.queryTimeBase);
                if (!Number.isSafeInteger(ne) || !Number.isSafeInteger(se))
                  throw new RangeError("incorrect timestamp range");
                if (this.env.webgpu.profiling?.ondata)
                  this.env.webgpu.profiling.ondata({
                    version: 1,
                    inputsMetadata: V.map((ge) => ({
                      dims: ge.dims,
                      dataType: Pn(ge.dataType)
                    })),
                    outputsMetadata: q.map((ge) => ({
                      dims: ge.dims,
                      dataType: Pn(ge.dataType)
                    })),
                    kernelId: I,
                    kernelType: L,
                    kernelName: z,
                    programName: B,
                    startTime: ne,
                    endTime: se
                  });
                else {
                  let ge = "";
                  V.forEach((re, Te) => {
                    ge += `input[${Te}]: [${re.dims}] | ${Pn(re.dataType)}, `;
                  });
                  let ue = "";
                  q.forEach((re, Te) => {
                    ue += `output[${Te}]: [${re.dims}] | ${Pn(re.dataType)}, `;
                  }), console.log(`[profiling] kernel "${I}|${L}|${z}|${B}" ${ge}${ue}execution time: ${se - ne} ns`);
                }
                le("GPU", `${B}::${X}::${ee}`);
              }
              o.unmap(), this.pendingQueries.delete(o);
            }), Ze();
          }
          run(o, v, b, T, S, I) {
            Be(o.name);
            let O = [];
            for (let re = 0; re < v.length; ++re) {
              let Te = v[re].data;
              if (Te === 0)
                continue;
              let we = this.gpuDataManager.get(Te);
              if (!we)
                throw new Error(`no GPU data for input: ${Te}`);
              O.push(we);
            }
            let { outputs: L, dispatchGroup: z, programUniforms: B } = o.getRunData(v), V = b.length === 0 ? L.map((re, Te) => Te) : b;
            if (V.length !== L.length)
              throw new Error(`Output size ${V.length} must be equal to ${L.length}.`);
            let q = [], X = [];
            for (let re = 0; re < L.length; ++re) {
              if (!Number.isInteger(V[re]) || V[re] < -3 || V[re] >= I)
                throw new Error(`Invalid output index: ${V[re]}`);
              if (V[re] === -3)
                continue;
              let Te = V[re] === -1, we = V[re] === -2, Se = Te || we ? S(L[re].dataType, L[re].dims) : T(V[re], L[re].dataType, L[re].dims);
              if (q.push(Se), Se.data === 0)
                continue;
              let ze = this.gpuDataManager.get(Se.data);
              if (!ze)
                throw new Error(`no GPU data for output: ${Se.data}`);
              if (Te && this.temporaryData.push(ze), we) {
                let Le = this.kernelPersistentData.get(this.currentKernelId);
                Le || (Le = [], this.kernelPersistentData.set(this.currentKernelId, Le)), Le.push(ze);
              }
              X.push(ze);
            }
            if (O.length !== v.length || X.length !== q.length) {
              if (X.length === 0)
                return Ze(o.name), q;
              throw new Error(`Program ${o.name} has zero-sized tensor(s) in inputs or outputs. This is not supported now.`);
            }
            let ee;
            if (B) {
              let re = 0, Te = [];
              B.forEach((Le) => {
                let nt = typeof Le.data == "number" ? [
                  Le.data
                ] : Le.data;
                if (nt.length === 0)
                  return;
                let st = Le.type === 10 ? 2 : 4, Mt, Ut;
                Le.type === 10 ? (Ut = nt.length > 4 ? 16 : nt.length > 2 ? 8 : nt.length * st, Mt = nt.length > 4 ? 16 : st * nt.length) : (Ut = nt.length <= 2 ? nt.length * st : 16, Mt = 16), re = Math.ceil(re / Ut) * Ut, Te.push(re);
                let Yt = Le.type === 10 ? 8 : 4;
                re += nt.length > 4 ? Math.ceil(nt.length / Yt) * Mt : nt.length * st;
              });
              let we = 16;
              re = Math.ceil(re / we) * we;
              let Se = new ArrayBuffer(re);
              B.forEach((Le, nt) => {
                let st = Te[nt], Mt = typeof Le.data == "number" ? [
                  Le.data
                ] : Le.data;
                if (Le.type === 6)
                  new Int32Array(Se, st, Mt.length).set(Mt);
                else if (Le.type === 12)
                  new Uint32Array(Se, st, Mt.length).set(Mt);
                else if (Le.type === 10)
                  new Uint16Array(Se, st, Mt.length).set(Mt);
                else if (Le.type === 1)
                  new Float32Array(Se, st, Mt.length).set(Mt);
                else
                  throw new Error(`Unsupported uniform type: ${Pn(Le.type)}`);
              });
              let ze = this.gpuDataManager.create(re, GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM);
              this.device.queue.writeBuffer(ze.buffer, 0, Se, 0, re), this.gpuDataManager.release(ze.id), ee = {
                offset: 0,
                size: re,
                buffer: ze.buffer
              };
            }
            let ne = this.programManager.normalizeDispatchGroupSize(z), se = ne[1] === 1 && ne[2] === 1, ge = Ku(o, v, se), ue = this.programManager.getArtifact(ge);
            if (ue || (ue = this.programManager.build(o, ne), this.programManager.setArtifact(ge, ue), mn("info", () => `[artifact] key: ${ge}, programName: ${o.name}`)), B && ue.uniformVariablesInfo) {
              if (B.length !== ue.uniformVariablesInfo.length)
                throw new Error(`Uniform variables count mismatch: expect ${ue.uniformVariablesInfo.length}, got ${B.length} in program "${ue.programInfo.name}".`);
              for (let re = 0; re < B.length; re++) {
                let Te = B[re], we = Te.type, Se = typeof Te.data == "number" ? 1 : Te.data.length, [ze, Le] = ue.uniformVariablesInfo[re];
                if (we !== ze || Se !== Le)
                  throw new Error(`Uniform variable ${re} mismatch: expect type ${ze} with size ${Le}, got type ${we} with size ${Se} in program "${ue.programInfo.name}".`);
              }
            }
            if (mn("info", () => `[ProgramManager] run "${o.name}" (key=${ge}) with ${ne[0]}x${ne[1]}x${ne[2]}`), this.queryType !== "none" || this.sessionStatus === "capturing") {
              let re = {
                kernelId: this.currentKernelId,
                programName: ue.programInfo.name,
                inputTensorViews: v,
                outputTensorViews: q
              };
              this.pendingKernels.push(re), this.sessionStatus === "capturing" && this.capturedPendingKernels.get(this.currentSessionId).push(re);
            }
            return this.programManager.run(ue, O, X, ne, ee), Ze(o.name), q;
          }
          upload(o, v) {
            this.gpuDataManager.upload(o, v);
          }
          memcpy(o, v) {
            this.gpuDataManager.memcpy(o, v);
          }
          async download(o, v) {
            await this.gpuDataManager.download(o, v);
          }
          alloc(o) {
            return this.gpuDataManager.create(o).id;
          }
          free(o) {
            return this.gpuDataManager.release(o);
          }
          createKernel(o, v, b, T) {
            let S = Gu.get(o);
            if (!S)
              throw new Error(`kernel not implemented: ${o}`);
            let I = {
              kernelType: o,
              kernelName: T,
              kernelEntry: S[0],
              attributes: [
                S[1],
                b
              ]
            };
            this.kernels.set(v, I);
          }
          releaseKernel(o) {
            let v = this.kernelPersistentData.get(o);
            if (v) {
              for (let b of v)
                this.gpuDataManager.release(b.id);
              this.kernelPersistentData.delete(o);
            }
            this.kernelCustomData.delete(o), this.kernels.delete(o);
          }
          computeKernel(o, v, b) {
            let T = this.kernels.get(o);
            if (!T)
              throw new Error(`kernel not created: ${o}`);
            let S = T.kernelType, I = T.kernelName, O = T.kernelEntry, L = T.attributes;
            if (this.currentKernelId !== null)
              throw new Error(`kernel "[${S}] ${I}" is not allowed to be called recursively`);
            this.currentKernelId = o, L[0] && (L[1] = L[0](L[1]), L[0] = void 0), mn("info", () => `[WebGPU] Start to run kernel "[${S}] ${I}"...`);
            let z = this.env.debug;
            this.temporaryData = [];
            try {
              return z && this.device.pushErrorScope("validation"), O(v, L[1]), 0;
            } catch (B) {
              return b.push(Promise.resolve(`[WebGPU] Kernel "[${S}] ${I}" failed. ${B}`)), 1;
            } finally {
              z && b.push(this.device.popErrorScope().then((B) => B ? `GPU validation error for kernel "[${S}] ${I}": ${B.message}` : null));
              for (let B of this.temporaryData)
                this.gpuDataManager.release(B.id);
              this.temporaryData = [], this.currentKernelId = null;
            }
          }
          registerBuffer(o, v, b, T) {
            let S = this.sessionExternalDataMapping.get(o);
            S || (S = /* @__PURE__ */ new Map(), this.sessionExternalDataMapping.set(o, S));
            let I = S.get(v), O = this.gpuDataManager.registerExternalBuffer(b, T, I);
            return S.set(v, [
              O,
              b
            ]), O;
          }
          unregisterBuffers(o) {
            let v = this.sessionExternalDataMapping.get(o);
            v && (v.forEach((b) => this.gpuDataManager.unregisterExternalBuffer(b[0])), this.sessionExternalDataMapping.delete(o));
          }
          getBuffer(o) {
            let v = this.gpuDataManager.get(o);
            if (!v)
              throw new Error(`no GPU data for buffer: ${o}`);
            return v.buffer;
          }
          createDownloader(o, v, b) {
            return async () => {
              let T = await Ne(this, o, v);
              return Pe(T.buffer, b);
            };
          }
          writeTimestamp(o) {
            this.queryType === "inside-passes" && this.computePassEncoder.writeTimestamp(this.querySet, o);
          }
          setQueryType() {
            this.queryType = "none", (this.env.webgpu.profiling?.mode === "default" || (typeof this.env.trace > "u" ? this.env.wasm.trace : this.env.trace)) && (this.device.features.has("chromium-experimental-timestamp-query-inside-passes") ? this.queryType = "inside-passes" : this.device.features.has("timestamp-query") && (this.queryType = "at-passes"), this.queryType !== "none" && typeof this.querySet > "u" && (this.querySet = this.device.createQuerySet({
              type: "timestamp",
              count: this.maxDispatchNumber * 2
            }), this.queryResolveBuffer = this.device.createBuffer({
              size: this.maxDispatchNumber * 2 * 8,
              usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE
            })));
          }
          captureBegin() {
            mn("info", "captureBegin"), this.capturedCommandList.get(this.currentSessionId) || this.capturedCommandList.set(this.currentSessionId, []), this.capturedPendingKernels.get(this.currentSessionId) || this.capturedPendingKernels.set(this.currentSessionId, []), this.flush(), this.sessionStatus = "capturing";
          }
          captureEnd() {
            mn("info", "captureEnd"), this.flush(), this.sessionStatus = "default";
          }
          replay() {
            mn("info", "replay"), this.sessionStatus = "replaying";
            let o = this.capturedCommandList.get(this.currentSessionId), v = this.capturedPendingKernels.get(this.currentSessionId), b = o.length;
            this.pendingKernels = [];
            for (let T = 0; T < b; T++) {
              let S = this.getComputePassEncoder(), I = o[T];
              this.writeTimestamp(this.pendingDispatchNumber * 2), S.setPipeline(I.computePipeline), S.setBindGroup(0, I.bindGroup), S.dispatchWorkgroups(...I.dispatchGroup), this.writeTimestamp(this.pendingDispatchNumber * 2 + 1), this.pendingDispatchNumber++, this.queryType !== "none" && this.pendingKernels.push(v[T]), (this.pendingDispatchNumber >= this.maxDispatchNumber || this.queryType === "at-passes") && this.endComputePass(), this.pendingDispatchNumber >= this.maxDispatchNumber && this.flush();
            }
            this.flush(), this.sessionStatus = "default";
          }
          onCreateSession() {
            this.gpuDataManager.onCreateSession();
          }
          onReleaseSession(o) {
            this.unregisterBuffers(o), this.capturedCommandList.has(o) && this.capturedCommandList.delete(o), this.capturedPendingKernels.has(o) && this.capturedPendingKernels.delete(o), this.gpuDataManager.onReleaseSession(o);
          }
          onRunStart(o) {
            this.currentSessionId = o, this.setQueryType();
          }
        };
      }), Qu = {};
      _(Qu, {
        init: () => Ju
      });
      var Gs, tp, Ju, np = g(() => {
        Kt(), Gn(), ce(), Mr(), Gs = class Ap {
          constructor(v, b, T, S) {
            this.module = v, this.dataType = b, this.data = T, this.dims = S;
          }
          getFloat32Array() {
            if (this.dataType !== 1)
              throw new Error("Invalid data type");
            let v = Xe.size(this.dims);
            return v === 0 ? new Float32Array() : new Float32Array(this.module.HEAP8.buffer, this.data, v);
          }
          getBigInt64Array() {
            if (this.dataType !== 7)
              throw new Error("Invalid data type");
            let v = Xe.size(this.dims);
            return v === 0 ? new BigInt64Array() : new BigInt64Array(this.module.HEAP8.buffer, this.data, v);
          }
          getInt32Array() {
            if (this.dataType !== 6)
              throw new Error("Invalid data type");
            let v = Xe.size(this.dims);
            return v === 0 ? new Int32Array() : new Int32Array(this.module.HEAP8.buffer, this.data, v);
          }
          getUint16Array() {
            if (this.dataType !== 10 && this.dataType !== 4)
              throw new Error("Invalid data type");
            let v = Xe.size(this.dims);
            return v === 0 ? new Uint16Array() : new Uint16Array(this.module.HEAP8.buffer, this.data, v);
          }
          reshape(v) {
            if (Xe.size(v) !== Xe.size(this.dims))
              throw new Error("Invalid new shape");
            return new Ap(this.module, this.dataType, this.data, v);
          }
        }, tp = class {
          constructor(o, v, b) {
            this.module = o, this.backend = v, this.customDataOffset = 0, this.customDataSize = 0, this.adapterInfo = v.adapterInfo;
            let T = o.PTR_SIZE, S = b / o.PTR_SIZE, I = T === 4 ? "i32" : "i64";
            this.opKernelContext = Number(o.getValue(T * S++, I));
            let O = Number(o.getValue(T * S++, I));
            this.outputCount = Number(o.getValue(T * S++, I)), this.customDataOffset = Number(o.getValue(T * S++, "*")), this.customDataSize = Number(o.getValue(T * S++, I));
            let L = [];
            for (let z = 0; z < O; z++) {
              let B = Number(o.getValue(T * S++, I)), V = Number(o.getValue(T * S++, "*")), q = Number(o.getValue(T * S++, I)), X = [];
              for (let ee = 0; ee < q; ee++)
                X.push(Number(o.getValue(T * S++, I)));
              L.push(new Gs(o, B, V, X));
            }
            this.inputs = L;
          }
          get kernelCustomData() {
            return this.backend.currentKernelCustomData;
          }
          get customDataBuffer() {
            return this.module.HEAPU8.subarray(this.customDataOffset, this.customDataOffset + this.customDataSize);
          }
          compute(o, v) {
            let b = v?.inputs?.map((O) => typeof O == "number" ? this.inputs[O] : O) ?? this.inputs, T = v?.outputs ?? [], S = (O, L, z) => new Gs(this.module, L, this.output(O, z), z), I = (O, L) => {
              let z = Sn(O, L);
              if (!z)
                throw new Error(`Unsupported data type: ${O}`);
              let B = z > 0 ? this.backend.gpuDataManager.create(z).id : 0;
              return new Gs(this.module, O, B, L);
            };
            return this.backend.run(o, b, T, S, I, this.outputCount);
          }
          output(o, v) {
            let b = this.module.stackSave();
            try {
              let T = this.module.PTR_SIZE, S = T === 4 ? "i32" : "i64", I = this.module.stackAlloc((1 + v.length) * T);
              this.module.setValue(I, v.length, S);
              for (let O = 0; O < v.length; O++)
                this.module.setValue(I + T * (O + 1), v[O], S);
              return this.module._JsepOutput(this.opKernelContext, o, I);
            } catch (T) {
              throw new Error(`Failed to generate kernel's output[${o}] with dims [${v}]. If you are running with pre-allocated output, please make sure the output type/dims are correct. Error: ${T}`);
            } finally {
              this.module.stackRestore(b);
            }
          }
        }, Ju = async (o, v, b, T) => {
          let S = v.jsepInit;
          if (!S)
            throw new Error("Failed to initialize JSEP. The WebAssembly module is not built with JSEP support.");
          if (o === "webgpu") {
            let I = (ep(), r(qu)).WebGpuBackend, O = new I();
            await O.initialize(b, T), S("webgpu", [
              O,
              (L) => O.alloc(Number(L)),
              (L) => O.free(L),
              (L, z, B, V = false) => {
                if (V)
                  mn("verbose", () => `[WebGPU] jsepCopyGpuToGpu: src=${Number(L)}, dst=${Number(z)}, size=${Number(B)}`), O.memcpy(Number(L), Number(z));
                else {
                  mn("verbose", () => `[WebGPU] jsepCopyCpuToGpu: dataOffset=${Number(L)}, gpuDataId=${Number(z)}, size=${Number(B)}`);
                  let q = v.HEAPU8.subarray(Number(L >>> 0), Number(L >>> 0) + Number(B));
                  O.upload(Number(z), q);
                }
              },
              async (L, z, B) => {
                mn("verbose", () => `[WebGPU] jsepCopyGpuToCpu: gpuDataId=${L}, dataOffset=${z}, size=${B}`), await O.download(Number(L), () => v.HEAPU8.subarray(Number(z) >>> 0, Number(z + B) >>> 0));
              },
              (L, z, B) => O.createKernel(L, Number(z), B, v.UTF8ToString(v._JsepGetNodeName(Number(z)))),
              (L) => O.releaseKernel(L),
              (L, z, B, V) => {
                mn("verbose", () => `[WebGPU] jsepRun: sessionHandle=${B}, kernel=${L}, contextDataOffset=${z}`);
                let q = new tp(v, O, Number(z));
                return O.computeKernel(Number(L), q, V);
              },
              () => O.captureBegin(),
              () => O.captureEnd(),
              () => O.replay()
            ]);
          } else {
            let I = new lr(b);
            S("webnn", [
              I,
              () => I.reserveTensorId(),
              (O) => I.releaseTensorId(O),
              async (O, L, z, B, V) => I.ensureTensor(O, L, z, B, V),
              (O, L) => {
                I.uploadTensor(O, L);
              },
              async (O, L) => I.downloadTensor(O, L)
            ]);
          }
        };
      }), Zu, Di, Li, Ar, rp, Ni, Ri, ed, td, nd, rd, sd, od, sp = g(() => {
        Ie(), dn(), Kt(), Ft(), ie(), fr(), Zu = (o, v) => {
          He()._OrtInit(o, v) !== 0 && jt("Can't initialize onnxruntime.");
        }, Di = async (o) => {
          Zu(o.wasm.numThreads, cn(o.logLevel));
        }, Li = async (o, v) => {
          He().asyncInit?.();
          {
            let b = (np(), r(Qu)).init;
            if (v === "webgpu") {
              if (typeof navigator > "u" || !navigator.gpu)
                throw new Error("WebGPU is not supported in current environment");
              let T = o.webgpu.adapter;
              if (T) {
                if (typeof T.limits != "object" || typeof T.features != "object" || typeof T.requestDevice != "function")
                  throw new Error("Invalid GPU adapter set in `env.webgpu.adapter`. It must be a GPUAdapter object.");
              } else {
                let S = o.webgpu.powerPreference;
                if (S !== void 0 && S !== "low-power" && S !== "high-performance")
                  throw new Error(`Invalid powerPreference setting: "${S}"`);
                let I = o.webgpu.forceFallbackAdapter;
                if (I !== void 0 && typeof I != "boolean")
                  throw new Error(`Invalid forceFallbackAdapter setting: "${I}"`);
                if (T = await navigator.gpu.requestAdapter({
                  powerPreference: S,
                  forceFallbackAdapter: I
                }), !T)
                  throw new Error('Failed to get GPU adapter. You may need to enable flag "--enable-unsafe-webgpu" if you are using Chrome.');
              }
              await b("webgpu", He(), o, T);
            }
            if (v === "webnn") {
              if (typeof navigator > "u" || !navigator.ml)
                throw new Error("WebNN is not supported in current environment");
              await b("webnn", He(), o);
            }
          }
        }, Ar = /* @__PURE__ */ new Map(), rp = (o) => {
          let v = He(), b = v.stackSave();
          try {
            let T = v.PTR_SIZE, S = v.stackAlloc(2 * T);
            v._OrtGetInputOutputCount(o, S, S + T) !== 0 && jt("Can't get session input/output count.");
            let I = T === 4 ? "i32" : "i64";
            return [
              Number(v.getValue(S, I)),
              Number(v.getValue(S + T, I))
            ];
          } finally {
            v.stackRestore(b);
          }
        }, Ni = (o, v) => {
          let b = He(), T = b.stackSave(), S = 0;
          try {
            let I = b.PTR_SIZE, O = b.stackAlloc(2 * I);
            b._OrtGetInputOutputMetadata(o, v, O, O + I) !== 0 && jt("Can't get session input/output metadata.");
            let L = Number(b.getValue(O, "*"));
            S = Number(b.getValue(O + I, "*"));
            let z = b.HEAP32[S / 4];
            if (z === 0)
              return [
                L,
                0
              ];
            let B = b.HEAPU32[S / 4 + 1], V = [];
            for (let q = 0; q < B; q++) {
              let X = Number(b.getValue(S + 8 + q * I, "*"));
              V.push(X !== 0 ? b.UTF8ToString(X) : Number(b.getValue(S + 8 + (q + B) * I, "*")));
            }
            return [
              L,
              z,
              V
            ];
          } finally {
            b.stackRestore(T), S !== 0 && b._OrtFree(S);
          }
        }, Ri = (o) => {
          let v = He(), b = v._malloc(o.byteLength);
          if (b === 0)
            throw new Error(`Can't create a session. failed to allocate a buffer of size ${o.byteLength}.`);
          return v.HEAPU8.set(o, b), [
            b,
            o.byteLength
          ];
        }, ed = async (o, v) => {
          let b, T, S = He();
          Array.isArray(o) ? [b, T] = o : o.buffer === S.HEAPU8.buffer ? [b, T] = [
            o.byteOffset,
            o.byteLength
          ] : [b, T] = Ri(o);
          let I = 0, O = 0, L = 0, z = [], B = [], V = [];
          try {
            if ([O, z] = await Lt(v), v?.externalData && S.mountExternalData) {
              let we = [];
              for (let Se of v.externalData) {
                let ze = typeof Se == "string" ? Se : Se.path;
                we.push(tr(typeof Se == "string" ? Se : Se.data).then((Le) => {
                  S.mountExternalData(ze, Le);
                }));
              }
              await Promise.all(we);
            }
            for (let we of v?.executionProviders ?? [])
              if ((typeof we == "string" ? we : we.name) === "webnn") {
                if (S.shouldTransferToMLTensor = false, typeof we != "string") {
                  let Se = we, ze = Se?.context, Le = Se?.gpuDevice, nt = Se?.deviceType, st = Se?.powerPreference;
                  ze ? S.currentContext = ze : Le ? S.currentContext = await S.webnnCreateMLContext(Le) : S.currentContext = await S.webnnCreateMLContext({
                    deviceType: nt,
                    powerPreference: st
                  });
                } else
                  S.currentContext = await S.webnnCreateMLContext();
                break;
              }
            I = await S._OrtCreateSession(b, T, O), S.webgpuOnCreateSession?.(I), I === 0 && jt("Can't create a session."), S.jsepOnCreateSession?.(), S.currentContext && (S.webnnRegisterMLContext(I, S.currentContext), S.currentContext = void 0, S.shouldTransferToMLTensor = true);
            let [q, X] = rp(I), ee = !!v?.enableGraphCapture, ne = [], se = [], ge = [], ue = [], re = [];
            for (let we = 0; we < q; we++) {
              let [Se, ze, Le] = Ni(I, we);
              Se === 0 && jt("Can't get an input name."), B.push(Se);
              let nt = S.UTF8ToString(Se);
              ne.push(nt), ge.push(ze === 0 ? {
                name: nt,
                isTensor: false
              } : {
                name: nt,
                isTensor: true,
                type: Pn(ze),
                shape: Le
              });
            }
            for (let we = 0; we < X; we++) {
              let [Se, ze, Le] = Ni(I, we + q);
              Se === 0 && jt("Can't get an output name."), V.push(Se);
              let nt = S.UTF8ToString(Se);
              se.push(nt), ue.push(ze === 0 ? {
                name: nt,
                isTensor: false
              } : {
                name: nt,
                isTensor: true,
                type: Pn(ze),
                shape: Le
              });
              {
                if (ee && v?.preferredOutputLocation === void 0) {
                  re.push("gpu-buffer");
                  continue;
                }
                let st = typeof v?.preferredOutputLocation == "string" ? v.preferredOutputLocation : v?.preferredOutputLocation?.[nt] ?? "cpu";
                if (st !== "cpu" && st !== "cpu-pinned" && st !== "gpu-buffer" && st !== "ml-tensor")
                  throw new Error(`Not supported preferred output location: ${st}.`);
                if (ee && st !== "gpu-buffer")
                  throw new Error(`Not supported preferred output location: ${st}. Only 'gpu-buffer' location is supported when enableGraphCapture is true.`);
                re.push(st);
              }
            }
            let Te = null;
            return re.some((we) => we === "gpu-buffer" || we === "ml-tensor") && (L = S._OrtCreateBinding(I), L === 0 && jt("Can't create IO binding."), Te = {
              handle: L,
              outputPreferredLocations: re,
              outputPreferredLocationsEncoded: re.map((we) => Xn(we))
            }), Ar.set(I, [
              I,
              B,
              V,
              Te,
              ee,
              false
            ]), [
              I,
              ne,
              se,
              ge,
              ue
            ];
          } catch (q) {
            throw B.forEach((X) => S._OrtFree(X)), V.forEach((X) => S._OrtFree(X)), L !== 0 && S._OrtReleaseBinding(L) !== 0 && jt("Can't release IO binding."), I !== 0 && S._OrtReleaseSession(I) !== 0 && jt("Can't release session."), q;
          } finally {
            S._free(b), O !== 0 && S._OrtReleaseSessionOptions(O) !== 0 && jt("Can't release session options."), z.forEach((q) => S._free(q)), S.unmountExternalData?.();
          }
        }, td = (o) => {
          let v = He(), b = Ar.get(o);
          if (!b)
            throw new Error(`cannot release session. invalid session id: ${o}`);
          let [T, S, I, O, L] = b;
          O && (L && v._OrtClearBoundOutputs(O.handle) !== 0 && jt("Can't clear bound outputs."), v._OrtReleaseBinding(O.handle) !== 0 && jt("Can't release IO binding.")), v.jsepOnReleaseSession?.(o), v.webnnOnReleaseSession?.(o), v.webgpuOnReleaseSession?.(o), S.forEach((z) => v._OrtFree(z)), I.forEach((z) => v._OrtFree(z)), v._OrtReleaseSession(T) !== 0 && jt("Can't release session."), Ar.delete(o);
        }, nd = async (o, v, b, T, S, I, O = false) => {
          if (!o) {
            v.push(0);
            return;
          }
          let L = He(), z = L.PTR_SIZE, B = o[0], V = o[1], q = o[3], X = q, ee, ne;
          if (B === "string" && (q === "gpu-buffer" || q === "ml-tensor"))
            throw new Error("String tensor is not supported on GPU.");
          if (O && q !== "gpu-buffer")
            throw new Error(`External buffer must be provided for input/output index ${I} when enableGraphCapture is true.`);
          if (q === "gpu-buffer") {
            let ue = o[2].gpuBuffer;
            ne = Sn(bn(B), V);
            {
              let re = L.jsepRegisterBuffer;
              if (!re)
                throw new Error('Tensor location "gpu-buffer" is not supported without using WebGPU.');
              ee = re(T, I, ue, ne);
            }
          } else if (q === "ml-tensor") {
            let ue = o[2].mlTensor;
            ne = Sn(bn(B), V);
            let re = L.webnnRegisterMLTensor;
            if (!re)
              throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');
            ee = re(T, ue, bn(B), V);
          } else {
            let ue = o[2];
            if (Array.isArray(ue)) {
              ne = z * ue.length, ee = L._malloc(ne), b.push(ee);
              for (let re = 0; re < ue.length; re++) {
                if (typeof ue[re] != "string")
                  throw new TypeError(`tensor data at index ${re} is not a string`);
                L.setValue(ee + re * z, Bt(ue[re], b), "*");
              }
            } else {
              let re = L.webnnIsGraphInput;
              if (B !== "string" && re) {
                let Te = L.UTF8ToString(S);
                if (re(T, Te)) {
                  let we = bn(B);
                  ne = Sn(we, V), X = "ml-tensor";
                  let Se = L.webnnCreateTemporaryTensor, ze = L.webnnUploadTensor;
                  if (!Se || !ze)
                    throw new Error('Tensor location "ml-tensor" is not supported without using WebNN.');
                  let Le = await Se(T, we, V);
                  ze(Le, new Uint8Array(ue.buffer, ue.byteOffset, ue.byteLength)), ee = Le;
                } else
                  ne = ue.byteLength, ee = L._malloc(ne), b.push(ee), L.HEAPU8.set(new Uint8Array(ue.buffer, ue.byteOffset, ne), ee);
              } else
                ne = ue.byteLength, ee = L._malloc(ne), b.push(ee), L.HEAPU8.set(new Uint8Array(ue.buffer, ue.byteOffset, ne), ee);
            }
          }
          let se = L.stackSave(), ge = L.stackAlloc(4 * V.length);
          try {
            V.forEach((re, Te) => L.setValue(ge + Te * z, re, z === 4 ? "i32" : "i64"));
            let ue = L._OrtCreateTensor(bn(B), ee, ne, ge, V.length, Xn(X));
            ue === 0 && jt(`Can't create tensor for input/output. session=${T}, index=${I}.`), v.push(ue);
          } finally {
            L.stackRestore(se);
          }
        }, rd = async (o, v, b, T, S, I) => {
          let O = He(), L = O.PTR_SIZE, z = Ar.get(o);
          if (!z)
            throw new Error(`cannot run inference. invalid session id: ${o}`);
          let B = z[0], V = z[1], q = z[2], X = z[3], ee = z[4], ne = z[5], se = v.length, ge = T.length, ue = 0, re = [], Te = [], we = [], Se = [], ze = O.stackSave(), Le = O.stackAlloc(se * L), nt = O.stackAlloc(se * L), st = O.stackAlloc(ge * L), Mt = O.stackAlloc(ge * L);
          try {
            [ue, re] = xe(I);
            for (let xt = 0; xt < se; xt++)
              await nd(b[xt], Te, Se, o, V[v[xt]], v[xt], ee);
            for (let xt = 0; xt < ge; xt++)
              await nd(S[xt], we, Se, o, q[T[xt]], se + T[xt], ee);
            for (let xt = 0; xt < se; xt++)
              O.setValue(Le + xt * L, Te[xt], "*"), O.setValue(nt + xt * L, V[v[xt]], "*");
            for (let xt = 0; xt < ge; xt++)
              O.setValue(st + xt * L, we[xt], "*"), O.setValue(Mt + xt * L, q[T[xt]], "*");
            if (X && !ne) {
              let { handle: xt, outputPreferredLocations: hn, outputPreferredLocationsEncoded: yn } = X;
              if (V.length !== se)
                throw new Error(`input count from feeds (${se}) is expected to be always equal to model's input count (${V.length}).`);
              for (let $t = 0; $t < se; $t++) {
                let nn = v[$t];
                await O._OrtBindInput(xt, V[nn], Te[$t]) !== 0 && jt(`Can't bind input[${$t}] for session=${o}.`);
              }
              for (let $t = 0; $t < ge; $t++) {
                let nn = T[$t];
                S[$t]?.[3] ? O._OrtBindOutput(xt, q[nn], we[$t], 0) !== 0 && jt(`Can't bind pre-allocated output[${$t}] for session=${o}.`) : O._OrtBindOutput(xt, q[nn], 0, yn[nn]) !== 0 && jt(`Can't bind output[${$t}] to ${hn[$t]} for session=${o}.`);
              }
              Ar.set(o, [
                B,
                V,
                q,
                X,
                ee,
                true
              ]);
            }
            O.jsepOnRunStart?.(B), O.webnnOnRunStart?.(B);
            let Ut;
            X ? Ut = await O._OrtRunWithBinding(B, X.handle, ge, st, ue) : Ut = await O._OrtRun(B, nt, Le, se, Mt, ge, st, ue), Ut !== 0 && jt("failed to call OrtRun().");
            let Yt = [];
            for (let xt = 0; xt < ge; xt++) {
              let hn = Number(O.getValue(st + xt * L, "*"));
              if (hn === we[xt]) {
                Yt.push(S[xt]);
                continue;
              }
              let yn = O.stackSave(), $t = O.stackAlloc(4 * L), nn = false, wn, rn = 0;
              try {
                O._OrtGetTensorData(hn, $t, $t + L, $t + 2 * L, $t + 3 * L) !== 0 && jt(`Can't access output tensor data on index ${xt}.`);
                let xn = L === 4 ? "i32" : "i64", ft = Number(O.getValue($t, xn));
                rn = O.getValue($t + L, "*");
                let Dt = O.getValue($t + L * 2, "*"), an = Number(O.getValue($t + L * 3, xn)), vn = [];
                for (let er = 0; er < an; er++)
                  vn.push(Number(O.getValue(Dt + er * L, xn)));
                O._OrtFree(Dt) !== 0 && jt("Can't free memory for tensor dims.");
                let Yn = vn.reduce((er, qn) => er * qn, 1);
                wn = Pn(ft);
                let jr = X?.outputPreferredLocations[T[xt]];
                if (wn === "string") {
                  if (jr === "gpu-buffer" || jr === "ml-tensor")
                    throw new Error("String tensor is not supported on GPU.");
                  let er = [];
                  for (let qn = 0; qn < Yn; qn++) {
                    let Xr = O.getValue(rn + qn * L, "*"), cd = O.getValue(rn + (qn + 1) * L, "*"), Vi = qn === Yn - 1 ? void 0 : cd - Xr;
                    er.push(O.UTF8ToString(Xr, Vi));
                  }
                  Yt.push([
                    wn,
                    vn,
                    er,
                    "cpu"
                  ]);
                } else if (jr === "gpu-buffer" && Yn > 0) {
                  let er = O.jsepGetBuffer;
                  if (!er)
                    throw new Error('preferredLocation "gpu-buffer" is not supported without using WebGPU.');
                  let qn = er(rn), Xr = Sn(ft, Yn);
                  if (Xr === void 0 || !Tn(wn))
                    throw new Error(`Unsupported data type: ${wn}`);
                  nn = true, Yt.push([
                    wn,
                    vn,
                    {
                      gpuBuffer: qn,
                      download: O.jsepCreateDownloader(qn, Xr, wn),
                      dispose: () => {
                        O._OrtReleaseTensor(hn) !== 0 && jt("Can't release tensor.");
                      }
                    },
                    "gpu-buffer"
                  ]);
                } else if (jr === "ml-tensor" && Yn > 0) {
                  let er = O.webnnEnsureTensor, qn = O.webnnIsInt64Supported;
                  if (!er || !qn)
                    throw new Error('preferredLocation "ml-tensor" is not supported without using WebNN.');
                  if (Sn(ft, Yn) === void 0 || !Ln(wn))
                    throw new Error(`Unsupported data type: ${wn}`);
                  if (wn === "int64" && !qn(o))
                    throw new Error('preferredLocation "ml-tensor" for int64 output is not supported by current WebNN Context.');
                  let Xr = await er(o, rn, ft, vn, false);
                  nn = true, Yt.push([
                    wn,
                    vn,
                    {
                      mlTensor: Xr,
                      download: O.webnnCreateMLTensorDownloader(rn, wn),
                      dispose: () => {
                        O.webnnReleaseTensorId(rn), O._OrtReleaseTensor(hn);
                      }
                    },
                    "ml-tensor"
                  ]);
                } else {
                  let er = et(wn), qn = new er(Yn);
                  new Uint8Array(qn.buffer, qn.byteOffset, qn.byteLength).set(O.HEAPU8.subarray(rn, rn + qn.byteLength)), Yt.push([
                    wn,
                    vn,
                    qn,
                    "cpu"
                  ]);
                }
              } finally {
                O.stackRestore(yn), wn === "string" && rn && O._free(rn), nn || O._OrtReleaseTensor(hn), O.webnnOnRunEnd?.(B);
              }
            }
            return X && !ee && (O._OrtClearBoundOutputs(X.handle) !== 0 && jt("Can't clear bound outputs."), Ar.set(o, [
              B,
              V,
              q,
              X,
              ee,
              false
            ])), Yt;
          } finally {
            O.stackRestore(ze), Te.forEach((Ut) => O._OrtReleaseTensor(Ut)), we.forEach((Ut) => O._OrtReleaseTensor(Ut)), Se.forEach((Ut) => O._free(Ut)), ue !== 0 && O._OrtReleaseRunOptions(ue), re.forEach((Ut) => O._free(Ut));
          }
        }, sd = (o) => {
          let v = He(), b = Ar.get(o);
          if (!b)
            throw new Error("invalid session id");
          let T = b[0], S = v._OrtEndProfiling(T);
          S === 0 && jt("Can't get an profile file name."), v._OrtFree(S);
        }, od = (o) => {
          let v = [];
          for (let b of o) {
            let T = b[2];
            !Array.isArray(T) && "buffer" in T && v.push(T.buffer);
          }
          return v;
        };
      }), Br, wr, hs, Ws, qs, zi, ad, Bi, Hr, Kr, op, ip, ap, lp, cp, up, dp, pp, hp = g(() => {
        At(), sp(), Ft(), ar(), Br = () => !!N.wasm.proxy && typeof document < "u", hs = false, Ws = false, qs = false, Bi = /* @__PURE__ */ new Map(), Hr = (o, v) => {
          let b = Bi.get(o);
          b ? b.push(v) : Bi.set(o, [
            v
          ]);
        }, Kr = () => {
          if (hs || !Ws || qs || !wr)
            throw new Error("worker not ready");
        }, op = (o) => {
          switch (o.data.type) {
            case "init-wasm":
              hs = false, o.data.err ? (qs = true, ad[1](o.data.err)) : (Ws = true, ad[0]()), zi && (URL.revokeObjectURL(zi), zi = void 0);
              break;
            case "init-ep":
            case "copy-from":
            case "create":
            case "release":
            case "run":
            case "end-profiling": {
              let v = Bi.get(o.data.type);
              o.data.err ? v.shift()[1](o.data.err) : v.shift()[0](o.data.out);
              break;
            }
          }
        }, ip = async () => {
          if (!Ws) {
            if (hs)
              throw new Error("multiple calls to 'initWasm()' detected.");
            if (qs)
              throw new Error("previous call to 'initWasm()' failed.");
            if (hs = true, Br())
              return new Promise((o, v) => {
                wr?.terminate(), Jt().then(([b, T]) => {
                  try {
                    wr = T, wr.onerror = (I) => v(I), wr.onmessage = op, ad = [
                      o,
                      v
                    ];
                    let S = {
                      type: "init-wasm",
                      in: N
                    };
                    if (!S.in.wasm.wasmPaths && b) {
                      let I = Hn();
                      I && (S.in.wasm.wasmPaths = I);
                    }
                    wr.postMessage(S), zi = b;
                  } catch (S) {
                    v(S);
                  }
                }, v);
              });
            try {
              await Ue(N.wasm), await Di(N), Ws = true;
            } catch (o) {
              throw qs = true, o;
            } finally {
              hs = false;
            }
          }
        }, ap = async (o) => {
          if (Br())
            return Kr(), new Promise((v, b) => {
              Hr("init-ep", [
                v,
                b
              ]);
              let T = {
                type: "init-ep",
                in: {
                  epName: o,
                  env: N
                }
              };
              wr.postMessage(T);
            });
          await Li(N, o);
        }, lp = async (o) => Br() ? (Kr(), new Promise((v, b) => {
          Hr("copy-from", [
            v,
            b
          ]);
          let T = {
            type: "copy-from",
            in: {
              buffer: o
            }
          };
          wr.postMessage(T, [
            o.buffer
          ]);
        })) : Ri(o), cp = async (o, v) => {
          if (Br()) {
            if (v?.preferredOutputLocation)
              throw new Error('session option "preferredOutputLocation" is not supported for proxy.');
            return Kr(), new Promise((b, T) => {
              Hr("create", [
                b,
                T
              ]);
              let S = {
                type: "create",
                in: {
                  model: o,
                  options: {
                    ...v
                  }
                }
              }, I = [];
              o instanceof Uint8Array && I.push(o.buffer), wr.postMessage(S, I);
            });
          } else
            return ed(o, v);
        }, up = async (o) => {
          if (Br())
            return Kr(), new Promise((v, b) => {
              Hr("release", [
                v,
                b
              ]);
              let T = {
                type: "release",
                in: o
              };
              wr.postMessage(T);
            });
          td(o);
        }, dp = async (o, v, b, T, S, I) => {
          if (Br()) {
            if (b.some((O) => O[3] !== "cpu"))
              throw new Error("input tensor on GPU is not supported for proxy.");
            if (S.some((O) => O))
              throw new Error("pre-allocated output tensor is not supported for proxy.");
            return Kr(), new Promise((O, L) => {
              Hr("run", [
                O,
                L
              ]);
              let z = b, B = {
                type: "run",
                in: {
                  sessionId: o,
                  inputIndices: v,
                  inputs: z,
                  outputIndices: T,
                  options: I
                }
              };
              wr.postMessage(B, od(z));
            });
          } else
            return rd(o, v, b, T, S, I);
        }, pp = async (o) => {
          if (Br())
            return Kr(), new Promise((v, b) => {
              Hr("end-profiling", [
                v,
                b
              ]);
              let T = {
                type: "end-profiling",
                in: o
              };
              wr.postMessage(T);
            });
          sd(o);
        };
      }), ld, fp, _p, vp = g(() => {
        At(), hp(), Kt(), Ot(), fr(), ld = (o, v) => {
          switch (o.location) {
            case "cpu":
              return [
                o.type,
                o.dims,
                o.data,
                "cpu"
              ];
            case "gpu-buffer":
              return [
                o.type,
                o.dims,
                {
                  gpuBuffer: o.gpuBuffer
                },
                "gpu-buffer"
              ];
            case "ml-tensor":
              return [
                o.type,
                o.dims,
                {
                  mlTensor: o.mlTensor
                },
                "ml-tensor"
              ];
            default:
              throw new Error(`invalid data location: ${o.location} for ${v()}`);
          }
        }, fp = (o) => {
          switch (o[3]) {
            case "cpu":
              return new qe(o[0], o[2], o[1]);
            case "gpu-buffer": {
              let v = o[0];
              if (!Tn(v))
                throw new Error(`not supported data type: ${v} for deserializing GPU tensor`);
              let { gpuBuffer: b, download: T, dispose: S } = o[2];
              return qe.fromGpuBuffer(b, {
                dataType: v,
                dims: o[1],
                download: T,
                dispose: S
              });
            }
            case "ml-tensor": {
              let v = o[0];
              if (!Ln(v))
                throw new Error(`not supported data type: ${v} for deserializing MLTensor tensor`);
              let { mlTensor: b, download: T, dispose: S } = o[2];
              return qe.fromMLTensor(b, {
                dataType: v,
                dims: o[1],
                download: T,
                dispose: S
              });
            }
            default:
              throw new Error(`invalid data location: ${o[3]}`);
          }
        }, _p = class {
          async fetchModelAndCopyToWasmMemory(o) {
            return lp(await tr(o));
          }
          async loadModel(o, v) {
            Be();
            let b;
            typeof o == "string" ? b = await this.fetchModelAndCopyToWasmMemory(o) : b = o, [this.sessionId, this.inputNames, this.outputNames, this.inputMetadata, this.outputMetadata] = await cp(b, v), Ze();
          }
          async dispose() {
            return up(this.sessionId);
          }
          async run(o, v, b) {
            Be();
            let T = [], S = [];
            Object.entries(o).forEach((q) => {
              let X = q[0], ee = q[1], ne = this.inputNames.indexOf(X);
              if (ne === -1)
                throw new Error(`invalid input '${X}'`);
              T.push(ee), S.push(ne);
            });
            let I = [], O = [];
            Object.entries(v).forEach((q) => {
              let X = q[0], ee = q[1], ne = this.outputNames.indexOf(X);
              if (ne === -1)
                throw new Error(`invalid output '${X}'`);
              I.push(ee), O.push(ne);
            });
            let L = T.map((q, X) => ld(q, () => `input "${this.inputNames[S[X]]}"`)), z = I.map((q, X) => q ? ld(q, () => `output "${this.outputNames[O[X]]}"`) : null), B = await dp(this.sessionId, S, L, O, z, b), V = {};
            for (let q = 0; q < B.length; q++)
              V[this.outputNames[O[q]]] = I[q] ?? fp(B[q]);
            return Ze(), V;
          }
          startProfiling() {
          }
          endProfiling() {
            pp(this.sessionId);
          }
        };
      }), mp = {};
      _(mp, {
        OnnxruntimeWebAssemblyBackend: () => ji,
        initializeFlags: () => un,
        wasmBackend: () => Wn
      });
      var un, ji, Wn, Jn = g(() => {
        At(), hp(), vp(), un = () => {
          (typeof N.wasm.initTimeout != "number" || N.wasm.initTimeout < 0) && (N.wasm.initTimeout = 0);
          let o = N.wasm.simd;
          if (typeof o != "boolean" && o !== void 0 && o !== "fixed" && o !== "relaxed" && (console.warn(`Property "env.wasm.simd" is set to unknown value "${o}". Reset it to \`false\` and ignore SIMD feature checking.`), N.wasm.simd = false), typeof N.wasm.proxy != "boolean" && (N.wasm.proxy = false), typeof N.wasm.trace != "boolean" && (N.wasm.trace = false), typeof N.wasm.numThreads != "number" || !Number.isInteger(N.wasm.numThreads) || N.wasm.numThreads <= 0)
            if (typeof self < "u" && !self.crossOriginIsolated)
              N.wasm.numThreads = 1;
            else {
              let v = typeof navigator > "u" ? w("node:os").cpus().length : navigator.hardwareConcurrency;
              N.wasm.numThreads = Math.min(4, Math.ceil((v || 1) / 2));
            }
        }, ji = class {
          async init(o) {
            un(), await ip(), await ap(o);
          }
          async createInferenceSessionHandler(o, v) {
            let b = new _p();
            return await b.loadModel(o, v), b;
          }
        }, Wn = new ji();
      }), Zn = {};
      _(Zn, {
        InferenceSession: () => Ge,
        TRACE: () => le,
        TRACE_FUNC_BEGIN: () => Be,
        TRACE_FUNC_END: () => Ze,
        Tensor: () => qe,
        default: () => Tp,
        env: () => N,
        registerBackend: () => p
      }), At(), At(), At();
      var Yr = "1.22.0-dev.20250409-89f8206ba4", Tp = pt;
      {
        let o = (Jn(), r(mp)).wasmBackend;
        p("webgpu", o, 5), p("webnn", o, 5), p("cpu", o, 10), p("wasm", o, 10);
      }
      return Object.defineProperty(N.versions, "web", {
        value: Yr,
        enumerable: true
      }), r(Zn);
    })();
    i.exports = t;
  })(ort_min$1);
  var ort_minExports = ort_min$1.exports;
  const ort_min = getDefaultExportFromCjs(ort_minExports), __WEBPACK_EXTERNAL_MODULE_onnxruntime_web_74d14b94__ = _mergeNamespaces({
    __proto__: null,
    default: ort_min
  }, [
    ort_minExports
  ]);
  var __webpack_modules__ = {
    "onnxruntime-common": (i) => {
      i.exports = __WEBPACK_EXTERNAL_MODULE_onnxruntime_common_82b39e9f__;
    },
    "onnxruntime-web": (i) => {
      i.exports = __WEBPACK_EXTERNAL_MODULE_onnxruntime_web_74d14b94__;
    },
    "?2ce3": () => {
    },
    "?7992": () => {
    },
    "?5af5": () => {
    },
    "?2b25": () => {
    },
    "?db59": () => {
    },
    "?383f": () => {
    },
    "?fa4b": () => {
    },
    "./node_modules/@huggingface/jinja/dist/index.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Environment: () => Ct,
        Interpreter: () => zt,
        Template: () => sr,
        parse: () => Ye,
        tokenize: () => h
      });
      var s = Object.freeze({
        Text: "Text",
        NumericLiteral: "NumericLiteral",
        StringLiteral: "StringLiteral",
        Identifier: "Identifier",
        Equals: "Equals",
        OpenParen: "OpenParen",
        CloseParen: "CloseParen",
        OpenStatement: "OpenStatement",
        CloseStatement: "CloseStatement",
        OpenExpression: "OpenExpression",
        CloseExpression: "CloseExpression",
        OpenSquareBracket: "OpenSquareBracket",
        CloseSquareBracket: "CloseSquareBracket",
        OpenCurlyBracket: "OpenCurlyBracket",
        CloseCurlyBracket: "CloseCurlyBracket",
        Comma: "Comma",
        Dot: "Dot",
        Colon: "Colon",
        Pipe: "Pipe",
        CallOperator: "CallOperator",
        AdditiveBinaryOperator: "AdditiveBinaryOperator",
        MultiplicativeBinaryOperator: "MultiplicativeBinaryOperator",
        ComparisonBinaryOperator: "ComparisonBinaryOperator",
        UnaryOperator: "UnaryOperator",
        Comment: "Comment"
      }), l = class {
        constructor(W, ve) {
          this.value = W, this.type = ve;
        }
      };
      function f(W) {
        return /\w/.test(W);
      }
      function d(W) {
        return /[0-9]/.test(W);
      }
      var w = [
        [
          "{%",
          s.OpenStatement
        ],
        [
          "%}",
          s.CloseStatement
        ],
        [
          "{{",
          s.OpenExpression
        ],
        [
          "}}",
          s.CloseExpression
        ],
        [
          "(",
          s.OpenParen
        ],
        [
          ")",
          s.CloseParen
        ],
        [
          "{",
          s.OpenCurlyBracket
        ],
        [
          "}",
          s.CloseCurlyBracket
        ],
        [
          "[",
          s.OpenSquareBracket
        ],
        [
          "]",
          s.CloseSquareBracket
        ],
        [
          ",",
          s.Comma
        ],
        [
          ".",
          s.Dot
        ],
        [
          ":",
          s.Colon
        ],
        [
          "|",
          s.Pipe
        ],
        [
          "<=",
          s.ComparisonBinaryOperator
        ],
        [
          ">=",
          s.ComparisonBinaryOperator
        ],
        [
          "==",
          s.ComparisonBinaryOperator
        ],
        [
          "!=",
          s.ComparisonBinaryOperator
        ],
        [
          "<",
          s.ComparisonBinaryOperator
        ],
        [
          ">",
          s.ComparisonBinaryOperator
        ],
        [
          "+",
          s.AdditiveBinaryOperator
        ],
        [
          "-",
          s.AdditiveBinaryOperator
        ],
        [
          "~",
          s.AdditiveBinaryOperator
        ],
        [
          "*",
          s.MultiplicativeBinaryOperator
        ],
        [
          "/",
          s.MultiplicativeBinaryOperator
        ],
        [
          "%",
          s.MultiplicativeBinaryOperator
        ],
        [
          "=",
          s.Equals
        ]
      ], g = /* @__PURE__ */ new Map([
        [
          "n",
          `
`
        ],
        [
          "t",
          "	"
        ],
        [
          "r",
          "\r"
        ],
        [
          "b",
          "\b"
        ],
        [
          "f",
          "\f"
        ],
        [
          "v",
          "\v"
        ],
        [
          "'",
          "'"
        ],
        [
          '"',
          '"'
        ],
        [
          "\\",
          "\\"
        ]
      ]);
      function _(W, ve = {}) {
        return W.endsWith(`
`) && (W = W.slice(0, -1)), ve.lstrip_blocks && (W = W.replace(/^[ \t]*({[#%-])/gm, "$1")), ve.trim_blocks && (W = W.replace(/([#%-]})\n/g, "$1")), W.replace(/-%}\s*/g, "%}").replace(/\s*{%-/g, "{%").replace(/-}}\s*/g, "}}").replace(/\s*{{-/g, "{{").replace(/-#}\s*/g, "#}").replace(/\s*{#-/g, "{#").replace(/{%\s*(end)?generation\s*%}/gs, "");
      }
      function h(W, ve = {}) {
        const de = [], ye = _(W, ve);
        let ke = 0, Ue = 0;
        const He = (Ft) => {
          let Bt = "";
          for (; Ft(ye[ke]); ) {
            if (ye[ke] === "\\") {
              if (++ke, ke >= ye.length)
                throw new SyntaxError("Unexpected end of input");
              const Et = ye[ke++], jt = g.get(Et);
              if (jt === void 0)
                throw new SyntaxError(`Unexpected escaped character: ${Et}`);
              Bt += jt;
              continue;
            }
            if (Bt += ye[ke++], ke >= ye.length)
              throw new SyntaxError("Unexpected end of input");
          }
          return Bt;
        };
        e:
          for (; ke < ye.length; ) {
            const Ft = de.at(-1)?.type;
            if (Ft === void 0 || Ft === s.CloseStatement || Ft === s.CloseExpression || Ft === s.Comment) {
              let Et = "";
              for (; ke < ye.length && !(ye[ke] === "{" && (ye[ke + 1] === "%" || ye[ke + 1] === "{" || ye[ke + 1] === "#")); )
                Et += ye[ke++];
              if (Et.length > 0) {
                de.push(new l(Et, s.Text));
                continue;
              }
            }
            if (ye[ke] === "{" && ye[ke + 1] === "#") {
              ke += 2;
              let Et = "";
              for (; ye[ke] !== "#" || ye[ke + 1] !== "}"; ) {
                if (ke + 2 >= ye.length)
                  throw new SyntaxError("Missing end of comment tag");
                Et += ye[ke++];
              }
              de.push(new l(Et, s.Comment)), ke += 2;
              continue;
            }
            He((Et) => /\s/.test(Et));
            const Bt = ye[ke];
            if (Bt === "-" || Bt === "+") {
              const Et = de.at(-1)?.type;
              if (Et === s.Text || Et === void 0)
                throw new SyntaxError(`Unexpected character: ${Bt}`);
              switch (Et) {
                case s.Identifier:
                case s.NumericLiteral:
                case s.StringLiteral:
                case s.CloseParen:
                case s.CloseSquareBracket:
                  break;
                default: {
                  ++ke;
                  const jt = He(d);
                  de.push(new l(`${Bt}${jt}`, jt.length > 0 ? s.NumericLiteral : s.UnaryOperator));
                  continue;
                }
              }
            }
            for (const [Et, jt] of w) {
              if (Et === "}}" && Ue > 0)
                continue;
              if (ye.slice(ke, ke + Et.length) === Et) {
                de.push(new l(Et, jt)), jt === s.OpenExpression ? Ue = 0 : jt === s.OpenCurlyBracket ? ++Ue : jt === s.CloseCurlyBracket && --Ue, ke += Et.length;
                continue e;
              }
            }
            if (Bt === "'" || Bt === '"') {
              ++ke;
              const Et = He((jt) => jt !== Bt);
              de.push(new l(Et, s.StringLiteral)), ++ke;
              continue;
            }
            if (d(Bt)) {
              let Et = He(d);
              if (ye[ke] === "." && d(ye[ke + 1])) {
                ++ke;
                const jt = He(d);
                Et = `${Et}.${jt}`;
              }
              de.push(new l(Et, s.NumericLiteral));
              continue;
            }
            if (f(Bt)) {
              const Et = He(f);
              de.push(new l(Et, s.Identifier));
              continue;
            }
            throw new SyntaxError(`Unexpected character: ${Bt}`);
          }
        return de;
      }
      var r = class {
        constructor() {
          __publicField(this, "type", "Statement");
        }
      }, n = class extends r {
        constructor(W) {
          super();
          __publicField(this, "type", "Program");
          this.body = W;
        }
      }, u = class extends r {
        constructor(W, ve, de) {
          super();
          __publicField(this, "type", "If");
          this.test = W, this.body = ve, this.alternate = de;
        }
      }, p = class extends r {
        constructor(W, ve, de, ye) {
          super();
          __publicField(this, "type", "For");
          this.loopvar = W, this.iterable = ve, this.body = de, this.defaultBlock = ye;
        }
      }, M = class extends r {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "Break");
        }
      }, P = class extends r {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "Continue");
        }
      }, E = class extends r {
        constructor(W, ve, de) {
          super();
          __publicField(this, "type", "Set");
          this.assignee = W, this.value = ve, this.body = de;
        }
      }, k = class extends r {
        constructor(W, ve, de) {
          super();
          __publicField(this, "type", "Macro");
          this.name = W, this.args = ve, this.body = de;
        }
      }, $ = class extends r {
        constructor(W) {
          super();
          __publicField(this, "type", "Comment");
          this.value = W;
        }
      }, A = class extends r {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "Expression");
        }
      }, C = class extends A {
        constructor(W, ve, de) {
          super();
          __publicField(this, "type", "MemberExpression");
          this.object = W, this.property = ve, this.computed = de;
        }
      }, F = class extends A {
        constructor(W, ve) {
          super();
          __publicField(this, "type", "CallExpression");
          this.callee = W, this.args = ve;
        }
      }, D = class extends A {
        constructor(W) {
          super();
          __publicField(this, "type", "Identifier");
          this.value = W;
        }
      }, N = class extends A {
        constructor(W) {
          super();
          __publicField(this, "type", "Literal");
          this.value = W;
        }
      }, R = class extends N {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "IntegerLiteral");
        }
      }, j = class extends N {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "FloatLiteral");
        }
      }, Z = class extends N {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "StringLiteral");
        }
      }, te = class extends N {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "ArrayLiteral");
        }
      }, J = class extends N {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "TupleLiteral");
        }
      }, G = class extends N {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "ObjectLiteral");
        }
      }, H = class extends A {
        constructor(W, ve, de) {
          super();
          __publicField(this, "type", "BinaryExpression");
          this.operator = W, this.left = ve, this.right = de;
        }
      }, U = class extends A {
        constructor(W, ve) {
          super();
          __publicField(this, "type", "FilterExpression");
          this.operand = W, this.filter = ve;
        }
      }, Q = class extends r {
        constructor(W, ve) {
          super();
          __publicField(this, "type", "FilterStatement");
          this.filter = W, this.body = ve;
        }
      }, he = class extends A {
        constructor(W, ve) {
          super();
          __publicField(this, "type", "SelectExpression");
          this.lhs = W, this.test = ve;
        }
      }, fe = class extends A {
        constructor(W, ve, de) {
          super();
          __publicField(this, "type", "TestExpression");
          this.operand = W, this.negate = ve, this.test = de;
        }
      }, Me = class extends A {
        constructor(W, ve) {
          super();
          __publicField(this, "type", "UnaryExpression");
          this.operator = W, this.argument = ve;
        }
      }, pe = class extends A {
        constructor(W = void 0, ve = void 0, de = void 0) {
          super();
          __publicField(this, "type", "SliceExpression");
          this.start = W, this.stop = ve, this.step = de;
        }
      }, oe = class extends A {
        constructor(W, ve) {
          super();
          __publicField(this, "type", "KeywordArgumentExpression");
          this.key = W, this.value = ve;
        }
      }, be = class extends A {
        constructor(W) {
          super();
          __publicField(this, "type", "SpreadExpression");
          this.argument = W;
        }
      }, Ee = class extends r {
        constructor(W, ve, de) {
          super();
          __publicField(this, "type", "CallStatement");
          this.call = W, this.callerArgs = ve, this.body = de;
        }
      }, Oe = class extends A {
        constructor(W, ve, de) {
          super();
          __publicField(this, "type", "Ternary");
          this.condition = W, this.trueExpr = ve, this.falseExpr = de;
        }
      };
      function Ye(W) {
        const ve = new n([]);
        let de = 0;
        function ye(bt, yt) {
          const Vt = W[de++];
          if (!Vt || Vt.type !== bt)
            throw new Error(`Parser Error: ${yt}. ${Vt.type} !== ${bt}.`);
          return Vt;
        }
        function ke(bt) {
          if (!Bt(bt))
            throw new SyntaxError(`Expected ${bt}`);
          ++de;
        }
        function Ue() {
          switch (W[de].type) {
            case s.Comment:
              return new $(W[de++].value);
            case s.Text:
              return Et();
            case s.OpenStatement:
              return jt();
            case s.OpenExpression:
              return ie();
            default:
              throw new SyntaxError(`Unexpected token type: ${W[de].type}`);
          }
        }
        function He(...bt) {
          return de + bt.length <= W.length && bt.every((yt, Vt) => yt === W[de + Vt].type);
        }
        function Ft(...bt) {
          return W[de]?.type === s.OpenStatement && W[de + 1]?.type === s.Identifier && bt.includes(W[de + 1]?.value);
        }
        function Bt(...bt) {
          return de + bt.length <= W.length && bt.every((yt, Vt) => W[de + Vt].type === "Identifier" && yt === W[de + Vt].value);
        }
        function Et() {
          return new Z(ye(s.Text, "Expected text token").value);
        }
        function jt() {
          if (ye(s.OpenStatement, "Expected opening statement token"), W[de].type !== s.Identifier)
            throw new SyntaxError(`Unknown statement, got ${W[de].type}`);
          const bt = W[de].value;
          let yt;
          switch (bt) {
            case "set":
              ++de, yt = xe();
              break;
            case "if":
              ++de, yt = Ie(), ye(s.OpenStatement, "Expected {% token"), ke("endif"), ye(s.CloseStatement, "Expected %} token");
              break;
            case "macro":
              ++de, yt = Re(), ye(s.OpenStatement, "Expected {% token"), ke("endmacro"), ye(s.CloseStatement, "Expected %} token");
              break;
            case "for":
              ++de, yt = Qe(), ye(s.OpenStatement, "Expected {% token"), ke("endfor"), ye(s.CloseStatement, "Expected %} token");
              break;
            case "call": {
              ++de;
              let Vt = null;
              He(s.OpenParen) && (Vt = Tn());
              const On = Kn();
              if (On.type !== "Identifier")
                throw new SyntaxError("Expected identifier following call statement");
              const mn = Tn();
              ye(s.CloseStatement, "Expected closing statement token");
              const Gn = [];
              for (; !Ft("endcall"); )
                Gn.push(Ue());
              ye(s.OpenStatement, "Expected '{%'"), ke("endcall"), ye(s.CloseStatement, "Expected closing statement token");
              const or = new F(On, mn);
              yt = new Ee(or, Vt, Gn);
              break;
            }
            case "break":
              ++de, ye(s.CloseStatement, "Expected closing statement token"), yt = new M();
              break;
            case "continue":
              ++de, ye(s.CloseStatement, "Expected closing statement token"), yt = new P();
              break;
            case "filter": {
              ++de;
              let Vt = Kn();
              Vt instanceof D && He(s.OpenParen) && (Vt = cn(Vt)), ye(s.CloseStatement, "Expected closing statement token");
              const On = [];
              for (; !Ft("endfilter"); )
                On.push(Ue());
              ye(s.OpenStatement, "Expected '{%'"), ke("endfilter"), ye(s.CloseStatement, "Expected '%}'"), yt = new Q(Vt, On);
              break;
            }
            default:
              throw new SyntaxError(`Unknown statement type: ${bt}`);
          }
          return yt;
        }
        function ie() {
          ye(s.OpenExpression, "Expected opening expression token");
          const bt = _t();
          return ye(s.CloseExpression, "Expected closing expression token"), bt;
        }
        function xe() {
          const bt = Ve();
          let yt = null;
          const Vt = [];
          if (He(s.Equals))
            ++de, yt = Ve();
          else {
            for (ye(s.CloseStatement, "Expected %} token"); !Ft("endset"); )
              Vt.push(Ue());
            ye(s.OpenStatement, "Expected {% token"), ke("endset");
          }
          return ye(s.CloseStatement, "Expected closing statement token"), new E(bt, yt, Vt);
        }
        function Ie() {
          const bt = _t();
          ye(s.CloseStatement, "Expected closing statement token");
          const yt = [], Vt = [];
          for (; !Ft("elif", "else", "endif"); )
            yt.push(Ue());
          if (Ft("elif")) {
            ++de, ++de;
            const On = Ie();
            Vt.push(On);
          } else if (Ft("else"))
            for (++de, ++de, ye(s.CloseStatement, "Expected closing statement token"); !Ft("endif"); )
              Vt.push(Ue());
          return new u(bt, yt, Vt);
        }
        function Re() {
          const bt = Kn();
          if (bt.type !== "Identifier")
            throw new SyntaxError("Expected identifier following macro statement");
          const yt = Tn();
          ye(s.CloseStatement, "Expected closing statement token");
          const Vt = [];
          for (; !Ft("endmacro"); )
            Vt.push(Ue());
          return new k(bt, yt, Vt);
        }
        function Ve(bt = false) {
          const yt = bt ? Kn : _t, Vt = [
            yt()
          ], On = He(s.Comma);
          for (; On && (++de, Vt.push(yt()), !!He(s.Comma)); )
            ;
          return On ? new J(Vt) : Vt[0];
        }
        function Qe() {
          const bt = Ve(true);
          if (!(bt instanceof D || bt instanceof J))
            throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${bt.type} instead`);
          if (!Bt("in"))
            throw new SyntaxError("Expected `in` keyword following loop variable");
          ++de;
          const yt = _t();
          ye(s.CloseStatement, "Expected closing statement token");
          const Vt = [];
          for (; !Ft("endfor", "else"); )
            Vt.push(Ue());
          const On = [];
          if (Ft("else"))
            for (++de, ++de, ye(s.CloseStatement, "Expected closing statement token"); !Ft("endfor"); )
              On.push(Ue());
          return new p(bt, yt, Vt, On);
        }
        function _t() {
          return Gt();
        }
        function Gt() {
          const bt = Lt();
          if (Bt("if")) {
            ++de;
            const yt = Lt();
            if (Bt("else")) {
              ++de;
              const Vt = Gt();
              return new Oe(yt, bt, Vt);
            } else
              return new he(bt, yt);
          }
          return bt;
        }
        function Lt() {
          let bt = dn();
          for (; Bt("or"); ) {
            const yt = W[de];
            ++de;
            const Vt = dn();
            bt = new H(yt, bt, Vt);
          }
          return bt;
        }
        function dn() {
          let bt = bn();
          for (; Bt("and"); ) {
            const yt = W[de];
            ++de;
            const Vt = bn();
            bt = new H(yt, bt, Vt);
          }
          return bt;
        }
        function bn() {
          let bt;
          for (; Bt("not"); ) {
            const yt = W[de];
            ++de;
            const Vt = bn();
            bt = new Me(yt, Vt);
          }
          return bt ?? Pn();
        }
        function Pn() {
          let bt = Sn();
          for (; ; ) {
            let yt;
            if (Bt("not", "in"))
              yt = new l("not in", s.Identifier), de += 2;
            else if (Bt("in"))
              yt = W[de++];
            else if (He(s.ComparisonBinaryOperator))
              yt = W[de++];
            else
              break;
            const Vt = Sn();
            bt = new H(yt, bt, Vt);
          }
          return bt;
        }
        function Sn() {
          let bt = tr();
          for (; He(s.AdditiveBinaryOperator); ) {
            const yt = W[de];
            ++de;
            const Vt = tr();
            bt = new H(yt, bt, Vt);
          }
          return bt;
        }
        function et() {
          const bt = Kt(Kn());
          return He(s.OpenParen) ? cn(bt) : bt;
        }
        function cn(bt) {
          let yt = new F(bt, Tn());
          return yt = Kt(yt), He(s.OpenParen) && (yt = cn(yt)), yt;
        }
        function Tn() {
          ye(s.OpenParen, "Expected opening parenthesis for arguments list");
          const bt = Ln();
          return ye(s.CloseParen, "Expected closing parenthesis for arguments list"), bt;
        }
        function Ln() {
          const bt = [];
          for (; !He(s.CloseParen); ) {
            let yt;
            if (W[de].type === s.MultiplicativeBinaryOperator && W[de].value === "*") {
              ++de;
              const Vt = _t();
              yt = new be(Vt);
            } else if (yt = _t(), He(s.Equals)) {
              if (++de, !(yt instanceof D))
                throw new SyntaxError("Expected identifier for keyword argument");
              const Vt = _t();
              yt = new oe(yt, Vt);
            }
            bt.push(yt), He(s.Comma) && ++de;
          }
          return bt;
        }
        function Xn() {
          const bt = [];
          let yt = false;
          for (; !He(s.CloseSquareBracket); )
            He(s.Colon) ? (bt.push(void 0), ++de, yt = true) : (bt.push(_t()), He(s.Colon) && (++de, yt = true));
          if (bt.length === 0)
            throw new SyntaxError("Expected at least one argument for member/slice expression");
          if (yt) {
            if (bt.length > 3)
              throw new SyntaxError("Expected 0-3 arguments for slice expression");
            return new pe(...bt);
          }
          return bt[0];
        }
        function Kt(bt) {
          for (; He(s.Dot) || He(s.OpenSquareBracket); ) {
            const yt = W[de];
            ++de;
            let Vt;
            const On = yt.type === s.OpenSquareBracket;
            if (On)
              Vt = Xn(), ye(s.CloseSquareBracket, "Expected closing square bracket");
            else if (Vt = Kn(), Vt.type !== "Identifier")
              throw new SyntaxError("Expected identifier following dot operator");
            bt = new C(bt, Vt, On);
          }
          return bt;
        }
        function tr() {
          let bt = fr();
          for (; He(s.MultiplicativeBinaryOperator); ) {
            const yt = W[de++], Vt = fr();
            bt = new H(yt, bt, Vt);
          }
          return bt;
        }
        function fr() {
          let bt = Nn();
          for (; Bt("is"); ) {
            ++de;
            const yt = Bt("not");
            yt && ++de;
            const Vt = Kn();
            if (!(Vt instanceof D))
              throw new SyntaxError("Expected identifier for the test");
            bt = new fe(bt, yt, Vt);
          }
          return bt;
        }
        function Nn() {
          let bt = et();
          for (; He(s.Pipe); ) {
            ++de;
            let yt = Kn();
            if (!(yt instanceof D))
              throw new SyntaxError("Expected identifier for the filter");
            He(s.OpenParen) && (yt = cn(yt)), bt = new U(bt, yt);
          }
          return bt;
        }
        function Kn() {
          const bt = W[de++];
          switch (bt.type) {
            case s.NumericLiteral: {
              const yt = bt.value;
              return yt.includes(".") ? new j(Number(yt)) : new R(Number(yt));
            }
            case s.StringLiteral: {
              let yt = bt.value;
              for (; He(s.StringLiteral); )
                yt += W[de++].value;
              return new Z(yt);
            }
            case s.Identifier:
              return new D(bt.value);
            case s.OpenParen: {
              const yt = Ve();
              return ye(s.CloseParen, "Expected closing parenthesis, got ${tokens[current].type} instead."), yt;
            }
            case s.OpenSquareBracket: {
              const yt = [];
              for (; !He(s.CloseSquareBracket); )
                yt.push(_t()), He(s.Comma) && ++de;
              return ++de, new te(yt);
            }
            case s.OpenCurlyBracket: {
              const yt = /* @__PURE__ */ new Map();
              for (; !He(s.CloseCurlyBracket); ) {
                const Vt = _t();
                ye(s.Colon, "Expected colon between key and value in object literal");
                const On = _t();
                yt.set(Vt, On), He(s.Comma) && ++de;
              }
              return ++de, new G(yt);
            }
            default:
              throw new SyntaxError(`Unexpected token: ${bt.type}`);
          }
        }
        for (; de < W.length; )
          ve.body.push(Ue());
        return ve;
      }
      function We(W, ve, de = 1) {
        ve === void 0 && (ve = W, W = 0);
        const ye = [];
        for (let ke = W; ke < ve; ke += de)
          ye.push(ke);
        return ye;
      }
      function ot(W, ve, de, ye = 1) {
        const ke = Math.sign(ye);
        ke >= 0 ? (ve = (ve ?? (ve = 0)) < 0 ? Math.max(W.length + ve, 0) : Math.min(ve, W.length), de = (de ?? (de = W.length)) < 0 ? Math.max(W.length + de, 0) : Math.min(de, W.length)) : (ve = (ve ?? (ve = W.length - 1)) < 0 ? Math.max(W.length + ve, -1) : Math.min(ve, W.length - 1), de = (de ?? (de = -1)) < -1 ? Math.max(W.length + de, -1) : Math.min(de, W.length - 1));
        const Ue = [];
        for (let He = ve; ke * He < ke * de; He += ye)
          Ue.push(W[He]);
        return Ue;
      }
      function vt(W) {
        return W.replace(/\b\w/g, (ve) => ve.toUpperCase());
      }
      function qe(W) {
        return _e(/* @__PURE__ */ new Date(), W);
      }
      function _e(W, ve) {
        const de = new Intl.DateTimeFormat(void 0, {
          month: "long"
        }), ye = new Intl.DateTimeFormat(void 0, {
          month: "short"
        }), ke = (Ue) => Ue < 10 ? "0" + Ue : Ue.toString();
        return ve.replace(/%[YmdbBHM%]/g, (Ue) => {
          switch (Ue) {
            case "%Y":
              return W.getFullYear().toString();
            case "%m":
              return ke(W.getMonth() + 1);
            case "%d":
              return ke(W.getDate());
            case "%b":
              return ye.format(W);
            case "%B":
              return de.format(W);
            case "%H":
              return ke(W.getHours());
            case "%M":
              return ke(W.getMinutes());
            case "%%":
              return "%";
            default:
              return Ue;
          }
        });
      }
      function le(W) {
        return W.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function De(W, ve, de, ye) {
        if (ye === 0)
          return W;
        let ke = ye == null || ye < 0 ? 1 / 0 : ye;
        const Ue = ve.length === 0 ? new RegExp("(?=)", "gu") : new RegExp(le(ve), "gu");
        return W.replaceAll(Ue, (He) => ke > 0 ? (--ke, de) : He);
      }
      var Be = class extends Error {
      }, Ze = class extends Error {
      }, rt = class {
        constructor(W = void 0) {
          __publicField(this, "type", "RuntimeValue");
          __publicField(this, "value");
          __publicField(this, "builtins", /* @__PURE__ */ new Map());
          this.value = W;
        }
        __bool__() {
          return new lt(!!this.value);
        }
        toString() {
          return String(this.value);
        }
      }, je = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "IntegerValue");
        }
      }, it = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "FloatValue");
        }
        toString() {
          return this.value % 1 === 0 ? this.value.toFixed(1) : this.value.toString();
        }
      }, Ge = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "StringValue");
          __publicField(this, "builtins", /* @__PURE__ */ new Map([
            [
              "upper",
              new pt(() => new Ge(this.value.toUpperCase()))
            ],
            [
              "lower",
              new pt(() => new Ge(this.value.toLowerCase()))
            ],
            [
              "strip",
              new pt(() => new Ge(this.value.trim()))
            ],
            [
              "title",
              new pt(() => new Ge(vt(this.value)))
            ],
            [
              "capitalize",
              new pt(() => new Ge(this.value.charAt(0).toUpperCase() + this.value.slice(1)))
            ],
            [
              "length",
              new je(this.value.length)
            ],
            [
              "rstrip",
              new pt(() => new Ge(this.value.trimEnd()))
            ],
            [
              "lstrip",
              new pt(() => new Ge(this.value.trimStart()))
            ],
            [
              "startswith",
              new pt((W) => {
                if (W.length === 0)
                  throw new Error("startswith() requires at least one argument");
                const ve = W[0];
                if (ve instanceof Ge)
                  return new lt(this.value.startsWith(ve.value));
                if (ve instanceof Je) {
                  for (const de of ve.value) {
                    if (!(de instanceof Ge))
                      throw new Error("startswith() tuple elements must be strings");
                    if (this.value.startsWith(de.value))
                      return new lt(true);
                  }
                  return new lt(false);
                }
                throw new Error("startswith() argument must be a string or tuple of strings");
              })
            ],
            [
              "endswith",
              new pt((W) => {
                if (W.length === 0)
                  throw new Error("endswith() requires at least one argument");
                const ve = W[0];
                if (ve instanceof Ge)
                  return new lt(this.value.endsWith(ve.value));
                if (ve instanceof Je) {
                  for (const de of ve.value) {
                    if (!(de instanceof Ge))
                      throw new Error("endswith() tuple elements must be strings");
                    if (this.value.endsWith(de.value))
                      return new lt(true);
                  }
                  return new lt(false);
                }
                throw new Error("endswith() argument must be a string or tuple of strings");
              })
            ],
            [
              "split",
              new pt((W) => {
                const ve = W[0] ?? new At();
                if (!(ve instanceof Ge || ve instanceof At))
                  throw new Error("sep argument must be a string or null");
                const de = W[1] ?? new je(-1);
                if (!(de instanceof je))
                  throw new Error("maxsplit argument must be a number");
                let ye = [];
                if (ve instanceof At) {
                  const ke = this.value.trimStart();
                  for (const { 0: Ue, index: He } of ke.matchAll(/\S+/g)) {
                    if (de.value !== -1 && ye.length >= de.value && He !== void 0) {
                      ye.push(Ue + ke.slice(He + Ue.length));
                      break;
                    }
                    ye.push(Ue);
                  }
                } else {
                  if (ve.value === "")
                    throw new Error("empty separator");
                  ye = this.value.split(ve.value), de.value !== -1 && ye.length > de.value && ye.push(ye.splice(de.value).join(ve.value));
                }
                return new Je(ye.map((ke) => new Ge(ke)));
              })
            ],
            [
              "replace",
              new pt((W) => {
                if (W.length < 2)
                  throw new Error("replace() requires at least two arguments");
                const ve = W[0], de = W[1];
                if (!(ve instanceof Ge && de instanceof Ge))
                  throw new Error("replace() arguments must be strings");
                let ye;
                if (W.length > 2 ? W[2].type === "KeywordArgumentsValue" ? ye = W[2].value.get("count") ?? new At() : ye = W[2] : ye = new At(), !(ye instanceof je || ye instanceof At))
                  throw new Error("replace() count argument must be a number or null");
                return new Ge(De(this.value, ve.value, de.value, ye.value));
              })
            ]
          ]));
        }
      }, lt = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "BooleanValue");
        }
      }, ht = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "ObjectValue");
          __publicField(this, "builtins", /* @__PURE__ */ new Map([
            [
              "get",
              new pt(([W, ve]) => {
                if (!(W instanceof Ge))
                  throw new Error(`Object key must be a string: got ${W.type}`);
                return this.value.get(W.value) ?? ve ?? new At();
              })
            ],
            [
              "items",
              new pt(() => this.items())
            ],
            [
              "keys",
              new pt(() => this.keys())
            ],
            [
              "values",
              new pt(() => this.values())
            ]
          ]));
        }
        __bool__() {
          return new lt(this.value.size > 0);
        }
        items() {
          return new Je(Array.from(this.value.entries()).map(([W, ve]) => new Je([
            new Ge(W),
            ve
          ])));
        }
        keys() {
          return new Je(Array.from(this.value.keys()).map((W) => new Ge(W)));
        }
        values() {
          return new Je(Array.from(this.value.values()));
        }
      }, mt = class extends ht {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "KeywordArgumentsValue");
        }
      }, Je = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "ArrayValue");
          __publicField(this, "builtins", /* @__PURE__ */ new Map([
            [
              "length",
              new je(this.value.length)
            ]
          ]));
        }
        __bool__() {
          return new lt(this.value.length > 0);
        }
      }, Rt = class extends Je {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "TupleValue");
        }
      }, pt = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "FunctionValue");
        }
      }, At = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "NullValue");
        }
      }, Ot = class extends rt {
        constructor() {
          super(...arguments);
          __publicField(this, "type", "UndefinedValue");
        }
      }, Ct = class {
        constructor(W) {
          __publicField(this, "variables", /* @__PURE__ */ new Map([
            [
              "namespace",
              new pt((W) => {
                if (W.length === 0)
                  return new ht(/* @__PURE__ */ new Map());
                if (W.length !== 1 || !(W[0] instanceof ht))
                  throw new Error("`namespace` expects either zero arguments or a single object argument");
                return W[0];
              })
            ]
          ]));
          __publicField(this, "tests", /* @__PURE__ */ new Map([
            [
              "boolean",
              (W) => W.type === "BooleanValue"
            ],
            [
              "callable",
              (W) => W instanceof pt
            ],
            [
              "odd",
              (W) => {
                if (!(W instanceof je))
                  throw new Error(`cannot odd on ${W.type}`);
                return W.value % 2 !== 0;
              }
            ],
            [
              "even",
              (W) => {
                if (!(W instanceof je))
                  throw new Error(`cannot even on ${W.type}`);
                return W.value % 2 === 0;
              }
            ],
            [
              "false",
              (W) => W.type === "BooleanValue" && !W.value
            ],
            [
              "true",
              (W) => W.type === "BooleanValue" && W.value
            ],
            [
              "none",
              (W) => W.type === "NullValue"
            ],
            [
              "string",
              (W) => W.type === "StringValue"
            ],
            [
              "number",
              (W) => W instanceof je || W instanceof it
            ],
            [
              "integer",
              (W) => W instanceof je
            ],
            [
              "iterable",
              (W) => W.type === "ArrayValue" || W.type === "StringValue"
            ],
            [
              "mapping",
              (W) => W.type === "ObjectValue"
            ],
            [
              "lower",
              (W) => {
                const ve = W.value;
                return W.type === "StringValue" && ve === ve.toLowerCase();
              }
            ],
            [
              "upper",
              (W) => {
                const ve = W.value;
                return W.type === "StringValue" && ve === ve.toUpperCase();
              }
            ],
            [
              "none",
              (W) => W.type === "NullValue"
            ],
            [
              "defined",
              (W) => W.type !== "UndefinedValue"
            ],
            [
              "undefined",
              (W) => W.type === "UndefinedValue"
            ],
            [
              "equalto",
              (W, ve) => W.value === ve.value
            ],
            [
              "eq",
              (W, ve) => W.value === ve.value
            ]
          ]));
          this.parent = W;
        }
        set(W, ve) {
          return this.declareVariable(W, _n(ve));
        }
        declareVariable(W, ve) {
          if (this.variables.has(W))
            throw new SyntaxError(`Variable already declared: ${W}`);
          return this.variables.set(W, ve), ve;
        }
        setVariable(W, ve) {
          return this.variables.set(W, ve), ve;
        }
        resolve(W) {
          if (this.variables.has(W))
            return this;
          if (this.parent)
            return this.parent.resolve(W);
          throw new Error(`Unknown variable: ${W}`);
        }
        lookupVariable(W) {
          try {
            return this.resolve(W).variables.get(W) ?? new Ot();
          } catch {
            return new Ot();
          }
        }
      };
      function St(W) {
        W.set("false", false), W.set("true", true), W.set("none", null), W.set("raise_exception", (ve) => {
          throw new Error(ve);
        }), W.set("range", We), W.set("strftime_now", qe), W.set("True", true), W.set("False", false), W.set("None", null);
      }
      var zt = class {
        constructor(W) {
          __publicField(this, "global");
          this.global = W ?? new Ct();
        }
        run(W) {
          return this.evaluate(W, this.global);
        }
        evaluateBinaryExpression(W, ve) {
          const de = this.evaluate(W.left, ve);
          switch (W.operator.value) {
            case "and":
              return de.__bool__().value ? this.evaluate(W.right, ve) : de;
            case "or":
              return de.__bool__().value ? de : this.evaluate(W.right, ve);
          }
          const ye = this.evaluate(W.right, ve);
          switch (W.operator.value) {
            case "==":
              return new lt(de.value == ye.value);
            case "!=":
              return new lt(de.value != ye.value);
          }
          if (de instanceof Ot || ye instanceof Ot) {
            if (ye instanceof Ot && [
              "in",
              "not in"
            ].includes(W.operator.value))
              return new lt(W.operator.value === "not in");
            throw new Error(`Cannot perform operation ${W.operator.value} on undefined values`);
          } else {
            if (de instanceof At || ye instanceof At)
              throw new Error("Cannot perform operation on null values");
            if (W.operator.value === "~")
              return new Ge(de.value.toString() + ye.value.toString());
            if ((de instanceof je || de instanceof it) && (ye instanceof je || ye instanceof it)) {
              const ke = de.value, Ue = ye.value;
              switch (W.operator.value) {
                case "+":
                case "-":
                case "*": {
                  const He = W.operator.value === "+" ? ke + Ue : W.operator.value === "-" ? ke - Ue : ke * Ue;
                  return de instanceof it || ye instanceof it ? new it(He) : new je(He);
                }
                case "/":
                  return new it(ke / Ue);
                case "%": {
                  const He = ke % Ue;
                  return de instanceof it || ye instanceof it ? new it(He) : new je(He);
                }
                case "<":
                  return new lt(ke < Ue);
                case ">":
                  return new lt(ke > Ue);
                case ">=":
                  return new lt(ke >= Ue);
                case "<=":
                  return new lt(ke <= Ue);
              }
            } else if (de instanceof Je && ye instanceof Je)
              switch (W.operator.value) {
                case "+":
                  return new Je(de.value.concat(ye.value));
              }
            else if (ye instanceof Je) {
              const ke = ye.value.find((Ue) => Ue.value === de.value) !== void 0;
              switch (W.operator.value) {
                case "in":
                  return new lt(ke);
                case "not in":
                  return new lt(!ke);
              }
            }
          }
          if (de instanceof Ge || ye instanceof Ge)
            switch (W.operator.value) {
              case "+":
                return new Ge(de.value.toString() + ye.value.toString());
            }
          if (de instanceof Ge && ye instanceof Ge)
            switch (W.operator.value) {
              case "in":
                return new lt(ye.value.includes(de.value));
              case "not in":
                return new lt(!ye.value.includes(de.value));
            }
          if (de instanceof Ge && ye instanceof ht)
            switch (W.operator.value) {
              case "in":
                return new lt(ye.value.has(de.value));
              case "not in":
                return new lt(!ye.value.has(de.value));
            }
          throw new SyntaxError(`Unknown operator "${W.operator.value}" between ${de.type} and ${ye.type}`);
        }
        evaluateArguments(W, ve) {
          const de = [], ye = /* @__PURE__ */ new Map();
          for (const ke of W)
            if (ke.type === "SpreadExpression") {
              const Ue = ke, He = this.evaluate(Ue.argument, ve);
              if (!(He instanceof Je))
                throw new Error(`Cannot unpack non-iterable type: ${He.type}`);
              for (const Ft of He.value)
                de.push(Ft);
            } else if (ke.type === "KeywordArgumentExpression") {
              const Ue = ke;
              ye.set(Ue.key.value, this.evaluate(Ue.value, ve));
            } else {
              if (ye.size > 0)
                throw new Error("Positional arguments must come before keyword arguments");
              de.push(this.evaluate(ke, ve));
            }
          return [
            de,
            ye
          ];
        }
        applyFilter(W, ve, de) {
          if (ve.type === "Identifier") {
            const ye = ve;
            if (ye.value === "tojson")
              return new Ge(Zt(W));
            if (W instanceof Je)
              switch (ye.value) {
                case "list":
                  return W;
                case "first":
                  return W.value[0];
                case "last":
                  return W.value[W.value.length - 1];
                case "length":
                  return new je(W.value.length);
                case "reverse":
                  return new Je(W.value.reverse());
                case "sort":
                  return new Je(W.value.sort((ke, Ue) => {
                    if (ke.type !== Ue.type)
                      throw new Error(`Cannot compare different types: ${ke.type} and ${Ue.type}`);
                    switch (ke.type) {
                      case "IntegerValue":
                      case "FloatValue":
                        return ke.value - Ue.value;
                      case "StringValue":
                        return ke.value.localeCompare(Ue.value);
                      default:
                        throw new Error(`Cannot compare type: ${ke.type}`);
                    }
                  }));
                case "join":
                  return new Ge(W.value.map((ke) => ke.value).join(""));
                case "string":
                  return new Ge(Zt(W));
                case "unique": {
                  const ke = /* @__PURE__ */ new Set(), Ue = [];
                  for (const He of W.value)
                    ke.has(He.value) || (ke.add(He.value), Ue.push(He));
                  return new Je(Ue);
                }
                default:
                  throw new Error(`Unknown ArrayValue filter: ${ye.value}`);
              }
            else if (W instanceof Ge)
              switch (ye.value) {
                case "length":
                case "upper":
                case "lower":
                case "title":
                case "capitalize": {
                  const ke = W.builtins.get(ye.value);
                  if (ke instanceof pt)
                    return ke.value([], de);
                  if (ke instanceof je)
                    return ke;
                  throw new Error(`Unknown StringValue filter: ${ye.value}`);
                }
                case "trim":
                  return new Ge(W.value.trim());
                case "indent":
                  return new Ge(W.value.split(`
`).map((ke, Ue) => Ue === 0 || ke.length === 0 ? ke : "    " + ke).join(`
`));
                case "join":
                case "string":
                  return W;
                case "int": {
                  const ke = parseInt(W.value, 10);
                  return new je(isNaN(ke) ? 0 : ke);
                }
                case "float": {
                  const ke = parseFloat(W.value);
                  return new it(isNaN(ke) ? 0 : ke);
                }
                default:
                  throw new Error(`Unknown StringValue filter: ${ye.value}`);
              }
            else if (W instanceof je || W instanceof it)
              switch (ye.value) {
                case "abs":
                  return W instanceof je ? new je(Math.abs(W.value)) : new it(Math.abs(W.value));
                case "int":
                  return new je(Math.floor(W.value));
                case "float":
                  return new it(W.value);
                default:
                  throw new Error(`Unknown NumericValue filter: ${ye.value}`);
              }
            else if (W instanceof ht)
              switch (ye.value) {
                case "items":
                  return new Je(Array.from(W.value.entries()).map(([ke, Ue]) => new Je([
                    new Ge(ke),
                    Ue
                  ])));
                case "length":
                  return new je(W.value.size);
                default:
                  throw new Error(`Unknown ObjectValue filter: ${ye.value}`);
              }
            else if (W instanceof lt)
              switch (ye.value) {
                case "bool":
                  return new lt(W.value);
                case "int":
                  return new je(W.value ? 1 : 0);
                case "float":
                  return new it(W.value ? 1 : 0);
                case "string":
                  return new Ge(W.value ? "true" : "false");
                default:
                  throw new Error(`Unknown BooleanValue filter: ${ye.value}`);
              }
            throw new Error(`Cannot apply filter "${ye.value}" to type: ${W.type}`);
          } else if (ve.type === "CallExpression") {
            const ye = ve;
            if (ye.callee.type !== "Identifier")
              throw new Error(`Unknown filter: ${ye.callee.type}`);
            const ke = ye.callee.value;
            if (ke === "tojson") {
              const [, Ue] = this.evaluateArguments(ye.args, de), He = Ue.get("indent") ?? new At();
              if (!(He instanceof je || He instanceof At))
                throw new Error("If set, indent must be a number");
              return new Ge(Zt(W, He.value));
            } else if (ke === "join") {
              let Ue;
              if (W instanceof Ge)
                Ue = Array.from(W.value);
              else if (W instanceof Je)
                Ue = W.value.map((Et) => Et.value);
              else
                throw new Error(`Cannot apply filter "${ke}" to type: ${W.type}`);
              const [He, Ft] = this.evaluateArguments(ye.args, de), Bt = He.at(0) ?? Ft.get("separator") ?? new Ge("");
              if (!(Bt instanceof Ge))
                throw new Error("separator must be a string");
              return new Ge(Ue.join(Bt.value));
            } else if (ke === "int" || ke === "float") {
              const [Ue, He] = this.evaluateArguments(ye.args, de), Ft = Ue.at(0) ?? He.get("default") ?? (ke === "int" ? new je(0) : new it(0));
              if (W instanceof Ge) {
                const Bt = ke === "int" ? parseInt(W.value, 10) : parseFloat(W.value);
                return isNaN(Bt) ? Ft : ke === "int" ? new je(Bt) : new it(Bt);
              } else {
                if (W instanceof je || W instanceof it)
                  return W;
                if (W instanceof lt)
                  return ke === "int" ? new je(W.value ? 1 : 0) : new it(W.value ? 1 : 0);
                throw new Error(`Cannot apply filter "${ke}" to type: ${W.type}`);
              }
            } else if (ke === "default") {
              const [Ue, He] = this.evaluateArguments(ye.args, de), Ft = Ue[0] ?? new Ge(""), Bt = Ue[1] ?? He.get("boolean") ?? new lt(false);
              if (!(Bt instanceof lt))
                throw new Error("`default` filter flag must be a boolean");
              return W instanceof Ot || Bt.value && !W.__bool__().value ? Ft : W;
            }
            if (W instanceof Je) {
              switch (ke) {
                case "selectattr":
                case "rejectattr": {
                  const Ue = ke === "selectattr";
                  if (W.value.some((ie) => !(ie instanceof ht)))
                    throw new Error(`\`${ke}\` can only be applied to array of objects`);
                  if (ye.args.some((ie) => ie.type !== "StringLiteral"))
                    throw new Error(`arguments of \`${ke}\` must be strings`);
                  const [He, Ft, Bt] = ye.args.map((ie) => this.evaluate(ie, de));
                  let Et;
                  if (Ft) {
                    const ie = de.tests.get(Ft.value);
                    if (!ie)
                      throw new Error(`Unknown test: ${Ft.value}`);
                    Et = ie;
                  } else
                    Et = (...ie) => ie[0].__bool__().value;
                  const jt = W.value.filter((ie) => {
                    const xe = ie.value.get(He.value), Ie = xe ? Et(xe, Bt) : false;
                    return Ue ? Ie : !Ie;
                  });
                  return new Je(jt);
                }
                case "map": {
                  const [, Ue] = this.evaluateArguments(ye.args, de);
                  if (Ue.has("attribute")) {
                    const He = Ue.get("attribute");
                    if (!(He instanceof Ge))
                      throw new Error("attribute must be a string");
                    const Ft = Ue.get("default"), Bt = W.value.map((Et) => {
                      if (!(Et instanceof ht))
                        throw new Error("items in map must be an object");
                      return Et.value.get(He.value) ?? Ft ?? new Ot();
                    });
                    return new Je(Bt);
                  } else
                    throw new Error("`map` expressions without `attribute` set are not currently supported.");
                }
              }
              throw new Error(`Unknown ArrayValue filter: ${ke}`);
            } else if (W instanceof Ge) {
              switch (ke) {
                case "indent": {
                  const [Ue, He] = this.evaluateArguments(ye.args, de), Ft = Ue.at(0) ?? He.get("width") ?? new je(4);
                  if (!(Ft instanceof je))
                    throw new Error("width must be a number");
                  const Bt = Ue.at(1) ?? He.get("first") ?? new lt(false), Et = Ue.at(2) ?? He.get("blank") ?? new lt(false), jt = W.value.split(`
`), ie = " ".repeat(Ft.value), xe = jt.map((Ie, Re) => !Bt.value && Re === 0 || !Et.value && Ie.length === 0 ? Ie : ie + Ie);
                  return new Ge(xe.join(`
`));
                }
                case "replace": {
                  const Ue = W.builtins.get("replace");
                  if (!(Ue instanceof pt))
                    throw new Error("replace filter not available");
                  const [He, Ft] = this.evaluateArguments(ye.args, de);
                  return Ue.value([
                    ...He,
                    new mt(Ft)
                  ], de);
                }
              }
              throw new Error(`Unknown StringValue filter: ${ke}`);
            } else
              throw new Error(`Cannot apply filter "${ke}" to type: ${W.type}`);
          }
          throw new Error(`Unknown filter: ${ve.type}`);
        }
        evaluateFilterExpression(W, ve) {
          const de = this.evaluate(W.operand, ve);
          return this.applyFilter(de, W.filter, ve);
        }
        evaluateTestExpression(W, ve) {
          const de = this.evaluate(W.operand, ve), ye = ve.tests.get(W.test.value);
          if (!ye)
            throw new Error(`Unknown test: ${W.test.value}`);
          const ke = ye(de);
          return new lt(W.negate ? !ke : ke);
        }
        evaluateSelectExpression(W, ve) {
          return this.evaluate(W.test, ve).__bool__().value ? this.evaluate(W.lhs, ve) : new Ot();
        }
        evaluateUnaryExpression(W, ve) {
          const de = this.evaluate(W.argument, ve);
          switch (W.operator.value) {
            case "not":
              return new lt(!de.value);
            default:
              throw new SyntaxError(`Unknown operator: ${W.operator.value}`);
          }
        }
        evaluateTernaryExpression(W, ve) {
          return this.evaluate(W.condition, ve).__bool__().value ? this.evaluate(W.trueExpr, ve) : this.evaluate(W.falseExpr, ve);
        }
        evalProgram(W, ve) {
          return this.evaluateBlock(W.body, ve);
        }
        evaluateBlock(W, ve) {
          let de = "";
          for (const ye of W) {
            const ke = this.evaluate(ye, ve);
            ke.type !== "NullValue" && ke.type !== "UndefinedValue" && (de += ke.toString());
          }
          return new Ge(de);
        }
        evaluateIdentifier(W, ve) {
          return ve.lookupVariable(W.value);
        }
        evaluateCallExpression(W, ve) {
          const [de, ye] = this.evaluateArguments(W.args, ve);
          ye.size > 0 && de.push(new mt(ye));
          const ke = this.evaluate(W.callee, ve);
          if (ke.type !== "FunctionValue")
            throw new Error(`Cannot call something that is not a function: got ${ke.type}`);
          return ke.value(de, ve);
        }
        evaluateSliceExpression(W, ve, de) {
          if (!(W instanceof Je || W instanceof Ge))
            throw new Error("Slice object must be an array or string");
          const ye = this.evaluate(ve.start, de), ke = this.evaluate(ve.stop, de), Ue = this.evaluate(ve.step, de);
          if (!(ye instanceof je || ye instanceof Ot))
            throw new Error("Slice start must be numeric or undefined");
          if (!(ke instanceof je || ke instanceof Ot))
            throw new Error("Slice stop must be numeric or undefined");
          if (!(Ue instanceof je || Ue instanceof Ot))
            throw new Error("Slice step must be numeric or undefined");
          return W instanceof Je ? new Je(ot(W.value, ye.value, ke.value, Ue.value)) : new Ge(ot(Array.from(W.value), ye.value, ke.value, Ue.value).join(""));
        }
        evaluateMemberExpression(W, ve) {
          const de = this.evaluate(W.object, ve);
          let ye;
          if (W.computed) {
            if (W.property.type === "SliceExpression")
              return this.evaluateSliceExpression(de, W.property, ve);
            ye = this.evaluate(W.property, ve);
          } else
            ye = new Ge(W.property.value);
          let ke;
          if (de instanceof ht) {
            if (!(ye instanceof Ge))
              throw new Error(`Cannot access property with non-string: got ${ye.type}`);
            ke = de.value.get(ye.value) ?? de.builtins.get(ye.value);
          } else if (de instanceof Je || de instanceof Ge)
            if (ye instanceof je)
              ke = de.value.at(ye.value), de instanceof Ge && (ke = new Ge(de.value.at(ye.value)));
            else if (ye instanceof Ge)
              ke = de.builtins.get(ye.value);
            else
              throw new Error(`Cannot access property with non-string/non-number: got ${ye.type}`);
          else {
            if (!(ye instanceof Ge))
              throw new Error(`Cannot access property with non-string: got ${ye.type}`);
            ke = de.builtins.get(ye.value);
          }
          return ke instanceof rt ? ke : new Ot();
        }
        evaluateSet(W, ve) {
          const de = W.value ? this.evaluate(W.value, ve) : this.evaluateBlock(W.body, ve);
          if (W.assignee.type === "Identifier") {
            const ye = W.assignee.value;
            ve.setVariable(ye, de);
          } else if (W.assignee.type === "TupleLiteral") {
            const ye = W.assignee;
            if (!(de instanceof Je))
              throw new Error(`Cannot unpack non-iterable type in set: ${de.type}`);
            const ke = de.value;
            if (ke.length !== ye.value.length)
              throw new Error(`Too ${ye.value.length > ke.length ? "few" : "many"} items to unpack in set`);
            for (let Ue = 0; Ue < ye.value.length; ++Ue) {
              const He = ye.value[Ue];
              if (He.type !== "Identifier")
                throw new Error(`Cannot unpack to non-identifier in set: ${He.type}`);
              ve.setVariable(He.value, ke[Ue]);
            }
          } else if (W.assignee.type === "MemberExpression") {
            const ye = W.assignee, ke = this.evaluate(ye.object, ve);
            if (!(ke instanceof ht))
              throw new Error("Cannot assign to member of non-object");
            if (ye.property.type !== "Identifier")
              throw new Error("Cannot assign to member with non-identifier property");
            ke.value.set(ye.property.value, de);
          } else
            throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(W.assignee)}`);
          return new At();
        }
        evaluateIf(W, ve) {
          const de = this.evaluate(W.test, ve);
          return this.evaluateBlock(de.__bool__().value ? W.body : W.alternate, ve);
        }
        evaluateFor(W, ve) {
          const de = new Ct(ve);
          let ye, ke;
          if (W.iterable.type === "SelectExpression") {
            const Et = W.iterable;
            ke = this.evaluate(Et.lhs, de), ye = Et.test;
          } else
            ke = this.evaluate(W.iterable, de);
          if (!(ke instanceof Je || ke instanceof ht))
            throw new Error(`Expected iterable or object type in for loop: got ${ke.type}`);
          ke instanceof ht && (ke = ke.keys());
          const Ue = [], He = [];
          for (let Et = 0; Et < ke.value.length; ++Et) {
            const jt = new Ct(de), ie = ke.value[Et];
            let xe;
            if (W.loopvar.type === "Identifier")
              xe = (Ie) => Ie.setVariable(W.loopvar.value, ie);
            else if (W.loopvar.type === "TupleLiteral") {
              const Ie = W.loopvar;
              if (ie.type !== "ArrayValue")
                throw new Error(`Cannot unpack non-iterable type: ${ie.type}`);
              const Re = ie;
              if (Ie.value.length !== Re.value.length)
                throw new Error(`Too ${Ie.value.length > Re.value.length ? "few" : "many"} items to unpack`);
              xe = (Ve) => {
                for (let Qe = 0; Qe < Ie.value.length; ++Qe) {
                  if (Ie.value[Qe].type !== "Identifier")
                    throw new Error(`Cannot unpack non-identifier type: ${Ie.value[Qe].type}`);
                  Ve.setVariable(Ie.value[Qe].value, Re.value[Qe]);
                }
              };
            } else
              throw new Error(`Invalid loop variable(s): ${W.loopvar.type}`);
            ye && (xe(jt), !this.evaluate(ye, jt).__bool__().value) || (Ue.push(ie), He.push(xe));
          }
          let Ft = "", Bt = true;
          for (let Et = 0; Et < Ue.length; ++Et) {
            const jt = /* @__PURE__ */ new Map([
              [
                "index",
                new je(Et + 1)
              ],
              [
                "index0",
                new je(Et)
              ],
              [
                "revindex",
                new je(Ue.length - Et)
              ],
              [
                "revindex0",
                new je(Ue.length - Et - 1)
              ],
              [
                "first",
                new lt(Et === 0)
              ],
              [
                "last",
                new lt(Et === Ue.length - 1)
              ],
              [
                "length",
                new je(Ue.length)
              ],
              [
                "previtem",
                Et > 0 ? Ue[Et - 1] : new Ot()
              ],
              [
                "nextitem",
                Et < Ue.length - 1 ? Ue[Et + 1] : new Ot()
              ]
            ]);
            de.setVariable("loop", new ht(jt)), He[Et](de);
            try {
              const ie = this.evaluateBlock(W.body, de);
              Ft += ie.value;
            } catch (ie) {
              if (ie instanceof Ze)
                continue;
              if (ie instanceof Be)
                break;
              throw ie;
            }
            Bt = false;
          }
          if (Bt) {
            const Et = this.evaluateBlock(W.defaultBlock, de);
            Ft += Et.value;
          }
          return new Ge(Ft);
        }
        evaluateMacro(W, ve) {
          return ve.setVariable(W.name.value, new pt((de, ye) => {
            const ke = new Ct(ye);
            de = de.slice();
            let Ue;
            de.at(-1)?.type === "KeywordArgumentsValue" && (Ue = de.pop());
            for (let He = 0; He < W.args.length; ++He) {
              const Ft = W.args[He], Bt = de[He];
              if (Ft.type === "Identifier") {
                const Et = Ft;
                if (!Bt)
                  throw new Error(`Missing positional argument: ${Et.value}`);
                ke.setVariable(Et.value, Bt);
              } else if (Ft.type === "KeywordArgumentExpression") {
                const Et = Ft, jt = Bt ?? Ue?.value.get(Et.key.value) ?? this.evaluate(Et.value, ke);
                ke.setVariable(Et.key.value, jt);
              } else
                throw new Error(`Unknown argument type: ${Ft.type}`);
            }
            return this.evaluateBlock(W.body, ke);
          })), new At();
        }
        evaluateCallStatement(W, ve) {
          const de = new pt((Ft, Bt) => {
            const Et = new Ct(Bt);
            if (W.callerArgs)
              for (let jt = 0; jt < W.callerArgs.length; ++jt) {
                const ie = W.callerArgs[jt];
                if (ie.type !== "Identifier")
                  throw new Error(`Caller parameter must be an identifier, got ${ie.type}`);
                Et.setVariable(ie.value, Ft[jt] ?? new Ot());
              }
            return this.evaluateBlock(W.body, Et);
          }), [ye, ke] = this.evaluateArguments(W.call.args, ve);
          ye.push(new mt(ke));
          const Ue = this.evaluate(W.call.callee, ve);
          if (Ue.type !== "FunctionValue")
            throw new Error(`Cannot call something that is not a function: got ${Ue.type}`);
          const He = new Ct(ve);
          return He.setVariable("caller", de), Ue.value(ye, He);
        }
        evaluateFilterStatement(W, ve) {
          const de = this.evaluateBlock(W.body, ve);
          return this.applyFilter(de, W.filter, ve);
        }
        evaluate(W, ve) {
          if (!W)
            return new Ot();
          switch (W.type) {
            case "Program":
              return this.evalProgram(W, ve);
            case "Set":
              return this.evaluateSet(W, ve);
            case "If":
              return this.evaluateIf(W, ve);
            case "For":
              return this.evaluateFor(W, ve);
            case "Macro":
              return this.evaluateMacro(W, ve);
            case "CallStatement":
              return this.evaluateCallStatement(W, ve);
            case "Break":
              throw new Be();
            case "Continue":
              throw new Ze();
            case "IntegerLiteral":
              return new je(W.value);
            case "FloatLiteral":
              return new it(W.value);
            case "StringLiteral":
              return new Ge(W.value);
            case "ArrayLiteral":
              return new Je(W.value.map((de) => this.evaluate(de, ve)));
            case "TupleLiteral":
              return new Rt(W.value.map((de) => this.evaluate(de, ve)));
            case "ObjectLiteral": {
              const de = /* @__PURE__ */ new Map();
              for (const [ye, ke] of W.value) {
                const Ue = this.evaluate(ye, ve);
                if (!(Ue instanceof Ge))
                  throw new Error(`Object keys must be strings: got ${Ue.type}`);
                de.set(Ue.value, this.evaluate(ke, ve));
              }
              return new ht(de);
            }
            case "Identifier":
              return this.evaluateIdentifier(W, ve);
            case "CallExpression":
              return this.evaluateCallExpression(W, ve);
            case "MemberExpression":
              return this.evaluateMemberExpression(W, ve);
            case "UnaryExpression":
              return this.evaluateUnaryExpression(W, ve);
            case "BinaryExpression":
              return this.evaluateBinaryExpression(W, ve);
            case "FilterExpression":
              return this.evaluateFilterExpression(W, ve);
            case "FilterStatement":
              return this.evaluateFilterStatement(W, ve);
            case "TestExpression":
              return this.evaluateTestExpression(W, ve);
            case "SelectExpression":
              return this.evaluateSelectExpression(W, ve);
            case "Ternary":
              return this.evaluateTernaryExpression(W, ve);
            case "Comment":
              return new At();
            default:
              throw new SyntaxError(`Unknown node type: ${W.type}`);
          }
        }
      };
      function _n(W) {
        switch (typeof W) {
          case "number":
            return Number.isInteger(W) ? new je(W) : new it(W);
          case "string":
            return new Ge(W);
          case "boolean":
            return new lt(W);
          case "undefined":
            return new Ot();
          case "object":
            return W === null ? new At() : Array.isArray(W) ? new Je(W.map(_n)) : new ht(new Map(Object.entries(W).map(([ve, de]) => [
              ve,
              _n(de)
            ])));
          case "function":
            return new pt((ve, de) => {
              const ye = W(...ve.map((ke) => ke.value)) ?? null;
              return _n(ye);
            });
          default:
            throw new Error(`Cannot convert to runtime value: ${W}`);
        }
      }
      function Zt(W, ve, de) {
        const ye = de ?? 0;
        switch (W.type) {
          case "NullValue":
          case "UndefinedValue":
            return "null";
          case "IntegerValue":
          case "FloatValue":
          case "StringValue":
          case "BooleanValue":
            return JSON.stringify(W.value);
          case "ArrayValue":
          case "ObjectValue": {
            const ke = ve ? " ".repeat(ve) : "", Ue = `
` + ke.repeat(ye), He = Ue + ke;
            if (W.type === "ArrayValue") {
              const Ft = W.value.map((Bt) => Zt(Bt, ve, ye + 1));
              return ve ? `[${He}${Ft.join(`,${He}`)}${Ue}]` : `[${Ft.join(", ")}]`;
            } else {
              const Ft = Array.from(W.value.entries()).map(([Bt, Et]) => {
                const jt = `"${Bt}": ${Zt(Et, ve, ye + 1)}`;
                return ve ? `${He}${jt}` : jt;
              });
              return ve ? `{${Ft.join(",")}${Ue}}` : `{${Ft.join(", ")}}`;
            }
          }
          default:
            throw new Error(`Cannot convert to JSON: ${W.type}`);
        }
      }
      var en = `
`, qt = "{%- ", Cn = " -%}";
      function Hn(W) {
        switch (W.operator.type) {
          case "MultiplicativeBinaryOperator":
            return 4;
          case "AdditiveBinaryOperator":
            return 3;
          case "ComparisonBinaryOperator":
            return 2;
          case "Identifier":
            return W.operator.value === "and" ? 1 : W.operator.value === "in" || W.operator.value === "not in" ? 2 : 0;
        }
        return 0;
      }
      function Un(W, ve = "	") {
        const de = typeof ve == "number" ? " ".repeat(ve) : ve;
        return ln(W.body, 0, de).replace(/\n$/, "");
      }
      function kn(...W) {
        return qt + W.join(" ") + Cn;
      }
      function ln(W, ve, de) {
        return W.map((ye) => nr(ye, ve, de)).join(en);
      }
      function nr(W, ve, de) {
        const ye = de.repeat(ve);
        switch (W.type) {
          case "Program":
            return ln(W.body, ve, de);
          case "If":
            return ur(W, ve, de);
          case "For":
            return rr(W, ve, de);
          case "Set":
            return Jt(W, ve, de);
          case "Macro":
            return wt(W, ve, de);
          case "Break":
            return ye + kn("break");
          case "Continue":
            return ye + kn("continue");
          case "CallStatement":
            return tn(W, ve, de);
          case "FilterStatement":
            return ar(W, ve, de);
          case "Comment":
            return ye + "{# " + W.value + " #}";
          default:
            return ye + "{{- " + on(W) + " -}}";
        }
      }
      function ur(W, ve, de) {
        const ye = de.repeat(ve), ke = [];
        let Ue = W;
        for (; Ue && (ke.push({
          test: Ue.test,
          body: Ue.body
        }), Ue.alternate.length === 1 && Ue.alternate[0].type === "If"); )
          Ue = Ue.alternate[0];
        let He = ye + kn("if", on(ke[0].test)) + en + ln(ke[0].body, ve + 1, de);
        for (let Ft = 1; Ft < ke.length; ++Ft)
          He += en + ye + kn("elif", on(ke[Ft].test)) + en + ln(ke[Ft].body, ve + 1, de);
        return Ue && Ue.alternate.length > 0 && (He += en + ye + kn("else") + en + ln(Ue.alternate, ve + 1, de)), He += en + ye + kn("endif"), He;
      }
      function rr(W, ve, de) {
        const ye = de.repeat(ve);
        let ke = "";
        if (W.iterable.type === "SelectExpression") {
          const He = W.iterable;
          ke = `${on(He.lhs)} if ${on(He.test)}`;
        } else
          ke = on(W.iterable);
        let Ue = ye + kn("for", on(W.loopvar), "in", ke) + en + ln(W.body, ve + 1, de);
        return W.defaultBlock.length > 0 && (Ue += en + ye + kn("else") + en + ln(W.defaultBlock, ve + 1, de)), Ue += en + ye + kn("endfor"), Ue;
      }
      function Jt(W, ve, de) {
        const ye = de.repeat(ve), ke = on(W.assignee), Ue = W.value ? on(W.value) : "", He = ye + kn("set", `${ke}${W.value ? " = " + Ue : ""}`);
        return W.body.length === 0 ? He : He + en + ln(W.body, ve + 1, de) + en + ye + kn("endset");
      }
      function wt(W, ve, de) {
        const ye = de.repeat(ve), ke = W.args.map(on).join(", ");
        return ye + kn("macro", `${W.name.value}(${ke})`) + en + ln(W.body, ve + 1, de) + en + ye + kn("endmacro");
      }
      function tn(W, ve, de) {
        const ye = de.repeat(ve), ke = W.callerArgs && W.callerArgs.length > 0 ? `(${W.callerArgs.map(on).join(", ")})` : "", Ue = on(W.call);
        let He = ye + kn(`call${ke}`, Ue) + en;
        return He += ln(W.body, ve + 1, de) + en, He += ye + kn("endcall"), He;
      }
      function ar(W, ve, de) {
        const ye = de.repeat(ve), ke = W.filter.type === "Identifier" ? W.filter.value : on(W.filter);
        let Ue = ye + kn("filter", ke) + en;
        return Ue += ln(W.body, ve + 1, de) + en, Ue += ye + kn("endfilter"), Ue;
      }
      function on(W, ve = -1) {
        switch (W.type) {
          case "SpreadExpression":
            return `*${on(W.argument)}`;
          case "Identifier":
            return W.value;
          case "IntegerLiteral":
            return `${W.value}`;
          case "FloatLiteral":
            return `${W.value}`;
          case "StringLiteral":
            return JSON.stringify(W.value);
          case "BinaryExpression": {
            const de = W, ye = Hn(de), ke = on(de.left, ye), Ue = on(de.right, ye + 1), He = `${ke} ${de.operator.value} ${Ue}`;
            return ye < ve ? `(${He})` : He;
          }
          case "UnaryExpression": {
            const de = W;
            return de.operator.value + (de.operator.value === "not" ? " " : "") + on(de.argument, 1 / 0);
          }
          case "CallExpression": {
            const de = W, ye = de.args.map(on).join(", ");
            return `${on(de.callee)}(${ye})`;
          }
          case "MemberExpression": {
            const de = W;
            let ye = on(de.object);
            [
              "Identifier",
              "MemberExpression",
              "CallExpression",
              "StringLiteral",
              "IntegerLiteral",
              "FloatLiteral",
              "ArrayLiteral",
              "TupleLiteral",
              "ObjectLiteral"
            ].includes(de.object.type) || (ye = `(${ye})`);
            let ke = on(de.property);
            return !de.computed && de.property.type !== "Identifier" && (ke = `(${ke})`), de.computed ? `${ye}[${ke}]` : `${ye}.${ke}`;
          }
          case "FilterExpression": {
            const de = W, ye = on(de.operand, 1 / 0);
            return de.filter.type === "CallExpression" ? `${ye} | ${on(de.filter)}` : `${ye} | ${de.filter.value}`;
          }
          case "SelectExpression": {
            const de = W;
            return `${on(de.lhs)} if ${on(de.test)}`;
          }
          case "TestExpression": {
            const de = W;
            return `${on(de.operand)} is${de.negate ? " not" : ""} ${de.test.value}`;
          }
          case "ArrayLiteral":
          case "TupleLiteral": {
            const de = W.value.map(on), ye = W.type === "ArrayLiteral" ? "[]" : "()";
            return `${ye[0]}${de.join(", ")}${ye[1]}`;
          }
          case "ObjectLiteral":
            return `{${Array.from(W.value.entries()).map(([ye, ke]) => `${on(ye)}: ${on(ke)}`).join(", ")}}`;
          case "SliceExpression": {
            const de = W, ye = de.start ? on(de.start) : "", ke = de.stop ? on(de.stop) : "", Ue = de.step ? `:${on(de.step)}` : "";
            return `${ye}:${ke}${Ue}`;
          }
          case "KeywordArgumentExpression": {
            const de = W;
            return `${de.key.value}=${on(de.value)}`;
          }
          case "Ternary": {
            const de = W, ye = `${on(de.trueExpr)} if ${on(de.condition, 0)} else ${on(de.falseExpr)}`;
            return ve > -1 ? `(${ye})` : ye;
          }
          default:
            throw new Error(`Unknown expression type: ${W.type}`);
        }
      }
      var sr = class {
        constructor(W) {
          __publicField(this, "parsed");
          const ve = h(W, {
            lstrip_blocks: true,
            trim_blocks: true
          });
          this.parsed = Ye(ve);
        }
        render(W) {
          const ve = new Ct();
          if (St(ve), W)
            for (const [ke, Ue] of Object.entries(W))
              ve.set(ke, Ue);
          return new zt(ve).run(this.parsed).value;
        }
        format(W) {
          return Un(this.parsed, W?.indent || "	");
        }
      };
    },
    "./src/backends/onnx.js": (i, e, t) => {
      var s;
      t.r(e), t.d(e, {
        Tensor: () => w.Tensor,
        createInferenceSession: () => P,
        deviceToExecutionProviders: () => p,
        isONNXProxy: () => F,
        isONNXTensor: () => A,
        runInferenceSession: () => $
      });
      var l = t("./src/env.js"), f = t("?2ce3"), d = t("onnxruntime-web"), w = t("onnxruntime-common");
      const g = Object.freeze({
        auto: null,
        gpu: null,
        cpu: "cpu",
        wasm: "wasm",
        webgpu: "webgpu",
        cuda: "cuda",
        dml: "dml",
        webnn: {
          name: "webnn",
          deviceType: "cpu"
        },
        "webnn-npu": {
          name: "webnn",
          deviceType: "npu"
        },
        "webnn-gpu": {
          name: "webnn",
          deviceType: "gpu"
        },
        "webnn-cpu": {
          name: "webnn",
          deviceType: "cpu"
        }
      }), _ = [];
      let h, r;
      const n = Symbol.for("onnxruntime");
      if (n in globalThis)
        r = globalThis[n];
      else if (l.apis.IS_NODE_ENV) {
        switch (r = f ?? (s || (s = t.t(f, 2))), process.platform) {
          case "win32":
            _.push("dml");
            break;
          case "linux":
            process.arch === "x64" && _.push("cuda");
            break;
        }
        _.push("cpu"), h = [
          "cpu"
        ];
      } else
        r = d, l.apis.IS_WEBNN_AVAILABLE && _.push("webnn-npu", "webnn-gpu", "webnn-cpu", "webnn"), l.apis.IS_WEBGPU_AVAILABLE && _.push("webgpu"), _.push("wasm"), h = [
          "wasm"
        ];
      const u = r.InferenceSession;
      function p(D = null) {
        if (!D)
          return h;
        switch (D) {
          case "auto":
            return _;
          case "gpu":
            return _.filter((N) => [
              "webgpu",
              "cuda",
              "dml",
              "webnn-gpu"
            ].includes(N));
        }
        if (_.includes(D))
          return [
            g[D] ?? D
          ];
        throw new Error(`Unsupported device: "${D}". Should be one of: ${_.join(", ")}.`);
      }
      let M = null;
      async function P(D, N, R) {
        M && await M;
        const j = u.create(D, N);
        M ?? (M = j);
        const Z = await j;
        return Z.config = R, Z;
      }
      let E = Promise.resolve();
      const k = l.apis.IS_BROWSER_ENV || l.apis.IS_WEBWORKER_ENV;
      async function $(D, N) {
        const R = () => D.run(N);
        return await (k ? E = E.then(R) : R());
      }
      function A(D) {
        return D instanceof r.Tensor;
      }
      const C = r?.env;
      C?.wasm && (!(typeof ServiceWorkerGlobalScope < "u" && self instanceof ServiceWorkerGlobalScope) && !C.wasm.wasmPaths && (C.wasm.wasmPaths = `https://cdn.jsdelivr.net/npm/@huggingface/transformers@${l.env.version}/dist/`), C.wasm.proxy = false), C?.webgpu && (C.webgpu.powerPreference = "high-performance");
      function F() {
        return C?.wasm?.proxy;
      }
      l.env.backends.onnx = C;
    },
    "./src/base/feature_extraction_utils.js": (i, e, t) => {
      t.r(e), t.d(e, {
        FeatureExtractor: () => d,
        validate_audio_inputs: () => w
      });
      var s = t("./src/utils/constants.js"), l = t("./src/utils/generic.js"), f = t("./src/utils/hub.js");
      class d extends l.Callable {
        constructor(_) {
          super(), this.config = _;
        }
        static async from_pretrained(_, h = {}) {
          const r = await (0, f.getModelJSON)(_, s.FEATURE_EXTRACTOR_NAME, true, h);
          return new this(r);
        }
      }
      function w(g, _) {
        if (!(g instanceof Float32Array || g instanceof Float64Array))
          throw new Error(`${_} expects input to be a Float32Array or a Float64Array, but got ${g?.constructor?.name ?? typeof g} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`);
      }
    },
    "./src/base/image_processors_utils.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ImageProcessor: () => A,
        center_to_corners_format: () => r,
        post_process_instance_segmentation: () => $,
        post_process_object_detection: () => n,
        post_process_panoptic_segmentation: () => k,
        post_process_semantic_segmentation: () => u
      });
      var s = t("./src/utils/generic.js"), l = t("./src/utils/tensor.js"), f = t("./src/utils/maths.js");
      t("./src/utils/image.js");
      var d = t("./src/utils/core.js"), w = t("./src/utils/hub.js"), g = t("./src/utils/constants.js");
      function _(C, F, D = 0, N = null) {
        const R = C / F;
        let j = (0, f.bankers_round)(R) * F;
        return N !== null && j > N && (j = Math.floor(R) * F), j < D && (j = Math.ceil(R) * F), j;
      }
      function h([C, F], D) {
        return [
          Math.max(Math.floor(C / D), 1) * D,
          Math.max(Math.floor(F / D), 1) * D
        ];
      }
      function r([C, F, D, N]) {
        return [
          C - D / 2,
          F - N / 2,
          C + D / 2,
          F + N / 2
        ];
      }
      function n(C, F = 0.5, D = null, N = false) {
        const R = C.logits, j = C.pred_boxes, [Z, te, J] = R.dims;
        if (D !== null && D.length !== Z)
          throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
        let G = [];
        for (let H = 0; H < Z; ++H) {
          let U = D !== null ? D[H] : null, Q = {
            boxes: [],
            classes: [],
            scores: []
          }, he = R[H], fe = j[H];
          for (let Me = 0; Me < te; ++Me) {
            let pe = he[Me], oe = [], be;
            if (N) {
              be = pe.sigmoid().data;
              for (let Ee = 0; Ee < be.length; ++Ee)
                be[Ee] > F && oe.push(Ee);
            } else {
              let Ee = (0, f.max)(pe.data)[1];
              if (Ee === J - 1 || (be = (0, f.softmax)(pe.data), be[Ee] < F))
                continue;
              oe.push(Ee);
            }
            for (const Ee of oe) {
              let Oe = fe[Me].data;
              Oe = r(Oe), U !== null && (Oe = Oe.map((Ye, We) => Ye * U[(We + 1) % 2])), Q.boxes.push(Oe), Q.classes.push(Ee), Q.scores.push(be[Ee]);
            }
          }
          G.push(Q);
        }
        return G;
      }
      function u(C, F = null) {
        const D = C.logits, N = D.dims[0];
        if (F !== null && F.length !== N)
          throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
        const R = [];
        for (let j = 0; j < N; ++j) {
          const Z = F !== null ? F[j] : null;
          let te = D[j];
          Z !== null && (te = (0, l.interpolate)(te, Z, "bilinear", false));
          const [J, G] = Z ?? te.dims.slice(-2), H = new l.Tensor("int32", new Int32Array(J * G), [
            J,
            G
          ]), U = te[0].data, Q = H.data;
          for (let Me = 1; Me < te.dims[0]; ++Me) {
            const pe = te[Me].data;
            for (let oe = 0; oe < pe.length; ++oe)
              pe[oe] > U[oe] && (U[oe] = pe[oe], Q[oe] = Me);
          }
          const he = new Array(te.dims[0]);
          for (let Me = 0; Me < Q.length; ++Me) {
            const pe = Q[Me];
            he[pe] = pe;
          }
          const fe = he.filter((Me) => Me !== void 0);
          R.push({
            segmentation: H,
            labels: fe
          });
        }
        return R;
      }
      function p(C, F, D, N) {
        const R = [], j = [], Z = [];
        for (let te = 0; te < C.dims[0]; ++te) {
          const J = C[te], G = F[te], H = (0, f.max)(J.data)[1];
          if (H === N)
            continue;
          const Q = (0, f.softmax)(J.data)[H];
          Q > D && (R.push(G), j.push(Q), Z.push(H));
        }
        return [
          R,
          j,
          Z
        ];
      }
      function M(C, F, D, N = 0.5, R = 0.8) {
        const j = [];
        let Z = 0, te = 0;
        const J = F[D].data;
        for (let H = 0; H < C.length; ++H)
          C[H] === D && (j.push(H), ++Z), J[H] >= N && ++te;
        let G = Z > 0 && te > 0;
        return G && (G = Z / te > R), [
          G,
          j
        ];
      }
      function P(C, F, D, N, R, j = null, Z = null) {
        const [te, J] = Z ?? C[0].dims, G = new l.Tensor("int32", new Int32Array(te * J), [
          te,
          J
        ]), H = [];
        if (Z !== null)
          for (let Me = 0; Me < C.length; ++Me)
            C[Me] = (0, l.interpolate)(C[Me], Z, "bilinear", false);
        const U = new Int32Array(C[0].data.length), Q = new Float32Array(C[0].data.length);
        for (let Me = 0; Me < C.length; ++Me) {
          let pe = F[Me];
          const oe = C[Me].data;
          for (let be = 0; be < oe.length; ++be)
            oe[be] *= pe, oe[be] > Q[be] && (U[be] = Me, Q[be] = oe[be]);
        }
        let he = 0;
        const fe = G.data;
        for (let Me = 0; Me < D.length; ++Me) {
          const pe = D[Me], [oe, be] = M(U, C, Me, N, R);
          if (oe) {
            ++he;
            for (const Ee of be)
              fe[Ee] = he;
            H.push({
              id: he,
              label_id: pe,
              score: F[Me]
            });
          }
        }
        return [
          G,
          H
        ];
      }
      function E(C, F, D = 28, N = 56 * 56, R = 14 * 14 * 4 * 1280) {
        if (C < D || F < D)
          throw new Error(`height:${C} or width:${F} must be larger than factor:${D}`);
        if (Math.max(C, F) / Math.min(C, F) > 200)
          throw new Error(`absolute aspect ratio must be smaller than 200, got ${Math.max(C, F) / Math.min(C, F)}`);
        let j = Math.round(C / D) * D, Z = Math.round(F / D) * D;
        if (j * Z > R) {
          const te = Math.sqrt(C * F / R);
          j = Math.floor(C / te / D) * D, Z = Math.floor(F / te / D) * D;
        } else if (j * Z < N) {
          const te = Math.sqrt(N / (C * F));
          j = Math.ceil(C * te / D) * D, Z = Math.ceil(F * te / D) * D;
        }
        return [
          j,
          Z
        ];
      }
      function k(C, F = 0.5, D = 0.5, N = 0.8, R = null, j = null) {
        R === null && (console.warn("`label_ids_to_fuse` unset. No instance will be fused."), R = /* @__PURE__ */ new Set());
        const Z = C.class_queries_logits ?? C.logits, J = (C.masks_queries_logits ?? C.pred_masks).sigmoid();
        let [G, H, U] = Z.dims;
        if (U -= 1, j !== null && j.length !== G)
          throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
        let Q = [];
        for (let he = 0; he < G; ++he) {
          let fe = j !== null ? j[he] : null, Me = Z[he], pe = J[he], [oe, be, Ee] = p(Me, pe, F, U);
          if (Ee.length === 0) {
            let [We, ot] = fe ?? pe.dims.slice(-2), vt = new l.Tensor("int32", new Int32Array(We * ot).fill(-1), [
              We,
              ot
            ]);
            Q.push({
              segmentation: vt,
              segments_info: []
            });
            continue;
          }
          let [Oe, Ye] = P(oe, be, Ee, D, N, R, fe);
          Q.push({
            segmentation: Oe,
            segments_info: Ye
          });
        }
        return Q;
      }
      function $(C, F = 0.5, D = null) {
        throw new Error("`post_process_instance_segmentation` is not yet implemented.");
      }
      class A extends s.Callable {
        constructor(F) {
          super(), this.image_mean = F.image_mean ?? F.mean, this.image_std = F.image_std ?? F.std, this.resample = F.resample ?? 2, this.do_rescale = F.do_rescale ?? true, this.rescale_factor = F.rescale_factor ?? 1 / 255, this.do_normalize = F.do_normalize, this.do_thumbnail = F.do_thumbnail, this.size = F.size ?? F.image_size, this.do_resize = F.do_resize ?? this.size !== void 0, this.size_divisibility = F.size_divisibility ?? F.size_divisor, this.do_center_crop = F.do_center_crop, this.crop_size = F.crop_size, this.do_convert_rgb = F.do_convert_rgb ?? true, this.do_crop_margin = F.do_crop_margin, this.pad_size = F.pad_size, this.do_pad = F.do_pad, this.min_pixels = F.min_pixels, this.max_pixels = F.max_pixels, this.do_pad && !this.pad_size && this.size && this.size.width !== void 0 && this.size.height !== void 0 && (this.pad_size = this.size), this.do_flip_channel_order = F.do_flip_channel_order ?? false, this.config = F;
        }
        async thumbnail(F, D, N = 2) {
          const R = F.height, j = F.width, Z = D.height, te = D.width;
          let J = Math.min(R, Z), G = Math.min(j, te);
          return J === R && G === j ? F : (R > j ? G = Math.floor(j * J / R) : j > R && (J = Math.floor(R * G / j)), await F.resize(G, J, {
            resample: N
          }));
        }
        async crop_margin(F, D = 200) {
          const N = F.clone().grayscale(), R = (0, f.min)(N.data)[0], Z = (0, f.max)(N.data)[0] - R;
          if (Z === 0)
            return F;
          const te = D / 255;
          let J = N.width, G = N.height, H = 0, U = 0;
          const Q = N.data;
          for (let he = 0; he < N.height; ++he) {
            const fe = he * N.width;
            for (let Me = 0; Me < N.width; ++Me)
              (Q[fe + Me] - R) / Z < te && (J = Math.min(J, Me), G = Math.min(G, he), H = Math.max(H, Me), U = Math.max(U, he));
          }
          return F = await F.crop([
            J,
            G,
            H,
            U
          ]), F;
        }
        pad_image(F, D, N, { mode: R = "constant", center: j = false, constant_values: Z = 0 } = {}) {
          const [te, J, G] = D;
          let H, U;
          if (typeof N == "number" ? (H = N, U = N) : N === "square" ? H = U = Math.max(te, J) : (H = N.width, U = N.height), H !== J || U !== te) {
            const Q = new Float32Array(H * U * G);
            if (Array.isArray(Z))
              for (let Me = 0; Me < Q.length; ++Me)
                Q[Me] = Z[Me % G];
            else
              Z !== 0 && Q.fill(Z);
            const [he, fe] = j ? [
              Math.floor((H - J) / 2),
              Math.floor((U - te) / 2)
            ] : [
              0,
              0
            ];
            for (let Me = 0; Me < te; ++Me) {
              const pe = (Me + fe) * H, oe = Me * J;
              for (let be = 0; be < J; ++be) {
                const Ee = (pe + be + he) * G, Oe = (oe + be) * G;
                for (let Ye = 0; Ye < G; ++Ye)
                  Q[Ee + Ye] = F[Oe + Ye];
              }
            }
            if (R === "symmetric") {
              if (j)
                throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");
              const Me = te - 1, pe = J - 1;
              for (let oe = 0; oe < U; ++oe) {
                const be = oe * H, Ee = (0, d.calculateReflectOffset)(oe, Me) * J;
                for (let Oe = 0; Oe < H; ++Oe) {
                  if (oe < te && Oe < J)
                    continue;
                  const Ye = (be + Oe) * G, We = (Ee + (0, d.calculateReflectOffset)(Oe, pe)) * G;
                  for (let ot = 0; ot < G; ++ot)
                    Q[Ye + ot] = F[We + ot];
                }
              }
            }
            F = Q, D = [
              U,
              H,
              G
            ];
          }
          return [
            F,
            D
          ];
        }
        rescale(F) {
          for (let D = 0; D < F.length; ++D)
            F[D] = this.rescale_factor * F[D];
        }
        get_resize_output_image_size(F, D) {
          const [N, R] = F.size;
          let j, Z;
          if (this.do_thumbnail) {
            const { height: te, width: J } = D;
            j = Math.min(te, J);
          } else
            Number.isInteger(D) ? (j = D, Z = this.config.max_size ?? j) : D !== void 0 && (j = D.shortest_edge, Z = D.longest_edge);
          if (j !== void 0 || Z !== void 0) {
            const te = j === void 0 ? 1 : Math.max(j / N, j / R), J = N * te, G = R * te, H = Z === void 0 ? 1 : Math.min(Z / J, Z / G);
            let U = Math.floor(Number((J * H).toFixed(2))), Q = Math.floor(Number((G * H).toFixed(2)));
            return this.size_divisibility !== void 0 && ([U, Q] = h([
              U,
              Q
            ], this.size_divisibility)), [
              U,
              Q
            ];
          } else if (D !== void 0 && D.width !== void 0 && D.height !== void 0) {
            let te = D.width, J = D.height;
            if (this.config.keep_aspect_ratio && this.config.ensure_multiple_of) {
              let G = J / R, H = te / N;
              Math.abs(1 - H) < Math.abs(1 - G) ? G = H : H = G, J = _(G * R, this.config.ensure_multiple_of), te = _(H * N, this.config.ensure_multiple_of);
            }
            return [
              te,
              J
            ];
          } else {
            if (this.size_divisibility !== void 0)
              return h([
                N,
                R
              ], this.size_divisibility);
            if (this.min_pixels !== void 0 && this.max_pixels !== void 0) {
              const te = this.config.patch_size * this.config.merge_size;
              return E(R, N, te, this.min_pixels, this.max_pixels);
            } else
              throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(D)}`);
          }
        }
        async resize(F) {
          const [D, N] = this.get_resize_output_image_size(F, this.size);
          return await F.resize(D, N, {
            resample: this.resample
          });
        }
        async preprocess(F, { do_normalize: D = null, do_pad: N = null, do_convert_rgb: R = null, do_convert_grayscale: j = null, do_flip_channel_order: Z = null } = {}) {
          this.do_crop_margin && (F = await this.crop_margin(F));
          const [te, J] = F.size;
          if (R ?? this.do_convert_rgb ? F = F.rgb() : j && (F = F.grayscale()), this.do_resize && (F = await this.resize(F)), this.do_thumbnail && (F = await this.thumbnail(F, this.size, this.resample)), this.do_center_crop) {
            let he, fe;
            Number.isInteger(this.crop_size) ? (he = this.crop_size, fe = this.crop_size) : (he = this.crop_size.width, fe = this.crop_size.height), F = await F.center_crop(he, fe);
          }
          const G = [
            F.height,
            F.width
          ];
          let H = Float32Array.from(F.data), U = [
            F.height,
            F.width,
            F.channels
          ];
          if (this.do_rescale && this.rescale(H), D ?? this.do_normalize) {
            let he = this.image_mean;
            Array.isArray(this.image_mean) || (he = new Array(F.channels).fill(he));
            let fe = this.image_std;
            if (Array.isArray(this.image_std) || (fe = new Array(F.channels).fill(he)), he.length !== F.channels || fe.length !== F.channels)
              throw new Error(`When set to arrays, the length of \`image_mean\` (${he.length}) and \`image_std\` (${fe.length}) must match the number of channels in the image (${F.channels}).`);
            for (let Me = 0; Me < H.length; Me += F.channels)
              for (let pe = 0; pe < F.channels; ++pe)
                H[Me + pe] = (H[Me + pe] - he[pe]) / fe[pe];
          }
          if (N ?? this.do_pad) {
            if (this.pad_size)
              [H, U] = this.pad_image(H, [
                F.height,
                F.width,
                F.channels
              ], this.pad_size);
            else if (this.size_divisibility) {
              const [he, fe] = h([
                U[1],
                U[0]
              ], this.size_divisibility);
              [H, U] = this.pad_image(H, U, {
                width: he,
                height: fe
              });
            }
          }
          if (Z ?? this.do_flip_channel_order) {
            if (U[2] !== 3)
              throw new Error("Flipping channel order is only supported for RGB images.");
            for (let he = 0; he < H.length; he += 3) {
              const fe = H[he];
              H[he] = H[he + 2], H[he + 2] = fe;
            }
          }
          const Q = new l.Tensor("float32", H, U).permute(2, 0, 1);
          return {
            original_size: [
              J,
              te
            ],
            reshaped_input_size: G,
            pixel_values: Q
          };
        }
        async _call(F, ...D) {
          Array.isArray(F) || (F = [
            F
          ]);
          const N = await Promise.all(F.map((j) => this.preprocess(j)));
          return {
            pixel_values: (0, l.stack)(N.map((j) => j.pixel_values), 0),
            original_sizes: N.map((j) => j.original_size),
            reshaped_input_sizes: N.map((j) => j.reshaped_input_size)
          };
        }
        static async from_pretrained(F, D = {}) {
          const N = await (0, w.getModelJSON)(F, g.IMAGE_PROCESSOR_NAME, true, D);
          return new this(N);
        }
      }
    },
    "./src/base/processing_utils.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Processor: () => d
      });
      var s = t("./src/utils/constants.js"), l = t("./src/utils/generic.js"), f = t("./src/utils/hub.js");
      class d extends l.Callable {
        constructor(g, _, h) {
          super(), this.config = g, this.components = _, this.chat_template = h;
        }
        get image_processor() {
          return this.components.image_processor;
        }
        get tokenizer() {
          return this.components.tokenizer;
        }
        get feature_extractor() {
          return this.components.feature_extractor;
        }
        apply_chat_template(g, _ = {}) {
          if (!this.tokenizer)
            throw new Error("Unable to apply chat template without a tokenizer.");
          return this.tokenizer.apply_chat_template(g, {
            tokenize: false,
            chat_template: this.chat_template ?? void 0,
            ..._
          });
        }
        batch_decode(...g) {
          if (!this.tokenizer)
            throw new Error("Unable to decode without a tokenizer.");
          return this.tokenizer.batch_decode(...g);
        }
        decode(...g) {
          if (!this.tokenizer)
            throw new Error("Unable to decode without a tokenizer.");
          return this.tokenizer.decode(...g);
        }
        async _call(g, ..._) {
          for (const h of [
            this.image_processor,
            this.feature_extractor,
            this.tokenizer
          ])
            if (h)
              return h(g, ..._);
          throw new Error("No image processor, feature extractor, or tokenizer found.");
        }
        static async from_pretrained(g, _ = {}) {
          const [h, r, n] = await Promise.all([
            this.uses_processor_config ? (0, f.getModelJSON)(g, s.PROCESSOR_NAME, true, _) : {},
            Promise.all(this.classes.filter((u) => u in this).map(async (u) => {
              const p = await this[u].from_pretrained(g, _);
              return [
                u.replace(/_class$/, ""),
                p
              ];
            })).then(Object.fromEntries),
            this.uses_chat_template_file ? (0, f.getModelText)(g, s.CHAT_TEMPLATE_NAME, true, _) : null
          ]);
          return new this(h, r, n);
        }
      }
      __publicField(d, "classes", [
        "image_processor_class",
        "tokenizer_class",
        "feature_extractor_class"
      ]);
      __publicField(d, "uses_processor_config", false);
      __publicField(d, "uses_chat_template_file", false);
    },
    "./src/configs.js": (i, e, t) => {
      t.r(e), t.d(e, {
        AutoConfig: () => h,
        PretrainedConfig: () => _,
        getCacheShapes: () => w
      });
      var s = t("./src/utils/core.js"), l = t("./src/utils/hub.js");
      async function f(r, n) {
        return await (0, l.getModelJSON)(r, "config.json", true, n);
      }
      function d(r) {
        const n = {};
        let u = {};
        switch (r.model_type) {
          case "llava":
          case "paligemma":
          case "gemma3":
          case "florence2":
          case "llava_onevision":
          case "idefics3":
          case "ultravox":
          case "voxtral":
          case "smolvlm":
          case "gemma3n":
            u = d(r.text_config);
            break;
          case "moondream1":
            u = d(r.phi_config);
            break;
          case "musicgen":
            u = d(r.decoder);
            break;
          case "multi_modality":
            u = d(r.language_config);
            break;
          case "gpt2":
          case "gptj":
          case "jais":
          case "codegen":
          case "gpt_bigcode":
            n.num_heads = "n_head", n.num_layers = "n_layer", n.hidden_size = "n_embd";
            break;
          case "gpt_neox":
          case "stablelm":
          case "opt":
          case "falcon":
          case "modernbert-decoder":
            n.num_heads = "num_attention_heads", n.num_layers = "num_hidden_layers", n.hidden_size = "hidden_size";
            break;
          case "llama":
          case "llama4_text":
          case "arcee":
          case "lfm2":
          case "smollm3":
          case "olmo":
          case "olmo2":
          case "mobilellm":
          case "granite":
          case "granitemoehybrid":
          case "cohere":
          case "mistral":
          case "starcoder2":
          case "qwen2":
          case "qwen2_vl":
          case "phi":
          case "phi3":
          case "phi3_v":
          case "llava_qwen2":
            n.num_heads = "num_key_value_heads", n.num_layers = "num_hidden_layers", n.hidden_size = "hidden_size", n.num_attention_heads = "num_attention_heads", n.dim_kv = "head_dim";
            break;
          case "qwen3":
          case "gemma":
          case "gemma2":
          case "vaultgemma":
          case "gemma3_text":
          case "gemma3n_text":
          case "glm":
          case "helium":
          case "ernie4_5":
            n.num_heads = "num_key_value_heads", n.num_layers = "num_hidden_layers", n.dim_kv = "head_dim";
            break;
          case "openelm":
            n.num_heads = "num_kv_heads", n.num_layers = "num_transformer_layers", n.dim_kv = "head_dim";
            break;
          case "gpt_neo":
          case "donut-swin":
            n.num_heads = "num_heads", n.num_layers = "num_layers", n.hidden_size = "hidden_size";
            break;
          case "bloom":
            n.num_heads = "n_head", n.num_layers = "n_layer", n.hidden_size = "hidden_size";
            break;
          case "mpt":
            n.num_heads = "n_heads", n.num_layers = "n_layers", n.hidden_size = "d_model";
            break;
          case "exaone":
            n.num_heads = "num_key_value_heads", n.num_layers = "num_layers", n.dim_kv = "head_dim", n.num_attention_heads = "num_attention_heads";
            break;
          case "t5":
          case "mt5":
          case "longt5":
            n.num_decoder_layers = "num_decoder_layers", n.num_decoder_heads = "num_heads", n.decoder_dim_kv = "d_kv", n.num_encoder_layers = "num_layers", n.num_encoder_heads = "num_heads", n.encoder_dim_kv = "d_kv";
            break;
          case "bart":
          case "mbart":
          case "marian":
          case "whisper":
          case "lite-whisper":
          case "m2m_100":
          case "blenderbot":
          case "blenderbot-small":
          case "florence2_language":
            n.num_decoder_layers = "decoder_layers", n.num_decoder_heads = "decoder_attention_heads", n.decoder_hidden_size = "d_model", n.num_encoder_layers = "encoder_layers", n.num_encoder_heads = "encoder_attention_heads", n.encoder_hidden_size = "d_model";
            break;
          case "speecht5":
            n.num_decoder_layers = "decoder_layers", n.num_decoder_heads = "decoder_attention_heads", n.decoder_hidden_size = "hidden_size", n.num_encoder_layers = "encoder_layers", n.num_encoder_heads = "encoder_attention_heads", n.encoder_hidden_size = "hidden_size";
            break;
          case "trocr":
            n.num_encoder_layers = n.num_decoder_layers = "decoder_layers", n.num_encoder_heads = n.num_decoder_heads = "decoder_attention_heads", n.encoder_hidden_size = n.decoder_hidden_size = "d_model";
            break;
          case "musicgen_decoder":
            n.num_encoder_layers = n.num_decoder_layers = "num_hidden_layers", n.num_encoder_heads = n.num_decoder_heads = "num_attention_heads", n.encoder_hidden_size = n.decoder_hidden_size = "hidden_size";
            break;
          case "moonshine":
            n.num_decoder_layers = "decoder_num_hidden_layers", n.num_decoder_heads = "decoder_num_key_value_heads", n.num_encoder_layers = "encoder_num_hidden_layers", n.num_encoder_heads = "encoder_num_key_value_heads", n.encoder_hidden_size = n.decoder_hidden_size = "hidden_size";
            break;
          case "vision-encoder-decoder":
            const M = d(r.decoder), P = "num_decoder_layers" in M, E = (0, s.pick)(r, [
              "model_type",
              "is_encoder_decoder"
            ]);
            return P ? (E.num_decoder_layers = M.num_decoder_layers, E.num_decoder_heads = M.num_decoder_heads, E.decoder_hidden_size = M.decoder_hidden_size, E.num_encoder_layers = M.num_encoder_layers, E.num_encoder_heads = M.num_encoder_heads, E.encoder_hidden_size = M.encoder_hidden_size) : (E.num_layers = M.num_layers, E.num_heads = M.num_heads, E.hidden_size = M.hidden_size), E;
        }
        const p = {
          ...u,
          ...(0, s.pick)(r, [
            "model_type",
            "multi_query",
            "is_encoder_decoder"
          ])
        };
        for (const M in n)
          p[M] = r[n[M]];
        return p;
      }
      function w(r, n) {
        if (r.model_type === "lfm2") {
          const u = n?.prefix ?? "past_key_values", p = u === "present" ? "present" : "past", M = {}, { layer_types: P, num_attention_heads: E, num_key_value_heads: k, hidden_size: $, conv_L_cache: A } = r, C = $ / E, F = n?.batch_size ?? 1;
          for (let D = 0; D < P.length; ++D)
            if (P[D] === "full_attention")
              for (const N of [
                "key",
                "value"
              ])
                M[`${u}.${D}.${N}`] = [
                  F,
                  k,
                  0,
                  C
                ];
            else if (P[D] === "conv")
              M[`${p}_conv.${D}`] = [
                F,
                $,
                A
              ];
            else
              throw new Error(`Unsupported layer type: ${P[D]}`);
          return M;
        }
        return g(r, n);
      }
      function g(r, { prefix: n = "past_key_values", batch_size: u = 1 } = {}) {
        const p = {}, M = r.normalized_config;
        if (M.is_encoder_decoder && "num_encoder_heads" in M && "num_decoder_heads" in M) {
          const P = M.encoder_dim_kv ?? M.encoder_hidden_size / M.num_encoder_heads, E = M.decoder_dim_kv ?? M.decoder_hidden_size / M.num_decoder_heads, k = [
            u,
            M.num_encoder_heads,
            0,
            P
          ], $ = [
            u,
            M.num_decoder_heads,
            0,
            E
          ];
          for (let A = 0; A < M.num_decoder_layers; ++A)
            p[`${n}.${A}.encoder.key`] = k, p[`${n}.${A}.encoder.value`] = k, p[`${n}.${A}.decoder.key`] = $, p[`${n}.${A}.decoder.value`] = $;
        } else {
          const P = M.num_heads, E = M.num_layers, k = M.dim_kv ?? M.hidden_size / (M.num_attention_heads ?? P);
          if (M.model_type === "falcon") {
            const $ = [
              u * P,
              0,
              k
            ];
            for (let A = 0; A < E; ++A)
              p[`${n}.${A}.key`] = $, p[`${n}.${A}.value`] = $;
          } else if (M.multi_query) {
            const $ = [
              u * P,
              0,
              2 * k
            ];
            for (let A = 0; A < E; ++A)
              p[`${n}.${A}.key_value`] = $;
          } else if (M.model_type === "bloom") {
            const $ = [
              u * P,
              k,
              0
            ], A = [
              u * P,
              0,
              k
            ];
            for (let C = 0; C < E; ++C)
              p[`${n}.${C}.key`] = $, p[`${n}.${C}.value`] = A;
          } else if (M.model_type === "openelm")
            for (let $ = 0; $ < E; ++$) {
              const A = [
                u,
                P[$],
                0,
                k
              ];
              p[`${n}.${$}.key`] = A, p[`${n}.${$}.value`] = A;
            }
          else {
            const $ = [
              u,
              P,
              0,
              k
            ];
            for (let A = 0; A < E; ++A)
              p[`${n}.${A}.key`] = $, p[`${n}.${A}.value`] = $;
          }
        }
        return p;
      }
      class _ {
        constructor(n) {
          __publicField(this, "model_type", null);
          __publicField(this, "is_encoder_decoder", false);
          __publicField(this, "max_position_embeddings");
          __publicField(this, "transformers.js_config");
          Object.assign(this, n), this.normalized_config = d(this);
        }
        static async from_pretrained(n, { progress_callback: u = null, config: p = null, cache_dir: M = null, local_files_only: P = false, revision: E = "main" } = {}) {
          p && !(p instanceof _) && (p = new _(p));
          const k = p ?? await f(n, {
            progress_callback: u,
            config: p,
            cache_dir: M,
            local_files_only: P,
            revision: E
          });
          return new this(k);
        }
      }
      class h {
        static async from_pretrained(...n) {
          return _.from_pretrained(...n);
        }
      }
    },
    "./src/env.js": (i, e, t) => {
      t.r(e), t.d(e, {
        apis: () => E,
        env: () => D
      });
      var s = t("?db59"), l = t("?383f"), f = t("?fa4b");
      const d = "3.7.5", w = typeof window < "u" && typeof window.document < "u", g = typeof self < "u" && [
        "DedicatedWorkerGlobalScope",
        "ServiceWorkerGlobalScope",
        "SharedWorkerGlobalScope"
      ].includes(self.constructor?.name), _ = typeof self < "u" && "caches" in self, h = typeof navigator < "u" && "gpu" in navigator, r = typeof navigator < "u" && "ml" in navigator, n = typeof process < "u", u = n && process?.release?.name === "node", p = !N(s), M = !N(l), P = typeof globalThis.Deno < "u", E = Object.freeze({
        IS_BROWSER_ENV: w,
        IS_WEBWORKER_ENV: g,
        IS_WEB_CACHE_AVAILABLE: _,
        IS_WEBGPU_AVAILABLE: h,
        IS_WEBNN_AVAILABLE: r,
        IS_PROCESS_AVAILABLE: n,
        IS_NODE_ENV: u,
        IS_FS_AVAILABLE: p,
        IS_PATH_AVAILABLE: M
      }), k = p && M;
      let $ = "./";
      if (k) {
        const R = Object(import.meta).url;
        R ? $ = l.dirname(l.dirname(f.fileURLToPath(R))) : typeof __dirname < "u" && ($ = l.dirname(__dirname));
      }
      const A = k ? l.join($, "/.cache/") : null, C = "/models/", F = k ? l.join($, C) : C, D = {
        version: d,
        backends: {
          onnx: {}
        },
        allowRemoteModels: true,
        remoteHost: "https://huggingface.co/",
        remotePathTemplate: "{model}/resolve/{revision}/",
        allowLocalModels: !(w || g),
        localModelPath: F,
        useFS: p,
        useBrowserCache: _ && !P,
        useFSCache: p,
        cacheDir: A,
        useCustomCache: false,
        customCache: null
      };
      function N(R) {
        return Object.keys(R).length === 0;
      }
    },
    "./src/generation/configuration_utils.js": (i, e, t) => {
      t.r(e), t.d(e, {
        GenerationConfig: () => l
      });
      var s = t("./src/utils/core.js");
      class l {
        constructor(d) {
          __publicField(this, "max_length", 20);
          __publicField(this, "max_new_tokens", null);
          __publicField(this, "min_length", 0);
          __publicField(this, "min_new_tokens", null);
          __publicField(this, "early_stopping", false);
          __publicField(this, "max_time", null);
          __publicField(this, "do_sample", false);
          __publicField(this, "num_beams", 1);
          __publicField(this, "num_beam_groups", 1);
          __publicField(this, "penalty_alpha", null);
          __publicField(this, "use_cache", true);
          __publicField(this, "temperature", 1);
          __publicField(this, "top_k", 50);
          __publicField(this, "top_p", 1);
          __publicField(this, "typical_p", 1);
          __publicField(this, "epsilon_cutoff", 0);
          __publicField(this, "eta_cutoff", 0);
          __publicField(this, "diversity_penalty", 0);
          __publicField(this, "repetition_penalty", 1);
          __publicField(this, "encoder_repetition_penalty", 1);
          __publicField(this, "length_penalty", 1);
          __publicField(this, "no_repeat_ngram_size", 0);
          __publicField(this, "bad_words_ids", null);
          __publicField(this, "force_words_ids", null);
          __publicField(this, "renormalize_logits", false);
          __publicField(this, "constraints", null);
          __publicField(this, "forced_bos_token_id", null);
          __publicField(this, "forced_eos_token_id", null);
          __publicField(this, "remove_invalid_values", false);
          __publicField(this, "exponential_decay_length_penalty", null);
          __publicField(this, "suppress_tokens", null);
          __publicField(this, "streamer", null);
          __publicField(this, "begin_suppress_tokens", null);
          __publicField(this, "forced_decoder_ids", null);
          __publicField(this, "guidance_scale", null);
          __publicField(this, "num_return_sequences", 1);
          __publicField(this, "output_attentions", false);
          __publicField(this, "output_hidden_states", false);
          __publicField(this, "output_scores", false);
          __publicField(this, "return_dict_in_generate", false);
          __publicField(this, "pad_token_id", null);
          __publicField(this, "bos_token_id", null);
          __publicField(this, "eos_token_id", null);
          __publicField(this, "encoder_no_repeat_ngram_size", 0);
          __publicField(this, "decoder_start_token_id", null);
          __publicField(this, "generation_kwargs", {});
          Object.assign(this, (0, s.pick)(d, Object.getOwnPropertyNames(this)));
        }
      }
    },
    "./src/generation/logits_process.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ClassifierFreeGuidanceLogitsProcessor: () => E,
        ForcedBOSTokenLogitsProcessor: () => g,
        ForcedEOSTokenLogitsProcessor: () => _,
        LogitsProcessor: () => f,
        LogitsProcessorList: () => w,
        LogitsWarper: () => d,
        MinLengthLogitsProcessor: () => p,
        MinNewTokensLengthLogitsProcessor: () => M,
        NoBadWordsLogitsProcessor: () => P,
        NoRepeatNGramLogitsProcessor: () => n,
        RepetitionPenaltyLogitsProcessor: () => u,
        SuppressTokensAtBeginLogitsProcessor: () => h,
        TemperatureLogitsWarper: () => k,
        TopKLogitsWarper: () => A,
        TopPLogitsWarper: () => $,
        WhisperTimeStampLogitsProcessor: () => r
      });
      var s = t("./src/utils/generic.js");
      t("./src/utils/tensor.js");
      var l = t("./src/utils/maths.js");
      class f extends s.Callable {
        _call(F, D) {
          throw Error("`_call` should be implemented in a subclass");
        }
      }
      class d extends s.Callable {
        _call(F, D) {
          throw Error("`_call` should be implemented in a subclass");
        }
      }
      class w extends s.Callable {
        constructor() {
          super(), this.processors = [];
        }
        push(F) {
          this.processors.push(F);
        }
        extend(F) {
          this.processors.push(...F);
        }
        _call(F, D) {
          let N = D;
          for (const R of this.processors)
            N = R(F, N);
          return N;
        }
        [Symbol.iterator]() {
          return this.processors.values();
        }
      }
      class g extends f {
        constructor(F) {
          super(), this.bos_token_id = F;
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N)
            if (F[N].length === 1) {
              const R = D[N].data;
              R.fill(-1 / 0), R[this.bos_token_id] = 0;
            }
          return D;
        }
      }
      class _ extends f {
        constructor(F, D) {
          super(), this.max_length = F, this.eos_token_id = Array.isArray(D) ? D : [
            D
          ];
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N)
            if (F[N].length === this.max_length - 1) {
              const R = D[N].data;
              R.fill(-1 / 0);
              for (const j of this.eos_token_id)
                R[j] = 0;
            }
          return D;
        }
      }
      class h extends f {
        constructor(F, D) {
          super(), this.begin_suppress_tokens = F, this.begin_index = D;
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N)
            if (F[N].length === this.begin_index) {
              const R = D[N].data;
              for (const j of this.begin_suppress_tokens)
                R[j] = -1 / 0;
            }
          return D;
        }
      }
      class r extends f {
        constructor(F, D) {
          super(), this.eos_token_id = Array.isArray(F.eos_token_id) ? F.eos_token_id[0] : F.eos_token_id, this.no_timestamps_token_id = F.no_timestamps_token_id, this.timestamp_begin = this.no_timestamps_token_id + 1, this.begin_index = D.length, D.at(-1) === this.no_timestamps_token_id && (this.begin_index -= 1), this.max_initial_timestamp_index = F.max_initial_timestamp_index;
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N) {
            const R = D[N].data;
            if (R[this.no_timestamps_token_id] = -1 / 0, F[N].length === this.begin_index - 1) {
              R.fill(-1 / 0), R[this.timestamp_begin] = 0;
              continue;
            }
            const j = F[N].slice(this.begin_index), Z = j.length >= 1 && j[j.length - 1] >= this.timestamp_begin, te = j.length < 2 || j[j.length - 2] >= this.timestamp_begin;
            if (Z && (te ? R.subarray(this.timestamp_begin).fill(-1 / 0) : R.subarray(0, this.eos_token_id).fill(-1 / 0)), F[N].length === this.begin_index && this.max_initial_timestamp_index !== null) {
              const U = this.timestamp_begin + this.max_initial_timestamp_index;
              R.subarray(U + 1).fill(-1 / 0);
            }
            const J = (0, l.log_softmax)(R), G = Math.log(J.subarray(this.timestamp_begin).map(Math.exp).reduce((U, Q) => U + Q)), H = (0, l.max)(J.subarray(0, this.timestamp_begin))[0];
            G > H && R.subarray(0, this.timestamp_begin).fill(-1 / 0);
          }
          return D;
        }
      }
      class n extends f {
        constructor(F) {
          super(), this.no_repeat_ngram_size = F;
        }
        getNgrams(F) {
          const D = F.length, N = [];
          for (let j = 0; j < D + 1 - this.no_repeat_ngram_size; ++j) {
            const Z = [];
            for (let te = 0; te < this.no_repeat_ngram_size; ++te)
              Z.push(F[j + te]);
            N.push(Z.map(Number));
          }
          const R = /* @__PURE__ */ new Map();
          for (const j of N) {
            const Z = j.slice(0, j.length - 1), te = JSON.stringify(Z), J = R.get(te) ?? [];
            J.push(j[j.length - 1]), R.set(te, J);
          }
          return R;
        }
        getGeneratedNgrams(F, D) {
          const N = D.slice(D.length + 1 - this.no_repeat_ngram_size, D.length);
          return F.get(JSON.stringify(N.map(Number))) ?? [];
        }
        calcBannedNgramTokens(F) {
          const D = [];
          if (F.length + 1 < this.no_repeat_ngram_size)
            return D;
          {
            const N = this.getNgrams(F);
            return this.getGeneratedNgrams(N, F);
          }
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N) {
            const R = D[N].data, j = this.calcBannedNgramTokens(F[N]);
            for (const Z of j)
              R[Z] = -1 / 0;
          }
          return D;
        }
      }
      class u extends f {
        constructor(F) {
          super(), this.penalty = F;
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N) {
            const R = D[N].data;
            for (const j of new Set(F[N])) {
              const Z = Number(j);
              R[Z] < 0 ? R[Z] *= this.penalty : R[Z] /= this.penalty;
            }
          }
          return D;
        }
      }
      class p extends f {
        constructor(F, D) {
          super(), this.min_length = F, this.eos_token_id = Array.isArray(D) ? D : [
            D
          ];
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N)
            if (F[N].length < this.min_length) {
              const R = D[N].data;
              for (const j of this.eos_token_id)
                R[j] = -1 / 0;
            }
          return D;
        }
      }
      class M extends f {
        constructor(F, D, N) {
          super(), this.prompt_length_to_skip = F, this.min_new_tokens = D, this.eos_token_id = Array.isArray(N) ? N : [
            N
          ];
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N)
            if (F[N].length - this.prompt_length_to_skip < this.min_new_tokens) {
              const j = D[N].data;
              for (const Z of this.eos_token_id)
                j[Z] = -1 / 0;
            }
          return D;
        }
      }
      class P extends f {
        constructor(F, D) {
          super(), this.bad_words_ids = F, this.eos_token_id = Array.isArray(D) ? D : [
            D
          ];
        }
        _call(F, D) {
          for (let N = 0; N < F.length; ++N) {
            const R = D[N].data, j = F[N];
            for (const Z of this.bad_words_ids) {
              if (j.length < Z.length - 1)
                continue;
              let te = true;
              for (let J = 1; J <= Z.length - 1; ++J)
                if (Z.at(-J - 1) != j.at(-J)) {
                  te = false;
                  break;
                }
              te && (R[Z.at(-1)] = -1 / 0);
            }
          }
          return D;
        }
      }
      class E extends f {
        constructor(F) {
          if (super(), F <= 1)
            throw new Error(`Require guidance scale >1 to use the classifier free guidance processor, got guidance scale ${F}.`);
          this.guidance_scale = F;
        }
        _call(F, D) {
          if (D.dims[0] !== 2 * F.length)
            throw new Error(`Logits should have twice the batch size of the input ids, the first half of batches corresponding to the conditional inputs, and the second half of batches corresponding to the unconditional inputs. Got batch size ${D.dims[0]} for the logits and ${F.length} for the input ids.`);
          const N = F.length, R = D.slice([
            0,
            N
          ], null), j = D.slice([
            N,
            D.dims[0]
          ], null);
          for (let Z = 0; Z < j.data.length; ++Z)
            j.data[Z] += (R.data[Z] - j.data[Z]) * this.guidance_scale;
          return j;
        }
      }
      class k extends d {
        constructor(F) {
          super(), this.temperature = F;
        }
        _call(F, D) {
          const N = D.data;
          for (let R = 0; R < N.length; ++R)
            N[R] /= this.temperature;
          return D;
        }
      }
      class $ extends d {
        constructor(F, { filter_value: D = -1 / 0, min_tokens_to_keep: N = 1 } = {}) {
          if (super(), F < 0 || F > 1)
            throw new Error(`\`top_p\` must be a float > 0 and < 1, but is ${F}`);
          if (!Number.isInteger(N) || N < 1)
            throw new Error(`\`min_tokens_to_keep\` must be a positive integer, but is ${N}`);
          this.top_p = F, this.filter_value = D, this.min_tokens_to_keep = N;
        }
      }
      class A extends d {
        constructor(F, { filter_value: D = -1 / 0, min_tokens_to_keep: N = 1 } = {}) {
          if (super(), !Number.isInteger(F) || F < 0)
            throw new Error(`\`top_k\` must be a positive integer, but is ${F}`);
          this.top_k = Math.max(F, N), this.filter_value = D;
        }
      }
    },
    "./src/generation/logits_sampler.js": (i, e, t) => {
      t.r(e), t.d(e, {
        LogitsSampler: () => d
      });
      var s = t("./src/utils/generic.js"), l = t("./src/utils/tensor.js"), f = t("./src/utils/maths.js");
      t("./src/generation/configuration_utils.js");
      class d extends s.Callable {
        constructor(r) {
          super(), this.generation_config = r;
        }
        async _call(r) {
          return this.sample(r);
        }
        async sample(r) {
          throw Error("sample should be implemented in subclasses.");
        }
        getLogits(r, n) {
          let u = r.dims.at(-1), p = r.data;
          if (n === -1)
            p = p.slice(-u);
          else {
            let M = n * u;
            p = p.slice(M, M + u);
          }
          return p;
        }
        randomSelect(r) {
          let n = 0;
          for (let p = 0; p < r.length; ++p)
            n += r[p];
          let u = Math.random() * n;
          for (let p = 0; p < r.length; ++p)
            if (u -= r[p], u <= 0)
              return p;
          return 0;
        }
        static getSampler(r) {
          if (r.do_sample)
            return new g(r);
          if (r.num_beams > 1)
            return new _(r);
          if (r.num_return_sequences > 1)
            throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${r.num_return_sequences}.`);
          return new w(r);
        }
      }
      class w extends d {
        async sample(r) {
          const n = (0, f.max)(r.data)[1];
          return [
            [
              BigInt(n),
              0
            ]
          ];
        }
      }
      class g extends d {
        async sample(r) {
          let n = r.dims.at(-1);
          this.generation_config.top_k > 0 && (n = Math.min(this.generation_config.top_k, n));
          const [u, p] = await (0, l.topk)(r, n), M = (0, f.softmax)(u.data);
          return Array.from({
            length: this.generation_config.num_beams
          }, () => {
            const P = this.randomSelect(M);
            return [
              p.data[P],
              Math.log(M[P])
            ];
          });
        }
      }
      class _ extends d {
        async sample(r) {
          let n = r.dims.at(-1);
          this.generation_config.top_k > 0 && (n = Math.min(this.generation_config.top_k, n));
          const [u, p] = await (0, l.topk)(r, n), M = (0, f.softmax)(u.data);
          return Array.from({
            length: this.generation_config.num_beams
          }, (P, E) => [
            p.data[E],
            Math.log(M[E])
          ]);
        }
      }
    },
    "./src/generation/stopping_criteria.js": (i, e, t) => {
      t.r(e), t.d(e, {
        EosTokenCriteria: () => w,
        InterruptableStoppingCriteria: () => g,
        MaxLengthCriteria: () => d,
        StoppingCriteria: () => l,
        StoppingCriteriaList: () => f
      });
      var s = t("./src/utils/generic.js");
      class l extends s.Callable {
        _call(h, r) {
          throw Error("StoppingCriteria needs to be subclassed");
        }
      }
      class f extends s.Callable {
        constructor() {
          super(), this.criteria = [];
        }
        push(h) {
          this.criteria.push(h);
        }
        extend(h) {
          h instanceof f ? h = h.criteria : h instanceof l && (h = [
            h
          ]), this.criteria.push(...h);
        }
        _call(h, r) {
          const n = new Array(h.length).fill(false);
          for (const u of this.criteria) {
            const p = u(h, r);
            for (let M = 0; M < n.length; ++M)
              n[M] || (n[M] = p[M]);
          }
          return n;
        }
        [Symbol.iterator]() {
          return this.criteria.values();
        }
      }
      class d extends l {
        constructor(h, r = null) {
          super(), this.max_length = h, this.max_position_embeddings = r;
        }
        _call(h) {
          return h.map((r) => r.length >= this.max_length);
        }
      }
      class w extends l {
        constructor(h) {
          super(), Array.isArray(h) || (h = [
            h
          ]), this.eos_token_id = h;
        }
        _call(h, r) {
          return h.map((n) => {
            const u = n.at(-1);
            return this.eos_token_id.some((p) => u == p);
          });
        }
      }
      class g extends l {
        constructor() {
          super(), this.interrupted = false;
        }
        interrupt() {
          this.interrupted = true;
        }
        reset() {
          this.interrupted = false;
        }
        _call(h, r) {
          return new Array(h.length).fill(this.interrupted);
        }
      }
    },
    "./src/generation/streamers.js": (i, e, t) => {
      t.r(e), t.d(e, {
        BaseStreamer: () => d,
        TextStreamer: () => g,
        WhisperTextStreamer: () => _
      });
      var s = t("./src/utils/core.js"), l = t("./src/tokenizers.js"), f = t("./src/env.js");
      class d {
        put(r) {
          throw Error("Not implemented");
        }
        end() {
          throw Error("Not implemented");
        }
      }
      const w = f.apis.IS_PROCESS_AVAILABLE ? (h) => process.stdout.write(h) : (h) => console.log(h);
      class g extends d {
        constructor(r, { skip_prompt: n = false, callback_function: u = null, token_callback_function: p = null, skip_special_tokens: M = true, decode_kwargs: P = {}, ...E } = {}) {
          super(), this.tokenizer = r, this.skip_prompt = n, this.callback_function = u ?? w, this.token_callback_function = p, this.decode_kwargs = {
            skip_special_tokens: M,
            ...P,
            ...E
          }, this.token_cache = [], this.print_len = 0, this.next_tokens_are_prompt = true;
        }
        put(r) {
          if (r.length > 1)
            throw Error("TextStreamer only supports batch size of 1");
          const n = this.next_tokens_are_prompt;
          if (n && (this.next_tokens_are_prompt = false, this.skip_prompt))
            return;
          const u = r[0];
          this.token_callback_function?.(u), this.token_cache = (0, s.mergeArrays)(this.token_cache, u);
          const p = this.tokenizer.decode(this.token_cache, this.decode_kwargs);
          let M;
          n || p.endsWith(`
`) ? (M = p.slice(this.print_len), this.token_cache = [], this.print_len = 0) : p.length > 0 && (0, l.is_chinese_char)(p.charCodeAt(p.length - 1)) ? (M = p.slice(this.print_len), this.print_len += M.length) : (M = p.slice(this.print_len, p.lastIndexOf(" ") + 1), this.print_len += M.length), this.on_finalized_text(M, false);
        }
        end() {
          let r;
          this.token_cache.length > 0 ? (r = this.tokenizer.decode(this.token_cache, this.decode_kwargs).slice(this.print_len), this.token_cache = [], this.print_len = 0) : r = "", this.next_tokens_are_prompt = true, this.on_finalized_text(r, true);
        }
        on_finalized_text(r, n) {
          r.length > 0 && this.callback_function?.(r), n && this.callback_function === w && f.apis.IS_PROCESS_AVAILABLE && this.callback_function?.(`
`);
        }
      }
      class _ extends g {
        constructor(r, { skip_prompt: n = false, callback_function: u = null, token_callback_function: p = null, on_chunk_start: M = null, on_chunk_end: P = null, on_finalize: E = null, time_precision: k = 0.02, skip_special_tokens: $ = true, decode_kwargs: A = {} } = {}) {
          super(r, {
            skip_prompt: n,
            skip_special_tokens: $,
            callback_function: u,
            token_callback_function: p,
            decode_kwargs: A
          }), this.timestamp_begin = r.timestamp_begin, this.on_chunk_start = M, this.on_chunk_end = P, this.on_finalize = E, this.time_precision = k, this.waiting_for_timestamp = false;
        }
        put(r) {
          if (r.length > 1)
            throw Error("WhisperTextStreamer only supports batch size of 1");
          const n = r[0];
          if (n.length === 1) {
            const u = Number(n[0]) - this.timestamp_begin;
            if (u >= 0) {
              const p = u * this.time_precision;
              this.waiting_for_timestamp ? this.on_chunk_end?.(p) : this.on_chunk_start?.(p), this.waiting_for_timestamp = !this.waiting_for_timestamp, this.token_callback_function?.(n);
              return;
            }
          }
          return super.put(r);
        }
        end() {
          super.end(), this.on_finalize?.();
        }
      }
    },
    "./src/models.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ASTForAudioClassification: () => Hi,
        ASTModel: () => qi,
        ASTPreTrainedModel: () => fs,
        AlbertForMaskedLM: () => Tt,
        AlbertForQuestionAnswering: () => It,
        AlbertForSequenceClassification: () => ut,
        AlbertModel: () => dt,
        AlbertPreTrainedModel: () => at,
        ArceeForCausalLM: () => Ia,
        ArceeModel: () => Ca,
        ArceePreTrainedModel: () => po,
        AutoModel: () => Ri,
        AutoModelForAudioClassification: () => ip,
        AutoModelForAudioFrameClassification: () => lp,
        AutoModelForAudioTextToText: () => vp,
        AutoModelForCTC: () => op,
        AutoModelForCausalLM: () => sp,
        AutoModelForDepthEstimation: () => pp,
        AutoModelForDocumentQuestionAnswering: () => cp,
        AutoModelForImageClassification: () => Ws,
        AutoModelForImageFeatureExtraction: () => fp,
        AutoModelForImageMatting: () => up,
        AutoModelForImageSegmentation: () => qs,
        AutoModelForImageTextToText: () => _p,
        AutoModelForImageToImage: () => dp,
        AutoModelForMaskGeneration: () => Kr,
        AutoModelForMaskedLM: () => Br,
        AutoModelForNormalEstimation: () => hp,
        AutoModelForObjectDetection: () => Bi,
        AutoModelForPoseEstimation: () => ld,
        AutoModelForQuestionAnswering: () => wr,
        AutoModelForSemanticSegmentation: () => zi,
        AutoModelForSeq2SeqLM: () => nd,
        AutoModelForSequenceClassification: () => ed,
        AutoModelForSpeechSeq2Seq: () => rd,
        AutoModelForTextToSpectrogram: () => sd,
        AutoModelForTextToWaveform: () => od,
        AutoModelForTokenClassification: () => td,
        AutoModelForUniversalSegmentation: () => ad,
        AutoModelForVision2Seq: () => hs,
        AutoModelForXVector: () => ap,
        AutoModelForZeroShotObjectDetection: () => Hr,
        BartForConditionalGeneration: () => In,
        BartForSequenceClassification: () => Y,
        BartModel: () => pr,
        BartPretrainedModel: () => jn,
        BaseModelOutput: () => Be,
        BeitForImageClassification: () => kl,
        BeitModel: () => Sl,
        BeitPreTrainedModel: () => Ms,
        BertForMaskedLM: () => je,
        BertForQuestionAnswering: () => lt,
        BertForSequenceClassification: () => it,
        BertForTokenClassification: () => Ge,
        BertModel: () => rt,
        BertPreTrainedModel: () => Ze,
        BlenderbotForConditionalGeneration: () => Xt,
        BlenderbotModel: () => Nt,
        BlenderbotPreTrainedModel: () => gt,
        BlenderbotSmallForConditionalGeneration: () => Vn,
        BlenderbotSmallModel: () => Qt,
        BlenderbotSmallPreTrainedModel: () => Pt,
        BloomForCausalLM: () => pl,
        BloomModel: () => dl,
        BloomPreTrainedModel: () => Fo,
        CLIPModel: () => ia,
        CLIPPreTrainedModel: () => $r,
        CLIPSegForImageSegmentation: () => _a,
        CLIPSegModel: () => fa,
        CLIPSegPreTrainedModel: () => so,
        CLIPTextModel: () => dd,
        CLIPTextModelWithProjection: () => pd,
        CLIPVisionModel: () => Tr,
        CLIPVisionModelWithProjection: () => aa,
        CamembertForMaskedLM: () => Bt,
        CamembertForQuestionAnswering: () => ie,
        CamembertForSequenceClassification: () => Et,
        CamembertForTokenClassification: () => jt,
        CamembertModel: () => Ft,
        CamembertPreTrainedModel: () => He,
        CausalLMOutput: () => Yr,
        CausalLMOutputWithPast: () => Tp,
        ChineseCLIPModel: () => ua,
        ChineseCLIPPreTrainedModel: () => ca,
        ClapAudioModelWithProjection: () => yi,
        ClapModel: () => Rd,
        ClapPreTrainedModel: () => Fs,
        ClapTextModelWithProjection: () => cs,
        CodeGenForCausalLM: () => Sa,
        CodeGenModel: () => Pa,
        CodeGenPreTrainedModel: () => Zr,
        CohereForCausalLM: () => Ya,
        CohereModel: () => Ka,
        CoherePreTrainedModel: () => vo,
        ConvBertForMaskedLM: () => tn,
        ConvBertForQuestionAnswering: () => sr,
        ConvBertForSequenceClassification: () => ar,
        ConvBertForTokenClassification: () => on,
        ConvBertModel: () => wt,
        ConvBertPreTrainedModel: () => Jt,
        ConvNextForImageClassification: () => Cd,
        ConvNextModel: () => ic,
        ConvNextPreTrainedModel: () => li,
        ConvNextV2ForImageClassification: () => lc,
        ConvNextV2Model: () => ac,
        ConvNextV2PreTrainedModel: () => ci,
        DFineForObjectDetection: () => Xo,
        DFineModel: () => Rl,
        DFinePreTrainedModel: () => Yo,
        DINOv3ConvNextModel: () => fc,
        DINOv3ConvNextPreTrainedModel: () => hc,
        DINOv3ViTModel: () => pc,
        DINOv3ViTPreTrainedModel: () => Od,
        DPTForDepthEstimation: () => Kl,
        DPTModel: () => Hl,
        DPTPreTrainedModel: () => ri,
        DacDecoderModel: () => Lu,
        DacDecoderOutput: () => Fu,
        DacEncoderModel: () => qd,
        DacEncoderOutput: () => $u,
        DacModel: () => Du,
        DacPreTrainedModel: () => ki,
        DebertaForMaskedLM: () => Re,
        DebertaForQuestionAnswering: () => _t,
        DebertaForSequenceClassification: () => Ve,
        DebertaForTokenClassification: () => Qe,
        DebertaModel: () => Ie,
        DebertaPreTrainedModel: () => xe,
        DebertaV2ForMaskedLM: () => dn,
        DebertaV2ForQuestionAnswering: () => Sn,
        DebertaV2ForSequenceClassification: () => bn,
        DebertaV2ForTokenClassification: () => Pn,
        DebertaV2Model: () => Lt,
        DebertaV2PreTrainedModel: () => Gt,
        DecisionTransformerModel: () => Wd,
        DecisionTransformerPreTrainedModel: () => gu,
        DeiTForImageClassification: () => jl,
        DeiTModel: () => Td,
        DeiTPreTrainedModel: () => Zo,
        DepthAnythingForDepthEstimation: () => Yl,
        DepthAnythingPreTrainedModel: () => si,
        DepthProForDepthEstimation: () => Jl,
        DepthProPreTrainedModel: () => oi,
        DetrForObjectDetection: () => Al,
        DetrForSegmentation: () => Ho,
        DetrModel: () => xd,
        DetrObjectDetectionOutput: () => Cl,
        DetrPreTrainedModel: () => Es,
        DetrSegmentationOutput: () => Il,
        Dinov2ForImageClassification: () => cc,
        Dinov2Model: () => Id,
        Dinov2PreTrainedModel: () => ui,
        Dinov2WithRegistersForImageClassification: () => dc,
        Dinov2WithRegistersModel: () => uc,
        Dinov2WithRegistersPreTrainedModel: () => di,
        DistilBertForMaskedLM: () => Kt,
        DistilBertForQuestionAnswering: () => Xn,
        DistilBertForSequenceClassification: () => Tn,
        DistilBertForTokenClassification: () => Ln,
        DistilBertModel: () => cn,
        DistilBertPreTrainedModel: () => et,
        DonutSwinModel: () => oc,
        DonutSwinPreTrainedModel: () => Ad,
        EfficientNetForImageClassification: () => lu,
        EfficientNetModel: () => au,
        EfficientNetPreTrainedModel: () => Ns,
        ElectraForMaskedLM: () => de,
        ElectraForQuestionAnswering: () => Ue,
        ElectraForSequenceClassification: () => ye,
        ElectraForTokenClassification: () => ke,
        ElectraModel: () => ve,
        ElectraPreTrainedModel: () => W,
        Ernie4_5_ForCausalLM: () => Zc,
        Ernie4_5_Model: () => Jc,
        Ernie4_5_PretrainedModel: () => Qc,
        EsmForMaskedLM: () => Nn,
        EsmForSequenceClassification: () => Kn,
        EsmForTokenClassification: () => bt,
        EsmModel: () => fr,
        EsmPreTrainedModel: () => tr,
        ExaoneForCausalLM: () => Ra,
        ExaoneModel: () => Na,
        ExaonePreTrainedModel: () => go,
        FalconForCausalLM: () => ru,
        FalconModel: () => nu,
        FalconPreTrainedModel: () => wi,
        FastViTForImageClassification: () => vl,
        FastViTModel: () => xl,
        FastViTPreTrainedModel: () => vs,
        Florence2ForConditionalGeneration: () => ea,
        Florence2PreTrainedModel: () => Zi,
        GLPNForDepthEstimation: () => sc,
        GLPNModel: () => rc,
        GLPNPreTrainedModel: () => ai,
        GPT2LMHeadModel: () => ga,
        GPT2Model: () => ma,
        GPT2PreTrainedModel: () => hr,
        GPTBigCodeForCausalLM: () => Ea,
        GPTBigCodeModel: () => hd,
        GPTBigCodePreTrainedModel: () => ws,
        GPTJForCausalLM: () => Ma,
        GPTJModel: () => Ta,
        GPTJPreTrainedModel: () => bs,
        GPTNeoForCausalLM: () => xa,
        GPTNeoModel: () => ya,
        GPTNeoPreTrainedModel: () => io,
        GPTNeoXForCausalLM: () => lo,
        GPTNeoXModel: () => va,
        GPTNeoXPreTrainedModel: () => ao,
        Gemma2ForCausalLM: () => Za,
        Gemma2Model: () => Ja,
        Gemma2PreTrainedModel: () => Mo,
        Gemma3ForCausalLM: () => Ao,
        Gemma3Model: () => ko,
        Gemma3PreTrainedModel: () => So,
        Gemma3nForConditionalGeneration: () => eo,
        Gemma3nPreTrainedModel: () => ra,
        GemmaForCausalLM: () => Qa,
        GemmaModel: () => Xa,
        GemmaPreTrainedModel: () => To,
        GlmForCausalLM: () => La,
        GlmModel: () => Da,
        GlmPreTrainedModel: () => mo,
        GraniteForCausalLM: () => Wa,
        GraniteModel: () => Ga,
        GraniteMoeHybridForCausalLM: () => Ha,
        GraniteMoeHybridModel: () => qa,
        GraniteMoeHybridPreTrainedModel: () => xo,
        GranitePreTrainedModel: () => ns,
        GroundingDinoForObjectDetection: () => $d,
        GroundingDinoPreTrainedModel: () => _c,
        GroupViTModel: () => Bo,
        GroupViTPreTrainedModel: () => rs,
        HeliumForCausalLM: () => Fa,
        HeliumModel: () => En,
        HeliumPreTrainedModel: () => _o,
        HieraForImageClassification: () => Md,
        HieraModel: () => Vl,
        HieraPreTrainedModel: () => ei,
        HubertForCTC: () => Rc,
        HubertForSequenceClassification: () => zc,
        HubertModel: () => _i,
        HubertPreTrainedModel: () => Dd,
        IJepaForImageClassification: () => bd,
        IJepaModel: () => bl,
        IJepaPreTrainedModel: () => Ro,
        Idefics3ForConditionalGeneration: () => ms,
        Idefics3PreTrainedModel: () => sa,
        ImageMattingOutput: () => o,
        JAISLMHeadModel: () => wa,
        JAISModel: () => ba,
        JAISPreTrainedModel: () => oo,
        JinaCLIPModel: () => da,
        JinaCLIPPreTrainedModel: () => gs,
        JinaCLIPTextModel: () => pa,
        JinaCLIPVisionModel: () => ha,
        Lfm2ForCausalLM: () => Oa,
        Lfm2Model: () => fd,
        Lfm2PreTrainedModel: () => ho,
        LiteWhisperForConditionalGeneration: () => Yi,
        Llama4ForCausalLM: () => uo,
        Llama4PreTrainedModel: () => Aa,
        LlamaForCausalLM: () => ka,
        LlamaModel: () => es,
        LlamaPreTrainedModel: () => co,
        LlavaForConditionalGeneration: () => _s,
        LlavaOnevisionForConditionalGeneration: () => Qi,
        LlavaPreTrainedModel: () => Zs,
        LlavaQwen2ForCausalLM: () => _r,
        LongT5ForConditionalGeneration: () => Bn,
        LongT5Model: () => Fn,
        LongT5PreTrainedModel: () => Rn,
        M2M100ForConditionalGeneration: () => vc,
        M2M100Model: () => xc,
        M2M100PreTrainedModel: () => fi,
        MBartForCausalLM: () => tt,
        MBartForConditionalGeneration: () => Ae,
        MBartForSequenceClassification: () => Ne,
        MBartModel: () => me,
        MBartPreTrainedModel: () => ae,
        MPNetForMaskedLM: () => Xe,
        MPNetForQuestionAnswering: () => Fe,
        MPNetForSequenceClassification: () => yr,
        MPNetForTokenClassification: () => Ir,
        MPNetModel: () => dr,
        MPNetPreTrainedModel: () => or,
        MT5ForConditionalGeneration: () => Mr,
        MT5Model: () => lr,
        MT5PreTrainedModel: () => zn,
        MarianMTModel: () => yc,
        MarianModel: () => wc,
        MarianPreTrainedModel: () => hi,
        MaskFormerForInstanceSegmentation: () => nc,
        MaskFormerModel: () => kd,
        MaskFormerPreTrainedModel: () => ii,
        MaskedLMOutput: () => Jn,
        Metric3DForDepthEstimation: () => ec,
        Metric3DPreTrainedModel: () => Zl,
        Metric3Dv2ForDepthEstimation: () => tc,
        Metric3Dv2PreTrainedModel: () => Sd,
        MgpstrForSceneTextRecognition: () => xu,
        MgpstrModelOutput: () => yu,
        MgpstrPreTrainedModel: () => Ei,
        MimiDecoderModel: () => Ou,
        MimiDecoderOutput: () => Au,
        MimiEncoderModel: () => Iu,
        MimiEncoderOutput: () => ku,
        MimiModel: () => Cu,
        MimiPreTrainedModel: () => Us,
        MistralForCausalLM: () => Xc,
        MistralModel: () => Yc,
        MistralPreTrainedModel: () => gi,
        MobileBertForMaskedLM: () => On,
        MobileBertForQuestionAnswering: () => Gn,
        MobileBertForSequenceClassification: () => mn,
        MobileBertModel: () => Vt,
        MobileBertPreTrainedModel: () => yt,
        MobileLLMForCausalLM: () => Ba,
        MobileLLMModel: () => za,
        MobileLLMPreTrainedModel: () => bo,
        MobileNetV1ForImageClassification: () => cu,
        MobileNetV1ForSemanticSegmentation: () => uu,
        MobileNetV1Model: () => Vd,
        MobileNetV1PreTrainedModel: () => zs,
        MobileNetV2ForImageClassification: () => Ud,
        MobileNetV2ForSemanticSegmentation: () => pu,
        MobileNetV2Model: () => du,
        MobileNetV2PreTrainedModel: () => Bs,
        MobileNetV3ForImageClassification: () => Gd,
        MobileNetV3ForSemanticSegmentation: () => fu,
        MobileNetV3Model: () => hu,
        MobileNetV3PreTrainedModel: () => js,
        MobileNetV4ForImageClassification: () => _u,
        MobileNetV4ForSemanticSegmentation: () => mu,
        MobileNetV4Model: () => Mi,
        MobileNetV4PreTrainedModel: () => ds,
        MobileViTForImageClassification: () => Tl,
        MobileViTModel: () => Go,
        MobileViTPreTrainedModel: () => Uo,
        MobileViTV2ForImageClassification: () => Ml,
        MobileViTV2Model: () => Wo,
        MobileViTV2PreTrainedModel: () => ss,
        ModelOutput: () => De,
        ModernBertDecoderForCausalLM: () => qt,
        ModernBertDecoderModel: () => en,
        ModernBertDecoderPreTrainedModel: () => Zt,
        ModernBertForMaskedLM: () => St,
        ModernBertForSequenceClassification: () => zt,
        ModernBertForTokenClassification: () => _n,
        ModernBertModel: () => Ct,
        ModernBertPreTrainedModel: () => Ot,
        Moondream1ForConditionalGeneration: () => Ji,
        MoonshineForConditionalGeneration: () => Xi,
        MoonshineModel: () => Or,
        MoonshinePreTrainedModel: () => Qs,
        MptForCausalLM: () => fl,
        MptModel: () => hl,
        MptPreTrainedModel: () => Do,
        MultiModalityCausalLM: () => wu,
        MultiModalityPreTrainedModel: () => bu,
        MusicgenForCausalLM: () => jd,
        MusicgenForConditionalGeneration: () => Ti,
        MusicgenModel: () => Bd,
        MusicgenPreTrainedModel: () => Rs,
        NeoBertForMaskedLM: () => Je,
        NeoBertForQuestionAnswering: () => At,
        NeoBertForSequenceClassification: () => Rt,
        NeoBertForTokenClassification: () => pt,
        NeoBertModel: () => mt,
        NeoBertPreTrainedModel: () => ht,
        NomicBertModel: () => Hn,
        NomicBertPreTrainedModel: () => Cn,
        OPTForCausalLM: () => _l,
        OPTModel: () => gd,
        OPTPreTrainedModel: () => Lo,
        Olmo2ForCausalLM: () => Ua,
        Olmo2Model: () => ts,
        Olmo2PreTrainedModel: () => yo,
        OlmoForCausalLM: () => Va,
        OlmoModel: () => ja,
        OlmoPreTrainedModel: () => wo,
        OpenELMForCausalLM: () => nl,
        OpenELMModel: () => tl,
        OpenELMPreTrainedModel: () => Co,
        OwlViTForObjectDetection: () => El,
        OwlViTModel: () => yd,
        OwlViTPreTrainedModel: () => qo,
        Owlv2ForObjectDetection: () => Pl,
        Owlv2Model: () => os,
        Owlv2PreTrainedModel: () => Ts,
        PaliGemmaForConditionalGeneration: () => na,
        PaliGemmaPreTrainedModel: () => ta,
        PatchTSMixerForPrediction: () => Eu,
        PatchTSMixerModel: () => Mu,
        PatchTSMixerPreTrainedModel: () => Si,
        PatchTSTForPrediction: () => Tu,
        PatchTSTModel: () => vu,
        PatchTSTPreTrainedModel: () => Pi,
        Phi3ForCausalLM: () => ul,
        Phi3Model: () => cl,
        Phi3PreTrainedModel: () => $o,
        Phi3VForCausalLM: () => no,
        Phi3VPreTrainedModel: () => oa,
        PhiForCausalLM: () => gr,
        PhiModel: () => ll,
        PhiPreTrainedModel: () => Oo,
        PreTrainedModel: () => le,
        PretrainedMixin: () => An,
        PvtForImageClassification: () => Lr,
        PvtModel: () => zo,
        PvtPreTrainedModel: () => Sr,
        PyAnnoteForAudioFrameClassification: () => as,
        PyAnnoteModel: () => Ec,
        PyAnnotePreTrainedModel: () => Is,
        QuestionAnsweringModelOutput: () => Zn,
        Qwen2ForCausalLM: () => sl,
        Qwen2Model: () => rl,
        Qwen2PreTrainedModel: () => Io,
        Qwen2VLForConditionalGeneration: () => md,
        Qwen2VLPreTrainedModel: () => al,
        Qwen3ForCausalLM: () => il,
        Qwen3Model: () => ol,
        Qwen3PreTrainedModel: () => ys,
        RFDetrForObjectDetection: () => vd,
        RFDetrModel: () => Ll,
        RFDetrObjectDetectionOutput: () => Nl,
        RFDetrPreTrainedModel: () => Dl,
        RTDetrForObjectDetection: () => Ps,
        RTDetrModel: () => Ol,
        RTDetrObjectDetectionOutput: () => Ur,
        RTDetrPreTrainedModel: () => is,
        RTDetrV2ForObjectDetection: () => Fl,
        RTDetrV2Model: () => $l,
        RTDetrV2ObjectDetectionOutput: () => Ko,
        RTDetrV2PreTrainedModel: () => Ss,
        ResNetForImageClassification: () => Gl,
        ResNetModel: () => Ul,
        ResNetPreTrainedModel: () => ti,
        RoFormerForMaskedLM: () => ln,
        RoFormerForQuestionAnswering: () => rr,
        RoFormerForSequenceClassification: () => nr,
        RoFormerForTokenClassification: () => ur,
        RoFormerModel: () => kn,
        RoFormerPreTrainedModel: () => Un,
        RobertaForMaskedLM: () => sn,
        RobertaForQuestionAnswering: () => xr,
        RobertaForSequenceClassification: () => kt,
        RobertaForTokenClassification: () => Mn,
        RobertaModel: () => Ke,
        RobertaPreTrainedModel: () => Dn,
        SamImageSegmentationOutput: () => bc,
        SamModel: () => gc,
        SamPreTrainedModel: () => mc,
        SapiensForDepthEstimation: () => Pd,
        SapiensForNormalEstimation: () => Ql,
        SapiensForSemanticSegmentation: () => Xl,
        SapiensPreTrainedModel: () => Cs,
        SegformerForImageClassification: () => su,
        SegformerForSemanticSegmentation: () => vi,
        SegformerModel: () => zd,
        SegformerPreTrainedModel: () => us,
        Seq2SeqLMOutput: () => mp,
        SequenceClassifierOutput: () => un,
        SiglipModel: () => ro,
        SiglipPreTrainedModel: () => Jr,
        SiglipTextModel: () => mr,
        SiglipVisionModel: () => la,
        SmolLM3ForCausalLM: () => _d,
        SmolLM3Model: () => $a,
        SmolLM3PreTrainedModel: () => fo,
        SmolVLMForConditionalGeneration: () => to,
        SnacDecoderModel: () => Ru,
        SnacEncoderModel: () => Ai,
        SnacModel: () => Nu,
        SnacPreTrainedModel: () => zr,
        SpeechT5ForSpeechToText: () => Wc,
        SpeechT5ForTextToSpeech: () => qc,
        SpeechT5HifiGan: () => Nd,
        SpeechT5Model: () => wp,
        SpeechT5PreTrainedModel: () => $s,
        SqueezeBertForMaskedLM: () => Pe,
        SqueezeBertForQuestionAnswering: () => $e,
        SqueezeBertForSequenceClassification: () => Ce,
        SqueezeBertModel: () => ce,
        SqueezeBertPreTrainedModel: () => K,
        StableLmForCausalLM: () => iu,
        StableLmModel: () => ou,
        StableLmPreTrainedModel: () => Ls,
        Starcoder2ForCausalLM: () => tu,
        Starcoder2Model: () => eu,
        Starcoder2PreTrainedModel: () => bi,
        StyleTextToSpeech2Model: () => Gc,
        StyleTextToSpeech2PreTrainedModel: () => Uc,
        Swin2SRForImageSuperResolution: () => ql,
        Swin2SRModel: () => ni,
        Swin2SRPreTrainedModel: () => Gr,
        SwinForImageClassification: () => Ed,
        SwinForSemanticSegmentation: () => As,
        SwinModel: () => Wl,
        SwinPreTrainedModel: () => ks,
        T5ForConditionalGeneration: () => $n,
        T5Model: () => pn,
        T5PreTrainedModel: () => gn,
        TableTransformerForObjectDetection: () => Jo,
        TableTransformerModel: () => zl,
        TableTransformerObjectDetectionOutput: () => Bl,
        TableTransformerPreTrainedModel: () => Qo,
        TokenClassifierOutput: () => Wn,
        TrOCRForCausalLM: () => Kc,
        TrOCRPreTrainedModel: () => Hc,
        UltravoxModel: () => Vs,
        UltravoxPreTrainedModel: () => Pu,
        UniSpeechForCTC: () => Ac,
        UniSpeechForSequenceClassification: () => Cc,
        UniSpeechModel: () => kc,
        UniSpeechPreTrainedModel: () => Os,
        UniSpeechSatForAudioFrameClassification: () => Fc,
        UniSpeechSatForCTC: () => Oc,
        UniSpeechSatForSequenceClassification: () => $c,
        UniSpeechSatModel: () => Ic,
        UniSpeechSatPreTrainedModel: () => Wr,
        VaultGemmaForCausalLM: () => Po,
        VaultGemmaModel: () => el,
        VaultGemmaPreTrainedModel: () => Eo,
        ViTForImageClassification: () => gl,
        ViTMAEModel: () => wl,
        ViTMAEPreTrainedModel: () => Qn,
        ViTMSNForImageClassification: () => wd,
        ViTMSNModel: () => yl,
        ViTMSNPreTrainedModel: () => xs,
        ViTModel: () => ml,
        ViTPreTrainedModel: () => No,
        VisionEncoderDecoderModel: () => Js,
        VitMatteForImageMatting: () => Vo,
        VitMattePreTrainedModel: () => jo,
        VitPoseForPoseEstimation: () => Dr,
        VitPosePreTrainedModel: () => Fr,
        VitsModel: () => Ds,
        VitsModelOutput: () => v,
        VitsPreTrainedModel: () => xi,
        VoxtralForConditionalGeneration: () => Su,
        Wav2Vec2BertForCTC: () => Lc,
        Wav2Vec2BertForSequenceClassification: () => Nc,
        Wav2Vec2BertModel: () => Dc,
        Wav2Vec2BertPreTrainedModel: () => qr,
        Wav2Vec2ForAudioFrameClassification: () => Mc,
        Wav2Vec2ForCTC: () => ir,
        Wav2Vec2ForSequenceClassification: () => Tc,
        Wav2Vec2Model: () => Fd,
        Wav2Vec2PreTrainedModel: () => kr,
        WavLMForAudioFrameClassification: () => Ld,
        WavLMForCTC: () => Bc,
        WavLMForSequenceClassification: () => jc,
        WavLMForXVector: () => Vc,
        WavLMModel: () => mi,
        WavLMPreTrainedModel: () => ls,
        WeSpeakerResNetModel: () => Sc,
        WeSpeakerResNetPreTrainedModel: () => Pc,
        WhisperForConditionalGeneration: () => cr,
        WhisperModel: () => Ki,
        WhisperPreTrainedModel: () => Xs,
        XLMForQuestionAnswering: () => Wt,
        XLMForSequenceClassification: () => Qr,
        XLMForTokenClassification: () => ct,
        XLMModel: () => Pr,
        XLMPreTrainedModel: () => vr,
        XLMRobertaForMaskedLM: () => Ui,
        XLMRobertaForQuestionAnswering: () => Wi,
        XLMRobertaForSequenceClassification: () => Gi,
        XLMRobertaForTokenClassification: () => fn,
        XLMRobertaModel: () => Ys,
        XLMRobertaPreTrainedModel: () => Vr,
        XLMWithLMHeadModel: () => Ht,
        XVectorOutput: () => ji,
        YolosForObjectDetection: () => Nr,
        YolosModel: () => Er,
        YolosObjectDetectionOutput: () => Rr,
        YolosPreTrainedModel: () => br
      });
      var s = t("./src/configs.js"), l = t("./src/backends/onnx.js"), f = t("./src/utils/dtypes.js"), d = t("./src/utils/generic.js"), w = t("./src/utils/core.js"), g = t("./src/utils/hub.js"), _ = t("./src/utils/constants.js"), h = t("./src/generation/logits_process.js"), r = t("./src/generation/configuration_utils.js"), n = t("./src/utils/tensor.js"), u = t("./src/utils/image.js"), p = t("./src/utils/maths.js"), M = t("./src/generation/stopping_criteria.js"), P = t("./src/generation/logits_sampler.js"), E = t("./src/env.js"), k = t("./src/models/whisper/generation_whisper.js"), $ = t("./src/models/whisper/common_whisper.js");
      const A = {
        EncoderOnly: 0,
        EncoderDecoder: 1,
        Seq2Seq: 2,
        Vision2Seq: 3,
        DecoderOnly: 4,
        MaskGeneration: 5,
        ImageTextToText: 6,
        Musicgen: 7,
        MultiModality: 8,
        Phi3V: 9,
        AudioTextToText: 10,
        AutoEncoder: 11,
        ImageAudioTextToText: 12
      }, C = /* @__PURE__ */ new Map(), F = /* @__PURE__ */ new Map(), D = /* @__PURE__ */ new Map();
      async function N(b, T, S) {
        let I = S.config?.["transformers.js_config"] ?? {}, O = S.device ?? I.device;
        O && typeof O != "string" && (O.hasOwnProperty(T) ? O = O[T] : (console.warn(`device not specified for "${T}". Using the default device.`), O = null));
        const L = O ?? (E.apis.IS_NODE_ENV ? "cpu" : "wasm"), z = (0, l.deviceToExecutionProviders)(L), B = I.device_config ?? {};
        B.hasOwnProperty(L) && (I = {
          ...I,
          ...B[L]
        });
        let V = S.dtype ?? I.dtype;
        if (typeof V != "string" && (V && V.hasOwnProperty(T) ? V = V[T] : (V = f.DEFAULT_DEVICE_DTYPE_MAPPING[L] ?? f.DATA_TYPES.fp32, console.warn(`dtype not specified for "${T}". Using the default dtype (${V}) for this device (${L}).`))), V === f.DATA_TYPES.auto) {
          let st = I.dtype;
          typeof st != "string" && (st = st?.[T]), st && st !== f.DATA_TYPES.auto && f.DATA_TYPES.hasOwnProperty(st) ? V = st : V = f.DEFAULT_DEVICE_DTYPE_MAPPING[L] ?? f.DATA_TYPES.fp32;
        }
        const q = V;
        if (f.DEFAULT_DTYPE_SUFFIX_MAPPING.hasOwnProperty(q)) {
          if (q === f.DATA_TYPES.fp16 && L === "webgpu" && !await (0, f.isWebGpuFp16Supported)())
            throw new Error(`The device (${L}) does not support fp16.`);
        } else
          throw new Error(`Invalid dtype: ${q}. Should be one of: ${Object.keys(f.DATA_TYPES).join(", ")}`);
        const X = I.kv_cache_dtype, ee = X ? typeof X == "string" ? X : X[q] ?? "float32" : void 0;
        if (ee && ![
          "float32",
          "float16"
        ].includes(ee))
          throw new Error(`Invalid kv_cache_dtype: ${ee}. Should be one of: float32, float16`);
        const ne = {
          dtype: q,
          kv_cache_dtype: ee,
          device: L
        }, se = f.DEFAULT_DTYPE_SUFFIX_MAPPING[q], ge = `${T}${se}.onnx`, ue = `${S.subfolder ?? ""}/${ge}`, re = {
          ...S.session_options
        };
        re.executionProviders ?? (re.executionProviders = z);
        const Te = I.free_dimension_overrides;
        Te ? re.freeDimensionOverrides ?? (re.freeDimensionOverrides = Te) : L.startsWith("webnn") && !re.freeDimensionOverrides && console.warn(`WebNN does not currently support dynamic shapes and requires 'free_dimension_overrides' to be set in config.json, preferably as a field within config["transformers.js_config"]["device_config"]["${L}"]. When 'free_dimension_overrides' is not set, you may experience significant performance degradation.`);
        const we = E.apis.IS_NODE_ENV && E.env.useFSCache, Se = (0, g.getModelFile)(b, ue, true, S, we), ze = S.use_external_data_format ?? I.use_external_data_format;
        let Le = [];
        if (ze) {
          let st;
          typeof ze == "object" ? ze.hasOwnProperty(ge) ? st = ze[ge] : ze.hasOwnProperty(T) ? st = ze[T] : st = false : st = ze;
          const Mt = +st;
          if (Mt > g.MAX_EXTERNAL_DATA_CHUNKS)
            throw new Error(`The number of external data chunks (${Mt}) exceeds the maximum allowed value (${g.MAX_EXTERNAL_DATA_CHUNKS}).`);
          for (let Ut = 0; Ut < Mt; ++Ut) {
            const Yt = `${ge}_data${Ut === 0 ? "" : "_" + Ut}`, xt = `${S.subfolder ?? ""}/${Yt}`;
            Le.push(new Promise(async (hn, yn) => {
              const $t = await (0, g.getModelFile)(b, xt, true, S, we);
              hn($t instanceof Uint8Array ? {
                path: Yt,
                data: $t
              } : Yt);
            }));
          }
        } else
          re.externalData !== void 0 && (Le = re.externalData.map(async (st) => {
            if (typeof st.data == "string") {
              const Mt = await (0, g.getModelFile)(b, st.data, true, S);
              return {
                ...st,
                data: Mt
              };
            }
            return st;
          }));
        if (Le.length > 0) {
          const st = await Promise.all(Le);
          E.apis.IS_NODE_ENV || (re.externalData = st);
        }
        if (L === "webgpu") {
          const st = (0, s.getCacheShapes)(S.config, {
            prefix: "present"
          });
          if (Object.keys(st).length > 0 && !(0, l.isONNXProxy)()) {
            const Mt = {};
            for (const Ut in st)
              Mt[Ut] = "gpu-buffer";
            re.preferredOutputLocation = Mt;
          }
        }
        return {
          buffer_or_path: await Se,
          session_options: re,
          session_config: ne
        };
      }
      async function R(b, T, S) {
        return Object.fromEntries(await Promise.all(Object.keys(T).map(async (I) => {
          const { buffer_or_path: O, session_options: L, session_config: z } = await N(b, T[I], S), B = await (0, l.createInferenceSession)(O, L, z);
          return [
            I,
            B
          ];
        })));
      }
      async function j(b, T, S) {
        return Object.fromEntries(await Promise.all(Object.keys(T).map(async (I) => {
          const O = await (0, g.getModelJSON)(b, T[I], false, S);
          return [
            I,
            O
          ];
        })));
      }
      function Z(b, T) {
        const S = /* @__PURE__ */ Object.create(null), I = [];
        for (const z of b.inputNames) {
          const B = T[z];
          if (!(B instanceof n.Tensor)) {
            I.push(z);
            continue;
          }
          S[z] = (0, l.isONNXProxy)() ? B.clone() : B;
        }
        if (I.length > 0)
          throw new Error(`An error occurred during model execution: "Missing the following inputs: ${I.join(", ")}.`);
        const O = Object.keys(T).length, L = b.inputNames.length;
        if (O > L) {
          let z = Object.keys(T).filter((B) => !b.inputNames.includes(B));
          console.warn(`WARNING: Too many inputs were provided (${O} > ${L}). The following inputs will be ignored: "${z.join(", ")}".`);
        }
        return S;
      }
      async function te(b, T) {
        const S = Z(b, T);
        try {
          const I = Object.fromEntries(Object.entries(S).map(([L, z]) => [
            L,
            z.ort_tensor
          ])), O = await (0, l.runInferenceSession)(b, I);
          return J(O);
        } catch (I) {
          const O = Object.fromEntries(Object.entries(S).map(([L, z]) => {
            const B = {
              type: z.type,
              dims: z.dims,
              location: z.location
            };
            return B.location !== "gpu-buffer" && (B.data = z.data), [
              L,
              B
            ];
          }));
          throw console.error(`An error occurred during model execution: "${I}".`), console.error("Inputs given to model:", O), I;
        }
      }
      function J(b) {
        for (let T in b)
          (0, l.isONNXTensor)(b[T]) ? b[T] = new n.Tensor(b[T]) : typeof b[T] == "object" && J(b[T]);
        return b;
      }
      function G(b) {
        if (b instanceof n.Tensor)
          return b;
        if (b.length === 0)
          throw Error("items must be non-empty");
        if (Array.isArray(b[0])) {
          if (b.some((T) => T.length !== b[0].length))
            throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");
          return new n.Tensor("int64", BigInt64Array.from(b.flat().map((T) => BigInt(T))), [
            b.length,
            b[0].length
          ]);
        } else
          return new n.Tensor("int64", BigInt64Array.from(b.map((T) => BigInt(T))), [
            1,
            b.length
          ]);
      }
      function H(b) {
        return new n.Tensor("bool", [
          b
        ], [
          1
        ]);
      }
      async function U(b, T) {
        let { encoder_outputs: S, input_ids: I, decoder_input_ids: O, ...L } = T;
        if (!S) {
          const B = (0, w.pick)(T, b.sessions.model.inputNames);
          S = (await Q(b, B)).last_hidden_state;
        }
        return L.input_ids = O, L.encoder_hidden_states = S, b.sessions.decoder_model_merged.inputNames.includes("encoder_attention_mask") && (L.encoder_attention_mask = T.attention_mask), await fe(b, L, true);
      }
      async function Q(b, T) {
        const S = b.sessions.model, I = (0, w.pick)(T, S.inputNames);
        if (S.inputNames.includes("inputs_embeds") && !I.inputs_embeds) {
          if (!T.input_ids)
            throw new Error("Both `input_ids` and `inputs_embeds` are missing in the model inputs.");
          I.inputs_embeds = await b.encode_text({
            input_ids: T.input_ids
          });
        }
        if (S.inputNames.includes("token_type_ids") && !I.token_type_ids) {
          if (!I.input_ids)
            throw new Error("Both `input_ids` and `token_type_ids` are missing in the model inputs.");
          I.token_type_ids = (0, n.zeros_like)(I.input_ids);
        }
        if (S.inputNames.includes("pixel_mask") && !I.pixel_mask) {
          if (!I.pixel_values)
            throw new Error("Both `pixel_values` and `pixel_mask` are missing in the model inputs.");
          const O = I.pixel_values.dims;
          I.pixel_mask = (0, n.ones)([
            O[0],
            O[2],
            O[3]
          ]);
        }
        return await te(S, I);
      }
      async function he(b, T) {
        const S = await b.encode(T);
        return await b.decode(S);
      }
      async function fe(b, T, S = false) {
        const I = b.sessions[S ? "decoder_model_merged" : "model"], { past_key_values: O, ...L } = T;
        if (I.inputNames.includes("use_cache_branch") && (L.use_cache_branch = H(!!O)), I.inputNames.includes("position_ids") && L.attention_mask && !L.position_ids) {
          const B = [
            "paligemma",
            "gemma3_text",
            "gemma3"
          ].includes(b.config.model_type) ? 1 : 0;
          L.position_ids = We(L, O, B);
        }
        b.addPastKeyValues(L, O);
        const z = (0, w.pick)(L, I.inputNames);
        return await te(I, z);
      }
      function Me({ modality_token_id: b, inputs_embeds: T, modality_features: S, input_ids: I, attention_mask: O }) {
        const L = I.tolist().map((q) => q.reduce((X, ee, ne) => (ee == b && X.push(ne), X), [])), z = L.reduce((q, X) => q + X.length, 0), B = S.dims[0];
        if (z !== B)
          throw new Error(`Number of tokens and features do not match: tokens: ${z}, features ${B}`);
        let V = 0;
        for (let q = 0; q < L.length; ++q) {
          const X = L[q], ee = T[q];
          for (let ne = 0; ne < X.length; ++ne)
            ee[X[ne]].data.set(S[V++].data);
        }
        return {
          inputs_embeds: T,
          attention_mask: O
        };
      }
      function pe({ image_token_id: b, inputs_embeds: T, image_features: S, input_ids: I, attention_mask: O }) {
        return Me({
          modality_token_id: b,
          inputs_embeds: T,
          modality_features: S,
          input_ids: I,
          attention_mask: O
        });
      }
      function oe({ audio_token_id: b, inputs_embeds: T, audio_features: S, input_ids: I, attention_mask: O }) {
        return Me({
          modality_token_id: b,
          inputs_embeds: T,
          modality_features: S,
          input_ids: I,
          attention_mask: O
        });
      }
      async function be(b, { encode_function: T, merge_function: S, modality_input_name: I, modality_output_name: O, input_ids: L = null, attention_mask: z = null, position_ids: B = null, inputs_embeds: V = null, past_key_values: q = null, generation_config: X = null, logits_processor: ee = null, ...ne }) {
        const se = ne[I];
        if (!V) {
          if (V = await b.encode_text({
            input_ids: L,
            ...ne
          }), se && L.dims[1] !== 1) {
            const ue = await T({
              [I]: se,
              ...ne
            });
            ({ inputs_embeds: V, attention_mask: z } = S({
              [O]: ue,
              inputs_embeds: V,
              input_ids: L,
              attention_mask: z
            }));
          } else if (q && se && L.dims[1] === 1) {
            const ue = L.dims[1], re = Object.values(q)[0].dims.at(-2);
            z = (0, n.cat)([
              (0, n.ones)([
                L.dims[0],
                re
              ]),
              z.slice(null, [
                z.dims[1] - ue,
                z.dims[1]
              ])
            ], 1);
          }
        }
        if (!B && b.config.model_type === "qwen2_vl") {
          const { image_grid_thw: ue, video_grid_thw: re } = ne;
          [B] = b.get_rope_index(L, ue, re, z);
        }
        return await fe(b, {
          inputs_embeds: V,
          past_key_values: q,
          attention_mask: z,
          position_ids: B,
          generation_config: X,
          logits_processor: ee
        }, true);
      }
      async function Ee(b, T) {
        return await be(b, {
          ...T,
          modality_input_name: "audio_values",
          modality_output_name: "audio_features",
          encode_function: b.encode_audio.bind(b),
          merge_function: b._merge_input_ids_with_audio_features.bind(b)
        });
      }
      async function Oe(b, T) {
        return await be(b, {
          ...T,
          modality_input_name: "pixel_values",
          modality_output_name: "image_features",
          encode_function: b.encode_image.bind(b),
          merge_function: b._merge_input_ids_with_image_features.bind(b)
        });
      }
      function Ye(b, T = 0) {
        const [S, I] = b.dims, O = b.data, L = new BigInt64Array(O.length);
        for (let z = 0; z < S; ++z) {
          const B = z * I;
          let V = BigInt(T);
          for (let q = 0; q < I; ++q) {
            const X = B + q;
            O[X] === 0n ? L[X] = BigInt(1) : (L[X] = V, V += O[X]);
          }
        }
        return {
          data: L,
          dims: b.dims
        };
      }
      function We(b, T = null, S = 0) {
        const { input_ids: I, inputs_embeds: O, attention_mask: L } = b, { data: z, dims: B } = Ye(L, S);
        let V = new n.Tensor("int64", z, B);
        if (T) {
          const q = -(I ?? O).dims.at(1);
          V = V.slice(null, [
            q,
            null
          ]);
        }
        return V;
      }
      function ot(b, T, S, I) {
        const O = S.past_key_values ? Object.values(S.past_key_values)[0].dims.at(-2) : 0;
        if (!S.attention_mask) {
          let L;
          for (const z of [
            "input_ids",
            "inputs_embeds",
            "position_ids"
          ])
            if (S[z]) {
              L = S[z].dims;
              break;
            }
          if (!L)
            throw new Error("attention_mask is not provided, and unable to infer its shape from model inputs.");
          S.attention_mask = (0, n.ones)([
            L[0],
            O + L[1]
          ]);
        }
        if (S.past_key_values) {
          const { input_ids: L, attention_mask: z } = S;
          z && z.dims[1] > L.dims[1] || O < L.dims[1] && (S.input_ids = L.slice(null, [
            O,
            null
          ]));
        }
        return S;
      }
      function vt(b, T, S, I) {
        return S.past_key_values && (T = T.map((O) => [
          O.at(-1)
        ])), {
          ...S,
          decoder_input_ids: G(T)
        };
      }
      function qe(b, ...T) {
        return b.config.is_encoder_decoder ? vt(b, ...T) : ot(b, ...T);
      }
      function _e(b, T, S, I) {
        const O = !!S.past_key_values;
        return I.guidance_scale !== null && I.guidance_scale > 1 && (O ? S.input_ids = (0, n.cat)([
          S.input_ids,
          S.input_ids
        ], 0) : (S.input_ids = (0, n.cat)([
          S.input_ids,
          (0, n.full_like)(S.input_ids, BigInt(I.pad_token_id))
        ], 0), S.attention_mask = (0, n.cat)([
          S.attention_mask,
          (0, n.full_like)(S.attention_mask, 0n)
        ], 0))), (O || !S.pixel_values) && (S.pixel_values = (0, n.full)([
          0,
          0,
          3,
          384,
          384
        ], 1)), O && (S.images_seq_mask = new n.Tensor("bool", new Array(0 + 1).fill(true).fill(false, 0, 1), [
          1,
          0 + 1
        ]), S.images_emb_mask = new n.Tensor("bool", new Array(0).fill(false), [
          1,
          1,
          0
        ])), S;
      }
      class le extends d.Callable {
        constructor(T, S, I) {
          super();
          __publicField(this, "main_input_name", "input_ids");
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask"
          ]);
          this.config = T, this.sessions = S, this.configs = I;
          const O = D.get(this.constructor), L = C.get(O);
          switch (this.can_generate = false, this._forward = null, this._prepare_inputs_for_generation = null, L) {
            case A.DecoderOnly:
              this.can_generate = true, this._forward = fe, this._prepare_inputs_for_generation = ot;
              break;
            case A.Seq2Seq:
            case A.Vision2Seq:
            case A.Musicgen:
              this.can_generate = true, this._forward = U, this._prepare_inputs_for_generation = vt;
              break;
            case A.EncoderDecoder:
              this._forward = U;
              break;
            case A.ImageTextToText:
              this.can_generate = true, this._forward = Oe, this._prepare_inputs_for_generation = qe;
              break;
            case A.AudioTextToText:
              this.can_generate = true, this._forward = Ee, this._prepare_inputs_for_generation = qe;
              break;
            case A.Phi3V:
            case A.ImageAudioTextToText:
              this.can_generate = true, this._prepare_inputs_for_generation = qe;
              break;
            case A.MultiModality:
              this.can_generate = true, this._prepare_inputs_for_generation = _e;
              break;
            case A.AutoEncoder:
              this._forward = he;
              break;
            default:
              this._forward = Q;
              break;
          }
          this.can_generate && this.forward_params.push("past_key_values"), this.custom_config = this.config["transformers.js_config"] ?? {};
        }
        async dispose() {
          const T = [];
          for (const S of Object.values(this.sessions))
            S?.handler?.dispose && T.push(S.handler.dispose());
          return await Promise.all(T);
        }
        static async from_pretrained(T, { progress_callback: S = null, config: I = null, cache_dir: O = null, local_files_only: L = false, revision: z = "main", model_file_name: B = null, subfolder: V = "onnx", device: q = null, dtype: X = null, use_external_data_format: ee = null, session_options: ne = {} } = {}) {
          let se = {
            progress_callback: S,
            config: I,
            cache_dir: O,
            local_files_only: L,
            revision: z,
            model_file_name: B,
            subfolder: V,
            device: q,
            dtype: X,
            use_external_data_format: ee,
            session_options: ne
          };
          const ge = D.get(this), ue = C.get(ge);
          I = se.config = await s.AutoConfig.from_pretrained(T, se);
          let re;
          if (ue === A.DecoderOnly)
            re = await Promise.all([
              R(T, {
                model: se.model_file_name ?? "model"
              }, se),
              j(T, {
                generation_config: "generation_config.json"
              }, se)
            ]);
          else if (ue === A.Seq2Seq || ue === A.Vision2Seq)
            re = await Promise.all([
              R(T, {
                model: "encoder_model",
                decoder_model_merged: "decoder_model_merged"
              }, se),
              j(T, {
                generation_config: "generation_config.json"
              }, se)
            ]);
          else if (ue === A.MaskGeneration)
            re = await Promise.all([
              R(T, {
                model: "vision_encoder",
                prompt_encoder_mask_decoder: "prompt_encoder_mask_decoder"
              }, se)
            ]);
          else if (ue === A.EncoderDecoder)
            re = await Promise.all([
              R(T, {
                model: "encoder_model",
                decoder_model_merged: "decoder_model_merged"
              }, se)
            ]);
          else if (ue === A.ImageTextToText) {
            const Te = {
              embed_tokens: "embed_tokens",
              vision_encoder: "vision_encoder",
              decoder_model_merged: "decoder_model_merged"
            };
            I.is_encoder_decoder && (Te.model = "encoder_model"), re = await Promise.all([
              R(T, Te, se),
              j(T, {
                generation_config: "generation_config.json"
              }, se)
            ]);
          } else if (ue === A.AudioTextToText) {
            const Te = {
              embed_tokens: "embed_tokens",
              audio_encoder: "audio_encoder",
              decoder_model_merged: "decoder_model_merged"
            };
            re = await Promise.all([
              R(T, Te, se),
              j(T, {
                generation_config: "generation_config.json"
              }, se)
            ]);
          } else if (ue === A.ImageAudioTextToText) {
            const Te = {
              embed_tokens: "embed_tokens",
              audio_encoder: "audio_encoder",
              vision_encoder: "vision_encoder",
              decoder_model_merged: "decoder_model_merged"
            };
            re = await Promise.all([
              R(T, Te, se),
              j(T, {
                generation_config: "generation_config.json"
              }, se)
            ]);
          } else if (ue === A.Musicgen)
            re = await Promise.all([
              R(T, {
                model: "text_encoder",
                decoder_model_merged: "decoder_model_merged",
                encodec_decode: "encodec_decode"
              }, se),
              j(T, {
                generation_config: "generation_config.json"
              }, se)
            ]);
          else if (ue === A.MultiModality)
            re = await Promise.all([
              R(T, {
                prepare_inputs_embeds: "prepare_inputs_embeds",
                model: "language_model",
                lm_head: "lm_head",
                gen_head: "gen_head",
                gen_img_embeds: "gen_img_embeds",
                image_decode: "image_decode"
              }, se),
              j(T, {
                generation_config: "generation_config.json"
              }, se)
            ]);
          else if (ue === A.Phi3V)
            re = await Promise.all([
              R(T, {
                prepare_inputs_embeds: "prepare_inputs_embeds",
                model: "model",
                vision_encoder: "vision_encoder"
              }, se),
              j(T, {
                generation_config: "generation_config.json"
              }, se)
            ]);
          else if (ue === A.AutoEncoder)
            re = await Promise.all([
              R(T, {
                encoder_model: "encoder_model",
                decoder_model: "decoder_model"
              }, se)
            ]);
          else {
            if (ue !== A.EncoderOnly) {
              const Te = ge ?? I?.model_type;
              Te !== "custom" && console.warn(`Model type for '${Te}' not found, assuming encoder-only architecture. Please report this at ${_.GITHUB_ISSUE_URL}.`);
            }
            re = await Promise.all([
              R(T, {
                model: se.model_file_name ?? "model"
              }, se)
            ]);
          }
          return new this(I, ...re);
        }
        async _call(T) {
          return await this.forward(T);
        }
        async forward(T) {
          return await this._forward(this, T);
        }
        get generation_config() {
          return this.configs?.generation_config ?? null;
        }
        _get_logits_processor(T, S, I = null) {
          const O = new h.LogitsProcessorList();
          if (T.repetition_penalty !== null && T.repetition_penalty !== 1 && O.push(new h.RepetitionPenaltyLogitsProcessor(T.repetition_penalty)), T.no_repeat_ngram_size !== null && T.no_repeat_ngram_size > 0 && O.push(new h.NoRepeatNGramLogitsProcessor(T.no_repeat_ngram_size)), T.bad_words_ids !== null && O.push(new h.NoBadWordsLogitsProcessor(T.bad_words_ids, T.eos_token_id)), T.min_length !== null && T.eos_token_id !== null && T.min_length > 0 && O.push(new h.MinLengthLogitsProcessor(T.min_length, T.eos_token_id)), T.min_new_tokens !== null && T.eos_token_id !== null && T.min_new_tokens > 0 && O.push(new h.MinNewTokensLengthLogitsProcessor(S, T.min_new_tokens, T.eos_token_id)), T.forced_bos_token_id !== null && O.push(new h.ForcedBOSTokenLogitsProcessor(T.forced_bos_token_id)), T.forced_eos_token_id !== null && O.push(new h.ForcedEOSTokenLogitsProcessor(T.max_length, T.forced_eos_token_id)), T.begin_suppress_tokens !== null) {
            const L = S > 1 || T.forced_bos_token_id === null ? S : S + 1;
            O.push(new h.SuppressTokensAtBeginLogitsProcessor(T.begin_suppress_tokens, L));
          }
          return T.guidance_scale !== null && T.guidance_scale > 1 && O.push(new h.ClassifierFreeGuidanceLogitsProcessor(T.guidance_scale)), T.do_sample && T.temperature !== null && T.temperature !== 1 && O.push(new h.TemperatureLogitsWarper(T.temperature)), I !== null && O.extend(I), O;
        }
        _prepare_generation_config(T, S, I = r.GenerationConfig) {
          const O = {
            ...this.config
          };
          for (const z of [
            "decoder",
            "generator",
            "text_config"
          ])
            z in O && Object.assign(O, O[z]);
          const L = new I(O);
          return Object.assign(L, this.generation_config ?? {}), T && Object.assign(L, T), S && Object.assign(L, (0, w.pick)(S, Object.getOwnPropertyNames(L))), L;
        }
        _get_stopping_criteria(T, S = null) {
          const I = new M.StoppingCriteriaList();
          return T.max_length !== null && I.push(new M.MaxLengthCriteria(T.max_length, this.config.max_position_embeddings ?? null)), T.eos_token_id !== null && I.push(new M.EosTokenCriteria(T.eos_token_id)), S && I.extend(S), I;
        }
        _validate_model_class() {
          if (!this.can_generate) {
            const T = [
              $i,
              Fi,
              Oi,
              Ci
            ], S = D.get(this.constructor), I = /* @__PURE__ */ new Set(), O = this.config.model_type;
            for (const z of T) {
              const B = z.get(O);
              B && I.add(B[0]);
            }
            let L = `The current model class (${S}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;
            throw I.size > 0 && (L += ` Please use the following class instead: ${[
              ...I
            ].join(", ")}`), Error(L);
          }
        }
        prepare_inputs_for_generation(...T) {
          return this._prepare_inputs_for_generation(this, ...T);
        }
        _update_model_kwargs_for_generation({ generated_input_ids: T, outputs: S, model_inputs: I, is_encoder_decoder: O }) {
          return I.past_key_values = this.getPastKeyValues(S, I.past_key_values), I.input_ids = new n.Tensor("int64", T.flat(), [
            T.length,
            1
          ]), O || (I.attention_mask = (0, n.cat)([
            I.attention_mask,
            (0, n.ones)([
              I.attention_mask.dims[0],
              1
            ])
          ], 1)), I.position_ids = null, I;
        }
        _prepare_model_inputs({ inputs: T, bos_token_id: S, model_kwargs: I }) {
          const O = (0, w.pick)(I, this.forward_params), L = this.main_input_name;
          if (L in O) {
            if (T)
              throw new Error("`inputs`: {inputs}` were passed alongside {input_name} which is not allowed. Make sure to either pass {inputs} or {input_name}=...");
          } else
            O[L] = T;
          return {
            inputs_tensor: O[L],
            model_inputs: O,
            model_input_name: L
          };
        }
        async _prepare_encoder_decoder_kwargs_for_generation({ inputs_tensor: T, model_inputs: S, model_input_name: I, generation_config: O }) {
          if (this.sessions.model.inputNames.includes("inputs_embeds") && !S.inputs_embeds && "_prepare_inputs_embeds" in this) {
            const { input_ids: z, pixel_values: B, attention_mask: V, ...q } = S, X = await this._prepare_inputs_embeds(S);
            S = {
              ...q,
              ...(0, w.pick)(X, [
                "inputs_embeds",
                "attention_mask"
              ])
            };
          }
          let { last_hidden_state: L } = await Q(this, S);
          if (O.guidance_scale !== null && O.guidance_scale > 1)
            L = (0, n.cat)([
              L,
              (0, n.full_like)(L, 0)
            ], 0), "attention_mask" in S && (S.attention_mask = (0, n.cat)([
              S.attention_mask,
              (0, n.zeros_like)(S.attention_mask)
            ], 0));
          else if (S.decoder_input_ids) {
            const z = G(S.decoder_input_ids).dims[0];
            if (z !== L.dims[0]) {
              if (L.dims[0] !== 1)
                throw new Error(`The encoder outputs have a different batch size (${L.dims[0]}) than the decoder inputs (${z}).`);
              L = (0, n.cat)(Array.from({
                length: z
              }, () => L), 0);
            }
          }
          return S.encoder_outputs = L, S;
        }
        _prepare_decoder_input_ids_for_generation({ batch_size: T, model_input_name: S, model_kwargs: I, decoder_start_token_id: O, bos_token_id: L, generation_config: z }) {
          let { decoder_input_ids: B, ...V } = I;
          if (!(B instanceof n.Tensor)) {
            if (B)
              Array.isArray(B[0]) || (B = Array.from({
                length: T
              }, () => B));
            else if (O ?? (O = L), this.config.model_type === "musicgen")
              B = Array.from({
                length: T * this.config.decoder.num_codebooks
              }, () => [
                O
              ]);
            else if (Array.isArray(O)) {
              if (O.length !== T)
                throw new Error(`\`decoder_start_token_id\` expcted to have length ${T} but got ${O.length}`);
              B = O;
            } else
              B = Array.from({
                length: T
              }, () => [
                O
              ]);
            B = G(B);
          }
          return I.decoder_attention_mask = (0, n.ones_like)(B), {
            input_ids: B,
            model_inputs: V
          };
        }
        async generate({ inputs: T = null, generation_config: S = null, logits_processor: I = null, stopping_criteria: O = null, streamer: L = null, ...z }) {
          this._validate_model_class(), S = this._prepare_generation_config(S, z);
          let { inputs_tensor: B, model_inputs: V, model_input_name: q } = this._prepare_model_inputs({
            inputs: T,
            model_kwargs: z
          });
          const X = this.config.is_encoder_decoder;
          X && ("encoder_outputs" in V || (V = await this._prepare_encoder_decoder_kwargs_for_generation({
            inputs_tensor: B,
            model_inputs: V,
            model_input_name: q,
            generation_config: S
          })));
          let ee;
          X ? { input_ids: ee, model_inputs: V } = this._prepare_decoder_input_ids_for_generation({
            batch_size: V[q].dims.at(0),
            model_input_name: q,
            model_kwargs: V,
            decoder_start_token_id: S.decoder_start_token_id,
            bos_token_id: S.bos_token_id,
            generation_config: S
          }) : ee = V[q];
          let ne = ee.dims.at(-1);
          S.max_new_tokens !== null && (S.max_length = ne + S.max_new_tokens);
          const se = this._get_logits_processor(S, ne, I), ge = this._get_stopping_criteria(S, O), ue = V[q].dims.at(0), re = P.LogitsSampler.getSampler(S), Te = new Array(ue).fill(0), we = ee.tolist();
          L && L.put(we);
          let Se, ze = {};
          for (; ; ) {
            if (V = this.prepare_inputs_for_generation(we, V, S), Se = await this.forward(V), S.output_attentions && S.return_dict_in_generate) {
              const xt = this.getAttentions(Se);
              for (const hn in xt)
                hn in ze || (ze[hn] = []), ze[hn].push(xt[hn]);
            }
            const st = Se.logits.slice(null, -1, null), Mt = se(we, st), Ut = [];
            for (let xt = 0; xt < Mt.dims.at(0); ++xt) {
              const hn = Mt[xt], yn = await re(hn);
              for (const [$t, nn] of yn) {
                const wn = BigInt($t);
                Te[xt] += nn, we[xt].push(wn), Ut.push([
                  wn
                ]);
                break;
              }
            }
            if (L && L.put(Ut), ge(we).every((xt) => xt))
              break;
            V = this._update_model_kwargs_for_generation({
              generated_input_ids: Ut,
              outputs: Se,
              model_inputs: V,
              is_encoder_decoder: X
            });
          }
          L && L.end();
          const Le = this.getPastKeyValues(Se, V.past_key_values, true), nt = new n.Tensor("int64", we.flat(), [
            we.length,
            we[0].length
          ]);
          if (S.return_dict_in_generate)
            return {
              sequences: nt,
              past_key_values: Le,
              ...ze
            };
          for (const st of Object.values(Se))
            st.location === "gpu-buffer" && st.dispose();
          return nt;
        }
        getPastKeyValues(T, S, I = false) {
          const O = /* @__PURE__ */ Object.create(null);
          for (const L in T)
            if (L.startsWith("present")) {
              const z = L.replace("present_conv", "past_conv").replace("present", "past_key_values"), B = L.includes("encoder");
              if (B && S ? O[z] = S[z] : O[z] = T[L], S && (!B || I)) {
                const V = S[z];
                V.location === "gpu-buffer" && V.dispose();
              }
            }
          return O;
        }
        getAttentions(T) {
          const S = {};
          for (const I of [
            "cross_attentions",
            "encoder_attentions",
            "decoder_attentions"
          ])
            for (const O in T)
              O.startsWith(I) && (I in S || (S[I] = []), S[I].push(T[O]));
          return S;
        }
        addPastKeyValues(T, S) {
          if (S)
            Object.assign(T, S);
          else {
            const I = this.sessions.decoder_model_merged ?? this.sessions.model, O = (T[this.main_input_name] ?? T.attention_mask)?.dims?.[0] ?? 1, L = I?.config?.kv_cache_dtype ?? "float32", z = L === "float16" ? n.DataTypeMap.float16 : n.DataTypeMap.float32, B = (0, s.getCacheShapes)(this.config, {
              batch_size: O
            });
            for (const V in B) {
              const q = B[V].reduce((X, ee) => X * ee, 1);
              T[V] = new n.Tensor(L, new z(q), B[V]);
            }
          }
        }
        async encode_image({ pixel_values: T }) {
          return (await te(this.sessions.vision_encoder, {
            pixel_values: T
          })).image_features;
        }
        async encode_text({ input_ids: T }) {
          return (await te(this.sessions.embed_tokens, {
            input_ids: T
          })).inputs_embeds;
        }
        async encode_audio({ audio_values: T }) {
          return (await te(this.sessions.audio_encoder, {
            audio_values: T
          })).audio_features;
        }
      }
      class De {
      }
      class Be extends De {
        constructor({ last_hidden_state: T, hidden_states: S = null, attentions: I = null }) {
          super(), this.last_hidden_state = T, this.hidden_states = S, this.attentions = I;
        }
      }
      class Ze extends le {
      }
      class rt extends Ze {
      }
      class je extends Ze {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class it extends Ze {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Ge extends Ze {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class lt extends Ze {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class ht extends le {
      }
      class mt extends ht {
      }
      class Je extends ht {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class Rt extends ht {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class pt extends ht {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class At extends ht {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class Ot extends le {
      }
      class Ct extends Ot {
      }
      class St extends Ot {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class zt extends Ot {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class _n extends Ot {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Zt extends le {
      }
      class en extends Zt {
      }
      class qt extends Zt {
      }
      class Cn extends le {
      }
      class Hn extends Cn {
      }
      class Un extends le {
      }
      class kn extends Un {
      }
      class ln extends Un {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class nr extends Un {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ur extends Un {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class rr extends Un {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class Jt extends le {
      }
      class wt extends Jt {
      }
      class tn extends Jt {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class ar extends Jt {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class on extends Jt {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class sr extends Jt {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class W extends le {
      }
      class ve extends W {
      }
      class de extends W {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class ye extends W {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ke extends W {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Ue extends W {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class He extends le {
      }
      class Ft extends He {
      }
      class Bt extends He {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class Et extends He {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class jt extends He {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class ie extends He {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class xe extends le {
      }
      class Ie extends xe {
      }
      class Re extends xe {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class Ve extends xe {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Qe extends xe {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class _t extends xe {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class Gt extends le {
      }
      class Lt extends Gt {
      }
      class dn extends Gt {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class bn extends Gt {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Pn extends Gt {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Sn extends Gt {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class et extends le {
      }
      class cn extends et {
      }
      class Tn extends et {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Ln extends et {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Xn extends et {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class Kt extends et {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class tr extends le {
      }
      class fr extends tr {
      }
      class Nn extends tr {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class Kn extends tr {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class bt extends tr {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class yt extends le {
      }
      class Vt extends yt {
      }
      class On extends yt {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class mn extends yt {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Gn extends yt {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class or extends le {
      }
      class dr extends or {
      }
      class Xe extends or {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class yr extends or {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Ir extends or {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Fe extends or {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class K extends le {
      }
      class ce extends K {
      }
      class Pe extends K {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class Ce extends K {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class $e extends K {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class at extends le {
      }
      class dt extends at {
      }
      class ut extends at {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class It extends at {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class Tt extends at {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class gn extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask",
            "encoder_outputs",
            "decoder_input_ids",
            "decoder_attention_mask",
            "past_key_values"
          ]);
        }
      }
      class pn extends gn {
      }
      class $n extends gn {
      }
      class Rn extends le {
      }
      class Fn extends Rn {
      }
      class Bn extends Rn {
      }
      class zn extends le {
      }
      class lr extends zn {
      }
      class Mr extends zn {
      }
      class jn extends le {
      }
      class pr extends jn {
      }
      class In extends jn {
      }
      class Y extends jn {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ae extends le {
      }
      class me extends ae {
      }
      class Ae extends ae {
      }
      class Ne extends ae {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class tt extends ae {
      }
      class gt extends le {
      }
      class Nt extends gt {
      }
      class Xt extends gt {
      }
      class Pt extends le {
      }
      class Qt extends Pt {
      }
      class Vn extends Pt {
      }
      class Dn extends le {
      }
      class Ke extends Dn {
      }
      class sn extends Dn {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class kt extends Dn {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Mn extends Dn {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class xr extends Dn {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class vr extends le {
      }
      class Pr extends vr {
      }
      class Ht extends vr {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class Qr extends vr {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ct extends vr {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Wt extends vr {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class Vr extends le {
      }
      class Ys extends Vr {
      }
      class Ui extends Vr {
        async _call(T) {
          return new Jn(await super._call(T));
        }
      }
      class Gi extends Vr {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class fn extends Vr {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Wi extends Vr {
        async _call(T) {
          return new Zn(await super._call(T));
        }
      }
      class fs extends le {
      }
      class qi extends fs {
      }
      class Hi extends fs {
      }
      class Xs extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "requires_attention_mask", false);
          __publicField(this, "main_input_name", "input_features");
          __publicField(this, "forward_params", [
            "input_features",
            "attention_mask",
            "decoder_input_ids",
            "decoder_attention_mask",
            "past_key_values"
          ]);
        }
      }
      class Ki extends Xs {
      }
      class cr extends Xs {
        _prepare_generation_config(T, S) {
          return super._prepare_generation_config(T, S, k.WhisperGenerationConfig);
        }
        _retrieve_init_tokens(T) {
          const S = [
            T.decoder_start_token_id
          ];
          let I = T.language;
          const O = T.task;
          if (T.is_multilingual) {
            I || (console.warn("No language specified - defaulting to English (en)."), I = "en");
            const z = `<|${(0, $.whisper_language_to_code)(I)}|>`;
            S.push(T.lang_to_id[z]), S.push(T.task_to_id[O ?? "transcribe"]);
          } else if (I || O)
            throw new Error("Cannot specify `task` or `language` for an English-only model. If the model is intended to be multilingual, pass `is_multilingual=true` to generate, or update the generation config.");
          return !T.return_timestamps && T.no_timestamps_token_id && S.at(-1) !== T.no_timestamps_token_id ? S.push(T.no_timestamps_token_id) : T.return_timestamps && S.at(-1) === T.no_timestamps_token_id && (console.warn("<|notimestamps|> prompt token is removed from generation_config since `return_timestamps` is set to `true`."), S.pop()), S.filter((L) => L != null);
        }
        async generate({ inputs: T = null, generation_config: S = null, logits_processor: I = null, stopping_criteria: O = null, ...L }) {
          S = this._prepare_generation_config(S, L);
          const z = L.decoder_input_ids ?? this._retrieve_init_tokens(S);
          if (S.return_timestamps && (I ?? (I = new h.LogitsProcessorList()), I.push(new h.WhisperTimeStampLogitsProcessor(S, z))), S.begin_suppress_tokens && (I ?? (I = new h.LogitsProcessorList()), I.push(new h.SuppressTokensAtBeginLogitsProcessor(S.begin_suppress_tokens, z.length))), S.return_token_timestamps) {
            if (!S.alignment_heads)
              throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");
            S.task === "translate" && console.warn("Token-level timestamps may not be reliable for task 'translate'."), S.output_attentions = true, S.return_dict_in_generate = true;
          }
          const B = await super.generate({
            inputs: T,
            generation_config: S,
            logits_processor: I,
            decoder_input_ids: z,
            ...L
          });
          return S.return_token_timestamps && (B.token_timestamps = this._extract_token_timestamps(B, S.alignment_heads, S.num_frames)), B;
        }
        _extract_token_timestamps(T, S, I = null, O = 0.02) {
          if (!T.cross_attentions)
            throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");
          I == null && console.warn("`num_frames` has not been set, meaning the entire audio will be analyzed. This may lead to inaccurate token-level timestamps for short audios (< 30 seconds).");
          let L = this.config.median_filter_width;
          L === void 0 && (console.warn("Model config has no `median_filter_width`, using default value of 7."), L = 7);
          const z = T.cross_attentions, B = Array.from({
            length: this.config.decoder_layers
          }, (ue, re) => (0, n.cat)(z.map((Te) => Te[re]), 2)), V = (0, n.stack)(S.map(([ue, re]) => {
            if (ue >= B.length)
              throw new Error(`Layer index ${ue} is out of bounds for cross attentions (length ${B.length}).`);
            return I ? B[ue].slice(null, re, null, [
              0,
              I
            ]) : B[ue].slice(null, re);
          })).transpose(1, 0, 2, 3), [q, X] = (0, n.std_mean)(V, -2, 0, true), ee = V.clone();
          for (let ue = 0; ue < ee.dims[0]; ++ue) {
            const re = ee[ue];
            for (let Te = 0; Te < re.dims[0]; ++Te) {
              const we = re[Te], Se = q[ue][Te][0].data, ze = X[ue][Te][0].data;
              for (let Le = 0; Le < we.dims[0]; ++Le) {
                let nt = we[Le].data;
                for (let st = 0; st < nt.length; ++st)
                  nt[st] = (nt[st] - ze[st]) / Se[st];
                nt.set((0, p.medianFilter)(nt, L));
              }
            }
          }
          const ne = [
            (0, n.mean)(ee, 1)
          ], se = T.sequences.dims, ge = new n.Tensor("float32", new Float32Array(se[0] * se[1]), se);
          for (let ue = 0; ue < se[0]; ++ue) {
            const re = ne[ue].neg().squeeze_(0), [Te, we] = (0, p.dynamic_time_warping)(re.tolist()), Se = Array.from({
              length: Te.length - 1
            }, (nt, st) => Te[st + 1] - Te[st]), ze = (0, w.mergeArrays)([
              1
            ], Se).map((nt) => !!nt), Le = [];
            for (let nt = 0; nt < ze.length; ++nt)
              ze[nt] && Le.push(we[nt] * O);
            ge[ue].data.set(Le, 1);
          }
          return ge;
        }
      }
      class Yi extends cr {
      }
      class Qs extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "requires_attention_mask", false);
          __publicField(this, "main_input_name", "input_values");
          __publicField(this, "forward_params", [
            "input_values",
            "decoder_input_ids",
            "past_key_values"
          ]);
        }
      }
      class Or extends Qs {
      }
      class Xi extends Qs {
      }
      class Js extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "main_input_name", "pixel_values");
          __publicField(this, "forward_params", [
            "pixel_values",
            "decoder_input_ids",
            "encoder_hidden_states",
            "past_key_values"
          ]);
        }
      }
      class Zs extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask",
            "pixel_values",
            "position_ids",
            "past_key_values"
          ]);
        }
      }
      class _s extends Zs {
        _merge_input_ids_with_image_features(T) {
          const S = T.image_features.dims.at(-1), I = T.image_features.view(-1, S);
          return pe({
            image_token_id: this.config.image_token_index,
            ...T,
            image_features: I
          });
        }
      }
      class Qi extends _s {
      }
      class Ji extends _s {
      }
      class Zi extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "inputs_embeds",
            "attention_mask",
            "pixel_values",
            "encoder_outputs",
            "decoder_input_ids",
            "decoder_inputs_embeds",
            "decoder_attention_mask",
            "past_key_values"
          ]);
          __publicField(this, "main_input_name", "inputs_embeds");
        }
      }
      class ea extends Zi {
        _merge_input_ids_with_image_features({ inputs_embeds: T, image_features: S, input_ids: I, attention_mask: O }) {
          return {
            inputs_embeds: (0, n.cat)([
              S,
              T
            ], 1),
            attention_mask: (0, n.cat)([
              (0, n.ones)(S.dims.slice(0, 2)),
              O
            ], 1)
          };
        }
        async _prepare_inputs_embeds({ input_ids: T, pixel_values: S, inputs_embeds: I, attention_mask: O }) {
          if (!T && !S)
            throw new Error("Either `input_ids` or `pixel_values` should be provided.");
          let L, z;
          return T && (L = await this.encode_text({
            input_ids: T
          })), S && (z = await this.encode_image({
            pixel_values: S
          })), L && z ? { inputs_embeds: I, attention_mask: O } = this._merge_input_ids_with_image_features({
            inputs_embeds: L,
            image_features: z,
            input_ids: T,
            attention_mask: O
          }) : I = L || z, {
            inputs_embeds: I,
            attention_mask: O
          };
        }
        async forward({ input_ids: T, pixel_values: S, attention_mask: I, decoder_input_ids: O, decoder_attention_mask: L, encoder_outputs: z, past_key_values: B, inputs_embeds: V, decoder_inputs_embeds: q }) {
          if (V || ({ inputs_embeds: V, attention_mask: I } = await this._prepare_inputs_embeds({
            input_ids: T,
            pixel_values: S,
            inputs_embeds: V,
            attention_mask: I
          })), !z) {
            let { last_hidden_state: ne } = await Q(this, {
              inputs_embeds: V,
              attention_mask: I
            });
            z = ne;
          }
          if (!q) {
            if (!O)
              throw new Error("Either `decoder_input_ids` or `decoder_inputs_embeds` should be provided.");
            q = await this.encode_text({
              input_ids: O
            });
          }
          return await fe(this, {
            inputs_embeds: q,
            attention_mask: L,
            encoder_attention_mask: I,
            encoder_hidden_states: z,
            past_key_values: B
          }, true);
        }
      }
      class ta extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask",
            "pixel_values",
            "position_ids",
            "past_key_values"
          ]);
        }
      }
      class na extends ta {
        _merge_input_ids_with_image_features(T) {
          const S = T.image_features.dims.at(-1), I = T.image_features.view(-1, S);
          return pe({
            image_token_id: this.config.image_token_index,
            ...T,
            image_features: I
          });
        }
      }
      class _r extends Zs {
        _merge_input_ids_with_image_features(T) {
          const S = T.image_features.dims.at(-1), I = T.image_features.view(-1, S);
          return pe({
            image_token_id: this.config.image_token_index,
            ...T,
            image_features: I
          });
        }
      }
      class ra extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask",
            "inputs_embeds",
            "per_layer_inputs",
            "position_ids",
            "pixel_values",
            "input_features",
            "input_features_mask",
            "past_key_values"
          ]);
        }
      }
      class eo extends ra {
        async forward({ input_ids: T = null, attention_mask: S = null, pixel_values: I = null, input_features: O = null, input_features_mask: L = null, position_ids: z = null, inputs_embeds: B = null, per_layer_inputs: V = null, past_key_values: q = null, generation_config: X = null, logits_processor: ee = null, ...ne }) {
          if ((!B || !V) && ({ inputs_embeds: B, per_layer_inputs: V } = await te(this.sessions.embed_tokens, {
            input_ids: T
          }), T.dims[1] !== 1)) {
            if (I) {
              const { image_features: ge } = await te(this.sessions.vision_encoder, {
                pixel_values: I
              });
              ({ inputs_embeds: B, attention_mask: S } = this._merge_input_ids_with_image_features({
                image_features: ge,
                inputs_embeds: B,
                input_ids: T,
                attention_mask: S
              }));
            }
            if (O) {
              const { audio_features: ge } = await te(this.sessions.audio_encoder, {
                input_features: O,
                input_features_mask: L
              });
              ({ inputs_embeds: B, attention_mask: S } = this._merge_input_ids_with_audio_features({
                audio_features: ge,
                inputs_embeds: B,
                input_ids: T,
                attention_mask: S
              }));
            }
          }
          return await fe(this, {
            inputs_embeds: B,
            per_layer_inputs: V,
            past_key_values: q,
            attention_mask: S,
            position_ids: z,
            generation_config: X,
            logits_processor: ee
          }, true);
        }
        _merge_input_ids_with_image_features(T) {
          const S = T.image_features.dims.at(-1), I = T.image_features.view(-1, S);
          return pe({
            image_token_id: this.config.image_token_id,
            ...T,
            image_features: I
          });
        }
        _merge_input_ids_with_audio_features(T) {
          const S = T.audio_features.dims.at(-1), I = T.audio_features.view(-1, S);
          return oe({
            audio_token_id: this.config.audio_token_id,
            ...T,
            audio_features: I
          });
        }
      }
      class sa extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask",
            "pixel_values",
            "pixel_attention_mask",
            "position_ids",
            "past_key_values"
          ]);
        }
      }
      class ms extends sa {
        async encode_image({ pixel_values: T, pixel_attention_mask: S }) {
          return (await te(this.sessions.vision_encoder, {
            pixel_values: T,
            pixel_attention_mask: S
          })).image_features;
        }
        _merge_input_ids_with_image_features(T) {
          const S = T.image_features.dims.at(-1), I = T.image_features.view(-1, S);
          return pe({
            image_token_id: this.config.image_token_id,
            ...T,
            image_features: I
          });
        }
      }
      class to extends ms {
      }
      class oa extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "inputs_embeds",
            "attention_mask",
            "position_ids",
            "pixel_values",
            "image_sizes",
            "past_key_values"
          ]);
        }
      }
      class no extends oa {
        async forward({ input_ids: T = null, attention_mask: S = null, pixel_values: I = null, image_sizes: O = null, position_ids: L = null, inputs_embeds: z = null, past_key_values: B = null, generation_config: V = null, logits_processor: q = null, ...X }) {
          if (!z) {
            let ne;
            if (I && T.dims[1] !== 1) {
              if (!O)
                throw new Error("`image_sizes` must be provided when `pixel_values` is provided.");
              ({ image_features: ne } = await te(this.sessions.vision_encoder, {
                pixel_values: I,
                image_sizes: O
              }));
            } else {
              const se = this.config.normalized_config.hidden_size;
              ne = new n.Tensor("float32", [], [
                0,
                se
              ]);
            }
            ({ inputs_embeds: z } = await te(this.sessions.prepare_inputs_embeds, {
              input_ids: T,
              image_features: ne
            }));
          }
          return await fe(this, {
            inputs_embeds: z,
            past_key_values: B,
            attention_mask: S,
            position_ids: L,
            generation_config: V,
            logits_processor: q
          }, false);
        }
      }
      class $r extends le {
      }
      class ia extends $r {
      }
      class dd extends $r {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "text_model"
          });
        }
      }
      class pd extends $r {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "text_model"
          });
        }
      }
      class Tr extends $r {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "vision_model"
          });
        }
      }
      class aa extends $r {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "vision_model"
          });
        }
      }
      class Jr extends le {
      }
      class ro extends Jr {
      }
      class mr extends Jr {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "text_model"
          });
        }
      }
      class la extends $r {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "vision_model"
          });
        }
      }
      class ca extends le {
      }
      class ua extends ca {
      }
      class gs extends le {
      }
      class da extends gs {
        async forward(T) {
          const S = !T.input_ids, I = !T.pixel_values;
          if (S && I)
            throw new Error("Either `input_ids` or `pixel_values` should be provided.");
          if (S && (T.input_ids = (0, n.ones)([
            T.pixel_values.dims[0],
            1
          ])), I) {
            const { image_size: q } = this.config.vision_config;
            T.pixel_values = (0, n.full)([
              0,
              3,
              q,
              q
            ], 0);
          }
          const { text_embeddings: O, image_embeddings: L, l2norm_text_embeddings: z, l2norm_image_embeddings: B } = await super.forward(T), V = {};
          return S || (V.text_embeddings = O, V.l2norm_text_embeddings = z), I || (V.image_embeddings = L, V.l2norm_image_embeddings = B), V;
        }
      }
      class pa extends gs {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "text_model"
          });
        }
      }
      class ha extends gs {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "vision_model"
          });
        }
      }
      class so extends le {
      }
      class fa extends so {
      }
      class _a extends so {
      }
      class hr extends le {
      }
      class ma extends hr {
      }
      class ga extends hr {
      }
      class oo extends le {
      }
      class ba extends oo {
      }
      class wa extends oo {
      }
      class io extends le {
      }
      class ya extends io {
      }
      class xa extends io {
      }
      class ao extends le {
      }
      class va extends ao {
      }
      class lo extends ao {
      }
      class bs extends le {
      }
      class Ta extends bs {
      }
      class Ma extends bs {
      }
      class ws extends le {
      }
      class hd extends ws {
      }
      class Ea extends ws {
      }
      class Zr extends le {
      }
      class Pa extends Zr {
      }
      class Sa extends Zr {
      }
      class co extends le {
      }
      class es extends co {
      }
      class ka extends co {
      }
      class Aa extends le {
      }
      class uo extends Aa {
      }
      class po extends le {
      }
      class Ca extends po {
      }
      class Ia extends po {
      }
      class ho extends le {
      }
      class fd extends ho {
      }
      class Oa extends ho {
      }
      class fo extends le {
      }
      class $a extends fo {
      }
      class _d extends fo {
      }
      class _o extends le {
      }
      class En extends _o {
      }
      class Fa extends _o {
      }
      class mo extends le {
      }
      class Da extends mo {
      }
      class La extends mo {
      }
      class go extends le {
      }
      class Na extends go {
      }
      class Ra extends go {
      }
      class bo extends le {
      }
      class za extends bo {
      }
      class Ba extends bo {
      }
      class wo extends le {
      }
      class ja extends wo {
      }
      class Va extends wo {
      }
      class yo extends le {
      }
      class ts extends yo {
      }
      class Ua extends yo {
      }
      class ns extends le {
      }
      class Ga extends ns {
      }
      class Wa extends ns {
      }
      class xo extends le {
      }
      class qa extends xo {
      }
      class Ha extends xo {
      }
      class vo extends le {
      }
      class Ka extends vo {
      }
      class Ya extends vo {
      }
      class To extends le {
      }
      class Xa extends To {
      }
      class Qa extends To {
      }
      class Mo extends le {
      }
      class Ja extends Mo {
      }
      class Za extends Mo {
      }
      class Eo extends le {
      }
      class el extends Eo {
      }
      class Po extends Eo {
      }
      class So extends le {
      }
      class ko extends So {
      }
      class Ao extends So {
      }
      class Co extends le {
      }
      class tl extends Co {
      }
      class nl extends Co {
      }
      class Io extends le {
      }
      class rl extends Io {
      }
      class sl extends Io {
      }
      class ys extends le {
      }
      class ol extends ys {
      }
      class il extends ys {
      }
      class al extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask",
            "position_ids",
            "past_key_values",
            "pixel_values",
            "image_grid_thw"
          ]);
        }
      }
      class md extends al {
        get_rope_index(T, S, I, O) {
          const { vision_config: L, image_token_id: z, video_token_id: B, vision_start_token_id: V } = this.config, q = L.spatial_merge_size ?? 2, X = [];
          if (S || I) {
            let ee = T.tolist();
            O || (O = (0, n.ones_like)(T));
            const ne = O.tolist(), se = Array.from({
              length: 3
            }, (we) => Array.from({
              length: T.dims[0]
            }, (Se) => Array.from({
              length: T.dims[1]
            }, (ze) => 1))), ge = S ? S.tolist() : [], ue = I ? I.tolist() : [];
            let re = 0, Te = 0;
            for (let we = 0; we < ee.length; ++we) {
              const Se = ee[we].filter((xn, ft) => ne[we][ft] == 1), Le = Se.reduce((xn, ft, Dt) => (ft == V && xn.push(Dt), xn), []).map((xn) => Se[xn + 1]), nt = Le.filter((xn) => xn == z).length, st = Le.filter((xn) => xn == B).length;
              let Mt = [], Ut = 0, Yt = nt, xt = st;
              for (let xn = 0; xn < Le.length; ++xn) {
                const ft = Se.findIndex((Hs, Cr) => Cr > Ut && Hs == z), Dt = Se.findIndex((Hs, Cr) => Cr > Ut && Hs == B), an = Yt > 0 && ft !== -1 ? ft : Se.length + 1, vn = xt > 0 && Dt !== -1 ? Dt : Se.length + 1;
                let Yn, jr, er, qn;
                an < vn ? ([jr, er, qn] = ge[re], ++re, --Yt, Yn = an) : ([jr, er, qn] = ue[Te], ++Te, --xt, Yn = vn);
                const [Xr, cd, Vi] = [
                  Number(jr),
                  Math.floor(Number(er) / q),
                  Math.floor(Number(qn) / q)
                ], Mp = Yn - Ut, Pp = Mt.length > 0 ? (0, p.max)(Mt.at(-1))[0] + 1 : 0;
                Mt.push(Array.from({
                  length: 3 * Mp
                }, (Hs, Cr) => Pp + Cr % Mp));
                const Ep = Mp + Pp, gp = Xr * cd * Vi, Ip = Array.from({
                  length: gp
                }, (Hs, Cr) => Ep + Math.floor(Cr / (cd * Vi))), Op = Array.from({
                  length: gp
                }, (Hs, Cr) => Ep + Math.floor(Cr / Vi) % cd), $p = Array.from({
                  length: gp
                }, (Hs, Cr) => Ep + Cr % Vi);
                Mt.push([
                  Ip,
                  Op,
                  $p
                ].flat()), Ut = Yn + gp;
              }
              if (Ut < Se.length) {
                const xn = Mt.length > 0 ? (0, p.max)(Mt.at(-1))[0] + 1 : 0, ft = Se.length - Ut;
                Mt.push(Array.from({
                  length: 3 * ft
                }, (Dt, an) => xn + an % ft));
              }
              const hn = Mt.reduce((xn, ft) => xn + ft.length, 0), yn = new Array(hn);
              let $t = 0;
              for (let xn = 0; xn < 3; ++xn)
                for (let ft = 0; ft < Mt.length; ++ft) {
                  const Dt = Mt[ft], an = Dt.length / 3;
                  for (let vn = xn * an; vn < (xn + 1) * an; ++vn)
                    yn[$t++] = Dt[vn];
                }
              let nn = 0;
              const wn = ne[we];
              for (let xn = 0; xn < wn.length; ++xn)
                if (wn[xn] == 1) {
                  for (let ft = 0; ft < 3; ++ft)
                    se[ft][we][xn] = yn[ft * hn / 3 + nn];
                  ++nn;
                }
              const rn = (0, p.max)(yn)[0];
              X.push(rn + 1 - ee[we].length);
            }
            return [
              new n.Tensor("int64", se.flat(1 / 0), [
                3,
                T.dims[0],
                T.dims[1]
              ]),
              new n.Tensor("int64", X, [
                X.length,
                1
              ])
            ];
          } else if (O) {
            const { data: ee, dims: ne } = Ye(O), se = BigInt64Array.from({
              length: 3 * ee.length
            }, (ue, re) => ee[re % ee.length]), ge = Array.from({
              length: ne[0]
            }, (ue, re) => (0, p.max)(ee.subarray(ne[1] * re, ne[1] * (re + 1)))[0] + 1n + BigInt(ne[1]));
            return [
              new n.Tensor("int64", se, [
                3,
                ...ne
              ]),
              new n.Tensor("int64", ge, [
                ge.length,
                1
              ])
            ];
          } else {
            const [ee, ne] = T.dims, se = BigInt64Array.from({
              length: 3 * ee * ne
            }, (ge, ue) => BigInt(Math.floor(ue % ne / ee)));
            return [
              new n.Tensor("int64", se, [
                3,
                ...T.dims
              ]),
              (0, n.zeros)([
                ee,
                1
              ])
            ];
          }
        }
        async encode_image({ pixel_values: T, image_grid_thw: S }) {
          return (await te(this.sessions.vision_encoder, {
            pixel_values: T,
            grid_thw: S
          })).image_features;
        }
        _merge_input_ids_with_image_features(T) {
          return pe({
            image_token_id: this.config.image_token_id,
            ...T
          });
        }
        prepare_inputs_for_generation(T, S, I) {
          if (S.attention_mask && !S.position_ids)
            if (!S.past_key_values)
              [S.position_ids, S.rope_deltas] = this.get_rope_index(S.input_ids, S.image_grid_thw, S.video_grid_thw, S.attention_mask);
            else {
              S.pixel_values = null;
              const O = BigInt(Object.values(S.past_key_values)[0].dims.at(-2)), L = S.rope_deltas.map((z) => O + z);
              S.position_ids = (0, n.stack)([
                L,
                L,
                L
              ], 0);
            }
          return S;
        }
      }
      class Oo extends le {
      }
      class ll extends Oo {
      }
      class gr extends Oo {
      }
      class $o extends le {
      }
      class cl extends $o {
      }
      class ul extends $o {
      }
      class Fo extends le {
      }
      class dl extends Fo {
      }
      class pl extends Fo {
      }
      class Do extends le {
      }
      class hl extends Do {
      }
      class fl extends Do {
      }
      class Lo extends le {
      }
      class gd extends Lo {
      }
      class _l extends Lo {
      }
      class No extends le {
      }
      class ml extends No {
      }
      class gl extends No {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Ro extends le {
      }
      class bl extends Ro {
      }
      class bd extends Ro {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Fr extends le {
      }
      class Dr extends Fr {
      }
      class Sr extends le {
      }
      class zo extends Sr {
      }
      class Lr extends Sr {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Qn extends le {
      }
      class wl extends Qn {
      }
      class xs extends le {
      }
      class yl extends xs {
      }
      class wd extends xs {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class rs extends le {
      }
      class Bo extends rs {
      }
      class vs extends le {
      }
      class xl extends vs {
      }
      class vl extends vs {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class jo extends le {
      }
      class Vo extends jo {
        async _call(T) {
          return new o(await super._call(T));
        }
      }
      class Uo extends le {
      }
      class Go extends Uo {
      }
      class Tl extends Uo {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ss extends le {
      }
      class Wo extends ss {
      }
      class Ml extends ss {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class qo extends le {
      }
      class yd extends qo {
      }
      class El extends qo {
      }
      class Ts extends le {
      }
      class os extends Ts {
      }
      class Pl extends Ts {
      }
      class Ms extends le {
      }
      class Sl extends Ms {
      }
      class kl extends Ms {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Es extends le {
      }
      class xd extends Es {
      }
      class Al extends Es {
        async _call(T) {
          return new Cl(await super._call(T));
        }
      }
      class Ho extends Es {
        async _call(T) {
          return new Il(await super._call(T));
        }
      }
      class Cl extends De {
        constructor({ logits: T, pred_boxes: S }) {
          super(), this.logits = T, this.pred_boxes = S;
        }
      }
      class Il extends De {
        constructor({ logits: T, pred_boxes: S, pred_masks: I }) {
          super(), this.logits = T, this.pred_boxes = S, this.pred_masks = I;
        }
      }
      class is extends le {
      }
      class Ol extends is {
      }
      class Ps extends is {
        async _call(T) {
          return new Ur(await super._call(T));
        }
      }
      class Ur extends De {
        constructor({ logits: T, pred_boxes: S }) {
          super(), this.logits = T, this.pred_boxes = S;
        }
      }
      class Ss extends le {
      }
      class $l extends Ss {
      }
      class Fl extends Ss {
        async _call(T) {
          return new Ko(await super._call(T));
        }
      }
      class Ko extends Ur {
      }
      class Dl extends le {
      }
      class Ll extends Dl {
      }
      class vd extends Dl {
        async _call(T) {
          return new Nl(await super._call(T));
        }
      }
      class Nl extends Ur {
      }
      class Yo extends le {
      }
      class Rl extends Yo {
      }
      class Xo extends Yo {
        async _call(T) {
          return new Ur(await super._call(T));
        }
      }
      class Qo extends le {
      }
      class zl extends Qo {
      }
      class Jo extends Qo {
        async _call(T) {
          return new Bl(await super._call(T));
        }
      }
      class Bl extends Cl {
      }
      class Zo extends le {
      }
      class Td extends Zo {
      }
      class jl extends Zo {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ei extends le {
      }
      class Vl extends ei {
      }
      class Md extends ei {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ti extends le {
      }
      class Ul extends ti {
      }
      class Gl extends ti {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ks extends le {
      }
      class Wl extends ks {
      }
      class Ed extends ks {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class As extends ks {
      }
      class Gr extends le {
      }
      class ni extends Gr {
      }
      class ql extends Gr {
      }
      class ri extends le {
      }
      class Hl extends ri {
      }
      class Kl extends ri {
      }
      class si extends le {
      }
      class Yl extends si {
      }
      class Cs extends le {
      }
      class Xl extends Cs {
      }
      class Pd extends Cs {
      }
      class Ql extends Cs {
      }
      class oi extends le {
      }
      class Jl extends oi {
      }
      class Zl extends le {
      }
      class ec extends Zl {
      }
      class Sd extends le {
      }
      class tc extends Sd {
      }
      class ii extends le {
      }
      class kd extends ii {
      }
      class nc extends ii {
      }
      class ai extends le {
      }
      class rc extends ai {
      }
      class sc extends ai {
      }
      class Ad extends le {
      }
      class oc extends Ad {
      }
      class li extends le {
      }
      class ic extends li {
      }
      class Cd extends li {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ci extends le {
      }
      class ac extends ci {
      }
      class lc extends ci {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ui extends le {
      }
      class Id extends ui {
      }
      class cc extends ui {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class di extends le {
      }
      class uc extends di {
      }
      class dc extends di {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Od extends le {
      }
      class pc extends Od {
      }
      class hc extends le {
      }
      class fc extends hc {
      }
      class _c extends le {
      }
      class $d extends _c {
      }
      class br extends le {
      }
      class Er extends br {
      }
      class Nr extends br {
        async _call(T) {
          return new Rr(await super._call(T));
        }
      }
      class Rr extends De {
        constructor({ logits: T, pred_boxes: S }) {
          super(), this.logits = T, this.pred_boxes = S;
        }
      }
      class mc extends le {
      }
      class gc extends mc {
        async get_image_embeddings({ pixel_values: T }) {
          return await Q(this, {
            pixel_values: T
          });
        }
        async forward(T) {
          if ((!T.image_embeddings || !T.image_positional_embeddings) && (T = {
            ...T,
            ...await this.get_image_embeddings(T)
          }), !T.input_labels && T.input_points) {
            const I = T.input_points.dims.slice(0, -1), O = I.reduce((L, z) => L * z, 1);
            T.input_labels = new n.Tensor("int64", new BigInt64Array(O).fill(1n), I);
          }
          const S = {
            image_embeddings: T.image_embeddings,
            image_positional_embeddings: T.image_positional_embeddings
          };
          return T.input_points && (S.input_points = T.input_points), T.input_labels && (S.input_labels = T.input_labels), T.input_boxes && (S.input_boxes = T.input_boxes), await te(this.sessions.prompt_encoder_mask_decoder, S);
        }
        async _call(T) {
          return new bc(await super._call(T));
        }
      }
      class bc extends De {
        constructor({ iou_scores: T, pred_masks: S }) {
          super(), this.iou_scores = T, this.pred_masks = S;
        }
      }
      class hi extends le {
      }
      class wc extends hi {
      }
      class yc extends hi {
      }
      class fi extends le {
      }
      class xc extends fi {
      }
      class vc extends fi {
      }
      class kr extends le {
      }
      class Fd extends kr {
      }
      class ir extends kr {
        async _call(T) {
          return new Yr(await super._call(T));
        }
      }
      class Tc extends kr {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Mc extends kr {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Is extends le {
      }
      class Ec extends Is {
      }
      class as extends Is {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Pc extends le {
      }
      class Sc extends Pc {
      }
      class Os extends le {
      }
      class kc extends Os {
      }
      class Ac extends Os {
        async _call(T) {
          return new Yr(await super._call(T));
        }
      }
      class Cc extends Os {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Wr extends le {
      }
      class Ic extends Wr {
      }
      class Oc extends Wr {
        async _call(T) {
          return new Yr(await super._call(T));
        }
      }
      class $c extends Wr {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Fc extends Wr {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class qr extends le {
      }
      class Dc extends qr {
      }
      class Lc extends qr {
        async _call(T) {
          return new Yr(await super._call(T));
        }
      }
      class Nc extends qr {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Dd extends le {
      }
      class _i extends kr {
      }
      class Rc extends kr {
        async _call(T) {
          return new Yr(await super._call(T));
        }
      }
      class zc extends kr {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class ls extends le {
      }
      class mi extends ls {
      }
      class Bc extends ls {
        async _call(T) {
          return new Yr(await super._call(T));
        }
      }
      class jc extends ls {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Vc extends ls {
        async _call(T) {
          return new ji(await super._call(T));
        }
      }
      class Ld extends ls {
        async _call(T) {
          return new Wn(await super._call(T));
        }
      }
      class Uc extends le {
      }
      class Gc extends Uc {
      }
      class $s extends le {
      }
      class wp extends $s {
      }
      class Wc extends $s {
      }
      class qc extends $s {
        async generate_speech(T, S, { threshold: I = 0.5, minlenratio: O = 0, maxlenratio: L = 20, vocoder: z = null } = {}) {
          const B = {
            input_ids: T
          }, { encoder_outputs: V, encoder_attention_mask: q } = await Q(this, B), X = V.dims[1] / this.config.reduction_factor, ee = Math.floor(X * L), ne = Math.floor(X * O), se = this.config.num_mel_bins;
          let ge = [], ue = null, re = null, Te = 0;
          for (; ; ) {
            ++Te;
            const ze = H(!!re);
            let Le;
            re ? Le = re.output_sequence_out : Le = new n.Tensor("float32", new Float32Array(se), [
              1,
              1,
              se
            ]);
            let nt = {
              use_cache_branch: ze,
              output_sequence: Le,
              encoder_attention_mask: q,
              speaker_embeddings: S,
              encoder_hidden_states: V
            };
            this.addPastKeyValues(nt, ue), re = await te(this.sessions.decoder_model_merged, nt), ue = this.getPastKeyValues(re, ue);
            const { prob: st, spectrum: Mt } = re;
            if (ge.push(Mt), Te >= ne && (Array.from(st.data).filter((Ut) => Ut >= I).length > 0 || Te >= ee))
              break;
          }
          const we = (0, n.cat)(ge), { waveform: Se } = await te(z.sessions.model, {
            spectrogram: we
          });
          return {
            spectrogram: we,
            waveform: Se
          };
        }
      }
      class Nd extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "main_input_name", "spectrogram");
        }
      }
      class Hc extends le {
      }
      class Kc extends Hc {
      }
      class gi extends le {
      }
      class Yc extends gi {
      }
      class Xc extends gi {
      }
      class Qc extends le {
      }
      class Jc extends Qc {
      }
      class Zc extends Qc {
      }
      class bi extends le {
      }
      class eu extends bi {
      }
      class tu extends bi {
      }
      class wi extends le {
      }
      class nu extends wi {
      }
      class ru extends wi {
      }
      class Fs extends le {
      }
      class Rd extends Fs {
      }
      class cs extends Fs {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "text_model"
          });
        }
      }
      class yi extends Fs {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "audio_model"
          });
        }
      }
      class xi extends le {
      }
      class Ds extends xi {
        async _call(T) {
          return new v(await super._call(T));
        }
      }
      class us extends le {
      }
      class zd extends us {
      }
      class su extends us {
      }
      class vi extends us {
      }
      class Ls extends le {
      }
      class ou extends Ls {
      }
      class iu extends Ls {
      }
      class Ns extends le {
      }
      class au extends Ns {
      }
      class lu extends Ns {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class Rs extends le {
      }
      class Bd extends Rs {
      }
      class jd extends Rs {
      }
      class Ti extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask",
            "encoder_outputs",
            "decoder_input_ids",
            "decoder_attention_mask",
            "past_key_values"
          ]);
        }
        _apply_and_filter_by_delay_pattern_mask(T) {
          const [S, I] = T.dims, O = this.config.decoder.num_codebooks, L = I - O;
          let z = 0;
          for (let q = 0; q < T.size; ++q) {
            if (T.data[q] === this.config.decoder.pad_token_id)
              continue;
            const X = q % I, ee = Math.floor(q / I) % O, ne = X - ee;
            ne > 0 && ne <= L && (T.data[z++] = T.data[q]);
          }
          const B = Math.floor(S / O), V = z / (B * O);
          return new n.Tensor(T.type, T.data.slice(0, z), [
            B,
            O,
            V
          ]);
        }
        prepare_inputs_for_generation(T, S, I) {
          let O = structuredClone(T);
          for (let z = 0; z < O.length; ++z)
            for (let B = 0; B < O[z].length; ++B)
              z % this.config.decoder.num_codebooks >= B && (O[z][B] = BigInt(this.config.decoder.pad_token_id));
          return I.guidance_scale !== null && I.guidance_scale > 1 && (O = O.concat(O)), super.prepare_inputs_for_generation(O, S, I);
        }
        async generate(T) {
          const S = await super.generate(T), I = this._apply_and_filter_by_delay_pattern_mask(S).unsqueeze_(0), { audio_values: O } = await te(this.sessions.encodec_decode, {
            audio_codes: I
          });
          return O;
        }
      }
      class zs extends le {
      }
      class Vd extends zs {
      }
      class cu extends zs {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class uu extends zs {
      }
      class Bs extends le {
      }
      class du extends Bs {
      }
      class Ud extends Bs {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class pu extends Bs {
      }
      class js extends le {
      }
      class hu extends js {
      }
      class Gd extends js {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class fu extends js {
      }
      class ds extends le {
      }
      class Mi extends ds {
      }
      class _u extends ds {
        async _call(T) {
          return new un(await super._call(T));
        }
      }
      class mu extends ds {
      }
      class gu extends le {
      }
      class Wd extends gu {
      }
      class bu extends le {
      }
      class wu extends bu {
        constructor(...T) {
          super(...T);
          __publicField(this, "forward_params", [
            "input_ids",
            "pixel_values",
            "images_seq_mask",
            "images_emb_mask",
            "attention_mask",
            "position_ids",
            "past_key_values"
          ]);
          this._generation_mode = "text";
        }
        async forward(T) {
          const S = this._generation_mode ?? "text";
          let I;
          if (S === "text" || !T.past_key_values) {
            const V = this.sessions.prepare_inputs_embeds, q = (0, w.pick)(T, V.inputNames);
            I = await te(V, q);
          } else {
            const V = this.sessions.gen_img_embeds, q = (0, w.pick)({
              image_ids: T.input_ids
            }, V.inputNames);
            I = await te(V, q);
          }
          const O = {
            ...T,
            ...I
          }, L = await fe(this, O), z = this.sessions[S === "text" ? "lm_head" : "gen_head"];
          if (!z)
            throw new Error(`Unable to find "${z}" generation head`);
          const B = await te(z, (0, w.pick)(L, z.inputNames));
          return {
            ...I,
            ...L,
            ...B
          };
        }
        async generate(T) {
          return this._generation_mode = "text", super.generate(T);
        }
        async generate_images(T) {
          this._generation_mode = "image";
          const S = (T.inputs ?? T[this.main_input_name]).dims[1], O = (await super.generate(T)).slice(null, [
            S,
            null
          ]), L = this.sessions.image_decode, { decoded_image: z } = await te(L, {
            generated_tokens: O
          }), B = z.add_(1).mul_(255 / 2).clamp_(0, 255).to("uint8"), V = [];
          for (const q of B) {
            const X = u.RawImage.fromTensor(q);
            V.push(X);
          }
          return V;
        }
      }
      class yu extends De {
        constructor({ char_logits: T, bpe_logits: S, wp_logits: I }) {
          super(), this.char_logits = T, this.bpe_logits = S, this.wp_logits = I;
        }
        get logits() {
          return [
            this.char_logits,
            this.bpe_logits,
            this.wp_logits
          ];
        }
      }
      class Ei extends le {
      }
      class xu extends Ei {
        async _call(T) {
          return new yu(await super._call(T));
        }
      }
      class Pi extends le {
      }
      class vu extends Pi {
      }
      class Tu extends Pi {
      }
      class Si extends le {
      }
      class Mu extends Si {
      }
      class Eu extends Si {
      }
      class Pu extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "forward_params", [
            "input_ids",
            "attention_mask",
            "position_ids",
            "audio_values",
            "past_key_values"
          ]);
        }
      }
      class Vs extends Pu {
        _merge_input_ids_with_audio_features(T) {
          const S = T.audio_features.dims.at(-1), I = T.audio_features.view(-1, S);
          return oe({
            audio_token_id: this.config.ignore_index ?? this.config.audio_token_id,
            ...T,
            audio_features: I
          });
        }
      }
      class Su extends Vs {
      }
      class Us extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "main_input_name", "input_values");
          __publicField(this, "forward_params", [
            "input_values"
          ]);
        }
      }
      class ku extends De {
        constructor({ audio_codes: T }) {
          super(), this.audio_codes = T;
        }
      }
      class Au extends De {
        constructor({ audio_values: T }) {
          super(), this.audio_values = T;
        }
      }
      class Cu extends Us {
        async encode(T) {
          return new ku(await te(this.sessions.encoder_model, T));
        }
        async decode(T) {
          return new Au(await te(this.sessions.decoder_model, T));
        }
      }
      class Iu extends Us {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "encoder_model"
          });
        }
      }
      class Ou extends Us {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "decoder_model"
          });
        }
      }
      class ki extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "main_input_name", "input_values");
          __publicField(this, "forward_params", [
            "input_values"
          ]);
        }
      }
      class $u extends De {
        constructor({ audio_codes: T }) {
          super(), this.audio_codes = T;
        }
      }
      class Fu extends De {
        constructor({ audio_values: T }) {
          super(), this.audio_values = T;
        }
      }
      class Du extends ki {
        async encode(T) {
          return new $u(await te(this.sessions.encoder_model, T));
        }
        async decode(T) {
          return new Fu(await te(this.sessions.decoder_model, T));
        }
      }
      class qd extends ki {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "encoder_model"
          });
        }
      }
      class Lu extends ki {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "decoder_model"
          });
        }
      }
      class zr extends le {
        constructor() {
          super(...arguments);
          __publicField(this, "main_input_name", "input_values");
          __publicField(this, "forward_params", [
            "input_values"
          ]);
        }
      }
      class Nu extends zr {
        async encode(T) {
          return await te(this.sessions.encoder_model, T);
        }
        async decode(T) {
          return await te(this.sessions.decoder_model, T);
        }
      }
      class Ai extends zr {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "encoder_model"
          });
        }
      }
      class Ru extends zr {
        static async from_pretrained(T, S = {}) {
          return super.from_pretrained(T, {
            ...S,
            model_file_name: S.model_file_name ?? "decoder_model"
          });
        }
      }
      class An {
        static async from_pretrained(T, { progress_callback: S = null, config: I = null, cache_dir: O = null, local_files_only: L = false, revision: z = "main", model_file_name: B = null, subfolder: V = "onnx", device: q = null, dtype: X = null, use_external_data_format: ee = null, session_options: ne = {} } = {}) {
          const se = {
            progress_callback: S,
            config: I,
            cache_dir: O,
            local_files_only: L,
            revision: z,
            model_file_name: B,
            subfolder: V,
            device: q,
            dtype: X,
            use_external_data_format: ee,
            session_options: ne
          };
          if (se.config = await s.AutoConfig.from_pretrained(T, se), !this.MODEL_CLASS_MAPPINGS)
            throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: " + this.name);
          const ge = se.config.model_type;
          for (const ue of this.MODEL_CLASS_MAPPINGS) {
            let re = ue.get(ge);
            if (!re) {
              for (const Te of ue.values())
                if (Te[0] === ge) {
                  re = Te;
                  break;
                }
              if (!re)
                continue;
            }
            return await re[1].from_pretrained(T, se);
          }
          if (this.BASE_IF_FAIL)
            return Ni.has(ge) || console.warn(`Unknown model class "${ge}", attempting to construct from base class.`), await le.from_pretrained(T, se);
          throw Error(`Unsupported model type: ${ge}`);
        }
      }
      __publicField(An, "MODEL_CLASS_MAPPINGS", null);
      __publicField(An, "BASE_IF_FAIL", false);
      const Hd = /* @__PURE__ */ new Map([
        [
          "bert",
          [
            "BertModel",
            rt
          ]
        ],
        [
          "neobert",
          [
            "NeoBertModel",
            mt
          ]
        ],
        [
          "modernbert",
          [
            "ModernBertModel",
            Ct
          ]
        ],
        [
          "nomic_bert",
          [
            "NomicBertModel",
            Hn
          ]
        ],
        [
          "roformer",
          [
            "RoFormerModel",
            kn
          ]
        ],
        [
          "electra",
          [
            "ElectraModel",
            ve
          ]
        ],
        [
          "esm",
          [
            "EsmModel",
            fr
          ]
        ],
        [
          "convbert",
          [
            "ConvBertModel",
            wt
          ]
        ],
        [
          "camembert",
          [
            "CamembertModel",
            Ft
          ]
        ],
        [
          "deberta",
          [
            "DebertaModel",
            Ie
          ]
        ],
        [
          "deberta-v2",
          [
            "DebertaV2Model",
            Lt
          ]
        ],
        [
          "mpnet",
          [
            "MPNetModel",
            dr
          ]
        ],
        [
          "albert",
          [
            "AlbertModel",
            dt
          ]
        ],
        [
          "distilbert",
          [
            "DistilBertModel",
            cn
          ]
        ],
        [
          "roberta",
          [
            "RobertaModel",
            Ke
          ]
        ],
        [
          "xlm",
          [
            "XLMModel",
            Pr
          ]
        ],
        [
          "xlm-roberta",
          [
            "XLMRobertaModel",
            Ys
          ]
        ],
        [
          "clap",
          [
            "ClapModel",
            Rd
          ]
        ],
        [
          "clip",
          [
            "CLIPModel",
            ia
          ]
        ],
        [
          "clipseg",
          [
            "CLIPSegModel",
            fa
          ]
        ],
        [
          "chinese_clip",
          [
            "ChineseCLIPModel",
            ua
          ]
        ],
        [
          "siglip",
          [
            "SiglipModel",
            ro
          ]
        ],
        [
          "jina_clip",
          [
            "JinaCLIPModel",
            da
          ]
        ],
        [
          "mobilebert",
          [
            "MobileBertModel",
            Vt
          ]
        ],
        [
          "squeezebert",
          [
            "SqueezeBertModel",
            ce
          ]
        ],
        [
          "wav2vec2",
          [
            "Wav2Vec2Model",
            Fd
          ]
        ],
        [
          "wav2vec2-bert",
          [
            "Wav2Vec2BertModel",
            Dc
          ]
        ],
        [
          "unispeech",
          [
            "UniSpeechModel",
            kc
          ]
        ],
        [
          "unispeech-sat",
          [
            "UniSpeechSatModel",
            Ic
          ]
        ],
        [
          "hubert",
          [
            "HubertModel",
            _i
          ]
        ],
        [
          "wavlm",
          [
            "WavLMModel",
            mi
          ]
        ],
        [
          "audio-spectrogram-transformer",
          [
            "ASTModel",
            qi
          ]
        ],
        [
          "vits",
          [
            "VitsModel",
            Ds
          ]
        ],
        [
          "pyannote",
          [
            "PyAnnoteModel",
            Ec
          ]
        ],
        [
          "wespeaker-resnet",
          [
            "WeSpeakerResNetModel",
            Sc
          ]
        ],
        [
          "detr",
          [
            "DetrModel",
            xd
          ]
        ],
        [
          "rt_detr",
          [
            "RTDetrModel",
            Ol
          ]
        ],
        [
          "rt_detr_v2",
          [
            "RTDetrV2Model",
            $l
          ]
        ],
        [
          "rf_detr",
          [
            "RFDetrModel",
            Ll
          ]
        ],
        [
          "d_fine",
          [
            "DFineModel",
            Rl
          ]
        ],
        [
          "table-transformer",
          [
            "TableTransformerModel",
            zl
          ]
        ],
        [
          "vit",
          [
            "ViTModel",
            ml
          ]
        ],
        [
          "ijepa",
          [
            "IJepaModel",
            bl
          ]
        ],
        [
          "pvt",
          [
            "PvtModel",
            zo
          ]
        ],
        [
          "vit_msn",
          [
            "ViTMSNModel",
            yl
          ]
        ],
        [
          "vit_mae",
          [
            "ViTMAEModel",
            wl
          ]
        ],
        [
          "groupvit",
          [
            "GroupViTModel",
            Bo
          ]
        ],
        [
          "fastvit",
          [
            "FastViTModel",
            xl
          ]
        ],
        [
          "mobilevit",
          [
            "MobileViTModel",
            Go
          ]
        ],
        [
          "mobilevitv2",
          [
            "MobileViTV2Model",
            Wo
          ]
        ],
        [
          "owlvit",
          [
            "OwlViTModel",
            yd
          ]
        ],
        [
          "owlv2",
          [
            "Owlv2Model",
            os
          ]
        ],
        [
          "beit",
          [
            "BeitModel",
            Sl
          ]
        ],
        [
          "deit",
          [
            "DeiTModel",
            Td
          ]
        ],
        [
          "hiera",
          [
            "HieraModel",
            Vl
          ]
        ],
        [
          "convnext",
          [
            "ConvNextModel",
            ic
          ]
        ],
        [
          "convnextv2",
          [
            "ConvNextV2Model",
            ac
          ]
        ],
        [
          "dinov2",
          [
            "Dinov2Model",
            Id
          ]
        ],
        [
          "dinov2_with_registers",
          [
            "Dinov2WithRegistersModel",
            uc
          ]
        ],
        [
          "dinov3_vit",
          [
            "DINOv3ViTModel",
            pc
          ]
        ],
        [
          "dinov3_convnext",
          [
            "DINOv3ConvNextModel",
            fc
          ]
        ],
        [
          "resnet",
          [
            "ResNetModel",
            Ul
          ]
        ],
        [
          "swin",
          [
            "SwinModel",
            Wl
          ]
        ],
        [
          "swin2sr",
          [
            "Swin2SRModel",
            ni
          ]
        ],
        [
          "donut-swin",
          [
            "DonutSwinModel",
            oc
          ]
        ],
        [
          "yolos",
          [
            "YolosModel",
            Er
          ]
        ],
        [
          "dpt",
          [
            "DPTModel",
            Hl
          ]
        ],
        [
          "glpn",
          [
            "GLPNModel",
            rc
          ]
        ],
        [
          "hifigan",
          [
            "SpeechT5HifiGan",
            Nd
          ]
        ],
        [
          "efficientnet",
          [
            "EfficientNetModel",
            au
          ]
        ],
        [
          "decision_transformer",
          [
            "DecisionTransformerModel",
            Wd
          ]
        ],
        [
          "patchtst",
          [
            "PatchTSTForPrediction",
            vu
          ]
        ],
        [
          "patchtsmixer",
          [
            "PatchTSMixerForPrediction",
            Mu
          ]
        ],
        [
          "mobilenet_v1",
          [
            "MobileNetV1Model",
            Vd
          ]
        ],
        [
          "mobilenet_v2",
          [
            "MobileNetV2Model",
            du
          ]
        ],
        [
          "mobilenet_v3",
          [
            "MobileNetV3Model",
            hu
          ]
        ],
        [
          "mobilenet_v4",
          [
            "MobileNetV4Model",
            Mi
          ]
        ],
        [
          "maskformer",
          [
            "MaskFormerModel",
            kd
          ]
        ],
        [
          "mgp-str",
          [
            "MgpstrForSceneTextRecognition",
            xu
          ]
        ],
        [
          "style_text_to_speech_2",
          [
            "StyleTextToSpeech2Model",
            Gc
          ]
        ]
      ]), Kd = /* @__PURE__ */ new Map([
        [
          "t5",
          [
            "T5Model",
            pn
          ]
        ],
        [
          "longt5",
          [
            "LongT5Model",
            Fn
          ]
        ],
        [
          "mt5",
          [
            "MT5Model",
            lr
          ]
        ],
        [
          "bart",
          [
            "BartModel",
            pr
          ]
        ],
        [
          "mbart",
          [
            "MBartModel",
            me
          ]
        ],
        [
          "marian",
          [
            "MarianModel",
            wc
          ]
        ],
        [
          "whisper",
          [
            "WhisperModel",
            Ki
          ]
        ],
        [
          "m2m_100",
          [
            "M2M100Model",
            xc
          ]
        ],
        [
          "blenderbot",
          [
            "BlenderbotModel",
            Nt
          ]
        ],
        [
          "blenderbot-small",
          [
            "BlenderbotSmallModel",
            Qt
          ]
        ]
      ]), yp = /* @__PURE__ */ new Map([
        [
          "mimi",
          [
            "MimiModel",
            Cu
          ]
        ],
        [
          "dac",
          [
            "DacModel",
            Du
          ]
        ],
        [
          "snac",
          [
            "SnacModel",
            Nu
          ]
        ]
      ]), Yd = /* @__PURE__ */ new Map([
        [
          "bloom",
          [
            "BloomModel",
            dl
          ]
        ],
        [
          "jais",
          [
            "JAISModel",
            ba
          ]
        ],
        [
          "gpt2",
          [
            "GPT2Model",
            ma
          ]
        ],
        [
          "gptj",
          [
            "GPTJModel",
            Ta
          ]
        ],
        [
          "gpt_bigcode",
          [
            "GPTBigCodeModel",
            hd
          ]
        ],
        [
          "gpt_neo",
          [
            "GPTNeoModel",
            ya
          ]
        ],
        [
          "gpt_neox",
          [
            "GPTNeoXModel",
            va
          ]
        ],
        [
          "codegen",
          [
            "CodeGenModel",
            Pa
          ]
        ],
        [
          "llama",
          [
            "LlamaModel",
            es
          ]
        ],
        [
          "arcee",
          [
            "ArceeModel",
            Ca
          ]
        ],
        [
          "lfm2",
          [
            "Lfm2Model",
            fd
          ]
        ],
        [
          "smollm3",
          [
            "SmolLM3Model",
            $a
          ]
        ],
        [
          "exaone",
          [
            "ExaoneModel",
            Na
          ]
        ],
        [
          "olmo",
          [
            "OlmoModel",
            ja
          ]
        ],
        [
          "olmo2",
          [
            "Olmo2Model",
            ts
          ]
        ],
        [
          "mobilellm",
          [
            "MobileLLMModel",
            za
          ]
        ],
        [
          "granite",
          [
            "GraniteModel",
            Ga
          ]
        ],
        [
          "granitemoehybrid",
          [
            "GraniteMoeHybridModel",
            qa
          ]
        ],
        [
          "cohere",
          [
            "CohereModel",
            Ka
          ]
        ],
        [
          "gemma",
          [
            "GemmaModel",
            Xa
          ]
        ],
        [
          "gemma2",
          [
            "Gemma2Model",
            Ja
          ]
        ],
        [
          "vaultgemma",
          [
            "VaultGemmaModel",
            el
          ]
        ],
        [
          "gemma3_text",
          [
            "Gemma3Model",
            ko
          ]
        ],
        [
          "helium",
          [
            "HeliumModel",
            En
          ]
        ],
        [
          "glm",
          [
            "GlmModel",
            Da
          ]
        ],
        [
          "openelm",
          [
            "OpenELMModel",
            tl
          ]
        ],
        [
          "qwen2",
          [
            "Qwen2Model",
            rl
          ]
        ],
        [
          "qwen3",
          [
            "Qwen3Model",
            ol
          ]
        ],
        [
          "phi",
          [
            "PhiModel",
            ll
          ]
        ],
        [
          "phi3",
          [
            "Phi3Model",
            cl
          ]
        ],
        [
          "mpt",
          [
            "MptModel",
            hl
          ]
        ],
        [
          "opt",
          [
            "OPTModel",
            gd
          ]
        ],
        [
          "mistral",
          [
            "MistralModel",
            Yc
          ]
        ],
        [
          "ernie4_5",
          [
            "Ernie4_5_Model",
            Jc
          ]
        ],
        [
          "starcoder2",
          [
            "Starcoder2Model",
            eu
          ]
        ],
        [
          "falcon",
          [
            "FalconModel",
            nu
          ]
        ],
        [
          "stablelm",
          [
            "StableLmModel",
            ou
          ]
        ],
        [
          "modernbert-decoder",
          [
            "ModernBertDecoderModel",
            en
          ]
        ]
      ]), Ci = /* @__PURE__ */ new Map([
        [
          "speecht5",
          [
            "SpeechT5ForSpeechToText",
            Wc
          ]
        ],
        [
          "whisper",
          [
            "WhisperForConditionalGeneration",
            cr
          ]
        ],
        [
          "lite-whisper",
          [
            "LiteWhisperForConditionalGeneration",
            Yi
          ]
        ],
        [
          "moonshine",
          [
            "MoonshineForConditionalGeneration",
            Xi
          ]
        ]
      ]), zu = /* @__PURE__ */ new Map([
        [
          "speecht5",
          [
            "SpeechT5ForTextToSpeech",
            qc
          ]
        ]
      ]), Bu = /* @__PURE__ */ new Map([
        [
          "vits",
          [
            "VitsModel",
            Ds
          ]
        ],
        [
          "musicgen",
          [
            "MusicgenForConditionalGeneration",
            Ti
          ]
        ]
      ]), Xd = /* @__PURE__ */ new Map([
        [
          "bert",
          [
            "BertForSequenceClassification",
            it
          ]
        ],
        [
          "neobert",
          [
            "NeoBertForSequenceClassification",
            Rt
          ]
        ],
        [
          "modernbert",
          [
            "ModernBertForSequenceClassification",
            zt
          ]
        ],
        [
          "roformer",
          [
            "RoFormerForSequenceClassification",
            nr
          ]
        ],
        [
          "electra",
          [
            "ElectraForSequenceClassification",
            ye
          ]
        ],
        [
          "esm",
          [
            "EsmForSequenceClassification",
            Kn
          ]
        ],
        [
          "convbert",
          [
            "ConvBertForSequenceClassification",
            ar
          ]
        ],
        [
          "camembert",
          [
            "CamembertForSequenceClassification",
            Et
          ]
        ],
        [
          "deberta",
          [
            "DebertaForSequenceClassification",
            Ve
          ]
        ],
        [
          "deberta-v2",
          [
            "DebertaV2ForSequenceClassification",
            bn
          ]
        ],
        [
          "mpnet",
          [
            "MPNetForSequenceClassification",
            yr
          ]
        ],
        [
          "albert",
          [
            "AlbertForSequenceClassification",
            ut
          ]
        ],
        [
          "distilbert",
          [
            "DistilBertForSequenceClassification",
            Tn
          ]
        ],
        [
          "roberta",
          [
            "RobertaForSequenceClassification",
            kt
          ]
        ],
        [
          "xlm",
          [
            "XLMForSequenceClassification",
            Qr
          ]
        ],
        [
          "xlm-roberta",
          [
            "XLMRobertaForSequenceClassification",
            Gi
          ]
        ],
        [
          "bart",
          [
            "BartForSequenceClassification",
            Y
          ]
        ],
        [
          "mbart",
          [
            "MBartForSequenceClassification",
            Ne
          ]
        ],
        [
          "mobilebert",
          [
            "MobileBertForSequenceClassification",
            mn
          ]
        ],
        [
          "squeezebert",
          [
            "SqueezeBertForSequenceClassification",
            Ce
          ]
        ]
      ]), Ii = /* @__PURE__ */ new Map([
        [
          "bert",
          [
            "BertForTokenClassification",
            Ge
          ]
        ],
        [
          "neobert",
          [
            "NeoBertForTokenClassification",
            pt
          ]
        ],
        [
          "modernbert",
          [
            "ModernBertForTokenClassification",
            _n
          ]
        ],
        [
          "roformer",
          [
            "RoFormerForTokenClassification",
            ur
          ]
        ],
        [
          "electra",
          [
            "ElectraForTokenClassification",
            ke
          ]
        ],
        [
          "esm",
          [
            "EsmForTokenClassification",
            bt
          ]
        ],
        [
          "convbert",
          [
            "ConvBertForTokenClassification",
            on
          ]
        ],
        [
          "camembert",
          [
            "CamembertForTokenClassification",
            jt
          ]
        ],
        [
          "deberta",
          [
            "DebertaForTokenClassification",
            Qe
          ]
        ],
        [
          "deberta-v2",
          [
            "DebertaV2ForTokenClassification",
            Pn
          ]
        ],
        [
          "mpnet",
          [
            "MPNetForTokenClassification",
            Ir
          ]
        ],
        [
          "distilbert",
          [
            "DistilBertForTokenClassification",
            Ln
          ]
        ],
        [
          "roberta",
          [
            "RobertaForTokenClassification",
            Mn
          ]
        ],
        [
          "xlm",
          [
            "XLMForTokenClassification",
            ct
          ]
        ],
        [
          "xlm-roberta",
          [
            "XLMRobertaForTokenClassification",
            fn
          ]
        ]
      ]), Oi = /* @__PURE__ */ new Map([
        [
          "t5",
          [
            "T5ForConditionalGeneration",
            $n
          ]
        ],
        [
          "longt5",
          [
            "LongT5ForConditionalGeneration",
            Bn
          ]
        ],
        [
          "mt5",
          [
            "MT5ForConditionalGeneration",
            Mr
          ]
        ],
        [
          "bart",
          [
            "BartForConditionalGeneration",
            In
          ]
        ],
        [
          "mbart",
          [
            "MBartForConditionalGeneration",
            Ae
          ]
        ],
        [
          "marian",
          [
            "MarianMTModel",
            yc
          ]
        ],
        [
          "m2m_100",
          [
            "M2M100ForConditionalGeneration",
            vc
          ]
        ],
        [
          "blenderbot",
          [
            "BlenderbotForConditionalGeneration",
            Xt
          ]
        ],
        [
          "blenderbot-small",
          [
            "BlenderbotSmallForConditionalGeneration",
            Vn
          ]
        ]
      ]), $i = /* @__PURE__ */ new Map([
        [
          "bloom",
          [
            "BloomForCausalLM",
            pl
          ]
        ],
        [
          "gpt2",
          [
            "GPT2LMHeadModel",
            ga
          ]
        ],
        [
          "jais",
          [
            "JAISLMHeadModel",
            wa
          ]
        ],
        [
          "gptj",
          [
            "GPTJForCausalLM",
            Ma
          ]
        ],
        [
          "gpt_bigcode",
          [
            "GPTBigCodeForCausalLM",
            Ea
          ]
        ],
        [
          "gpt_neo",
          [
            "GPTNeoForCausalLM",
            xa
          ]
        ],
        [
          "gpt_neox",
          [
            "GPTNeoXForCausalLM",
            lo
          ]
        ],
        [
          "codegen",
          [
            "CodeGenForCausalLM",
            Sa
          ]
        ],
        [
          "llama",
          [
            "LlamaForCausalLM",
            ka
          ]
        ],
        [
          "llama4_text",
          [
            "Llama4ForCausalLM",
            uo
          ]
        ],
        [
          "arcee",
          [
            "ArceeForCausalLM",
            Ia
          ]
        ],
        [
          "lfm2",
          [
            "Lfm2ForCausalLM",
            Oa
          ]
        ],
        [
          "smollm3",
          [
            "SmolLM3ForCausalLM",
            _d
          ]
        ],
        [
          "exaone",
          [
            "ExaoneForCausalLM",
            Ra
          ]
        ],
        [
          "olmo",
          [
            "OlmoForCausalLM",
            Va
          ]
        ],
        [
          "olmo2",
          [
            "Olmo2ForCausalLM",
            Ua
          ]
        ],
        [
          "mobilellm",
          [
            "MobileLLMForCausalLM",
            Ba
          ]
        ],
        [
          "granite",
          [
            "GraniteForCausalLM",
            Wa
          ]
        ],
        [
          "granitemoehybrid",
          [
            "GraniteMoeHybridForCausalLM",
            Ha
          ]
        ],
        [
          "cohere",
          [
            "CohereForCausalLM",
            Ya
          ]
        ],
        [
          "gemma",
          [
            "GemmaForCausalLM",
            Qa
          ]
        ],
        [
          "gemma2",
          [
            "Gemma2ForCausalLM",
            Za
          ]
        ],
        [
          "vaultgemma",
          [
            "VaultGemmaForCausalLM",
            Po
          ]
        ],
        [
          "gemma3_text",
          [
            "Gemma3ForCausalLM",
            Ao
          ]
        ],
        [
          "helium",
          [
            "HeliumForCausalLM",
            Fa
          ]
        ],
        [
          "glm",
          [
            "GlmForCausalLM",
            La
          ]
        ],
        [
          "openelm",
          [
            "OpenELMForCausalLM",
            nl
          ]
        ],
        [
          "qwen2",
          [
            "Qwen2ForCausalLM",
            sl
          ]
        ],
        [
          "qwen3",
          [
            "Qwen3ForCausalLM",
            il
          ]
        ],
        [
          "phi",
          [
            "PhiForCausalLM",
            gr
          ]
        ],
        [
          "phi3",
          [
            "Phi3ForCausalLM",
            ul
          ]
        ],
        [
          "mpt",
          [
            "MptForCausalLM",
            fl
          ]
        ],
        [
          "opt",
          [
            "OPTForCausalLM",
            _l
          ]
        ],
        [
          "mbart",
          [
            "MBartForCausalLM",
            tt
          ]
        ],
        [
          "mistral",
          [
            "MistralForCausalLM",
            Xc
          ]
        ],
        [
          "ernie4_5",
          [
            "Ernie4_5_ForCausalLM",
            Zc
          ]
        ],
        [
          "starcoder2",
          [
            "Starcoder2ForCausalLM",
            tu
          ]
        ],
        [
          "falcon",
          [
            "FalconForCausalLM",
            ru
          ]
        ],
        [
          "trocr",
          [
            "TrOCRForCausalLM",
            Kc
          ]
        ],
        [
          "stablelm",
          [
            "StableLmForCausalLM",
            iu
          ]
        ],
        [
          "modernbert-decoder",
          [
            "ModernBertDecoderForCausalLM",
            qt
          ]
        ],
        [
          "phi3_v",
          [
            "Phi3VForCausalLM",
            no
          ]
        ]
      ]), Qd = /* @__PURE__ */ new Map([
        [
          "multi_modality",
          [
            "MultiModalityCausalLM",
            wu
          ]
        ]
      ]), ju = /* @__PURE__ */ new Map([
        [
          "bert",
          [
            "BertForMaskedLM",
            je
          ]
        ],
        [
          "neobert",
          [
            "NeoBertForMaskedLM",
            Je
          ]
        ],
        [
          "modernbert",
          [
            "ModernBertForMaskedLM",
            St
          ]
        ],
        [
          "roformer",
          [
            "RoFormerForMaskedLM",
            ln
          ]
        ],
        [
          "electra",
          [
            "ElectraForMaskedLM",
            de
          ]
        ],
        [
          "esm",
          [
            "EsmForMaskedLM",
            Nn
          ]
        ],
        [
          "convbert",
          [
            "ConvBertForMaskedLM",
            tn
          ]
        ],
        [
          "camembert",
          [
            "CamembertForMaskedLM",
            Bt
          ]
        ],
        [
          "deberta",
          [
            "DebertaForMaskedLM",
            Re
          ]
        ],
        [
          "deberta-v2",
          [
            "DebertaV2ForMaskedLM",
            dn
          ]
        ],
        [
          "mpnet",
          [
            "MPNetForMaskedLM",
            Xe
          ]
        ],
        [
          "albert",
          [
            "AlbertForMaskedLM",
            Tt
          ]
        ],
        [
          "distilbert",
          [
            "DistilBertForMaskedLM",
            Kt
          ]
        ],
        [
          "roberta",
          [
            "RobertaForMaskedLM",
            sn
          ]
        ],
        [
          "xlm",
          [
            "XLMWithLMHeadModel",
            Ht
          ]
        ],
        [
          "xlm-roberta",
          [
            "XLMRobertaForMaskedLM",
            Ui
          ]
        ],
        [
          "mobilebert",
          [
            "MobileBertForMaskedLM",
            On
          ]
        ],
        [
          "squeezebert",
          [
            "SqueezeBertForMaskedLM",
            Pe
          ]
        ]
      ]), Jd = /* @__PURE__ */ new Map([
        [
          "bert",
          [
            "BertForQuestionAnswering",
            lt
          ]
        ],
        [
          "neobert",
          [
            "NeoBertForQuestionAnswering",
            At
          ]
        ],
        [
          "roformer",
          [
            "RoFormerForQuestionAnswering",
            rr
          ]
        ],
        [
          "electra",
          [
            "ElectraForQuestionAnswering",
            Ue
          ]
        ],
        [
          "convbert",
          [
            "ConvBertForQuestionAnswering",
            sr
          ]
        ],
        [
          "camembert",
          [
            "CamembertForQuestionAnswering",
            ie
          ]
        ],
        [
          "deberta",
          [
            "DebertaForQuestionAnswering",
            _t
          ]
        ],
        [
          "deberta-v2",
          [
            "DebertaV2ForQuestionAnswering",
            Sn
          ]
        ],
        [
          "mpnet",
          [
            "MPNetForQuestionAnswering",
            Fe
          ]
        ],
        [
          "albert",
          [
            "AlbertForQuestionAnswering",
            It
          ]
        ],
        [
          "distilbert",
          [
            "DistilBertForQuestionAnswering",
            Xn
          ]
        ],
        [
          "roberta",
          [
            "RobertaForQuestionAnswering",
            xr
          ]
        ],
        [
          "xlm",
          [
            "XLMForQuestionAnswering",
            Wt
          ]
        ],
        [
          "xlm-roberta",
          [
            "XLMRobertaForQuestionAnswering",
            Wi
          ]
        ],
        [
          "mobilebert",
          [
            "MobileBertForQuestionAnswering",
            Gn
          ]
        ],
        [
          "squeezebert",
          [
            "SqueezeBertForQuestionAnswering",
            $e
          ]
        ]
      ]), Fi = /* @__PURE__ */ new Map([
        [
          "vision-encoder-decoder",
          [
            "VisionEncoderDecoderModel",
            Js
          ]
        ],
        [
          "idefics3",
          [
            "Idefics3ForConditionalGeneration",
            ms
          ]
        ],
        [
          "smolvlm",
          [
            "SmolVLMForConditionalGeneration",
            to
          ]
        ]
      ]), Vu = /* @__PURE__ */ new Map([
        [
          "llava",
          [
            "LlavaForConditionalGeneration",
            _s
          ]
        ],
        [
          "llava_onevision",
          [
            "LlavaOnevisionForConditionalGeneration",
            Qi
          ]
        ],
        [
          "moondream1",
          [
            "Moondream1ForConditionalGeneration",
            Ji
          ]
        ],
        [
          "florence2",
          [
            "Florence2ForConditionalGeneration",
            ea
          ]
        ],
        [
          "qwen2-vl",
          [
            "Qwen2VLForConditionalGeneration",
            md
          ]
        ],
        [
          "idefics3",
          [
            "Idefics3ForConditionalGeneration",
            ms
          ]
        ],
        [
          "smolvlm",
          [
            "SmolVLMForConditionalGeneration",
            to
          ]
        ],
        [
          "paligemma",
          [
            "PaliGemmaForConditionalGeneration",
            na
          ]
        ],
        [
          "llava_qwen2",
          [
            "LlavaQwen2ForCausalLM",
            _r
          ]
        ],
        [
          "gemma3n",
          [
            "Gemma3nForConditionalGeneration",
            eo
          ]
        ]
      ]), Uu = /* @__PURE__ */ new Map([
        [
          "ultravox",
          [
            "UltravoxModel",
            Vs
          ]
        ],
        [
          "voxtral",
          [
            "VoxtralForConditionalGeneration",
            Su
          ]
        ]
      ]), xp = /* @__PURE__ */ new Map([
        [
          "vision-encoder-decoder",
          [
            "VisionEncoderDecoderModel",
            Js
          ]
        ]
      ]), Gu = /* @__PURE__ */ new Map([
        [
          "vit",
          [
            "ViTForImageClassification",
            gl
          ]
        ],
        [
          "ijepa",
          [
            "IJepaForImageClassification",
            bd
          ]
        ],
        [
          "pvt",
          [
            "PvtForImageClassification",
            Lr
          ]
        ],
        [
          "vit_msn",
          [
            "ViTMSNForImageClassification",
            wd
          ]
        ],
        [
          "fastvit",
          [
            "FastViTForImageClassification",
            vl
          ]
        ],
        [
          "mobilevit",
          [
            "MobileViTForImageClassification",
            Tl
          ]
        ],
        [
          "mobilevitv2",
          [
            "MobileViTV2ForImageClassification",
            Ml
          ]
        ],
        [
          "beit",
          [
            "BeitForImageClassification",
            kl
          ]
        ],
        [
          "deit",
          [
            "DeiTForImageClassification",
            jl
          ]
        ],
        [
          "hiera",
          [
            "HieraForImageClassification",
            Md
          ]
        ],
        [
          "convnext",
          [
            "ConvNextForImageClassification",
            Cd
          ]
        ],
        [
          "convnextv2",
          [
            "ConvNextV2ForImageClassification",
            lc
          ]
        ],
        [
          "dinov2",
          [
            "Dinov2ForImageClassification",
            cc
          ]
        ],
        [
          "dinov2_with_registers",
          [
            "Dinov2WithRegistersForImageClassification",
            dc
          ]
        ],
        [
          "resnet",
          [
            "ResNetForImageClassification",
            Gl
          ]
        ],
        [
          "swin",
          [
            "SwinForImageClassification",
            Ed
          ]
        ],
        [
          "segformer",
          [
            "SegformerForImageClassification",
            su
          ]
        ],
        [
          "efficientnet",
          [
            "EfficientNetForImageClassification",
            lu
          ]
        ],
        [
          "mobilenet_v1",
          [
            "MobileNetV1ForImageClassification",
            cu
          ]
        ],
        [
          "mobilenet_v2",
          [
            "MobileNetV2ForImageClassification",
            Ud
          ]
        ],
        [
          "mobilenet_v3",
          [
            "MobileNetV3ForImageClassification",
            Gd
          ]
        ],
        [
          "mobilenet_v4",
          [
            "MobileNetV4ForImageClassification",
            _u
          ]
        ]
      ]), Zd = /* @__PURE__ */ new Map([
        [
          "detr",
          [
            "DetrForObjectDetection",
            Al
          ]
        ],
        [
          "rt_detr",
          [
            "RTDetrForObjectDetection",
            Ps
          ]
        ],
        [
          "rt_detr_v2",
          [
            "RTDetrV2ForObjectDetection",
            Fl
          ]
        ],
        [
          "rf_detr",
          [
            "RFDetrForObjectDetection",
            vd
          ]
        ],
        [
          "d_fine",
          [
            "DFineForObjectDetection",
            Xo
          ]
        ],
        [
          "table-transformer",
          [
            "TableTransformerForObjectDetection",
            Jo
          ]
        ],
        [
          "yolos",
          [
            "YolosForObjectDetection",
            Nr
          ]
        ]
      ]), Wu = /* @__PURE__ */ new Map([
        [
          "owlvit",
          [
            "OwlViTForObjectDetection",
            El
          ]
        ],
        [
          "owlv2",
          [
            "Owlv2ForObjectDetection",
            Pl
          ]
        ],
        [
          "grounding-dino",
          [
            "GroundingDinoForObjectDetection",
            $d
          ]
        ]
      ]), ps = /* @__PURE__ */ new Map([
        [
          "detr",
          [
            "DetrForSegmentation",
            Ho
          ]
        ],
        [
          "clipseg",
          [
            "CLIPSegForImageSegmentation",
            _a
          ]
        ]
      ]), qu = /* @__PURE__ */ new Map([
        [
          "segformer",
          [
            "SegformerForSemanticSegmentation",
            vi
          ]
        ],
        [
          "sapiens",
          [
            "SapiensForSemanticSegmentation",
            Xl
          ]
        ],
        [
          "swin",
          [
            "SwinForSemanticSegmentation",
            As
          ]
        ],
        [
          "mobilenet_v1",
          [
            "MobileNetV1ForSemanticSegmentation",
            uu
          ]
        ],
        [
          "mobilenet_v2",
          [
            "MobileNetV2ForSemanticSegmentation",
            pu
          ]
        ],
        [
          "mobilenet_v3",
          [
            "MobileNetV3ForSemanticSegmentation",
            fu
          ]
        ],
        [
          "mobilenet_v4",
          [
            "MobileNetV4ForSemanticSegmentation",
            mu
          ]
        ]
      ]), Hu = /* @__PURE__ */ new Map([
        [
          "detr",
          [
            "DetrForSegmentation",
            Ho
          ]
        ],
        [
          "maskformer",
          [
            "MaskFormerForInstanceSegmentation",
            nc
          ]
        ]
      ]), Ku = /* @__PURE__ */ new Map([
        [
          "sam",
          [
            "SamModel",
            gc
          ]
        ]
      ]), Yu = /* @__PURE__ */ new Map([
        [
          "wav2vec2",
          [
            "Wav2Vec2ForCTC",
            ir
          ]
        ],
        [
          "wav2vec2-bert",
          [
            "Wav2Vec2BertForCTC",
            Lc
          ]
        ],
        [
          "unispeech",
          [
            "UniSpeechForCTC",
            Ac
          ]
        ],
        [
          "unispeech-sat",
          [
            "UniSpeechSatForCTC",
            Oc
          ]
        ],
        [
          "wavlm",
          [
            "WavLMForCTC",
            Bc
          ]
        ],
        [
          "hubert",
          [
            "HubertForCTC",
            Rc
          ]
        ]
      ]), Xu = /* @__PURE__ */ new Map([
        [
          "wav2vec2",
          [
            "Wav2Vec2ForSequenceClassification",
            Tc
          ]
        ],
        [
          "wav2vec2-bert",
          [
            "Wav2Vec2BertForSequenceClassification",
            Nc
          ]
        ],
        [
          "unispeech",
          [
            "UniSpeechForSequenceClassification",
            Cc
          ]
        ],
        [
          "unispeech-sat",
          [
            "UniSpeechSatForSequenceClassification",
            $c
          ]
        ],
        [
          "wavlm",
          [
            "WavLMForSequenceClassification",
            jc
          ]
        ],
        [
          "hubert",
          [
            "HubertForSequenceClassification",
            zc
          ]
        ],
        [
          "audio-spectrogram-transformer",
          [
            "ASTForAudioClassification",
            Hi
          ]
        ]
      ]), ep = /* @__PURE__ */ new Map([
        [
          "wavlm",
          [
            "WavLMForXVector",
            Vc
          ]
        ]
      ]), Qu = /* @__PURE__ */ new Map([
        [
          "unispeech-sat",
          [
            "UniSpeechSatForAudioFrameClassification",
            Fc
          ]
        ],
        [
          "wavlm",
          [
            "WavLMForAudioFrameClassification",
            Ld
          ]
        ],
        [
          "wav2vec2",
          [
            "Wav2Vec2ForAudioFrameClassification",
            Mc
          ]
        ],
        [
          "pyannote",
          [
            "PyAnnoteForAudioFrameClassification",
            as
          ]
        ]
      ]), Gs = /* @__PURE__ */ new Map([
        [
          "vitmatte",
          [
            "VitMatteForImageMatting",
            Vo
          ]
        ]
      ]), tp = /* @__PURE__ */ new Map([
        [
          "patchtst",
          [
            "PatchTSTForPrediction",
            Tu
          ]
        ],
        [
          "patchtsmixer",
          [
            "PatchTSMixerForPrediction",
            Eu
          ]
        ]
      ]), Ju = /* @__PURE__ */ new Map([
        [
          "swin2sr",
          [
            "Swin2SRForImageSuperResolution",
            ql
          ]
        ]
      ]), np = /* @__PURE__ */ new Map([
        [
          "dpt",
          [
            "DPTForDepthEstimation",
            Kl
          ]
        ],
        [
          "depth_anything",
          [
            "DepthAnythingForDepthEstimation",
            Yl
          ]
        ],
        [
          "glpn",
          [
            "GLPNForDepthEstimation",
            sc
          ]
        ],
        [
          "sapiens",
          [
            "SapiensForDepthEstimation",
            Pd
          ]
        ],
        [
          "depth_pro",
          [
            "DepthProForDepthEstimation",
            Jl
          ]
        ],
        [
          "metric3d",
          [
            "Metric3DForDepthEstimation",
            ec
          ]
        ],
        [
          "metric3dv2",
          [
            "Metric3Dv2ForDepthEstimation",
            tc
          ]
        ]
      ]), Zu = /* @__PURE__ */ new Map([
        [
          "sapiens",
          [
            "SapiensForNormalEstimation",
            Ql
          ]
        ]
      ]), Di = /* @__PURE__ */ new Map([
        [
          "vitpose",
          [
            "VitPoseForPoseEstimation",
            Dr
          ]
        ]
      ]), Li = /* @__PURE__ */ new Map([
        [
          "clip",
          [
            "CLIPVisionModelWithProjection",
            aa
          ]
        ],
        [
          "siglip",
          [
            "SiglipVisionModel",
            la
          ]
        ],
        [
          "jina_clip",
          [
            "JinaCLIPVisionModel",
            ha
          ]
        ]
      ]), Ar = [
        [
          Hd,
          A.EncoderOnly
        ],
        [
          Kd,
          A.EncoderDecoder
        ],
        [
          Yd,
          A.DecoderOnly
        ],
        [
          yp,
          A.AutoEncoder
        ],
        [
          Xd,
          A.EncoderOnly
        ],
        [
          Ii,
          A.EncoderOnly
        ],
        [
          Oi,
          A.Seq2Seq
        ],
        [
          Ci,
          A.Seq2Seq
        ],
        [
          $i,
          A.DecoderOnly
        ],
        [
          Qd,
          A.MultiModality
        ],
        [
          ju,
          A.EncoderOnly
        ],
        [
          Jd,
          A.EncoderOnly
        ],
        [
          Fi,
          A.Vision2Seq
        ],
        [
          Vu,
          A.ImageTextToText
        ],
        [
          Uu,
          A.AudioTextToText
        ],
        [
          Gu,
          A.EncoderOnly
        ],
        [
          ps,
          A.EncoderOnly
        ],
        [
          Hu,
          A.EncoderOnly
        ],
        [
          qu,
          A.EncoderOnly
        ],
        [
          Gs,
          A.EncoderOnly
        ],
        [
          tp,
          A.EncoderOnly
        ],
        [
          Ju,
          A.EncoderOnly
        ],
        [
          np,
          A.EncoderOnly
        ],
        [
          Zu,
          A.EncoderOnly
        ],
        [
          Di,
          A.EncoderOnly
        ],
        [
          Zd,
          A.EncoderOnly
        ],
        [
          Wu,
          A.EncoderOnly
        ],
        [
          Ku,
          A.MaskGeneration
        ],
        [
          Yu,
          A.EncoderOnly
        ],
        [
          Xu,
          A.EncoderOnly
        ],
        [
          zu,
          A.Seq2Seq
        ],
        [
          Bu,
          A.EncoderOnly
        ],
        [
          ep,
          A.EncoderOnly
        ],
        [
          Qu,
          A.EncoderOnly
        ],
        [
          Li,
          A.EncoderOnly
        ]
      ];
      for (const [b, T] of Ar)
        for (const [S, I] of b.values())
          C.set(S, T), D.set(I, S), F.set(S, I);
      const rp = [
        [
          "MusicgenForConditionalGeneration",
          Ti,
          A.Musicgen
        ],
        [
          "Phi3VForCausalLM",
          no,
          A.Phi3V
        ],
        [
          "CLIPTextModelWithProjection",
          pd,
          A.EncoderOnly
        ],
        [
          "SiglipTextModel",
          mr,
          A.EncoderOnly
        ],
        [
          "JinaCLIPTextModel",
          pa,
          A.EncoderOnly
        ],
        [
          "ClapTextModelWithProjection",
          cs,
          A.EncoderOnly
        ],
        [
          "ClapAudioModelWithProjection",
          yi,
          A.EncoderOnly
        ],
        [
          "DacEncoderModel",
          qd,
          A.EncoderOnly
        ],
        [
          "DacDecoderModel",
          Lu,
          A.EncoderOnly
        ],
        [
          "MimiEncoderModel",
          Iu,
          A.EncoderOnly
        ],
        [
          "MimiDecoderModel",
          Ou,
          A.EncoderOnly
        ],
        [
          "SnacEncoderModel",
          Ai,
          A.EncoderOnly
        ],
        [
          "SnacDecoderModel",
          Ru,
          A.EncoderOnly
        ],
        [
          "Gemma3nForConditionalGeneration",
          eo,
          A.ImageAudioTextToText
        ]
      ];
      for (const [b, T, S] of rp)
        C.set(b, S), D.set(T, b), F.set(b, T);
      const Ni = /* @__PURE__ */ new Map([
        [
          "modnet",
          ps
        ],
        [
          "birefnet",
          ps
        ],
        [
          "isnet",
          ps
        ],
        [
          "ben",
          ps
        ]
      ]);
      for (const [b, T] of Ni.entries())
        T.set(b, [
          "PreTrainedModel",
          le
        ]), C.set(b, A.EncoderOnly), D.set(le, b), F.set(b, le);
      class Ri extends An {
      }
      __publicField(Ri, "MODEL_CLASS_MAPPINGS", Ar.map((T) => T[0]));
      __publicField(Ri, "BASE_IF_FAIL", true);
      class ed extends An {
      }
      __publicField(ed, "MODEL_CLASS_MAPPINGS", [
        Xd
      ]);
      class td extends An {
      }
      __publicField(td, "MODEL_CLASS_MAPPINGS", [
        Ii
      ]);
      class nd extends An {
      }
      __publicField(nd, "MODEL_CLASS_MAPPINGS", [
        Oi
      ]);
      class rd extends An {
      }
      __publicField(rd, "MODEL_CLASS_MAPPINGS", [
        Ci
      ]);
      class sd extends An {
      }
      __publicField(sd, "MODEL_CLASS_MAPPINGS", [
        zu
      ]);
      class od extends An {
      }
      __publicField(od, "MODEL_CLASS_MAPPINGS", [
        Bu
      ]);
      class sp extends An {
      }
      __publicField(sp, "MODEL_CLASS_MAPPINGS", [
        $i
      ]);
      class Br extends An {
      }
      __publicField(Br, "MODEL_CLASS_MAPPINGS", [
        ju
      ]);
      class wr extends An {
      }
      __publicField(wr, "MODEL_CLASS_MAPPINGS", [
        Jd
      ]);
      class hs extends An {
      }
      __publicField(hs, "MODEL_CLASS_MAPPINGS", [
        Fi
      ]);
      class Ws extends An {
      }
      __publicField(Ws, "MODEL_CLASS_MAPPINGS", [
        Gu
      ]);
      class qs extends An {
      }
      __publicField(qs, "MODEL_CLASS_MAPPINGS", [
        ps
      ]);
      class zi extends An {
      }
      __publicField(zi, "MODEL_CLASS_MAPPINGS", [
        qu
      ]);
      class ad extends An {
      }
      __publicField(ad, "MODEL_CLASS_MAPPINGS", [
        Hu
      ]);
      class Bi extends An {
      }
      __publicField(Bi, "MODEL_CLASS_MAPPINGS", [
        Zd
      ]);
      class Hr extends An {
      }
      __publicField(Hr, "MODEL_CLASS_MAPPINGS", [
        Wu
      ]);
      class Kr extends An {
      }
      __publicField(Kr, "MODEL_CLASS_MAPPINGS", [
        Ku
      ]);
      class op extends An {
      }
      __publicField(op, "MODEL_CLASS_MAPPINGS", [
        Yu
      ]);
      class ip extends An {
      }
      __publicField(ip, "MODEL_CLASS_MAPPINGS", [
        Xu
      ]);
      class ap extends An {
      }
      __publicField(ap, "MODEL_CLASS_MAPPINGS", [
        ep
      ]);
      class lp extends An {
      }
      __publicField(lp, "MODEL_CLASS_MAPPINGS", [
        Qu
      ]);
      class cp extends An {
      }
      __publicField(cp, "MODEL_CLASS_MAPPINGS", [
        xp
      ]);
      class up extends An {
      }
      __publicField(up, "MODEL_CLASS_MAPPINGS", [
        Gs
      ]);
      class dp extends An {
      }
      __publicField(dp, "MODEL_CLASS_MAPPINGS", [
        Ju
      ]);
      class pp extends An {
      }
      __publicField(pp, "MODEL_CLASS_MAPPINGS", [
        np
      ]);
      class hp extends An {
      }
      __publicField(hp, "MODEL_CLASS_MAPPINGS", [
        Zu
      ]);
      class ld extends An {
      }
      __publicField(ld, "MODEL_CLASS_MAPPINGS", [
        Di
      ]);
      class fp extends An {
      }
      __publicField(fp, "MODEL_CLASS_MAPPINGS", [
        Li
      ]);
      class _p extends An {
      }
      __publicField(_p, "MODEL_CLASS_MAPPINGS", [
        Vu
      ]);
      class vp extends An {
      }
      __publicField(vp, "MODEL_CLASS_MAPPINGS", [
        Uu
      ]);
      class mp extends De {
        constructor({ logits: T, past_key_values: S, encoder_outputs: I, decoder_attentions: O = null, cross_attentions: L = null }) {
          super(), this.logits = T, this.past_key_values = S, this.encoder_outputs = I, this.decoder_attentions = O, this.cross_attentions = L;
        }
      }
      class un extends De {
        constructor({ logits: T, ...S }) {
          super(), this.logits = T;
          const I = Object.values(S);
          I.length > 0 && (this.attentions = I);
        }
      }
      class ji extends De {
        constructor({ logits: T, embeddings: S }) {
          super(), this.logits = T, this.embeddings = S;
        }
      }
      class Wn extends De {
        constructor({ logits: T }) {
          super(), this.logits = T;
        }
      }
      class Jn extends De {
        constructor({ logits: T }) {
          super(), this.logits = T;
        }
      }
      class Zn extends De {
        constructor({ start_logits: T, end_logits: S }) {
          super(), this.start_logits = T, this.end_logits = S;
        }
      }
      class Yr extends De {
        constructor({ logits: T }) {
          super(), this.logits = T;
        }
      }
      class Tp extends De {
        constructor({ logits: T, past_key_values: S }) {
          super(), this.logits = T, this.past_key_values = S;
        }
      }
      class o extends De {
        constructor({ alphas: T }) {
          super(), this.alphas = T;
        }
      }
      class v extends De {
        constructor({ waveform: T, spectrogram: S }) {
          super(), this.waveform = T, this.spectrogram = S;
        }
      }
    },
    "./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ASTFeatureExtractor: () => f
      });
      var s = t("./src/base/feature_extraction_utils.js");
      t("./src/utils/tensor.js");
      var l = t("./src/utils/audio.js");
      class f extends s.FeatureExtractor {
        constructor(w) {
          super(w);
          const g = this.config.sampling_rate, _ = (0, l.mel_filter_bank)(257, this.config.num_mel_bins, 20, Math.floor(g / 2), g, null, "kaldi", true);
          this.mel_filters = _, this.window = (0, l.window_function)(400, "hann", {
            periodic: false
          }), this.mean = this.config.mean, this.std = this.config.std;
        }
        async _extract_fbank_features(w, g) {
          return (0, l.spectrogram)(w, this.window, 400, 160, {
            fft_length: 512,
            power: 2,
            center: false,
            preemphasis: 0.97,
            mel_filters: this.mel_filters,
            log_mel: "log",
            mel_floor: 1192092955078125e-22,
            remove_dc_offset: true,
            max_num_frames: g,
            transpose: true
          });
        }
        async _call(w) {
          (0, s.validate_audio_inputs)(w, "ASTFeatureExtractor");
          const g = await this._extract_fbank_features(w, this.config.max_length);
          if (this.config.do_normalize) {
            const _ = this.std * 2, h = g.data;
            for (let r = 0; r < h.length; ++r)
              h[r] = (h[r] - this.mean) / _;
          }
          return {
            input_values: g.unsqueeze_(0)
          };
        }
      }
    },
    "./src/models/auto/feature_extraction_auto.js": (i, e, t) => {
      t.r(e), t.d(e, {
        AutoFeatureExtractor: () => d
      });
      var s = t("./src/utils/constants.js"), l = t("./src/utils/hub.js");
      t("./src/base/feature_extraction_utils.js");
      var f = t("./src/models/feature_extractors.js");
      class d {
        static async from_pretrained(g, _ = {}) {
          const h = await (0, l.getModelJSON)(g, s.FEATURE_EXTRACTOR_NAME, true, _), r = h.feature_extractor_type, n = f[r];
          if (!n)
            throw new Error(`Unknown feature_extractor_type: '${r}'. Please report this at ${s.GITHUB_ISSUE_URL}.`);
          return new n(h);
        }
      }
    },
    "./src/models/auto/image_processing_auto.js": (i, e, t) => {
      t.r(e), t.d(e, {
        AutoImageProcessor: () => w
      });
      var s = t("./src/utils/constants.js"), l = t("./src/utils/hub.js"), f = t("./src/base/image_processors_utils.js"), d = t("./src/models/image_processors.js");
      class w {
        static async from_pretrained(_, h = {}) {
          const r = await (0, l.getModelJSON)(_, s.IMAGE_PROCESSOR_NAME, true, h), n = r.image_processor_type ?? r.feature_extractor_type;
          let u = d[n?.replace(/Fast$/, "")];
          return u || (n !== void 0 && console.warn(`Image processor type '${n}' not found, assuming base ImageProcessor. Please report this at ${s.GITHUB_ISSUE_URL}.`), u = f.ImageProcessor), new u(r);
        }
      }
    },
    "./src/models/auto/processing_auto.js": (i, e, t) => {
      t.r(e), t.d(e, {
        AutoProcessor: () => _
      });
      var s = t("./src/utils/constants.js"), l = t("./src/utils/hub.js"), f = t("./src/base/processing_utils.js"), d = t("./src/models/processors.js"), w = t("./src/models/image_processors.js"), g = t("./src/models/feature_extractors.js");
      class _ {
        static async from_pretrained(r, n = {}) {
          const u = await (0, l.getModelJSON)(r, s.IMAGE_PROCESSOR_NAME, true, n), { image_processor_type: p, feature_extractor_type: M, processor_class: P } = u;
          if (P && d[P])
            return d[P].from_pretrained(r, n);
          if (!p && !M)
            throw new Error("No `image_processor_type` or `feature_extractor_type` found in the config.");
          const E = {};
          if (p) {
            const $ = w[p.replace(/Fast$/, "")];
            if (!$)
              throw new Error(`Unknown image_processor_type: '${p}'.`);
            E.image_processor = new $(u);
          }
          if (M) {
            const $ = w[M];
            if ($)
              E.image_processor = new $(u);
            else {
              const A = g[M];
              if (!A)
                throw new Error(`Unknown feature_extractor_type: '${M}'.`);
              E.feature_extractor = new A(u);
            }
          }
          const k = {};
          return new f.Processor(k, E, null);
        }
      }
    },
    "./src/models/beit/image_processing_beit.js": (i, e, t) => {
      t.r(e), t.d(e, {
        BeitFeatureExtractor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
    },
    "./src/models/bit/image_processing_bit.js": (i, e, t) => {
      t.r(e), t.d(e, {
        BitImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
    },
    "./src/models/chinese_clip/image_processing_chinese_clip.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ChineseCLIPFeatureExtractor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
    },
    "./src/models/clap/feature_extraction_clap.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ClapFeatureExtractor: () => f
      });
      var s = t("./src/base/feature_extraction_utils.js");
      t("./src/utils/tensor.js");
      var l = t("./src/utils/audio.js");
      class f extends s.FeatureExtractor {
        constructor(w) {
          super(w), this.mel_filters = (0, l.mel_filter_bank)(this.config.nb_frequency_bins, this.config.feature_size, this.config.frequency_min, this.config.frequency_max, this.config.sampling_rate, null, "htk"), this.mel_filters_slaney = (0, l.mel_filter_bank)(this.config.nb_frequency_bins, this.config.feature_size, this.config.frequency_min, this.config.frequency_max, this.config.sampling_rate, "slaney", "slaney"), this.window = (0, l.window_function)(this.config.fft_window_size, "hann");
        }
        async _get_input_mel(w, g, _, h) {
          let r;
          const n = w.length - g;
          if (n > 0)
            if (_ === "rand_trunc") {
              const u = Math.floor(Math.random() * (n + 1));
              w = w.subarray(u, u + g), r = await this._extract_fbank_features(w, this.mel_filters_slaney, this.config.nb_max_samples);
            } else
              throw new Error(`Truncation strategy "${_}" not implemented`);
          else {
            if (n < 0) {
              let u = new Float64Array(g);
              if (u.set(w), h === "repeat")
                for (let p = w.length; p < g; p += w.length)
                  u.set(w.subarray(0, Math.min(w.length, g - p)), p);
              else if (h === "repeatpad")
                for (let p = w.length; p < -n; p += w.length)
                  u.set(w, p);
              w = u;
            }
            if (_ === "fusion")
              throw new Error(`Truncation strategy "${_}" not implemented`);
            r = await this._extract_fbank_features(w, this.mel_filters_slaney, this.config.nb_max_samples);
          }
          return r.unsqueeze_(0);
        }
        async _extract_fbank_features(w, g, _ = null) {
          return (0, l.spectrogram)(w, this.window, this.config.fft_window_size, this.config.hop_length, {
            power: 2,
            mel_filters: g,
            log_mel: "dB",
            max_num_frames: _,
            do_pad: false,
            transpose: true
          });
        }
        async _call(w, { max_length: g = null } = {}) {
          return (0, s.validate_audio_inputs)(w, "ClapFeatureExtractor"), {
            input_features: (await this._get_input_mel(w, g ?? this.config.nb_max_samples, this.config.truncation, this.config.padding)).unsqueeze_(0)
          };
        }
      }
    },
    "./src/models/clip/image_processing_clip.js": (i, e, t) => {
      t.r(e), t.d(e, {
        CLIPFeatureExtractor: () => f,
        CLIPImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/convnext/image_processing_convnext.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ConvNextFeatureExtractor: () => f,
        ConvNextImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        constructor(w) {
          super(w), this.crop_pct = this.config.crop_pct ?? 224 / 256;
        }
        async resize(w) {
          const g = this.size?.shortest_edge;
          if (g === void 0)
            throw new Error("Size dictionary must contain 'shortest_edge' key.");
          if (g < 384) {
            const _ = Math.floor(g / this.crop_pct), [h, r] = this.get_resize_output_image_size(w, {
              shortest_edge: _
            });
            w = await w.resize(h, r, {
              resample: this.resample
            }), w = await w.center_crop(g, g);
          } else
            w = await w.resize(g, g, {
              resample: this.resample
            });
          return w;
        }
      }
      class f extends l {
      }
    },
    "./src/models/dac/feature_extraction_dac.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DacFeatureExtractor: () => l
      });
      var s = t("./src/models/encodec/feature_extraction_encodec.js");
      class l extends s.EncodecFeatureExtractor {
      }
    },
    "./src/models/deit/image_processing_deit.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DeiTFeatureExtractor: () => f,
        DeiTImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/detr/image_processing_detr.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DetrFeatureExtractor: () => d,
        DetrImageProcessor: () => f
      });
      var s = t("./src/base/image_processors_utils.js"), l = t("./src/utils/tensor.js");
      class f extends s.ImageProcessor {
        async _call(g) {
          const _ = await super._call(g), h = [
            _.pixel_values.dims[0],
            64,
            64
          ], r = (0, l.full)(h, 1n);
          return {
            ..._,
            pixel_mask: r
          };
        }
        post_process_object_detection(...g) {
          return (0, s.post_process_object_detection)(...g);
        }
        post_process_panoptic_segmentation(...g) {
          return (0, s.post_process_panoptic_segmentation)(...g);
        }
        post_process_instance_segmentation(...g) {
          return (0, s.post_process_instance_segmentation)(...g);
        }
      }
      class d extends f {
      }
    },
    "./src/models/dinov3_vit/image_processing_dinov3_vit.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DINOv3ViTImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
    },
    "./src/models/donut/image_processing_donut.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DonutFeatureExtractor: () => f,
        DonutImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        pad_image(w, g, _, h = {}) {
          const [r, n, u] = g;
          let p = this.image_mean;
          Array.isArray(this.image_mean) || (p = new Array(u).fill(p));
          let M = this.image_std;
          Array.isArray(M) || (M = new Array(u).fill(p));
          const P = p.map((E, k) => -E / M[k]);
          return super.pad_image(w, g, _, {
            center: true,
            constant_values: P,
            ...h
          });
        }
      }
      class f extends l {
      }
    },
    "./src/models/dpt/image_processing_dpt.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DPTFeatureExtractor: () => f,
        DPTImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/efficientnet/image_processing_efficientnet.js": (i, e, t) => {
      t.r(e), t.d(e, {
        EfficientNetImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        constructor(d) {
          super(d), this.include_top = this.config.include_top ?? true, this.include_top && (this.image_std = this.image_std.map((w) => w * w));
        }
      }
    },
    "./src/models/encodec/feature_extraction_encodec.js": (i, e, t) => {
      t.r(e), t.d(e, {
        EncodecFeatureExtractor: () => f
      });
      var s = t("./src/base/feature_extraction_utils.js"), l = t("./src/utils/tensor.js");
      class f extends s.FeatureExtractor {
        async _call(w) {
          (0, s.validate_audio_inputs)(w, "EncodecFeatureExtractor"), w instanceof Float64Array && (w = new Float32Array(w));
          const g = this.config.feature_size;
          if (w.length % g !== 0)
            throw new Error(`The length of the audio data must be a multiple of the number of channels (${g}).`);
          const _ = [
            1,
            g,
            w.length / g
          ];
          return {
            input_values: new l.Tensor("float32", w, _)
          };
        }
      }
    },
    "./src/models/feature_extractors.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ASTFeatureExtractor: () => s.ASTFeatureExtractor,
        ClapFeatureExtractor: () => f.ClapFeatureExtractor,
        DacFeatureExtractor: () => d.DacFeatureExtractor,
        EncodecFeatureExtractor: () => l.EncodecFeatureExtractor,
        Gemma3nAudioFeatureExtractor: () => w.Gemma3nAudioFeatureExtractor,
        ImageFeatureExtractor: () => P.ImageProcessor,
        MoonshineFeatureExtractor: () => g.MoonshineFeatureExtractor,
        PyAnnoteFeatureExtractor: () => _.PyAnnoteFeatureExtractor,
        SeamlessM4TFeatureExtractor: () => h.SeamlessM4TFeatureExtractor,
        SnacFeatureExtractor: () => r.SnacFeatureExtractor,
        SpeechT5FeatureExtractor: () => n.SpeechT5FeatureExtractor,
        Wav2Vec2FeatureExtractor: () => u.Wav2Vec2FeatureExtractor,
        WeSpeakerFeatureExtractor: () => p.WeSpeakerFeatureExtractor,
        WhisperFeatureExtractor: () => M.WhisperFeatureExtractor
      });
      var s = t("./src/models/audio_spectrogram_transformer/feature_extraction_audio_spectrogram_transformer.js"), l = t("./src/models/encodec/feature_extraction_encodec.js"), f = t("./src/models/clap/feature_extraction_clap.js"), d = t("./src/models/dac/feature_extraction_dac.js"), w = t("./src/models/gemma3n/feature_extraction_gemma3n.js"), g = t("./src/models/moonshine/feature_extraction_moonshine.js"), _ = t("./src/models/pyannote/feature_extraction_pyannote.js"), h = t("./src/models/seamless_m4t/feature_extraction_seamless_m4t.js"), r = t("./src/models/snac/feature_extraction_snac.js"), n = t("./src/models/speecht5/feature_extraction_speecht5.js"), u = t("./src/models/wav2vec2/feature_extraction_wav2vec2.js"), p = t("./src/models/wespeaker/feature_extraction_wespeaker.js"), M = t("./src/models/whisper/feature_extraction_whisper.js"), P = t("./src/base/image_processors_utils.js");
    },
    "./src/models/florence2/processing_florence2.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Florence2Processor: () => d
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js");
      class d extends s.Processor {
        constructor(g, _, h) {
          super(g, _, h);
          const { tasks_answer_post_processing_type: r, task_prompts_without_inputs: n, task_prompts_with_input: u } = this.image_processor.config;
          this.tasks_answer_post_processing_type = new Map(Object.entries(r ?? {})), this.task_prompts_without_inputs = new Map(Object.entries(n ?? {})), this.task_prompts_with_input = new Map(Object.entries(u ?? {})), this.regexes = {
            quad_boxes: /(.+?)<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm,
            bboxes: /([^<]+)?<loc_(\d+)><loc_(\d+)><loc_(\d+)><loc_(\d+)>/gm
          }, this.size_per_bin = 1e3;
        }
        construct_prompts(g) {
          typeof g == "string" && (g = [
            g
          ]);
          const _ = [];
          for (const h of g)
            if (this.task_prompts_without_inputs.has(h))
              _.push(this.task_prompts_without_inputs.get(h));
            else {
              for (const [r, n] of this.task_prompts_with_input)
                if (h.includes(r)) {
                  _.push(n.replaceAll("{input}", h).replaceAll(r, ""));
                  break;
                }
              _.length !== g.length && _.push(h);
            }
          return _;
        }
        post_process_generation(g, _, h) {
          const r = this.tasks_answer_post_processing_type.get(_) ?? "pure_text";
          g = g.replaceAll("<s>", "").replaceAll("</s>", "");
          let n;
          switch (r) {
            case "pure_text":
              n = g;
              break;
            case "description_with_bboxes":
            case "bboxes":
            case "phrase_grounding":
            case "ocr":
              const u = r === "ocr" ? "quad_boxes" : "bboxes", p = g.matchAll(this.regexes[u]), M = [], P = [];
              for (const [E, k, ...$] of p)
                M.push(k ? k.trim() : M.at(-1) ?? ""), P.push($.map((A, C) => (Number(A) + 0.5) / this.size_per_bin * h[C % 2]));
              n = {
                labels: M,
                [u]: P
              };
              break;
            default:
              throw new Error(`Task "${_}" (of type "${r}") not yet implemented.`);
          }
          return {
            [_]: n
          };
        }
        async _call(g, _ = null, h = {}) {
          if (!g && !_)
            throw new Error("Either text or images must be provided");
          const r = await this.image_processor(g, h), n = _ ? this.tokenizer(this.construct_prompts(_), h) : {};
          return {
            ...r,
            ...n
          };
        }
      }
      __publicField(d, "tokenizer_class", f.AutoTokenizer);
      __publicField(d, "image_processor_class", l.AutoImageProcessor);
    },
    "./src/models/gemma3n/feature_extraction_gemma3n.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Gemma3nAudioFeatureExtractor: () => d
      });
      var s = t("./src/base/feature_extraction_utils.js"), l = t("./src/utils/tensor.js"), f = t("./src/utils/audio.js");
      class d extends s.FeatureExtractor {
        constructor(g) {
          super(g);
          const { fft_length: _, feature_size: h, min_frequency: r, max_frequency: n, sampling_rate: u, frame_length: p } = this.config, M = (0, f.mel_filter_bank)(Math.floor(1 + _ / 2), h, r, n, u, null, "htk", false);
          this.mel_filters = M, this.window = (0, f.window_function)(p, "hann");
        }
        async _extract_fbank_features(g, _) {
          return (0, f.spectrogram)(g, this.window, this.config.frame_length, this.config.hop_length, {
            fft_length: this.config.fft_length,
            center: false,
            onesided: true,
            preemphasis: this.config.preemphasis,
            preemphasis_htk_flavor: this.config.preemphasis_htk_flavor,
            mel_filters: this.mel_filters,
            log_mel: "log",
            mel_floor: this.config.mel_floor,
            remove_dc_offset: false,
            transpose: true
          });
        }
        async _call(g, { max_length: _ = 48e4, truncation: h = true, padding: r = true, pad_to_multiple_of: n = 128 } = {}) {
          if ((0, s.validate_audio_inputs)(g, "Gemma3nAudioFeatureExtractor"), h && g.length > _ && (g = g.slice(0, _)), r && g.length % n !== 0) {
            const M = n - g.length % n, P = new Float64Array(g.length + M);
            P.set(g), this.config.padding_value !== 0 && P.fill(this.config.padding_value, g.length), g = P;
          }
          const u = await this._extract_fbank_features(g, this.config.max_length), p = (0, l.full)([
            1,
            u.dims[0]
          ], true);
          return {
            input_features: u.unsqueeze_(0),
            input_features_mask: p
          };
        }
      }
    },
    "./src/models/gemma3n/processing_gemma3n.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Gemma3nProcessor: () => w
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/models/auto/feature_extraction_auto.js"), d = t("./src/tokenizers.js");
      t("./src/utils/image.js"), t("./src/utils/audio.js");
      class w extends s.Processor {
        constructor(_, h, r) {
          super(_, h, r), this.audio_seq_length = this.config.audio_seq_length, this.image_seq_length = this.config.image_seq_length;
          const { audio_token_id: n, boa_token: u, audio_token: p, eoa_token: M, image_token_id: P, boi_token: E, image_token: k, eoi_token: $ } = this.tokenizer.config;
          this.audio_token_id = n, this.boa_token = u, this.audio_token = p;
          const A = p.repeat(this.audio_seq_length);
          this.full_audio_sequence = `

${u}${A}${M}

`, this.image_token_id = P, this.boi_token = E, this.image_token = k;
          const C = k.repeat(this.image_seq_length);
          this.full_image_sequence = `

${E}${C}${$}

`;
        }
        async _call(_, h = null, r = null, n = {}) {
          typeof _ == "string" && (_ = [
            _
          ]);
          let u;
          r && (u = await this.feature_extractor(r, n), _ = _.map((P) => P.replaceAll(this.audio_token, this.full_audio_sequence)));
          let p;
          return h && (p = await this.image_processor(h, n), _ = _.map((P) => P.replaceAll(this.image_token, this.full_image_sequence))), {
            ...this.tokenizer(_, n),
            ...p,
            ...u
          };
        }
      }
      __publicField(w, "image_processor_class", l.AutoImageProcessor);
      __publicField(w, "feature_extractor_class", f.AutoFeatureExtractor);
      __publicField(w, "tokenizer_class", d.AutoTokenizer);
      __publicField(w, "uses_processor_config", true);
      __publicField(w, "uses_chat_template_file", true);
    },
    "./src/models/glpn/image_processing_glpn.js": (i, e, t) => {
      t.r(e), t.d(e, {
        GLPNFeatureExtractor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
    },
    "./src/models/grounding_dino/image_processing_grounding_dino.js": (i, e, t) => {
      t.r(e), t.d(e, {
        GroundingDinoImageProcessor: () => f
      });
      var s = t("./src/base/image_processors_utils.js"), l = t("./src/utils/tensor.js");
      class f extends s.ImageProcessor {
        async _call(w) {
          const g = await super._call(w), _ = g.pixel_values.dims, h = (0, l.ones)([
            _[0],
            _[2],
            _[3]
          ]);
          return {
            ...g,
            pixel_mask: h
          };
        }
      }
    },
    "./src/models/grounding_dino/processing_grounding_dino.js": (i, e, t) => {
      t.r(e), t.d(e, {
        GroundingDinoProcessor: () => g
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js"), d = t("./src/base/image_processors_utils.js");
      function w(_, h) {
        const n = _.dims.at(-1) - 1, u = _.tolist();
        u.fill(false, 0, 0 + 1), u.fill(false, n);
        const p = h.tolist();
        return u.map((M, P) => M ? P : null).filter((M) => M !== null).map((M) => p[M]);
      }
      class g extends s.Processor {
        async _call(h, r, n = {}) {
          const u = h ? await this.image_processor(h, n) : {};
          return {
            ...r ? this.tokenizer(r, n) : {},
            ...u
          };
        }
        post_process_grounded_object_detection(h, r, { box_threshold: n = 0.25, text_threshold: u = 0.25, target_sizes: p = null } = {}) {
          const { logits: M, pred_boxes: P } = h, E = M.dims[0];
          if (p !== null && p.length !== E)
            throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
          const k = M.dims.at(1), $ = M.sigmoid(), A = $.max(-1).tolist(), C = P.tolist().map((D) => D.map((N) => (0, d.center_to_corners_format)(N))), F = [];
          for (let D = 0; D < E; ++D) {
            const N = p !== null ? p[D] : null;
            N !== null && (C[D] = C[D].map((J) => J.map((G, H) => G * N[(H + 1) % 2])));
            const R = A[D], j = [], Z = [], te = [];
            for (let J = 0; J < k; ++J) {
              const G = R[J];
              if (G <= n)
                continue;
              const H = C[D][J], U = $[D][J];
              j.push(G), te.push(H);
              const Q = w(U.gt(u), r[D]);
              Z.push(Q);
            }
            F.push({
              scores: j,
              boxes: te,
              labels: this.batch_decode(Z)
            });
          }
          return F;
        }
      }
      __publicField(g, "tokenizer_class", f.AutoTokenizer);
      __publicField(g, "image_processor_class", l.AutoImageProcessor);
    },
    "./src/models/idefics3/image_processing_idefics3.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Idefics3ImageProcessor: () => f
      });
      var s = t("./src/base/image_processors_utils.js"), l = t("./src/utils/tensor.js");
      class f extends s.ImageProcessor {
        constructor(w) {
          super(w), this.do_image_splitting = w.do_image_splitting ?? true, this.max_image_size = w.max_image_size;
        }
        get_resize_for_vision_encoder(w, g) {
          let [_, h] = w.dims.slice(-2);
          const r = h / _;
          return h >= _ ? (h = Math.ceil(h / g) * g, _ = Math.floor(h / r), _ = Math.ceil(_ / g) * g) : (_ = Math.ceil(_ / g) * g, h = Math.floor(_ * r), h = Math.ceil(h / g) * g), {
            height: _,
            width: h
          };
        }
        async _call(w, { do_image_splitting: g = null, return_row_col_info: _ = false } = {}) {
          let h;
          if (!Array.isArray(w))
            h = [
              [
                w
              ]
            ];
          else {
            if (w.length === 0 || !w[0])
              throw new Error("No images provided.");
            Array.isArray(w[0]) ? h = w : h = [
              w
            ];
          }
          let r = [], n = [], u = [];
          const p = [], M = [];
          for (const D of h) {
            let N = await Promise.all(D.map((Z) => this.preprocess(Z)));
            p.push(...N.map((Z) => Z.original_size)), M.push(...N.map((Z) => Z.reshaped_input_size)), N.forEach((Z) => Z.pixel_values.unsqueeze_(0));
            const { longest_edge: R } = this.max_image_size;
            let j;
            if (g ?? this.do_image_splitting) {
              let Z = new Array(N.length), te = new Array(N.length);
              j = await Promise.all(N.map(async (J, G) => {
                const H = this.get_resize_for_vision_encoder(J.pixel_values, R), U = await (0, l.interpolate_4d)(J.pixel_values, {
                  size: [
                    H.height,
                    H.width
                  ]
                }), { frames: Q, num_splits_h: he, num_splits_w: fe } = await this.split_image(U, this.max_image_size);
                return Z[G] = he, te[G] = fe, (0, l.cat)(Q, 0);
              })), n.push(Z), u.push(te);
            } else {
              const Z = [
                R,
                R
              ];
              j = await Promise.all(N.map((te) => (0, l.interpolate_4d)(te.pixel_values, {
                size: Z
              }))), n.push(new Array(N.length).fill(0)), u.push(new Array(N.length).fill(0));
            }
            r.push((0, l.cat)(j, 0));
          }
          const P = r.length, [E, k, $, A] = r[0].dims;
          let C, F;
          if (P === 1)
            C = r[0].unsqueeze_(0), F = (0, l.full)([
              P,
              E,
              $,
              A
            ], true);
          else {
            const D = Math.max(...r.map((j) => j.dims.at(0)));
            F = (0, l.full)([
              P,
              D,
              $,
              A
            ], true);
            const N = F.data, R = D * $ * A;
            for (let j = 0; j < P; ++j) {
              const Z = r[j].dims[0];
              if (Z < D) {
                r[j] = (0, l.cat)([
                  r[j],
                  (0, l.full)([
                    D - Z,
                    k,
                    $,
                    A
                  ], 0)
                ], 0);
                const te = j * R + Z * $ * A, J = (j + 1) * R;
                N.fill(false, te, J);
              }
            }
            C = (0, l.stack)(r, 0);
          }
          return {
            pixel_values: C,
            pixel_attention_mask: F,
            original_sizes: p,
            reshaped_input_sizes: M,
            ..._ ? {
              rows: n,
              cols: u
            } : {}
          };
        }
        async split_image(w, { longest_edge: g }) {
          const _ = g, h = g, r = [], [n, u] = w.dims.slice(-2);
          let p = 0, M = 0;
          if (n > _ || u > h) {
            p = Math.ceil(n / _), M = Math.ceil(u / h);
            const P = Math.ceil(n / p), E = Math.ceil(u / M);
            for (let A = 0; A < p; ++A)
              for (let C = 0; C < M; ++C) {
                let F, D, N, R;
                A === p - 1 ? (D = n - P, R = n) : (D = A * P, R = (A + 1) * P), C === M - 1 ? (F = u - E, N = u) : (F = C * E, N = (C + 1) * E);
                const j = [
                  D,
                  F
                ], Z = [
                  R,
                  N
                ], te = await (0, l.slice)(w, j, Z, [
                  2,
                  3
                ]);
                r.push(te);
              }
            const k = _, $ = h;
            (n !== k || u !== $) && (w = await (0, l.interpolate_4d)(w, {
              size: [
                k,
                $
              ]
            }));
          }
          return r.push(w), {
            frames: r,
            num_splits_h: p,
            num_splits_w: M
          };
        }
      }
    },
    "./src/models/idefics3/processing_idefics3.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Idefics3Processor: () => h
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js");
      t("./src/utils/image.js");
      var d = t("./src/utils/core.js");
      function w(r, n, u, p, M, P) {
        let E = "";
        for (let k = 0; k < n; ++k) {
          for (let $ = 0; $ < u; ++$)
            E += p + `<row_${k + 1}_col_${$ + 1}>` + M.repeat(r);
          E += `
`;
        }
        return E += `
${p}${P}` + M.repeat(r) + `${p}`, E;
      }
      function g(r, n, u, p) {
        return `${n}${p}` + u.repeat(r) + `${n}`;
      }
      function _(r, n, u, p, M, P) {
        return r === 0 && n === 0 ? g(u, p, M, P) : w(u, r, n, p, M, P);
      }
      class h extends s.Processor {
        constructor() {
          super(...arguments);
          __publicField(this, "fake_image_token", "<fake_token_around_image>");
          __publicField(this, "image_token", "<image>");
          __publicField(this, "global_img_token", "<global-img>");
        }
        async _call(n, u = null, p = {}) {
          p.return_row_col_info ?? (p.return_row_col_info = true);
          let M;
          u && (M = await this.image_processor(u, p)), Array.isArray(n) || (n = [
            n
          ]);
          const P = M.rows ?? [
            new Array(n.length).fill(0)
          ], E = M.cols ?? [
            new Array(n.length).fill(0)
          ], k = this.config.image_seq_len, $ = [], A = [];
          for (let F = 0; F < n.length; ++F) {
            const D = n[F], N = P[F], R = E[F];
            $.push((0, d.count)(D, this.image_token));
            const j = N.map((J, G) => _(J, R[G], k, this.fake_image_token, this.image_token, this.global_img_token)), Z = D.split(this.image_token);
            if (Z.length === 0)
              throw new Error("The image token should be present in the text.");
            let te = Z[0];
            for (let J = 0; J < j.length; ++J)
              te += j[J] + Z[J + 1];
            A.push(te);
          }
          return {
            ...this.tokenizer(A),
            ...M
          };
        }
      }
      __publicField(h, "image_processor_class", l.AutoImageProcessor);
      __publicField(h, "tokenizer_class", f.AutoTokenizer);
      __publicField(h, "uses_processor_config", true);
    },
    "./src/models/image_processors.js": (i, e, t) => {
      t.r(e), t.d(e, {
        BeitFeatureExtractor: () => s.BeitFeatureExtractor,
        BitImageProcessor: () => l.BitImageProcessor,
        CLIPFeatureExtractor: () => d.CLIPFeatureExtractor,
        CLIPImageProcessor: () => d.CLIPImageProcessor,
        ChineseCLIPFeatureExtractor: () => f.ChineseCLIPFeatureExtractor,
        ConvNextFeatureExtractor: () => w.ConvNextFeatureExtractor,
        ConvNextImageProcessor: () => w.ConvNextImageProcessor,
        DINOv3ViTImageProcessor: () => h.DINOv3ViTImageProcessor,
        DPTFeatureExtractor: () => n.DPTFeatureExtractor,
        DPTImageProcessor: () => n.DPTImageProcessor,
        DeiTFeatureExtractor: () => g.DeiTFeatureExtractor,
        DeiTImageProcessor: () => g.DeiTImageProcessor,
        DetrFeatureExtractor: () => _.DetrFeatureExtractor,
        DetrImageProcessor: () => _.DetrImageProcessor,
        DonutFeatureExtractor: () => r.DonutFeatureExtractor,
        DonutImageProcessor: () => r.DonutImageProcessor,
        EfficientNetImageProcessor: () => u.EfficientNetImageProcessor,
        GLPNFeatureExtractor: () => p.GLPNFeatureExtractor,
        GroundingDinoImageProcessor: () => M.GroundingDinoImageProcessor,
        Idefics3ImageProcessor: () => P.Idefics3ImageProcessor,
        JinaCLIPImageProcessor: () => k.JinaCLIPImageProcessor,
        LlavaOnevisionImageProcessor: () => $.LlavaOnevisionImageProcessor,
        Mask2FormerImageProcessor: () => A.Mask2FormerImageProcessor,
        MaskFormerFeatureExtractor: () => C.MaskFormerFeatureExtractor,
        MaskFormerImageProcessor: () => C.MaskFormerImageProcessor,
        MobileNetV1FeatureExtractor: () => F.MobileNetV1FeatureExtractor,
        MobileNetV1ImageProcessor: () => F.MobileNetV1ImageProcessor,
        MobileNetV2FeatureExtractor: () => D.MobileNetV2FeatureExtractor,
        MobileNetV2ImageProcessor: () => D.MobileNetV2ImageProcessor,
        MobileNetV3FeatureExtractor: () => N.MobileNetV3FeatureExtractor,
        MobileNetV3ImageProcessor: () => N.MobileNetV3ImageProcessor,
        MobileNetV4FeatureExtractor: () => R.MobileNetV4FeatureExtractor,
        MobileNetV4ImageProcessor: () => R.MobileNetV4ImageProcessor,
        MobileViTFeatureExtractor: () => j.MobileViTFeatureExtractor,
        MobileViTImageProcessor: () => j.MobileViTImageProcessor,
        NougatImageProcessor: () => Z.NougatImageProcessor,
        OwlViTFeatureExtractor: () => J.OwlViTFeatureExtractor,
        OwlViTImageProcessor: () => J.OwlViTImageProcessor,
        Owlv2ImageProcessor: () => te.Owlv2ImageProcessor,
        Phi3VImageProcessor: () => G.Phi3VImageProcessor,
        PvtImageProcessor: () => H.PvtImageProcessor,
        Qwen2VLImageProcessor: () => U.Qwen2VLImageProcessor,
        RTDetrImageProcessor: () => Q.RTDetrImageProcessor,
        SamImageProcessor: () => he.SamImageProcessor,
        SegformerFeatureExtractor: () => fe.SegformerFeatureExtractor,
        SegformerImageProcessor: () => fe.SegformerImageProcessor,
        SiglipImageProcessor: () => Me.SiglipImageProcessor,
        SmolVLMImageProcessor: () => pe.SmolVLMImageProcessor,
        Swin2SRImageProcessor: () => oe.Swin2SRImageProcessor,
        VLMImageProcessor: () => E.VLMImageProcessor,
        ViTFeatureExtractor: () => be.ViTFeatureExtractor,
        ViTImageProcessor: () => be.ViTImageProcessor,
        VitMatteImageProcessor: () => Ee.VitMatteImageProcessor,
        VitPoseImageProcessor: () => Oe.VitPoseImageProcessor,
        YolosFeatureExtractor: () => Ye.YolosFeatureExtractor,
        YolosImageProcessor: () => Ye.YolosImageProcessor
      });
      var s = t("./src/models/beit/image_processing_beit.js"), l = t("./src/models/bit/image_processing_bit.js"), f = t("./src/models/chinese_clip/image_processing_chinese_clip.js"), d = t("./src/models/clip/image_processing_clip.js"), w = t("./src/models/convnext/image_processing_convnext.js"), g = t("./src/models/deit/image_processing_deit.js"), _ = t("./src/models/detr/image_processing_detr.js"), h = t("./src/models/dinov3_vit/image_processing_dinov3_vit.js"), r = t("./src/models/donut/image_processing_donut.js"), n = t("./src/models/dpt/image_processing_dpt.js"), u = t("./src/models/efficientnet/image_processing_efficientnet.js"), p = t("./src/models/glpn/image_processing_glpn.js"), M = t("./src/models/grounding_dino/image_processing_grounding_dino.js"), P = t("./src/models/idefics3/image_processing_idefics3.js"), E = t("./src/models/janus/image_processing_janus.js"), k = t("./src/models/jina_clip/image_processing_jina_clip.js"), $ = t("./src/models/llava_onevision/image_processing_llava_onevision.js"), A = t("./src/models/mask2former/image_processing_mask2former.js"), C = t("./src/models/maskformer/image_processing_maskformer.js"), F = t("./src/models/mobilenet_v1/image_processing_mobilenet_v1.js"), D = t("./src/models/mobilenet_v2/image_processing_mobilenet_v2.js"), N = t("./src/models/mobilenet_v3/image_processing_mobilenet_v3.js"), R = t("./src/models/mobilenet_v4/image_processing_mobilenet_v4.js"), j = t("./src/models/mobilevit/image_processing_mobilevit.js"), Z = t("./src/models/nougat/image_processing_nougat.js"), te = t("./src/models/owlv2/image_processing_owlv2.js"), J = t("./src/models/owlvit/image_processing_owlvit.js"), G = t("./src/models/phi3_v/image_processing_phi3_v.js"), H = t("./src/models/pvt/image_processing_pvt.js"), U = t("./src/models/qwen2_vl/image_processing_qwen2_vl.js"), Q = t("./src/models/rt_detr/image_processing_rt_detr.js"), he = t("./src/models/sam/image_processing_sam.js"), fe = t("./src/models/segformer/image_processing_segformer.js"), Me = t("./src/models/siglip/image_processing_siglip.js"), pe = t("./src/models/smolvlm/image_processing_smolvlm.js"), oe = t("./src/models/swin2sr/image_processing_swin2sr.js"), be = t("./src/models/vit/image_processing_vit.js"), Ee = t("./src/models/vitmatte/image_processing_vitmatte.js"), Oe = t("./src/models/vitpose/image_processing_vitpose.js"), Ye = t("./src/models/yolos/image_processing_yolos.js");
    },
    "./src/models/janus/image_processing_janus.js": (i, e, t) => {
      t.r(e), t.d(e, {
        VLMImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        constructor(d) {
          super({
            do_pad: true,
            pad_size: {
              width: d.image_size,
              height: d.image_size
            },
            ...d
          }), this.constant_values = this.config.background_color.map((w) => w * this.rescale_factor);
        }
        pad_image(d, w, g, _) {
          return super.pad_image(d, w, g, {
            constant_values: this.constant_values,
            center: true,
            ..._
          });
        }
      }
    },
    "./src/models/janus/processing_janus.js": (i, e, t) => {
      t.r(e), t.d(e, {
        VLChatProcessor: () => _
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js"), d = t("./src/utils/core.js"), w = t("./src/utils/tensor.js"), g = t("./src/utils/image.js");
      class _ extends s.Processor {
        constructor(r, n, u) {
          super(r, n, u), this.image_tag = this.config.image_tag, this.image_start_tag = this.config.image_start_tag, this.image_end_tag = this.config.image_end_tag, this.num_image_tokens = this.config.num_image_tokens;
        }
        async _call(r, { images: n = null, chat_template: u = "default" } = {}) {
          n ? Array.isArray(n) || (n = [
            n
          ]) : n = await Promise.all(r.filter((j) => j.images).flatMap((j) => j.images).map((j) => g.RawImage.read(j)));
          const p = this.tokenizer, M = p.apply_chat_template(r, {
            tokenize: false,
            add_generation_prompt: true,
            chat_template: u
          }), P = (j) => p.encode(j, {
            add_special_tokens: false
          }), E = M.split(this.image_tag), k = E.length - 1;
          if (n.length !== k)
            throw new Error(`Number of images provided (${n.length}) does not match number of "${this.image_tag}" image tags (${k})`);
          const [$, A, C] = p.model.convert_tokens_to_ids([
            this.image_tag,
            this.image_start_tag,
            this.image_end_tag
          ]);
          let F = P(E[0]), D = new Array(F.length).fill(false);
          for (let j = 1; j < E.length; ++j) {
            const Z = new Array(this.num_image_tokens).fill($), te = P(E[j]);
            F = (0, d.mergeArrays)(F, [
              A
            ], Z, [
              C
            ], te);
            const J = new Array(this.num_image_tokens).fill(true);
            D = (0, d.mergeArrays)(D, [
              false
            ], J, [
              false
            ], new Array(te.length).fill(false));
          }
          const N = [
            1,
            F.length
          ], R = {
            input_ids: new w.Tensor("int64", F, N),
            attention_mask: new w.Tensor("int64", new Array(F.length).fill(1), N),
            images_seq_mask: new w.Tensor("bool", D, N),
            images_emb_mask: new w.Tensor("bool", new Array(k * this.num_image_tokens).fill(true), [
              1,
              k,
              this.num_image_tokens
            ])
          };
          if (n && n.length > 0) {
            const j = await this.image_processor(n);
            return j.pixel_values.unsqueeze_(0), {
              ...R,
              ...j
            };
          }
          return R;
        }
      }
      __publicField(_, "image_processor_class", l.AutoImageProcessor);
      __publicField(_, "tokenizer_class", f.AutoTokenizer);
      __publicField(_, "uses_processor_config", true);
    },
    "./src/models/jina_clip/image_processing_jina_clip.js": (i, e, t) => {
      t.r(e), t.d(e, {
        JinaCLIPImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        constructor(d) {
          const { resize_mode: w, fill_color: g, interpolation: _, size: h, ...r } = d, n = w === "squash" ? {
            width: h,
            height: h
          } : w === "shortest" ? {
            shortest_edge: h
          } : {
            longest_edge: h
          }, u = _ === "bicubic" ? 3 : 2;
          super({
            ...r,
            size: n,
            resample: u,
            do_center_crop: true,
            crop_size: h,
            do_normalize: true
          });
        }
      }
    },
    "./src/models/jina_clip/processing_jina_clip.js": (i, e, t) => {
      t.r(e), t.d(e, {
        JinaCLIPProcessor: () => d
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js");
      class d extends s.Processor {
        async _call(g = null, _ = null, h = {}) {
          if (!g && !_)
            throw new Error("Either text or images must be provided");
          const r = g ? this.tokenizer(g, h) : {}, n = _ ? await this.image_processor(_, h) : {};
          return {
            ...r,
            ...n
          };
        }
      }
      __publicField(d, "tokenizer_class", f.AutoTokenizer);
      __publicField(d, "image_processor_class", l.AutoImageProcessor);
    },
    "./src/models/llava/processing_llava.js": (i, e, t) => {
      t.r(e), t.d(e, {
        LlavaProcessor: () => d
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js");
      class d extends s.Processor {
        async _call(g, _ = null, h = {}) {
          const r = await this.image_processor(g, h);
          if (_) {
            const [u, p] = r.pixel_values.dims.slice(-2), { image_token: M, patch_size: P, num_additional_image_tokens: E } = this.config, k = Math.floor(u / P) * Math.floor(p / P) + E;
            _ = structuredClone(_), Array.isArray(_) || (_ = [
              _
            ]);
            for (let $ = 0; $ < _.length; ++$)
              _[$] = _[$].replace(M, M.repeat(k));
          }
          const n = _ ? this.tokenizer(_, h) : {};
          return {
            ...r,
            ...n
          };
        }
      }
      __publicField(d, "tokenizer_class", f.AutoTokenizer);
      __publicField(d, "image_processor_class", l.AutoImageProcessor);
      __publicField(d, "uses_processor_config", true);
    },
    "./src/models/llava_onevision/image_processing_llava_onevision.js": (i, e, t) => {
      t.r(e), t.d(e, {
        LlavaOnevisionImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
    },
    "./src/models/mask2former/image_processing_mask2former.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Mask2FormerImageProcessor: () => l
      });
      var s = t("./src/models/maskformer/image_processing_maskformer.js");
      class l extends s.MaskFormerImageProcessor {
      }
    },
    "./src/models/maskformer/image_processing_maskformer.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MaskFormerFeatureExtractor: () => f,
        MaskFormerImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        post_process_panoptic_segmentation(...w) {
          return (0, s.post_process_panoptic_segmentation)(...w);
        }
        post_process_instance_segmentation(...w) {
          return (0, s.post_process_instance_segmentation)(...w);
        }
      }
      class f extends l {
      }
    },
    "./src/models/mgp_str/processing_mgp_str.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MgpstrProcessor: () => g
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js"), d = t("./src/utils/maths.js");
      const w = {
        char: [
          "char_decode",
          1
        ],
        bpe: [
          "bpe_decode",
          2
        ],
        wp: [
          "wp_decode",
          102
        ]
      };
      class g extends s.Processor {
        get char_tokenizer() {
          return this.components.char_tokenizer;
        }
        get bpe_tokenizer() {
          return this.components.bpe_tokenizer;
        }
        get wp_tokenizer() {
          return this.components.wp_tokenizer;
        }
        _decode_helper(h, r) {
          if (!w.hasOwnProperty(r))
            throw new Error(`Format ${r} is not supported.`);
          const [n, u] = w[r], p = this[n].bind(this), [M, P] = h.dims, E = [], k = [], $ = h.tolist();
          for (let C = 0; C < M; ++C) {
            const F = $[C], D = [], N = [];
            for (let j = 1; j < P; ++j) {
              const [Z, te] = (0, d.max)((0, d.softmax)(F[j]));
              if (N.push(Z), te == u)
                break;
              D.push(te);
            }
            const R = N.length > 0 ? N.reduce((j, Z) => j * Z, 1) : 0;
            k.push(D), E.push(R);
          }
          return [
            p(k),
            E
          ];
        }
        char_decode(h) {
          return this.char_tokenizer.batch_decode(h).map((r) => r.replaceAll(" ", ""));
        }
        bpe_decode(h) {
          return this.bpe_tokenizer.batch_decode(h);
        }
        wp_decode(h) {
          return this.wp_tokenizer.batch_decode(h).map((r) => r.replaceAll(" ", ""));
        }
        batch_decode([h, r, n]) {
          const [u, p] = this._decode_helper(h, "char"), [M, P] = this._decode_helper(r, "bpe"), [E, k] = this._decode_helper(n, "wp"), $ = [], A = [];
          for (let C = 0; C < u.length; ++C) {
            const [F, D] = (0, d.max)([
              p[C],
              P[C],
              k[C]
            ]);
            $.push([
              u[C],
              M[C],
              E[C]
            ][D]), A.push(F);
          }
          return {
            generated_text: $,
            scores: A,
            char_preds: u,
            bpe_preds: M,
            wp_preds: E
          };
        }
        static async from_pretrained(...h) {
          const r = await super.from_pretrained(...h), n = await f.AutoTokenizer.from_pretrained("Xenova/gpt2"), u = await f.AutoTokenizer.from_pretrained("Xenova/bert-base-uncased");
          return r.components = {
            image_processor: r.image_processor,
            char_tokenizer: r.tokenizer,
            bpe_tokenizer: n,
            wp_tokenizer: u
          }, r;
        }
        async _call(h, r = null) {
          const n = await this.image_processor(h);
          return r && (n.labels = this.tokenizer(r).input_ids), n;
        }
      }
      __publicField(g, "tokenizer_class", f.AutoTokenizer);
      __publicField(g, "image_processor_class", l.AutoImageProcessor);
    },
    "./src/models/mobilenet_v1/image_processing_mobilenet_v1.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MobileNetV1FeatureExtractor: () => f,
        MobileNetV1ImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/mobilenet_v2/image_processing_mobilenet_v2.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MobileNetV2FeatureExtractor: () => f,
        MobileNetV2ImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/mobilenet_v3/image_processing_mobilenet_v3.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MobileNetV3FeatureExtractor: () => f,
        MobileNetV3ImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/mobilenet_v4/image_processing_mobilenet_v4.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MobileNetV4FeatureExtractor: () => f,
        MobileNetV4ImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/mobilevit/image_processing_mobilevit.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MobileViTFeatureExtractor: () => f,
        MobileViTImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/moonshine/feature_extraction_moonshine.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MoonshineFeatureExtractor: () => f
      });
      var s = t("./src/base/feature_extraction_utils.js"), l = t("./src/utils/tensor.js");
      class f extends s.FeatureExtractor {
        async _call(w) {
          (0, s.validate_audio_inputs)(w, "MoonshineFeatureExtractor"), w instanceof Float64Array && (w = new Float32Array(w));
          const g = [
            1,
            w.length
          ];
          return {
            input_values: new l.Tensor("float32", w, g)
          };
        }
      }
    },
    "./src/models/moonshine/processing_moonshine.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MoonshineProcessor: () => d
      });
      var s = t("./src/models/auto/feature_extraction_auto.js"), l = t("./src/tokenizers.js"), f = t("./src/base/processing_utils.js");
      class d extends f.Processor {
        async _call(g) {
          return await this.feature_extractor(g);
        }
      }
      __publicField(d, "tokenizer_class", l.AutoTokenizer);
      __publicField(d, "feature_extractor_class", s.AutoFeatureExtractor);
    },
    "./src/models/nougat/image_processing_nougat.js": (i, e, t) => {
      t.r(e), t.d(e, {
        NougatImageProcessor: () => l
      });
      var s = t("./src/models/donut/image_processing_donut.js");
      class l extends s.DonutImageProcessor {
      }
    },
    "./src/models/owlv2/image_processing_owlv2.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Owlv2ImageProcessor: () => l
      });
      var s = t("./src/models/owlvit/image_processing_owlvit.js");
      class l extends s.OwlViTImageProcessor {
      }
    },
    "./src/models/owlvit/image_processing_owlvit.js": (i, e, t) => {
      t.r(e), t.d(e, {
        OwlViTFeatureExtractor: () => f,
        OwlViTImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        post_process_object_detection(...w) {
          return (0, s.post_process_object_detection)(...w);
        }
      }
      class f extends l {
      }
    },
    "./src/models/owlvit/processing_owlvit.js": (i, e, t) => {
      t.r(e), t.d(e, {
        OwlViTProcessor: () => d
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js");
      class d extends s.Processor {
      }
      __publicField(d, "tokenizer_class", f.AutoTokenizer);
      __publicField(d, "image_processor_class", l.AutoImageProcessor);
    },
    "./src/models/paligemma/processing_paligemma.js": (i, e, t) => {
      t.r(e), t.d(e, {
        PaliGemmaProcessor: () => g
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js");
      const d = "<image>";
      function w(_, h, r, n, u) {
        return `${n.repeat(r * u)}${h}${_}
`;
      }
      class g extends s.Processor {
        async _call(h, r = null, n = {}) {
          r || (console.warn("You are using PaliGemma without a text prefix. It will perform as a picture-captioning model."), r = ""), Array.isArray(h) || (h = [
            h
          ]), Array.isArray(r) || (r = [
            r
          ]);
          const u = this.tokenizer.bos_token, p = this.image_processor.config.image_seq_length;
          let M;
          r.some((k) => k.includes(d)) ? M = r.map((k) => {
            const $ = k.replaceAll(d, d.repeat(p)), A = $.lastIndexOf(d), C = A === -1 ? 0 : A + d.length;
            return $.slice(0, C) + u + $.slice(C) + `
`;
          }) : (console.warn("You are passing both `text` and `images` to `PaliGemmaProcessor`. The processor expects special image tokens in the text, as many tokens as there are images per each text. It is recommended to add `<image>` tokens in the very beginning of your text. For this call, we will infer how many images each text has and add special tokens."), M = r.map((k) => w(k, u, p, d, h.length)));
          const P = this.tokenizer(M, n);
          return {
            ...await this.image_processor(h, n),
            ...P
          };
        }
      }
      __publicField(g, "tokenizer_class", f.AutoTokenizer);
      __publicField(g, "image_processor_class", l.AutoImageProcessor);
      __publicField(g, "uses_processor_config", false);
    },
    "./src/models/phi3_v/image_processing_phi3_v.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Phi3VImageProcessor: () => h
      });
      var s = t("./src/base/image_processors_utils.js"), l = t("./src/utils/tensor.js");
      const f = 336, d = [
        2,
        3
      ], { ceil: w, floor: g, sqrt: _ } = Math;
      class h extends s.ImageProcessor {
        constructor(n) {
          super({
            ...n,
            do_normalize: true,
            do_pad: true,
            pad_size: "custom",
            do_convert_rgb: true,
            do_resize: true
          }), this._num_crops = n.num_crops;
        }
        calc_num_image_tokens_from_image_size(n, u) {
          const { num_img_tokens: p } = this.config;
          return g((g(u / f) * g(n / f) + 1) * p + 1 + (g(u / f) + 1) * _(p));
        }
        get_resize_output_image_size(n, u) {
          const p = this._num_crops, [M, P] = n.size;
          let E = M / P, k = 1;
          for (; k * Math.ceil(k / E) <= p; )
            k += 1;
          k -= 1;
          const $ = Math.floor(k * 336), A = Math.floor($ / E);
          return [
            $,
            A
          ];
        }
        pad_image(n, u, p, M = {}) {
          const [P, E] = u, k = f * w(P / f), $ = f * w(E / f), A = [
            1,
            1,
            1
          ].map((C, F) => (C - this.image_mean[F]) / this.image_std[F]);
          return super.pad_image(n, u, {
            width: $,
            height: k
          }, {
            center: true,
            constant_values: A,
            ...M
          });
        }
        async _call(n, { num_crops: u = null } = {}) {
          if (this._num_crops = u ?? (u = this.config.num_crops), u < 4 || _(u) % 1 !== 0)
            throw new Error("num_crops must be a square number >= 4");
          Array.isArray(n) || (n = [
            n
          ]);
          const p = n.length, M = await Promise.all(n.map((D) => this.preprocess(D))), P = M.map((D) => D.original_size), E = M.map((D) => D.reshaped_input_size), k = [];
          for (const { pixel_values: D } of M) {
            D.unsqueeze_(0);
            const [N, R] = D.dims.slice(-2), j = await (0, l.interpolate_4d)(D, {
              size: [
                f,
                f
              ],
              mode: "bicubic"
            });
            if (u > 0) {
              const Z = [], te = _(u), J = g(R / te), G = g(N / te);
              for (let U = 0; U < te; ++U)
                for (let Q = 0; Q < te; ++Q) {
                  let he, fe, Me, pe;
                  U === te - 1 ? (fe = N - G, pe = N) : (fe = U * G, pe = (U + 1) * G), Q === te - 1 ? (he = R - J, Me = R) : (he = Q * J, Me = (Q + 1) * J);
                  const oe = [
                    fe,
                    he
                  ], be = [
                    pe,
                    Me
                  ], Ee = await (0, l.slice)(D, oe, be, d);
                  Z.push(Ee);
                }
              const H = await (0, l.interpolate_4d)((0, l.cat)(Z, 0), {
                size: [
                  f,
                  f
                ],
                mode: "bicubic"
              });
              k.push((0, l.cat)([
                j,
                H
              ], 0));
            } else
              k.push(j);
          }
          const $ = (0, l.stack)(k, 0), A = E.map((D) => D.map((N) => f * w(N / f))), C = new l.Tensor("int64", A.flat(), [
            p,
            2
          ]), F = A.map(([D, N]) => this.calc_num_image_tokens_from_image_size(N, D));
          return {
            pixel_values: $,
            original_sizes: P,
            reshaped_input_sizes: E,
            image_sizes: C,
            num_img_tokens: F
          };
        }
      }
    },
    "./src/models/phi3_v/processing_phi3_v.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Phi3VProcessor: () => g
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js");
      t("./src/utils/image.js");
      const d = "<|image|>", w = /<\|image_\d+\|>/g;
      class g extends s.Processor {
        async _call(h, r = null, { padding: n = true, truncation: u = true, num_crops: p = null } = {}) {
          Array.isArray(h) || (h = [
            h
          ]);
          let M, P;
          if (r) {
            P = await this.image_processor(r, {
              num_crops: p
            });
            const { num_img_tokens: E } = P, k = h.map((A, C) => A.split(w).join(d.repeat(E[C])));
            M = this.tokenizer(k, {
              padding: n,
              truncation: u
            });
            const $ = this.tokenizer.model.convert_tokens_to_ids([
              d
            ])[0];
            M.input_ids.map_((A) => A == $ ? -A : A);
          } else
            M = this.tokenizer(h);
          return {
            ...M,
            ...P
          };
        }
      }
      __publicField(g, "image_processor_class", l.AutoImageProcessor);
      __publicField(g, "tokenizer_class", f.AutoTokenizer);
    },
    "./src/models/processors.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Florence2Processor: () => s.Florence2Processor,
        Gemma3nProcessor: () => l.Gemma3nProcessor,
        GroundingDinoProcessor: () => f.GroundingDinoProcessor,
        Idefics3Processor: () => d.Idefics3Processor,
        JinaCLIPProcessor: () => g.JinaCLIPProcessor,
        LlavaProcessor: () => _.LlavaProcessor,
        MgpstrProcessor: () => h.MgpstrProcessor,
        MoonshineProcessor: () => r.MoonshineProcessor,
        OwlViTProcessor: () => n.OwlViTProcessor,
        PaliGemmaProcessor: () => p.PaliGemmaProcessor,
        Phi3VProcessor: () => u.Phi3VProcessor,
        PyAnnoteProcessor: () => M.PyAnnoteProcessor,
        Qwen2VLProcessor: () => P.Qwen2VLProcessor,
        SamProcessor: () => E.SamProcessor,
        SmolVLMProcessor: () => k.SmolVLMProcessor,
        SpeechT5Processor: () => $.SpeechT5Processor,
        UltravoxProcessor: () => A.UltravoxProcessor,
        VLChatProcessor: () => w.VLChatProcessor,
        VoxtralProcessor: () => C.VoxtralProcessor,
        Wav2Vec2Processor: () => F.Wav2Vec2Processor,
        Wav2Vec2ProcessorWithLM: () => D.Wav2Vec2ProcessorWithLM,
        WhisperProcessor: () => N.WhisperProcessor
      });
      var s = t("./src/models/florence2/processing_florence2.js"), l = t("./src/models/gemma3n/processing_gemma3n.js"), f = t("./src/models/grounding_dino/processing_grounding_dino.js"), d = t("./src/models/idefics3/processing_idefics3.js"), w = t("./src/models/janus/processing_janus.js"), g = t("./src/models/jina_clip/processing_jina_clip.js"), _ = t("./src/models/llava/processing_llava.js"), h = t("./src/models/mgp_str/processing_mgp_str.js"), r = t("./src/models/moonshine/processing_moonshine.js"), n = t("./src/models/owlvit/processing_owlvit.js"), u = t("./src/models/phi3_v/processing_phi3_v.js"), p = t("./src/models/paligemma/processing_paligemma.js"), M = t("./src/models/pyannote/processing_pyannote.js"), P = t("./src/models/qwen2_vl/processing_qwen2_vl.js"), E = t("./src/models/sam/processing_sam.js"), k = t("./src/models/smolvlm/processing_smolvlm.js"), $ = t("./src/models/speecht5/processing_speecht5.js"), A = t("./src/models/ultravox/processing_ultravox.js"), C = t("./src/models/voxtral/processing_voxtral.js"), F = t("./src/models/wav2vec2/processing_wav2vec2.js"), D = t("./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js"), N = t("./src/models/whisper/processing_whisper.js");
    },
    "./src/models/pvt/image_processing_pvt.js": (i, e, t) => {
      t.r(e), t.d(e, {
        PvtImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
    },
    "./src/models/pyannote/feature_extraction_pyannote.js": (i, e, t) => {
      t.r(e), t.d(e, {
        PyAnnoteFeatureExtractor: () => d
      });
      var s = t("./src/base/feature_extraction_utils.js"), l = t("./src/utils/tensor.js"), f = t("./src/utils/maths.js");
      class d extends s.FeatureExtractor {
        async _call(g) {
          (0, s.validate_audio_inputs)(g, "PyAnnoteFeatureExtractor"), g instanceof Float64Array && (g = new Float32Array(g));
          const _ = [
            1,
            1,
            g.length
          ];
          return {
            input_values: new l.Tensor("float32", g, _)
          };
        }
        samples_to_frames(g) {
          return (g - this.config.offset) / this.config.step;
        }
        post_process_speaker_diarization(g, _) {
          const h = _ / this.samples_to_frames(_) / this.config.sampling_rate, r = [];
          for (const n of g.tolist()) {
            const u = [];
            let p = -1;
            for (let M = 0; M < n.length; ++M) {
              const P = (0, f.softmax)(n[M]), [E, k] = (0, f.max)(P), [$, A] = [
                M,
                M + 1
              ];
              k !== p ? (p = k, u.push({
                id: k,
                start: $,
                end: A,
                score: E
              })) : (u.at(-1).end = A, u.at(-1).score += E);
            }
            r.push(u.map(({ id: M, start: P, end: E, score: k }) => ({
              id: M,
              start: P * h,
              end: E * h,
              confidence: k / (E - P)
            })));
          }
          return r;
        }
      }
    },
    "./src/models/pyannote/processing_pyannote.js": (i, e, t) => {
      t.r(e), t.d(e, {
        PyAnnoteProcessor: () => f
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/pyannote/feature_extraction_pyannote.js");
      class f extends s.Processor {
        async _call(w) {
          return await this.feature_extractor(w);
        }
        post_process_speaker_diarization(...w) {
          return this.feature_extractor.post_process_speaker_diarization(...w);
        }
        get sampling_rate() {
          return this.feature_extractor.config.sampling_rate;
        }
      }
      __publicField(f, "feature_extractor_class", l.PyAnnoteFeatureExtractor);
    },
    "./src/models/qwen2_vl/image_processing_qwen2_vl.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Qwen2VLImageProcessor: () => f
      });
      var s = t("./src/base/image_processors_utils.js"), l = t("./src/utils/tensor.js");
      class f extends s.ImageProcessor {
        async _call(w, ...g) {
          const { pixel_values: _, original_sizes: h, reshaped_input_sizes: r } = await super._call(w, ...g);
          let n = _;
          const { temporal_patch_size: u, merge_size: p, patch_size: M } = this.config;
          n.dims[0] === 1 && (n = (0, l.cat)(Array.from({
            length: u
          }, () => n), 0));
          const P = n.dims[0] / u, E = n.dims[1], k = Math.floor(n.dims[2] / M), $ = Math.floor(n.dims[3] / M), A = n.view(P, u, E, Math.floor(k / p), p, M, Math.floor($ / p), p, M).permute(0, 3, 6, 4, 7, 2, 1, 5, 8).view(P * k * $, E * u * M * M), C = new l.Tensor("int64", [
            P,
            k,
            $
          ], [
            1,
            3
          ]);
          return {
            pixel_values: A,
            image_grid_thw: C,
            original_sizes: h,
            reshaped_input_sizes: r
          };
        }
      }
    },
    "./src/models/qwen2_vl/processing_qwen2_vl.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Qwen2VLProcessor: () => d
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js"), f = t("./src/tokenizers.js");
      t("./src/utils/image.js");
      class d extends s.Processor {
        async _call(g, _ = null, ...h) {
          Array.isArray(g) || (g = [
            g
          ]);
          let r, n;
          if (_ && (r = await this.image_processor(_), n = r.image_grid_thw), n) {
            let p = this.image_processor.config.merge_size ** 2, M = 0;
            const P = n.tolist();
            g = g.map((E) => {
              for (; E.includes("<|image_pad|>"); ) {
                const k = Number(P[M++].reduce(($, A) => $ * A, 1n));
                E = E.replace("<|image_pad|>", "<|placeholder|>".repeat(Math.floor(k / p)));
              }
              return E.replaceAll("<|placeholder|>", "<|image_pad|>");
            });
          }
          return {
            ...this.tokenizer(g),
            ...r
          };
        }
      }
      __publicField(d, "image_processor_class", l.AutoImageProcessor);
      __publicField(d, "tokenizer_class", f.AutoTokenizer);
    },
    "./src/models/rt_detr/image_processing_rt_detr.js": (i, e, t) => {
      t.r(e), t.d(e, {
        RTDetrImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        post_process_object_detection(...d) {
          return (0, s.post_process_object_detection)(...d);
        }
      }
    },
    "./src/models/sam/image_processing_sam.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SamImageProcessor: () => d
      });
      var s = t("./src/base/image_processors_utils.js"), l = t("./src/utils/core.js"), f = t("./src/utils/tensor.js");
      class d extends s.ImageProcessor {
        reshape_input_points(g, _, h, r = false) {
          g = structuredClone(g);
          let n = (0, l.calculateDimensions)(g);
          if (n.length === 3)
            r || (n = [
              1,
              ...n
            ]), g = [
              g
            ];
          else if (n.length !== 4)
            throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
          for (let u = 0; u < g.length; ++u) {
            let p = _[u], M = h[u], P = [
              M[0] / p[0],
              M[1] / p[1]
            ];
            for (let E = 0; E < g[u].length; ++E)
              for (let k = 0; k < g[u][E].length; ++k)
                for (let $ = 0; $ < g[u][E][k].length; ++$)
                  g[u][E][k][$] *= P[$ % 2];
          }
          return new f.Tensor("float32", Float32Array.from(g.flat(1 / 0)), n);
        }
        add_input_labels(g, _) {
          let h = (0, l.calculateDimensions)(g);
          if (h.length === 2)
            h = [
              1,
              ...h
            ], g = [
              g
            ];
          else if (h.length !== 3)
            throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
          if (h.some((r, n) => r !== _.dims[n]))
            throw Error(`The first ${h.length} dimensions of 'input_points' and 'input_labels' must be the same.`);
          return new f.Tensor("int64", g.flat(1 / 0).map(BigInt), h);
        }
        async _call(g, { input_points: _ = null, input_labels: h = null, input_boxes: r = null } = {}) {
          const n = await super._call(g);
          if (_ && (n.input_points = this.reshape_input_points(_, n.original_sizes, n.reshaped_input_sizes)), h) {
            if (!n.input_points)
              throw Error("`input_points` must be provided if `input_labels` are provided.");
            n.input_labels = this.add_input_labels(h, n.input_points);
          }
          return r && (n.input_boxes = this.reshape_input_points(r, n.original_sizes, n.reshaped_input_sizes, true)), n;
        }
        async post_process_masks(g, _, h, { mask_threshold: r = 0, binarize: n = true, pad_size: u = null } = {}) {
          const p = [];
          u = u ?? this.pad_size;
          const M = [
            u.height,
            u.width
          ];
          for (let P = 0; P < _.length; ++P) {
            const E = _[P], k = h[P];
            let $ = await (0, f.interpolate_4d)(g[P], {
              mode: "bilinear",
              size: M
            });
            if ($ = $.slice(null, null, [
              0,
              k[0]
            ], [
              0,
              k[1]
            ]), $ = await (0, f.interpolate_4d)($, {
              mode: "bilinear",
              size: E
            }), n) {
              const A = $.data, C = new Uint8Array(A.length);
              for (let F = 0; F < A.length; ++F)
                A[F] > r && (C[F] = 1);
              $ = new f.Tensor("bool", C, $.dims);
            }
            p.push($);
          }
          return p;
        }
        generate_crop_boxes(g, _, { crop_n_layers: h = 0, overlap_ratio: r = 512 / 1500, points_per_crop: n = 32, crop_n_points_downscale_factor: u = 1 } = {}) {
        }
      }
    },
    "./src/models/sam/processing_sam.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SamProcessor: () => f
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/models/auto/image_processing_auto.js");
      class f extends s.Processor {
        async _call(...w) {
          return await this.image_processor(...w);
        }
        post_process_masks(...w) {
          return this.image_processor.post_process_masks(...w);
        }
        reshape_input_points(...w) {
          return this.image_processor.reshape_input_points(...w);
        }
      }
      __publicField(f, "image_processor_class", l.AutoImageProcessor);
    },
    "./src/models/seamless_m4t/feature_extraction_seamless_m4t.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SeamlessM4TFeatureExtractor: () => d
      });
      var s = t("./src/base/feature_extraction_utils.js"), l = t("./src/utils/tensor.js"), f = t("./src/utils/audio.js");
      class d extends s.FeatureExtractor {
        constructor(g) {
          super(g);
          const _ = this.config.sampling_rate, h = (0, f.mel_filter_bank)(257, this.config.num_mel_bins, 20, Math.floor(_ / 2), _, null, "kaldi", true);
          this.mel_filters = h, this.window = (0, f.window_function)(400, "povey", {
            periodic: false
          });
        }
        async _extract_fbank_features(g, _) {
          return g = g.map((h) => h * 32768), (0, f.spectrogram)(g, this.window, 400, 160, {
            fft_length: 512,
            power: 2,
            center: false,
            preemphasis: 0.97,
            mel_filters: this.mel_filters,
            log_mel: "log",
            mel_floor: 1192092955078125e-22,
            remove_dc_offset: true,
            max_num_frames: _,
            transpose: true
          });
        }
        async _call(g, { padding: _ = true, pad_to_multiple_of: h = 2, do_normalize_per_mel_bins: r = true, return_attention_mask: n = true } = {}) {
          (0, s.validate_audio_inputs)(g, "SeamlessM4TFeatureExtractor");
          let u = await this._extract_fbank_features(g, this.config.max_length);
          if (r) {
            const [C, F] = u.dims, D = u.data;
            for (let N = 0; N < F; ++N) {
              let R = 0;
              for (let J = 0; J < C; ++J)
                R += D[J * F + N];
              const j = R / C;
              let Z = 0;
              for (let J = 0; J < C; ++J)
                Z += (D[J * F + N] - j) ** 2;
              Z /= C - 1;
              const te = Math.sqrt(Z + 1e-7);
              for (let J = 0; J < C; ++J) {
                const G = J * F + N;
                D[G] = (D[G] - j) / te;
              }
            }
          }
          let p;
          if (_) {
            const [C, F] = u.dims, D = u.data, N = C % h;
            if (N > 0) {
              const R = new Float32Array(F * (C + N));
              R.set(D), R.fill(this.config.padding_value, D.length);
              const j = C + N;
              u = new l.Tensor(u.type, R, [
                j,
                F
              ]), n && (p = new l.Tensor("int64", new BigInt64Array(j), [
                1,
                j
              ]), p.data.fill(1n, 0, C));
            }
          }
          const [M, P] = u.dims, E = this.config.stride;
          if (M % E !== 0)
            throw new Error(`The number of frames (${M}) must be a multiple of the stride (${E}).`);
          const $ = u.view(1, Math.floor(M / E), P * E), A = {
            input_features: $
          };
          if (n) {
            const C = $.dims[1], F = new BigInt64Array(C);
            if (p) {
              const D = p.data;
              for (let N = 1, R = 0; N < M; N += E, ++R)
                F[R] = D[N];
            } else
              F.fill(1n);
            A.attention_mask = new l.Tensor("int64", F, [
              1,
              C
            ]);
          }
          return A;
        }
      }
    },
    "./src/models/segformer/image_processing_segformer.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SegformerFeatureExtractor: () => f,
        SegformerImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        post_process_semantic_segmentation(...w) {
          return (0, s.post_process_semantic_segmentation)(...w);
        }
      }
      class f extends l {
      }
    },
    "./src/models/siglip/image_processing_siglip.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SiglipImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
    },
    "./src/models/smolvlm/image_processing_smolvlm.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SmolVLMImageProcessor: () => s.Idefics3ImageProcessor
      });
      var s = t("./src/models/idefics3/image_processing_idefics3.js");
    },
    "./src/models/smolvlm/processing_smolvlm.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SmolVLMProcessor: () => s.Idefics3Processor
      });
      var s = t("./src/models/idefics3/processing_idefics3.js");
    },
    "./src/models/snac/feature_extraction_snac.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SnacFeatureExtractor: () => l
      });
      var s = t("./src/models/dac/feature_extraction_dac.js");
      class l extends s.DacFeatureExtractor {
      }
    },
    "./src/models/speecht5/feature_extraction_speecht5.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SpeechT5FeatureExtractor: () => l
      });
      var s = t("./src/base/feature_extraction_utils.js");
      class l extends s.FeatureExtractor {
      }
    },
    "./src/models/speecht5/processing_speecht5.js": (i, e, t) => {
      t.r(e), t.d(e, {
        SpeechT5Processor: () => d
      });
      var s = t("./src/base/processing_utils.js"), l = t("./src/tokenizers.js"), f = t("./src/models/auto/feature_extraction_auto.js");
      class d extends s.Processor {
        async _call(g) {
          return await this.feature_extractor(g);
        }
      }
      __publicField(d, "tokenizer_class", l.AutoTokenizer);
      __publicField(d, "feature_extractor_class", f.AutoFeatureExtractor);
    },
    "./src/models/swin2sr/image_processing_swin2sr.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Swin2SRImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        pad_image(d, w, g, _ = {}) {
          const [h, r, n] = w;
          return super.pad_image(d, w, {
            width: r + (g - r % g) % g,
            height: h + (g - h % g) % g
          }, {
            mode: "symmetric",
            center: false,
            constant_values: -1,
            ..._
          });
        }
      }
    },
    "./src/models/ultravox/processing_ultravox.js": (i, e, t) => {
      t.r(e), t.d(e, {
        UltravoxProcessor: () => d
      });
      var s = t("./src/models/auto/feature_extraction_auto.js"), l = t("./src/tokenizers.js"), f = t("./src/base/processing_utils.js");
      class d extends f.Processor {
        async _call(g, _ = null, h = {}) {
          if (Array.isArray(g))
            throw new Error("Batched inputs are not supported yet.");
          let r = {};
          if (_) {
            const u = _.length, { input_features: p } = await this.feature_extractor(_, {
              ...h,
              max_length: u
            }), M = Math.round(u / this.config.encoder_ds_factor + 1e-4), P = 1 + Math.ceil(M / this.config.stack_factor);
            r.audio_token_len = [
              P
            ], r.audio_values = p;
            const E = this.config.audio_placeholder;
            if (!g.includes(E))
              throw new Error(`The input text does not contain the image token ${E}.`);
            g = g.replaceAll(E, E.repeat(P));
          }
          return {
            ...this.tokenizer(g, {
              add_special_tokens: false,
              ...h
            }),
            ...r
          };
        }
      }
      __publicField(d, "tokenizer_class", l.AutoTokenizer);
      __publicField(d, "feature_extractor_class", s.AutoFeatureExtractor);
      __publicField(d, "uses_processor_config", true);
    },
    "./src/models/vit/image_processing_vit.js": (i, e, t) => {
      t.r(e), t.d(e, {
        ViTFeatureExtractor: () => f,
        ViTImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
      }
      class f extends l {
      }
    },
    "./src/models/vitmatte/image_processing_vitmatte.js": (i, e, t) => {
      t.r(e), t.d(e, {
        VitMatteImageProcessor: () => f
      });
      var s = t("./src/base/image_processors_utils.js"), l = t("./src/utils/tensor.js");
      class f extends s.ImageProcessor {
        async _call(w, g) {
          Array.isArray(w) || (w = [
            w
          ]), Array.isArray(g) || (g = [
            g
          ]);
          const _ = await Promise.all(w.map((n) => this.preprocess(n))), h = await Promise.all(g.map((n) => this.preprocess(n, {
            do_normalize: false,
            do_convert_rgb: false,
            do_convert_grayscale: true
          })));
          return {
            pixel_values: (0, l.stack)(_.map((n, u) => (0, l.cat)([
              n.pixel_values,
              h[u].pixel_values
            ], 0)), 0),
            original_sizes: _.map((n) => n.original_size),
            reshaped_input_sizes: _.map((n) => n.reshaped_input_size)
          };
        }
      }
    },
    "./src/models/vitpose/image_processing_vitpose.js": (i, e, t) => {
      t.r(e), t.d(e, {
        VitPoseImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        post_process_pose_estimation(d, w, { threshold: g = null } = {}) {
          const _ = d.tolist(), [h, r, n, u] = d.dims, p = [];
          for (let M = 0; M < h; ++M) {
            const P = _[M], E = w[M], k = [];
            for (let $ = 0; $ < E.length; ++$) {
              const A = E[$], C = [], F = [], D = [], N = A.at(-2) / u, R = A.at(-1) / n;
              for (let j = 0; j < P.length; ++j) {
                let [Z, te] = [
                  0,
                  0
                ], J = 0, G = -1 / 0;
                const H = P[j];
                for (let Q = 0; Q < H.length; ++Q) {
                  const he = H[Q];
                  for (let fe = 0; fe < he.length; ++fe) {
                    const Me = he[fe];
                    J += Me, G = Math.max(G, Me), Z += (fe + 0.5) * Me, te += Q * Me;
                  }
                }
                if (g != null && G < g)
                  continue;
                const U = [
                  N * Z / J,
                  R * te / J
                ];
                C.push(U), D.push(j), F.push(G);
              }
              k.push({
                bbox: A,
                scores: F,
                labels: D,
                keypoints: C
              });
            }
            p.push(k);
          }
          return p;
        }
      }
    },
    "./src/models/voxtral/processing_voxtral.js": (i, e, t) => {
      t.r(e), t.d(e, {
        VoxtralProcessor: () => r
      });
      var s = t("./src/models/auto/feature_extraction_auto.js"), l = t("./src/tokenizers.js"), f = t("./src/base/processing_utils.js"), d = t("./src/utils/tensor.js");
      const w = "[AUDIO]", g = "[BEGIN_AUDIO]", _ = 375;
      function h(n, u) {
        const p = [];
        for (let M = 0; M < n.length; M += u)
          p.push(n.subarray(M, Math.min(M + u, n.length)));
        return p;
      }
      class r extends f.Processor {
        async _call(u, p = null, M = {}) {
          if (Array.isArray(u))
            throw new Error("Batched inputs are not supported yet.");
          const P = {};
          if (p) {
            if (!u.includes(w))
              throw new Error(`The input text does not contain the audio token ${w}.`);
            Array.isArray(p) || (p = [
              p
            ]);
            const k = u.split(w), $ = k.length - 1;
            if ($ !== p.length)
              throw new Error(`The number of audio inputs (${p.length}) does not match the number of audio tokens in the text (${$}).`);
            const A = this.feature_extractor.config.n_samples, C = p.map((j) => h(j, A)), F = C.map((j) => j.length), D = C.flat(), N = (await Promise.all(D.map((j) => this.feature_extractor(j, M)))).map((j) => j.input_features);
            P.audio_values = N.length > 1 ? (0, d.cat)(N, 0) : N[0];
            let R = k[0];
            for (let j = 0; j < F.length; ++j) {
              R += g;
              for (let Z = 0; Z < F[j]; ++Z)
                R += w.repeat(_);
              R += k[j + 1];
            }
            u = R;
          }
          return {
            ...this.tokenizer(u, {
              add_special_tokens: false,
              ...M
            }),
            ...P
          };
        }
      }
      __publicField(r, "tokenizer_class", l.AutoTokenizer);
      __publicField(r, "feature_extractor_class", s.AutoFeatureExtractor);
      __publicField(r, "uses_processor_config", false);
    },
    "./src/models/wav2vec2/feature_extraction_wav2vec2.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Wav2Vec2FeatureExtractor: () => f
      });
      var s = t("./src/base/feature_extraction_utils.js"), l = t("./src/utils/tensor.js");
      class f extends s.FeatureExtractor {
        _zero_mean_unit_var_norm(w) {
          const _ = w.reduce((r, n) => r + n, 0) / w.length, h = w.reduce((r, n) => r + (n - _) ** 2, 0) / w.length;
          return w.map((r) => (r - _) / Math.sqrt(h + 1e-7));
        }
        async _call(w) {
          (0, s.validate_audio_inputs)(w, "Wav2Vec2FeatureExtractor"), w instanceof Float64Array && (w = new Float32Array(w));
          let g = w;
          this.config.do_normalize && (g = this._zero_mean_unit_var_norm(g));
          const _ = [
            1,
            g.length
          ];
          return {
            input_values: new l.Tensor("float32", g, _),
            attention_mask: new l.Tensor("int64", new BigInt64Array(g.length).fill(1n), _)
          };
        }
      }
    },
    "./src/models/wav2vec2/processing_wav2vec2.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Wav2Vec2Processor: () => d
      });
      var s = t("./src/tokenizers.js"), l = t("./src/models/auto/feature_extraction_auto.js"), f = t("./src/base/processing_utils.js");
      class d extends f.Processor {
        async _call(g) {
          return await this.feature_extractor(g);
        }
      }
      __publicField(d, "tokenizer_class", s.AutoTokenizer);
      __publicField(d, "feature_extractor_class", l.AutoFeatureExtractor);
    },
    "./src/models/wav2vec2_with_lm/processing_wav2vec2_with_lm.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Wav2Vec2ProcessorWithLM: () => d
      });
      var s = t("./src/tokenizers.js"), l = t("./src/models/auto/feature_extraction_auto.js"), f = t("./src/base/processing_utils.js");
      class d extends f.Processor {
        async _call(g) {
          return await this.feature_extractor(g);
        }
      }
      __publicField(d, "tokenizer_class", s.AutoTokenizer);
      __publicField(d, "feature_extractor_class", l.AutoFeatureExtractor);
    },
    "./src/models/wespeaker/feature_extraction_wespeaker.js": (i, e, t) => {
      t.r(e), t.d(e, {
        WeSpeakerFeatureExtractor: () => f
      });
      var s = t("./src/base/feature_extraction_utils.js");
      t("./src/utils/tensor.js");
      var l = t("./src/utils/audio.js");
      class f extends s.FeatureExtractor {
        constructor(w) {
          super(w);
          const g = this.config.sampling_rate, _ = (0, l.mel_filter_bank)(257, this.config.num_mel_bins, 20, Math.floor(g / 2), g, null, "kaldi", true);
          this.mel_filters = _, this.window = (0, l.window_function)(400, "hamming", {
            periodic: false
          }), this.min_num_frames = this.config.min_num_frames;
        }
        async _extract_fbank_features(w) {
          return w = w.map((g) => g * 32768), (0, l.spectrogram)(w, this.window, 400, 160, {
            fft_length: 512,
            power: 2,
            center: false,
            preemphasis: 0.97,
            mel_filters: this.mel_filters,
            log_mel: "log",
            mel_floor: 1192092955078125e-22,
            remove_dc_offset: true,
            transpose: true,
            min_num_frames: this.min_num_frames
          });
        }
        async _call(w) {
          (0, s.validate_audio_inputs)(w, "WeSpeakerFeatureExtractor");
          const g = (await this._extract_fbank_features(w)).unsqueeze_(0);
          if (this.config.fbank_centering_span === null) {
            const _ = g.mean(1).data, h = g.data, [r, n, u] = g.dims;
            for (let p = 0; p < r; ++p) {
              const M = p * n * u, P = p * u;
              for (let E = 0; E < n; ++E) {
                const k = M + E * u;
                for (let $ = 0; $ < u; ++$)
                  h[k + $] -= _[P + $];
              }
            }
          }
          return {
            input_features: g
          };
        }
      }
    },
    "./src/models/whisper/common_whisper.js": (i, e, t) => {
      t.r(e), t.d(e, {
        WHISPER_LANGUAGE_MAPPING: () => l,
        WHISPER_TO_LANGUAGE_CODE_MAPPING: () => f,
        whisper_language_to_code: () => d
      });
      const s = [
        [
          "en",
          "english"
        ],
        [
          "zh",
          "chinese"
        ],
        [
          "de",
          "german"
        ],
        [
          "es",
          "spanish"
        ],
        [
          "ru",
          "russian"
        ],
        [
          "ko",
          "korean"
        ],
        [
          "fr",
          "french"
        ],
        [
          "ja",
          "japanese"
        ],
        [
          "pt",
          "portuguese"
        ],
        [
          "tr",
          "turkish"
        ],
        [
          "pl",
          "polish"
        ],
        [
          "ca",
          "catalan"
        ],
        [
          "nl",
          "dutch"
        ],
        [
          "ar",
          "arabic"
        ],
        [
          "sv",
          "swedish"
        ],
        [
          "it",
          "italian"
        ],
        [
          "id",
          "indonesian"
        ],
        [
          "hi",
          "hindi"
        ],
        [
          "fi",
          "finnish"
        ],
        [
          "vi",
          "vietnamese"
        ],
        [
          "he",
          "hebrew"
        ],
        [
          "uk",
          "ukrainian"
        ],
        [
          "el",
          "greek"
        ],
        [
          "ms",
          "malay"
        ],
        [
          "cs",
          "czech"
        ],
        [
          "ro",
          "romanian"
        ],
        [
          "da",
          "danish"
        ],
        [
          "hu",
          "hungarian"
        ],
        [
          "ta",
          "tamil"
        ],
        [
          "no",
          "norwegian"
        ],
        [
          "th",
          "thai"
        ],
        [
          "ur",
          "urdu"
        ],
        [
          "hr",
          "croatian"
        ],
        [
          "bg",
          "bulgarian"
        ],
        [
          "lt",
          "lithuanian"
        ],
        [
          "la",
          "latin"
        ],
        [
          "mi",
          "maori"
        ],
        [
          "ml",
          "malayalam"
        ],
        [
          "cy",
          "welsh"
        ],
        [
          "sk",
          "slovak"
        ],
        [
          "te",
          "telugu"
        ],
        [
          "fa",
          "persian"
        ],
        [
          "lv",
          "latvian"
        ],
        [
          "bn",
          "bengali"
        ],
        [
          "sr",
          "serbian"
        ],
        [
          "az",
          "azerbaijani"
        ],
        [
          "sl",
          "slovenian"
        ],
        [
          "kn",
          "kannada"
        ],
        [
          "et",
          "estonian"
        ],
        [
          "mk",
          "macedonian"
        ],
        [
          "br",
          "breton"
        ],
        [
          "eu",
          "basque"
        ],
        [
          "is",
          "icelandic"
        ],
        [
          "hy",
          "armenian"
        ],
        [
          "ne",
          "nepali"
        ],
        [
          "mn",
          "mongolian"
        ],
        [
          "bs",
          "bosnian"
        ],
        [
          "kk",
          "kazakh"
        ],
        [
          "sq",
          "albanian"
        ],
        [
          "sw",
          "swahili"
        ],
        [
          "gl",
          "galician"
        ],
        [
          "mr",
          "marathi"
        ],
        [
          "pa",
          "punjabi"
        ],
        [
          "si",
          "sinhala"
        ],
        [
          "km",
          "khmer"
        ],
        [
          "sn",
          "shona"
        ],
        [
          "yo",
          "yoruba"
        ],
        [
          "so",
          "somali"
        ],
        [
          "af",
          "afrikaans"
        ],
        [
          "oc",
          "occitan"
        ],
        [
          "ka",
          "georgian"
        ],
        [
          "be",
          "belarusian"
        ],
        [
          "tg",
          "tajik"
        ],
        [
          "sd",
          "sindhi"
        ],
        [
          "gu",
          "gujarati"
        ],
        [
          "am",
          "amharic"
        ],
        [
          "yi",
          "yiddish"
        ],
        [
          "lo",
          "lao"
        ],
        [
          "uz",
          "uzbek"
        ],
        [
          "fo",
          "faroese"
        ],
        [
          "ht",
          "haitian creole"
        ],
        [
          "ps",
          "pashto"
        ],
        [
          "tk",
          "turkmen"
        ],
        [
          "nn",
          "nynorsk"
        ],
        [
          "mt",
          "maltese"
        ],
        [
          "sa",
          "sanskrit"
        ],
        [
          "lb",
          "luxembourgish"
        ],
        [
          "my",
          "myanmar"
        ],
        [
          "bo",
          "tibetan"
        ],
        [
          "tl",
          "tagalog"
        ],
        [
          "mg",
          "malagasy"
        ],
        [
          "as",
          "assamese"
        ],
        [
          "tt",
          "tatar"
        ],
        [
          "haw",
          "hawaiian"
        ],
        [
          "ln",
          "lingala"
        ],
        [
          "ha",
          "hausa"
        ],
        [
          "ba",
          "bashkir"
        ],
        [
          "jw",
          "javanese"
        ],
        [
          "su",
          "sundanese"
        ]
      ], l = new Map(s), f = new Map([
        ...s.map(([w, g]) => [
          g,
          w
        ]),
        [
          "burmese",
          "my"
        ],
        [
          "valencian",
          "ca"
        ],
        [
          "flemish",
          "nl"
        ],
        [
          "haitian",
          "ht"
        ],
        [
          "letzeburgesch",
          "lb"
        ],
        [
          "pushto",
          "ps"
        ],
        [
          "panjabi",
          "pa"
        ],
        [
          "moldavian",
          "ro"
        ],
        [
          "moldovan",
          "ro"
        ],
        [
          "sinhalese",
          "si"
        ],
        [
          "castilian",
          "es"
        ]
      ]);
      function d(w) {
        w = w.toLowerCase();
        let g = f.get(w);
        if (g === void 0) {
          const _ = w.match(/^<\|([a-z]{2})\|>$/);
          if (_ && (w = _[1]), l.has(w))
            g = w;
          else {
            const r = w.length === 2 ? l.keys() : l.values();
            throw new Error(`Language "${w}" is not supported. Must be one of: ${JSON.stringify(Array.from(r))}`);
          }
        }
        return g;
      }
    },
    "./src/models/whisper/feature_extraction_whisper.js": (i, e, t) => {
      t.r(e), t.d(e, {
        WhisperFeatureExtractor: () => d
      });
      var s = t("./src/base/feature_extraction_utils.js");
      t("./src/utils/tensor.js");
      var l = t("./src/utils/audio.js"), f = t("./src/utils/maths.js");
      class d extends s.FeatureExtractor {
        constructor(g) {
          var _a;
          super(g), (_a = this.config).mel_filters ?? (_a.mel_filters = (0, l.mel_filter_bank)(Math.floor(1 + this.config.n_fft / 2), this.config.feature_size, 0, 8e3, this.config.sampling_rate, "slaney", "slaney")), this.window = (0, l.window_function)(this.config.n_fft, "hann");
        }
        async _extract_fbank_features(g) {
          const _ = await (0, l.spectrogram)(g, this.window, this.config.n_fft, this.config.hop_length, {
            power: 2,
            mel_filters: this.config.mel_filters,
            log_mel: "log10",
            max_num_frames: Math.min(Math.floor(g.length / this.config.hop_length), this.config.nb_max_frames)
          }), h = _.data, r = (0, f.max)(h)[0];
          for (let n = 0; n < h.length; ++n)
            h[n] = (Math.max(h[n], r - 8) + 4) / 4;
          return _;
        }
        async _call(g, { max_length: _ = null } = {}) {
          (0, s.validate_audio_inputs)(g, "WhisperFeatureExtractor");
          let h;
          const r = _ ?? this.config.n_samples;
          return g.length > r ? (g.length > this.config.n_samples && console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."), h = g.slice(0, r)) : (h = new Float32Array(r), h.set(g)), {
            input_features: (await this._extract_fbank_features(h)).unsqueeze_(0)
          };
        }
      }
    },
    "./src/models/whisper/generation_whisper.js": (i, e, t) => {
      t.r(e), t.d(e, {
        WhisperGenerationConfig: () => l
      });
      var s = t("./src/generation/configuration_utils.js");
      class l extends s.GenerationConfig {
        constructor() {
          super(...arguments);
          __publicField(this, "return_timestamps", null);
          __publicField(this, "return_token_timestamps", null);
          __publicField(this, "num_frames", null);
          __publicField(this, "alignment_heads", null);
          __publicField(this, "task", null);
          __publicField(this, "language", null);
          __publicField(this, "no_timestamps_token_id", null);
          __publicField(this, "prompt_ids", null);
          __publicField(this, "is_multilingual", null);
          __publicField(this, "lang_to_id", null);
          __publicField(this, "task_to_id", null);
          __publicField(this, "max_initial_timestamp_index", 1);
        }
      }
    },
    "./src/models/whisper/processing_whisper.js": (i, e, t) => {
      t.r(e), t.d(e, {
        WhisperProcessor: () => d
      });
      var s = t("./src/models/auto/feature_extraction_auto.js"), l = t("./src/tokenizers.js"), f = t("./src/base/processing_utils.js");
      class d extends f.Processor {
        async _call(g) {
          return await this.feature_extractor(g);
        }
      }
      __publicField(d, "tokenizer_class", l.AutoTokenizer);
      __publicField(d, "feature_extractor_class", s.AutoFeatureExtractor);
    },
    "./src/models/yolos/image_processing_yolos.js": (i, e, t) => {
      t.r(e), t.d(e, {
        YolosFeatureExtractor: () => f,
        YolosImageProcessor: () => l
      });
      var s = t("./src/base/image_processors_utils.js");
      class l extends s.ImageProcessor {
        post_process_object_detection(...w) {
          return (0, s.post_process_object_detection)(...w);
        }
      }
      class f extends l {
      }
    },
    "./src/ops/registry.js": (i, e, t) => {
      t.r(e), t.d(e, {
        TensorOpRegistry: () => d
      });
      var s = t("./src/backends/onnx.js"), l = t("./src/utils/tensor.js");
      const f = async (w, g, _) => {
        const h = await (0, s.createInferenceSession)(new Uint8Array(w), g);
        return async (r) => {
          const n = (0, s.isONNXProxy)(), u = Object.fromEntries(Object.entries(r).map(([M, P]) => [
            M,
            (n ? P.clone() : P).ort_tensor
          ])), p = await (0, s.runInferenceSession)(h, u);
          return Array.isArray(_) ? _.map((M) => new l.Tensor(p[M])) : new l.Tensor(p[_]);
        };
      };
      class d {
        static get nearest_interpolate_4d() {
          return this._nearest_interpolate_4d || (this._nearest_interpolate_4d = f([
            8,
            10,
            18,
            0,
            58,
            129,
            1,
            10,
            41,
            10,
            1,
            120,
            10,
            0,
            10,
            0,
            10,
            1,
            115,
            18,
            1,
            121,
            34,
            6,
            82,
            101,
            115,
            105,
            122,
            101,
            42,
            18,
            10,
            4,
            109,
            111,
            100,
            101,
            34,
            7,
            110,
            101,
            97,
            114,
            101,
            115,
            116,
            160,
            1,
            3,
            18,
            1,
            114,
            90,
            31,
            10,
            1,
            120,
            18,
            26,
            10,
            24,
            8,
            1,
            18,
            20,
            10,
            3,
            18,
            1,
            98,
            10,
            3,
            18,
            1,
            99,
            10,
            3,
            18,
            1,
            104,
            10,
            3,
            18,
            1,
            119,
            90,
            15,
            10,
            1,
            115,
            18,
            10,
            10,
            8,
            8,
            7,
            18,
            4,
            10,
            2,
            8,
            4,
            98,
            31,
            10,
            1,
            121,
            18,
            26,
            10,
            24,
            8,
            1,
            18,
            20,
            10,
            3,
            18,
            1,
            98,
            10,
            3,
            18,
            1,
            99,
            10,
            3,
            18,
            1,
            104,
            10,
            3,
            18,
            1,
            119,
            66,
            2,
            16,
            21
          ], this.session_options, "y")), this._nearest_interpolate_4d;
        }
        static get bilinear_interpolate_4d() {
          return this._bilinear_interpolate_4d || (this._bilinear_interpolate_4d = f([
            8,
            9,
            18,
            0,
            58,
            128,
            1,
            10,
            40,
            10,
            1,
            120,
            10,
            0,
            10,
            0,
            10,
            1,
            115,
            18,
            1,
            121,
            34,
            6,
            82,
            101,
            115,
            105,
            122,
            101,
            42,
            17,
            10,
            4,
            109,
            111,
            100,
            101,
            34,
            6,
            108,
            105,
            110,
            101,
            97,
            114,
            160,
            1,
            3,
            18,
            1,
            114,
            90,
            31,
            10,
            1,
            120,
            18,
            26,
            10,
            24,
            8,
            1,
            18,
            20,
            10,
            3,
            18,
            1,
            98,
            10,
            3,
            18,
            1,
            99,
            10,
            3,
            18,
            1,
            104,
            10,
            3,
            18,
            1,
            119,
            90,
            15,
            10,
            1,
            115,
            18,
            10,
            10,
            8,
            8,
            7,
            18,
            4,
            10,
            2,
            8,
            4,
            98,
            31,
            10,
            1,
            121,
            18,
            26,
            10,
            24,
            8,
            1,
            18,
            20,
            10,
            3,
            18,
            1,
            98,
            10,
            3,
            18,
            1,
            99,
            10,
            3,
            18,
            1,
            104,
            10,
            3,
            18,
            1,
            119,
            66,
            2,
            16,
            20
          ], this.session_options, "y")), this._bilinear_interpolate_4d;
        }
        static get bicubic_interpolate_4d() {
          return this._bicubic_interpolate_4d || (this._bicubic_interpolate_4d = f([
            8,
            9,
            18,
            0,
            58,
            127,
            10,
            39,
            10,
            1,
            120,
            10,
            0,
            10,
            0,
            10,
            1,
            115,
            18,
            1,
            121,
            34,
            6,
            82,
            101,
            115,
            105,
            122,
            101,
            42,
            16,
            10,
            4,
            109,
            111,
            100,
            101,
            34,
            5,
            99,
            117,
            98,
            105,
            99,
            160,
            1,
            3,
            18,
            1,
            114,
            90,
            31,
            10,
            1,
            120,
            18,
            26,
            10,
            24,
            8,
            1,
            18,
            20,
            10,
            3,
            18,
            1,
            98,
            10,
            3,
            18,
            1,
            99,
            10,
            3,
            18,
            1,
            104,
            10,
            3,
            18,
            1,
            119,
            90,
            15,
            10,
            1,
            115,
            18,
            10,
            10,
            8,
            8,
            7,
            18,
            4,
            10,
            2,
            8,
            4,
            98,
            31,
            10,
            1,
            121,
            18,
            26,
            10,
            24,
            8,
            1,
            18,
            20,
            10,
            3,
            18,
            1,
            98,
            10,
            3,
            18,
            1,
            99,
            10,
            3,
            18,
            1,
            104,
            10,
            3,
            18,
            1,
            119,
            66,
            2,
            16,
            20
          ], this.session_options, "y")), this._bicubic_interpolate_4d;
        }
        static get matmul() {
          return this._matmul || (this._matmul = f([
            8,
            9,
            18,
            0,
            58,
            55,
            10,
            17,
            10,
            1,
            97,
            10,
            1,
            98,
            18,
            1,
            99,
            34,
            6,
            77,
            97,
            116,
            77,
            117,
            108,
            18,
            1,
            114,
            90,
            9,
            10,
            1,
            97,
            18,
            4,
            10,
            2,
            8,
            1,
            90,
            9,
            10,
            1,
            98,
            18,
            4,
            10,
            2,
            8,
            1,
            98,
            9,
            10,
            1,
            99,
            18,
            4,
            10,
            2,
            8,
            1,
            66,
            2,
            16,
            20
          ], this.session_options, "c")), this._matmul;
        }
        static get stft() {
          return this._stft || (this._stft = f([
            8,
            7,
            18,
            0,
            58,
            148,
            1,
            10,
            38,
            10,
            1,
            115,
            10,
            1,
            106,
            10,
            1,
            119,
            10,
            1,
            108,
            18,
            1,
            111,
            34,
            4,
            83,
            84,
            70,
            84,
            42,
            15,
            10,
            8,
            111,
            110,
            101,
            115,
            105,
            100,
            101,
            100,
            24,
            1,
            160,
            1,
            2,
            18,
            1,
            115,
            90,
            26,
            10,
            1,
            115,
            18,
            21,
            10,
            19,
            8,
            1,
            18,
            15,
            10,
            3,
            18,
            1,
            98,
            10,
            3,
            18,
            1,
            115,
            10,
            3,
            18,
            1,
            99,
            90,
            11,
            10,
            1,
            106,
            18,
            6,
            10,
            4,
            8,
            7,
            18,
            0,
            90,
            16,
            10,
            1,
            119,
            18,
            11,
            10,
            9,
            8,
            1,
            18,
            5,
            10,
            3,
            18,
            1,
            119,
            90,
            11,
            10,
            1,
            108,
            18,
            6,
            10,
            4,
            8,
            7,
            18,
            0,
            98,
            31,
            10,
            1,
            111,
            18,
            26,
            10,
            24,
            8,
            1,
            18,
            20,
            10,
            3,
            18,
            1,
            98,
            10,
            3,
            18,
            1,
            102,
            10,
            3,
            18,
            1,
            100,
            10,
            3,
            18,
            1,
            99,
            66,
            2,
            16,
            17
          ], this.session_options, "o")), this._stft;
        }
        static get rfft() {
          return this._rfft || (this._rfft = f([
            8,
            9,
            18,
            0,
            58,
            97,
            10,
            33,
            10,
            1,
            120,
            10,
            0,
            10,
            1,
            97,
            18,
            1,
            121,
            34,
            3,
            68,
            70,
            84,
            42,
            15,
            10,
            8,
            111,
            110,
            101,
            115,
            105,
            100,
            101,
            100,
            24,
            1,
            160,
            1,
            2,
            18,
            1,
            100,
            90,
            21,
            10,
            1,
            120,
            18,
            16,
            10,
            14,
            8,
            1,
            18,
            10,
            10,
            3,
            18,
            1,
            115,
            10,
            3,
            18,
            1,
            99,
            90,
            11,
            10,
            1,
            97,
            18,
            6,
            10,
            4,
            8,
            7,
            18,
            0,
            98,
            21,
            10,
            1,
            121,
            18,
            16,
            10,
            14,
            8,
            1,
            18,
            10,
            10,
            3,
            18,
            1,
            115,
            10,
            3,
            18,
            1,
            99,
            66,
            2,
            16,
            20
          ], this.session_options, "y")), this._rfft;
        }
        static get top_k() {
          return this._top_k || (this._top_k = f([
            8,
            10,
            18,
            0,
            58,
            73,
            10,
            18,
            10,
            1,
            120,
            10,
            1,
            107,
            18,
            1,
            118,
            18,
            1,
            105,
            34,
            4,
            84,
            111,
            112,
            75,
            18,
            1,
            116,
            90,
            9,
            10,
            1,
            120,
            18,
            4,
            10,
            2,
            8,
            1,
            90,
            15,
            10,
            1,
            107,
            18,
            10,
            10,
            8,
            8,
            7,
            18,
            4,
            10,
            2,
            8,
            1,
            98,
            9,
            10,
            1,
            118,
            18,
            4,
            10,
            2,
            8,
            1,
            98,
            9,
            10,
            1,
            105,
            18,
            4,
            10,
            2,
            8,
            7,
            66,
            2,
            16,
            21
          ], this.session_options, [
            "v",
            "i"
          ])), this._top_k;
        }
        static get slice() {
          return this._slice || (this._slice = f([
            8,
            7,
            18,
            0,
            58,
            96,
            10,
            25,
            10,
            1,
            120,
            10,
            1,
            115,
            10,
            1,
            101,
            10,
            1,
            97,
            10,
            1,
            116,
            18,
            1,
            121,
            34,
            5,
            83,
            108,
            105,
            99,
            101,
            18,
            1,
            114,
            90,
            9,
            10,
            1,
            120,
            18,
            4,
            10,
            2,
            8,
            1,
            90,
            9,
            10,
            1,
            115,
            18,
            4,
            10,
            2,
            8,
            7,
            90,
            9,
            10,
            1,
            101,
            18,
            4,
            10,
            2,
            8,
            7,
            90,
            9,
            10,
            1,
            97,
            18,
            4,
            10,
            2,
            8,
            7,
            90,
            9,
            10,
            1,
            116,
            18,
            4,
            10,
            2,
            8,
            7,
            98,
            9,
            10,
            1,
            121,
            18,
            4,
            10,
            2,
            8,
            1,
            66,
            2,
            16,
            13
          ], this.session_options, "y")), this._slice;
        }
      }
      __publicField(d, "session_options", {});
    },
    "./src/pipelines.js": (i, e, t) => {
      t.r(e), t.d(e, {
        AudioClassificationPipeline: () => te,
        AutomaticSpeechRecognitionPipeline: () => G,
        BackgroundRemovalPipeline: () => he,
        DepthEstimationPipeline: () => Oe,
        DocumentQuestionAnsweringPipeline: () => oe,
        FeatureExtractionPipeline: () => j,
        FillMaskPipeline: () => $,
        ImageClassificationPipeline: () => U,
        ImageFeatureExtractionPipeline: () => Z,
        ImageSegmentationPipeline: () => Q,
        ImageToImagePipeline: () => Ee,
        ImageToTextPipeline: () => H,
        ObjectDetectionPipeline: () => Me,
        Pipeline: () => M,
        QuestionAnsweringPipeline: () => k,
        SummarizationPipeline: () => C,
        Text2TextGenerationPipeline: () => A,
        TextClassificationPipeline: () => P,
        TextGenerationPipeline: () => N,
        TextToAudioPipeline: () => be,
        TokenClassificationPipeline: () => E,
        TranslationPipeline: () => F,
        ZeroShotAudioClassificationPipeline: () => J,
        ZeroShotClassificationPipeline: () => R,
        ZeroShotImageClassificationPipeline: () => fe,
        ZeroShotObjectDetectionPipeline: () => pe,
        pipeline: () => ot
      });
      var s = t("./src/tokenizers.js"), l = t("./src/models.js"), f = t("./src/models/auto/processing_auto.js");
      t("./src/base/processing_utils.js");
      var d = t("./src/utils/generic.js"), w = t("./src/utils/core.js"), g = t("./src/utils/maths.js"), _ = t("./src/utils/audio.js"), h = t("./src/utils/tensor.js"), r = t("./src/utils/image.js");
      async function n(qe) {
        return Array.isArray(qe) || (qe = [
          qe
        ]), await Promise.all(qe.map((_e) => r.RawImage.read(_e)));
      }
      async function u(qe, _e) {
        return Array.isArray(qe) || (qe = [
          qe
        ]), await Promise.all(qe.map((le) => typeof le == "string" || le instanceof URL ? (0, _.read_audio)(le, _e) : le instanceof Float64Array ? new Float32Array(le) : le));
      }
      function p(qe, _e) {
        _e && (qe = qe.map((rt) => rt | 0));
        const [le, De, Be, Ze] = qe;
        return {
          xmin: le,
          ymin: De,
          xmax: Be,
          ymax: Ze
        };
      }
      class M extends d.Callable {
        constructor({ task: _e, model: le, tokenizer: De = null, processor: Be = null }) {
          super(), this.task = _e, this.model = le, this.tokenizer = De, this.processor = Be;
        }
        async dispose() {
          await this.model.dispose();
        }
      }
      class P extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, { top_k: le = 1 } = {}) {
          const De = this.tokenizer(_e, {
            padding: true,
            truncation: true
          }), Be = await this.model(De), Ze = this.model.config.problem_type === "multi_label_classification" ? (it) => it.sigmoid() : (it) => new h.Tensor("float32", (0, g.softmax)(it.data), it.dims), rt = this.model.config.id2label, je = [];
          for (const it of Be.logits) {
            const Ge = Ze(it), lt = await (0, h.topk)(Ge, le), ht = lt[0].tolist(), Je = lt[1].tolist().map((Rt, pt) => ({
              label: rt ? rt[Rt] : `LABEL_${Rt}`,
              score: ht[pt]
            }));
            le === 1 ? je.push(...Je) : je.push(Je);
          }
          return Array.isArray(_e) || le === 1 ? je : je[0];
        }
      }
      class E extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, { ignore_labels: le = [
          "O"
        ] } = {}) {
          const De = Array.isArray(_e), Be = this.tokenizer(De ? _e : [
            _e
          ], {
            padding: true,
            truncation: true
          }), rt = (await this.model(Be)).logits, je = this.model.config.id2label, it = [];
          for (let Ge = 0; Ge < rt.dims[0]; ++Ge) {
            const lt = Be.input_ids[Ge], ht = rt[Ge], mt = [];
            for (let Je = 0; Je < ht.dims[0]; ++Je) {
              const Rt = ht[Je], pt = (0, g.max)(Rt.data)[1], At = je ? je[pt] : `LABEL_${pt}`;
              if (le.includes(At))
                continue;
              const Ot = this.tokenizer.decode([
                lt[Je].item()
              ], {
                skip_special_tokens: true
              });
              if (Ot === "")
                continue;
              const Ct = (0, g.softmax)(Rt.data);
              mt.push({
                entity: At,
                score: Ct[pt],
                index: Je,
                word: Ot
              });
            }
            it.push(mt);
          }
          return De ? it : it[0];
        }
      }
      class k extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le, { top_k: De = 1 } = {}) {
          const Be = this.tokenizer(_e, {
            text_pair: le,
            padding: true,
            truncation: true
          }), { start_logits: Ze, end_logits: rt } = await this.model(Be), je = Be.input_ids.tolist(), it = Be.attention_mask.tolist(), Ge = this.tokenizer.all_special_ids, lt = [];
          for (let ht = 0; ht < Ze.dims[0]; ++ht) {
            const mt = je[ht], Je = mt.findIndex((St) => St == this.tokenizer.sep_token_id);
            it[ht].map((St, zt) => St == 1 && (zt === 0 || zt > Je && Ge.findIndex((_n) => _n == mt[zt]) === -1));
            const Rt = Ze[ht].tolist(), pt = rt[ht].tolist();
            for (let St = 1; St < Rt.length; ++St)
              (it[ht] == 0 || St <= Je || Ge.findIndex((zt) => zt == mt[St]) !== -1) && (Rt[St] = -1 / 0, pt[St] = -1 / 0);
            const At = (0, g.softmax)(Rt).map((St, zt) => [
              St,
              zt
            ]), Ot = (0, g.softmax)(pt).map((St, zt) => [
              St,
              zt
            ]);
            At[0][0] = 0, Ot[0][0] = 0;
            const Ct = (0, w.product)(At, Ot).filter((St) => St[0][1] <= St[1][1]).map((St) => [
              St[0][1],
              St[1][1],
              St[0][0] * St[1][0]
            ]).sort((St, zt) => zt[2] - St[2]);
            for (let St = 0; St < Math.min(Ct.length, De); ++St) {
              const [zt, _n, Zt] = Ct[St], en = mt.slice(zt, _n + 1), qt = this.tokenizer.decode(en, {
                skip_special_tokens: true
              });
              lt.push({
                answer: qt,
                score: Zt
              });
            }
          }
          return De === 1 ? lt[0] : lt;
        }
      }
      class $ extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, { top_k: le = 5 } = {}) {
          const De = this.tokenizer(_e, {
            padding: true,
            truncation: true
          }), { logits: Be } = await this.model(De), Ze = [], rt = De.input_ids.tolist();
          for (let je = 0; je < rt.length; ++je) {
            const it = rt[je], Ge = it.findIndex((Rt) => Rt == this.tokenizer.mask_token_id);
            if (Ge === -1)
              throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);
            const lt = Be[je][Ge], ht = await (0, h.topk)(new h.Tensor("float32", (0, g.softmax)(lt.data), lt.dims), le), mt = ht[0].tolist(), Je = ht[1].tolist();
            Ze.push(Je.map((Rt, pt) => {
              const At = it.slice();
              return At[Ge] = Rt, {
                score: mt[pt],
                token: Number(Rt),
                token_str: this.tokenizer.decode([
                  Rt
                ]),
                sequence: this.tokenizer.decode(At, {
                  skip_special_tokens: true
                })
              };
            }));
          }
          return Array.isArray(_e) ? Ze : Ze[0];
        }
      }
      class A extends M {
        constructor(_e) {
          super(_e);
          __publicField(this, "_key", "generated_text");
        }
        async _call(_e, le = {}) {
          Array.isArray(_e) || (_e = [
            _e
          ]), this.model.config.prefix && (_e = _e.map((it) => this.model.config.prefix + it));
          const De = this.model.config.task_specific_params;
          De && De[this.task] && De[this.task].prefix && (_e = _e.map((it) => De[this.task].prefix + it));
          const Be = this.tokenizer, Ze = {
            padding: true,
            truncation: true
          };
          let rt;
          this instanceof F && "_build_translation_inputs" in Be ? rt = Be._build_translation_inputs(_e, Ze, le) : rt = Be(_e, Ze);
          const je = await this.model.generate({
            ...rt,
            ...le
          });
          return Be.batch_decode(je, {
            skip_special_tokens: true
          }).map((it) => ({
            [this._key]: it
          }));
        }
      }
      class C extends A {
        constructor(_e) {
          super(_e);
          __publicField(this, "_key", "summary_text");
        }
      }
      class F extends A {
        constructor(_e) {
          super(_e);
          __publicField(this, "_key", "translation_text");
        }
      }
      function D(qe) {
        return Array.isArray(qe) && qe.every((_e) => "role" in _e && "content" in _e);
      }
      class N extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le = {}) {
          let De = false, Be = false, Ze = le.add_special_tokens ?? (this.tokenizer.add_bos_token || this.tokenizer.add_eos_token) ?? false, rt;
          if (typeof _e == "string")
            rt = _e = [
              _e
            ];
          else if (Array.isArray(_e) && _e.every((Je) => typeof Je == "string"))
            De = true, rt = _e;
          else {
            if (D(_e))
              _e = [
                _e
              ];
            else if (Array.isArray(_e) && _e.every(D))
              De = true;
            else
              throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");
            Be = true, rt = _e.map((Je) => this.tokenizer.apply_chat_template(Je, {
              tokenize: false,
              add_generation_prompt: true
            })), Ze = false;
          }
          const je = Be ? false : le.return_full_text ?? true;
          this.tokenizer.padding_side = "left";
          const it = this.tokenizer(rt, {
            add_special_tokens: Ze,
            padding: true,
            truncation: true
          }), Ge = await this.model.generate({
            ...it,
            ...le
          }), lt = this.tokenizer.batch_decode(Ge, {
            skip_special_tokens: true
          });
          let ht;
          !je && it.input_ids.dims.at(-1) > 0 && (ht = this.tokenizer.batch_decode(it.input_ids, {
            skip_special_tokens: true
          }).map((Je) => Je.length));
          const mt = Array.from({
            length: _e.length
          }, (Je) => []);
          for (let Je = 0; Je < lt.length; ++Je) {
            const Rt = Math.floor(Je / Ge.dims[0] * _e.length);
            ht && (lt[Je] = lt[Je].slice(ht[Rt])), mt[Rt].push({
              generated_text: Be ? [
                ..._e[Rt],
                {
                  role: "assistant",
                  content: lt[Je]
                }
              ] : lt[Je]
            });
          }
          return !De && mt.length === 1 ? mt[0] : mt;
        }
      }
      class R extends M {
        constructor(_e) {
          super(_e), this.label2id = Object.fromEntries(Object.entries(this.model.config.label2id).map(([le, De]) => [
            le.toLowerCase(),
            De
          ])), this.entailment_id = this.label2id.entailment, this.entailment_id === void 0 && (console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."), this.entailment_id = 2), this.contradiction_id = this.label2id.contradiction ?? this.label2id.not_entailment, this.contradiction_id === void 0 && (console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."), this.contradiction_id = 0);
        }
        async _call(_e, le, { hypothesis_template: De = "This example is {}.", multi_label: Be = false } = {}) {
          const Ze = Array.isArray(_e);
          Ze || (_e = [
            _e
          ]), Array.isArray(le) || (le = [
            le
          ]);
          const rt = le.map((Ge) => De.replace("{}", Ge)), je = Be || le.length === 1, it = [];
          for (const Ge of _e) {
            const lt = [];
            for (const Je of rt) {
              const Rt = this.tokenizer(Ge, {
                text_pair: Je,
                padding: true,
                truncation: true
              }), pt = await this.model(Rt);
              je ? lt.push([
                pt.logits.data[this.contradiction_id],
                pt.logits.data[this.entailment_id]
              ]) : lt.push(pt.logits.data[this.entailment_id]);
            }
            const mt = (je ? lt.map((Je) => (0, g.softmax)(Je)[1]) : (0, g.softmax)(lt)).map((Je, Rt) => [
              Je,
              Rt
            ]).sort((Je, Rt) => Rt[0] - Je[0]);
            it.push({
              sequence: Ge,
              labels: mt.map((Je) => le[Je[1]]),
              scores: mt.map((Je) => Je[0])
            });
          }
          return Ze ? it : it[0];
        }
      }
      class j extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, { pooling: le = "none", normalize: De = false, quantize: Be = false, precision: Ze = "binary" } = {}) {
          const rt = this.tokenizer(_e, {
            padding: true,
            truncation: true
          }), je = await this.model(rt);
          let it = je.last_hidden_state ?? je.logits ?? je.token_embeddings;
          switch (le) {
            case "none":
              break;
            case "mean":
              it = (0, h.mean_pooling)(it, rt.attention_mask);
              break;
            case "first_token":
            case "cls":
              it = it.slice(null, 0);
              break;
            case "last_token":
            case "eos":
              it = it.slice(null, -1);
              break;
            default:
              throw Error(`Pooling method '${le}' not supported.`);
          }
          return De && (it = it.normalize(2, -1)), Be && (it = (0, h.quantize_embeddings)(it, Ze)), it;
        }
      }
      class Z extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, { pool: le = null } = {}) {
          const De = await n(_e), { pixel_values: Be } = await this.processor(De), Ze = await this.model({
            pixel_values: Be
          });
          let rt;
          if (le) {
            if (!("pooler_output" in Ze))
              throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");
            rt = Ze.pooler_output;
          } else
            rt = Ze.last_hidden_state ?? Ze.logits ?? Ze.image_embeds;
          return rt;
        }
      }
      class te extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, { top_k: le = 5 } = {}) {
          const De = this.processor.feature_extractor.config.sampling_rate, Be = await u(_e, De), Ze = this.model.config.id2label, rt = [];
          for (const je of Be) {
            const it = await this.processor(je), lt = (await this.model(it)).logits[0], ht = await (0, h.topk)(new h.Tensor("float32", (0, g.softmax)(lt.data), lt.dims), le), mt = ht[0].tolist(), Rt = ht[1].tolist().map((pt, At) => ({
              label: Ze ? Ze[pt] : `LABEL_${pt}`,
              score: mt[At]
            }));
            rt.push(Rt);
          }
          return Array.isArray(_e) ? rt : rt[0];
        }
      }
      class J extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le, { hypothesis_template: De = "This is a sound of {}." } = {}) {
          const Be = !Array.isArray(_e);
          Be && (_e = [
            _e
          ]);
          const Ze = le.map((lt) => De.replace("{}", lt)), rt = this.tokenizer(Ze, {
            padding: true,
            truncation: true
          }), je = this.processor.feature_extractor.config.sampling_rate, it = await u(_e, je), Ge = [];
          for (const lt of it) {
            const ht = await this.processor(lt), mt = await this.model({
              ...rt,
              ...ht
            }), Je = (0, g.softmax)(mt.logits_per_audio.data);
            Ge.push([
              ...Je
            ].map((Rt, pt) => ({
              score: Rt,
              label: le[pt]
            })));
          }
          return Be ? Ge[0] : Ge;
        }
      }
      class G extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le = {}) {
          switch (this.model.config.model_type) {
            case "whisper":
            case "lite-whisper":
              return this._call_whisper(_e, le);
            case "wav2vec2":
            case "wav2vec2-bert":
            case "unispeech":
            case "unispeech-sat":
            case "hubert":
              return this._call_wav2vec2(_e, le);
            case "moonshine":
              return this._call_moonshine(_e, le);
            default:
              throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`);
          }
        }
        async _call_wav2vec2(_e, le) {
          le.language && console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'), le.task && console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');
          const De = !Array.isArray(_e);
          De && (_e = [
            _e
          ]);
          const Be = this.processor.feature_extractor.config.sampling_rate, Ze = await u(_e, Be), rt = [];
          for (const je of Ze) {
            const it = await this.processor(je), lt = (await this.model(it)).logits[0], ht = [];
            for (const Je of lt)
              ht.push((0, g.max)(Je.data)[1]);
            const mt = this.tokenizer.decode(ht);
            rt.push({
              text: mt
            });
          }
          return De ? rt[0] : rt;
        }
        async _call_whisper(_e, le) {
          const De = le.return_timestamps ?? false, Be = le.chunk_length_s ?? 0, Ze = le.force_full_sequences ?? false;
          let rt = le.stride_length_s ?? null;
          const je = {
            ...le
          };
          De === "word" && (je.return_token_timestamps = true, je.return_timestamps = false);
          const it = !Array.isArray(_e);
          it && (_e = [
            _e
          ]);
          const Ge = this.processor.feature_extractor.config.chunk_length / this.model.config.max_source_positions, lt = this.processor.feature_extractor.config.hop_length, ht = this.processor.feature_extractor.config.sampling_rate, mt = await u(_e, ht), Je = [];
          for (const Rt of mt) {
            let pt = [];
            if (Be > 0) {
              if (rt === null)
                rt = Be / 6;
              else if (Be <= rt)
                throw Error("`chunk_length_s` must be larger than `stride_length_s`.");
              const Ct = ht * Be, St = ht * rt, zt = Ct - 2 * St;
              let _n = 0;
              for (; ; ) {
                const Zt = _n + Ct, en = Rt.subarray(_n, Zt), qt = await this.processor(en), Cn = _n === 0, Hn = Zt >= Rt.length;
                if (pt.push({
                  stride: [
                    en.length,
                    Cn ? 0 : St,
                    Hn ? 0 : St
                  ],
                  input_features: qt.input_features,
                  is_last: Hn
                }), Hn)
                  break;
                _n += zt;
              }
            } else
              pt = [
                {
                  stride: [
                    Rt.length,
                    0,
                    0
                  ],
                  input_features: (await this.processor(Rt)).input_features,
                  is_last: true
                }
              ];
            for (const Ct of pt) {
              je.num_frames = Math.floor(Ct.stride[0] / lt);
              const St = await this.model.generate({
                inputs: Ct.input_features,
                ...je
              });
              De === "word" ? (Ct.tokens = St.sequences.tolist()[0], Ct.token_timestamps = St.token_timestamps.tolist()[0].map((zt) => (0, g.round)(zt, 2))) : Ct.tokens = St[0].tolist(), Ct.stride = Ct.stride.map((zt) => zt / ht);
            }
            const [At, Ot] = this.tokenizer._decode_asr(pt, {
              time_precision: Ge,
              return_timestamps: De,
              force_full_sequences: Ze
            });
            Je.push({
              text: At,
              ...Ot
            });
          }
          return it ? Je[0] : Je;
        }
        async _call_moonshine(_e, le) {
          const De = !Array.isArray(_e);
          De && (_e = [
            _e
          ]);
          const Be = this.processor.feature_extractor.config.sampling_rate, Ze = await u(_e, Be), rt = [];
          for (const je of Ze) {
            const it = await this.processor(je), Ge = Math.floor(je.length / Be) * 6, lt = await this.model.generate({
              max_new_tokens: Ge,
              ...le,
              ...it
            }), ht = this.processor.batch_decode(lt, {
              skip_special_tokens: true
            })[0];
            rt.push({
              text: ht
            });
          }
          return De ? rt[0] : rt;
        }
      }
      class H extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le = {}) {
          const De = Array.isArray(_e), Be = await n(_e), { pixel_values: Ze } = await this.processor(Be), rt = [];
          for (const je of Ze) {
            je.dims = [
              1,
              ...je.dims
            ];
            const it = await this.model.generate({
              inputs: je,
              ...le
            }), Ge = this.tokenizer.batch_decode(it, {
              skip_special_tokens: true
            }).map((lt) => ({
              generated_text: lt.trim()
            }));
            rt.push(Ge);
          }
          return De ? rt : rt[0];
        }
      }
      class U extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, { top_k: le = 5 } = {}) {
          const De = await n(_e), { pixel_values: Be } = await this.processor(De), Ze = await this.model({
            pixel_values: Be
          }), rt = this.model.config.id2label, je = [];
          for (const it of Ze.logits) {
            const Ge = await (0, h.topk)(new h.Tensor("float32", (0, g.softmax)(it.data), it.dims), le), lt = Ge[0].tolist(), mt = Ge[1].tolist().map((Je, Rt) => ({
              label: rt ? rt[Je] : `LABEL_${Je}`,
              score: lt[Rt]
            }));
            je.push(mt);
          }
          return Array.isArray(_e) ? je : je[0];
        }
      }
      class Q extends M {
        constructor(_e) {
          super(_e), this.subtasks_mapping = {
            panoptic: "post_process_panoptic_segmentation",
            instance: "post_process_instance_segmentation",
            semantic: "post_process_semantic_segmentation"
          };
        }
        async _call(_e, { threshold: le = 0.5, mask_threshold: De = 0.5, overlap_mask_area_threshold: Be = 0.8, label_ids_to_fuse: Ze = null, target_sizes: rt = null, subtask: je = null } = {}) {
          if (Array.isArray(_e) && _e.length !== 1)
            throw Error("Image segmentation pipeline currently only supports a batch size of 1.");
          const Ge = await n(_e), lt = Ge.map((Ct) => [
            Ct.height,
            Ct.width
          ]), ht = await this.processor(Ge), { inputNames: mt, outputNames: Je } = this.model.sessions.model;
          if (!mt.includes("pixel_values")) {
            if (mt.length !== 1)
              throw Error(`Expected a single input name, but got ${mt.length} inputs: ${mt}.`);
            const Ct = mt[0];
            if (Ct in ht)
              throw Error(`Input name ${Ct} already exists in the inputs.`);
            ht[Ct] = ht.pixel_values;
          }
          const Rt = await this.model(ht);
          let pt = null;
          if (je !== null)
            pt = this.subtasks_mapping[je];
          else if (this.processor.image_processor) {
            for (const [Ct, St] of Object.entries(this.subtasks_mapping))
              if (St in this.processor.image_processor) {
                pt = this.processor.image_processor[St].bind(this.processor.image_processor), je = Ct;
                break;
              }
          }
          const At = this.model.config.id2label, Ot = [];
          if (je)
            if (je === "panoptic" || je === "instance") {
              const Ct = pt(Rt, le, De, Be, Ze, rt ?? lt)[0], St = Ct.segmentation;
              for (const zt of Ct.segments_info) {
                const _n = new Uint8ClampedArray(St.data.length);
                for (let en = 0; en < St.data.length; ++en)
                  St.data[en] === zt.id && (_n[en] = 255);
                const Zt = new r.RawImage(_n, St.dims[1], St.dims[0], 1);
                Ot.push({
                  score: zt.score,
                  label: At[zt.label_id],
                  mask: Zt
                });
              }
            } else if (je === "semantic") {
              const { segmentation: Ct, labels: St } = pt(Rt, rt ?? lt)[0];
              for (const zt of St) {
                const _n = new Uint8ClampedArray(Ct.data.length);
                for (let en = 0; en < Ct.data.length; ++en)
                  Ct.data[en] === zt && (_n[en] = 255);
                const Zt = new r.RawImage(_n, Ct.dims[1], Ct.dims[0], 1);
                Ot.push({
                  score: null,
                  label: At[zt],
                  mask: Zt
                });
              }
            } else
              throw Error(`Subtask ${je} not supported.`);
          else {
            const St = Rt[Je[0]];
            for (let zt = 0; zt < lt.length; ++zt) {
              const _n = lt[zt], Zt = St[zt];
              Zt.data.some((qt) => qt < -1e-5 || qt > 1 + 1e-5) && Zt.sigmoid_();
              const en = await r.RawImage.fromTensor(Zt.mul_(255).to("uint8")).resize(_n[1], _n[0]);
              Ot.push({
                label: null,
                score: null,
                mask: en
              });
            }
          }
          return Ot;
        }
      }
      class he extends Q {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le = {}) {
          if (Array.isArray(_e) && _e.length !== 1)
            throw Error("Background removal pipeline currently only supports a batch size of 1.");
          const Be = await n(_e), Ze = await super._call(_e, le);
          return Be.map((je, it) => {
            const Ge = je.clone();
            return Ge.putAlpha(Ze[it].mask), Ge;
          });
        }
      }
      class fe extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le, { hypothesis_template: De = "This is a photo of {}" } = {}) {
          const Be = Array.isArray(_e), Ze = await n(_e), rt = le.map((mt) => De.replace("{}", mt)), je = this.tokenizer(rt, {
            padding: this.model.config.model_type === "siglip" ? "max_length" : true,
            truncation: true
          }), { pixel_values: it } = await this.processor(Ze), Ge = await this.model({
            ...je,
            pixel_values: it
          }), lt = this.model.config.model_type === "siglip" ? (mt) => mt.sigmoid().data : (mt) => (0, g.softmax)(mt.data), ht = [];
          for (const mt of Ge.logits_per_image) {
            const Rt = [
              ...lt(mt)
            ].map((pt, At) => ({
              score: pt,
              label: le[At]
            }));
            Rt.sort((pt, At) => At.score - pt.score), ht.push(Rt);
          }
          return Be ? ht : ht[0];
        }
      }
      class Me extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, { threshold: le = 0.9, percentage: De = false } = {}) {
          const Be = Array.isArray(_e);
          if (Be && _e.length !== 1)
            throw Error("Object detection pipeline currently only supports a batch size of 1.");
          const Ze = await n(_e), rt = De ? null : Ze.map((Je) => [
            Je.height,
            Je.width
          ]), { pixel_values: je, pixel_mask: it } = await this.processor(Ze), Ge = await this.model({
            pixel_values: je,
            pixel_mask: it
          }), lt = this.processor.image_processor.post_process_object_detection(Ge, le, rt), ht = this.model.config.id2label, mt = lt.map((Je) => Je.boxes.map((Rt, pt) => ({
            score: Je.scores[pt],
            label: ht[Je.classes[pt]],
            box: p(Rt, !De)
          })));
          return Be ? mt : mt[0];
        }
      }
      class pe extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le, { threshold: De = 0.1, top_k: Be = null, percentage: Ze = false } = {}) {
          const rt = Array.isArray(_e), je = await n(_e), it = this.tokenizer(le, {
            padding: true,
            truncation: true
          }), Ge = await this.processor(je), lt = [];
          for (let ht = 0; ht < je.length; ++ht) {
            const mt = je[ht], Je = Ze ? null : [
              [
                mt.height,
                mt.width
              ]
            ], Rt = Ge.pixel_values[ht].unsqueeze_(0), pt = await this.model({
              ...it,
              pixel_values: Rt
            });
            let At;
            if ("post_process_grounded_object_detection" in this.processor) {
              const Ot = this.processor.post_process_grounded_object_detection(pt, it.input_ids, {
                box_threshold: De,
                text_threshold: De,
                target_sizes: Je
              })[0];
              At = Ot.boxes.map((Ct, St) => ({
                score: Ot.scores[St],
                label: Ot.labels[St],
                box: p(Ct, !Ze)
              }));
            } else {
              const Ot = this.processor.image_processor.post_process_object_detection(pt, De, Je, true)[0];
              At = Ot.boxes.map((Ct, St) => ({
                score: Ot.scores[St],
                label: le[Ot.classes[St]],
                box: p(Ct, !Ze)
              }));
            }
            At.sort((Ot, Ct) => Ct.score - Ot.score), Be !== null && (At = At.slice(0, Be)), lt.push(At);
          }
          return rt ? lt : lt[0];
        }
      }
      class oe extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e, le, De = {}) {
          const Be = (await n(_e))[0], { pixel_values: Ze } = await this.processor(Be), rt = `<s_docvqa><s_question>${le}</s_question><s_answer>`, je = this.tokenizer(rt, {
            add_special_tokens: false,
            padding: true,
            truncation: true
          }).input_ids, it = await this.model.generate({
            inputs: Ze,
            max_length: this.model.config.decoder.max_position_embeddings,
            decoder_input_ids: je,
            ...De
          }), lt = this.tokenizer.batch_decode(it)[0].match(/<s_answer>(.*?)<\/s_answer>/);
          let ht = null;
          return lt && lt.length >= 2 && (ht = lt[1].trim()), [
            {
              answer: ht
            }
          ];
        }
      }
      class be extends M {
        constructor(_e) {
          super(_e);
          __publicField(this, "DEFAULT_VOCODER_ID", "Xenova/speecht5_hifigan");
          this.vocoder = _e.vocoder ?? null;
        }
        async _call(_e, { speaker_embeddings: le = null } = {}) {
          return this.processor ? this._call_text_to_spectrogram(_e, {
            speaker_embeddings: le
          }) : this._call_text_to_waveform(_e);
        }
        async _call_text_to_waveform(_e) {
          const le = this.tokenizer(_e, {
            padding: true,
            truncation: true
          }), { waveform: De } = await this.model(le), Be = this.model.config.sampling_rate;
          return new _.RawAudio(De.data, Be);
        }
        async _call_text_to_spectrogram(_e, { speaker_embeddings: le }) {
          if (this.vocoder || (console.log("No vocoder specified, using default HifiGan vocoder."), this.vocoder = await l.AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID, {
            dtype: "fp32"
          })), (typeof le == "string" || le instanceof URL) && (le = new Float32Array(await (await fetch(le)).arrayBuffer())), le instanceof Float32Array)
            le = new h.Tensor("float32", le, [
              1,
              le.length
            ]);
          else if (!(le instanceof h.Tensor))
            throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");
          const { input_ids: De } = this.tokenizer(_e, {
            padding: true,
            truncation: true
          }), { waveform: Be } = await this.model.generate_speech(De, le, {
            vocoder: this.vocoder
          }), Ze = this.processor.feature_extractor.config.sampling_rate;
          return new _.RawAudio(Be.data, Ze);
        }
      }
      class Ee extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e) {
          const le = await n(_e), De = await this.processor(le), Be = await this.model(De), Ze = [];
          for (const rt of Be.reconstruction) {
            const je = rt.squeeze().clamp_(0, 1).mul_(255).round_().to("uint8");
            Ze.push(r.RawImage.fromTensor(je));
          }
          return Ze.length > 1 ? Ze : Ze[0];
        }
      }
      class Oe extends M {
        constructor(_e) {
          super(_e);
        }
        async _call(_e) {
          const le = await n(_e), De = await this.processor(le), { predicted_depth: Be } = await this.model(De), Ze = [];
          for (let rt = 0; rt < le.length; ++rt) {
            const je = Be[rt], [it, Ge] = je.dims.slice(-2), [lt, ht] = le[rt].size, mt = (await (0, h.interpolate_4d)(je.view(1, 1, it, Ge), {
              size: [
                ht,
                lt
              ],
              mode: "bilinear"
            })).view(ht, lt), Je = mt.min().item(), Rt = mt.max().item(), pt = mt.sub(Je).div_(Rt - Je).mul_(255).to("uint8").unsqueeze(0), At = r.RawImage.fromTensor(pt);
            Ze.push({
              predicted_depth: mt,
              depth: At
            });
          }
          return Ze.length > 1 ? Ze : Ze[0];
        }
      }
      const Ye = Object.freeze({
        "text-classification": {
          tokenizer: s.AutoTokenizer,
          pipeline: P,
          model: l.AutoModelForSequenceClassification,
          default: {
            model: "Xenova/distilbert-base-uncased-finetuned-sst-2-english"
          },
          type: "text"
        },
        "token-classification": {
          tokenizer: s.AutoTokenizer,
          pipeline: E,
          model: l.AutoModelForTokenClassification,
          default: {
            model: "Xenova/bert-base-multilingual-cased-ner-hrl"
          },
          type: "text"
        },
        "question-answering": {
          tokenizer: s.AutoTokenizer,
          pipeline: k,
          model: l.AutoModelForQuestionAnswering,
          default: {
            model: "Xenova/distilbert-base-cased-distilled-squad"
          },
          type: "text"
        },
        "fill-mask": {
          tokenizer: s.AutoTokenizer,
          pipeline: $,
          model: l.AutoModelForMaskedLM,
          default: {
            model: "Xenova/bert-base-uncased"
          },
          type: "text"
        },
        summarization: {
          tokenizer: s.AutoTokenizer,
          pipeline: C,
          model: l.AutoModelForSeq2SeqLM,
          default: {
            model: "Xenova/distilbart-cnn-6-6"
          },
          type: "text"
        },
        translation: {
          tokenizer: s.AutoTokenizer,
          pipeline: F,
          model: l.AutoModelForSeq2SeqLM,
          default: {
            model: "Xenova/t5-small"
          },
          type: "text"
        },
        "text2text-generation": {
          tokenizer: s.AutoTokenizer,
          pipeline: A,
          model: l.AutoModelForSeq2SeqLM,
          default: {
            model: "Xenova/flan-t5-small"
          },
          type: "text"
        },
        "text-generation": {
          tokenizer: s.AutoTokenizer,
          pipeline: N,
          model: l.AutoModelForCausalLM,
          default: {
            model: "Xenova/gpt2"
          },
          type: "text"
        },
        "zero-shot-classification": {
          tokenizer: s.AutoTokenizer,
          pipeline: R,
          model: l.AutoModelForSequenceClassification,
          default: {
            model: "Xenova/distilbert-base-uncased-mnli"
          },
          type: "text"
        },
        "audio-classification": {
          pipeline: te,
          model: l.AutoModelForAudioClassification,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/wav2vec2-base-superb-ks"
          },
          type: "audio"
        },
        "zero-shot-audio-classification": {
          tokenizer: s.AutoTokenizer,
          pipeline: J,
          model: l.AutoModel,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/clap-htsat-unfused"
          },
          type: "multimodal"
        },
        "automatic-speech-recognition": {
          tokenizer: s.AutoTokenizer,
          pipeline: G,
          model: [
            l.AutoModelForSpeechSeq2Seq,
            l.AutoModelForCTC
          ],
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/whisper-tiny.en"
          },
          type: "multimodal"
        },
        "text-to-audio": {
          tokenizer: s.AutoTokenizer,
          pipeline: be,
          model: [
            l.AutoModelForTextToWaveform,
            l.AutoModelForTextToSpectrogram
          ],
          processor: [
            f.AutoProcessor,
            null
          ],
          default: {
            model: "Xenova/speecht5_tts"
          },
          type: "text"
        },
        "image-to-text": {
          tokenizer: s.AutoTokenizer,
          pipeline: H,
          model: l.AutoModelForVision2Seq,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/vit-gpt2-image-captioning"
          },
          type: "multimodal"
        },
        "image-classification": {
          pipeline: U,
          model: l.AutoModelForImageClassification,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/vit-base-patch16-224"
          },
          type: "multimodal"
        },
        "image-segmentation": {
          pipeline: Q,
          model: [
            l.AutoModelForImageSegmentation,
            l.AutoModelForSemanticSegmentation,
            l.AutoModelForUniversalSegmentation
          ],
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/detr-resnet-50-panoptic"
          },
          type: "multimodal"
        },
        "background-removal": {
          pipeline: he,
          model: [
            l.AutoModelForImageSegmentation,
            l.AutoModelForSemanticSegmentation,
            l.AutoModelForUniversalSegmentation
          ],
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/modnet"
          },
          type: "image"
        },
        "zero-shot-image-classification": {
          tokenizer: s.AutoTokenizer,
          pipeline: fe,
          model: l.AutoModel,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/clip-vit-base-patch32"
          },
          type: "multimodal"
        },
        "object-detection": {
          pipeline: Me,
          model: l.AutoModelForObjectDetection,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/detr-resnet-50"
          },
          type: "multimodal"
        },
        "zero-shot-object-detection": {
          tokenizer: s.AutoTokenizer,
          pipeline: pe,
          model: l.AutoModelForZeroShotObjectDetection,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/owlvit-base-patch32"
          },
          type: "multimodal"
        },
        "document-question-answering": {
          tokenizer: s.AutoTokenizer,
          pipeline: oe,
          model: l.AutoModelForDocumentQuestionAnswering,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/donut-base-finetuned-docvqa"
          },
          type: "multimodal"
        },
        "image-to-image": {
          pipeline: Ee,
          model: l.AutoModelForImageToImage,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/swin2SR-classical-sr-x2-64"
          },
          type: "image"
        },
        "depth-estimation": {
          pipeline: Oe,
          model: l.AutoModelForDepthEstimation,
          processor: f.AutoProcessor,
          default: {
            model: "Xenova/dpt-large"
          },
          type: "image"
        },
        "feature-extraction": {
          tokenizer: s.AutoTokenizer,
          pipeline: j,
          model: l.AutoModel,
          default: {
            model: "Xenova/all-MiniLM-L6-v2"
          },
          type: "text"
        },
        "image-feature-extraction": {
          processor: f.AutoProcessor,
          pipeline: Z,
          model: [
            l.AutoModelForImageFeatureExtraction,
            l.AutoModel
          ],
          default: {
            model: "Xenova/vit-base-patch16-224-in21k"
          },
          type: "image"
        }
      }), We = Object.freeze({
        "sentiment-analysis": "text-classification",
        ner: "token-classification",
        asr: "automatic-speech-recognition",
        "text-to-speech": "text-to-audio",
        embeddings: "feature-extraction"
      });
      async function ot(qe, _e = null, { progress_callback: le = null, config: De = null, cache_dir: Be = null, local_files_only: Ze = false, revision: rt = "main", device: je = null, dtype: it = null, subfolder: Ge = "onnx", use_external_data_format: lt = null, model_file_name: ht = null, session_options: mt = {} } = {}) {
        qe = We[qe] ?? qe;
        const Je = Ye[qe.split("_", 1)[0]];
        if (!Je)
          throw Error(`Unsupported pipeline: ${qe}. Must be one of [${Object.keys(Ye)}]`);
        _e || (_e = Je.default.model, console.log(`No model specified. Using default model: "${_e}".`));
        const Rt = {
          progress_callback: le,
          config: De,
          cache_dir: Be,
          local_files_only: Ze,
          revision: rt,
          device: je,
          dtype: it,
          subfolder: Ge,
          use_external_data_format: lt,
          model_file_name: ht,
          session_options: mt
        }, pt = /* @__PURE__ */ new Map([
          [
            "tokenizer",
            Je.tokenizer
          ],
          [
            "model",
            Je.model
          ],
          [
            "processor",
            Je.processor
          ]
        ]), At = await vt(pt, _e, Rt);
        At.task = qe, (0, w.dispatchCallback)(le, {
          status: "ready",
          task: qe,
          model: _e
        });
        const Ot = Je.pipeline;
        return new Ot(At);
      }
      async function vt(qe, _e, le) {
        const De = /* @__PURE__ */ Object.create(null), Be = [];
        for (const [Ze, rt] of qe.entries()) {
          if (!rt)
            continue;
          let je;
          Array.isArray(rt) ? je = new Promise(async (it, Ge) => {
            let lt;
            for (const ht of rt) {
              if (ht === null) {
                it(null);
                return;
              }
              try {
                it(await ht.from_pretrained(_e, le));
                return;
              } catch (mt) {
                if (mt.message?.includes("Unsupported model type"))
                  lt = mt;
                else if (mt.message?.includes("Could not locate file"))
                  lt = mt;
                else {
                  Ge(mt);
                  return;
                }
              }
            }
            Ge(lt);
          }) : je = rt.from_pretrained(_e, le), De[Ze] = je, Be.push(je);
        }
        await Promise.all(Be);
        for (const [Ze, rt] of Object.entries(De))
          De[Ze] = await rt;
        return De;
      }
    },
    "./src/tokenizers.js": (i, e, t) => {
      t.r(e), t.d(e, {
        AlbertTokenizer: () => ar,
        AutoTokenizer: () => Ir,
        BartTokenizer: () => ie,
        BertTokenizer: () => tn,
        BlenderbotSmallTokenizer: () => On,
        BlenderbotTokenizer: () => Vt,
        BloomTokenizer: () => Ve,
        CLIPTokenizer: () => Nn,
        CamembertTokenizer: () => He,
        CodeGenTokenizer: () => fr,
        CodeLlamaTokenizer: () => Gt,
        CohereTokenizer: () => dr,
        ConvBertTokenizer: () => ye,
        DebertaTokenizer: () => W,
        DebertaV2Tokenizer: () => ve,
        DistilBertTokenizer: () => Ue,
        ElectraTokenizer: () => Bt,
        Ernie4_5_Tokenizer: () => yr,
        EsmTokenizer: () => Sn,
        FalconTokenizer: () => bn,
        GPT2Tokenizer: () => jt,
        GPTNeoXTokenizer: () => Pn,
        GemmaTokenizer: () => cn,
        Grok1Tokenizer: () => Tn,
        HerbertTokenizer: () => de,
        LlamaTokenizer: () => _t,
        M2M100Tokenizer: () => Kt,
        MBart50Tokenizer: () => Ie,
        MBartTokenizer: () => xe,
        MPNetTokenizer: () => dn,
        MarianTokenizer: () => bt,
        MgpstrTokenizer: () => Xe,
        MobileBertTokenizer: () => on,
        NllbTokenizer: () => Xn,
        NougatTokenizer: () => Gn,
        PreTrainedTokenizer: () => wt,
        Qwen2Tokenizer: () => et,
        RoFormerTokenizer: () => ke,
        RobertaTokenizer: () => Re,
        SiglipTokenizer: () => Kn,
        SpeechT5Tokenizer: () => mn,
        SqueezeBertTokenizer: () => sr,
        T5Tokenizer: () => Et,
        TokenizerModel: () => Z,
        VitsTokenizer: () => or,
        Wav2Vec2CTCTokenizer: () => yt,
        WhisperTokenizer: () => tr,
        XLMRobertaTokenizer: () => Lt,
        XLMTokenizer: () => Ft,
        is_chinese_char: () => $
      });
      var s = t("./src/utils/generic.js"), l = t("./src/utils/core.js"), f = t("./src/utils/hub.js"), d = t("./src/utils/maths.js"), w = t("./src/utils/tensor.js"), g = t("./src/utils/data-structures.js"), _ = t("./node_modules/@huggingface/jinja/dist/index.js"), h = t("./src/models/whisper/common_whisper.js");
      async function r(Fe, K) {
        const ce = await Promise.all([
          (0, f.getModelJSON)(Fe, "tokenizer.json", true, K),
          (0, f.getModelJSON)(Fe, "tokenizer_config.json", true, K)
        ]);
        return K.legacy !== null && (ce[1].legacy = K.legacy), ce;
      }
      function n(Fe, K) {
        const ce = [];
        let Pe = 0;
        for (const Ce of Fe.matchAll(K)) {
          const $e = Ce[0];
          Pe < Ce.index && ce.push(Fe.slice(Pe, Ce.index)), $e.length > 0 && ce.push($e), Pe = Ce.index + $e.length;
        }
        return Pe < Fe.length && ce.push(Fe.slice(Pe)), ce;
      }
      function u(Fe, K = true) {
        if (Fe.Regex !== void 0) {
          let ce = Fe.Regex.replace(/\\([#&~])/g, "$1");
          for (const [Pe, Ce] of R)
            ce = ce.replaceAll(Pe, Ce);
          return new RegExp(ce, "gu");
        } else if (Fe.String !== void 0) {
          const ce = (0, l.escapeRegExp)(Fe.String);
          return new RegExp(K ? ce : `(${ce})`, "gu");
        } else
          return console.warn("Unknown pattern type:", Fe), null;
      }
      function p(Fe) {
        return new Map(Object.entries(Fe));
      }
      function M(Fe) {
        const K = Fe.dims;
        switch (K.length) {
          case 1:
            return Fe.tolist();
          case 2:
            if (K[0] !== 1)
              throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");
            return Fe.tolist()[0];
          default:
            throw new Error(`Expected tensor to have 1-2 dimensions, got ${K.length}.`);
        }
      }
      function P(Fe) {
        return Fe.replace(/ \./g, ".").replace(/ \?/g, "?").replace(/ \!/g, "!").replace(/ ,/g, ",").replace(/ \' /g, "'").replace(/ n\'t/g, "n't").replace(/ \'m/g, "'m").replace(/ \'s/g, "'s").replace(/ \'ve/g, "'ve").replace(/ \'re/g, "'re");
      }
      function E(Fe) {
        return Fe.replace(/\p{M}/gu, "");
      }
      function k(Fe) {
        return E(Fe.toLowerCase());
      }
      function $(Fe) {
        return Fe >= 19968 && Fe <= 40959 || Fe >= 13312 && Fe <= 19903 || Fe >= 131072 && Fe <= 173791 || Fe >= 173824 && Fe <= 177983 || Fe >= 177984 && Fe <= 178207 || Fe >= 178208 && Fe <= 183983 || Fe >= 63744 && Fe <= 64255 || Fe >= 194560 && Fe <= 195103;
      }
      function A(Fe, K, ce) {
        const Pe = [];
        let Ce = 0;
        for (; Ce < Fe.length; ) {
          if (Pe.push(Fe[Ce]), (K.get(Fe[Ce]) ?? ce) !== ce) {
            ++Ce;
            continue;
          }
          for (; ++Ce < Fe.length && (K.get(Fe[Ce]) ?? ce) === ce; )
            K.get(Pe.at(-1)) !== ce && (Pe[Pe.length - 1] += Fe[Ce]);
        }
        return Pe;
      }
      function C(Fe) {
        return Fe.match(/\S+/g) || [];
      }
      const F = "\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E", D = new RegExp(`^[${F}]+$`, "gu"), N = ".,!?\u2026\u3002\uFF0C\u3001\u0964\u06D4\u060C", R = /* @__PURE__ */ new Map([
        [
          "(?i:'s|'t|'re|'ve|'m|'ll|'d)",
          "(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"
        ],
        [
          ` ?[^(\\s|[${N}])]+`,
          ` ?[^\\s${N}]+`
        ]
      ]);
      class j {
        constructor(K) {
          this.content = K.content, this.id = K.id, this.single_word = K.single_word ?? false, this.lstrip = K.lstrip ?? false, this.rstrip = K.rstrip ?? false, this.special = K.special ?? false, this.normalized = K.normalized ?? null;
        }
      }
      class Z extends s.Callable {
        constructor(K) {
          super(), this.config = K, this.vocab = [], this.tokens_to_ids = /* @__PURE__ */ new Map(), this.unk_token_id = void 0, this.unk_token = void 0, this.end_of_word_suffix = void 0, this.fuse_unk = this.config.fuse_unk ?? false;
        }
        static fromConfig(K, ...ce) {
          switch (K.type) {
            case "WordPiece":
              return new te(K);
            case "Unigram":
              return new J(K, ...ce);
            case "BPE":
              return new U(K);
            default:
              if (K.vocab)
                return Array.isArray(K.vocab) ? new J(K, ...ce) : Object.hasOwn(K, "continuing_subword_prefix") && Object.hasOwn(K, "unk_token") ? Object.hasOwn(K, "merges") ? new U(K) : new te(K) : new Q(K, ...ce);
              throw new Error(`Unknown TokenizerModel type: ${K.type}`);
          }
        }
        _call(K) {
          return K = this.encode(K), this.fuse_unk && (K = A(K, this.tokens_to_ids, this.unk_token_id)), K;
        }
        encode(K) {
          throw Error("encode should be implemented in subclass.");
        }
        convert_tokens_to_ids(K) {
          return K.map((ce) => this.tokens_to_ids.get(ce) ?? this.unk_token_id);
        }
        convert_ids_to_tokens(K) {
          return K.map((ce) => this.vocab[ce] ?? this.unk_token);
        }
      }
      class te extends Z {
        constructor(K) {
          super(K), this.tokens_to_ids = p(K.vocab), this.unk_token_id = this.tokens_to_ids.get(K.unk_token), this.unk_token = K.unk_token, this.max_input_chars_per_word = K.max_input_chars_per_word ?? 100, this.vocab = new Array(this.tokens_to_ids.size);
          for (const [ce, Pe] of this.tokens_to_ids)
            this.vocab[Pe] = ce;
        }
        encode(K) {
          const ce = [];
          for (const Pe of K) {
            const Ce = [
              ...Pe
            ];
            if (Ce.length > this.max_input_chars_per_word) {
              ce.push(this.unk_token);
              continue;
            }
            let $e = false, at = 0;
            const dt = [];
            for (; at < Ce.length; ) {
              let ut = Ce.length, It = null;
              for (; at < ut; ) {
                let Tt = Ce.slice(at, ut).join("");
                if (at > 0 && (Tt = this.config.continuing_subword_prefix + Tt), this.tokens_to_ids.has(Tt)) {
                  It = Tt;
                  break;
                }
                --ut;
              }
              if (It === null) {
                $e = true;
                break;
              }
              dt.push(It), at = ut;
            }
            $e ? ce.push(this.unk_token) : ce.push(...dt);
          }
          return ce;
        }
      }
      class J extends Z {
        constructor(K, ce) {
          super(K);
          const Pe = K.vocab.length;
          this.vocab = new Array(Pe), this.scores = new Array(Pe);
          for (let Ce = 0; Ce < Pe; ++Ce)
            [this.vocab[Ce], this.scores[Ce]] = K.vocab[Ce];
          this.unk_token_id = K.unk_id, this.unk_token = this.vocab[K.unk_id], this.tokens_to_ids = new Map(this.vocab.map((Ce, $e) => [
            Ce,
            $e
          ])), this.bos_token = " ", this.bos_token_id = this.tokens_to_ids.get(this.bos_token), this.eos_token = ce.eos_token, this.eos_token_id = this.tokens_to_ids.get(this.eos_token), this.unk_token = this.vocab[this.unk_token_id], this.minScore = (0, d.min)(this.scores)[0], this.unk_score = this.minScore - 10, this.scores[this.unk_token_id] = this.unk_score, this.trie = new g.CharTrie(), this.trie.extend(this.vocab), this.fuse_unk = true;
        }
        populateNodes(K) {
          const ce = K.chars, Pe = 1;
          let Ce = 0;
          for (; Ce < ce.length; ) {
            let $e = false;
            const at = ce.slice(Ce).join(""), dt = this.trie.commonPrefixSearch(at);
            for (const ut of dt) {
              const It = this.tokens_to_ids.get(ut), Tt = this.scores[It], gn = (0, l.len)(ut);
              K.insert(Ce, gn, Tt, It), !$e && gn === Pe && ($e = true);
            }
            $e || K.insert(Ce, Pe, this.unk_score, this.unk_token_id), Ce += Pe;
          }
        }
        tokenize(K) {
          const ce = new g.TokenLattice(K, this.bos_token_id, this.eos_token_id);
          return this.populateNodes(ce), ce.tokens();
        }
        encode(K) {
          const ce = [];
          for (const Pe of K) {
            const Ce = this.tokenize(Pe);
            ce.push(...Ce);
          }
          return ce;
        }
      }
      const G = (() => {
        const Fe = [
          ...Array.from({
            length: "~".charCodeAt(0) - "!".charCodeAt(0) + 1
          }, (Ce, $e) => $e + "!".charCodeAt(0)),
          ...Array.from({
            length: "\xAC".charCodeAt(0) - "\xA1".charCodeAt(0) + 1
          }, (Ce, $e) => $e + "\xA1".charCodeAt(0)),
          ...Array.from({
            length: "\xFF".charCodeAt(0) - "\xAE".charCodeAt(0) + 1
          }, (Ce, $e) => $e + "\xAE".charCodeAt(0))
        ], K = Fe.slice();
        let ce = 0;
        for (let Ce = 0; Ce < 256; ++Ce)
          Fe.includes(Ce) || (Fe.push(Ce), K.push(256 + ce), ce += 1);
        const Pe = K.map((Ce) => String.fromCharCode(Ce));
        return Object.fromEntries(Fe.map((Ce, $e) => [
          Ce,
          Pe[$e]
        ]));
      })(), H = (0, l.reverseDictionary)(G);
      class U extends Z {
        constructor(K) {
          super(K), this.tokens_to_ids = p(K.vocab), this.unk_token_id = this.tokens_to_ids.get(K.unk_token), this.unk_token = K.unk_token, this.vocab = new Array(this.tokens_to_ids.size);
          for (const [Pe, Ce] of this.tokens_to_ids)
            this.vocab[Ce] = Pe;
          const ce = Array.isArray(K.merges[0]);
          this.merges = ce ? K.merges : K.merges.map((Pe) => Pe.split(" ", 2)), this.bpe_ranks = new Map(this.merges.map((Pe, Ce) => [
            JSON.stringify(Pe),
            Ce
          ])), this.end_of_word_suffix = K.end_of_word_suffix, this.continuing_subword_suffix = K.continuing_subword_suffix ?? null, this.byte_fallback = this.config.byte_fallback ?? false, this.byte_fallback && (this.text_encoder = new TextEncoder()), this.ignore_merges = this.config.ignore_merges ?? false, this.max_length_to_cache = 256, this.cache_capacity = 1e4, this.cache = new g.LRUCache(this.cache_capacity);
        }
        clear_cache() {
          this.cache.clear();
        }
        bpe(K) {
          if (K.length === 0)
            return [];
          const ce = this.cache.get(K);
          if (ce !== void 0)
            return ce;
          const Pe = Array.from(K);
          this.end_of_word_suffix && (Pe[Pe.length - 1] += this.end_of_word_suffix);
          let Ce = [];
          if (Pe.length > 1) {
            const $e = new g.PriorityQueue((ut, It) => ut.score < It.score);
            let at = {
              token: Pe[0],
              bias: 0,
              prev: null,
              next: null
            }, dt = at;
            for (let ut = 1; ut < Pe.length; ++ut) {
              const It = {
                bias: ut / Pe.length,
                token: Pe[ut],
                prev: dt,
                next: null
              };
              dt.next = It, this._add_node($e, dt), dt = It;
            }
            for (; !$e.isEmpty(); ) {
              const ut = $e.pop();
              if (ut.deleted || !ut.next || ut.next.deleted)
                continue;
              if (ut.deleted = true, ut.next.deleted = true, ut.prev) {
                const Tt = {
                  ...ut.prev
                };
                ut.prev.deleted = true, ut.prev = Tt, Tt.prev ? Tt.prev.next = Tt : at = Tt;
              }
              const It = {
                token: ut.token + ut.next.token,
                bias: ut.bias,
                prev: ut.prev,
                next: ut.next.next
              };
              It.prev ? (It.prev.next = It, this._add_node($e, It.prev)) : at = It, It.next && (It.next.prev = It, this._add_node($e, It));
            }
            for (let ut = at; ut !== null; ut = ut.next)
              Ce.push(ut.token);
          } else
            Ce = Pe;
          if (this.continuing_subword_suffix)
            for (let $e = 0; $e < Ce.length - 1; ++$e)
              Ce[$e] += this.continuing_subword_suffix;
          return K.length < this.max_length_to_cache && this.cache.put(K, Ce), Ce;
        }
        _add_node(K, ce) {
          const Pe = this.bpe_ranks.get(JSON.stringify([
            ce.token,
            ce.next.token
          ]));
          Pe !== void 0 && (ce.score = Pe + ce.bias, K.push(ce));
        }
        encode(K) {
          const ce = [];
          for (const Pe of K) {
            if (this.ignore_merges && this.tokens_to_ids.has(Pe)) {
              ce.push(Pe);
              continue;
            }
            const Ce = this.bpe(Pe);
            for (const $e of Ce)
              if (this.tokens_to_ids.has($e))
                ce.push($e);
              else if (this.byte_fallback) {
                const at = Array.from(this.text_encoder.encode($e)).map((dt) => `<0x${dt.toString(16).toUpperCase().padStart(2, "0")}>`);
                at.every((dt) => this.tokens_to_ids.has(dt)) ? ce.push(...at) : ce.push(this.unk_token);
              } else
                ce.push(this.unk_token);
          }
          return ce;
        }
      }
      class Q extends Z {
        constructor(K, ce) {
          super(K), this.tokens_to_ids = p(ce.target_lang ? K.vocab[ce.target_lang] : K.vocab), this.bos_token = ce.bos_token, this.bos_token_id = this.tokens_to_ids.get(this.bos_token), this.eos_token = ce.eos_token, this.eos_token_id = this.tokens_to_ids.get(this.eos_token), this.pad_token = ce.pad_token, this.pad_token_id = this.tokens_to_ids.get(this.pad_token), this.unk_token = ce.unk_token, this.unk_token_id = this.tokens_to_ids.get(this.unk_token), this.vocab = new Array(this.tokens_to_ids.size);
          for (const [Pe, Ce] of this.tokens_to_ids)
            this.vocab[Ce] = Pe;
        }
        encode(K) {
          return K;
        }
      }
      class he extends s.Callable {
        constructor(K) {
          super(), this.config = K;
        }
        static fromConfig(K) {
          if (K === null)
            return null;
          switch (K.type) {
            case "BertNormalizer":
              return new qe(K);
            case "Precompiled":
              return new Hn(K);
            case "Sequence":
              return new vt(K);
            case "Replace":
              return new fe(K);
            case "NFC":
              return new pe(K);
            case "NFD":
              return new oe(K);
            case "NFKC":
              return new be(K);
            case "NFKD":
              return new Ee(K);
            case "Strip":
              return new Oe(K);
            case "StripAccents":
              return new Ye(K);
            case "Lowercase":
              return new We(K);
            case "Prepend":
              return new ot(K);
            default:
              throw new Error(`Unknown Normalizer type: ${K.type}`);
          }
        }
        normalize(K) {
          throw Error("normalize should be implemented in subclass.");
        }
        _call(K) {
          return this.normalize(K);
        }
      }
      class fe extends he {
        normalize(K) {
          const ce = u(this.config.pattern);
          return ce === null ? K : K.replaceAll(ce, this.config.content);
        }
      }
      class Me extends he {
        constructor() {
          super(...arguments);
          __publicField(this, "form");
        }
        normalize(K) {
          return K = K.normalize(this.form), K;
        }
      }
      class pe extends Me {
        constructor() {
          super(...arguments);
          __publicField(this, "form", "NFC");
        }
      }
      class oe extends Me {
        constructor() {
          super(...arguments);
          __publicField(this, "form", "NFD");
        }
      }
      class be extends Me {
        constructor() {
          super(...arguments);
          __publicField(this, "form", "NFKC");
        }
      }
      class Ee extends Me {
        constructor() {
          super(...arguments);
          __publicField(this, "form", "NFKD");
        }
      }
      class Oe extends he {
        normalize(K) {
          return this.config.strip_left && this.config.strip_right ? K = K.trim() : (this.config.strip_left && (K = K.trimStart()), this.config.strip_right && (K = K.trimEnd())), K;
        }
      }
      class Ye extends he {
        normalize(K) {
          return K = E(K), K;
        }
      }
      class We extends he {
        normalize(K) {
          return K = K.toLowerCase(), K;
        }
      }
      class ot extends he {
        normalize(K) {
          return K = this.config.prepend + K, K;
        }
      }
      class vt extends he {
        constructor(K) {
          super(K), this.normalizers = K.normalizers.map((ce) => he.fromConfig(ce));
        }
        normalize(K) {
          return this.normalizers.reduce((ce, Pe) => Pe.normalize(ce), K);
        }
      }
      class qe extends he {
        _tokenize_chinese_chars(K) {
          const ce = [];
          for (let Pe = 0; Pe < K.length; ++Pe) {
            const Ce = K[Pe], $e = Ce.charCodeAt(0);
            $($e) ? (ce.push(" "), ce.push(Ce), ce.push(" ")) : ce.push(Ce);
          }
          return ce.join("");
        }
        stripAccents(K) {
          return K.normalize("NFD").replace(/\p{Mn}/gu, "");
        }
        _is_control(K) {
          switch (K) {
            case "	":
            case `
`:
            case "\r":
              return false;
            default:
              return /^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(K);
          }
        }
        _clean_text(K) {
          const ce = [];
          for (const Pe of K) {
            const Ce = Pe.charCodeAt(0);
            Ce === 0 || Ce === 65533 || this._is_control(Pe) || (/^\s$/.test(Pe) ? ce.push(" ") : ce.push(Pe));
          }
          return ce.join("");
        }
        normalize(K) {
          return this.config.clean_text && (K = this._clean_text(K)), this.config.handle_chinese_chars && (K = this._tokenize_chinese_chars(K)), this.config.lowercase ? (K = K.toLowerCase(), this.config.strip_accents !== false && (K = this.stripAccents(K))) : this.config.strip_accents && (K = this.stripAccents(K)), K;
        }
      }
      class _e extends s.Callable {
        static fromConfig(K) {
          if (K === null)
            return null;
          switch (K.type) {
            case "BertPreTokenizer":
              return new le(K);
            case "Sequence":
              return new Un(K);
            case "Whitespace":
              return new kn(K);
            case "WhitespaceSplit":
              return new ln(K);
            case "Metaspace":
              return new qt(K);
            case "ByteLevel":
              return new De(K);
            case "Split":
              return new Be(K);
            case "Punctuation":
              return new Ze(K);
            case "Digits":
              return new rt(K);
            case "Replace":
              return new nr(K);
            default:
              throw new Error(`Unknown PreTokenizer type: ${K.type}`);
          }
        }
        pre_tokenize_text(K, ce) {
          throw Error("pre_tokenize_text should be implemented in subclass.");
        }
        pre_tokenize(K, ce) {
          return (Array.isArray(K) ? K.map((Pe) => this.pre_tokenize_text(Pe, ce)) : this.pre_tokenize_text(K, ce)).flat();
        }
        _call(K, ce) {
          return this.pre_tokenize(K, ce);
        }
      }
      class le extends _e {
        constructor(K) {
          super(), this.pattern = new RegExp(`[^\\s${F}]+|[${F}]`, "gu");
        }
        pre_tokenize_text(K, ce) {
          return K.trim().match(this.pattern) || [];
        }
      }
      class De extends _e {
        constructor(K) {
          super(), this.config = K, this.add_prefix_space = this.config.add_prefix_space, this.trim_offsets = this.config.trim_offsets, this.use_regex = this.config.use_regex ?? true, this.pattern = /'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu, this.byte_encoder = G, this.text_encoder = new TextEncoder();
        }
        pre_tokenize_text(K, ce) {
          return this.add_prefix_space && !K.startsWith(" ") && (K = " " + K), (this.use_regex ? K.match(this.pattern) || [] : [
            K
          ]).map((Ce) => Array.from(this.text_encoder.encode(Ce), ($e) => this.byte_encoder[$e]).join(""));
        }
      }
      class Be extends _e {
        constructor(K) {
          super(), this.config = K, this.pattern = u(this.config.pattern, this.config.invert);
        }
        pre_tokenize_text(K, ce) {
          return this.pattern === null ? [] : this.config.invert ? K.match(this.pattern) || [] : this.config.behavior?.toLowerCase() === "removed" ? K.split(this.pattern).filter((Pe) => Pe) : n(K, this.pattern);
        }
      }
      class Ze extends _e {
        constructor(K) {
          super(), this.config = K, this.pattern = new RegExp(`[^${F}]+|[${F}]+`, "gu");
        }
        pre_tokenize_text(K, ce) {
          return K.match(this.pattern) || [];
        }
      }
      class rt extends _e {
        constructor(K) {
          super(), this.config = K;
          const ce = `[^\\d]+|\\d${this.config.individual_digits ? "" : "+"}`;
          this.pattern = new RegExp(ce, "gu");
        }
        pre_tokenize_text(K, ce) {
          return K.match(this.pattern) || [];
        }
      }
      class je extends s.Callable {
        constructor(K) {
          super(), this.config = K;
        }
        static fromConfig(K) {
          if (K === null)
            return null;
          switch (K.type) {
            case "TemplateProcessing":
              return new lt(K);
            case "ByteLevel":
              return new ht(K);
            case "RobertaProcessing":
              return new Ge(K);
            case "BertProcessing":
              return new it(K);
            case "Sequence":
              return new mt(K);
            default:
              throw new Error(`Unknown PostProcessor type: ${K.type}`);
          }
        }
        post_process(K, ...ce) {
          throw Error("post_process should be implemented in subclass.");
        }
        _call(K, ...ce) {
          return this.post_process(K, ...ce);
        }
      }
      class it extends je {
        constructor(K) {
          super(K), this.cls = K.cls[0], this.sep = K.sep[0];
        }
        post_process(K, ce = null, { add_special_tokens: Pe = true } = {}) {
          Pe && (K = (0, l.mergeArrays)([
            this.cls
          ], K, [
            this.sep
          ]));
          let Ce = new Array(K.length).fill(0);
          if (ce !== null) {
            const $e = Pe && this instanceof Ge ? [
              this.sep
            ] : [], at = Pe ? [
              this.sep
            ] : [];
            K = (0, l.mergeArrays)(K, $e, ce, at), Ce = (0, l.mergeArrays)(Ce, new Array(ce.length + $e.length + at.length).fill(1));
          }
          return {
            tokens: K,
            token_type_ids: Ce
          };
        }
      }
      class Ge extends it {
      }
      class lt extends je {
        constructor(K) {
          super(K), this.single = K.single, this.pair = K.pair;
        }
        post_process(K, ce = null, { add_special_tokens: Pe = true } = {}) {
          const Ce = ce === null ? this.single : this.pair;
          let $e = [], at = [];
          for (const dt of Ce)
            "SpecialToken" in dt ? Pe && ($e.push(dt.SpecialToken.id), at.push(dt.SpecialToken.type_id)) : "Sequence" in dt && (dt.Sequence.id === "A" ? ($e = (0, l.mergeArrays)($e, K), at = (0, l.mergeArrays)(at, new Array(K.length).fill(dt.Sequence.type_id))) : dt.Sequence.id === "B" && ($e = (0, l.mergeArrays)($e, ce), at = (0, l.mergeArrays)(at, new Array(ce.length).fill(dt.Sequence.type_id))));
          return {
            tokens: $e,
            token_type_ids: at
          };
        }
      }
      class ht extends je {
        post_process(K, ce = null) {
          return ce && (K = (0, l.mergeArrays)(K, ce)), {
            tokens: K
          };
        }
      }
      class mt extends je {
        constructor(K) {
          super(K), this.processors = K.processors.map((ce) => je.fromConfig(ce));
        }
        post_process(K, ce = null, Pe = {}) {
          let Ce;
          for (const $e of this.processors)
            if ($e instanceof ht)
              K = $e.post_process(K).tokens, ce && (ce = $e.post_process(ce).tokens);
            else {
              const at = $e.post_process(K, ce, Pe);
              K = at.tokens, Ce = at.token_type_ids;
            }
          return {
            tokens: K,
            token_type_ids: Ce
          };
        }
      }
      class Je extends s.Callable {
        constructor(K) {
          super(), this.config = K, this.added_tokens = [], this.end_of_word_suffix = null, this.trim_offsets = K.trim_offsets;
        }
        static fromConfig(K) {
          if (K === null)
            return null;
          switch (K.type) {
            case "WordPiece":
              return new Ct(K);
            case "Metaspace":
              return new Cn(K);
            case "ByteLevel":
              return new St(K);
            case "Replace":
              return new Rt(K);
            case "ByteFallback":
              return new pt(K);
            case "Fuse":
              return new At(K);
            case "Strip":
              return new Ot(K);
            case "Sequence":
              return new _n(K);
            case "CTC":
              return new zt(K);
            case "BPEDecoder":
              return new Zt(K);
            default:
              throw new Error(`Unknown Decoder type: ${K.type}`);
          }
        }
        _call(K) {
          return this.decode(K);
        }
        decode(K) {
          return this.decode_chain(K).join("");
        }
        decode_chain(K) {
          throw Error("`decode_chain` should be implemented in subclass.");
        }
      }
      class Rt extends Je {
        decode_chain(K) {
          const ce = u(this.config.pattern);
          return ce === null ? K : K.map((Pe) => Pe.replaceAll(ce, this.config.content));
        }
      }
      class pt extends Je {
        constructor(K) {
          super(K), this.text_decoder = new TextDecoder();
        }
        decode_chain(K) {
          const ce = [];
          let Pe = [];
          for (const Ce of K) {
            let $e = null;
            if (Ce.length === 6 && Ce.startsWith("<0x") && Ce.endsWith(">")) {
              const at = parseInt(Ce.slice(3, 5), 16);
              isNaN(at) || ($e = at);
            }
            if ($e !== null)
              Pe.push($e);
            else {
              if (Pe.length > 0) {
                const at = this.text_decoder.decode(Uint8Array.from(Pe));
                ce.push(at), Pe = [];
              }
              ce.push(Ce);
            }
          }
          if (Pe.length > 0) {
            const Ce = this.text_decoder.decode(Uint8Array.from(Pe));
            ce.push(Ce), Pe = [];
          }
          return ce;
        }
      }
      class At extends Je {
        decode_chain(K) {
          return [
            K.join("")
          ];
        }
      }
      class Ot extends Je {
        constructor(K) {
          super(K), this.content = this.config.content, this.start = this.config.start, this.stop = this.config.stop;
        }
        decode_chain(K) {
          return K.map((ce) => {
            let Pe = 0;
            for (let $e = 0; $e < this.start && ce[$e] === this.content; ++$e) {
              Pe = $e + 1;
              continue;
            }
            let Ce = ce.length;
            for (let $e = 0; $e < this.stop; ++$e) {
              const at = ce.length - $e - 1;
              if (ce[at] === this.content) {
                Ce = at;
                continue;
              } else
                break;
            }
            return ce.slice(Pe, Ce);
          });
        }
      }
      class Ct extends Je {
        constructor(K) {
          super(K), this.cleanup = K.cleanup;
        }
        decode_chain(K) {
          return K.map((ce, Pe) => (Pe !== 0 && (ce.startsWith(this.config.prefix) ? ce = ce.replace(this.config.prefix, "") : ce = " " + ce), this.cleanup && (ce = P(ce)), ce));
        }
      }
      class St extends Je {
        constructor(K) {
          super(K), this.byte_decoder = H, this.text_decoder = new TextDecoder("utf-8", {
            fatal: false,
            ignoreBOM: true
          }), this.end_of_word_suffix = null;
        }
        convert_tokens_to_string(K) {
          const ce = K.join(""), Pe = new Uint8Array([
            ...ce
          ].map(($e) => this.byte_decoder[$e]));
          return this.text_decoder.decode(Pe);
        }
        decode_chain(K) {
          const ce = [];
          let Pe = [];
          for (const Ce of K)
            this.added_tokens.find(($e) => $e.content === Ce) !== void 0 ? (Pe.length > 0 && (ce.push(this.convert_tokens_to_string(Pe)), Pe = []), ce.push(Ce)) : Pe.push(Ce);
          return Pe.length > 0 && ce.push(this.convert_tokens_to_string(Pe)), ce;
        }
      }
      class zt extends Je {
        constructor(K) {
          super(K), this.pad_token = this.config.pad_token, this.word_delimiter_token = this.config.word_delimiter_token, this.cleanup = this.config.cleanup;
        }
        convert_tokens_to_string(K) {
          if (K.length === 0)
            return "";
          const ce = [
            K[0]
          ];
          for (let $e = 1; $e < K.length; ++$e)
            K[$e] !== ce.at(-1) && ce.push(K[$e]);
          let Ce = ce.filter(($e) => $e !== this.pad_token).join("");
          return this.cleanup && (Ce = P(Ce).replaceAll(this.word_delimiter_token, " ").trim()), Ce;
        }
        decode_chain(K) {
          return [
            this.convert_tokens_to_string(K)
          ];
        }
      }
      class _n extends Je {
        constructor(K) {
          super(K), this.decoders = K.decoders.map((ce) => Je.fromConfig(ce));
        }
        decode_chain(K) {
          return this.decoders.reduce((ce, Pe) => Pe.decode_chain(ce), K);
        }
      }
      class Zt extends Je {
        constructor(K) {
          super(K), this.suffix = this.config.suffix;
        }
        decode_chain(K) {
          return K.map((ce, Pe) => ce.replaceAll(this.suffix, Pe === K.length - 1 ? "" : " "));
        }
      }
      class en extends Je {
        decode_chain(K) {
          let ce = "";
          for (let Pe = 1; Pe < K.length; Pe += 2)
            ce += K[Pe];
          return [
            ce
          ];
        }
      }
      class qt extends _e {
        constructor(K) {
          super(), this.addPrefixSpace = K.add_prefix_space, this.replacement = K.replacement, this.strRep = K.str_rep || this.replacement, this.prepend_scheme = K.prepend_scheme ?? "always";
        }
        pre_tokenize_text(K, { section_index: ce = void 0 } = {}) {
          let Pe = K.replaceAll(" ", this.strRep);
          return this.addPrefixSpace && !Pe.startsWith(this.replacement) && (this.prepend_scheme === "always" || this.prepend_scheme === "first" && ce === 0) && (Pe = this.strRep + Pe), [
            Pe
          ];
        }
      }
      class Cn extends Je {
        constructor(K) {
          super(K), this.addPrefixSpace = K.add_prefix_space, this.replacement = K.replacement;
        }
        decode_chain(K) {
          const ce = [];
          for (let Pe = 0; Pe < K.length; ++Pe) {
            let Ce = K[Pe].replaceAll(this.replacement, " ");
            this.addPrefixSpace && Pe == 0 && Ce.startsWith(" ") && (Ce = Ce.substring(1)), ce.push(Ce);
          }
          return ce;
        }
      }
      class Hn extends he {
        constructor(K) {
          super(K), this.charsmap = K.precompiled_charsmap;
        }
        normalize(K) {
          return K = K.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm, ""), K = K.replace(/[\u0009\u000A\u000C\u000D\u00A0\u1680\u2000-\u200F\u2028\u2029\u202F\u205F\u2581\u3000\uFEFF\uFFFD]/gm, " "), K.includes("\uFF5E") ? K = K.split("\uFF5E").map((Pe) => Pe.normalize("NFKC")).join("\uFF5E") : K = K.normalize("NFKC"), K;
        }
      }
      class Un extends _e {
        constructor(K) {
          super(), this.tokenizers = K.pretokenizers.map((ce) => _e.fromConfig(ce));
        }
        pre_tokenize_text(K, ce) {
          return this.tokenizers.reduce((Pe, Ce) => Ce.pre_tokenize(Pe, ce), [
            K
          ]);
        }
      }
      class kn extends _e {
        constructor(K) {
          super();
        }
        pre_tokenize_text(K, ce) {
          return K.match(/\w+|[^\w\s]+/g) || [];
        }
      }
      class ln extends _e {
        constructor(K) {
          super();
        }
        pre_tokenize_text(K, ce) {
          return C(K);
        }
      }
      class nr extends _e {
        constructor(K) {
          super(), this.config = K, this.pattern = u(this.config.pattern), this.content = this.config.content;
        }
        pre_tokenize_text(K, ce) {
          return this.pattern === null ? [
            K
          ] : [
            K.replaceAll(this.pattern, this.config.content)
          ];
        }
      }
      const ur = [
        "bos_token",
        "eos_token",
        "unk_token",
        "sep_token",
        "pad_token",
        "cls_token",
        "mask_token"
      ];
      function rr(Fe, K, ce, Pe) {
        for (const Ce of Object.keys(Fe)) {
          const $e = K - Fe[Ce].length, at = ce(Ce), dt = new Array($e).fill(at);
          Fe[Ce] = Pe === "right" ? (0, l.mergeArrays)(Fe[Ce], dt) : (0, l.mergeArrays)(dt, Fe[Ce]);
        }
      }
      function Jt(Fe, K) {
        for (const ce of Object.keys(Fe))
          Fe[ce].length = K;
      }
      class wt extends s.Callable {
        constructor(K, ce) {
          super();
          __publicField(this, "return_token_type_ids", false);
          __publicField(this, "padding_side", "right");
          this.config = ce, this.normalizer = he.fromConfig(K.normalizer), this.pre_tokenizer = _e.fromConfig(K.pre_tokenizer), this.model = Z.fromConfig(K.model, ce), this.post_processor = je.fromConfig(K.post_processor), this.decoder = Je.fromConfig(K.decoder), this.special_tokens = [], this.all_special_ids = [], this.added_tokens = [];
          for (const Pe of K.added_tokens) {
            const Ce = new j(Pe);
            this.added_tokens.push(Ce), this.model.tokens_to_ids.set(Ce.content, Ce.id), this.model.vocab[Ce.id] = Ce.content, Ce.special && (this.special_tokens.push(Ce.content), this.all_special_ids.push(Ce.id));
          }
          if (this.additional_special_tokens = ce.additional_special_tokens ?? [], this.special_tokens.push(...this.additional_special_tokens), this.special_tokens = [
            ...new Set(this.special_tokens)
          ], this.decoder && (this.decoder.added_tokens = this.added_tokens, this.decoder.end_of_word_suffix = this.model.end_of_word_suffix), this.added_tokens_splitter = new g.DictionarySplitter(this.added_tokens.map((Pe) => Pe.content)), this.added_tokens_map = new Map(this.added_tokens.map((Pe) => [
            Pe.content,
            Pe
          ])), this.mask_token = this.getToken("mask_token"), this.mask_token_id = this.model.tokens_to_ids.get(this.mask_token), this.pad_token = this.getToken("pad_token", "eos_token"), this.pad_token_id = this.model.tokens_to_ids.get(this.pad_token), this.sep_token = this.getToken("sep_token"), this.sep_token_id = this.model.tokens_to_ids.get(this.sep_token), this.unk_token = this.getToken("unk_token"), this.unk_token_id = this.model.tokens_to_ids.get(this.unk_token), this.bos_token = this.getToken("bos_token"), this.bos_token_id = this.model.tokens_to_ids.get(this.bos_token), this.eos_token = this.getToken("eos_token"), this.eos_token_id = this.model.tokens_to_ids.get(this.eos_token), this.model_max_length = ce.model_max_length, this.remove_space = ce.remove_space, this.clean_up_tokenization_spaces = ce.clean_up_tokenization_spaces ?? true, this.do_lowercase_and_remove_accent = ce.do_lowercase_and_remove_accent ?? false, ce.padding_side && (this.padding_side = ce.padding_side), this.add_bos_token = ce.add_bos_token, this.add_eos_token = ce.add_eos_token, this.legacy = false, this.chat_template = ce.chat_template ?? null, Array.isArray(this.chat_template)) {
            const Pe = /* @__PURE__ */ Object.create(null);
            for (const { name: Ce, template: $e } of this.chat_template) {
              if (typeof Ce != "string" || typeof $e != "string")
                throw new Error('Chat template must be a list of objects with "name" and "template" properties');
              Pe[Ce] = $e;
            }
            this.chat_template = Pe;
          }
          this._compiled_template_cache = /* @__PURE__ */ new Map();
        }
        getToken(...K) {
          for (const ce of K) {
            const Pe = this.config[ce];
            if (Pe)
              if (typeof Pe == "object") {
                if (Pe.__type === "AddedToken")
                  return Pe.content;
                throw Error(`Unknown token: ${Pe}`);
              } else
                return Pe;
          }
          return null;
        }
        static async from_pretrained(K, { progress_callback: ce = null, config: Pe = null, cache_dir: Ce = null, local_files_only: $e = false, revision: at = "main", legacy: dt = null } = {}) {
          const ut = await r(K, {
            progress_callback: ce,
            config: Pe,
            cache_dir: Ce,
            local_files_only: $e,
            revision: at,
            legacy: dt
          });
          return new this(...ut);
        }
        _call(K, { text_pair: ce = null, add_special_tokens: Pe = true, padding: Ce = false, truncation: $e = null, max_length: at = null, return_tensor: dt = true, return_token_type_ids: ut = null } = {}) {
          const It = Array.isArray(K);
          let Tt;
          if (It) {
            if (K.length === 0)
              throw Error("text array must be non-empty");
            if (ce !== null) {
              if (Array.isArray(ce)) {
                if (K.length !== ce.length)
                  throw Error("text and text_pair must have the same length");
              } else
                throw Error("text_pair must also be an array");
              Tt = K.map((pn, $n) => this._encode_plus(pn, {
                text_pair: ce[$n],
                add_special_tokens: Pe,
                return_token_type_ids: ut
              }));
            } else
              Tt = K.map((pn) => this._encode_plus(pn, {
                add_special_tokens: Pe,
                return_token_type_ids: ut
              }));
          } else {
            if (K == null)
              throw Error("text may not be null or undefined");
            if (Array.isArray(ce))
              throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");
            Tt = [
              this._encode_plus(K, {
                text_pair: ce,
                add_special_tokens: Pe,
                return_token_type_ids: ut
              })
            ];
          }
          if (at === null ? at = this.model_max_length : $e === null && (Ce === true ? (console.warn("`max_length` is ignored when `padding: true` and there is no truncation strategy. To pad to max length, use `padding: 'max_length'`."), at = this.model_max_length) : Ce === false && (console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation: true` to explicitly truncate examples to max length."), $e = true)), Ce === true && (at = Math.min((0, d.max)(Tt.map((pn) => pn.input_ids.length))[0], at ?? 1 / 0)), at = Math.min(at, this.model_max_length ?? 1 / 0), Ce || $e)
            for (let pn = 0; pn < Tt.length; ++pn)
              Tt[pn].input_ids.length !== at && (Tt[pn].input_ids.length > at ? $e && Jt(Tt[pn], at) : Ce && rr(Tt[pn], at, ($n) => $n === "input_ids" ? this.pad_token_id : 0, this.padding_side));
          const gn = {};
          if (dt) {
            if (!(Ce && $e) && Tt.some(($n) => {
              for (const Rn of Object.keys($n))
                if ($n[Rn].length !== Tt[0][Rn]?.length)
                  return true;
              return false;
            }))
              throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");
            const pn = [
              Tt.length,
              Tt[0].input_ids.length
            ];
            for (const $n of Object.keys(Tt[0]))
              gn[$n] = new w.Tensor("int64", BigInt64Array.from(Tt.flatMap((Rn) => Rn[$n]).map(BigInt)), pn);
          } else {
            for (const pn of Object.keys(Tt[0]))
              gn[pn] = Tt.map(($n) => $n[pn]);
            if (!It)
              for (const pn of Object.keys(gn))
                gn[pn] = gn[pn][0];
          }
          return gn;
        }
        _encode_text(K) {
          if (K === null)
            return null;
          const ce = this.added_tokens_splitter.split(K);
          for (let Ce = 0; Ce < ce.length; ++Ce) {
            const $e = this.added_tokens_map.get(ce[Ce]);
            $e && ($e.lstrip && Ce > 0 && (ce[Ce - 1] = ce[Ce - 1].trimEnd()), $e.rstrip && Ce < ce.length - 1 && (ce[Ce + 1] = ce[Ce + 1].trimStart()));
          }
          return ce.flatMap((Ce, $e) => {
            if (Ce.length === 0)
              return [];
            if (this.added_tokens_map.has(Ce))
              return [
                Ce
              ];
            if (this.remove_space === true && (Ce = Ce.trim().split(/\s+/).join(" ")), this.do_lowercase_and_remove_accent && (Ce = k(Ce)), this.normalizer !== null && (Ce = this.normalizer(Ce)), Ce.length === 0)
              return [];
            const at = this.pre_tokenizer !== null ? this.pre_tokenizer(Ce, {
              section_index: $e
            }) : [
              Ce
            ];
            return this.model(at);
          });
        }
        _encode_plus(K, { text_pair: ce = null, add_special_tokens: Pe = true, return_token_type_ids: Ce = null } = {}) {
          const { tokens: $e, token_type_ids: at } = this._tokenize_helper(K, {
            pair: ce,
            add_special_tokens: Pe
          }), dt = this.model.convert_tokens_to_ids($e), ut = {
            input_ids: dt,
            attention_mask: new Array(dt.length).fill(1)
          };
          return (Ce ?? this.return_token_type_ids) && at && (ut.token_type_ids = at), ut;
        }
        _tokenize_helper(K, { pair: ce = null, add_special_tokens: Pe = false } = {}) {
          const Ce = this._encode_text(K), $e = this._encode_text(ce);
          return this.post_processor ? this.post_processor(Ce, $e, {
            add_special_tokens: Pe
          }) : {
            tokens: (0, l.mergeArrays)(Ce ?? [], $e ?? [])
          };
        }
        tokenize(K, { pair: ce = null, add_special_tokens: Pe = false } = {}) {
          return this._tokenize_helper(K, {
            pair: ce,
            add_special_tokens: Pe
          }).tokens;
        }
        encode(K, { text_pair: ce = null, add_special_tokens: Pe = true, return_token_type_ids: Ce = null } = {}) {
          return this._encode_plus(K, {
            text_pair: ce,
            add_special_tokens: Pe,
            return_token_type_ids: Ce
          }).input_ids;
        }
        batch_decode(K, ce = {}) {
          return K instanceof w.Tensor && (K = K.tolist()), K.map((Pe) => this.decode(Pe, ce));
        }
        decode(K, ce = {}) {
          if (K instanceof w.Tensor && (K = M(K)), !Array.isArray(K) || K.length === 0 || !(0, l.isIntegralNumber)(K[0]))
            throw Error("token_ids must be a non-empty array of integers.");
          return this.decode_single(K, ce);
        }
        decode_single(K, { skip_special_tokens: ce = false, clean_up_tokenization_spaces: Pe = null }) {
          let Ce = this.model.convert_ids_to_tokens(K);
          ce && (Ce = Ce.filter((at) => !this.special_tokens.includes(at)));
          let $e = this.decoder ? this.decoder(Ce) : Ce.join(" ");
          return this.decoder && this.decoder.end_of_word_suffix && ($e = $e.replaceAll(this.decoder.end_of_word_suffix, " "), ce && ($e = $e.trim())), (Pe ?? this.clean_up_tokenization_spaces) && ($e = P($e)), $e;
        }
        get_chat_template({ chat_template: K = null, tools: ce = null } = {}) {
          if (this.chat_template && typeof this.chat_template == "object") {
            const Pe = this.chat_template;
            if (K !== null && Object.hasOwn(Pe, K))
              K = Pe[K];
            else if (K === null)
              if (ce !== null && "tool_use" in Pe)
                K = Pe.tool_use;
              else if ("default" in Pe)
                K = Pe.default;
              else
                throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(Pe).sort()}.`);
          } else if (K === null)
            if (this.chat_template)
              K = this.chat_template;
            else
              throw Error("Cannot use apply_chat_template() because tokenizer.chat_template is not set and no template argument was passed! For information about writing templates and setting the tokenizer.chat_template attribute, please see the documentation at https://huggingface.co/docs/transformers/main/en/chat_templating");
          return K;
        }
        apply_chat_template(K, { tools: ce = null, documents: Pe = null, chat_template: Ce = null, add_generation_prompt: $e = false, tokenize: at = true, padding: dt = false, truncation: ut = false, max_length: It = null, return_tensor: Tt = true, return_dict: gn = false, tokenizer_kwargs: pn = {}, ...$n } = {}) {
          if (Ce = this.get_chat_template({
            chat_template: Ce,
            tools: ce
          }), typeof Ce != "string")
            throw Error(`chat_template must be a string, but got ${typeof Ce}`);
          let Rn = this._compiled_template_cache.get(Ce);
          Rn === void 0 && (Rn = new _.Template(Ce), this._compiled_template_cache.set(Ce, Rn));
          const Fn = /* @__PURE__ */ Object.create(null);
          for (const zn of ur) {
            const lr = this.getToken(zn);
            lr && (Fn[zn] = lr);
          }
          const Bn = Rn.render({
            messages: K,
            add_generation_prompt: $e,
            tools: ce,
            documents: Pe,
            ...Fn,
            ...$n
          });
          if (at) {
            const zn = this._call(Bn, {
              add_special_tokens: false,
              padding: dt,
              truncation: ut,
              max_length: It,
              return_tensor: Tt,
              ...pn
            });
            return gn ? zn : zn.input_ids;
          }
          return Bn;
        }
      }
      class tn extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class ar extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class on extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class sr extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class W extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class ve extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class de extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class ye extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class ke extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class Ue extends wt {
      }
      class He extends wt {
      }
      class Ft extends wt {
        constructor(K, ce) {
          super(K, ce);
          __publicField(this, "return_token_type_ids", true);
          console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
        }
      }
      class Bt extends wt {
        constructor() {
          super(...arguments);
          __publicField(this, "return_token_type_ids", true);
        }
      }
      class Et extends wt {
      }
      class jt extends wt {
      }
      class ie extends wt {
      }
      class xe extends wt {
        constructor(K, ce) {
          super(K, ce), this.languageRegex = /^[a-z]{2}_[A-Z]{2}$/, this.language_codes = this.special_tokens.filter((Pe) => this.languageRegex.test(Pe)), this.lang_to_token = (Pe) => Pe;
        }
        _build_translation_inputs(K, ce, Pe) {
          return Ln(this, K, ce, Pe);
        }
      }
      class Ie extends xe {
      }
      class Re extends wt {
      }
      class Ve extends wt {
      }
      const Qe = "\u2581";
      class _t extends wt {
        constructor(K, ce) {
          super(K, ce);
          __publicField(this, "padding_side", "left");
          this.legacy = ce.legacy ?? true, this.legacy || (this.normalizer = null, this.pre_tokenizer = new qt({
            replacement: Qe,
            add_prefix_space: true,
            prepend_scheme: "first"
          }));
        }
        _encode_text(K) {
          if (K === null)
            return null;
          if (this.legacy || K.length === 0)
            return super._encode_text(K);
          let ce = super._encode_text(Qe + K.replaceAll(Qe, " "));
          return ce.length > 1 && ce[0] === Qe && this.special_tokens.includes(ce[1]) && (ce = ce.slice(1)), ce;
        }
      }
      class Gt extends wt {
      }
      class Lt extends wt {
      }
      class dn extends wt {
      }
      class bn extends wt {
      }
      class Pn extends wt {
      }
      class Sn extends wt {
      }
      class et extends wt {
      }
      class cn extends wt {
      }
      class Tn extends wt {
      }
      function Ln(Fe, K, ce, Pe) {
        if (!("language_codes" in Fe) || !Array.isArray(Fe.language_codes))
          throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");
        if (!("languageRegex" in Fe) || !(Fe.languageRegex instanceof RegExp))
          throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");
        if (!("lang_to_token" in Fe) || typeof Fe.lang_to_token != "function")
          throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");
        const Ce = Pe.src_lang, $e = Pe.tgt_lang;
        if (!Fe.language_codes.includes($e))
          throw new Error(`Target language code "${$e}" is not valid. Must be one of: {${Fe.language_codes.join(", ")}}`);
        if (Ce !== void 0) {
          if (!Fe.language_codes.includes(Ce))
            throw new Error(`Source language code "${Ce}" is not valid. Must be one of: {${Fe.language_codes.join(", ")}}`);
          for (const at of Fe.post_processor.config.single)
            if ("SpecialToken" in at && Fe.languageRegex.test(at.SpecialToken.id)) {
              at.SpecialToken.id = Fe.lang_to_token(Ce);
              break;
            }
        }
        return Pe.forced_bos_token_id = Fe.model.convert_tokens_to_ids([
          Fe.lang_to_token($e)
        ])[0], Fe._call(K, ce);
      }
      class Xn extends wt {
        constructor(K, ce) {
          super(K, ce), this.languageRegex = /^[a-z]{3}_[A-Z][a-z]{3}$/, this.language_codes = this.special_tokens.filter((Pe) => this.languageRegex.test(Pe)), this.lang_to_token = (Pe) => Pe;
        }
        _build_translation_inputs(K, ce, Pe) {
          return Ln(this, K, ce, Pe);
        }
      }
      class Kt extends wt {
        constructor(K, ce) {
          super(K, ce), this.languageRegex = /^__[a-z]{2,3}__$/, this.language_codes = this.special_tokens.filter((Pe) => this.languageRegex.test(Pe)).map((Pe) => Pe.slice(2, -2)), this.lang_to_token = (Pe) => `__${Pe}__`;
        }
        _build_translation_inputs(K, ce, Pe) {
          return Ln(this, K, ce, Pe);
        }
      }
      class tr extends wt {
        get timestamp_begin() {
          return this.model.convert_tokens_to_ids([
            "<|notimestamps|>"
          ])[0] + 1;
        }
        _decode_asr(K, { return_timestamps: ce = false, return_language: Pe = false, time_precision: Ce = null, force_full_sequences: $e = true } = {}) {
          if (Ce === null)
            throw Error("Must specify time_precision");
          let at = null;
          const dt = ce === "word";
          function ut() {
            return {
              language: at,
              timestamp: [
                null,
                null
              ],
              text: ""
            };
          }
          const It = [];
          let Tt = ut(), gn = 0;
          const pn = this.timestamp_begin, Rn = pn + 1500;
          let Fn = [], Bn = [], zn = false, lr = null;
          const Mr = new Set(this.all_special_ids);
          for (const In of K) {
            const Y = In.tokens, ae = dt ? In.token_timestamps : null;
            let me = null, Ae = pn;
            if ("stride" in In) {
              const [gt, Nt, Xt] = In.stride;
              if (gn -= Nt, lr = gt - Xt, Nt && (Ae = Nt / Ce + pn), Xt)
                for (let Pt = Y.length - 1; Pt >= 0; --Pt) {
                  const Qt = Number(Y[Pt]);
                  if (Qt >= pn) {
                    if (me !== null && (Qt - pn) * Ce < lr)
                      break;
                    me = Qt;
                  }
                }
            }
            let Ne = [], tt = [];
            for (let gt = 0; gt < Y.length; ++gt) {
              const Nt = Number(Y[gt]);
              if (Mr.has(Nt)) {
                const Xt = this.decode([
                  Nt
                ]), Pt = h.WHISPER_LANGUAGE_MAPPING.get(Xt.slice(2, -2));
                if (Pt !== void 0) {
                  if (at !== null && Pt !== at && !ce) {
                    Fn.push(Ne);
                    const Qt = this.findLongestCommonSequence(Fn)[0], Vn = this.decode(Qt);
                    Tt.text = Vn, It.push(Tt), Fn = [], Ne = [], Tt = ut();
                  }
                  at = Tt.language = Pt;
                }
              } else if (Nt >= pn && Nt <= Rn) {
                const Xt = (Nt - pn) * Ce + gn, Pt = (0, d.round)(Xt, 2);
                if (me !== null && Nt >= me)
                  zn = true;
                else if (zn || Fn.length > 0 && Nt < Ae)
                  zn = false;
                else if (Tt.timestamp[0] === null)
                  Tt.timestamp[0] = Pt;
                else if (Pt !== Tt.timestamp[0]) {
                  Tt.timestamp[1] = Pt, Fn.push(Ne), dt && Bn.push(tt);
                  const [Qt, Vn] = this.findLongestCommonSequence(Fn, Bn), Dn = this.decode(Qt);
                  Tt.text = Dn, dt && (Tt.words = this.collateWordTimestamps(Qt, Vn, at)), It.push(Tt), Fn = [], Ne = [], Bn = [], tt = [], Tt = ut();
                }
              } else if (Ne.push(Nt), dt) {
                let Xt = (0, d.round)(ae[gt] + gn, 2), Pt;
                if (gt + 1 < ae.length) {
                  Pt = (0, d.round)(ae[gt + 1] + gn, 2);
                  const Qt = this.decode([
                    Nt
                  ]);
                  D.test(Qt) && (Pt = (0, d.round)(Math.min(Xt + Ce, Pt), 2));
                } else
                  Pt = null;
                tt.push([
                  Xt,
                  Pt
                ]);
              }
            }
            if ("stride" in In) {
              const [gt, Nt, Xt] = In.stride;
              gn += gt - Xt;
            }
            Ne.length > 0 ? (Fn.push(Ne), dt && Bn.push(tt)) : Fn.every((gt) => gt.length === 0) && (Tt = ut(), Fn = [], Ne = [], Bn = [], tt = []);
          }
          if (Fn.length > 0) {
            if ($e && ce)
              throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");
            const [In, Y] = this.findLongestCommonSequence(Fn, Bn), ae = this.decode(In);
            Tt.text = ae, dt && (Tt.words = this.collateWordTimestamps(In, Y, at)), It.push(Tt);
          }
          let jn = /* @__PURE__ */ Object.create(null);
          const pr = It.map((In) => In.text).join("");
          if (ce || Pe) {
            for (let In = 0; In < It.length; ++In) {
              const Y = It[In];
              ce || delete Y.timestamp, Pe || delete Y.language;
            }
            if (dt) {
              const In = [];
              for (const Y of It)
                for (const ae of Y.words)
                  In.push(ae);
              jn = {
                chunks: In
              };
            } else
              jn = {
                chunks: It
              };
          }
          return [
            pr,
            jn
          ];
        }
        findLongestCommonSequence(K, ce = null) {
          let Pe = K[0], Ce = Pe.length, $e = [];
          const at = Array.isArray(ce) && ce.length > 0;
          let dt = at ? [] : null, ut = at ? ce[0] : null;
          for (let It = 1; It < K.length; ++It) {
            const Tt = K[It];
            let gn = 0, pn = [
              Ce,
              Ce,
              0,
              0
            ];
            const $n = Tt.length;
            for (let jn = 1; jn < Ce + $n; ++jn) {
              const pr = Math.max(0, Ce - jn), In = Math.min(Ce, Ce + $n - jn), Y = Pe.slice(pr, In), ae = Math.max(0, jn - Ce), me = Math.min($n, jn), Ae = Tt.slice(ae, me);
              if (Y.length !== Ae.length)
                throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");
              let Ne;
              at ? Ne = Y.filter((Nt, Xt) => Nt === Ae[Xt] && ut[pr + Xt] <= ce[It][ae + Xt]).length : Ne = Y.filter((Nt, Xt) => Nt === Ae[Xt]).length;
              const tt = jn / 1e4, gt = Ne / jn + tt;
              Ne > 1 && gt > gn && (gn = gt, pn = [
                pr,
                In,
                ae,
                me
              ]);
            }
            const [Rn, Fn, Bn, zn] = pn, lr = Math.floor((Fn + Rn) / 2), Mr = Math.floor((zn + Bn) / 2);
            $e.push(...Pe.slice(0, lr)), Pe = Tt.slice(Mr), Ce = Pe.length, at && (dt.push(...ut.slice(0, lr)), ut = ce[It].slice(Mr));
          }
          return $e.push(...Pe), at ? (dt.push(...ut), [
            $e,
            dt
          ]) : [
            $e,
            []
          ];
        }
        collateWordTimestamps(K, ce, Pe) {
          const [Ce, $e, at] = this.combineTokensIntoWords(K, Pe), dt = [];
          for (let ut = 0; ut < Ce.length; ++ut) {
            const It = at[ut];
            dt.push({
              text: Ce[ut],
              timestamp: [
                ce[It.at(0)][0],
                ce[It.at(-1)][1]
              ]
            });
          }
          return dt;
        }
        combineTokensIntoWords(K, ce, Pe = `"'\u201C\xA1\xBF([{-`, Ce = `"'.\u3002,\uFF0C!\uFF01?\uFF1F:\uFF1A\u201D)]}\u3001`) {
          ce = ce ?? "english";
          let $e, at, dt;
          return [
            "chinese",
            "japanese",
            "thai",
            "lao",
            "myanmar"
          ].includes(ce) ? [$e, at, dt] = this.splitTokensOnUnicode(K) : [$e, at, dt] = this.splitTokensOnSpaces(K), this.mergePunctuations($e, at, dt, Pe, Ce);
        }
        decode(K, ce) {
          let Pe;
          return ce?.decode_with_timestamps ? (K instanceof w.Tensor && (K = M(K)), Pe = this.decodeWithTimestamps(K, ce)) : Pe = super.decode(K, ce), Pe;
        }
        decodeWithTimestamps(K, ce) {
          const Pe = ce?.time_precision ?? 0.02, Ce = Array.from(this.all_special_ids).at(-1) + 1;
          let $e = [
            []
          ];
          for (let at of K)
            if (at = Number(at), at >= Ce) {
              const dt = ((at - Ce) * Pe).toFixed(2);
              $e.push(`<|${dt}|>`), $e.push([]);
            } else
              $e[$e.length - 1].push(at);
          return $e = $e.map((at) => typeof at == "string" ? at : super.decode(at, ce)), $e.join("");
        }
        splitTokensOnUnicode(K) {
          const ce = this.decode(K, {
            decode_with_timestamps: true
          }), Pe = "\uFFFD", Ce = [], $e = [], at = [];
          let dt = [], ut = [], It = 0;
          for (let Tt = 0; Tt < K.length; ++Tt) {
            const gn = K[Tt];
            dt.push(gn), ut.push(Tt);
            const pn = this.decode(dt, {
              decode_with_timestamps: true
            });
            (!pn.includes(Pe) || ce[It + pn.indexOf(Pe)] === Pe) && (Ce.push(pn), $e.push(dt), at.push(ut), dt = [], ut = [], It += pn.length);
          }
          return [
            Ce,
            $e,
            at
          ];
        }
        splitTokensOnSpaces(K) {
          const [ce, Pe, Ce] = this.splitTokensOnUnicode(K), $e = [], at = [], dt = [], ut = new RegExp(`^[${F}]$`, "gu");
          for (let It = 0; It < ce.length; ++It) {
            const Tt = ce[It], gn = Pe[It], pn = Ce[It], $n = gn[0] >= this.model.tokens_to_ids.get("<|endoftext|>"), Rn = Tt.startsWith(" "), Fn = Tt.trim(), Bn = ut.test(Fn);
            if ($n || Rn || Bn || $e.length === 0)
              $e.push(Tt), at.push(gn), dt.push(pn);
            else {
              const zn = $e.length - 1;
              $e[zn] += Tt, at[zn].push(...gn), dt[zn].push(...pn);
            }
          }
          return [
            $e,
            at,
            dt
          ];
        }
        mergePunctuations(K, ce, Pe, Ce, $e) {
          const at = structuredClone(K), dt = structuredClone(ce), ut = structuredClone(Pe);
          let It = at.length - 2, Tt = at.length - 1;
          for (; It >= 0; )
            at[It].startsWith(" ") && Ce.includes(at[It].trim()) ? (at[Tt] = at[It] + at[Tt], dt[Tt] = (0, l.mergeArrays)(dt[It], dt[Tt]), ut[Tt] = (0, l.mergeArrays)(ut[It], ut[Tt]), at[It] = "", dt[It] = [], ut[It] = []) : Tt = It, --It;
          for (It = 0, Tt = 1; Tt < at.length; )
            !at[It].endsWith(" ") && $e.includes(at[Tt]) ? (at[It] += at[Tt], dt[It] = (0, l.mergeArrays)(dt[It], dt[Tt]), ut[It] = (0, l.mergeArrays)(ut[It], ut[Tt]), at[Tt] = "", dt[Tt] = [], ut[Tt] = []) : It = Tt, ++Tt;
          return [
            at.filter((gn) => gn),
            dt.filter((gn) => gn.length > 0),
            ut.filter((gn) => gn.length > 0)
          ];
        }
      }
      class fr extends wt {
      }
      class Nn extends wt {
      }
      class Kn extends wt {
      }
      class bt extends wt {
        constructor(K, ce) {
          super(K, ce), this.languageRegex = /^(>>\w+<<)\s*/g, this.supported_language_codes = this.model.vocab.filter((Pe) => this.languageRegex.test(Pe)), console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
        }
        _encode_text(K) {
          if (K === null)
            return null;
          const [ce, ...Pe] = K.trim().split(this.languageRegex);
          if (Pe.length === 0)
            return super._encode_text(ce);
          if (Pe.length === 2) {
            const [Ce, $e] = Pe;
            return this.supported_language_codes.includes(Ce) || console.warn(`Unsupported language code "${Ce}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`), (0, l.mergeArrays)([
              Ce
            ], super._encode_text($e));
          }
        }
      }
      class yt extends wt {
      }
      class Vt extends wt {
      }
      class On extends wt {
      }
      class mn extends wt {
      }
      class Gn extends wt {
      }
      class or extends wt {
        constructor(K, ce) {
          super(K, ce), this.decoder = new en({});
        }
      }
      class dr extends wt {
      }
      class Xe extends wt {
      }
      class yr extends wt {
      }
      class Ir {
        static async from_pretrained(K, { progress_callback: ce = null, config: Pe = null, cache_dir: Ce = null, local_files_only: $e = false, revision: at = "main", legacy: dt = null } = {}) {
          const [ut, It] = await r(K, {
            progress_callback: ce,
            config: Pe,
            cache_dir: Ce,
            local_files_only: $e,
            revision: at,
            legacy: dt
          }), Tt = It.tokenizer_class?.replace(/Fast$/, "") ?? "PreTrainedTokenizer";
          let gn = this.TOKENIZER_CLASS_MAPPING[Tt];
          return gn || (console.warn(`Unknown tokenizer class "${Tt}", attempting to construct from base class.`), gn = wt), new gn(ut, It);
        }
      }
      __publicField(Ir, "TOKENIZER_CLASS_MAPPING", {
        T5Tokenizer: Et,
        DistilBertTokenizer: Ue,
        CamembertTokenizer: He,
        DebertaTokenizer: W,
        DebertaV2Tokenizer: ve,
        BertTokenizer: tn,
        HerbertTokenizer: de,
        ConvBertTokenizer: ye,
        RoFormerTokenizer: ke,
        XLMTokenizer: Ft,
        ElectraTokenizer: Bt,
        MobileBertTokenizer: on,
        SqueezeBertTokenizer: sr,
        AlbertTokenizer: ar,
        GPT2Tokenizer: jt,
        BartTokenizer: ie,
        MBartTokenizer: xe,
        MBart50Tokenizer: Ie,
        RobertaTokenizer: Re,
        WhisperTokenizer: tr,
        CodeGenTokenizer: fr,
        CLIPTokenizer: Nn,
        SiglipTokenizer: Kn,
        MarianTokenizer: bt,
        BloomTokenizer: Ve,
        NllbTokenizer: Xn,
        M2M100Tokenizer: Kt,
        LlamaTokenizer: _t,
        CodeLlamaTokenizer: Gt,
        XLMRobertaTokenizer: Lt,
        MPNetTokenizer: dn,
        FalconTokenizer: bn,
        GPTNeoXTokenizer: Pn,
        EsmTokenizer: Sn,
        Wav2Vec2CTCTokenizer: yt,
        BlenderbotTokenizer: Vt,
        BlenderbotSmallTokenizer: On,
        SpeechT5Tokenizer: mn,
        NougatTokenizer: Gn,
        VitsTokenizer: or,
        Qwen2Tokenizer: et,
        GemmaTokenizer: cn,
        Grok1Tokenizer: Tn,
        CohereTokenizer: dr,
        MgpstrTokenizer: Xe,
        Ernie4_5_Tokenizer: yr,
        PreTrainedTokenizer: wt
      });
    },
    "./src/utils/audio.js": (i, e, t) => {
      t.r(e), t.d(e, {
        RawAudio: () => te,
        hamming: () => n,
        hanning: () => r,
        mel_filter_bank: () => $,
        read_audio: () => _,
        spectrogram: () => N,
        window_function: () => R
      });
      var s = t("./src/utils/hub.js"), l = t("./src/utils/maths.js"), f = t("./src/utils/core.js"), d = t("./src/env.js"), w = t("./src/utils/tensor.js"), g = t("?7992");
      async function _(J, G) {
        if (typeof AudioContext > "u")
          throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");
        const H = await (await (0, s.getFile)(J)).arrayBuffer(), U = new AudioContext({
          sampleRate: G
        });
        typeof G > "u" && console.warn(`No sampling rate provided, using default of ${U.sampleRate}Hz.`);
        const Q = await U.decodeAudioData(H);
        let he;
        if (Q.numberOfChannels === 2) {
          const fe = Math.sqrt(2), Me = Q.getChannelData(0), pe = Q.getChannelData(1);
          he = new Float32Array(Me.length);
          for (let oe = 0; oe < Q.length; ++oe)
            he[oe] = fe * (Me[oe] + pe[oe]) / 2;
        } else
          he = Q.getChannelData(0);
        return he;
      }
      function h(J, G) {
        if (J < 1)
          return new Float64Array();
        if (J === 1)
          return new Float64Array([
            1
          ]);
        const H = 1 - G, U = 2 * Math.PI / (J - 1), Q = new Float64Array(J);
        for (let he = 0; he < J; ++he)
          Q[he] = G - H * Math.cos(he * U);
        return Q;
      }
      function r(J) {
        return h(J, 0.5);
      }
      function n(J) {
        return h(J, 0.54);
      }
      const u = {
        htk: (J) => 2595 * Math.log10(1 + J / 700),
        kaldi: (J) => 1127 * Math.log(1 + J / 700),
        slaney: (J, G = 1e3, H = 15, U = 27 / Math.log(6.4)) => J >= G ? H + Math.log(J / G) * U : 3 * J / 200
      };
      function p(J, G = "htk") {
        const H = u[G];
        if (!H)
          throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
        return typeof J == "number" ? H(J) : J.map((U) => H(U));
      }
      const M = {
        htk: (J) => 700 * (10 ** (J / 2595) - 1),
        kaldi: (J) => 700 * (Math.exp(J / 1127) - 1),
        slaney: (J, G = 1e3, H = 15, U = Math.log(6.4) / 27) => J >= H ? G * Math.exp(U * (J - H)) : 200 * J / 3
      };
      function P(J, G = "htk") {
        const H = M[G];
        if (!H)
          throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
        return typeof J == "number" ? H(J) : J.map((U) => H(U));
      }
      function E(J, G) {
        const H = Float64Array.from({
          length: G.length - 1
        }, (fe, Me) => G[Me + 1] - G[Me]), U = Array.from({
          length: J.length
        }, () => new Array(G.length));
        for (let fe = 0; fe < J.length; ++fe) {
          const Me = U[fe];
          for (let pe = 0; pe < G.length; ++pe)
            Me[pe] = G[pe] - J[fe];
        }
        const Q = G.length - 2, he = Array.from({
          length: Q
        }, () => new Array(J.length));
        for (let fe = 0; fe < J.length; ++fe) {
          const Me = U[fe];
          for (let pe = 0; pe < Q; ++pe) {
            const oe = -Me[pe] / H[pe], be = Me[pe + 2] / H[pe + 1];
            he[pe][fe] = Math.max(0, Math.min(oe, be));
          }
        }
        return he;
      }
      function k(J, G, H) {
        const U = (G - J) / (H - 1);
        return Float64Array.from({
          length: H
        }, (Q, he) => J + U * he);
      }
      function $(J, G, H, U, Q, he = null, fe = "htk", Me = false) {
        if (he !== null && he !== "slaney")
          throw new Error('norm must be one of null or "slaney"');
        if (J < 2)
          throw new Error(`Require num_frequency_bins: ${J} >= 2`);
        if (H > U)
          throw new Error(`Require min_frequency: ${H} <= max_frequency: ${U}`);
        const pe = p(H, fe), oe = p(U, fe), be = k(pe, oe, G + 2);
        let Ee = P(be, fe), Oe;
        if (Me) {
          const We = Q / ((J - 1) * 2);
          Oe = p(Float64Array.from({
            length: J
          }, (ot, vt) => vt * We), fe), Ee = be;
        } else
          Oe = k(0, Math.floor(Q / 2), J);
        const Ye = E(Oe, Ee);
        if (he !== null && he === "slaney")
          for (let We = 0; We < G; ++We) {
            const ot = Ye[We], vt = 2 / (Ee[We + 2] - Ee[We]);
            for (let qe = 0; qe < J; ++qe)
              ot[qe] *= vt;
          }
        return Ye;
      }
      function A(J, G, H) {
        const U = new J.constructor(J.length + G + H), Q = J.length - 1;
        for (let he = 0; he < J.length; ++he)
          U[G + he] = J[he];
        for (let he = 1; he <= G; ++he)
          U[G - he] = J[(0, f.calculateReflectOffset)(he, Q)];
        for (let he = 1; he <= H; ++he)
          U[Q + G + he] = J[(0, f.calculateReflectOffset)(Q - he, Q)];
        return U;
      }
      function C(J, G, H, U, Q) {
        if (H <= 0)
          throw new Error("reference must be greater than zero");
        if (U <= 0)
          throw new Error("min_value must be greater than zero");
        H = Math.max(U, H);
        const he = Math.log10(H);
        for (let fe = 0; fe < J.length; ++fe)
          J[fe] = G * Math.log10(Math.max(U, J[fe]) - he);
        if (Q !== null) {
          if (Q <= 0)
            throw new Error("db_range must be greater than zero");
          const fe = (0, l.max)(J)[0] - Q;
          for (let Me = 0; Me < J.length; ++Me)
            J[Me] = Math.max(J[Me], fe);
        }
        return J;
      }
      function F(J, G = 1, H = 1e-5, U = null) {
        return C(J, 20, G, H, U);
      }
      function D(J, G = 1, H = 1e-10, U = null) {
        return C(J, 10, G, H, U);
      }
      async function N(J, G, H, U, { fft_length: Q = null, power: he = 1, center: fe = true, pad_mode: Me = "reflect", onesided: pe = true, preemphasis: oe = null, preemphasis_htk_flavor: be = true, mel_filters: Ee = null, mel_floor: Oe = 1e-10, log_mel: Ye = null, reference: We = 1, min_value: ot = 1e-10, db_range: vt = null, remove_dc_offset: qe = null, min_num_frames: _e = null, max_num_frames: le = null, do_pad: De = true, transpose: Be = false } = {}) {
        const Ze = G.length;
        if (Q === null && (Q = H), H > Q)
          throw Error(`frame_length (${H}) may not be larger than fft_length (${Q})`);
        if (Ze !== H)
          throw new Error(`Length of the window (${Ze}) must equal frame_length (${H})`);
        if (U <= 0)
          throw new Error("hop_length must be greater than zero");
        if (he === null && Ee !== null)
          throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");
        if (!be)
          throw new Error("`preemphasis_htk_flavor=false` is not currently supported.");
        if (fe) {
          if (Me !== "reflect")
            throw new Error(`pad_mode="${Me}" not implemented yet.`);
          const Ot = Math.floor((Q - 1) / 2) + 1;
          J = A(J, Ot, Ot);
        }
        let rt = Math.floor(1 + Math.floor((J.length - H) / U));
        _e !== null && rt < _e && (rt = _e);
        const je = pe ? Math.floor(Q / 2) + 1 : Q;
        let it = rt, Ge = rt;
        le !== null && (le > rt ? De && (Ge = le) : Ge = it = le);
        const lt = new l.FFT(Q), ht = new Float64Array(Q), mt = new Float64Array(lt.outputBufferSize), Je = new Float32Array(je * Ge);
        for (let Ot = 0; Ot < it; ++Ot) {
          const Ct = Ot * U, St = Math.min(J.length - Ct, H);
          St !== H && ht.fill(0, 0, H);
          for (let zt = 0; zt < St; ++zt)
            ht[zt] = J[Ct + zt];
          if (qe) {
            let zt = 0;
            for (let Zt = 0; Zt < St; ++Zt)
              zt += ht[Zt];
            const _n = zt / St;
            for (let Zt = 0; Zt < St; ++Zt)
              ht[Zt] -= _n;
          }
          if (oe !== null) {
            for (let zt = St - 1; zt >= 1; --zt)
              ht[zt] -= oe * ht[zt - 1];
            ht[0] *= 1 - oe;
          }
          for (let zt = 0; zt < G.length; ++zt)
            ht[zt] *= G[zt];
          lt.realTransform(mt, ht);
          for (let zt = 0; zt < je; ++zt) {
            const _n = zt << 1;
            Je[zt * Ge + Ot] = mt[_n] ** 2 + mt[_n + 1] ** 2;
          }
        }
        if (he !== null && he !== 2) {
          const Ot = he / 2;
          for (let Ct = 0; Ct < Je.length; ++Ct)
            Je[Ct] **= Ot;
        }
        const Rt = Ee.length;
        let pt = await (0, w.matmul)(new w.Tensor("float32", Ee.flat(), [
          Rt,
          je
        ]), new w.Tensor("float32", Je, [
          je,
          Ge
        ]));
        Be && (pt = pt.transpose(1, 0));
        const At = pt.data;
        for (let Ot = 0; Ot < At.length; ++Ot)
          At[Ot] = Math.max(Oe, At[Ot]);
        if (he !== null && Ye !== null) {
          const Ot = Math.min(At.length, it * Rt);
          switch (Ye) {
            case "log":
              for (let Ct = 0; Ct < Ot; ++Ct)
                At[Ct] = Math.log(At[Ct]);
              break;
            case "log10":
              for (let Ct = 0; Ct < Ot; ++Ct)
                At[Ct] = Math.log10(At[Ct]);
              break;
            case "dB":
              if (he === 1)
                F(At, We, ot, vt);
              else if (he === 2)
                D(At, We, ot, vt);
              else
                throw new Error(`Cannot use log_mel option '${Ye}' with power ${he}`);
              break;
            default:
              throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${Ye}'`);
          }
        }
        return pt;
      }
      function R(J, G, { periodic: H = true, frame_length: U = null, center: Q = true } = {}) {
        const he = H ? J + 1 : J;
        let fe;
        switch (G) {
          case "boxcar":
            fe = new Float64Array(he).fill(1);
            break;
          case "hann":
          case "hann_window":
            fe = r(he);
            break;
          case "hamming":
            fe = n(he);
            break;
          case "povey":
            fe = r(he).map((Me) => Math.pow(Me, 0.85));
            break;
          default:
            throw new Error(`Unknown window type ${G}.`);
        }
        if (H && (fe = fe.subarray(0, J)), U === null)
          return fe;
        if (J > U)
          throw new Error(`Length of the window (${J}) may not be larger than frame_length (${U})`);
        return fe;
      }
      function j(J, G) {
        let H = 44;
        const U = new ArrayBuffer(H + J.length * 4), Q = new DataView(U);
        Z(Q, 0, "RIFF"), Q.setUint32(4, 36 + J.length * 4, true), Z(Q, 8, "WAVE"), Z(Q, 12, "fmt "), Q.setUint32(16, 16, true), Q.setUint16(20, 3, true), Q.setUint16(22, 1, true), Q.setUint32(24, G, true), Q.setUint32(28, G * 4, true), Q.setUint16(32, 4, true), Q.setUint16(34, 32, true), Z(Q, 36, "data"), Q.setUint32(40, J.length * 4, true);
        for (let he = 0; he < J.length; ++he, H += 4)
          Q.setFloat32(H, J[he], true);
        return U;
      }
      function Z(J, G, H) {
        for (let U = 0; U < H.length; ++U)
          J.setUint8(G + U, H.charCodeAt(U));
      }
      class te {
        constructor(G, H) {
          this.audio = G, this.sampling_rate = H;
        }
        toWav() {
          return j(this.audio, this.sampling_rate);
        }
        toBlob() {
          const G = this.toWav();
          return new Blob([
            G
          ], {
            type: "audio/wav"
          });
        }
        async save(G) {
          let H;
          if (d.apis.IS_BROWSER_ENV) {
            if (d.apis.IS_WEBWORKER_ENV)
              throw new Error("Unable to save a file from a Web Worker.");
            H = f.saveBlob;
          } else if (d.apis.IS_FS_AVAILABLE)
            H = async (U, Q) => {
              let he = await Q.arrayBuffer();
              g.writeFileSync(U, Buffer.from(he));
            };
          else
            throw new Error("Unable to save because filesystem is disabled in this environment.");
          await H(G, this.toBlob());
        }
      }
    },
    "./src/utils/constants.js": (i, e, t) => {
      t.r(e), t.d(e, {
        CHAT_TEMPLATE_NAME: () => g,
        CONFIG_NAME: () => l,
        FEATURE_EXTRACTOR_NAME: () => f,
        GENERATION_CONFIG_NAME: () => _,
        GITHUB_ISSUE_URL: () => s,
        IMAGE_PROCESSOR_NAME: () => d,
        PROCESSOR_NAME: () => w
      });
      const s = "https://github.com/huggingface/transformers.js/issues/new/choose", l = "config.json", f = "preprocessor_config.json", d = f, w = "processor_config.json", g = "chat_template.jinja", _ = "generation_config.json";
    },
    "./src/utils/core.js": (i, e, t) => {
      t.r(e), t.d(e, {
        calculateDimensions: () => _,
        calculateReflectOffset: () => u,
        count: () => E,
        dispatchCallback: () => s,
        escapeRegExp: () => f,
        isIntegralNumber: () => w,
        isNullishDimension: () => g,
        isTypedArray: () => d,
        len: () => P,
        mergeArrays: () => r,
        pick: () => M,
        pop: () => h,
        product: () => n,
        reverseDictionary: () => l,
        saveBlob: () => p
      });
      function s(k, $) {
        k && k($);
      }
      function l(k) {
        return Object.fromEntries(Object.entries(k).map(([$, A]) => [
          A,
          $
        ]));
      }
      function f(k) {
        return k.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
      }
      function d(k) {
        return k?.prototype?.__proto__?.constructor?.name === "TypedArray";
      }
      function w(k) {
        return Number.isInteger(k) || typeof k == "bigint";
      }
      function g(k) {
        return k == null || k === -1;
      }
      function _(k) {
        const $ = [];
        let A = k;
        for (; Array.isArray(A); )
          $.push(A.length), A = A[0];
        return $;
      }
      function h(k, $, A = void 0) {
        const C = k[$];
        if (C !== void 0)
          return delete k[$], C;
        if (A === void 0)
          throw Error(`Key ${$} does not exist in object.`);
        return A;
      }
      function r(...k) {
        return Array.prototype.concat.apply([], k);
      }
      function n(...k) {
        return k.reduce(($, A) => $.flatMap((C) => A.map((F) => [
          C,
          F
        ])));
      }
      function u(k, $) {
        return Math.abs((k + $) % (2 * $) - $);
      }
      function p(k, $) {
        const A = URL.createObjectURL($), C = document.createElement("a");
        C.href = A, C.download = k, C.click(), C.remove(), URL.revokeObjectURL(A);
      }
      function M(k, $) {
        return Object.assign({}, ...$.map((A) => {
          if (k[A] !== void 0)
            return {
              [A]: k[A]
            };
        }));
      }
      function P(k) {
        let $ = 0;
        for (const A of k)
          ++$;
        return $;
      }
      function E(k, $) {
        let A = 0;
        for (const C of k)
          C === $ && ++A;
        return A;
      }
    },
    "./src/utils/data-structures.js": (i, e, t) => {
      t.r(e), t.d(e, {
        CharTrie: () => l,
        DictionarySplitter: () => g,
        LRUCache: () => _,
        PriorityQueue: () => s,
        TokenLattice: () => d
      });
      class s {
        constructor(r = (u, p) => u > p, n = 1 / 0) {
          this._heap = [], this._comparator = r, this._maxSize = n;
        }
        get size() {
          return this._heap.length;
        }
        isEmpty() {
          return this.size === 0;
        }
        peek() {
          return this._heap[0];
        }
        push(...r) {
          return this.extend(r);
        }
        extend(r) {
          for (const n of r)
            if (this.size < this._maxSize)
              this._heap.push(n), this._siftUp();
            else {
              const u = this._smallest();
              this._comparator(n, this._heap[u]) && (this._heap[u] = n, this._siftUpFrom(u));
            }
          return this.size;
        }
        pop() {
          const r = this.peek(), n = this.size - 1;
          return n > 0 && this._swap(0, n), this._heap.pop(), this._siftDown(), r;
        }
        replace(r) {
          const n = this.peek();
          return this._heap[0] = r, this._siftDown(), n;
        }
        _parent(r) {
          return (r + 1 >>> 1) - 1;
        }
        _left(r) {
          return (r << 1) + 1;
        }
        _right(r) {
          return r + 1 << 1;
        }
        _greater(r, n) {
          return this._comparator(this._heap[r], this._heap[n]);
        }
        _swap(r, n) {
          const u = this._heap[r];
          this._heap[r] = this._heap[n], this._heap[n] = u;
        }
        _siftUp() {
          this._siftUpFrom(this.size - 1);
        }
        _siftUpFrom(r) {
          for (; r > 0 && this._greater(r, this._parent(r)); )
            this._swap(r, this._parent(r)), r = this._parent(r);
        }
        _siftDown() {
          let r = 0;
          for (; this._left(r) < this.size && this._greater(this._left(r), r) || this._right(r) < this.size && this._greater(this._right(r), r); ) {
            const n = this._right(r) < this.size && this._greater(this._right(r), this._left(r)) ? this._right(r) : this._left(r);
            this._swap(r, n), r = n;
          }
        }
        _smallest() {
          return 2 ** Math.floor(Math.log2(this.size)) - 1;
        }
      }
      class l {
        constructor() {
          this.root = f.default();
        }
        extend(r) {
          for (const n of r)
            this.push(n);
        }
        push(r) {
          let n = this.root;
          for (const u of r) {
            let p = n.children.get(u);
            p === void 0 && (p = f.default(), n.children.set(u, p)), n = p;
          }
          n.isLeaf = true;
        }
        *commonPrefixSearch(r) {
          let n = this.root;
          if (n === void 0)
            return;
          let u = "";
          for (const p of r) {
            if (u += p, n = n.children.get(p), n === void 0)
              return;
            n.isLeaf && (yield u);
          }
        }
      }
      class f {
        constructor(r, n) {
          this.isLeaf = r, this.children = n;
        }
        static default() {
          return new f(false, /* @__PURE__ */ new Map());
        }
      }
      class d {
        constructor(r, n, u) {
          this.chars = Array.from(r), this.len = this.chars.length, this.bosTokenId = n, this.eosTokenId = u, this.nodes = [], this.beginNodes = Array.from({
            length: this.len + 1
          }, () => []), this.endNodes = Array.from({
            length: this.len + 1
          }, () => []);
          const p = new w(this.bosTokenId, 0, 0, 0, 0), M = new w(this.eosTokenId, 1, this.len, 0, 0);
          this.nodes.push(p.clone()), this.nodes.push(M.clone()), this.beginNodes[this.len].push(M), this.endNodes[0].push(p);
        }
        insert(r, n, u, p) {
          const M = this.nodes.length, P = new w(p, M, r, n, u);
          this.beginNodes[r].push(P), this.endNodes[r + n].push(P), this.nodes.push(P);
        }
        viterbi() {
          const r = this.len;
          let n = 0;
          for (; n <= r; ) {
            if (this.beginNodes[n].length == 0)
              return [];
            for (let E of this.beginNodes[n]) {
              E.prev = null;
              let k = 0, $ = null;
              for (let A of this.endNodes[n]) {
                const C = A.backtraceScore + E.score;
                ($ === null || C > k) && ($ = A.clone(), k = C);
              }
              if ($ !== null)
                E.prev = $, E.backtraceScore = k;
              else
                return [];
            }
            ++n;
          }
          const u = [], M = this.beginNodes[r][0].prev;
          if (M === null)
            return [];
          let P = M.clone();
          for (; P.prev !== null; )
            u.push(P.clone()), P = P.clone().prev.clone();
          return u.reverse(), u;
        }
        piece(r) {
          return this.chars.slice(r.pos, r.pos + r.length).join("");
        }
        tokens() {
          return this.viterbi().map((n) => this.piece(n));
        }
        tokenIds() {
          return this.viterbi().map((n) => n.tokenId);
        }
      }
      class w {
        constructor(r, n, u, p, M) {
          this.tokenId = r, this.nodeId = n, this.pos = u, this.length = p, this.score = M, this.prev = null, this.backtraceScore = 0;
        }
        clone() {
          const r = new w(this.tokenId, this.nodeId, this.pos, this.length, this.score);
          return r.prev = this.prev, r.backtraceScore = this.backtraceScore, r;
        }
      }
      class g {
        constructor(r) {
          this.trie = this._buildTrie(r);
        }
        _buildTrie(r) {
          var _a;
          const n = /* @__PURE__ */ Object.create(null);
          for (const u of r) {
            let p = n;
            for (let M = 0; M < u.length; ++M)
              p = p[_a = u[M]] ?? (p[_a] = /* @__PURE__ */ Object.create(null));
            p.end = u;
          }
          return n;
        }
        split(r) {
          const n = [], u = r.length;
          let p = 0, M = 0;
          for (; M < u; ) {
            let P = this.trie, E = null, k = M;
            for (; k < u && (P = P[r[k]]); )
              P.end && (E = P.end), ++k;
            E ? (M > p && n.push(r.slice(p, M)), n.push(E), M += E.length, p = M) : ++M;
          }
          return p < u && n.push(r.slice(p)), n;
        }
      }
      class _ {
        constructor(r) {
          this.capacity = r, this.cache = /* @__PURE__ */ new Map();
        }
        get(r) {
          if (!this.cache.has(r))
            return;
          const n = this.cache.get(r);
          return this.cache.delete(r), this.cache.set(r, n), n;
        }
        put(r, n) {
          this.cache.has(r) && this.cache.delete(r), this.cache.set(r, n), this.cache.size > this.capacity && this.cache.delete(this.cache.keys().next().value);
        }
        clear() {
          this.cache.clear();
        }
      }
    },
    "./src/utils/devices.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DEVICE_TYPES: () => s
      });
      const s = Object.freeze({
        auto: "auto",
        gpu: "gpu",
        cpu: "cpu",
        wasm: "wasm",
        webgpu: "webgpu",
        cuda: "cuda",
        dml: "dml",
        webnn: "webnn",
        "webnn-npu": "webnn-npu",
        "webnn-gpu": "webnn-gpu",
        "webnn-cpu": "webnn-cpu"
      });
    },
    "./src/utils/dtypes.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DATA_TYPES: () => d,
        DEFAULT_DEVICE_DTYPE_MAPPING: () => w,
        DEFAULT_DTYPE_SUFFIX_MAPPING: () => g,
        isWebGpuFp16Supported: () => f
      });
      var s = t("./src/env.js"), l = t("./src/utils/devices.js");
      const f = function() {
        let _;
        return async function() {
          if (_ === void 0)
            if (!s.apis.IS_WEBGPU_AVAILABLE)
              _ = false;
            else
              try {
                _ = (await navigator.gpu.requestAdapter()).features.has("shader-f16");
              } catch {
                _ = false;
              }
          return _;
        };
      }(), d = Object.freeze({
        auto: "auto",
        fp32: "fp32",
        fp16: "fp16",
        q8: "q8",
        int8: "int8",
        uint8: "uint8",
        q4: "q4",
        bnb4: "bnb4",
        q4f16: "q4f16"
      }), w = Object.freeze({
        [l.DEVICE_TYPES.wasm]: d.q8
      }), g = Object.freeze({
        [d.fp32]: "",
        [d.fp16]: "_fp16",
        [d.int8]: "_int8",
        [d.uint8]: "_uint8",
        [d.q8]: "_quantized",
        [d.q4]: "_q4",
        [d.q4f16]: "_q4f16",
        [d.bnb4]: "_bnb4"
      });
    },
    "./src/utils/generic.js": (i, e, t) => {
      t.r(e), t.d(e, {
        Callable: () => s
      });
      const s = class {
        constructor() {
          let l = function(...f) {
            return l._call(...f);
          };
          return Object.setPrototypeOf(l, new.target.prototype);
        }
        _call(...l) {
          throw Error("Must implement _call method in subclass");
        }
      };
    },
    "./src/utils/hub.js": (i, e, t) => {
      t.r(e), t.d(e, {
        MAX_EXTERNAL_DATA_CHUNKS: () => w,
        getFile: () => u,
        getModelFile: () => k,
        getModelJSON: () => A,
        getModelText: () => $
      });
      var s = t("?7992"), l = t("?5af5"), f = t("./src/env.js"), d = t("./src/utils/core.js");
      const w = 100, g = {
        txt: "text/plain",
        html: "text/html",
        css: "text/css",
        js: "text/javascript",
        json: "application/json",
        png: "image/png",
        jpg: "image/jpeg",
        jpeg: "image/jpeg",
        gif: "image/gif"
      };
      class _ {
        constructor(N) {
          if (this.filePath = N, this.headers = new Headers(), this.exists = s.existsSync(N), this.exists) {
            this.status = 200, this.statusText = "OK";
            let R = s.statSync(N);
            this.headers.set("content-length", R.size.toString()), this.updateContentType();
            const j = s.createReadStream(N);
            this.body = new ReadableStream({
              start(Z) {
                j.on("data", (te) => Z.enqueue(te)), j.on("end", () => Z.close()), j.on("error", (te) => Z.error(te));
              },
              cancel() {
                j.destroy();
              }
            });
          } else
            this.status = 404, this.statusText = "Not Found", this.body = null;
        }
        updateContentType() {
          const N = this.filePath.toString().split(".").pop().toLowerCase();
          this.headers.set("content-type", g[N] ?? "application/octet-stream");
        }
        clone() {
          let N = new _(this.filePath);
          return N.exists = this.exists, N.status = this.status, N.statusText = this.statusText, N.headers = new Headers(this.headers), N;
        }
        async arrayBuffer() {
          return (await s.promises.readFile(this.filePath)).buffer;
        }
        async blob() {
          const N = await s.promises.readFile(this.filePath);
          return new Blob([
            N
          ], {
            type: this.headers.get("content-type")
          });
        }
        async text() {
          return await s.promises.readFile(this.filePath, "utf8");
        }
        async json() {
          return JSON.parse(await this.text());
        }
      }
      function h(D, N = null, R = null) {
        let j;
        try {
          j = new URL(D);
        } catch {
          return false;
        }
        return !(N && !N.includes(j.protocol) || R && !R.includes(j.hostname));
      }
      const r = /^(\b[\w\-.]+\b\/)?\b[\w\-.]{1,96}\b$/;
      function n(D) {
        return !(!r.test(D) || D.includes("..") || D.includes("--") || D.endsWith(".git") || D.endsWith(".ipynb"));
      }
      async function u(D) {
        if (f.env.useFS && !h(D, [
          "http:",
          "https:",
          "blob:"
        ]))
          return new _(D instanceof URL ? D.protocol === "file:" ? D.pathname : D.toString() : D);
        if (typeof process < "u" && process?.release?.name === "node") {
          const N = !!process.env?.TESTING_REMOTELY, R = f.env.version, j = new Headers();
          if (j.set("User-Agent", `transformers.js/${R}; is_ci/${N};`), h(D, [
            "http:",
            "https:"
          ], [
            "huggingface.co",
            "hf.co"
          ])) {
            const te = process.env?.HF_TOKEN ?? process.env?.HF_ACCESS_TOKEN;
            te && j.set("Authorization", `Bearer ${te}`);
          }
          return fetch(D, {
            headers: j
          });
        } else
          return fetch(D);
      }
      const p = {
        400: "Bad request error occurred while trying to load file",
        401: "Unauthorized access to file",
        403: "Forbidden access to file",
        404: "Could not locate file",
        408: "Request timeout error occurred while trying to load file",
        500: "Internal server error error occurred while trying to load file",
        502: "Bad gateway error occurred while trying to load file",
        503: "Service unavailable error occurred while trying to load file",
        504: "Gateway timeout error occurred while trying to load file"
      };
      function M(D, N, R) {
        if (!R)
          return null;
        const j = p[D] ?? `Error (${D}) occurred while trying to load file`;
        throw Error(`${j}: "${N}".`);
      }
      class P {
        constructor(N) {
          this.path = N;
        }
        async match(N) {
          let R = l.join(this.path, N), j = new _(R);
          if (j.exists)
            return j;
        }
        async put(N, R, j = void 0) {
          let Z = l.join(this.path, N);
          try {
            const te = R.headers.get("Content-Length"), J = parseInt(te ?? "0");
            let G = 0;
            await s.promises.mkdir(l.dirname(Z), {
              recursive: true
            });
            const H = s.createWriteStream(Z), U = R.body.getReader();
            for (; ; ) {
              const { done: Q, value: he } = await U.read();
              if (Q)
                break;
              await new Promise((Me, pe) => {
                H.write(he, (oe) => {
                  if (oe) {
                    pe(oe);
                    return;
                  }
                  Me();
                });
              }), G += he.length;
              const fe = J ? G / J * 100 : 0;
              j?.({
                progress: fe,
                loaded: G,
                total: J
              });
            }
            H.close();
          } catch (te) {
            try {
              await s.promises.unlink(Z);
            } catch {
            }
            throw te;
          }
        }
      }
      async function E(D, ...N) {
        for (let R of N)
          try {
            let j = await D.match(R);
            if (j)
              return j;
          } catch {
            continue;
          }
      }
      async function k(D, N, R = true, j = {}, Z = false) {
        if (!f.env.allowLocalModels) {
          if (j.local_files_only)
            throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");
          if (!f.env.allowRemoteModels)
            throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.");
        }
        (0, d.dispatchCallback)(j.progress_callback, {
          status: "initiate",
          name: D,
          file: N
        });
        let te;
        if (!te && f.env.useCustomCache) {
          if (!f.env.customCache)
            throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");
          if (!f.env.customCache.match || !f.env.customCache.put)
            throw new Error("`env.customCache` must be an object which implements the `match` and `put` functions of the Web Cache API. For more information, see https://developer.mozilla.org/en-US/docs/Web/API/Cache");
          te = f.env.customCache;
        }
        if (!te && f.env.useBrowserCache) {
          if (typeof caches > "u")
            throw Error("Browser cache is not available in this environment.");
          try {
            te = await caches.open("transformers-cache");
          } catch (Oe) {
            console.warn("An error occurred while opening the browser cache:", Oe);
          }
        }
        if (!te && f.env.useFSCache) {
          if (!f.apis.IS_FS_AVAILABLE)
            throw Error("File System Cache is not available in this environment.");
          te = new P(j.cache_dir ?? f.env.cacheDir);
        }
        const J = j.revision ?? "main", G = F(D, N), H = n(D), U = H ? F(f.env.localModelPath, G) : G, Q = F(f.env.remoteHost, f.env.remotePathTemplate.replaceAll("{model}", D).replaceAll("{revision}", encodeURIComponent(J)), N);
        let he;
        const fe = te instanceof P ? J === "main" ? G : F(D, J, N) : Q;
        let Me = false, pe;
        te && (pe = await E(te, U, fe));
        const oe = pe !== void 0;
        if (pe === void 0) {
          if (f.env.allowLocalModels)
            if (h(G, [
              "http:",
              "https:"
            ])) {
              if (j.local_files_only)
                throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${G}.`);
              if (!f.env.allowRemoteModels)
                throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${G}.`);
            } else
              try {
                pe = await u(U), he = U;
              } catch (Ye) {
                console.warn(`Unable to load from local path "${U}": "${Ye}"`);
              }
          if (pe === void 0 || pe.status === 404) {
            if (j.local_files_only || !f.env.allowRemoteModels) {
              if (R)
                throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${U}".`);
              return null;
            }
            if (!H)
              throw Error(`Local file missing at "${U}" and download aborted due to invalid model ID "${D}".`);
            if (pe = await u(Q), pe.status !== 200)
              return M(pe.status, Q, R);
            he = fe;
          }
          Me = te && typeof Response < "u" && pe instanceof Response && pe.status === 200;
        }
        (0, d.dispatchCallback)(j.progress_callback, {
          status: "download",
          name: D,
          file: N
        });
        let be;
        if (!(f.apis.IS_NODE_ENV && Z)) {
          let Oe;
          j.progress_callback ? oe && typeof navigator < "u" && /firefox/i.test(navigator.userAgent) ? (Oe = new Uint8Array(await pe.arrayBuffer()), (0, d.dispatchCallback)(j.progress_callback, {
            status: "progress",
            name: D,
            file: N,
            progress: 100,
            loaded: Oe.length,
            total: Oe.length
          })) : Oe = await C(pe, (Ye) => {
            (0, d.dispatchCallback)(j.progress_callback, {
              status: "progress",
              name: D,
              file: N,
              ...Ye
            });
          }) : Oe = new Uint8Array(await pe.arrayBuffer()), be = Oe;
        }
        if (Me && he && await te.match(he) === void 0)
          if (be)
            await te.put(he, new Response(be, {
              headers: pe.headers
            })).catch((Oe) => {
              console.warn(`Unable to add response to browser cache: ${Oe}.`);
            });
          else {
            const Oe = j.progress_callback ? (Ye) => (0, d.dispatchCallback)(j.progress_callback, {
              status: "progress",
              name: D,
              file: N,
              ...Ye
            }) : void 0;
            await te.put(he, pe, Oe);
          }
        if ((0, d.dispatchCallback)(j.progress_callback, {
          status: "done",
          name: D,
          file: N
        }), be) {
          if (!f.apis.IS_NODE_ENV && Z)
            throw new Error("Cannot return path in a browser environment.");
          return be;
        }
        if (pe instanceof _)
          return pe.filePath;
        const Ee = await te?.match(he);
        if (Ee instanceof _)
          return Ee.filePath;
        if (Ee instanceof Response)
          return new Uint8Array(await Ee.arrayBuffer());
        if (typeof Ee == "string")
          return Ee;
        throw new Error("Unable to get model file path or buffer.");
      }
      async function $(D, N, R = true, j = {}) {
        const Z = await k(D, N, R, j, false);
        return Z === null ? null : new TextDecoder("utf-8").decode(Z);
      }
      async function A(D, N, R = true, j = {}) {
        const Z = await $(D, N, R, j);
        return Z === null ? {} : JSON.parse(Z);
      }
      async function C(D, N) {
        const R = D.headers.get("Content-Length");
        R === null && console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");
        let j = parseInt(R ?? "0"), Z = new Uint8Array(j), te = 0;
        const J = D.body.getReader();
        async function G() {
          const { done: H, value: U } = await J.read();
          if (H)
            return;
          const Q = te + U.length;
          if (Q > j) {
            j = Q;
            const fe = new Uint8Array(j);
            fe.set(Z), Z = fe;
          }
          Z.set(U, te), te = Q;
          const he = te / j * 100;
          return N({
            progress: he,
            loaded: te,
            total: j
          }), G();
        }
        return await G(), Z;
      }
      function F(...D) {
        return D = D.map((N, R) => (R && (N = N.replace(new RegExp("^/"), "")), R !== D.length - 1 && (N = N.replace(new RegExp("/$"), "")), N)), D.join("/");
      }
    },
    "./src/utils/image.js": (i, e, t) => {
      t.r(e), t.d(e, {
        RawImage: () => p,
        load_image: () => M
      });
      var s = t("./src/utils/core.js"), l = t("./src/utils/hub.js"), f = t("./src/env.js"), d = t("./src/utils/tensor.js"), w = t("?2b25");
      let g, _, h;
      const r = f.apis.IS_BROWSER_ENV || f.apis.IS_WEBWORKER_ENV;
      if (r)
        g = (P, E) => {
          if (!self.OffscreenCanvas)
            throw new Error("OffscreenCanvas not supported by this browser.");
          return new self.OffscreenCanvas(P, E);
        }, h = self.createImageBitmap, _ = self.ImageData;
      else if (w)
        h = async (P) => {
          const k = (await P.metadata()).channels, { data: $, info: A } = await P.rotate().raw().toBuffer({
            resolveWithObject: true
          }), C = new p(new Uint8ClampedArray($), A.width, A.height, A.channels);
          return k !== void 0 && k !== A.channels && C.convert(k), C;
        };
      else
        throw new Error("Unable to load image processing library.");
      const n = {
        0: "nearest",
        1: "lanczos",
        2: "bilinear",
        3: "bicubic",
        4: "box",
        5: "hamming"
      }, u = /* @__PURE__ */ new Map([
        [
          "png",
          "image/png"
        ],
        [
          "jpg",
          "image/jpeg"
        ],
        [
          "jpeg",
          "image/jpeg"
        ],
        [
          "gif",
          "image/gif"
        ]
      ]);
      class p {
        constructor(E, k, $, A) {
          this.data = E, this.width = k, this.height = $, this.channels = A;
        }
        get size() {
          return [
            this.width,
            this.height
          ];
        }
        static async read(E) {
          if (E instanceof p)
            return E;
          if (typeof E == "string" || E instanceof URL)
            return await this.fromURL(E);
          if (E instanceof Blob)
            return await this.fromBlob(E);
          if (typeof HTMLCanvasElement < "u" && E instanceof HTMLCanvasElement || typeof OffscreenCanvas < "u" && E instanceof OffscreenCanvas)
            return this.fromCanvas(E);
          throw new Error(`Unsupported input type: ${typeof E}`);
        }
        static fromCanvas(E) {
          if (!r)
            throw new Error("fromCanvas() is only supported in browser environments.");
          const $ = E.getContext("2d").getImageData(0, 0, E.width, E.height).data;
          return new p($, E.width, E.height, 4);
        }
        static async fromURL(E) {
          const k = await (0, l.getFile)(E);
          if (k.status !== 200)
            throw new Error(`Unable to read image from "${E}" (${k.status} ${k.statusText})`);
          const $ = await k.blob();
          return this.fromBlob($);
        }
        static async fromBlob(E) {
          if (r) {
            const k = await h(E), $ = g(k.width, k.height).getContext("2d");
            return $.drawImage(k, 0, 0), new this($.getImageData(0, 0, k.width, k.height).data, k.width, k.height, 4);
          } else {
            const k = w(await E.arrayBuffer());
            return await h(k);
          }
        }
        static fromTensor(E, k = "CHW") {
          if (E.dims.length !== 3)
            throw new Error(`Tensor should have 3 dimensions, but has ${E.dims.length} dimensions.`);
          if (k === "CHW")
            E = E.transpose(1, 2, 0);
          else if (k !== "HWC")
            throw new Error(`Unsupported channel format: ${k}`);
          if (!(E.data instanceof Uint8ClampedArray || E.data instanceof Uint8Array))
            throw new Error(`Unsupported tensor type: ${E.type}`);
          switch (E.dims[2]) {
            case 1:
            case 2:
            case 3:
            case 4:
              return new p(E.data, E.dims[1], E.dims[0], E.dims[2]);
            default:
              throw new Error(`Unsupported number of channels: ${E.dims[2]}`);
          }
        }
        grayscale() {
          if (this.channels === 1)
            return this;
          const E = new Uint8ClampedArray(this.width * this.height * 1);
          switch (this.channels) {
            case 3:
            case 4:
              for (let k = 0, $ = 0; k < this.data.length; k += this.channels) {
                const A = this.data[k], C = this.data[k + 1], F = this.data[k + 2];
                E[$++] = Math.round(0.2989 * A + 0.587 * C + 0.114 * F);
              }
              break;
            default:
              throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
          }
          return this._update(E, this.width, this.height, 1);
        }
        rgb() {
          if (this.channels === 3)
            return this;
          const E = new Uint8ClampedArray(this.width * this.height * 3);
          switch (this.channels) {
            case 1:
              for (let k = 0, $ = 0; k < this.data.length; ++k)
                E[$++] = this.data[k], E[$++] = this.data[k], E[$++] = this.data[k];
              break;
            case 4:
              for (let k = 0, $ = 0; k < this.data.length; k += 4)
                E[$++] = this.data[k], E[$++] = this.data[k + 1], E[$++] = this.data[k + 2];
              break;
            default:
              throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
          }
          return this._update(E, this.width, this.height, 3);
        }
        rgba() {
          if (this.channels === 4)
            return this;
          const E = new Uint8ClampedArray(this.width * this.height * 4);
          switch (this.channels) {
            case 1:
              for (let k = 0, $ = 0; k < this.data.length; ++k)
                E[$++] = this.data[k], E[$++] = this.data[k], E[$++] = this.data[k], E[$++] = 255;
              break;
            case 3:
              for (let k = 0, $ = 0; k < this.data.length; k += 3)
                E[$++] = this.data[k], E[$++] = this.data[k + 1], E[$++] = this.data[k + 2], E[$++] = 255;
              break;
            default:
              throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
          }
          return this._update(E, this.width, this.height, 4);
        }
        putAlpha(E) {
          if (E.width !== this.width || E.height !== this.height)
            throw new Error(`Expected mask size to be ${this.width}x${this.height}, but got ${E.width}x${E.height}`);
          if (E.channels !== 1)
            throw new Error(`Expected mask to have 1 channel, but got ${E.channels}`);
          const k = this.data, $ = E.data, A = this.width * this.height;
          if (this.channels === 3) {
            const C = new Uint8ClampedArray(A * 4);
            for (let F = 0, D = 0, N = 0; F < A; ++F)
              C[N++] = k[D++], C[N++] = k[D++], C[N++] = k[D++], C[N++] = $[F];
            return this._update(C, this.width, this.height, 4);
          } else if (this.channels === 4) {
            for (let C = 0; C < A; ++C)
              k[4 * C + 3] = $[C];
            return this;
          }
          throw new Error(`Expected image to have 3 or 4 channels, but got ${this.channels}`);
        }
        async resize(E, k, { resample: $ = 2 } = {}) {
          if (this.width === E && this.height === k)
            return this;
          let A = n[$] ?? $;
          const C = (0, s.isNullishDimension)(E), F = (0, s.isNullishDimension)(k);
          if (C && F)
            return this;
          if (C ? E = k / this.height * this.width : F && (k = E / this.width * this.height), r) {
            const D = this.channels, N = this.toCanvas(), R = g(E, k).getContext("2d");
            return R.drawImage(N, 0, 0, E, k), new p(R.getImageData(0, 0, E, k).data, E, k, 4).convert(D);
          } else {
            let D = this.toSharp();
            switch (A) {
              case "box":
              case "hamming":
                (A === "box" || A === "hamming") && (console.warn(`Resampling method ${A} is not yet supported. Using bilinear instead.`), A = "bilinear");
              case "nearest":
              case "bilinear":
              case "bicubic":
                D = D.affine([
                  E / this.width,
                  0,
                  0,
                  k / this.height
                ], {
                  interpolator: A
                });
                break;
              case "lanczos":
                D = D.resize({
                  width: E,
                  height: k,
                  fit: "fill",
                  kernel: "lanczos3"
                });
                break;
              default:
                throw new Error(`Resampling method ${A} is not supported.`);
            }
            return await h(D);
          }
        }
        async pad([E, k, $, A]) {
          if (E = Math.max(E, 0), k = Math.max(k, 0), $ = Math.max($, 0), A = Math.max(A, 0), E === 0 && k === 0 && $ === 0 && A === 0)
            return this;
          if (r) {
            const C = this.channels, F = this.toCanvas(), D = this.width + E + k, N = this.height + $ + A, R = g(D, N).getContext("2d");
            return R.drawImage(F, 0, 0, this.width, this.height, E, $, this.width, this.height), new p(R.getImageData(0, 0, D, N).data, D, N, 4).convert(C);
          } else {
            const C = this.toSharp().extend({
              left: E,
              right: k,
              top: $,
              bottom: A
            });
            return await h(C);
          }
        }
        async crop([E, k, $, A]) {
          if (E = Math.max(E, 0), k = Math.max(k, 0), $ = Math.min($, this.width - 1), A = Math.min(A, this.height - 1), E === 0 && k === 0 && $ === this.width - 1 && A === this.height - 1)
            return this;
          const C = $ - E + 1, F = A - k + 1;
          if (r) {
            const D = this.channels, N = this.toCanvas(), R = g(C, F).getContext("2d");
            return R.drawImage(N, E, k, C, F, 0, 0, C, F), new p(R.getImageData(0, 0, C, F).data, C, F, 4).convert(D);
          } else {
            const D = this.toSharp().extract({
              left: E,
              top: k,
              width: C,
              height: F
            });
            return await h(D);
          }
        }
        async center_crop(E, k) {
          if (this.width === E && this.height === k)
            return this;
          const $ = (this.width - E) / 2, A = (this.height - k) / 2;
          if (r) {
            const C = this.channels, F = this.toCanvas(), D = g(E, k).getContext("2d");
            let N = 0, R = 0, j = 0, Z = 0;
            return $ >= 0 ? N = $ : j = -$, A >= 0 ? R = A : Z = -A, D.drawImage(F, N, R, E, k, j, Z, E, k), new p(D.getImageData(0, 0, E, k).data, E, k, 4).convert(C);
          } else {
            let C = this.toSharp();
            if ($ >= 0 && A >= 0)
              C = C.extract({
                left: Math.floor($),
                top: Math.floor(A),
                width: E,
                height: k
              });
            else if ($ <= 0 && A <= 0) {
              const F = Math.floor(-A), D = Math.floor(-$);
              C = C.extend({
                top: F,
                left: D,
                right: E - this.width - D,
                bottom: k - this.height - F
              });
            } else {
              let F = [
                0,
                0
              ], D = 0;
              A < 0 ? (F[0] = Math.floor(-A), F[1] = k - this.height - F[0]) : D = Math.floor(A);
              let N = [
                0,
                0
              ], R = 0;
              $ < 0 ? (N[0] = Math.floor(-$), N[1] = E - this.width - N[0]) : R = Math.floor($), C = C.extend({
                top: F[0],
                bottom: F[1],
                left: N[0],
                right: N[1]
              }).extract({
                left: R,
                top: D,
                width: E,
                height: k
              });
            }
            return await h(C);
          }
        }
        async toBlob(E = "image/png", k = 1) {
          if (!r)
            throw new Error("toBlob() is only supported in browser environments.");
          return await this.toCanvas().convertToBlob({
            type: E,
            quality: k
          });
        }
        toTensor(E = "CHW") {
          let k = new d.Tensor("uint8", new Uint8Array(this.data), [
            this.height,
            this.width,
            this.channels
          ]);
          if (E !== "HWC")
            if (E === "CHW")
              k = k.permute(2, 0, 1);
            else
              throw new Error(`Unsupported channel format: ${E}`);
          return k;
        }
        toCanvas() {
          if (!r)
            throw new Error("toCanvas() is only supported in browser environments.");
          const E = this.clone().rgba(), k = g(E.width, E.height), $ = new _(E.data, E.width, E.height);
          return k.getContext("2d").putImageData($, 0, 0), k;
        }
        split() {
          const { data: E, width: k, height: $, channels: A } = this, C = E.constructor, F = E.length / A, D = Array.from({
            length: A
          }, () => new C(F));
          for (let N = 0; N < F; ++N) {
            const R = A * N;
            for (let j = 0; j < A; ++j)
              D[j][N] = E[R + j];
          }
          return D.map((N) => new p(N, k, $, 1));
        }
        _update(E, k, $, A = null) {
          return this.data = E, this.width = k, this.height = $, A !== null && (this.channels = A), this;
        }
        clone() {
          return new p(this.data.slice(), this.width, this.height, this.channels);
        }
        convert(E) {
          if (this.channels === E)
            return this;
          switch (E) {
            case 1:
              this.grayscale();
              break;
            case 3:
              this.rgb();
              break;
            case 4:
              this.rgba();
              break;
            default:
              throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
          }
          return this;
        }
        async save(E) {
          if (r) {
            if (f.apis.IS_WEBWORKER_ENV)
              throw new Error("Unable to save an image from a Web Worker.");
            const k = E.split(".").pop().toLowerCase(), $ = u.get(k) ?? "image/png", A = await this.toBlob($);
            (0, s.saveBlob)(E, A);
          } else {
            if (f.apis.IS_FS_AVAILABLE)
              return await this.toSharp().toFile(E);
            throw new Error("Unable to save the image because filesystem is disabled in this environment.");
          }
        }
        toSharp() {
          if (r)
            throw new Error("toSharp() is only supported in server-side environments.");
          return w(this.data, {
            raw: {
              width: this.width,
              height: this.height,
              channels: this.channels
            }
          });
        }
      }
      const M = p.read.bind(p);
    },
    "./src/utils/maths.js": (i, e, t) => {
      t.r(e), t.d(e, {
        FFT: () => M,
        bankers_round: () => k,
        cos_sim: () => g,
        dot: () => w,
        dynamic_time_warping: () => $,
        interpolate_data: () => s,
        log_softmax: () => d,
        magnitude: () => _,
        max: () => r,
        medianFilter: () => P,
        min: () => h,
        permute_data: () => l,
        round: () => E,
        softmax: () => f
      });
      function s(A, [C, F, D], [N, R], j = "bilinear", Z = false) {
        const te = R / D, J = N / F, G = new A.constructor(N * R * C), H = F * D, U = N * R;
        for (let Q = 0; Q < N; ++Q)
          for (let he = 0; he < R; ++he) {
            const fe = Q * R + he, Me = (he + 0.5) / te - 0.5, pe = (Q + 0.5) / J - 0.5;
            let oe = Math.floor(Me), be = Math.floor(pe);
            const Ee = Math.min(oe + 1, D - 1), Oe = Math.min(be + 1, F - 1);
            oe = Math.max(oe, 0), be = Math.max(be, 0);
            const Ye = Me - oe, We = pe - be, ot = (1 - Ye) * (1 - We), vt = Ye * (1 - We), qe = (1 - Ye) * We, _e = Ye * We, le = be * D, De = Oe * D, Be = le + oe, Ze = le + Ee, rt = De + oe, je = De + Ee;
            for (let it = 0; it < C; ++it) {
              const Ge = it * H;
              G[it * U + fe] = ot * A[Ge + Be] + vt * A[Ge + Ze] + qe * A[Ge + rt] + _e * A[Ge + je];
            }
          }
        return G;
      }
      function l(A, C, F) {
        const D = new Array(F.length), N = new Array(F.length);
        for (let Z = F.length - 1, te = 1; Z >= 0; --Z)
          N[Z] = te, D[Z] = C[F[Z]], te *= D[Z];
        const R = F.map((Z, te) => N[F.indexOf(te)]), j = new A.constructor(A.length);
        for (let Z = 0; Z < A.length; ++Z) {
          let te = 0;
          for (let J = C.length - 1, G = Z; J >= 0; --J)
            te += G % C[J] * R[J], G = Math.floor(G / C[J]);
          j[te] = A[Z];
        }
        return [
          j,
          D
        ];
      }
      function f(A) {
        const C = r(A)[0], F = A.map((R) => Math.exp(R - C)), D = F.reduce((R, j) => R + j, 0);
        return F.map((R) => R / D);
      }
      function d(A) {
        const C = r(A)[0];
        let F = 0;
        for (let R = 0; R < A.length; ++R)
          F += Math.exp(A[R] - C);
        const D = Math.log(F);
        return A.map((R) => R - C - D);
      }
      function w(A, C) {
        let F = 0;
        for (let D = 0; D < A.length; ++D)
          F += A[D] * C[D];
        return F;
      }
      function g(A, C) {
        const F = w(A, C), D = _(A), N = _(C);
        return F / (D * N);
      }
      function _(A) {
        return Math.sqrt(A.reduce((C, F) => C + F * F, 0));
      }
      function h(A) {
        if (A.length === 0)
          throw Error("Array must not be empty");
        let C = A[0], F = 0;
        for (let D = 1; D < A.length; ++D)
          A[D] < C && (C = A[D], F = D);
        return [
          C,
          F
        ];
      }
      function r(A) {
        if (A.length === 0)
          throw Error("Array must not be empty");
        let C = A[0], F = 0;
        for (let D = 1; D < A.length; ++D)
          A[D] > C && (C = A[D], F = D);
        return [
          C,
          F
        ];
      }
      function n(A) {
        return A > 0 && (A & A - 1) === 0;
      }
      class u {
        constructor(C) {
          if (this.size = C | 0, this.size <= 1 || !n(this.size))
            throw new Error("FFT size must be a power of two larger than 1");
          this._csize = C << 1, this.table = new Float64Array(this.size * 2);
          for (let D = 0; D < this.table.length; D += 2) {
            const N = Math.PI * D / this.size;
            this.table[D] = Math.cos(N), this.table[D + 1] = -Math.sin(N);
          }
          let F = 0;
          for (let D = 1; this.size > D; D <<= 1)
            ++F;
          this._width = F % 2 === 0 ? F - 1 : F, this._bitrev = new Int32Array(1 << this._width);
          for (let D = 0; D < this._bitrev.length; ++D) {
            this._bitrev[D] = 0;
            for (let N = 0; N < this._width; N += 2) {
              const R = this._width - N - 2;
              this._bitrev[D] |= (D >>> N & 3) << R;
            }
          }
        }
        createComplexArray() {
          return new Float64Array(this._csize);
        }
        fromComplexArray(C, F) {
          const D = F || new Array(C.length >>> 1);
          for (let N = 0; N < C.length; N += 2)
            D[N >>> 1] = C[N];
          return D;
        }
        toComplexArray(C, F) {
          const D = F || this.createComplexArray();
          for (let N = 0; N < D.length; N += 2)
            D[N] = C[N >>> 1], D[N + 1] = 0;
          return D;
        }
        transform(C, F) {
          if (C === F)
            throw new Error("Input and output buffers must be different");
          this._transform4(C, F, 1);
        }
        realTransform(C, F) {
          if (C === F)
            throw new Error("Input and output buffers must be different");
          this._realTransform4(C, F, 1);
        }
        inverseTransform(C, F) {
          if (C === F)
            throw new Error("Input and output buffers must be different");
          this._transform4(C, F, -1);
          for (let D = 0; D < C.length; ++D)
            C[D] /= this.size;
        }
        _transform4(C, F, D) {
          const N = this._csize;
          let j = 1 << this._width, Z = N / j << 1, te, J;
          const G = this._bitrev;
          if (Z === 4)
            for (te = 0, J = 0; te < N; te += Z, ++J) {
              const U = G[J];
              this._singleTransform2(F, C, te, U, j);
            }
          else
            for (te = 0, J = 0; te < N; te += Z, ++J) {
              const U = G[J];
              this._singleTransform4(F, C, te, U, j, D);
            }
          const H = this.table;
          for (j >>= 2; j >= 2; j >>= 2) {
            Z = N / j << 1;
            const U = Z >>> 2;
            for (te = 0; te < N; te += Z) {
              const Q = te + U - 1;
              for (let he = te, fe = 0; he < Q; he += 2, fe += j) {
                const Me = he, pe = Me + U, oe = pe + U, be = oe + U, Ee = C[Me], Oe = C[Me + 1], Ye = C[pe], We = C[pe + 1], ot = C[oe], vt = C[oe + 1], qe = C[be], _e = C[be + 1], le = H[fe], De = D * H[fe + 1], Be = Ye * le - We * De, Ze = Ye * De + We * le, rt = H[2 * fe], je = D * H[2 * fe + 1], it = ot * rt - vt * je, Ge = ot * je + vt * rt, lt = H[3 * fe], ht = D * H[3 * fe + 1], mt = qe * lt - _e * ht, Je = qe * ht + _e * lt, Rt = Ee + it, pt = Oe + Ge, At = Ee - it, Ot = Oe - Ge, Ct = Be + mt, St = Ze + Je, zt = D * (Be - mt), _n = D * (Ze - Je);
                C[Me] = Rt + Ct, C[Me + 1] = pt + St, C[pe] = At + _n, C[pe + 1] = Ot - zt, C[oe] = Rt - Ct, C[oe + 1] = pt - St, C[be] = At - _n, C[be + 1] = Ot + zt;
              }
            }
          }
        }
        _singleTransform2(C, F, D, N, R) {
          const j = C[N], Z = C[N + 1], te = C[N + R], J = C[N + R + 1];
          F[D] = j + te, F[D + 1] = Z + J, F[D + 2] = j - te, F[D + 3] = Z - J;
        }
        _singleTransform4(C, F, D, N, R, j) {
          const Z = R * 2, te = R * 3, J = C[N], G = C[N + 1], H = C[N + R], U = C[N + R + 1], Q = C[N + Z], he = C[N + Z + 1], fe = C[N + te], Me = C[N + te + 1], pe = J + Q, oe = G + he, be = J - Q, Ee = G - he, Oe = H + fe, Ye = U + Me, We = j * (H - fe), ot = j * (U - Me);
          F[D] = pe + Oe, F[D + 1] = oe + Ye, F[D + 2] = be + ot, F[D + 3] = Ee - We, F[D + 4] = pe - Oe, F[D + 5] = oe - Ye, F[D + 6] = be - ot, F[D + 7] = Ee + We;
        }
        _realTransform4(C, F, D) {
          const N = this._csize;
          let j = 1 << this._width, Z = N / j << 1, te, J;
          const G = this._bitrev;
          if (Z === 4)
            for (te = 0, J = 0; te < N; te += Z, ++J) {
              const Q = G[J];
              this._singleRealTransform2(F, C, te, Q >>> 1, j >>> 1);
            }
          else
            for (te = 0, J = 0; te < N; te += Z, ++J) {
              const Q = G[J];
              this._singleRealTransform4(F, C, te, Q >>> 1, j >>> 1, D);
            }
          const H = this.table;
          for (j >>= 2; j >= 2; j >>= 2) {
            Z = N / j << 1;
            const Q = Z >>> 1, he = Q >>> 1, fe = he >>> 1;
            for (te = 0; te < N; te += Z)
              for (let Me = 0, pe = 0; Me <= fe; Me += 2, pe += j) {
                const oe = te + Me, be = oe + he, Ee = be + he, Oe = Ee + he, Ye = C[oe], We = C[oe + 1], ot = C[be], vt = C[be + 1], qe = C[Ee], _e = C[Ee + 1], le = C[Oe], De = C[Oe + 1], Be = Ye, Ze = We, rt = H[pe], je = D * H[pe + 1], it = ot * rt - vt * je, Ge = ot * je + vt * rt, lt = H[2 * pe], ht = D * H[2 * pe + 1], mt = qe * lt - _e * ht, Je = qe * ht + _e * lt, Rt = H[3 * pe], pt = D * H[3 * pe + 1], At = le * Rt - De * pt, Ot = le * pt + De * Rt, Ct = Be + mt, St = Ze + Je, zt = Be - mt, _n = Ze - Je, Zt = it + At, en = Ge + Ot, qt = D * (it - At), Cn = D * (Ge - Ot);
                if (C[oe] = Ct + Zt, C[oe + 1] = St + en, C[be] = zt + Cn, C[be + 1] = _n - qt, Me === 0) {
                  C[Ee] = Ct - Zt, C[Ee + 1] = St - en;
                  continue;
                }
                if (Me === fe)
                  continue;
                const Hn = te + he - Me, Un = te + Q - Me;
                C[Hn] = zt - D * Cn, C[Hn + 1] = -_n - D * qt, C[Un] = Ct - D * Zt, C[Un + 1] = -St + D * en;
              }
          }
          const U = N >>> 1;
          for (let Q = 2; Q < U; Q += 2)
            C[N - Q] = C[Q], C[N - Q + 1] = -C[Q + 1];
        }
        _singleRealTransform2(C, F, D, N, R) {
          const j = C[N], Z = C[N + R];
          F[D] = j + Z, F[D + 1] = 0, F[D + 2] = j - Z, F[D + 3] = 0;
        }
        _singleRealTransform4(C, F, D, N, R, j) {
          const Z = R * 2, te = R * 3, J = C[N], G = C[N + R], H = C[N + Z], U = C[N + te], Q = J + H, he = J - H, fe = G + U, Me = j * (G - U);
          F[D] = Q + fe, F[D + 1] = 0, F[D + 2] = he, F[D + 3] = -Me, F[D + 4] = Q - fe, F[D + 5] = 0, F[D + 6] = he, F[D + 7] = Me;
        }
      }
      class p {
        constructor(C) {
          const F = 2 * (C - 1), D = 2 * (2 * C - 1), N = 2 ** Math.ceil(Math.log2(D));
          this.bufferSize = N, this._a = F;
          const R = new Float64Array(D), j = new Float64Array(N);
          this._chirpBuffer = new Float64Array(N), this._buffer1 = new Float64Array(N), this._buffer2 = new Float64Array(N), this._outBuffer1 = new Float64Array(N), this._outBuffer2 = new Float64Array(N);
          const Z = -2 * Math.PI / C, te = Math.cos(Z), J = Math.sin(Z);
          for (let G = 0; G < D >> 1; ++G) {
            const H = (G + 1 - C) ** 2 / 2, U = Math.sqrt(te ** 2 + J ** 2) ** H, Q = H * Math.atan2(J, te), he = 2 * G;
            R[he] = U * Math.cos(Q), R[he + 1] = U * Math.sin(Q), j[he] = R[he], j[he + 1] = -R[he + 1];
          }
          this._slicedChirpBuffer = R.subarray(F, D), this._f = new u(N >> 1), this._f.transform(this._chirpBuffer, j);
        }
        _transform(C, F, D) {
          const N = this._buffer1, R = this._buffer2, j = this._outBuffer1, Z = this._outBuffer2, te = this._chirpBuffer, J = this._slicedChirpBuffer, G = this._a;
          if (D)
            for (let H = 0; H < J.length; H += 2) {
              const U = H + 1, Q = H >> 1, he = F[Q];
              N[H] = he * J[H], N[U] = he * J[U];
            }
          else
            for (let H = 0; H < J.length; H += 2) {
              const U = H + 1;
              N[H] = F[H] * J[H] - F[U] * J[U], N[U] = F[H] * J[U] + F[U] * J[H];
            }
          this._f.transform(j, N);
          for (let H = 0; H < te.length; H += 2) {
            const U = H + 1;
            R[H] = j[H] * te[H] - j[U] * te[U], R[U] = j[H] * te[U] + j[U] * te[H];
          }
          this._f.inverseTransform(Z, R);
          for (let H = 0; H < Z.length; H += 2) {
            const U = Z[H + G], Q = Z[H + G + 1], he = J[H], fe = J[H + 1];
            C[H] = U * he - Q * fe, C[H + 1] = U * fe + Q * he;
          }
        }
        transform(C, F) {
          this._transform(C, F, false);
        }
        realTransform(C, F) {
          this._transform(C, F, true);
        }
      }
      class M {
        constructor(C) {
          this.fft_length = C, this.isPowerOfTwo = n(C), this.isPowerOfTwo ? (this.fft = new u(C), this.outputBufferSize = 2 * C) : (this.fft = new p(C), this.outputBufferSize = this.fft.bufferSize);
        }
        realTransform(C, F) {
          this.fft.realTransform(C, F);
        }
        transform(C, F) {
          this.fft.transform(C, F);
        }
      }
      function P(A, C) {
        if (C % 2 === 0 || C <= 0)
          throw new Error("Window size must be a positive odd number");
        const F = new A.constructor(A.length), D = new A.constructor(C), N = Math.floor(C / 2);
        for (let R = 0; R < A.length; ++R) {
          let j = 0;
          for (let Z = -N; Z <= N; ++Z) {
            let te = R + Z;
            te < 0 ? te = Math.abs(te) : te >= A.length && (te = 2 * (A.length - 1) - te), D[j++] = A[te];
          }
          D.sort(), F[R] = D[N];
        }
        return F;
      }
      function E(A, C) {
        const F = Math.pow(10, C);
        return Math.round(A * F) / F;
      }
      function k(A) {
        const C = Math.round(A);
        return Math.abs(A) % 1 === 0.5 ? C % 2 === 0 ? C : C - 1 : C;
      }
      function $(A) {
        const C = A.length, F = A[0].length, D = [
          C + 1,
          F + 1
        ], N = Array.from({
          length: D[0]
        }, () => Array(D[1]).fill(1 / 0));
        N[0][0] = 0;
        const R = Array.from({
          length: D[0]
        }, () => Array(D[1]).fill(-1));
        for (let G = 1; G < D[1]; ++G)
          for (let H = 1; H < D[0]; ++H) {
            const U = N[H - 1][G - 1], Q = N[H - 1][G], he = N[H][G - 1];
            let fe, Me;
            U < Q && U < he ? (fe = U, Me = 0) : Q < U && Q < he ? (fe = Q, Me = 1) : (fe = he, Me = 2), N[H][G] = A[H - 1][G - 1] + fe, R[H][G] = Me;
          }
        for (let G = 0; G < D[1]; ++G)
          R[0][G] = 2;
        for (let G = 0; G < D[0]; ++G)
          R[G][0] = 1;
        let j = C, Z = F, te = [], J = [];
        for (; j > 0 || Z > 0; )
          switch (te.push(j - 1), J.push(Z - 1), R[j][Z]) {
            case 0:
              --j, --Z;
              break;
            case 1:
              --j;
              break;
            case 2:
              --Z;
              break;
            default:
              throw new Error(`Internal error in dynamic time warping. Unexpected trace[${j}, ${Z}]. Please file a bug report.`);
          }
        return te.reverse(), J.reverse(), [
          te,
          J
        ];
      }
    },
    "./src/utils/tensor.js": (i, e, t) => {
      t.r(e), t.d(e, {
        DataTypeMap: () => d,
        Tensor: () => w,
        cat: () => F,
        full: () => J,
        full_like: () => G,
        interpolate: () => h,
        interpolate_4d: () => r,
        layer_norm: () => k,
        matmul: () => n,
        mean: () => j,
        mean_pooling: () => E,
        ones: () => H,
        ones_like: () => U,
        permute: () => _,
        quantize_embeddings: () => Me,
        rand: () => fe,
        rfft: () => u,
        slice: () => P,
        stack: () => D,
        std_mean: () => R,
        topk: () => p,
        zeros: () => Q,
        zeros_like: () => he
      });
      var s = t("./src/utils/maths.js"), l = t("./src/backends/onnx.js"), f = t("./src/ops/registry.js");
      const d = Object.freeze({
        float32: Float32Array,
        float16: typeof Float16Array < "u" ? Float16Array : Uint16Array,
        float64: Float64Array,
        string: Array,
        int8: Int8Array,
        uint8: Uint8Array,
        int16: Int16Array,
        uint16: Uint16Array,
        int32: Int32Array,
        uint32: Uint32Array,
        int64: BigInt64Array,
        uint64: BigUint64Array,
        bool: Uint8Array,
        uint4: Uint8Array,
        int4: Int8Array
      });
      class w {
        constructor(...oe) {
          __publicField(this, "ort_tensor");
          return (0, l.isONNXTensor)(oe[0]) ? this.ort_tensor = oe[0] : this.ort_tensor = new l.Tensor(oe[0], oe[1], oe[2]), new Proxy(this, {
            get: (be, Ee) => {
              if (typeof Ee == "string") {
                let Oe = Number(Ee);
                if (Number.isInteger(Oe))
                  return be._getitem(Oe);
              }
              return be[Ee];
            },
            set: (be, Ee, Oe) => be[Ee] = Oe
          });
        }
        get dims() {
          return this.ort_tensor.dims;
        }
        set dims(oe) {
          this.ort_tensor.dims = oe;
        }
        get type() {
          return this.ort_tensor.type;
        }
        get data() {
          return this.ort_tensor.data;
        }
        get size() {
          return this.ort_tensor.size;
        }
        get location() {
          return this.ort_tensor.location;
        }
        dispose() {
          this.ort_tensor.dispose();
        }
        *[Symbol.iterator]() {
          const [oe, ...be] = this.dims;
          if (be.length > 0) {
            const Ee = be.reduce((Oe, Ye) => Oe * Ye);
            for (let Oe = 0; Oe < oe; ++Oe)
              yield this._subarray(Oe, Ee, be);
          } else
            yield* this.data;
        }
        _getitem(oe) {
          const [be, ...Ee] = this.dims;
          if (oe = C(oe, be), Ee.length > 0) {
            const Oe = Ee.reduce((Ye, We) => Ye * We);
            return this._subarray(oe, Oe, Ee);
          } else
            return new w(this.type, [
              this.data[oe]
            ], Ee);
        }
        indexOf(oe) {
          const be = this.data;
          for (let Ee = 0; Ee < be.length; ++Ee)
            if (be[Ee] == oe)
              return Ee;
          return -1;
        }
        _subarray(oe, be, Ee) {
          const Oe = oe * be, Ye = (oe + 1) * be, We = "subarray" in this.data ? this.data.subarray(Oe, Ye) : this.data.slice(Oe, Ye);
          return new w(this.type, We, Ee);
        }
        item() {
          const oe = this.data;
          if (oe.length !== 1)
            throw new Error(`a Tensor with ${oe.length} elements cannot be converted to Scalar`);
          return oe[0];
        }
        tolist() {
          return g(this.data, this.dims);
        }
        sigmoid() {
          return this.clone().sigmoid_();
        }
        sigmoid_() {
          const oe = this.data;
          for (let be = 0; be < oe.length; ++be)
            oe[be] = 1 / (1 + Math.exp(-oe[be]));
          return this;
        }
        map(oe) {
          return this.clone().map_(oe);
        }
        map_(oe) {
          const be = this.data;
          for (let Ee = 0; Ee < be.length; ++Ee)
            be[Ee] = oe(be[Ee], Ee, be);
          return this;
        }
        mul(oe) {
          return this.clone().mul_(oe);
        }
        mul_(oe) {
          const be = this.data;
          for (let Ee = 0; Ee < be.length; ++Ee)
            be[Ee] *= oe;
          return this;
        }
        div(oe) {
          return this.clone().div_(oe);
        }
        div_(oe) {
          const be = this.data;
          for (let Ee = 0; Ee < be.length; ++Ee)
            be[Ee] /= oe;
          return this;
        }
        add(oe) {
          return this.clone().add_(oe);
        }
        add_(oe) {
          const be = this.data;
          for (let Ee = 0; Ee < be.length; ++Ee)
            be[Ee] += oe;
          return this;
        }
        sub(oe) {
          return this.clone().sub_(oe);
        }
        sub_(oe) {
          const be = this.data;
          for (let Ee = 0; Ee < be.length; ++Ee)
            be[Ee] -= oe;
          return this;
        }
        clone() {
          return new w(this.type, this.data.slice(), this.dims.slice());
        }
        slice(...oe) {
          const be = [], Ee = [];
          for (let _e = 0; _e < this.dims.length; ++_e) {
            let le = oe[_e];
            if (le == null)
              Ee.push([
                0,
                this.dims[_e]
              ]), be.push(this.dims[_e]);
            else if (typeof le == "number")
              le = C(le, this.dims[_e], _e), Ee.push([
                le,
                le + 1
              ]);
            else if (Array.isArray(le) && le.length === 2) {
              let [De, Be] = le;
              if (De = De === null ? 0 : C(De, this.dims[_e], _e, false), Be = Be === null ? this.dims[_e] : C(Be, this.dims[_e], _e, false), De > Be)
                throw new Error(`Invalid slice: ${le}`);
              const Ze = [
                Math.max(De, 0),
                Math.min(Be, this.dims[_e])
              ];
              Ee.push(Ze), be.push(Ze[1] - Ze[0]);
            } else
              throw new Error(`Invalid slice: ${le}`);
          }
          const Oe = Ee.map(([_e, le]) => le - _e), Ye = Oe.reduce((_e, le) => _e * le), We = this.data, ot = new We.constructor(Ye), vt = this.stride();
          let qe = true;
          for (let _e = 1; _e < Oe.length; ++_e)
            if (Ee[_e][0] !== 0 || Ee[_e][1] !== this.dims[_e]) {
              qe = false;
              break;
            }
          if (qe) {
            const _e = Ee[0][0] * vt[0], le = Ee[0][1] * vt[0];
            if (ArrayBuffer.isView(We))
              ot.set(We.subarray(_e, le));
            else if (Array.isArray(We)) {
              const De = We.slice(_e, le);
              for (let Be = 0; Be < De.length; ++Be)
                ot[Be] = De[Be];
            } else
              throw new Error("Unsupported data type for slicing");
          } else
            for (let _e = 0; _e < Ye; ++_e) {
              let le = 0;
              for (let De = Oe.length - 1, Be = _e; De >= 0; --De) {
                const Ze = Oe[De];
                le += (Be % Ze + Ee[De][0]) * vt[De], Be = Math.floor(Be / Ze);
              }
              ot[_e] = We[le];
            }
          return new w(this.type, ot, be);
        }
        permute(...oe) {
          return _(this, oe);
        }
        transpose(...oe) {
          return this.permute(...oe);
        }
        sum(oe = null, be = false) {
          return this.norm(1, oe, be);
        }
        norm(oe = "fro", be = null, Ee = false) {
          if (oe === "fro")
            oe = 2;
          else if (typeof oe == "string")
            throw Error(`Unsupported norm: ${oe}`);
          const Oe = this.data, Ye = (qe, _e) => qe + _e ** oe;
          if (be === null) {
            const qe = Oe.reduce(Ye, 0) ** (1 / oe);
            return new w(this.type, [
              qe
            ], []);
          }
          const [We, ot, vt] = N(Ye, this, be, Ee);
          if (oe !== 1)
            for (let qe = 0; qe < ot.length; ++qe)
              ot[qe] = ot[qe] ** (1 / oe);
          return new w(We, ot, vt);
        }
        normalize_(oe = 2, be = 1) {
          be = C(be, this.dims.length);
          const Ee = this.norm(oe, be, true), Oe = this.data, Ye = Ee.data;
          for (let We = 0; We < Oe.length; ++We) {
            let ot = 0;
            for (let vt = this.dims.length - 1, qe = We, _e = 1; vt >= 0; --vt) {
              const le = this.dims[vt];
              if (vt !== be) {
                const De = qe % le;
                ot += De * _e, _e *= this.dims[vt];
              }
              qe = Math.floor(qe / le);
            }
            Oe[We] /= Ye[ot];
          }
          return this;
        }
        normalize(oe = 2, be = 1) {
          return this.clone().normalize_(oe, be);
        }
        stride() {
          return Z(this.dims);
        }
        squeeze(oe = null) {
          return new w(this.type, this.data, $(this.dims, oe));
        }
        squeeze_(oe = null) {
          return this.dims = $(this.dims, oe), this;
        }
        unsqueeze(oe = null) {
          return new w(this.type, this.data, A(this.dims, oe));
        }
        unsqueeze_(oe = null) {
          return this.dims = A(this.dims, oe), this;
        }
        flatten_(oe = 0, be = -1) {
          be = (be + this.dims.length) % this.dims.length;
          let Ee = this.dims.slice(0, oe), Oe = this.dims.slice(oe, be + 1), Ye = this.dims.slice(be + 1);
          return this.dims = [
            ...Ee,
            Oe.reduce((We, ot) => We * ot, 1),
            ...Ye
          ], this;
        }
        flatten(oe = 0, be = -1) {
          return this.clone().flatten_(oe, be);
        }
        view(...oe) {
          let be = -1;
          for (let Oe = 0; Oe < oe.length; ++Oe)
            if (oe[Oe] === -1) {
              if (be !== -1)
                throw new Error("Only one dimension can be inferred");
              be = Oe;
            }
          const Ee = this.data;
          if (be !== -1) {
            const Oe = oe.reduce((Ye, We, ot) => ot !== be ? Ye * We : Ye, 1);
            oe[be] = Ee.length / Oe;
          }
          return new w(this.type, Ee, oe);
        }
        neg_() {
          const oe = this.data;
          for (let be = 0; be < oe.length; ++be)
            oe[be] = -oe[be];
          return this;
        }
        neg() {
          return this.clone().neg_();
        }
        gt(oe) {
          const be = new Uint8Array(this.data.length), Ee = this.data;
          for (let Oe = 0; Oe < Ee.length; ++Oe)
            be[Oe] = Ee[Oe] > oe ? 1 : 0;
          return new w("bool", be, this.dims);
        }
        lt(oe) {
          const be = new Uint8Array(this.data.length), Ee = this.data;
          for (let Oe = 0; Oe < Ee.length; ++Oe)
            be[Oe] = Ee[Oe] < oe ? 1 : 0;
          return new w("bool", be, this.dims);
        }
        clamp_(oe, be) {
          const Ee = this.data;
          for (let Oe = 0; Oe < Ee.length; ++Oe)
            Ee[Oe] = Math.min(Math.max(Ee[Oe], oe), be);
          return this;
        }
        clamp(oe, be) {
          return this.clone().clamp_(oe, be);
        }
        round_() {
          const oe = this.data;
          for (let be = 0; be < oe.length; ++be)
            oe[be] = Math.round(oe[be]);
          return this;
        }
        round() {
          return this.clone().round_();
        }
        mean(oe = null, be = false) {
          return j(this, oe, be);
        }
        min(oe = null, be = false) {
          if (oe === null) {
            const We = (0, s.min)(this.data)[0];
            return new w(this.type, [
              We
            ], []);
          }
          const [Ee, Oe, Ye] = N((We, ot) => Math.min(We, ot), this, oe, be, 1 / 0);
          return new w(Ee, Oe, Ye);
        }
        max(oe = null, be = false) {
          if (oe === null) {
            const We = (0, s.max)(this.data)[0];
            return new w(this.type, [
              We
            ], []);
          }
          const [Ee, Oe, Ye] = N((We, ot) => Math.max(We, ot), this, oe, be, -1 / 0);
          return new w(Ee, Oe, Ye);
        }
        argmin(oe = null, be = false) {
          if (oe !== null)
            throw new Error("`dim !== null` not yet implemented.");
          const Ee = (0, s.min)(this.data)[1];
          return new w("int64", [
            BigInt(Ee)
          ], []);
        }
        argmax(oe = null, be = false) {
          if (oe !== null)
            throw new Error("`dim !== null` not yet implemented.");
          const Ee = (0, s.max)(this.data)[1];
          return new w("int64", [
            BigInt(Ee)
          ], []);
        }
        to(oe) {
          if (this.type === oe)
            return this;
          if (!d.hasOwnProperty(oe))
            throw new Error(`Unsupported type: ${oe}`);
          let be;
          const Ee = [
            "int64",
            "uint64"
          ].includes(this.type), Oe = [
            "int64",
            "uint64"
          ].includes(oe);
          return Ee && !Oe ? be = Number : !Ee && Oe && (be = BigInt), new w(oe, d[oe].from(this.data, be), this.dims);
        }
      }
      function g(pe, oe) {
        const be = pe.length, Ee = oe.reduce((Ye, We) => Ye * We);
        if (be !== Ee)
          throw Error(`cannot reshape array of size ${be} into shape (${oe})`);
        let Oe = pe;
        for (let Ye = oe.length - 1; Ye >= 0; Ye--)
          Oe = Oe.reduce((We, ot) => {
            let vt = We[We.length - 1];
            return vt.length < oe[Ye] ? vt.push(ot) : We.push([
              ot
            ]), We;
          }, [
            []
          ]);
        return Oe[0];
      }
      function _(pe, oe) {
        const [be, Ee] = (0, s.permute_data)(pe.data, pe.dims, oe);
        return new w(pe.type, be, Ee);
      }
      function h(pe, [oe, be], Ee = "bilinear", Oe = false) {
        const Ye = pe.dims.at(-3) ?? 1, We = pe.dims.at(-2), ot = pe.dims.at(-1);
        let vt = (0, s.interpolate_data)(pe.data, [
          Ye,
          We,
          ot
        ], [
          oe,
          be
        ], Ee, Oe);
        return new w(pe.type, vt, [
          Ye,
          oe,
          be
        ]);
      }
      async function r(pe, { size: oe = null, mode: be = "bilinear" } = {}) {
        if (pe.dims.length !== 4)
          throw new Error("`interpolate_4d` currently only supports 4D input.");
        if (!oe)
          throw new Error("`interpolate_4d` requires a `size` argument.");
        let Ee;
        if (oe.length === 2)
          Ee = [
            ...pe.dims.slice(0, 2),
            ...oe
          ];
        else if (oe.length === 3)
          Ee = [
            pe.dims[0],
            ...oe
          ];
        else if (oe.length === 4)
          Ee = oe;
        else
          throw new Error("`size` must be of length 2, 3, or 4.");
        let Oe;
        if (be === "nearest")
          Oe = await f.TensorOpRegistry.nearest_interpolate_4d;
        else if (be === "bilinear")
          Oe = await f.TensorOpRegistry.bilinear_interpolate_4d;
        else if (be === "bicubic")
          Oe = await f.TensorOpRegistry.bicubic_interpolate_4d;
        else
          throw new Error(`Unsupported mode: ${be}`);
        const Ye = new w("int64", new BigInt64Array(Ee.map(BigInt)), [
          Ee.length
        ]);
        return await Oe({
          x: pe,
          s: Ye
        });
      }
      async function n(pe, oe) {
        return await (await f.TensorOpRegistry.matmul)({
          a: pe,
          b: oe
        });
      }
      async function u(pe, oe) {
        return await (await f.TensorOpRegistry.rfft)({
          x: pe,
          a: oe
        });
      }
      async function p(pe, oe) {
        const be = await f.TensorOpRegistry.top_k;
        return oe == null ? oe = pe.dims.at(-1) : oe = Math.min(oe, pe.dims.at(-1)), await be({
          x: pe,
          k: new w("int64", [
            BigInt(oe)
          ], [
            1
          ])
        });
      }
      const M = (pe) => new w("int64", pe, [
        pe.length
      ]);
      async function P(pe, oe, be, Ee, Oe) {
        return await (await f.TensorOpRegistry.slice)({
          x: pe,
          s: M(oe),
          e: M(be),
          a: M(Ee),
          t: M(Oe ?? new Array(Ee.length).fill(1))
        });
      }
      function E(pe, oe) {
        const be = pe.data, Ee = oe.data, Oe = [
          pe.dims[0],
          pe.dims[2]
        ], Ye = new be.constructor(Oe[0] * Oe[1]), [We, ot, vt] = pe.dims;
        let qe = 0;
        for (let _e = 0; _e < We; ++_e) {
          const le = _e * vt * ot;
          for (let De = 0; De < vt; ++De) {
            let Be = 0, Ze = 0;
            const rt = _e * ot, je = le + De;
            for (let Ge = 0; Ge < ot; ++Ge) {
              const lt = Number(Ee[rt + Ge]);
              Ze += lt, Be += be[je + Ge * vt] * lt;
            }
            const it = Be / Ze;
            Ye[qe++] = it;
          }
        }
        return new w(pe.type, Ye, Oe);
      }
      function k(pe, oe, { eps: be = 1e-5 } = {}) {
        if (pe.dims.length !== 2)
          throw new Error("`layer_norm` currently only supports 2D input.");
        const [Ee, Oe] = pe.dims;
        if (oe.length !== 1 && oe[0] !== Oe)
          throw new Error("`normalized_shape` must be a 1D array with shape `[input.dims[1]]`.");
        const [Ye, We] = R(pe, 1, 0, true), ot = Ye.data, vt = We.data, qe = pe.data, _e = new qe.constructor(qe.length);
        for (let le = 0; le < Ee; ++le) {
          const De = le * Oe;
          for (let Be = 0; Be < Oe; ++Be) {
            const Ze = De + Be;
            _e[Ze] = (qe[Ze] - vt[le]) / (ot[le] + be);
          }
        }
        return new w(pe.type, _e, pe.dims);
      }
      function $(pe, oe) {
        return pe = pe.slice(), oe === null ? pe = pe.filter((be) => be !== 1) : typeof oe == "number" ? pe[oe] === 1 && pe.splice(oe, 1) : Array.isArray(oe) && (pe = pe.filter((be, Ee) => be !== 1 || !oe.includes(Ee))), pe;
      }
      function A(pe, oe) {
        return oe = C(oe, pe.length + 1), pe = pe.slice(), pe.splice(oe, 0, 1), pe;
      }
      function C(pe, oe, be = null, Ee = true) {
        if (pe < -oe || pe >= oe) {
          if (Ee)
            throw new Error(`IndexError: index ${pe} is out of bounds for dimension${be === null ? "" : " " + be} with size ${oe}`);
          return pe < -oe ? 0 : oe;
        }
        return pe < 0 && (pe = (pe % oe + oe) % oe), pe;
      }
      function F(pe, oe = 0) {
        oe = C(oe, pe[0].dims.length);
        const be = pe[0].dims.slice();
        be[oe] = pe.reduce((We, ot) => We + ot.dims[oe], 0);
        const Ee = be.reduce((We, ot) => We * ot, 1), Oe = new pe[0].data.constructor(Ee), Ye = pe[0].type;
        if (oe === 0) {
          let We = 0;
          for (const ot of pe) {
            const vt = ot.data;
            Oe.set(vt, We), We += vt.length;
          }
        } else {
          let We = 0;
          for (let ot = 0; ot < pe.length; ++ot) {
            const { data: vt, dims: qe } = pe[ot];
            for (let _e = 0; _e < vt.length; ++_e) {
              let le = 0;
              for (let De = qe.length - 1, Be = _e, Ze = 1; De >= 0; --De) {
                const rt = qe[De];
                let je = Be % rt;
                De === oe && (je += We), le += je * Ze, Ze *= be[De], Be = Math.floor(Be / rt);
              }
              Oe[le] = vt[_e];
            }
            We += qe[oe];
          }
        }
        return new w(Ye, Oe, be);
      }
      function D(pe, oe = 0) {
        return F(pe.map((be) => be.unsqueeze(oe)), oe);
      }
      function N(pe, oe, be = null, Ee = false, Oe = null) {
        const Ye = oe.data, We = oe.dims;
        be = C(be, We.length);
        const ot = We.slice();
        ot[be] = 1;
        const vt = new Ye.constructor(Ye.length / We[be]);
        Oe !== null && vt.fill(Oe);
        for (let qe = 0; qe < Ye.length; ++qe) {
          let _e = 0;
          for (let le = We.length - 1, De = qe, Be = 1; le >= 0; --le) {
            const Ze = We[le];
            if (le !== be) {
              const rt = De % Ze;
              _e += rt * Be, Be *= ot[le];
            }
            De = Math.floor(De / Ze);
          }
          vt[_e] = pe(vt[_e], Ye[qe], qe, _e);
        }
        return Ee || ot.splice(be, 1), [
          oe.type,
          vt,
          ot
        ];
      }
      function R(pe, oe = null, be = 1, Ee = false) {
        const Oe = pe.data, Ye = pe.dims;
        if (oe === null) {
          const Be = Oe.reduce((it, Ge) => it + Ge, 0) / Oe.length, Ze = Math.sqrt(Oe.reduce((it, Ge) => it + (Ge - Be) ** 2, 0) / (Oe.length - be)), rt = new w(pe.type, [
            Be
          ], []);
          return [
            new w(pe.type, [
              Ze
            ], []),
            rt
          ];
        }
        oe = C(oe, Ye.length);
        const We = j(pe, oe, Ee), ot = We.data, [vt, qe, _e] = N((De, Be, Ze, rt) => De + (Be - ot[rt]) ** 2, pe, oe, Ee);
        for (let De = 0; De < qe.length; ++De)
          qe[De] = Math.sqrt(qe[De] / (Ye[oe] - be));
        return [
          new w(vt, qe, _e),
          We
        ];
      }
      function j(pe, oe = null, be = false) {
        const Ee = pe.dims, Oe = pe.data;
        if (oe === null) {
          const vt = Oe.reduce((qe, _e) => qe + _e, 0);
          return new w(pe.type, [
            vt / Oe.length
          ], []);
        }
        oe = C(oe, Ee.length);
        const [Ye, We, ot] = N((vt, qe) => vt + qe, pe, oe, be);
        if (Ee[oe] !== 1)
          for (let vt = 0; vt < We.length; ++vt)
            We[vt] /= Ee[oe];
        return new w(Ye, We, ot);
      }
      function Z(pe) {
        const oe = new Array(pe.length);
        for (let be = pe.length - 1, Ee = 1; be >= 0; --be)
          oe[be] = Ee, Ee *= pe[be];
        return oe;
      }
      function te(pe, oe, be, Ee) {
        const Oe = pe.reduce((Ye, We) => Ye * We, 1);
        return new w(be, new Ee(Oe).fill(oe), pe);
      }
      function J(pe, oe) {
        let be, Ee;
        if (typeof oe == "number")
          be = "float32", Ee = Float32Array;
        else if (typeof oe == "bigint")
          be = "int64", Ee = BigInt64Array;
        else if (typeof oe == "boolean")
          be = "bool", Ee = Uint8Array;
        else
          throw new Error(`Unsupported data type: ${typeof oe}`);
        return te(pe, oe, be, Ee);
      }
      function G(pe, oe) {
        return J(pe.dims, oe);
      }
      function H(pe) {
        return te(pe, 1n, "int64", BigInt64Array);
      }
      function U(pe) {
        return H(pe.dims);
      }
      function Q(pe) {
        return te(pe, 0n, "int64", BigInt64Array);
      }
      function he(pe) {
        return Q(pe.dims);
      }
      function fe(pe) {
        const oe = pe.reduce((be, Ee) => be * Ee, 1);
        return new w("float32", Float32Array.from({
          length: oe
        }, () => Math.random()), pe);
      }
      function Me(pe, oe) {
        if (pe.dims.length !== 2)
          throw new Error("The tensor must have 2 dimensions");
        if (pe.dims.at(-1) % 8 !== 0)
          throw new Error("The last dimension of the tensor must be a multiple of 8");
        if (![
          "binary",
          "ubinary"
        ].includes(oe))
          throw new Error("The precision must be either 'binary' or 'ubinary'");
        const be = oe === "binary", Ee = be ? "int8" : "uint8", Oe = be ? Int8Array : Uint8Array, Ye = pe.data, We = new Oe(Ye.length / 8);
        for (let ot = 0; ot < Ye.length; ++ot) {
          const vt = Ye[ot] > 0 ? 1 : 0, qe = Math.floor(ot / 8), _e = ot % 8;
          We[qe] |= vt << 7 - _e, be && _e === 0 && (We[qe] -= 128);
        }
        return new w(Ee, We, [
          pe.dims[0],
          pe.dims[1] / 8
        ]);
      }
    },
    "./src/utils/video.js": (i, e, t) => {
      t.r(e), t.d(e, {
        RawVideo: () => d,
        RawVideoFrame: () => f,
        load_video: () => w
      });
      var s = t("./src/utils/image.js"), l = t("./src/env.js");
      class f {
        constructor(_, h) {
          this.image = _, this.timestamp = h;
        }
      }
      class d {
        constructor(_, h) {
          _.length > 0 && _[0] instanceof s.RawImage && (_ = _.map((r, n) => new f(r, (n + 1) / (_.length + 1) * h))), this.frames = _, this.duration = h;
        }
        get width() {
          return this.frames[0].image.width;
        }
        get height() {
          return this.frames[0].image.height;
        }
        get fps() {
          return this.frames.length / this.duration;
        }
      }
      async function w(g, { num_frames: _ = null, fps: h = null } = {}) {
        if (!l.apis.IS_BROWSER_ENV)
          throw new Error("`load_video` is currently only supported in browser environments.");
        if (_ == null && h == null)
          throw new Error("Either num_frames or fps must be provided.");
        const r = [], n = document.createElement("video");
        if (n.crossOrigin = "anonymous", n.muted = true, typeof g == "string")
          n.src = g;
        else if (g instanceof Blob)
          n.src = URL.createObjectURL(g);
        else if (g instanceof HTMLVideoElement)
          n.src = g.src;
        else
          throw new Error("Invalid URL or video element provided.");
        if (await new Promise(($) => n.onloadedmetadata = $), n.seekable.start(0) === n.seekable.end(0)) {
          const A = await (await fetch(n.src)).blob();
          n.src = URL.createObjectURL(A), await new Promise((C) => n.onloadedmetadata = C);
        }
        const u = n.duration;
        let p, M;
        _ != null ? (p = _, M = _ === 1 ? 0 : u / (_ - 1)) : (M = 1 / h, p = Math.floor(u / M));
        let P = [];
        for (let $ = 0; $ < p; ++$)
          P.push(_ === 1 ? u / 2 : $ * M);
        const E = document.createElement("canvas");
        E.width = n.videoWidth, E.height = n.videoHeight;
        const k = E.getContext("2d", {
          willReadFrequently: true
        });
        for (const $ of P) {
          n.currentTime = $, await new Promise((D) => {
            n.onseeked = D;
          }), k.drawImage(n, 0, 0, E.width, E.height);
          const A = k.getImageData(0, 0, E.width, E.height), C = new s.RawImage(A.data, E.width, E.height, 4), F = new f(C, $);
          r.push(F);
        }
        return n.remove(), new d(r, u);
      }
    }
  }, __webpack_module_cache__ = {};
  function __webpack_require__(i) {
    var e = __webpack_module_cache__[i];
    if (e !== void 0)
      return e.exports;
    var t = __webpack_module_cache__[i] = {
      exports: {}
    };
    return __webpack_modules__[i](t, t.exports, __webpack_require__), t.exports;
  }
  (() => {
    var i = Object.getPrototypeOf ? (t) => Object.getPrototypeOf(t) : (t) => t.__proto__, e;
    __webpack_require__.t = function(t, s) {
      if (s & 1 && (t = this(t)), s & 8 || typeof t == "object" && t && (s & 4 && t.__esModule || s & 16 && typeof t.then == "function"))
        return t;
      var l = /* @__PURE__ */ Object.create(null);
      __webpack_require__.r(l);
      var f = {};
      e = e || [
        null,
        i({}),
        i([]),
        i(i)
      ];
      for (var d = s & 2 && t; typeof d == "object" && !~e.indexOf(d); d = i(d))
        Object.getOwnPropertyNames(d).forEach((w) => f[w] = () => t[w]);
      return f.default = () => t, __webpack_require__.d(l, f), l;
    };
  })();
  __webpack_require__.d = (i, e) => {
    for (var t in e)
      __webpack_require__.o(e, t) && !__webpack_require__.o(i, t) && Object.defineProperty(i, t, {
        enumerable: true,
        get: e[t]
      });
  };
  __webpack_require__.o = (i, e) => Object.prototype.hasOwnProperty.call(i, e);
  __webpack_require__.r = (i) => {
    typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(i, Symbol.toStringTag, {
      value: "Module"
    }), Object.defineProperty(i, "__esModule", {
      value: true
    });
  };
  var __webpack_exports__ = {};
  (() => {
    __webpack_require__.r(__webpack_exports__), __webpack_require__.d(__webpack_exports__, {
      ASTFeatureExtractor: () => r.ASTFeatureExtractor,
      ASTForAudioClassification: () => t.ASTForAudioClassification,
      ASTModel: () => t.ASTModel,
      ASTPreTrainedModel: () => t.ASTPreTrainedModel,
      AlbertForMaskedLM: () => t.AlbertForMaskedLM,
      AlbertForQuestionAnswering: () => t.AlbertForQuestionAnswering,
      AlbertForSequenceClassification: () => t.AlbertForSequenceClassification,
      AlbertModel: () => t.AlbertModel,
      AlbertPreTrainedModel: () => t.AlbertPreTrainedModel,
      AlbertTokenizer: () => s.AlbertTokenizer,
      ArceeForCausalLM: () => t.ArceeForCausalLM,
      ArceeModel: () => t.ArceeModel,
      ArceePreTrainedModel: () => t.ArceePreTrainedModel,
      AudioClassificationPipeline: () => e.AudioClassificationPipeline,
      AutoConfig: () => l.AutoConfig,
      AutoFeatureExtractor: () => n.AutoFeatureExtractor,
      AutoImageProcessor: () => M.AutoImageProcessor,
      AutoModel: () => t.AutoModel,
      AutoModelForAudioClassification: () => t.AutoModelForAudioClassification,
      AutoModelForAudioFrameClassification: () => t.AutoModelForAudioFrameClassification,
      AutoModelForAudioTextToText: () => t.AutoModelForAudioTextToText,
      AutoModelForCTC: () => t.AutoModelForCTC,
      AutoModelForCausalLM: () => t.AutoModelForCausalLM,
      AutoModelForDepthEstimation: () => t.AutoModelForDepthEstimation,
      AutoModelForDocumentQuestionAnswering: () => t.AutoModelForDocumentQuestionAnswering,
      AutoModelForImageClassification: () => t.AutoModelForImageClassification,
      AutoModelForImageFeatureExtraction: () => t.AutoModelForImageFeatureExtraction,
      AutoModelForImageMatting: () => t.AutoModelForImageMatting,
      AutoModelForImageSegmentation: () => t.AutoModelForImageSegmentation,
      AutoModelForImageTextToText: () => t.AutoModelForImageTextToText,
      AutoModelForImageToImage: () => t.AutoModelForImageToImage,
      AutoModelForMaskGeneration: () => t.AutoModelForMaskGeneration,
      AutoModelForMaskedLM: () => t.AutoModelForMaskedLM,
      AutoModelForNormalEstimation: () => t.AutoModelForNormalEstimation,
      AutoModelForObjectDetection: () => t.AutoModelForObjectDetection,
      AutoModelForPoseEstimation: () => t.AutoModelForPoseEstimation,
      AutoModelForQuestionAnswering: () => t.AutoModelForQuestionAnswering,
      AutoModelForSemanticSegmentation: () => t.AutoModelForSemanticSegmentation,
      AutoModelForSeq2SeqLM: () => t.AutoModelForSeq2SeqLM,
      AutoModelForSequenceClassification: () => t.AutoModelForSequenceClassification,
      AutoModelForSpeechSeq2Seq: () => t.AutoModelForSpeechSeq2Seq,
      AutoModelForTextToSpectrogram: () => t.AutoModelForTextToSpectrogram,
      AutoModelForTextToWaveform: () => t.AutoModelForTextToWaveform,
      AutoModelForTokenClassification: () => t.AutoModelForTokenClassification,
      AutoModelForUniversalSegmentation: () => t.AutoModelForUniversalSegmentation,
      AutoModelForVision2Seq: () => t.AutoModelForVision2Seq,
      AutoModelForXVector: () => t.AutoModelForXVector,
      AutoModelForZeroShotObjectDetection: () => t.AutoModelForZeroShotObjectDetection,
      AutoProcessor: () => k.AutoProcessor,
      AutoTokenizer: () => s.AutoTokenizer,
      AutomaticSpeechRecognitionPipeline: () => e.AutomaticSpeechRecognitionPipeline,
      BackgroundRemovalPipeline: () => e.BackgroundRemovalPipeline,
      BartForConditionalGeneration: () => t.BartForConditionalGeneration,
      BartForSequenceClassification: () => t.BartForSequenceClassification,
      BartModel: () => t.BartModel,
      BartPretrainedModel: () => t.BartPretrainedModel,
      BartTokenizer: () => s.BartTokenizer,
      BaseModelOutput: () => t.BaseModelOutput,
      BaseStreamer: () => $.BaseStreamer,
      BeitFeatureExtractor: () => p.BeitFeatureExtractor,
      BeitForImageClassification: () => t.BeitForImageClassification,
      BeitModel: () => t.BeitModel,
      BeitPreTrainedModel: () => t.BeitPreTrainedModel,
      BertForMaskedLM: () => t.BertForMaskedLM,
      BertForQuestionAnswering: () => t.BertForQuestionAnswering,
      BertForSequenceClassification: () => t.BertForSequenceClassification,
      BertForTokenClassification: () => t.BertForTokenClassification,
      BertModel: () => t.BertModel,
      BertPreTrainedModel: () => t.BertPreTrainedModel,
      BertTokenizer: () => s.BertTokenizer,
      BitImageProcessor: () => p.BitImageProcessor,
      BlenderbotForConditionalGeneration: () => t.BlenderbotForConditionalGeneration,
      BlenderbotModel: () => t.BlenderbotModel,
      BlenderbotPreTrainedModel: () => t.BlenderbotPreTrainedModel,
      BlenderbotSmallForConditionalGeneration: () => t.BlenderbotSmallForConditionalGeneration,
      BlenderbotSmallModel: () => t.BlenderbotSmallModel,
      BlenderbotSmallPreTrainedModel: () => t.BlenderbotSmallPreTrainedModel,
      BlenderbotSmallTokenizer: () => s.BlenderbotSmallTokenizer,
      BlenderbotTokenizer: () => s.BlenderbotTokenizer,
      BloomForCausalLM: () => t.BloomForCausalLM,
      BloomModel: () => t.BloomModel,
      BloomPreTrainedModel: () => t.BloomPreTrainedModel,
      BloomTokenizer: () => s.BloomTokenizer,
      CLIPFeatureExtractor: () => p.CLIPFeatureExtractor,
      CLIPImageProcessor: () => p.CLIPImageProcessor,
      CLIPModel: () => t.CLIPModel,
      CLIPPreTrainedModel: () => t.CLIPPreTrainedModel,
      CLIPSegForImageSegmentation: () => t.CLIPSegForImageSegmentation,
      CLIPSegModel: () => t.CLIPSegModel,
      CLIPSegPreTrainedModel: () => t.CLIPSegPreTrainedModel,
      CLIPTextModel: () => t.CLIPTextModel,
      CLIPTextModelWithProjection: () => t.CLIPTextModelWithProjection,
      CLIPTokenizer: () => s.CLIPTokenizer,
      CLIPVisionModel: () => t.CLIPVisionModel,
      CLIPVisionModelWithProjection: () => t.CLIPVisionModelWithProjection,
      CamembertForMaskedLM: () => t.CamembertForMaskedLM,
      CamembertForQuestionAnswering: () => t.CamembertForQuestionAnswering,
      CamembertForSequenceClassification: () => t.CamembertForSequenceClassification,
      CamembertForTokenClassification: () => t.CamembertForTokenClassification,
      CamembertModel: () => t.CamembertModel,
      CamembertPreTrainedModel: () => t.CamembertPreTrainedModel,
      CamembertTokenizer: () => s.CamembertTokenizer,
      CausalLMOutput: () => t.CausalLMOutput,
      CausalLMOutputWithPast: () => t.CausalLMOutputWithPast,
      ChineseCLIPFeatureExtractor: () => p.ChineseCLIPFeatureExtractor,
      ChineseCLIPModel: () => t.ChineseCLIPModel,
      ChineseCLIPPreTrainedModel: () => t.ChineseCLIPPreTrainedModel,
      ClapAudioModelWithProjection: () => t.ClapAudioModelWithProjection,
      ClapFeatureExtractor: () => r.ClapFeatureExtractor,
      ClapModel: () => t.ClapModel,
      ClapPreTrainedModel: () => t.ClapPreTrainedModel,
      ClapTextModelWithProjection: () => t.ClapTextModelWithProjection,
      ClassifierFreeGuidanceLogitsProcessor: () => C.ClassifierFreeGuidanceLogitsProcessor,
      CodeGenForCausalLM: () => t.CodeGenForCausalLM,
      CodeGenModel: () => t.CodeGenModel,
      CodeGenPreTrainedModel: () => t.CodeGenPreTrainedModel,
      CodeGenTokenizer: () => s.CodeGenTokenizer,
      CodeLlamaTokenizer: () => s.CodeLlamaTokenizer,
      CohereForCausalLM: () => t.CohereForCausalLM,
      CohereModel: () => t.CohereModel,
      CoherePreTrainedModel: () => t.CoherePreTrainedModel,
      CohereTokenizer: () => s.CohereTokenizer,
      ConvBertForMaskedLM: () => t.ConvBertForMaskedLM,
      ConvBertForQuestionAnswering: () => t.ConvBertForQuestionAnswering,
      ConvBertForSequenceClassification: () => t.ConvBertForSequenceClassification,
      ConvBertForTokenClassification: () => t.ConvBertForTokenClassification,
      ConvBertModel: () => t.ConvBertModel,
      ConvBertPreTrainedModel: () => t.ConvBertPreTrainedModel,
      ConvBertTokenizer: () => s.ConvBertTokenizer,
      ConvNextFeatureExtractor: () => p.ConvNextFeatureExtractor,
      ConvNextForImageClassification: () => t.ConvNextForImageClassification,
      ConvNextImageProcessor: () => p.ConvNextImageProcessor,
      ConvNextModel: () => t.ConvNextModel,
      ConvNextPreTrainedModel: () => t.ConvNextPreTrainedModel,
      ConvNextV2ForImageClassification: () => t.ConvNextV2ForImageClassification,
      ConvNextV2Model: () => t.ConvNextV2Model,
      ConvNextV2PreTrainedModel: () => t.ConvNextV2PreTrainedModel,
      DFineForObjectDetection: () => t.DFineForObjectDetection,
      DFineModel: () => t.DFineModel,
      DFinePreTrainedModel: () => t.DFinePreTrainedModel,
      DINOv3ConvNextModel: () => t.DINOv3ConvNextModel,
      DINOv3ConvNextPreTrainedModel: () => t.DINOv3ConvNextPreTrainedModel,
      DINOv3ViTImageProcessor: () => p.DINOv3ViTImageProcessor,
      DINOv3ViTModel: () => t.DINOv3ViTModel,
      DINOv3ViTPreTrainedModel: () => t.DINOv3ViTPreTrainedModel,
      DPTFeatureExtractor: () => p.DPTFeatureExtractor,
      DPTForDepthEstimation: () => t.DPTForDepthEstimation,
      DPTImageProcessor: () => p.DPTImageProcessor,
      DPTModel: () => t.DPTModel,
      DPTPreTrainedModel: () => t.DPTPreTrainedModel,
      DacDecoderModel: () => t.DacDecoderModel,
      DacDecoderOutput: () => t.DacDecoderOutput,
      DacEncoderModel: () => t.DacEncoderModel,
      DacEncoderOutput: () => t.DacEncoderOutput,
      DacFeatureExtractor: () => r.DacFeatureExtractor,
      DacModel: () => t.DacModel,
      DacPreTrainedModel: () => t.DacPreTrainedModel,
      DataTypeMap: () => g.DataTypeMap,
      DebertaForMaskedLM: () => t.DebertaForMaskedLM,
      DebertaForQuestionAnswering: () => t.DebertaForQuestionAnswering,
      DebertaForSequenceClassification: () => t.DebertaForSequenceClassification,
      DebertaForTokenClassification: () => t.DebertaForTokenClassification,
      DebertaModel: () => t.DebertaModel,
      DebertaPreTrainedModel: () => t.DebertaPreTrainedModel,
      DebertaTokenizer: () => s.DebertaTokenizer,
      DebertaV2ForMaskedLM: () => t.DebertaV2ForMaskedLM,
      DebertaV2ForQuestionAnswering: () => t.DebertaV2ForQuestionAnswering,
      DebertaV2ForSequenceClassification: () => t.DebertaV2ForSequenceClassification,
      DebertaV2ForTokenClassification: () => t.DebertaV2ForTokenClassification,
      DebertaV2Model: () => t.DebertaV2Model,
      DebertaV2PreTrainedModel: () => t.DebertaV2PreTrainedModel,
      DebertaV2Tokenizer: () => s.DebertaV2Tokenizer,
      DecisionTransformerModel: () => t.DecisionTransformerModel,
      DecisionTransformerPreTrainedModel: () => t.DecisionTransformerPreTrainedModel,
      DeiTFeatureExtractor: () => p.DeiTFeatureExtractor,
      DeiTForImageClassification: () => t.DeiTForImageClassification,
      DeiTImageProcessor: () => p.DeiTImageProcessor,
      DeiTModel: () => t.DeiTModel,
      DeiTPreTrainedModel: () => t.DeiTPreTrainedModel,
      DepthAnythingForDepthEstimation: () => t.DepthAnythingForDepthEstimation,
      DepthAnythingPreTrainedModel: () => t.DepthAnythingPreTrainedModel,
      DepthEstimationPipeline: () => e.DepthEstimationPipeline,
      DepthProForDepthEstimation: () => t.DepthProForDepthEstimation,
      DepthProPreTrainedModel: () => t.DepthProPreTrainedModel,
      DetrFeatureExtractor: () => p.DetrFeatureExtractor,
      DetrForObjectDetection: () => t.DetrForObjectDetection,
      DetrForSegmentation: () => t.DetrForSegmentation,
      DetrImageProcessor: () => p.DetrImageProcessor,
      DetrModel: () => t.DetrModel,
      DetrObjectDetectionOutput: () => t.DetrObjectDetectionOutput,
      DetrPreTrainedModel: () => t.DetrPreTrainedModel,
      DetrSegmentationOutput: () => t.DetrSegmentationOutput,
      Dinov2ForImageClassification: () => t.Dinov2ForImageClassification,
      Dinov2Model: () => t.Dinov2Model,
      Dinov2PreTrainedModel: () => t.Dinov2PreTrainedModel,
      Dinov2WithRegistersForImageClassification: () => t.Dinov2WithRegistersForImageClassification,
      Dinov2WithRegistersModel: () => t.Dinov2WithRegistersModel,
      Dinov2WithRegistersPreTrainedModel: () => t.Dinov2WithRegistersPreTrainedModel,
      DistilBertForMaskedLM: () => t.DistilBertForMaskedLM,
      DistilBertForQuestionAnswering: () => t.DistilBertForQuestionAnswering,
      DistilBertForSequenceClassification: () => t.DistilBertForSequenceClassification,
      DistilBertForTokenClassification: () => t.DistilBertForTokenClassification,
      DistilBertModel: () => t.DistilBertModel,
      DistilBertPreTrainedModel: () => t.DistilBertPreTrainedModel,
      DistilBertTokenizer: () => s.DistilBertTokenizer,
      DocumentQuestionAnsweringPipeline: () => e.DocumentQuestionAnsweringPipeline,
      DonutFeatureExtractor: () => p.DonutFeatureExtractor,
      DonutImageProcessor: () => p.DonutImageProcessor,
      DonutSwinModel: () => t.DonutSwinModel,
      DonutSwinPreTrainedModel: () => t.DonutSwinPreTrainedModel,
      EfficientNetForImageClassification: () => t.EfficientNetForImageClassification,
      EfficientNetImageProcessor: () => p.EfficientNetImageProcessor,
      EfficientNetModel: () => t.EfficientNetModel,
      EfficientNetPreTrainedModel: () => t.EfficientNetPreTrainedModel,
      ElectraForMaskedLM: () => t.ElectraForMaskedLM,
      ElectraForQuestionAnswering: () => t.ElectraForQuestionAnswering,
      ElectraForSequenceClassification: () => t.ElectraForSequenceClassification,
      ElectraForTokenClassification: () => t.ElectraForTokenClassification,
      ElectraModel: () => t.ElectraModel,
      ElectraPreTrainedModel: () => t.ElectraPreTrainedModel,
      ElectraTokenizer: () => s.ElectraTokenizer,
      EncodecFeatureExtractor: () => r.EncodecFeatureExtractor,
      EosTokenCriteria: () => A.EosTokenCriteria,
      Ernie4_5_ForCausalLM: () => t.Ernie4_5_ForCausalLM,
      Ernie4_5_Model: () => t.Ernie4_5_Model,
      Ernie4_5_PretrainedModel: () => t.Ernie4_5_PretrainedModel,
      Ernie4_5_Tokenizer: () => s.Ernie4_5_Tokenizer,
      EsmForMaskedLM: () => t.EsmForMaskedLM,
      EsmForSequenceClassification: () => t.EsmForSequenceClassification,
      EsmForTokenClassification: () => t.EsmForTokenClassification,
      EsmModel: () => t.EsmModel,
      EsmPreTrainedModel: () => t.EsmPreTrainedModel,
      EsmTokenizer: () => s.EsmTokenizer,
      ExaoneForCausalLM: () => t.ExaoneForCausalLM,
      ExaoneModel: () => t.ExaoneModel,
      ExaonePreTrainedModel: () => t.ExaonePreTrainedModel,
      FFT: () => _.FFT,
      FalconForCausalLM: () => t.FalconForCausalLM,
      FalconModel: () => t.FalconModel,
      FalconPreTrainedModel: () => t.FalconPreTrainedModel,
      FalconTokenizer: () => s.FalconTokenizer,
      FastViTForImageClassification: () => t.FastViTForImageClassification,
      FastViTModel: () => t.FastViTModel,
      FastViTPreTrainedModel: () => t.FastViTPreTrainedModel,
      FeatureExtractionPipeline: () => e.FeatureExtractionPipeline,
      FeatureExtractor: () => h.FeatureExtractor,
      FillMaskPipeline: () => e.FillMaskPipeline,
      Florence2ForConditionalGeneration: () => t.Florence2ForConditionalGeneration,
      Florence2PreTrainedModel: () => t.Florence2PreTrainedModel,
      Florence2Processor: () => E.Florence2Processor,
      ForcedBOSTokenLogitsProcessor: () => C.ForcedBOSTokenLogitsProcessor,
      ForcedEOSTokenLogitsProcessor: () => C.ForcedEOSTokenLogitsProcessor,
      GLPNFeatureExtractor: () => p.GLPNFeatureExtractor,
      GLPNForDepthEstimation: () => t.GLPNForDepthEstimation,
      GLPNModel: () => t.GLPNModel,
      GLPNPreTrainedModel: () => t.GLPNPreTrainedModel,
      GPT2LMHeadModel: () => t.GPT2LMHeadModel,
      GPT2Model: () => t.GPT2Model,
      GPT2PreTrainedModel: () => t.GPT2PreTrainedModel,
      GPT2Tokenizer: () => s.GPT2Tokenizer,
      GPTBigCodeForCausalLM: () => t.GPTBigCodeForCausalLM,
      GPTBigCodeModel: () => t.GPTBigCodeModel,
      GPTBigCodePreTrainedModel: () => t.GPTBigCodePreTrainedModel,
      GPTJForCausalLM: () => t.GPTJForCausalLM,
      GPTJModel: () => t.GPTJModel,
      GPTJPreTrainedModel: () => t.GPTJPreTrainedModel,
      GPTNeoForCausalLM: () => t.GPTNeoForCausalLM,
      GPTNeoModel: () => t.GPTNeoModel,
      GPTNeoPreTrainedModel: () => t.GPTNeoPreTrainedModel,
      GPTNeoXForCausalLM: () => t.GPTNeoXForCausalLM,
      GPTNeoXModel: () => t.GPTNeoXModel,
      GPTNeoXPreTrainedModel: () => t.GPTNeoXPreTrainedModel,
      GPTNeoXTokenizer: () => s.GPTNeoXTokenizer,
      Gemma2ForCausalLM: () => t.Gemma2ForCausalLM,
      Gemma2Model: () => t.Gemma2Model,
      Gemma2PreTrainedModel: () => t.Gemma2PreTrainedModel,
      Gemma3ForCausalLM: () => t.Gemma3ForCausalLM,
      Gemma3Model: () => t.Gemma3Model,
      Gemma3PreTrainedModel: () => t.Gemma3PreTrainedModel,
      Gemma3nAudioFeatureExtractor: () => r.Gemma3nAudioFeatureExtractor,
      Gemma3nForConditionalGeneration: () => t.Gemma3nForConditionalGeneration,
      Gemma3nPreTrainedModel: () => t.Gemma3nPreTrainedModel,
      Gemma3nProcessor: () => E.Gemma3nProcessor,
      GemmaForCausalLM: () => t.GemmaForCausalLM,
      GemmaModel: () => t.GemmaModel,
      GemmaPreTrainedModel: () => t.GemmaPreTrainedModel,
      GemmaTokenizer: () => s.GemmaTokenizer,
      GlmForCausalLM: () => t.GlmForCausalLM,
      GlmModel: () => t.GlmModel,
      GlmPreTrainedModel: () => t.GlmPreTrainedModel,
      GraniteForCausalLM: () => t.GraniteForCausalLM,
      GraniteModel: () => t.GraniteModel,
      GraniteMoeHybridForCausalLM: () => t.GraniteMoeHybridForCausalLM,
      GraniteMoeHybridModel: () => t.GraniteMoeHybridModel,
      GraniteMoeHybridPreTrainedModel: () => t.GraniteMoeHybridPreTrainedModel,
      GranitePreTrainedModel: () => t.GranitePreTrainedModel,
      Grok1Tokenizer: () => s.Grok1Tokenizer,
      GroundingDinoForObjectDetection: () => t.GroundingDinoForObjectDetection,
      GroundingDinoImageProcessor: () => p.GroundingDinoImageProcessor,
      GroundingDinoPreTrainedModel: () => t.GroundingDinoPreTrainedModel,
      GroundingDinoProcessor: () => E.GroundingDinoProcessor,
      GroupViTModel: () => t.GroupViTModel,
      GroupViTPreTrainedModel: () => t.GroupViTPreTrainedModel,
      HeliumForCausalLM: () => t.HeliumForCausalLM,
      HeliumModel: () => t.HeliumModel,
      HeliumPreTrainedModel: () => t.HeliumPreTrainedModel,
      HerbertTokenizer: () => s.HerbertTokenizer,
      HieraForImageClassification: () => t.HieraForImageClassification,
      HieraModel: () => t.HieraModel,
      HieraPreTrainedModel: () => t.HieraPreTrainedModel,
      HubertForCTC: () => t.HubertForCTC,
      HubertForSequenceClassification: () => t.HubertForSequenceClassification,
      HubertModel: () => t.HubertModel,
      HubertPreTrainedModel: () => t.HubertPreTrainedModel,
      IJepaForImageClassification: () => t.IJepaForImageClassification,
      IJepaModel: () => t.IJepaModel,
      IJepaPreTrainedModel: () => t.IJepaPreTrainedModel,
      Idefics3ForConditionalGeneration: () => t.Idefics3ForConditionalGeneration,
      Idefics3ImageProcessor: () => p.Idefics3ImageProcessor,
      Idefics3PreTrainedModel: () => t.Idefics3PreTrainedModel,
      Idefics3Processor: () => E.Idefics3Processor,
      ImageClassificationPipeline: () => e.ImageClassificationPipeline,
      ImageFeatureExtractionPipeline: () => e.ImageFeatureExtractionPipeline,
      ImageFeatureExtractor: () => r.ImageFeatureExtractor,
      ImageMattingOutput: () => t.ImageMattingOutput,
      ImageProcessor: () => u.ImageProcessor,
      ImageSegmentationPipeline: () => e.ImageSegmentationPipeline,
      ImageToImagePipeline: () => e.ImageToImagePipeline,
      ImageToTextPipeline: () => e.ImageToTextPipeline,
      InterruptableStoppingCriteria: () => A.InterruptableStoppingCriteria,
      JAISLMHeadModel: () => t.JAISLMHeadModel,
      JAISModel: () => t.JAISModel,
      JAISPreTrainedModel: () => t.JAISPreTrainedModel,
      JinaCLIPImageProcessor: () => p.JinaCLIPImageProcessor,
      JinaCLIPModel: () => t.JinaCLIPModel,
      JinaCLIPPreTrainedModel: () => t.JinaCLIPPreTrainedModel,
      JinaCLIPProcessor: () => E.JinaCLIPProcessor,
      JinaCLIPTextModel: () => t.JinaCLIPTextModel,
      JinaCLIPVisionModel: () => t.JinaCLIPVisionModel,
      Lfm2ForCausalLM: () => t.Lfm2ForCausalLM,
      Lfm2Model: () => t.Lfm2Model,
      Lfm2PreTrainedModel: () => t.Lfm2PreTrainedModel,
      LiteWhisperForConditionalGeneration: () => t.LiteWhisperForConditionalGeneration,
      Llama4ForCausalLM: () => t.Llama4ForCausalLM,
      Llama4PreTrainedModel: () => t.Llama4PreTrainedModel,
      LlamaForCausalLM: () => t.LlamaForCausalLM,
      LlamaModel: () => t.LlamaModel,
      LlamaPreTrainedModel: () => t.LlamaPreTrainedModel,
      LlamaTokenizer: () => s.LlamaTokenizer,
      LlavaForConditionalGeneration: () => t.LlavaForConditionalGeneration,
      LlavaOnevisionForConditionalGeneration: () => t.LlavaOnevisionForConditionalGeneration,
      LlavaOnevisionImageProcessor: () => p.LlavaOnevisionImageProcessor,
      LlavaPreTrainedModel: () => t.LlavaPreTrainedModel,
      LlavaProcessor: () => E.LlavaProcessor,
      LlavaQwen2ForCausalLM: () => t.LlavaQwen2ForCausalLM,
      LogitsProcessor: () => C.LogitsProcessor,
      LogitsProcessorList: () => C.LogitsProcessorList,
      LogitsWarper: () => C.LogitsWarper,
      LongT5ForConditionalGeneration: () => t.LongT5ForConditionalGeneration,
      LongT5Model: () => t.LongT5Model,
      LongT5PreTrainedModel: () => t.LongT5PreTrainedModel,
      M2M100ForConditionalGeneration: () => t.M2M100ForConditionalGeneration,
      M2M100Model: () => t.M2M100Model,
      M2M100PreTrainedModel: () => t.M2M100PreTrainedModel,
      M2M100Tokenizer: () => s.M2M100Tokenizer,
      MBart50Tokenizer: () => s.MBart50Tokenizer,
      MBartForCausalLM: () => t.MBartForCausalLM,
      MBartForConditionalGeneration: () => t.MBartForConditionalGeneration,
      MBartForSequenceClassification: () => t.MBartForSequenceClassification,
      MBartModel: () => t.MBartModel,
      MBartPreTrainedModel: () => t.MBartPreTrainedModel,
      MBartTokenizer: () => s.MBartTokenizer,
      MPNetForMaskedLM: () => t.MPNetForMaskedLM,
      MPNetForQuestionAnswering: () => t.MPNetForQuestionAnswering,
      MPNetForSequenceClassification: () => t.MPNetForSequenceClassification,
      MPNetForTokenClassification: () => t.MPNetForTokenClassification,
      MPNetModel: () => t.MPNetModel,
      MPNetPreTrainedModel: () => t.MPNetPreTrainedModel,
      MPNetTokenizer: () => s.MPNetTokenizer,
      MT5ForConditionalGeneration: () => t.MT5ForConditionalGeneration,
      MT5Model: () => t.MT5Model,
      MT5PreTrainedModel: () => t.MT5PreTrainedModel,
      MarianMTModel: () => t.MarianMTModel,
      MarianModel: () => t.MarianModel,
      MarianPreTrainedModel: () => t.MarianPreTrainedModel,
      MarianTokenizer: () => s.MarianTokenizer,
      Mask2FormerImageProcessor: () => p.Mask2FormerImageProcessor,
      MaskFormerFeatureExtractor: () => p.MaskFormerFeatureExtractor,
      MaskFormerForInstanceSegmentation: () => t.MaskFormerForInstanceSegmentation,
      MaskFormerImageProcessor: () => p.MaskFormerImageProcessor,
      MaskFormerModel: () => t.MaskFormerModel,
      MaskFormerPreTrainedModel: () => t.MaskFormerPreTrainedModel,
      MaskedLMOutput: () => t.MaskedLMOutput,
      MaxLengthCriteria: () => A.MaxLengthCriteria,
      Metric3DForDepthEstimation: () => t.Metric3DForDepthEstimation,
      Metric3DPreTrainedModel: () => t.Metric3DPreTrainedModel,
      Metric3Dv2ForDepthEstimation: () => t.Metric3Dv2ForDepthEstimation,
      Metric3Dv2PreTrainedModel: () => t.Metric3Dv2PreTrainedModel,
      MgpstrForSceneTextRecognition: () => t.MgpstrForSceneTextRecognition,
      MgpstrModelOutput: () => t.MgpstrModelOutput,
      MgpstrPreTrainedModel: () => t.MgpstrPreTrainedModel,
      MgpstrProcessor: () => E.MgpstrProcessor,
      MgpstrTokenizer: () => s.MgpstrTokenizer,
      MimiDecoderModel: () => t.MimiDecoderModel,
      MimiDecoderOutput: () => t.MimiDecoderOutput,
      MimiEncoderModel: () => t.MimiEncoderModel,
      MimiEncoderOutput: () => t.MimiEncoderOutput,
      MimiModel: () => t.MimiModel,
      MimiPreTrainedModel: () => t.MimiPreTrainedModel,
      MinLengthLogitsProcessor: () => C.MinLengthLogitsProcessor,
      MinNewTokensLengthLogitsProcessor: () => C.MinNewTokensLengthLogitsProcessor,
      MistralForCausalLM: () => t.MistralForCausalLM,
      MistralModel: () => t.MistralModel,
      MistralPreTrainedModel: () => t.MistralPreTrainedModel,
      MobileBertForMaskedLM: () => t.MobileBertForMaskedLM,
      MobileBertForQuestionAnswering: () => t.MobileBertForQuestionAnswering,
      MobileBertForSequenceClassification: () => t.MobileBertForSequenceClassification,
      MobileBertModel: () => t.MobileBertModel,
      MobileBertPreTrainedModel: () => t.MobileBertPreTrainedModel,
      MobileBertTokenizer: () => s.MobileBertTokenizer,
      MobileLLMForCausalLM: () => t.MobileLLMForCausalLM,
      MobileLLMModel: () => t.MobileLLMModel,
      MobileLLMPreTrainedModel: () => t.MobileLLMPreTrainedModel,
      MobileNetV1FeatureExtractor: () => p.MobileNetV1FeatureExtractor,
      MobileNetV1ForImageClassification: () => t.MobileNetV1ForImageClassification,
      MobileNetV1ForSemanticSegmentation: () => t.MobileNetV1ForSemanticSegmentation,
      MobileNetV1ImageProcessor: () => p.MobileNetV1ImageProcessor,
      MobileNetV1Model: () => t.MobileNetV1Model,
      MobileNetV1PreTrainedModel: () => t.MobileNetV1PreTrainedModel,
      MobileNetV2FeatureExtractor: () => p.MobileNetV2FeatureExtractor,
      MobileNetV2ForImageClassification: () => t.MobileNetV2ForImageClassification,
      MobileNetV2ForSemanticSegmentation: () => t.MobileNetV2ForSemanticSegmentation,
      MobileNetV2ImageProcessor: () => p.MobileNetV2ImageProcessor,
      MobileNetV2Model: () => t.MobileNetV2Model,
      MobileNetV2PreTrainedModel: () => t.MobileNetV2PreTrainedModel,
      MobileNetV3FeatureExtractor: () => p.MobileNetV3FeatureExtractor,
      MobileNetV3ForImageClassification: () => t.MobileNetV3ForImageClassification,
      MobileNetV3ForSemanticSegmentation: () => t.MobileNetV3ForSemanticSegmentation,
      MobileNetV3ImageProcessor: () => p.MobileNetV3ImageProcessor,
      MobileNetV3Model: () => t.MobileNetV3Model,
      MobileNetV3PreTrainedModel: () => t.MobileNetV3PreTrainedModel,
      MobileNetV4FeatureExtractor: () => p.MobileNetV4FeatureExtractor,
      MobileNetV4ForImageClassification: () => t.MobileNetV4ForImageClassification,
      MobileNetV4ForSemanticSegmentation: () => t.MobileNetV4ForSemanticSegmentation,
      MobileNetV4ImageProcessor: () => p.MobileNetV4ImageProcessor,
      MobileNetV4Model: () => t.MobileNetV4Model,
      MobileNetV4PreTrainedModel: () => t.MobileNetV4PreTrainedModel,
      MobileViTFeatureExtractor: () => p.MobileViTFeatureExtractor,
      MobileViTForImageClassification: () => t.MobileViTForImageClassification,
      MobileViTImageProcessor: () => p.MobileViTImageProcessor,
      MobileViTModel: () => t.MobileViTModel,
      MobileViTPreTrainedModel: () => t.MobileViTPreTrainedModel,
      MobileViTV2ForImageClassification: () => t.MobileViTV2ForImageClassification,
      MobileViTV2Model: () => t.MobileViTV2Model,
      MobileViTV2PreTrainedModel: () => t.MobileViTV2PreTrainedModel,
      ModelOutput: () => t.ModelOutput,
      ModernBertDecoderForCausalLM: () => t.ModernBertDecoderForCausalLM,
      ModernBertDecoderModel: () => t.ModernBertDecoderModel,
      ModernBertDecoderPreTrainedModel: () => t.ModernBertDecoderPreTrainedModel,
      ModernBertForMaskedLM: () => t.ModernBertForMaskedLM,
      ModernBertForSequenceClassification: () => t.ModernBertForSequenceClassification,
      ModernBertForTokenClassification: () => t.ModernBertForTokenClassification,
      ModernBertModel: () => t.ModernBertModel,
      ModernBertPreTrainedModel: () => t.ModernBertPreTrainedModel,
      Moondream1ForConditionalGeneration: () => t.Moondream1ForConditionalGeneration,
      MoonshineFeatureExtractor: () => r.MoonshineFeatureExtractor,
      MoonshineForConditionalGeneration: () => t.MoonshineForConditionalGeneration,
      MoonshineModel: () => t.MoonshineModel,
      MoonshinePreTrainedModel: () => t.MoonshinePreTrainedModel,
      MoonshineProcessor: () => E.MoonshineProcessor,
      MptForCausalLM: () => t.MptForCausalLM,
      MptModel: () => t.MptModel,
      MptPreTrainedModel: () => t.MptPreTrainedModel,
      MultiModalityCausalLM: () => t.MultiModalityCausalLM,
      MultiModalityPreTrainedModel: () => t.MultiModalityPreTrainedModel,
      MusicgenForCausalLM: () => t.MusicgenForCausalLM,
      MusicgenForConditionalGeneration: () => t.MusicgenForConditionalGeneration,
      MusicgenModel: () => t.MusicgenModel,
      MusicgenPreTrainedModel: () => t.MusicgenPreTrainedModel,
      NeoBertForMaskedLM: () => t.NeoBertForMaskedLM,
      NeoBertForQuestionAnswering: () => t.NeoBertForQuestionAnswering,
      NeoBertForSequenceClassification: () => t.NeoBertForSequenceClassification,
      NeoBertForTokenClassification: () => t.NeoBertForTokenClassification,
      NeoBertModel: () => t.NeoBertModel,
      NeoBertPreTrainedModel: () => t.NeoBertPreTrainedModel,
      NllbTokenizer: () => s.NllbTokenizer,
      NoBadWordsLogitsProcessor: () => C.NoBadWordsLogitsProcessor,
      NoRepeatNGramLogitsProcessor: () => C.NoRepeatNGramLogitsProcessor,
      NomicBertModel: () => t.NomicBertModel,
      NomicBertPreTrainedModel: () => t.NomicBertPreTrainedModel,
      NougatImageProcessor: () => p.NougatImageProcessor,
      NougatTokenizer: () => s.NougatTokenizer,
      OPTForCausalLM: () => t.OPTForCausalLM,
      OPTModel: () => t.OPTModel,
      OPTPreTrainedModel: () => t.OPTPreTrainedModel,
      ObjectDetectionPipeline: () => e.ObjectDetectionPipeline,
      Olmo2ForCausalLM: () => t.Olmo2ForCausalLM,
      Olmo2Model: () => t.Olmo2Model,
      Olmo2PreTrainedModel: () => t.Olmo2PreTrainedModel,
      OlmoForCausalLM: () => t.OlmoForCausalLM,
      OlmoModel: () => t.OlmoModel,
      OlmoPreTrainedModel: () => t.OlmoPreTrainedModel,
      OpenELMForCausalLM: () => t.OpenELMForCausalLM,
      OpenELMModel: () => t.OpenELMModel,
      OpenELMPreTrainedModel: () => t.OpenELMPreTrainedModel,
      OwlViTFeatureExtractor: () => p.OwlViTFeatureExtractor,
      OwlViTForObjectDetection: () => t.OwlViTForObjectDetection,
      OwlViTImageProcessor: () => p.OwlViTImageProcessor,
      OwlViTModel: () => t.OwlViTModel,
      OwlViTPreTrainedModel: () => t.OwlViTPreTrainedModel,
      OwlViTProcessor: () => E.OwlViTProcessor,
      Owlv2ForObjectDetection: () => t.Owlv2ForObjectDetection,
      Owlv2ImageProcessor: () => p.Owlv2ImageProcessor,
      Owlv2Model: () => t.Owlv2Model,
      Owlv2PreTrainedModel: () => t.Owlv2PreTrainedModel,
      PaliGemmaForConditionalGeneration: () => t.PaliGemmaForConditionalGeneration,
      PaliGemmaPreTrainedModel: () => t.PaliGemmaPreTrainedModel,
      PaliGemmaProcessor: () => E.PaliGemmaProcessor,
      PatchTSMixerForPrediction: () => t.PatchTSMixerForPrediction,
      PatchTSMixerModel: () => t.PatchTSMixerModel,
      PatchTSMixerPreTrainedModel: () => t.PatchTSMixerPreTrainedModel,
      PatchTSTForPrediction: () => t.PatchTSTForPrediction,
      PatchTSTModel: () => t.PatchTSTModel,
      PatchTSTPreTrainedModel: () => t.PatchTSTPreTrainedModel,
      Phi3ForCausalLM: () => t.Phi3ForCausalLM,
      Phi3Model: () => t.Phi3Model,
      Phi3PreTrainedModel: () => t.Phi3PreTrainedModel,
      Phi3VForCausalLM: () => t.Phi3VForCausalLM,
      Phi3VImageProcessor: () => p.Phi3VImageProcessor,
      Phi3VPreTrainedModel: () => t.Phi3VPreTrainedModel,
      Phi3VProcessor: () => E.Phi3VProcessor,
      PhiForCausalLM: () => t.PhiForCausalLM,
      PhiModel: () => t.PhiModel,
      PhiPreTrainedModel: () => t.PhiPreTrainedModel,
      Pipeline: () => e.Pipeline,
      PreTrainedModel: () => t.PreTrainedModel,
      PreTrainedTokenizer: () => s.PreTrainedTokenizer,
      PretrainedConfig: () => l.PretrainedConfig,
      PretrainedMixin: () => t.PretrainedMixin,
      Processor: () => P.Processor,
      PvtForImageClassification: () => t.PvtForImageClassification,
      PvtImageProcessor: () => p.PvtImageProcessor,
      PvtModel: () => t.PvtModel,
      PvtPreTrainedModel: () => t.PvtPreTrainedModel,
      PyAnnoteFeatureExtractor: () => r.PyAnnoteFeatureExtractor,
      PyAnnoteForAudioFrameClassification: () => t.PyAnnoteForAudioFrameClassification,
      PyAnnoteModel: () => t.PyAnnoteModel,
      PyAnnotePreTrainedModel: () => t.PyAnnotePreTrainedModel,
      PyAnnoteProcessor: () => E.PyAnnoteProcessor,
      QuestionAnsweringModelOutput: () => t.QuestionAnsweringModelOutput,
      QuestionAnsweringPipeline: () => e.QuestionAnsweringPipeline,
      Qwen2ForCausalLM: () => t.Qwen2ForCausalLM,
      Qwen2Model: () => t.Qwen2Model,
      Qwen2PreTrainedModel: () => t.Qwen2PreTrainedModel,
      Qwen2Tokenizer: () => s.Qwen2Tokenizer,
      Qwen2VLForConditionalGeneration: () => t.Qwen2VLForConditionalGeneration,
      Qwen2VLImageProcessor: () => p.Qwen2VLImageProcessor,
      Qwen2VLPreTrainedModel: () => t.Qwen2VLPreTrainedModel,
      Qwen2VLProcessor: () => E.Qwen2VLProcessor,
      Qwen3ForCausalLM: () => t.Qwen3ForCausalLM,
      Qwen3Model: () => t.Qwen3Model,
      Qwen3PreTrainedModel: () => t.Qwen3PreTrainedModel,
      RFDetrForObjectDetection: () => t.RFDetrForObjectDetection,
      RFDetrModel: () => t.RFDetrModel,
      RFDetrObjectDetectionOutput: () => t.RFDetrObjectDetectionOutput,
      RFDetrPreTrainedModel: () => t.RFDetrPreTrainedModel,
      RTDetrForObjectDetection: () => t.RTDetrForObjectDetection,
      RTDetrImageProcessor: () => p.RTDetrImageProcessor,
      RTDetrModel: () => t.RTDetrModel,
      RTDetrObjectDetectionOutput: () => t.RTDetrObjectDetectionOutput,
      RTDetrPreTrainedModel: () => t.RTDetrPreTrainedModel,
      RTDetrV2ForObjectDetection: () => t.RTDetrV2ForObjectDetection,
      RTDetrV2Model: () => t.RTDetrV2Model,
      RTDetrV2ObjectDetectionOutput: () => t.RTDetrV2ObjectDetectionOutput,
      RTDetrV2PreTrainedModel: () => t.RTDetrV2PreTrainedModel,
      RawAudio: () => f.RawAudio,
      RawImage: () => d.RawImage,
      RawVideo: () => w.RawVideo,
      RawVideoFrame: () => w.RawVideoFrame,
      RepetitionPenaltyLogitsProcessor: () => C.RepetitionPenaltyLogitsProcessor,
      ResNetForImageClassification: () => t.ResNetForImageClassification,
      ResNetModel: () => t.ResNetModel,
      ResNetPreTrainedModel: () => t.ResNetPreTrainedModel,
      RoFormerForMaskedLM: () => t.RoFormerForMaskedLM,
      RoFormerForQuestionAnswering: () => t.RoFormerForQuestionAnswering,
      RoFormerForSequenceClassification: () => t.RoFormerForSequenceClassification,
      RoFormerForTokenClassification: () => t.RoFormerForTokenClassification,
      RoFormerModel: () => t.RoFormerModel,
      RoFormerPreTrainedModel: () => t.RoFormerPreTrainedModel,
      RoFormerTokenizer: () => s.RoFormerTokenizer,
      RobertaForMaskedLM: () => t.RobertaForMaskedLM,
      RobertaForQuestionAnswering: () => t.RobertaForQuestionAnswering,
      RobertaForSequenceClassification: () => t.RobertaForSequenceClassification,
      RobertaForTokenClassification: () => t.RobertaForTokenClassification,
      RobertaModel: () => t.RobertaModel,
      RobertaPreTrainedModel: () => t.RobertaPreTrainedModel,
      RobertaTokenizer: () => s.RobertaTokenizer,
      SamImageProcessor: () => p.SamImageProcessor,
      SamImageSegmentationOutput: () => t.SamImageSegmentationOutput,
      SamModel: () => t.SamModel,
      SamPreTrainedModel: () => t.SamPreTrainedModel,
      SamProcessor: () => E.SamProcessor,
      SapiensForDepthEstimation: () => t.SapiensForDepthEstimation,
      SapiensForNormalEstimation: () => t.SapiensForNormalEstimation,
      SapiensForSemanticSegmentation: () => t.SapiensForSemanticSegmentation,
      SapiensPreTrainedModel: () => t.SapiensPreTrainedModel,
      SeamlessM4TFeatureExtractor: () => r.SeamlessM4TFeatureExtractor,
      SegformerFeatureExtractor: () => p.SegformerFeatureExtractor,
      SegformerForImageClassification: () => t.SegformerForImageClassification,
      SegformerForSemanticSegmentation: () => t.SegformerForSemanticSegmentation,
      SegformerImageProcessor: () => p.SegformerImageProcessor,
      SegformerModel: () => t.SegformerModel,
      SegformerPreTrainedModel: () => t.SegformerPreTrainedModel,
      Seq2SeqLMOutput: () => t.Seq2SeqLMOutput,
      SequenceClassifierOutput: () => t.SequenceClassifierOutput,
      SiglipImageProcessor: () => p.SiglipImageProcessor,
      SiglipModel: () => t.SiglipModel,
      SiglipPreTrainedModel: () => t.SiglipPreTrainedModel,
      SiglipTextModel: () => t.SiglipTextModel,
      SiglipTokenizer: () => s.SiglipTokenizer,
      SiglipVisionModel: () => t.SiglipVisionModel,
      SmolLM3ForCausalLM: () => t.SmolLM3ForCausalLM,
      SmolLM3Model: () => t.SmolLM3Model,
      SmolLM3PreTrainedModel: () => t.SmolLM3PreTrainedModel,
      SmolVLMForConditionalGeneration: () => t.SmolVLMForConditionalGeneration,
      SmolVLMImageProcessor: () => p.SmolVLMImageProcessor,
      SmolVLMProcessor: () => E.SmolVLMProcessor,
      SnacDecoderModel: () => t.SnacDecoderModel,
      SnacEncoderModel: () => t.SnacEncoderModel,
      SnacFeatureExtractor: () => r.SnacFeatureExtractor,
      SnacModel: () => t.SnacModel,
      SnacPreTrainedModel: () => t.SnacPreTrainedModel,
      SpeechT5FeatureExtractor: () => r.SpeechT5FeatureExtractor,
      SpeechT5ForSpeechToText: () => t.SpeechT5ForSpeechToText,
      SpeechT5ForTextToSpeech: () => t.SpeechT5ForTextToSpeech,
      SpeechT5HifiGan: () => t.SpeechT5HifiGan,
      SpeechT5Model: () => t.SpeechT5Model,
      SpeechT5PreTrainedModel: () => t.SpeechT5PreTrainedModel,
      SpeechT5Processor: () => E.SpeechT5Processor,
      SpeechT5Tokenizer: () => s.SpeechT5Tokenizer,
      SqueezeBertForMaskedLM: () => t.SqueezeBertForMaskedLM,
      SqueezeBertForQuestionAnswering: () => t.SqueezeBertForQuestionAnswering,
      SqueezeBertForSequenceClassification: () => t.SqueezeBertForSequenceClassification,
      SqueezeBertModel: () => t.SqueezeBertModel,
      SqueezeBertPreTrainedModel: () => t.SqueezeBertPreTrainedModel,
      SqueezeBertTokenizer: () => s.SqueezeBertTokenizer,
      StableLmForCausalLM: () => t.StableLmForCausalLM,
      StableLmModel: () => t.StableLmModel,
      StableLmPreTrainedModel: () => t.StableLmPreTrainedModel,
      Starcoder2ForCausalLM: () => t.Starcoder2ForCausalLM,
      Starcoder2Model: () => t.Starcoder2Model,
      Starcoder2PreTrainedModel: () => t.Starcoder2PreTrainedModel,
      StoppingCriteria: () => A.StoppingCriteria,
      StoppingCriteriaList: () => A.StoppingCriteriaList,
      StyleTextToSpeech2Model: () => t.StyleTextToSpeech2Model,
      StyleTextToSpeech2PreTrainedModel: () => t.StyleTextToSpeech2PreTrainedModel,
      SummarizationPipeline: () => e.SummarizationPipeline,
      SuppressTokensAtBeginLogitsProcessor: () => C.SuppressTokensAtBeginLogitsProcessor,
      Swin2SRForImageSuperResolution: () => t.Swin2SRForImageSuperResolution,
      Swin2SRImageProcessor: () => p.Swin2SRImageProcessor,
      Swin2SRModel: () => t.Swin2SRModel,
      Swin2SRPreTrainedModel: () => t.Swin2SRPreTrainedModel,
      SwinForImageClassification: () => t.SwinForImageClassification,
      SwinForSemanticSegmentation: () => t.SwinForSemanticSegmentation,
      SwinModel: () => t.SwinModel,
      SwinPreTrainedModel: () => t.SwinPreTrainedModel,
      T5ForConditionalGeneration: () => t.T5ForConditionalGeneration,
      T5Model: () => t.T5Model,
      T5PreTrainedModel: () => t.T5PreTrainedModel,
      T5Tokenizer: () => s.T5Tokenizer,
      TableTransformerForObjectDetection: () => t.TableTransformerForObjectDetection,
      TableTransformerModel: () => t.TableTransformerModel,
      TableTransformerObjectDetectionOutput: () => t.TableTransformerObjectDetectionOutput,
      TableTransformerPreTrainedModel: () => t.TableTransformerPreTrainedModel,
      TemperatureLogitsWarper: () => C.TemperatureLogitsWarper,
      Tensor: () => g.Tensor,
      Text2TextGenerationPipeline: () => e.Text2TextGenerationPipeline,
      TextClassificationPipeline: () => e.TextClassificationPipeline,
      TextGenerationPipeline: () => e.TextGenerationPipeline,
      TextStreamer: () => $.TextStreamer,
      TextToAudioPipeline: () => e.TextToAudioPipeline,
      TokenClassificationPipeline: () => e.TokenClassificationPipeline,
      TokenClassifierOutput: () => t.TokenClassifierOutput,
      TokenizerModel: () => s.TokenizerModel,
      TopKLogitsWarper: () => C.TopKLogitsWarper,
      TopPLogitsWarper: () => C.TopPLogitsWarper,
      TrOCRForCausalLM: () => t.TrOCRForCausalLM,
      TrOCRPreTrainedModel: () => t.TrOCRPreTrainedModel,
      TranslationPipeline: () => e.TranslationPipeline,
      UltravoxModel: () => t.UltravoxModel,
      UltravoxPreTrainedModel: () => t.UltravoxPreTrainedModel,
      UltravoxProcessor: () => E.UltravoxProcessor,
      UniSpeechForCTC: () => t.UniSpeechForCTC,
      UniSpeechForSequenceClassification: () => t.UniSpeechForSequenceClassification,
      UniSpeechModel: () => t.UniSpeechModel,
      UniSpeechPreTrainedModel: () => t.UniSpeechPreTrainedModel,
      UniSpeechSatForAudioFrameClassification: () => t.UniSpeechSatForAudioFrameClassification,
      UniSpeechSatForCTC: () => t.UniSpeechSatForCTC,
      UniSpeechSatForSequenceClassification: () => t.UniSpeechSatForSequenceClassification,
      UniSpeechSatModel: () => t.UniSpeechSatModel,
      UniSpeechSatPreTrainedModel: () => t.UniSpeechSatPreTrainedModel,
      VLChatProcessor: () => E.VLChatProcessor,
      VLMImageProcessor: () => p.VLMImageProcessor,
      VaultGemmaForCausalLM: () => t.VaultGemmaForCausalLM,
      VaultGemmaModel: () => t.VaultGemmaModel,
      VaultGemmaPreTrainedModel: () => t.VaultGemmaPreTrainedModel,
      ViTFeatureExtractor: () => p.ViTFeatureExtractor,
      ViTForImageClassification: () => t.ViTForImageClassification,
      ViTImageProcessor: () => p.ViTImageProcessor,
      ViTMAEModel: () => t.ViTMAEModel,
      ViTMAEPreTrainedModel: () => t.ViTMAEPreTrainedModel,
      ViTMSNForImageClassification: () => t.ViTMSNForImageClassification,
      ViTMSNModel: () => t.ViTMSNModel,
      ViTMSNPreTrainedModel: () => t.ViTMSNPreTrainedModel,
      ViTModel: () => t.ViTModel,
      ViTPreTrainedModel: () => t.ViTPreTrainedModel,
      VisionEncoderDecoderModel: () => t.VisionEncoderDecoderModel,
      VitMatteForImageMatting: () => t.VitMatteForImageMatting,
      VitMatteImageProcessor: () => p.VitMatteImageProcessor,
      VitMattePreTrainedModel: () => t.VitMattePreTrainedModel,
      VitPoseForPoseEstimation: () => t.VitPoseForPoseEstimation,
      VitPoseImageProcessor: () => p.VitPoseImageProcessor,
      VitPosePreTrainedModel: () => t.VitPosePreTrainedModel,
      VitsModel: () => t.VitsModel,
      VitsModelOutput: () => t.VitsModelOutput,
      VitsPreTrainedModel: () => t.VitsPreTrainedModel,
      VitsTokenizer: () => s.VitsTokenizer,
      VoxtralForConditionalGeneration: () => t.VoxtralForConditionalGeneration,
      VoxtralProcessor: () => E.VoxtralProcessor,
      Wav2Vec2BertForCTC: () => t.Wav2Vec2BertForCTC,
      Wav2Vec2BertForSequenceClassification: () => t.Wav2Vec2BertForSequenceClassification,
      Wav2Vec2BertModel: () => t.Wav2Vec2BertModel,
      Wav2Vec2BertPreTrainedModel: () => t.Wav2Vec2BertPreTrainedModel,
      Wav2Vec2CTCTokenizer: () => s.Wav2Vec2CTCTokenizer,
      Wav2Vec2FeatureExtractor: () => r.Wav2Vec2FeatureExtractor,
      Wav2Vec2ForAudioFrameClassification: () => t.Wav2Vec2ForAudioFrameClassification,
      Wav2Vec2ForCTC: () => t.Wav2Vec2ForCTC,
      Wav2Vec2ForSequenceClassification: () => t.Wav2Vec2ForSequenceClassification,
      Wav2Vec2Model: () => t.Wav2Vec2Model,
      Wav2Vec2PreTrainedModel: () => t.Wav2Vec2PreTrainedModel,
      Wav2Vec2Processor: () => E.Wav2Vec2Processor,
      Wav2Vec2ProcessorWithLM: () => E.Wav2Vec2ProcessorWithLM,
      WavLMForAudioFrameClassification: () => t.WavLMForAudioFrameClassification,
      WavLMForCTC: () => t.WavLMForCTC,
      WavLMForSequenceClassification: () => t.WavLMForSequenceClassification,
      WavLMForXVector: () => t.WavLMForXVector,
      WavLMModel: () => t.WavLMModel,
      WavLMPreTrainedModel: () => t.WavLMPreTrainedModel,
      WeSpeakerFeatureExtractor: () => r.WeSpeakerFeatureExtractor,
      WeSpeakerResNetModel: () => t.WeSpeakerResNetModel,
      WeSpeakerResNetPreTrainedModel: () => t.WeSpeakerResNetPreTrainedModel,
      WhisperFeatureExtractor: () => r.WhisperFeatureExtractor,
      WhisperForConditionalGeneration: () => t.WhisperForConditionalGeneration,
      WhisperModel: () => t.WhisperModel,
      WhisperPreTrainedModel: () => t.WhisperPreTrainedModel,
      WhisperProcessor: () => E.WhisperProcessor,
      WhisperTextStreamer: () => $.WhisperTextStreamer,
      WhisperTimeStampLogitsProcessor: () => C.WhisperTimeStampLogitsProcessor,
      WhisperTokenizer: () => s.WhisperTokenizer,
      XLMForQuestionAnswering: () => t.XLMForQuestionAnswering,
      XLMForSequenceClassification: () => t.XLMForSequenceClassification,
      XLMForTokenClassification: () => t.XLMForTokenClassification,
      XLMModel: () => t.XLMModel,
      XLMPreTrainedModel: () => t.XLMPreTrainedModel,
      XLMRobertaForMaskedLM: () => t.XLMRobertaForMaskedLM,
      XLMRobertaForQuestionAnswering: () => t.XLMRobertaForQuestionAnswering,
      XLMRobertaForSequenceClassification: () => t.XLMRobertaForSequenceClassification,
      XLMRobertaForTokenClassification: () => t.XLMRobertaForTokenClassification,
      XLMRobertaModel: () => t.XLMRobertaModel,
      XLMRobertaPreTrainedModel: () => t.XLMRobertaPreTrainedModel,
      XLMRobertaTokenizer: () => s.XLMRobertaTokenizer,
      XLMTokenizer: () => s.XLMTokenizer,
      XLMWithLMHeadModel: () => t.XLMWithLMHeadModel,
      XVectorOutput: () => t.XVectorOutput,
      YolosFeatureExtractor: () => p.YolosFeatureExtractor,
      YolosForObjectDetection: () => t.YolosForObjectDetection,
      YolosImageProcessor: () => p.YolosImageProcessor,
      YolosModel: () => t.YolosModel,
      YolosObjectDetectionOutput: () => t.YolosObjectDetectionOutput,
      YolosPreTrainedModel: () => t.YolosPreTrainedModel,
      ZeroShotAudioClassificationPipeline: () => e.ZeroShotAudioClassificationPipeline,
      ZeroShotClassificationPipeline: () => e.ZeroShotClassificationPipeline,
      ZeroShotImageClassificationPipeline: () => e.ZeroShotImageClassificationPipeline,
      ZeroShotObjectDetectionPipeline: () => e.ZeroShotObjectDetectionPipeline,
      bankers_round: () => _.bankers_round,
      cat: () => g.cat,
      cos_sim: () => _.cos_sim,
      dot: () => _.dot,
      dynamic_time_warping: () => _.dynamic_time_warping,
      env: () => i.env,
      full: () => g.full,
      full_like: () => g.full_like,
      getCacheShapes: () => l.getCacheShapes,
      hamming: () => f.hamming,
      hanning: () => f.hanning,
      interpolate: () => g.interpolate,
      interpolate_4d: () => g.interpolate_4d,
      interpolate_data: () => _.interpolate_data,
      is_chinese_char: () => s.is_chinese_char,
      layer_norm: () => g.layer_norm,
      load_image: () => d.load_image,
      load_video: () => w.load_video,
      log_softmax: () => _.log_softmax,
      magnitude: () => _.magnitude,
      matmul: () => g.matmul,
      max: () => _.max,
      mean: () => g.mean,
      mean_pooling: () => g.mean_pooling,
      medianFilter: () => _.medianFilter,
      mel_filter_bank: () => f.mel_filter_bank,
      min: () => _.min,
      ones: () => g.ones,
      ones_like: () => g.ones_like,
      permute: () => g.permute,
      permute_data: () => _.permute_data,
      pipeline: () => e.pipeline,
      quantize_embeddings: () => g.quantize_embeddings,
      rand: () => g.rand,
      read_audio: () => f.read_audio,
      rfft: () => g.rfft,
      round: () => _.round,
      slice: () => g.slice,
      softmax: () => _.softmax,
      spectrogram: () => f.spectrogram,
      stack: () => g.stack,
      std_mean: () => g.std_mean,
      topk: () => g.topk,
      window_function: () => f.window_function,
      zeros: () => g.zeros,
      zeros_like: () => g.zeros_like
    });
    var i = __webpack_require__("./src/env.js"), e = __webpack_require__("./src/pipelines.js"), t = __webpack_require__("./src/models.js"), s = __webpack_require__("./src/tokenizers.js"), l = __webpack_require__("./src/configs.js"), f = __webpack_require__("./src/utils/audio.js"), d = __webpack_require__("./src/utils/image.js"), w = __webpack_require__("./src/utils/video.js"), g = __webpack_require__("./src/utils/tensor.js"), _ = __webpack_require__("./src/utils/maths.js"), h = __webpack_require__("./src/base/feature_extraction_utils.js"), r = __webpack_require__("./src/models/feature_extractors.js"), n = __webpack_require__("./src/models/auto/feature_extraction_auto.js"), u = __webpack_require__("./src/base/image_processors_utils.js"), p = __webpack_require__("./src/models/image_processors.js"), M = __webpack_require__("./src/models/auto/image_processing_auto.js"), P = __webpack_require__("./src/base/processing_utils.js"), E = __webpack_require__("./src/models/processors.js"), k = __webpack_require__("./src/models/auto/processing_auto.js"), $ = __webpack_require__("./src/generation/streamers.js"), A = __webpack_require__("./src/generation/stopping_criteria.js"), C = __webpack_require__("./src/generation/logits_process.js");
  })();
  __webpack_exports__.ASTFeatureExtractor;
  __webpack_exports__.ASTForAudioClassification;
  __webpack_exports__.ASTModel;
  __webpack_exports__.ASTPreTrainedModel;
  __webpack_exports__.AlbertForMaskedLM;
  __webpack_exports__.AlbertForQuestionAnswering;
  __webpack_exports__.AlbertForSequenceClassification;
  __webpack_exports__.AlbertModel;
  __webpack_exports__.AlbertPreTrainedModel;
  __webpack_exports__.AlbertTokenizer;
  __webpack_exports__.ArceeForCausalLM;
  __webpack_exports__.ArceeModel;
  __webpack_exports__.ArceePreTrainedModel;
  __webpack_exports__.AudioClassificationPipeline;
  __webpack_exports__.AutoConfig;
  __webpack_exports__.AutoFeatureExtractor;
  __webpack_exports__.AutoImageProcessor;
  __webpack_exports__.AutoModel;
  __webpack_exports__.AutoModelForAudioClassification;
  __webpack_exports__.AutoModelForAudioFrameClassification;
  __webpack_exports__.AutoModelForAudioTextToText;
  __webpack_exports__.AutoModelForCTC;
  __webpack_exports__.AutoModelForCausalLM;
  __webpack_exports__.AutoModelForDepthEstimation;
  __webpack_exports__.AutoModelForDocumentQuestionAnswering;
  __webpack_exports__.AutoModelForImageClassification;
  __webpack_exports__.AutoModelForImageFeatureExtraction;
  __webpack_exports__.AutoModelForImageMatting;
  __webpack_exports__.AutoModelForImageSegmentation;
  __webpack_exports__.AutoModelForImageTextToText;
  __webpack_exports__.AutoModelForImageToImage;
  __webpack_exports__.AutoModelForMaskGeneration;
  __webpack_exports__.AutoModelForMaskedLM;
  __webpack_exports__.AutoModelForNormalEstimation;
  __webpack_exports__.AutoModelForObjectDetection;
  __webpack_exports__.AutoModelForPoseEstimation;
  __webpack_exports__.AutoModelForQuestionAnswering;
  __webpack_exports__.AutoModelForSemanticSegmentation;
  __webpack_exports__.AutoModelForSeq2SeqLM;
  __webpack_exports__.AutoModelForSequenceClassification;
  __webpack_exports__.AutoModelForSpeechSeq2Seq;
  __webpack_exports__.AutoModelForTextToSpectrogram;
  __webpack_exports__.AutoModelForTextToWaveform;
  __webpack_exports__.AutoModelForTokenClassification;
  __webpack_exports__.AutoModelForUniversalSegmentation;
  __webpack_exports__.AutoModelForVision2Seq;
  __webpack_exports__.AutoModelForXVector;
  __webpack_exports__.AutoModelForZeroShotObjectDetection;
  __webpack_exports__.AutoProcessor;
  __webpack_exports__.AutoTokenizer;
  __webpack_exports__.AutomaticSpeechRecognitionPipeline;
  __webpack_exports__.BackgroundRemovalPipeline;
  __webpack_exports__.BartForConditionalGeneration;
  __webpack_exports__.BartForSequenceClassification;
  __webpack_exports__.BartModel;
  __webpack_exports__.BartPretrainedModel;
  __webpack_exports__.BartTokenizer;
  __webpack_exports__.BaseModelOutput;
  __webpack_exports__.BaseStreamer;
  __webpack_exports__.BeitFeatureExtractor;
  __webpack_exports__.BeitForImageClassification;
  __webpack_exports__.BeitModel;
  __webpack_exports__.BeitPreTrainedModel;
  __webpack_exports__.BertForMaskedLM;
  __webpack_exports__.BertForQuestionAnswering;
  __webpack_exports__.BertForSequenceClassification;
  __webpack_exports__.BertForTokenClassification;
  __webpack_exports__.BertModel;
  __webpack_exports__.BertPreTrainedModel;
  __webpack_exports__.BertTokenizer;
  __webpack_exports__.BitImageProcessor;
  __webpack_exports__.BlenderbotForConditionalGeneration;
  __webpack_exports__.BlenderbotModel;
  __webpack_exports__.BlenderbotPreTrainedModel;
  __webpack_exports__.BlenderbotSmallForConditionalGeneration;
  __webpack_exports__.BlenderbotSmallModel;
  __webpack_exports__.BlenderbotSmallPreTrainedModel;
  __webpack_exports__.BlenderbotSmallTokenizer;
  __webpack_exports__.BlenderbotTokenizer;
  __webpack_exports__.BloomForCausalLM;
  __webpack_exports__.BloomModel;
  __webpack_exports__.BloomPreTrainedModel;
  __webpack_exports__.BloomTokenizer;
  __webpack_exports__.CLIPFeatureExtractor;
  __webpack_exports__.CLIPImageProcessor;
  __webpack_exports__.CLIPModel;
  __webpack_exports__.CLIPPreTrainedModel;
  __webpack_exports__.CLIPSegForImageSegmentation;
  __webpack_exports__.CLIPSegModel;
  __webpack_exports__.CLIPSegPreTrainedModel;
  __webpack_exports__.CLIPTextModel;
  __webpack_exports__.CLIPTextModelWithProjection;
  __webpack_exports__.CLIPTokenizer;
  __webpack_exports__.CLIPVisionModel;
  __webpack_exports__.CLIPVisionModelWithProjection;
  __webpack_exports__.CamembertForMaskedLM;
  __webpack_exports__.CamembertForQuestionAnswering;
  __webpack_exports__.CamembertForSequenceClassification;
  __webpack_exports__.CamembertForTokenClassification;
  __webpack_exports__.CamembertModel;
  __webpack_exports__.CamembertPreTrainedModel;
  __webpack_exports__.CamembertTokenizer;
  __webpack_exports__.CausalLMOutput;
  __webpack_exports__.CausalLMOutputWithPast;
  __webpack_exports__.ChineseCLIPFeatureExtractor;
  __webpack_exports__.ChineseCLIPModel;
  __webpack_exports__.ChineseCLIPPreTrainedModel;
  __webpack_exports__.ClapAudioModelWithProjection;
  __webpack_exports__.ClapFeatureExtractor;
  __webpack_exports__.ClapModel;
  __webpack_exports__.ClapPreTrainedModel;
  __webpack_exports__.ClapTextModelWithProjection;
  __webpack_exports__.ClassifierFreeGuidanceLogitsProcessor;
  __webpack_exports__.CodeGenForCausalLM;
  __webpack_exports__.CodeGenModel;
  __webpack_exports__.CodeGenPreTrainedModel;
  __webpack_exports__.CodeGenTokenizer;
  __webpack_exports__.CodeLlamaTokenizer;
  __webpack_exports__.CohereForCausalLM;
  __webpack_exports__.CohereModel;
  __webpack_exports__.CoherePreTrainedModel;
  __webpack_exports__.CohereTokenizer;
  __webpack_exports__.ConvBertForMaskedLM;
  __webpack_exports__.ConvBertForQuestionAnswering;
  __webpack_exports__.ConvBertForSequenceClassification;
  __webpack_exports__.ConvBertForTokenClassification;
  __webpack_exports__.ConvBertModel;
  __webpack_exports__.ConvBertPreTrainedModel;
  __webpack_exports__.ConvBertTokenizer;
  __webpack_exports__.ConvNextFeatureExtractor;
  __webpack_exports__.ConvNextForImageClassification;
  __webpack_exports__.ConvNextImageProcessor;
  __webpack_exports__.ConvNextModel;
  __webpack_exports__.ConvNextPreTrainedModel;
  __webpack_exports__.ConvNextV2ForImageClassification;
  __webpack_exports__.ConvNextV2Model;
  __webpack_exports__.ConvNextV2PreTrainedModel;
  __webpack_exports__.DFineForObjectDetection;
  __webpack_exports__.DFineModel;
  __webpack_exports__.DFinePreTrainedModel;
  __webpack_exports__.DINOv3ConvNextModel;
  __webpack_exports__.DINOv3ConvNextPreTrainedModel;
  __webpack_exports__.DINOv3ViTImageProcessor;
  __webpack_exports__.DINOv3ViTModel;
  __webpack_exports__.DINOv3ViTPreTrainedModel;
  __webpack_exports__.DPTFeatureExtractor;
  __webpack_exports__.DPTForDepthEstimation;
  __webpack_exports__.DPTImageProcessor;
  __webpack_exports__.DPTModel;
  __webpack_exports__.DPTPreTrainedModel;
  __webpack_exports__.DacDecoderModel;
  __webpack_exports__.DacDecoderOutput;
  __webpack_exports__.DacEncoderModel;
  __webpack_exports__.DacEncoderOutput;
  __webpack_exports__.DacFeatureExtractor;
  __webpack_exports__.DacModel;
  __webpack_exports__.DacPreTrainedModel;
  __webpack_exports__.DataTypeMap;
  __webpack_exports__.DebertaForMaskedLM;
  __webpack_exports__.DebertaForQuestionAnswering;
  __webpack_exports__.DebertaForSequenceClassification;
  __webpack_exports__.DebertaForTokenClassification;
  __webpack_exports__.DebertaModel;
  __webpack_exports__.DebertaPreTrainedModel;
  __webpack_exports__.DebertaTokenizer;
  __webpack_exports__.DebertaV2ForMaskedLM;
  __webpack_exports__.DebertaV2ForQuestionAnswering;
  __webpack_exports__.DebertaV2ForSequenceClassification;
  __webpack_exports__.DebertaV2ForTokenClassification;
  __webpack_exports__.DebertaV2Model;
  __webpack_exports__.DebertaV2PreTrainedModel;
  __webpack_exports__.DebertaV2Tokenizer;
  __webpack_exports__.DecisionTransformerModel;
  __webpack_exports__.DecisionTransformerPreTrainedModel;
  __webpack_exports__.DeiTFeatureExtractor;
  __webpack_exports__.DeiTForImageClassification;
  __webpack_exports__.DeiTImageProcessor;
  __webpack_exports__.DeiTModel;
  __webpack_exports__.DeiTPreTrainedModel;
  __webpack_exports__.DepthAnythingForDepthEstimation;
  __webpack_exports__.DepthAnythingPreTrainedModel;
  __webpack_exports__.DepthEstimationPipeline;
  __webpack_exports__.DepthProForDepthEstimation;
  __webpack_exports__.DepthProPreTrainedModel;
  __webpack_exports__.DetrFeatureExtractor;
  __webpack_exports__.DetrForObjectDetection;
  __webpack_exports__.DetrForSegmentation;
  __webpack_exports__.DetrImageProcessor;
  __webpack_exports__.DetrModel;
  __webpack_exports__.DetrObjectDetectionOutput;
  __webpack_exports__.DetrPreTrainedModel;
  __webpack_exports__.DetrSegmentationOutput;
  __webpack_exports__.Dinov2ForImageClassification;
  __webpack_exports__.Dinov2Model;
  __webpack_exports__.Dinov2PreTrainedModel;
  __webpack_exports__.Dinov2WithRegistersForImageClassification;
  __webpack_exports__.Dinov2WithRegistersModel;
  __webpack_exports__.Dinov2WithRegistersPreTrainedModel;
  __webpack_exports__.DistilBertForMaskedLM;
  __webpack_exports__.DistilBertForQuestionAnswering;
  __webpack_exports__.DistilBertForSequenceClassification;
  __webpack_exports__.DistilBertForTokenClassification;
  __webpack_exports__.DistilBertModel;
  __webpack_exports__.DistilBertPreTrainedModel;
  __webpack_exports__.DistilBertTokenizer;
  __webpack_exports__.DocumentQuestionAnsweringPipeline;
  __webpack_exports__.DonutFeatureExtractor;
  __webpack_exports__.DonutImageProcessor;
  __webpack_exports__.DonutSwinModel;
  __webpack_exports__.DonutSwinPreTrainedModel;
  __webpack_exports__.EfficientNetForImageClassification;
  __webpack_exports__.EfficientNetImageProcessor;
  __webpack_exports__.EfficientNetModel;
  __webpack_exports__.EfficientNetPreTrainedModel;
  __webpack_exports__.ElectraForMaskedLM;
  __webpack_exports__.ElectraForQuestionAnswering;
  __webpack_exports__.ElectraForSequenceClassification;
  __webpack_exports__.ElectraForTokenClassification;
  __webpack_exports__.ElectraModel;
  __webpack_exports__.ElectraPreTrainedModel;
  __webpack_exports__.ElectraTokenizer;
  __webpack_exports__.EncodecFeatureExtractor;
  __webpack_exports__.EosTokenCriteria;
  __webpack_exports__.Ernie4_5_ForCausalLM;
  __webpack_exports__.Ernie4_5_Model;
  __webpack_exports__.Ernie4_5_PretrainedModel;
  __webpack_exports__.Ernie4_5_Tokenizer;
  __webpack_exports__.EsmForMaskedLM;
  __webpack_exports__.EsmForSequenceClassification;
  __webpack_exports__.EsmForTokenClassification;
  __webpack_exports__.EsmModel;
  __webpack_exports__.EsmPreTrainedModel;
  __webpack_exports__.EsmTokenizer;
  __webpack_exports__.ExaoneForCausalLM;
  __webpack_exports__.ExaoneModel;
  __webpack_exports__.ExaonePreTrainedModel;
  __webpack_exports__.FFT;
  __webpack_exports__.FalconForCausalLM;
  __webpack_exports__.FalconModel;
  __webpack_exports__.FalconPreTrainedModel;
  __webpack_exports__.FalconTokenizer;
  __webpack_exports__.FastViTForImageClassification;
  __webpack_exports__.FastViTModel;
  __webpack_exports__.FastViTPreTrainedModel;
  __webpack_exports__.FeatureExtractionPipeline;
  __webpack_exports__.FeatureExtractor;
  __webpack_exports__.FillMaskPipeline;
  __webpack_exports__.Florence2ForConditionalGeneration;
  __webpack_exports__.Florence2PreTrainedModel;
  __webpack_exports__.Florence2Processor;
  __webpack_exports__.ForcedBOSTokenLogitsProcessor;
  __webpack_exports__.ForcedEOSTokenLogitsProcessor;
  __webpack_exports__.GLPNFeatureExtractor;
  __webpack_exports__.GLPNForDepthEstimation;
  __webpack_exports__.GLPNModel;
  __webpack_exports__.GLPNPreTrainedModel;
  __webpack_exports__.GPT2LMHeadModel;
  __webpack_exports__.GPT2Model;
  __webpack_exports__.GPT2PreTrainedModel;
  __webpack_exports__.GPT2Tokenizer;
  __webpack_exports__.GPTBigCodeForCausalLM;
  __webpack_exports__.GPTBigCodeModel;
  __webpack_exports__.GPTBigCodePreTrainedModel;
  __webpack_exports__.GPTJForCausalLM;
  __webpack_exports__.GPTJModel;
  __webpack_exports__.GPTJPreTrainedModel;
  __webpack_exports__.GPTNeoForCausalLM;
  __webpack_exports__.GPTNeoModel;
  __webpack_exports__.GPTNeoPreTrainedModel;
  __webpack_exports__.GPTNeoXForCausalLM;
  __webpack_exports__.GPTNeoXModel;
  __webpack_exports__.GPTNeoXPreTrainedModel;
  __webpack_exports__.GPTNeoXTokenizer;
  __webpack_exports__.Gemma2ForCausalLM;
  __webpack_exports__.Gemma2Model;
  __webpack_exports__.Gemma2PreTrainedModel;
  __webpack_exports__.Gemma3ForCausalLM;
  __webpack_exports__.Gemma3Model;
  __webpack_exports__.Gemma3PreTrainedModel;
  __webpack_exports__.Gemma3nAudioFeatureExtractor;
  __webpack_exports__.Gemma3nForConditionalGeneration;
  __webpack_exports__.Gemma3nPreTrainedModel;
  __webpack_exports__.Gemma3nProcessor;
  __webpack_exports__.GemmaForCausalLM;
  __webpack_exports__.GemmaModel;
  __webpack_exports__.GemmaPreTrainedModel;
  __webpack_exports__.GemmaTokenizer;
  __webpack_exports__.GlmForCausalLM;
  __webpack_exports__.GlmModel;
  __webpack_exports__.GlmPreTrainedModel;
  __webpack_exports__.GraniteForCausalLM;
  __webpack_exports__.GraniteModel;
  __webpack_exports__.GraniteMoeHybridForCausalLM;
  __webpack_exports__.GraniteMoeHybridModel;
  __webpack_exports__.GraniteMoeHybridPreTrainedModel;
  __webpack_exports__.GranitePreTrainedModel;
  __webpack_exports__.Grok1Tokenizer;
  __webpack_exports__.GroundingDinoForObjectDetection;
  __webpack_exports__.GroundingDinoImageProcessor;
  __webpack_exports__.GroundingDinoPreTrainedModel;
  __webpack_exports__.GroundingDinoProcessor;
  __webpack_exports__.GroupViTModel;
  __webpack_exports__.GroupViTPreTrainedModel;
  __webpack_exports__.HeliumForCausalLM;
  __webpack_exports__.HeliumModel;
  __webpack_exports__.HeliumPreTrainedModel;
  __webpack_exports__.HerbertTokenizer;
  __webpack_exports__.HieraForImageClassification;
  __webpack_exports__.HieraModel;
  __webpack_exports__.HieraPreTrainedModel;
  __webpack_exports__.HubertForCTC;
  __webpack_exports__.HubertForSequenceClassification;
  __webpack_exports__.HubertModel;
  __webpack_exports__.HubertPreTrainedModel;
  __webpack_exports__.IJepaForImageClassification;
  __webpack_exports__.IJepaModel;
  __webpack_exports__.IJepaPreTrainedModel;
  __webpack_exports__.Idefics3ForConditionalGeneration;
  __webpack_exports__.Idefics3ImageProcessor;
  __webpack_exports__.Idefics3PreTrainedModel;
  __webpack_exports__.Idefics3Processor;
  __webpack_exports__.ImageClassificationPipeline;
  __webpack_exports__.ImageFeatureExtractionPipeline;
  __webpack_exports__.ImageFeatureExtractor;
  __webpack_exports__.ImageMattingOutput;
  __webpack_exports__.ImageProcessor;
  __webpack_exports__.ImageSegmentationPipeline;
  __webpack_exports__.ImageToImagePipeline;
  __webpack_exports__.ImageToTextPipeline;
  __webpack_exports__.InterruptableStoppingCriteria;
  __webpack_exports__.JAISLMHeadModel;
  __webpack_exports__.JAISModel;
  __webpack_exports__.JAISPreTrainedModel;
  __webpack_exports__.JinaCLIPImageProcessor;
  __webpack_exports__.JinaCLIPModel;
  __webpack_exports__.JinaCLIPPreTrainedModel;
  __webpack_exports__.JinaCLIPProcessor;
  __webpack_exports__.JinaCLIPTextModel;
  __webpack_exports__.JinaCLIPVisionModel;
  __webpack_exports__.Lfm2ForCausalLM;
  __webpack_exports__.Lfm2Model;
  __webpack_exports__.Lfm2PreTrainedModel;
  __webpack_exports__.LiteWhisperForConditionalGeneration;
  __webpack_exports__.Llama4ForCausalLM;
  __webpack_exports__.Llama4PreTrainedModel;
  __webpack_exports__.LlamaForCausalLM;
  __webpack_exports__.LlamaModel;
  __webpack_exports__.LlamaPreTrainedModel;
  __webpack_exports__.LlamaTokenizer;
  __webpack_exports__.LlavaForConditionalGeneration;
  __webpack_exports__.LlavaOnevisionForConditionalGeneration;
  __webpack_exports__.LlavaOnevisionImageProcessor;
  __webpack_exports__.LlavaPreTrainedModel;
  __webpack_exports__.LlavaProcessor;
  __webpack_exports__.LlavaQwen2ForCausalLM;
  __webpack_exports__.LogitsProcessor;
  __webpack_exports__.LogitsProcessorList;
  __webpack_exports__.LogitsWarper;
  __webpack_exports__.LongT5ForConditionalGeneration;
  __webpack_exports__.LongT5Model;
  __webpack_exports__.LongT5PreTrainedModel;
  __webpack_exports__.M2M100ForConditionalGeneration;
  __webpack_exports__.M2M100Model;
  __webpack_exports__.M2M100PreTrainedModel;
  __webpack_exports__.M2M100Tokenizer;
  __webpack_exports__.MBart50Tokenizer;
  __webpack_exports__.MBartForCausalLM;
  __webpack_exports__.MBartForConditionalGeneration;
  __webpack_exports__.MBartForSequenceClassification;
  __webpack_exports__.MBartModel;
  __webpack_exports__.MBartPreTrainedModel;
  __webpack_exports__.MBartTokenizer;
  __webpack_exports__.MPNetForMaskedLM;
  __webpack_exports__.MPNetForQuestionAnswering;
  __webpack_exports__.MPNetForSequenceClassification;
  __webpack_exports__.MPNetForTokenClassification;
  __webpack_exports__.MPNetModel;
  __webpack_exports__.MPNetPreTrainedModel;
  __webpack_exports__.MPNetTokenizer;
  __webpack_exports__.MT5ForConditionalGeneration;
  __webpack_exports__.MT5Model;
  __webpack_exports__.MT5PreTrainedModel;
  __webpack_exports__.MarianMTModel;
  __webpack_exports__.MarianModel;
  __webpack_exports__.MarianPreTrainedModel;
  __webpack_exports__.MarianTokenizer;
  __webpack_exports__.Mask2FormerImageProcessor;
  __webpack_exports__.MaskFormerFeatureExtractor;
  __webpack_exports__.MaskFormerForInstanceSegmentation;
  __webpack_exports__.MaskFormerImageProcessor;
  __webpack_exports__.MaskFormerModel;
  __webpack_exports__.MaskFormerPreTrainedModel;
  __webpack_exports__.MaskedLMOutput;
  __webpack_exports__.MaxLengthCriteria;
  __webpack_exports__.Metric3DForDepthEstimation;
  __webpack_exports__.Metric3DPreTrainedModel;
  __webpack_exports__.Metric3Dv2ForDepthEstimation;
  __webpack_exports__.Metric3Dv2PreTrainedModel;
  __webpack_exports__.MgpstrForSceneTextRecognition;
  __webpack_exports__.MgpstrModelOutput;
  __webpack_exports__.MgpstrPreTrainedModel;
  __webpack_exports__.MgpstrProcessor;
  __webpack_exports__.MgpstrTokenizer;
  __webpack_exports__.MimiDecoderModel;
  __webpack_exports__.MimiDecoderOutput;
  __webpack_exports__.MimiEncoderModel;
  __webpack_exports__.MimiEncoderOutput;
  __webpack_exports__.MimiModel;
  __webpack_exports__.MimiPreTrainedModel;
  __webpack_exports__.MinLengthLogitsProcessor;
  __webpack_exports__.MinNewTokensLengthLogitsProcessor;
  __webpack_exports__.MistralForCausalLM;
  __webpack_exports__.MistralModel;
  __webpack_exports__.MistralPreTrainedModel;
  __webpack_exports__.MobileBertForMaskedLM;
  __webpack_exports__.MobileBertForQuestionAnswering;
  __webpack_exports__.MobileBertForSequenceClassification;
  __webpack_exports__.MobileBertModel;
  __webpack_exports__.MobileBertPreTrainedModel;
  __webpack_exports__.MobileBertTokenizer;
  __webpack_exports__.MobileLLMForCausalLM;
  __webpack_exports__.MobileLLMModel;
  __webpack_exports__.MobileLLMPreTrainedModel;
  __webpack_exports__.MobileNetV1FeatureExtractor;
  __webpack_exports__.MobileNetV1ForImageClassification;
  __webpack_exports__.MobileNetV1ForSemanticSegmentation;
  __webpack_exports__.MobileNetV1ImageProcessor;
  __webpack_exports__.MobileNetV1Model;
  __webpack_exports__.MobileNetV1PreTrainedModel;
  __webpack_exports__.MobileNetV2FeatureExtractor;
  __webpack_exports__.MobileNetV2ForImageClassification;
  __webpack_exports__.MobileNetV2ForSemanticSegmentation;
  __webpack_exports__.MobileNetV2ImageProcessor;
  __webpack_exports__.MobileNetV2Model;
  __webpack_exports__.MobileNetV2PreTrainedModel;
  __webpack_exports__.MobileNetV3FeatureExtractor;
  __webpack_exports__.MobileNetV3ForImageClassification;
  __webpack_exports__.MobileNetV3ForSemanticSegmentation;
  __webpack_exports__.MobileNetV3ImageProcessor;
  __webpack_exports__.MobileNetV3Model;
  __webpack_exports__.MobileNetV3PreTrainedModel;
  __webpack_exports__.MobileNetV4FeatureExtractor;
  __webpack_exports__.MobileNetV4ForImageClassification;
  __webpack_exports__.MobileNetV4ForSemanticSegmentation;
  __webpack_exports__.MobileNetV4ImageProcessor;
  __webpack_exports__.MobileNetV4Model;
  __webpack_exports__.MobileNetV4PreTrainedModel;
  __webpack_exports__.MobileViTFeatureExtractor;
  __webpack_exports__.MobileViTForImageClassification;
  __webpack_exports__.MobileViTImageProcessor;
  __webpack_exports__.MobileViTModel;
  __webpack_exports__.MobileViTPreTrainedModel;
  __webpack_exports__.MobileViTV2ForImageClassification;
  __webpack_exports__.MobileViTV2Model;
  __webpack_exports__.MobileViTV2PreTrainedModel;
  __webpack_exports__.ModelOutput;
  __webpack_exports__.ModernBertDecoderForCausalLM;
  __webpack_exports__.ModernBertDecoderModel;
  __webpack_exports__.ModernBertDecoderPreTrainedModel;
  __webpack_exports__.ModernBertForMaskedLM;
  __webpack_exports__.ModernBertForSequenceClassification;
  __webpack_exports__.ModernBertForTokenClassification;
  __webpack_exports__.ModernBertModel;
  __webpack_exports__.ModernBertPreTrainedModel;
  __webpack_exports__.Moondream1ForConditionalGeneration;
  __webpack_exports__.MoonshineFeatureExtractor;
  __webpack_exports__.MoonshineForConditionalGeneration;
  __webpack_exports__.MoonshineModel;
  __webpack_exports__.MoonshinePreTrainedModel;
  __webpack_exports__.MoonshineProcessor;
  __webpack_exports__.MptForCausalLM;
  __webpack_exports__.MptModel;
  __webpack_exports__.MptPreTrainedModel;
  __webpack_exports__.MultiModalityCausalLM;
  __webpack_exports__.MultiModalityPreTrainedModel;
  __webpack_exports__.MusicgenForCausalLM;
  __webpack_exports__.MusicgenForConditionalGeneration;
  __webpack_exports__.MusicgenModel;
  __webpack_exports__.MusicgenPreTrainedModel;
  __webpack_exports__.NeoBertForMaskedLM;
  __webpack_exports__.NeoBertForQuestionAnswering;
  __webpack_exports__.NeoBertForSequenceClassification;
  __webpack_exports__.NeoBertForTokenClassification;
  __webpack_exports__.NeoBertModel;
  __webpack_exports__.NeoBertPreTrainedModel;
  __webpack_exports__.NllbTokenizer;
  __webpack_exports__.NoBadWordsLogitsProcessor;
  __webpack_exports__.NoRepeatNGramLogitsProcessor;
  __webpack_exports__.NomicBertModel;
  __webpack_exports__.NomicBertPreTrainedModel;
  __webpack_exports__.NougatImageProcessor;
  __webpack_exports__.NougatTokenizer;
  __webpack_exports__.OPTForCausalLM;
  __webpack_exports__.OPTModel;
  __webpack_exports__.OPTPreTrainedModel;
  __webpack_exports__.ObjectDetectionPipeline;
  __webpack_exports__.Olmo2ForCausalLM;
  __webpack_exports__.Olmo2Model;
  __webpack_exports__.Olmo2PreTrainedModel;
  __webpack_exports__.OlmoForCausalLM;
  __webpack_exports__.OlmoModel;
  __webpack_exports__.OlmoPreTrainedModel;
  __webpack_exports__.OpenELMForCausalLM;
  __webpack_exports__.OpenELMModel;
  __webpack_exports__.OpenELMPreTrainedModel;
  __webpack_exports__.OwlViTFeatureExtractor;
  __webpack_exports__.OwlViTForObjectDetection;
  __webpack_exports__.OwlViTImageProcessor;
  __webpack_exports__.OwlViTModel;
  __webpack_exports__.OwlViTPreTrainedModel;
  __webpack_exports__.OwlViTProcessor;
  __webpack_exports__.Owlv2ForObjectDetection;
  __webpack_exports__.Owlv2ImageProcessor;
  __webpack_exports__.Owlv2Model;
  __webpack_exports__.Owlv2PreTrainedModel;
  __webpack_exports__.PaliGemmaForConditionalGeneration;
  __webpack_exports__.PaliGemmaPreTrainedModel;
  __webpack_exports__.PaliGemmaProcessor;
  __webpack_exports__.PatchTSMixerForPrediction;
  __webpack_exports__.PatchTSMixerModel;
  __webpack_exports__.PatchTSMixerPreTrainedModel;
  __webpack_exports__.PatchTSTForPrediction;
  __webpack_exports__.PatchTSTModel;
  __webpack_exports__.PatchTSTPreTrainedModel;
  __webpack_exports__.Phi3ForCausalLM;
  __webpack_exports__.Phi3Model;
  __webpack_exports__.Phi3PreTrainedModel;
  __webpack_exports__.Phi3VForCausalLM;
  __webpack_exports__.Phi3VImageProcessor;
  __webpack_exports__.Phi3VPreTrainedModel;
  __webpack_exports__.Phi3VProcessor;
  __webpack_exports__.PhiForCausalLM;
  __webpack_exports__.PhiModel;
  __webpack_exports__.PhiPreTrainedModel;
  __webpack_exports__.Pipeline;
  __webpack_exports__.PreTrainedModel;
  __webpack_exports__.PreTrainedTokenizer;
  __webpack_exports__.PretrainedConfig;
  __webpack_exports__.PretrainedMixin;
  __webpack_exports__.Processor;
  __webpack_exports__.PvtForImageClassification;
  __webpack_exports__.PvtImageProcessor;
  __webpack_exports__.PvtModel;
  __webpack_exports__.PvtPreTrainedModel;
  __webpack_exports__.PyAnnoteFeatureExtractor;
  __webpack_exports__.PyAnnoteForAudioFrameClassification;
  __webpack_exports__.PyAnnoteModel;
  __webpack_exports__.PyAnnotePreTrainedModel;
  __webpack_exports__.PyAnnoteProcessor;
  __webpack_exports__.QuestionAnsweringModelOutput;
  __webpack_exports__.QuestionAnsweringPipeline;
  __webpack_exports__.Qwen2ForCausalLM;
  __webpack_exports__.Qwen2Model;
  __webpack_exports__.Qwen2PreTrainedModel;
  __webpack_exports__.Qwen2Tokenizer;
  __webpack_exports__.Qwen2VLForConditionalGeneration;
  __webpack_exports__.Qwen2VLImageProcessor;
  __webpack_exports__.Qwen2VLPreTrainedModel;
  __webpack_exports__.Qwen2VLProcessor;
  __webpack_exports__.Qwen3ForCausalLM;
  __webpack_exports__.Qwen3Model;
  __webpack_exports__.Qwen3PreTrainedModel;
  __webpack_exports__.RFDetrForObjectDetection;
  __webpack_exports__.RFDetrModel;
  __webpack_exports__.RFDetrObjectDetectionOutput;
  __webpack_exports__.RFDetrPreTrainedModel;
  __webpack_exports__.RTDetrForObjectDetection;
  __webpack_exports__.RTDetrImageProcessor;
  __webpack_exports__.RTDetrModel;
  __webpack_exports__.RTDetrObjectDetectionOutput;
  __webpack_exports__.RTDetrPreTrainedModel;
  __webpack_exports__.RTDetrV2ForObjectDetection;
  __webpack_exports__.RTDetrV2Model;
  __webpack_exports__.RTDetrV2ObjectDetectionOutput;
  __webpack_exports__.RTDetrV2PreTrainedModel;
  __webpack_exports__.RawAudio;
  __webpack_exports__.RawImage;
  __webpack_exports__.RawVideo;
  __webpack_exports__.RawVideoFrame;
  __webpack_exports__.RepetitionPenaltyLogitsProcessor;
  __webpack_exports__.ResNetForImageClassification;
  __webpack_exports__.ResNetModel;
  __webpack_exports__.ResNetPreTrainedModel;
  __webpack_exports__.RoFormerForMaskedLM;
  __webpack_exports__.RoFormerForQuestionAnswering;
  __webpack_exports__.RoFormerForSequenceClassification;
  __webpack_exports__.RoFormerForTokenClassification;
  __webpack_exports__.RoFormerModel;
  __webpack_exports__.RoFormerPreTrainedModel;
  __webpack_exports__.RoFormerTokenizer;
  __webpack_exports__.RobertaForMaskedLM;
  __webpack_exports__.RobertaForQuestionAnswering;
  __webpack_exports__.RobertaForSequenceClassification;
  __webpack_exports__.RobertaForTokenClassification;
  __webpack_exports__.RobertaModel;
  __webpack_exports__.RobertaPreTrainedModel;
  __webpack_exports__.RobertaTokenizer;
  __webpack_exports__.SamImageProcessor;
  __webpack_exports__.SamImageSegmentationOutput;
  __webpack_exports__.SamModel;
  __webpack_exports__.SamPreTrainedModel;
  __webpack_exports__.SamProcessor;
  __webpack_exports__.SapiensForDepthEstimation;
  __webpack_exports__.SapiensForNormalEstimation;
  __webpack_exports__.SapiensForSemanticSegmentation;
  __webpack_exports__.SapiensPreTrainedModel;
  __webpack_exports__.SeamlessM4TFeatureExtractor;
  __webpack_exports__.SegformerFeatureExtractor;
  __webpack_exports__.SegformerForImageClassification;
  __webpack_exports__.SegformerForSemanticSegmentation;
  __webpack_exports__.SegformerImageProcessor;
  __webpack_exports__.SegformerModel;
  __webpack_exports__.SegformerPreTrainedModel;
  __webpack_exports__.Seq2SeqLMOutput;
  __webpack_exports__.SequenceClassifierOutput;
  __webpack_exports__.SiglipImageProcessor;
  __webpack_exports__.SiglipModel;
  __webpack_exports__.SiglipPreTrainedModel;
  __webpack_exports__.SiglipTextModel;
  __webpack_exports__.SiglipTokenizer;
  __webpack_exports__.SiglipVisionModel;
  __webpack_exports__.SmolLM3ForCausalLM;
  __webpack_exports__.SmolLM3Model;
  __webpack_exports__.SmolLM3PreTrainedModel;
  __webpack_exports__.SmolVLMForConditionalGeneration;
  __webpack_exports__.SmolVLMImageProcessor;
  __webpack_exports__.SmolVLMProcessor;
  __webpack_exports__.SnacDecoderModel;
  __webpack_exports__.SnacEncoderModel;
  __webpack_exports__.SnacFeatureExtractor;
  __webpack_exports__.SnacModel;
  __webpack_exports__.SnacPreTrainedModel;
  __webpack_exports__.SpeechT5FeatureExtractor;
  __webpack_exports__.SpeechT5ForSpeechToText;
  __webpack_exports__.SpeechT5ForTextToSpeech;
  __webpack_exports__.SpeechT5HifiGan;
  __webpack_exports__.SpeechT5Model;
  __webpack_exports__.SpeechT5PreTrainedModel;
  __webpack_exports__.SpeechT5Processor;
  __webpack_exports__.SpeechT5Tokenizer;
  __webpack_exports__.SqueezeBertForMaskedLM;
  __webpack_exports__.SqueezeBertForQuestionAnswering;
  __webpack_exports__.SqueezeBertForSequenceClassification;
  __webpack_exports__.SqueezeBertModel;
  __webpack_exports__.SqueezeBertPreTrainedModel;
  __webpack_exports__.SqueezeBertTokenizer;
  __webpack_exports__.StableLmForCausalLM;
  __webpack_exports__.StableLmModel;
  __webpack_exports__.StableLmPreTrainedModel;
  __webpack_exports__.Starcoder2ForCausalLM;
  __webpack_exports__.Starcoder2Model;
  __webpack_exports__.Starcoder2PreTrainedModel;
  __webpack_exports__.StoppingCriteria;
  __webpack_exports__.StoppingCriteriaList;
  __webpack_exports__.StyleTextToSpeech2Model;
  __webpack_exports__.StyleTextToSpeech2PreTrainedModel;
  __webpack_exports__.SummarizationPipeline;
  __webpack_exports__.SuppressTokensAtBeginLogitsProcessor;
  __webpack_exports__.Swin2SRForImageSuperResolution;
  __webpack_exports__.Swin2SRImageProcessor;
  __webpack_exports__.Swin2SRModel;
  __webpack_exports__.Swin2SRPreTrainedModel;
  __webpack_exports__.SwinForImageClassification;
  __webpack_exports__.SwinForSemanticSegmentation;
  __webpack_exports__.SwinModel;
  __webpack_exports__.SwinPreTrainedModel;
  __webpack_exports__.T5ForConditionalGeneration;
  __webpack_exports__.T5Model;
  __webpack_exports__.T5PreTrainedModel;
  __webpack_exports__.T5Tokenizer;
  __webpack_exports__.TableTransformerForObjectDetection;
  __webpack_exports__.TableTransformerModel;
  __webpack_exports__.TableTransformerObjectDetectionOutput;
  __webpack_exports__.TableTransformerPreTrainedModel;
  __webpack_exports__.TemperatureLogitsWarper;
  __webpack_exports__.Tensor;
  __webpack_exports__.Text2TextGenerationPipeline;
  __webpack_exports__.TextClassificationPipeline;
  __webpack_exports__.TextGenerationPipeline;
  __webpack_exports__.TextStreamer;
  __webpack_exports__.TextToAudioPipeline;
  __webpack_exports__.TokenClassificationPipeline;
  __webpack_exports__.TokenClassifierOutput;
  __webpack_exports__.TokenizerModel;
  __webpack_exports__.TopKLogitsWarper;
  __webpack_exports__.TopPLogitsWarper;
  __webpack_exports__.TrOCRForCausalLM;
  __webpack_exports__.TrOCRPreTrainedModel;
  __webpack_exports__.TranslationPipeline;
  __webpack_exports__.UltravoxModel;
  __webpack_exports__.UltravoxPreTrainedModel;
  __webpack_exports__.UltravoxProcessor;
  __webpack_exports__.UniSpeechForCTC;
  __webpack_exports__.UniSpeechForSequenceClassification;
  __webpack_exports__.UniSpeechModel;
  __webpack_exports__.UniSpeechPreTrainedModel;
  __webpack_exports__.UniSpeechSatForAudioFrameClassification;
  __webpack_exports__.UniSpeechSatForCTC;
  __webpack_exports__.UniSpeechSatForSequenceClassification;
  __webpack_exports__.UniSpeechSatModel;
  __webpack_exports__.UniSpeechSatPreTrainedModel;
  __webpack_exports__.VLChatProcessor;
  __webpack_exports__.VLMImageProcessor;
  __webpack_exports__.VaultGemmaForCausalLM;
  __webpack_exports__.VaultGemmaModel;
  __webpack_exports__.VaultGemmaPreTrainedModel;
  __webpack_exports__.ViTFeatureExtractor;
  __webpack_exports__.ViTForImageClassification;
  __webpack_exports__.ViTImageProcessor;
  __webpack_exports__.ViTMAEModel;
  __webpack_exports__.ViTMAEPreTrainedModel;
  __webpack_exports__.ViTMSNForImageClassification;
  __webpack_exports__.ViTMSNModel;
  __webpack_exports__.ViTMSNPreTrainedModel;
  __webpack_exports__.ViTModel;
  __webpack_exports__.ViTPreTrainedModel;
  __webpack_exports__.VisionEncoderDecoderModel;
  __webpack_exports__.VitMatteForImageMatting;
  __webpack_exports__.VitMatteImageProcessor;
  __webpack_exports__.VitMattePreTrainedModel;
  __webpack_exports__.VitPoseForPoseEstimation;
  __webpack_exports__.VitPoseImageProcessor;
  __webpack_exports__.VitPosePreTrainedModel;
  __webpack_exports__.VitsModel;
  __webpack_exports__.VitsModelOutput;
  __webpack_exports__.VitsPreTrainedModel;
  __webpack_exports__.VitsTokenizer;
  __webpack_exports__.VoxtralForConditionalGeneration;
  __webpack_exports__.VoxtralProcessor;
  __webpack_exports__.Wav2Vec2BertForCTC;
  __webpack_exports__.Wav2Vec2BertForSequenceClassification;
  __webpack_exports__.Wav2Vec2BertModel;
  __webpack_exports__.Wav2Vec2BertPreTrainedModel;
  __webpack_exports__.Wav2Vec2CTCTokenizer;
  __webpack_exports__.Wav2Vec2FeatureExtractor;
  __webpack_exports__.Wav2Vec2ForAudioFrameClassification;
  __webpack_exports__.Wav2Vec2ForCTC;
  __webpack_exports__.Wav2Vec2ForSequenceClassification;
  __webpack_exports__.Wav2Vec2Model;
  __webpack_exports__.Wav2Vec2PreTrainedModel;
  __webpack_exports__.Wav2Vec2Processor;
  __webpack_exports__.Wav2Vec2ProcessorWithLM;
  __webpack_exports__.WavLMForAudioFrameClassification;
  __webpack_exports__.WavLMForCTC;
  __webpack_exports__.WavLMForSequenceClassification;
  __webpack_exports__.WavLMForXVector;
  __webpack_exports__.WavLMModel;
  __webpack_exports__.WavLMPreTrainedModel;
  __webpack_exports__.WeSpeakerFeatureExtractor;
  __webpack_exports__.WeSpeakerResNetModel;
  __webpack_exports__.WeSpeakerResNetPreTrainedModel;
  __webpack_exports__.WhisperFeatureExtractor;
  __webpack_exports__.WhisperForConditionalGeneration;
  __webpack_exports__.WhisperModel;
  __webpack_exports__.WhisperPreTrainedModel;
  __webpack_exports__.WhisperProcessor;
  __webpack_exports__.WhisperTextStreamer;
  __webpack_exports__.WhisperTimeStampLogitsProcessor;
  __webpack_exports__.WhisperTokenizer;
  __webpack_exports__.XLMForQuestionAnswering;
  __webpack_exports__.XLMForSequenceClassification;
  __webpack_exports__.XLMForTokenClassification;
  __webpack_exports__.XLMModel;
  __webpack_exports__.XLMPreTrainedModel;
  __webpack_exports__.XLMRobertaForMaskedLM;
  __webpack_exports__.XLMRobertaForQuestionAnswering;
  __webpack_exports__.XLMRobertaForSequenceClassification;
  __webpack_exports__.XLMRobertaForTokenClassification;
  __webpack_exports__.XLMRobertaModel;
  __webpack_exports__.XLMRobertaPreTrainedModel;
  __webpack_exports__.XLMRobertaTokenizer;
  __webpack_exports__.XLMTokenizer;
  __webpack_exports__.XLMWithLMHeadModel;
  __webpack_exports__.XVectorOutput;
  __webpack_exports__.YolosFeatureExtractor;
  __webpack_exports__.YolosForObjectDetection;
  __webpack_exports__.YolosImageProcessor;
  __webpack_exports__.YolosModel;
  __webpack_exports__.YolosObjectDetectionOutput;
  __webpack_exports__.YolosPreTrainedModel;
  __webpack_exports__.ZeroShotAudioClassificationPipeline;
  __webpack_exports__.ZeroShotClassificationPipeline;
  __webpack_exports__.ZeroShotImageClassificationPipeline;
  __webpack_exports__.ZeroShotObjectDetectionPipeline;
  __webpack_exports__.bankers_round;
  __webpack_exports__.cat;
  __webpack_exports__.cos_sim;
  __webpack_exports__.dot;
  __webpack_exports__.dynamic_time_warping;
  __webpack_exports__.env;
  __webpack_exports__.full;
  __webpack_exports__.full_like;
  __webpack_exports__.getCacheShapes;
  __webpack_exports__.hamming;
  __webpack_exports__.hanning;
  __webpack_exports__.interpolate;
  __webpack_exports__.interpolate_4d;
  __webpack_exports__.interpolate_data;
  __webpack_exports__.is_chinese_char;
  __webpack_exports__.layer_norm;
  __webpack_exports__.load_image;
  __webpack_exports__.load_video;
  __webpack_exports__.log_softmax;
  __webpack_exports__.magnitude;
  __webpack_exports__.matmul;
  __webpack_exports__.max;
  __webpack_exports__.mean;
  __webpack_exports__.mean_pooling;
  __webpack_exports__.medianFilter;
  __webpack_exports__.mel_filter_bank;
  __webpack_exports__.min;
  __webpack_exports__.ones;
  __webpack_exports__.ones_like;
  __webpack_exports__.permute;
  __webpack_exports__.permute_data;
  __webpack_exports__.pipeline;
  __webpack_exports__.quantize_embeddings;
  __webpack_exports__.rand;
  __webpack_exports__.read_audio;
  __webpack_exports__.rfft;
  __webpack_exports__.round;
  __webpack_exports__.slice;
  __webpack_exports__.softmax;
  __webpack_exports__.spectrogram;
  __webpack_exports__.stack;
  __webpack_exports__.std_mean;
  __webpack_exports__.topk;
  __webpack_exports__.window_function;
  __webpack_exports__.zeros;
  __webpack_exports__.zeros_like;
  class GemmaVariationGenerator {
    constructor() {
      this.worker = null, this.isReady = false, this.isLoading = false, this.progress = 0, this.status = "Not initialized", this.callbacks = {
        onProgress: null,
        onReady: null,
        onError: null,
        onVariation: null
      }, console.log("\u{1F916} Gemma Variation Generator initialized");
    }
    setCallbacks(e) {
      this.callbacks = {
        ...this.callbacks,
        ...e
      };
    }
    async initialize() {
      if (this.isReady || this.isLoading) {
        console.log("\u26A0\uFE0F Generator already initialized or loading");
        return;
      }
      this.isLoading = true, this.status = "Initializing worker...";
      try {
        this.worker = new Worker(new URL("/llm-wordgraph-exact/assets/gemma-worker-9fe06813.js", self.location), {
          type: "module"
        }), this.worker.onmessage = (e) => this.handleWorkerMessage(e), this.worker.onerror = (e) => this.handleWorkerError(e), this.worker.postMessage({
          type: "initialize"
        }), console.log("\u{1F680} Worker created, waiting for model to load...");
      } catch (e) {
        throw console.error("\u274C Failed to create worker:", e), this.isLoading = false, this.status = "Error during initialization", this.callbacks.onError && this.callbacks.onError(e.message), e;
      }
    }
    handleWorkerMessage(e) {
      const { type: t, data: s } = e.data;
      switch (t) {
        case "progress":
          this.progress = s.progress, this.status = s.message, console.log(`\u{1F4CA} Progress: ${s.progress}% - ${s.message}`), this.callbacks.onProgress && this.callbacks.onProgress(s.progress, s.message);
          break;
        case "ready":
          this.isReady = true, this.isLoading = false, this.progress = 100, this.status = "Ready", console.log("\u2705 Gemma model loaded and ready!"), this.callbacks.onReady && this.callbacks.onReady();
          break;
        case "variation":
          console.log(`\u{1F4DD} Variation ${s.index + 1}: ${s.text.substring(0, 50)}...`), this.callbacks.onVariation && this.callbacks.onVariation(s.text, s.index, s.total);
          break;
        case "complete":
          console.log("\u2705 All variations generated");
          break;
        case "error":
          console.error("\u274C Worker error:", s.error), this.status = "Error: " + s.error, this.callbacks.onError && this.callbacks.onError(s.error);
          break;
      }
    }
    handleWorkerError(e) {
      console.error("\u274C Worker error:", e), this.isLoading = false, this.status = "Worker error", this.callbacks.onError && this.callbacks.onError(e.message);
    }
    async generateVariations(e, t = 5, s = {}) {
      if (!this.isReady)
        throw new Error("Generator not ready. Call initialize() first.");
      return new Promise((l, f) => {
        const d = [];
        let w = 0;
        const g = this.callbacks.onVariation;
        this.callbacks.onVariation = (h, r, n) => {
          d[r] = h, w++, g && g(h, r, n), w === t && (this.callbacks.onVariation = g, l(d));
        };
        const _ = this.callbacks.onError;
        this.callbacks.onError = (h) => {
          this.callbacks.onVariation = g, this.callbacks.onError = _, f(new Error(h));
        }, this.worker.postMessage({
          type: "generate",
          data: {
            prompt: e,
            count: t,
            options: {
              max_new_tokens: s.maxTokens || 50,
              temperature: s.temperature || 0.9,
              top_p: s.topP || 0.95,
              top_k: s.topK || 50,
              do_sample: true
            }
          }
        });
      });
    }
    getStatus() {
      return {
        isReady: this.isReady,
        isLoading: this.isLoading,
        progress: this.progress,
        status: this.status
      };
    }
    destroy() {
      this.worker && (this.worker.terminate(), this.worker = null, this.isReady = false, console.log("\u{1F6D1} Gemma worker terminated"));
    }
  }
  typeof window < "u" && (window.GemmaVariationGenerator = GemmaVariationGenerator, console.log("\u2705 GemmaVariationGenerator available globally"));
  window.gemmaGenerator = new GemmaVariationGenerator();
  window.gemmaGenerator.setCallbacks({
    onProgress: (i, e) => {
      const t = document.getElementById("progressBar"), s = document.getElementById("progressText"), l = document.getElementById("gemmaStatus");
      t.style.width = i + "%", s.textContent = i + "%", l.textContent = e, console.log(`Progress: ${i}% - ${e}`);
    },
    onReady: () => {
      const i = document.getElementById("gemmaStatus"), e = document.getElementById("generateBtn");
      i.textContent = "\u2713 Gemma 270M ready!", e.disabled = false, console.log("\u2713 Gemma ready for generation");
    },
    onError: (i) => {
      const e = document.getElementById("gemmaStatus");
      e.textContent = "\u2717 Error: " + i.message, console.error("Gemma error:", i);
    },
    onVariation: (i, e, t) => {
      console.log(`Generated ${e + 1}/${t}: ${i}`);
    }
  });
  console.log("Initializing Gemma 270M...");
  window.gemmaGenerator.initialize();
  window.GemmaVariationGenerator = GemmaVariationGenerator;
  class InternMap extends Map {
    constructor(e, t = keyof) {
      if (super(), Object.defineProperties(this, {
        _intern: {
          value: /* @__PURE__ */ new Map()
        },
        _key: {
          value: t
        }
      }), e != null)
        for (const [s, l] of e)
          this.set(s, l);
    }
    get(e) {
      return super.get(intern_get(this, e));
    }
    has(e) {
      return super.has(intern_get(this, e));
    }
    set(e, t) {
      return super.set(intern_set(this, e), t);
    }
    delete(e) {
      return super.delete(intern_delete(this, e));
    }
  }
  function intern_get({ _intern: i, _key: e }, t) {
    const s = e(t);
    return i.has(s) ? i.get(s) : t;
  }
  function intern_set({ _intern: i, _key: e }, t) {
    const s = e(t);
    return i.has(s) ? i.get(s) : (i.set(s, t), t);
  }
  function intern_delete({ _intern: i, _key: e }, t) {
    const s = e(t);
    return i.has(s) && (t = i.get(s), i.delete(s)), t;
  }
  function keyof(i) {
    return i !== null && typeof i == "object" ? i.valueOf() : i;
  }
  function min$1(i, e) {
    let t;
    if (e === void 0)
      for (const s of i)
        s != null && (t > s || t === void 0 && s >= s) && (t = s);
    else {
      let s = -1;
      for (let l of i)
        (l = e(l, ++s, i)) != null && (t > l || t === void 0 && l >= l) && (t = l);
    }
    return t;
  }
  function mean$1(i, e) {
    let t = 0, s = 0;
    if (e === void 0)
      for (let l of i)
        l != null && (l = +l) >= l && (++t, s += l);
    else {
      let l = -1;
      for (let f of i)
        (f = e(f, ++l, i)) != null && (f = +f) >= f && (++t, s += f);
    }
    if (t)
      return s / t;
  }
  var noop = {
    value: () => {
    }
  };
  function dispatch() {
    for (var i = 0, e = arguments.length, t = {}, s; i < e; ++i) {
      if (!(s = arguments[i] + "") || s in t || /[\s.]/.test(s))
        throw new Error("illegal type: " + s);
      t[s] = [];
    }
    return new Dispatch(t);
  }
  function Dispatch(i) {
    this._ = i;
  }
  function parseTypenames$1(i, e) {
    return i.trim().split(/^|\s+/).map(function(t) {
      var s = "", l = t.indexOf(".");
      if (l >= 0 && (s = t.slice(l + 1), t = t.slice(0, l)), t && !e.hasOwnProperty(t))
        throw new Error("unknown type: " + t);
      return {
        type: t,
        name: s
      };
    });
  }
  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    on: function(i, e) {
      var t = this._, s = parseTypenames$1(i + "", t), l, f = -1, d = s.length;
      if (arguments.length < 2) {
        for (; ++f < d; )
          if ((l = (i = s[f]).type) && (l = get$1(t[l], i.name)))
            return l;
        return;
      }
      if (e != null && typeof e != "function")
        throw new Error("invalid callback: " + e);
      for (; ++f < d; )
        if (l = (i = s[f]).type)
          t[l] = set$1(t[l], i.name, e);
        else if (e == null)
          for (l in t)
            t[l] = set$1(t[l], i.name, null);
      return this;
    },
    copy: function() {
      var i = {}, e = this._;
      for (var t in e)
        i[t] = e[t].slice();
      return new Dispatch(i);
    },
    call: function(i, e) {
      if ((l = arguments.length - 2) > 0)
        for (var t = new Array(l), s = 0, l, f; s < l; ++s)
          t[s] = arguments[s + 2];
      if (!this._.hasOwnProperty(i))
        throw new Error("unknown type: " + i);
      for (f = this._[i], s = 0, l = f.length; s < l; ++s)
        f[s].value.apply(e, t);
    },
    apply: function(i, e, t) {
      if (!this._.hasOwnProperty(i))
        throw new Error("unknown type: " + i);
      for (var s = this._[i], l = 0, f = s.length; l < f; ++l)
        s[l].value.apply(e, t);
    }
  };
  function get$1(i, e) {
    for (var t = 0, s = i.length, l; t < s; ++t)
      if ((l = i[t]).name === e)
        return l.value;
  }
  function set$1(i, e, t) {
    for (var s = 0, l = i.length; s < l; ++s)
      if (i[s].name === e) {
        i[s] = noop, i = i.slice(0, s).concat(i.slice(s + 1));
        break;
      }
    return t != null && i.push({
      name: e,
      value: t
    }), i;
  }
  var xhtml = "http://www.w3.org/1999/xhtml";
  const namespaces = {
    svg: "http://www.w3.org/2000/svg",
    xhtml,
    xlink: "http://www.w3.org/1999/xlink",
    xml: "http://www.w3.org/XML/1998/namespace",
    xmlns: "http://www.w3.org/2000/xmlns/"
  };
  function namespace(i) {
    var e = i += "", t = e.indexOf(":");
    return t >= 0 && (e = i.slice(0, t)) !== "xmlns" && (i = i.slice(t + 1)), namespaces.hasOwnProperty(e) ? {
      space: namespaces[e],
      local: i
    } : i;
  }
  function creatorInherit(i) {
    return function() {
      var e = this.ownerDocument, t = this.namespaceURI;
      return t === xhtml && e.documentElement.namespaceURI === xhtml ? e.createElement(i) : e.createElementNS(t, i);
    };
  }
  function creatorFixed(i) {
    return function() {
      return this.ownerDocument.createElementNS(i.space, i.local);
    };
  }
  function creator(i) {
    var e = namespace(i);
    return (e.local ? creatorFixed : creatorInherit)(e);
  }
  function none() {
  }
  function selector(i) {
    return i == null ? none : function() {
      return this.querySelector(i);
    };
  }
  function selection_select(i) {
    typeof i != "function" && (i = selector(i));
    for (var e = this._groups, t = e.length, s = new Array(t), l = 0; l < t; ++l)
      for (var f = e[l], d = f.length, w = s[l] = new Array(d), g, _, h = 0; h < d; ++h)
        (g = f[h]) && (_ = i.call(g, g.__data__, h, f)) && ("__data__" in g && (_.__data__ = g.__data__), w[h] = _);
    return new Selection$1(s, this._parents);
  }
  function array$1(i) {
    return i == null ? [] : Array.isArray(i) ? i : Array.from(i);
  }
  function empty() {
    return [];
  }
  function selectorAll(i) {
    return i == null ? empty : function() {
      return this.querySelectorAll(i);
    };
  }
  function arrayAll(i) {
    return function() {
      return array$1(i.apply(this, arguments));
    };
  }
  function selection_selectAll(i) {
    typeof i == "function" ? i = arrayAll(i) : i = selectorAll(i);
    for (var e = this._groups, t = e.length, s = [], l = [], f = 0; f < t; ++f)
      for (var d = e[f], w = d.length, g, _ = 0; _ < w; ++_)
        (g = d[_]) && (s.push(i.call(g, g.__data__, _, d)), l.push(g));
    return new Selection$1(s, l);
  }
  function matcher(i) {
    return function() {
      return this.matches(i);
    };
  }
  function childMatcher(i) {
    return function(e) {
      return e.matches(i);
    };
  }
  var find$1 = Array.prototype.find;
  function childFind(i) {
    return function() {
      return find$1.call(this.children, i);
    };
  }
  function childFirst() {
    return this.firstElementChild;
  }
  function selection_selectChild(i) {
    return this.select(i == null ? childFirst : childFind(typeof i == "function" ? i : childMatcher(i)));
  }
  var filter = Array.prototype.filter;
  function children() {
    return Array.from(this.children);
  }
  function childrenFilter(i) {
    return function() {
      return filter.call(this.children, i);
    };
  }
  function selection_selectChildren(i) {
    return this.selectAll(i == null ? children : childrenFilter(typeof i == "function" ? i : childMatcher(i)));
  }
  function selection_filter(i) {
    typeof i != "function" && (i = matcher(i));
    for (var e = this._groups, t = e.length, s = new Array(t), l = 0; l < t; ++l)
      for (var f = e[l], d = f.length, w = s[l] = [], g, _ = 0; _ < d; ++_)
        (g = f[_]) && i.call(g, g.__data__, _, f) && w.push(g);
    return new Selection$1(s, this._parents);
  }
  function sparse(i) {
    return new Array(i.length);
  }
  function selection_enter() {
    return new Selection$1(this._enter || this._groups.map(sparse), this._parents);
  }
  function EnterNode(i, e) {
    this.ownerDocument = i.ownerDocument, this.namespaceURI = i.namespaceURI, this._next = null, this._parent = i, this.__data__ = e;
  }
  EnterNode.prototype = {
    constructor: EnterNode,
    appendChild: function(i) {
      return this._parent.insertBefore(i, this._next);
    },
    insertBefore: function(i, e) {
      return this._parent.insertBefore(i, e);
    },
    querySelector: function(i) {
      return this._parent.querySelector(i);
    },
    querySelectorAll: function(i) {
      return this._parent.querySelectorAll(i);
    }
  };
  function constant$5(i) {
    return function() {
      return i;
    };
  }
  function bindIndex(i, e, t, s, l, f) {
    for (var d = 0, w, g = e.length, _ = f.length; d < _; ++d)
      (w = e[d]) ? (w.__data__ = f[d], s[d] = w) : t[d] = new EnterNode(i, f[d]);
    for (; d < g; ++d)
      (w = e[d]) && (l[d] = w);
  }
  function bindKey(i, e, t, s, l, f, d) {
    var w, g, _ = /* @__PURE__ */ new Map(), h = e.length, r = f.length, n = new Array(h), u;
    for (w = 0; w < h; ++w)
      (g = e[w]) && (n[w] = u = d.call(g, g.__data__, w, e) + "", _.has(u) ? l[w] = g : _.set(u, g));
    for (w = 0; w < r; ++w)
      u = d.call(i, f[w], w, f) + "", (g = _.get(u)) ? (s[w] = g, g.__data__ = f[w], _.delete(u)) : t[w] = new EnterNode(i, f[w]);
    for (w = 0; w < h; ++w)
      (g = e[w]) && _.get(n[w]) === g && (l[w] = g);
  }
  function datum(i) {
    return i.__data__;
  }
  function selection_data(i, e) {
    if (!arguments.length)
      return Array.from(this, datum);
    var t = e ? bindKey : bindIndex, s = this._parents, l = this._groups;
    typeof i != "function" && (i = constant$5(i));
    for (var f = l.length, d = new Array(f), w = new Array(f), g = new Array(f), _ = 0; _ < f; ++_) {
      var h = s[_], r = l[_], n = r.length, u = arraylike(i.call(h, h && h.__data__, _, s)), p = u.length, M = w[_] = new Array(p), P = d[_] = new Array(p), E = g[_] = new Array(n);
      t(h, r, M, P, E, u, e);
      for (var k = 0, $ = 0, A, C; k < p; ++k)
        if (A = M[k]) {
          for (k >= $ && ($ = k + 1); !(C = P[$]) && ++$ < p; )
            ;
          A._next = C || null;
        }
    }
    return d = new Selection$1(d, s), d._enter = w, d._exit = g, d;
  }
  function arraylike(i) {
    return typeof i == "object" && "length" in i ? i : Array.from(i);
  }
  function selection_exit() {
    return new Selection$1(this._exit || this._groups.map(sparse), this._parents);
  }
  function selection_join(i, e, t) {
    var s = this.enter(), l = this, f = this.exit();
    return typeof i == "function" ? (s = i(s), s && (s = s.selection())) : s = s.append(i + ""), e != null && (l = e(l), l && (l = l.selection())), t == null ? f.remove() : t(f), s && l ? s.merge(l).order() : l;
  }
  function selection_merge(i) {
    for (var e = i.selection ? i.selection() : i, t = this._groups, s = e._groups, l = t.length, f = s.length, d = Math.min(l, f), w = new Array(l), g = 0; g < d; ++g)
      for (var _ = t[g], h = s[g], r = _.length, n = w[g] = new Array(r), u, p = 0; p < r; ++p)
        (u = _[p] || h[p]) && (n[p] = u);
    for (; g < l; ++g)
      w[g] = t[g];
    return new Selection$1(w, this._parents);
  }
  function selection_order() {
    for (var i = this._groups, e = -1, t = i.length; ++e < t; )
      for (var s = i[e], l = s.length - 1, f = s[l], d; --l >= 0; )
        (d = s[l]) && (f && d.compareDocumentPosition(f) ^ 4 && f.parentNode.insertBefore(d, f), f = d);
    return this;
  }
  function selection_sort(i) {
    i || (i = ascending);
    function e(r, n) {
      return r && n ? i(r.__data__, n.__data__) : !r - !n;
    }
    for (var t = this._groups, s = t.length, l = new Array(s), f = 0; f < s; ++f) {
      for (var d = t[f], w = d.length, g = l[f] = new Array(w), _, h = 0; h < w; ++h)
        (_ = d[h]) && (g[h] = _);
      g.sort(e);
    }
    return new Selection$1(l, this._parents).order();
  }
  function ascending(i, e) {
    return i < e ? -1 : i > e ? 1 : i >= e ? 0 : NaN;
  }
  function selection_call() {
    var i = arguments[0];
    return arguments[0] = this, i.apply(null, arguments), this;
  }
  function selection_nodes() {
    return Array.from(this);
  }
  function selection_node() {
    for (var i = this._groups, e = 0, t = i.length; e < t; ++e)
      for (var s = i[e], l = 0, f = s.length; l < f; ++l) {
        var d = s[l];
        if (d)
          return d;
      }
    return null;
  }
  function selection_size() {
    let i = 0;
    for (const e of this)
      ++i;
    return i;
  }
  function selection_empty() {
    return !this.node();
  }
  function selection_each(i) {
    for (var e = this._groups, t = 0, s = e.length; t < s; ++t)
      for (var l = e[t], f = 0, d = l.length, w; f < d; ++f)
        (w = l[f]) && i.call(w, w.__data__, f, l);
    return this;
  }
  function attrRemove$1(i) {
    return function() {
      this.removeAttribute(i);
    };
  }
  function attrRemoveNS$1(i) {
    return function() {
      this.removeAttributeNS(i.space, i.local);
    };
  }
  function attrConstant$1(i, e) {
    return function() {
      this.setAttribute(i, e);
    };
  }
  function attrConstantNS$1(i, e) {
    return function() {
      this.setAttributeNS(i.space, i.local, e);
    };
  }
  function attrFunction$1(i, e) {
    return function() {
      var t = e.apply(this, arguments);
      t == null ? this.removeAttribute(i) : this.setAttribute(i, t);
    };
  }
  function attrFunctionNS$1(i, e) {
    return function() {
      var t = e.apply(this, arguments);
      t == null ? this.removeAttributeNS(i.space, i.local) : this.setAttributeNS(i.space, i.local, t);
    };
  }
  function selection_attr(i, e) {
    var t = namespace(i);
    if (arguments.length < 2) {
      var s = this.node();
      return t.local ? s.getAttributeNS(t.space, t.local) : s.getAttribute(t);
    }
    return this.each((e == null ? t.local ? attrRemoveNS$1 : attrRemove$1 : typeof e == "function" ? t.local ? attrFunctionNS$1 : attrFunction$1 : t.local ? attrConstantNS$1 : attrConstant$1)(t, e));
  }
  function defaultView(i) {
    return i.ownerDocument && i.ownerDocument.defaultView || i.document && i || i.defaultView;
  }
  function styleRemove$1(i) {
    return function() {
      this.style.removeProperty(i);
    };
  }
  function styleConstant$1(i, e, t) {
    return function() {
      this.style.setProperty(i, e, t);
    };
  }
  function styleFunction$1(i, e, t) {
    return function() {
      var s = e.apply(this, arguments);
      s == null ? this.style.removeProperty(i) : this.style.setProperty(i, s, t);
    };
  }
  function selection_style(i, e, t) {
    return arguments.length > 1 ? this.each((e == null ? styleRemove$1 : typeof e == "function" ? styleFunction$1 : styleConstant$1)(i, e, t ?? "")) : styleValue(this.node(), i);
  }
  function styleValue(i, e) {
    return i.style.getPropertyValue(e) || defaultView(i).getComputedStyle(i, null).getPropertyValue(e);
  }
  function propertyRemove(i) {
    return function() {
      delete this[i];
    };
  }
  function propertyConstant(i, e) {
    return function() {
      this[i] = e;
    };
  }
  function propertyFunction(i, e) {
    return function() {
      var t = e.apply(this, arguments);
      t == null ? delete this[i] : this[i] = t;
    };
  }
  function selection_property(i, e) {
    return arguments.length > 1 ? this.each((e == null ? propertyRemove : typeof e == "function" ? propertyFunction : propertyConstant)(i, e)) : this.node()[i];
  }
  function classArray(i) {
    return i.trim().split(/^|\s+/);
  }
  function classList(i) {
    return i.classList || new ClassList(i);
  }
  function ClassList(i) {
    this._node = i, this._names = classArray(i.getAttribute("class") || "");
  }
  ClassList.prototype = {
    add: function(i) {
      var e = this._names.indexOf(i);
      e < 0 && (this._names.push(i), this._node.setAttribute("class", this._names.join(" ")));
    },
    remove: function(i) {
      var e = this._names.indexOf(i);
      e >= 0 && (this._names.splice(e, 1), this._node.setAttribute("class", this._names.join(" ")));
    },
    contains: function(i) {
      return this._names.indexOf(i) >= 0;
    }
  };
  function classedAdd(i, e) {
    for (var t = classList(i), s = -1, l = e.length; ++s < l; )
      t.add(e[s]);
  }
  function classedRemove(i, e) {
    for (var t = classList(i), s = -1, l = e.length; ++s < l; )
      t.remove(e[s]);
  }
  function classedTrue(i) {
    return function() {
      classedAdd(this, i);
    };
  }
  function classedFalse(i) {
    return function() {
      classedRemove(this, i);
    };
  }
  function classedFunction(i, e) {
    return function() {
      (e.apply(this, arguments) ? classedAdd : classedRemove)(this, i);
    };
  }
  function selection_classed(i, e) {
    var t = classArray(i + "");
    if (arguments.length < 2) {
      for (var s = classList(this.node()), l = -1, f = t.length; ++l < f; )
        if (!s.contains(t[l]))
          return false;
      return true;
    }
    return this.each((typeof e == "function" ? classedFunction : e ? classedTrue : classedFalse)(t, e));
  }
  function textRemove() {
    this.textContent = "";
  }
  function textConstant$1(i) {
    return function() {
      this.textContent = i;
    };
  }
  function textFunction$1(i) {
    return function() {
      var e = i.apply(this, arguments);
      this.textContent = e ?? "";
    };
  }
  function selection_text(i) {
    return arguments.length ? this.each(i == null ? textRemove : (typeof i == "function" ? textFunction$1 : textConstant$1)(i)) : this.node().textContent;
  }
  function htmlRemove() {
    this.innerHTML = "";
  }
  function htmlConstant(i) {
    return function() {
      this.innerHTML = i;
    };
  }
  function htmlFunction(i) {
    return function() {
      var e = i.apply(this, arguments);
      this.innerHTML = e ?? "";
    };
  }
  function selection_html(i) {
    return arguments.length ? this.each(i == null ? htmlRemove : (typeof i == "function" ? htmlFunction : htmlConstant)(i)) : this.node().innerHTML;
  }
  function raise() {
    this.nextSibling && this.parentNode.appendChild(this);
  }
  function selection_raise() {
    return this.each(raise);
  }
  function lower() {
    this.previousSibling && this.parentNode.insertBefore(this, this.parentNode.firstChild);
  }
  function selection_lower() {
    return this.each(lower);
  }
  function selection_append(i) {
    var e = typeof i == "function" ? i : creator(i);
    return this.select(function() {
      return this.appendChild(e.apply(this, arguments));
    });
  }
  function constantNull() {
    return null;
  }
  function selection_insert(i, e) {
    var t = typeof i == "function" ? i : creator(i), s = e == null ? constantNull : typeof e == "function" ? e : selector(e);
    return this.select(function() {
      return this.insertBefore(t.apply(this, arguments), s.apply(this, arguments) || null);
    });
  }
  function remove() {
    var i = this.parentNode;
    i && i.removeChild(this);
  }
  function selection_remove() {
    return this.each(remove);
  }
  function selection_cloneShallow() {
    var i = this.cloneNode(false), e = this.parentNode;
    return e ? e.insertBefore(i, this.nextSibling) : i;
  }
  function selection_cloneDeep() {
    var i = this.cloneNode(true), e = this.parentNode;
    return e ? e.insertBefore(i, this.nextSibling) : i;
  }
  function selection_clone(i) {
    return this.select(i ? selection_cloneDeep : selection_cloneShallow);
  }
  function selection_datum(i) {
    return arguments.length ? this.property("__data__", i) : this.node().__data__;
  }
  function contextListener(i) {
    return function(e) {
      i.call(this, e, this.__data__);
    };
  }
  function parseTypenames(i) {
    return i.trim().split(/^|\s+/).map(function(e) {
      var t = "", s = e.indexOf(".");
      return s >= 0 && (t = e.slice(s + 1), e = e.slice(0, s)), {
        type: e,
        name: t
      };
    });
  }
  function onRemove(i) {
    return function() {
      var e = this.__on;
      if (e) {
        for (var t = 0, s = -1, l = e.length, f; t < l; ++t)
          f = e[t], (!i.type || f.type === i.type) && f.name === i.name ? this.removeEventListener(f.type, f.listener, f.options) : e[++s] = f;
        ++s ? e.length = s : delete this.__on;
      }
    };
  }
  function onAdd(i, e, t) {
    return function() {
      var s = this.__on, l, f = contextListener(e);
      if (s) {
        for (var d = 0, w = s.length; d < w; ++d)
          if ((l = s[d]).type === i.type && l.name === i.name) {
            this.removeEventListener(l.type, l.listener, l.options), this.addEventListener(l.type, l.listener = f, l.options = t), l.value = e;
            return;
          }
      }
      this.addEventListener(i.type, f, t), l = {
        type: i.type,
        name: i.name,
        value: e,
        listener: f,
        options: t
      }, s ? s.push(l) : this.__on = [
        l
      ];
    };
  }
  function selection_on(i, e, t) {
    var s = parseTypenames(i + ""), l, f = s.length, d;
    if (arguments.length < 2) {
      var w = this.node().__on;
      if (w) {
        for (var g = 0, _ = w.length, h; g < _; ++g)
          for (l = 0, h = w[g]; l < f; ++l)
            if ((d = s[l]).type === h.type && d.name === h.name)
              return h.value;
      }
      return;
    }
    for (w = e ? onAdd : onRemove, l = 0; l < f; ++l)
      this.each(w(s[l], e, t));
    return this;
  }
  function dispatchEvent(i, e, t) {
    var s = defaultView(i), l = s.CustomEvent;
    typeof l == "function" ? l = new l(e, t) : (l = s.document.createEvent("Event"), t ? (l.initEvent(e, t.bubbles, t.cancelable), l.detail = t.detail) : l.initEvent(e, false, false)), i.dispatchEvent(l);
  }
  function dispatchConstant(i, e) {
    return function() {
      return dispatchEvent(this, i, e);
    };
  }
  function dispatchFunction(i, e) {
    return function() {
      return dispatchEvent(this, i, e.apply(this, arguments));
    };
  }
  function selection_dispatch(i, e) {
    return this.each((typeof e == "function" ? dispatchFunction : dispatchConstant)(i, e));
  }
  function* selection_iterator() {
    for (var i = this._groups, e = 0, t = i.length; e < t; ++e)
      for (var s = i[e], l = 0, f = s.length, d; l < f; ++l)
        (d = s[l]) && (yield d);
  }
  var root = [
    null
  ];
  function Selection$1(i, e) {
    this._groups = i, this._parents = e;
  }
  function selection() {
    return new Selection$1([
      [
        document.documentElement
      ]
    ], root);
  }
  function selection_selection() {
    return this;
  }
  Selection$1.prototype = selection.prototype = {
    constructor: Selection$1,
    select: selection_select,
    selectAll: selection_selectAll,
    selectChild: selection_selectChild,
    selectChildren: selection_selectChildren,
    filter: selection_filter,
    data: selection_data,
    enter: selection_enter,
    exit: selection_exit,
    join: selection_join,
    merge: selection_merge,
    selection: selection_selection,
    order: selection_order,
    sort: selection_sort,
    call: selection_call,
    nodes: selection_nodes,
    node: selection_node,
    size: selection_size,
    empty: selection_empty,
    each: selection_each,
    attr: selection_attr,
    style: selection_style,
    property: selection_property,
    classed: selection_classed,
    text: selection_text,
    html: selection_html,
    raise: selection_raise,
    lower: selection_lower,
    append: selection_append,
    insert: selection_insert,
    remove: selection_remove,
    clone: selection_clone,
    datum: selection_datum,
    on: selection_on,
    dispatch: selection_dispatch,
    [Symbol.iterator]: selection_iterator
  };
  function select(i) {
    return typeof i == "string" ? new Selection$1([
      [
        document.querySelector(i)
      ]
    ], [
      document.documentElement
    ]) : new Selection$1([
      [
        i
      ]
    ], root);
  }
  function sourceEvent(i) {
    let e;
    for (; e = i.sourceEvent; )
      i = e;
    return i;
  }
  function pointer(i, e) {
    if (i = sourceEvent(i), e === void 0 && (e = i.currentTarget), e) {
      var t = e.ownerSVGElement || e;
      if (t.createSVGPoint) {
        var s = t.createSVGPoint();
        return s.x = i.clientX, s.y = i.clientY, s = s.matrixTransform(e.getScreenCTM().inverse()), [
          s.x,
          s.y
        ];
      }
      if (e.getBoundingClientRect) {
        var l = e.getBoundingClientRect();
        return [
          i.clientX - l.left - e.clientLeft,
          i.clientY - l.top - e.clientTop
        ];
      }
    }
    return [
      i.pageX,
      i.pageY
    ];
  }
  function selectAll(i) {
    return typeof i == "string" ? new Selection$1([
      document.querySelectorAll(i)
    ], [
      document.documentElement
    ]) : new Selection$1([
      array$1(i)
    ], root);
  }
  const nonpassive = {
    passive: false
  }, nonpassivecapture = {
    capture: true,
    passive: false
  };
  function nopropagation$1(i) {
    i.stopImmediatePropagation();
  }
  function noevent$1(i) {
    i.preventDefault(), i.stopImmediatePropagation();
  }
  function dragDisable(i) {
    var e = i.document.documentElement, t = select(i).on("dragstart.drag", noevent$1, nonpassivecapture);
    "onselectstart" in e ? t.on("selectstart.drag", noevent$1, nonpassivecapture) : (e.__noselect = e.style.MozUserSelect, e.style.MozUserSelect = "none");
  }
  function yesdrag(i, e) {
    var t = i.document.documentElement, s = select(i).on("dragstart.drag", null);
    e && (s.on("click.drag", noevent$1, nonpassivecapture), setTimeout(function() {
      s.on("click.drag", null);
    }, 0)), "onselectstart" in t ? s.on("selectstart.drag", null) : (t.style.MozUserSelect = t.__noselect, delete t.__noselect);
  }
  const constant$4 = (i) => () => i;
  function DragEvent(i, { sourceEvent: e, subject: t, target: s, identifier: l, active: f, x: d, y: w, dx: g, dy: _, dispatch: h }) {
    Object.defineProperties(this, {
      type: {
        value: i,
        enumerable: true,
        configurable: true
      },
      sourceEvent: {
        value: e,
        enumerable: true,
        configurable: true
      },
      subject: {
        value: t,
        enumerable: true,
        configurable: true
      },
      target: {
        value: s,
        enumerable: true,
        configurable: true
      },
      identifier: {
        value: l,
        enumerable: true,
        configurable: true
      },
      active: {
        value: f,
        enumerable: true,
        configurable: true
      },
      x: {
        value: d,
        enumerable: true,
        configurable: true
      },
      y: {
        value: w,
        enumerable: true,
        configurable: true
      },
      dx: {
        value: g,
        enumerable: true,
        configurable: true
      },
      dy: {
        value: _,
        enumerable: true,
        configurable: true
      },
      _: {
        value: h
      }
    });
  }
  DragEvent.prototype.on = function() {
    var i = this._.on.apply(this._, arguments);
    return i === this._ ? this : i;
  };
  function defaultFilter$1(i) {
    return !i.ctrlKey && !i.button;
  }
  function defaultContainer() {
    return this.parentNode;
  }
  function defaultSubject(i, e) {
    return e ?? {
      x: i.x,
      y: i.y
    };
  }
  function defaultTouchable$1() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function drag() {
    var i = defaultFilter$1, e = defaultContainer, t = defaultSubject, s = defaultTouchable$1, l = {}, f = dispatch("start", "drag", "end"), d = 0, w, g, _, h, r = 0;
    function n(A) {
      A.on("mousedown.drag", u).filter(s).on("touchstart.drag", P).on("touchmove.drag", E, nonpassive).on("touchend.drag touchcancel.drag", k).style("touch-action", "none").style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    function u(A, C) {
      if (!(h || !i.call(this, A, C))) {
        var F = $(this, e.call(this, A, C), A, C, "mouse");
        F && (select(A.view).on("mousemove.drag", p, nonpassivecapture).on("mouseup.drag", M, nonpassivecapture), dragDisable(A.view), nopropagation$1(A), _ = false, w = A.clientX, g = A.clientY, F("start", A));
      }
    }
    function p(A) {
      if (noevent$1(A), !_) {
        var C = A.clientX - w, F = A.clientY - g;
        _ = C * C + F * F > r;
      }
      l.mouse("drag", A);
    }
    function M(A) {
      select(A.view).on("mousemove.drag mouseup.drag", null), yesdrag(A.view, _), noevent$1(A), l.mouse("end", A);
    }
    function P(A, C) {
      if (i.call(this, A, C)) {
        var F = A.changedTouches, D = e.call(this, A, C), N = F.length, R, j;
        for (R = 0; R < N; ++R)
          (j = $(this, D, A, C, F[R].identifier, F[R])) && (nopropagation$1(A), j("start", A, F[R]));
      }
    }
    function E(A) {
      var C = A.changedTouches, F = C.length, D, N;
      for (D = 0; D < F; ++D)
        (N = l[C[D].identifier]) && (noevent$1(A), N("drag", A, C[D]));
    }
    function k(A) {
      var C = A.changedTouches, F = C.length, D, N;
      for (h && clearTimeout(h), h = setTimeout(function() {
        h = null;
      }, 500), D = 0; D < F; ++D)
        (N = l[C[D].identifier]) && (nopropagation$1(A), N("end", A, C[D]));
    }
    function $(A, C, F, D, N, R) {
      var j = f.copy(), Z = pointer(R || F, C), te, J, G;
      if ((G = t.call(A, new DragEvent("beforestart", {
        sourceEvent: F,
        target: n,
        identifier: N,
        active: d,
        x: Z[0],
        y: Z[1],
        dx: 0,
        dy: 0,
        dispatch: j
      }), D)) != null)
        return te = G.x - Z[0] || 0, J = G.y - Z[1] || 0, function H(U, Q, he) {
          var fe = Z, Me;
          switch (U) {
            case "start":
              l[N] = H, Me = d++;
              break;
            case "end":
              delete l[N], --d;
            case "drag":
              Z = pointer(he || Q, C), Me = d;
              break;
          }
          j.call(U, A, new DragEvent(U, {
            sourceEvent: Q,
            subject: G,
            target: n,
            identifier: N,
            active: Me,
            x: Z[0] + te,
            y: Z[1] + J,
            dx: Z[0] - fe[0],
            dy: Z[1] - fe[1],
            dispatch: j
          }), D);
        };
    }
    return n.filter = function(A) {
      return arguments.length ? (i = typeof A == "function" ? A : constant$4(!!A), n) : i;
    }, n.container = function(A) {
      return arguments.length ? (e = typeof A == "function" ? A : constant$4(A), n) : e;
    }, n.subject = function(A) {
      return arguments.length ? (t = typeof A == "function" ? A : constant$4(A), n) : t;
    }, n.touchable = function(A) {
      return arguments.length ? (s = typeof A == "function" ? A : constant$4(!!A), n) : s;
    }, n.on = function() {
      var A = f.on.apply(f, arguments);
      return A === f ? n : A;
    }, n.clickDistance = function(A) {
      return arguments.length ? (r = (A = +A) * A, n) : Math.sqrt(r);
    }, n;
  }
  function define(i, e, t) {
    i.prototype = e.prototype = t, t.constructor = i;
  }
  function extend(i, e) {
    var t = Object.create(i.prototype);
    for (var s in e)
      t[s] = e[s];
    return t;
  }
  function Color() {
  }
  var darker = 0.7, brighter = 1 / darker, reI = "\\s*([+-]?\\d+)\\s*", reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*", reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*", reHex = /^#([0-9a-f]{3,8})$/, reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`), reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`), reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`), reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`), reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`), reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`), named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define(Color, color, {
    copy(i) {
      return Object.assign(new this.constructor(), this, i);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(i) {
    var e, t;
    return i = (i + "").trim().toLowerCase(), (e = reHex.exec(i)) ? (t = e[1].length, e = parseInt(e[1], 16), t === 6 ? rgbn(e) : t === 3 ? new Rgb(e >> 8 & 15 | e >> 4 & 240, e >> 4 & 15 | e & 240, (e & 15) << 4 | e & 15, 1) : t === 8 ? rgba(e >> 24 & 255, e >> 16 & 255, e >> 8 & 255, (e & 255) / 255) : t === 4 ? rgba(e >> 12 & 15 | e >> 8 & 240, e >> 8 & 15 | e >> 4 & 240, e >> 4 & 15 | e & 240, ((e & 15) << 4 | e & 15) / 255) : null) : (e = reRgbInteger.exec(i)) ? new Rgb(e[1], e[2], e[3], 1) : (e = reRgbPercent.exec(i)) ? new Rgb(e[1] * 255 / 100, e[2] * 255 / 100, e[3] * 255 / 100, 1) : (e = reRgbaInteger.exec(i)) ? rgba(e[1], e[2], e[3], e[4]) : (e = reRgbaPercent.exec(i)) ? rgba(e[1] * 255 / 100, e[2] * 255 / 100, e[3] * 255 / 100, e[4]) : (e = reHslPercent.exec(i)) ? hsla(e[1], e[2] / 100, e[3] / 100, 1) : (e = reHslaPercent.exec(i)) ? hsla(e[1], e[2] / 100, e[3] / 100, e[4]) : named.hasOwnProperty(i) ? rgbn(named[i]) : i === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(i) {
    return new Rgb(i >> 16 & 255, i >> 8 & 255, i & 255, 1);
  }
  function rgba(i, e, t, s) {
    return s <= 0 && (i = e = t = NaN), new Rgb(i, e, t, s);
  }
  function rgbConvert(i) {
    return i instanceof Color || (i = color(i)), i ? (i = i.rgb(), new Rgb(i.r, i.g, i.b, i.opacity)) : new Rgb();
  }
  function rgb(i, e, t, s) {
    return arguments.length === 1 ? rgbConvert(i) : new Rgb(i, e, t, s ?? 1);
  }
  function Rgb(i, e, t, s) {
    this.r = +i, this.g = +e, this.b = +t, this.opacity = +s;
  }
  define(Rgb, rgb, extend(Color, {
    brighter(i) {
      return i = i == null ? brighter : Math.pow(brighter, i), new Rgb(this.r * i, this.g * i, this.b * i, this.opacity);
    },
    darker(i) {
      return i = i == null ? darker : Math.pow(darker, i), new Rgb(this.r * i, this.g * i, this.b * i, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && -0.5 <= this.g && this.g < 255.5 && -0.5 <= this.b && this.b < 255.5 && 0 <= this.opacity && this.opacity <= 1;
    },
    hex: rgb_formatHex,
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const i = clampa(this.opacity);
    return `${i === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${i === 1 ? ")" : `, ${i})`}`;
  }
  function clampa(i) {
    return isNaN(i) ? 1 : Math.max(0, Math.min(1, i));
  }
  function clampi(i) {
    return Math.max(0, Math.min(255, Math.round(i) || 0));
  }
  function hex(i) {
    return i = clampi(i), (i < 16 ? "0" : "") + i.toString(16);
  }
  function hsla(i, e, t, s) {
    return s <= 0 ? i = e = t = NaN : t <= 0 || t >= 1 ? i = e = NaN : e <= 0 && (i = NaN), new Hsl(i, e, t, s);
  }
  function hslConvert(i) {
    if (i instanceof Hsl)
      return new Hsl(i.h, i.s, i.l, i.opacity);
    if (i instanceof Color || (i = color(i)), !i)
      return new Hsl();
    if (i instanceof Hsl)
      return i;
    i = i.rgb();
    var e = i.r / 255, t = i.g / 255, s = i.b / 255, l = Math.min(e, t, s), f = Math.max(e, t, s), d = NaN, w = f - l, g = (f + l) / 2;
    return w ? (e === f ? d = (t - s) / w + (t < s) * 6 : t === f ? d = (s - e) / w + 2 : d = (e - t) / w + 4, w /= g < 0.5 ? f + l : 2 - f - l, d *= 60) : w = g > 0 && g < 1 ? 0 : d, new Hsl(d, w, g, i.opacity);
  }
  function hsl(i, e, t, s) {
    return arguments.length === 1 ? hslConvert(i) : new Hsl(i, e, t, s ?? 1);
  }
  function Hsl(i, e, t, s) {
    this.h = +i, this.s = +e, this.l = +t, this.opacity = +s;
  }
  define(Hsl, hsl, extend(Color, {
    brighter(i) {
      return i = i == null ? brighter : Math.pow(brighter, i), new Hsl(this.h, this.s, this.l * i, this.opacity);
    },
    darker(i) {
      return i = i == null ? darker : Math.pow(darker, i), new Hsl(this.h, this.s, this.l * i, this.opacity);
    },
    rgb() {
      var i = this.h % 360 + (this.h < 0) * 360, e = isNaN(i) || isNaN(this.s) ? 0 : this.s, t = this.l, s = t + (t < 0.5 ? t : 1 - t) * e, l = 2 * t - s;
      return new Rgb(hsl2rgb(i >= 240 ? i - 240 : i + 120, l, s), hsl2rgb(i, l, s), hsl2rgb(i < 120 ? i + 240 : i - 120, l, s), this.opacity);
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
    },
    formatHsl() {
      const i = clampa(this.opacity);
      return `${i === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${i === 1 ? ")" : `, ${i})`}`;
    }
  }));
  function clamph(i) {
    return i = (i || 0) % 360, i < 0 ? i + 360 : i;
  }
  function clampt(i) {
    return Math.max(0, Math.min(1, i || 0));
  }
  function hsl2rgb(i, e, t) {
    return (i < 60 ? e + (t - e) * i / 60 : i < 180 ? t : i < 240 ? e + (t - e) * (240 - i) / 60 : e) * 255;
  }
  const constant$3 = (i) => () => i;
  function linear(i, e) {
    return function(t) {
      return i + t * e;
    };
  }
  function exponential(i, e, t) {
    return i = Math.pow(i, t), e = Math.pow(e, t) - i, t = 1 / t, function(s) {
      return Math.pow(i + s * e, t);
    };
  }
  function gamma(i) {
    return (i = +i) == 1 ? nogamma : function(e, t) {
      return t - e ? exponential(e, t, i) : constant$3(isNaN(e) ? t : e);
    };
  }
  function nogamma(i, e) {
    var t = e - i;
    return t ? linear(i, t) : constant$3(isNaN(i) ? e : i);
  }
  const interpolateRgb = function i(e) {
    var t = gamma(e);
    function s(l, f) {
      var d = t((l = rgb(l)).r, (f = rgb(f)).r), w = t(l.g, f.g), g = t(l.b, f.b), _ = nogamma(l.opacity, f.opacity);
      return function(h) {
        return l.r = d(h), l.g = w(h), l.b = g(h), l.opacity = _(h), l + "";
      };
    }
    return s.gamma = i, s;
  }(1);
  function interpolateNumber(i, e) {
    return i = +i, e = +e, function(t) {
      return i * (1 - t) + e * t;
    };
  }
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g, reB = new RegExp(reA.source, "g");
  function zero(i) {
    return function() {
      return i;
    };
  }
  function one(i) {
    return function(e) {
      return i(e) + "";
    };
  }
  function interpolateString(i, e) {
    var t = reA.lastIndex = reB.lastIndex = 0, s, l, f, d = -1, w = [], g = [];
    for (i = i + "", e = e + ""; (s = reA.exec(i)) && (l = reB.exec(e)); )
      (f = l.index) > t && (f = e.slice(t, f), w[d] ? w[d] += f : w[++d] = f), (s = s[0]) === (l = l[0]) ? w[d] ? w[d] += l : w[++d] = l : (w[++d] = null, g.push({
        i: d,
        x: interpolateNumber(s, l)
      })), t = reB.lastIndex;
    return t < e.length && (f = e.slice(t), w[d] ? w[d] += f : w[++d] = f), w.length < 2 ? g[0] ? one(g[0].x) : zero(e) : (e = g.length, function(_) {
      for (var h = 0, r; h < e; ++h)
        w[(r = g[h]).i] = r.x(_);
      return w.join("");
    });
  }
  var degrees = 180 / Math.PI, identity$1 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1
  };
  function decompose(i, e, t, s, l, f) {
    var d, w, g;
    return (d = Math.sqrt(i * i + e * e)) && (i /= d, e /= d), (g = i * t + e * s) && (t -= i * g, s -= e * g), (w = Math.sqrt(t * t + s * s)) && (t /= w, s /= w, g /= w), i * s < e * t && (i = -i, e = -e, g = -g, d = -d), {
      translateX: l,
      translateY: f,
      rotate: Math.atan2(e, i) * degrees,
      skewX: Math.atan(g) * degrees,
      scaleX: d,
      scaleY: w
    };
  }
  var svgNode;
  function parseCss(i) {
    const e = new (typeof DOMMatrix == "function" ? DOMMatrix : WebKitCSSMatrix)(i + "");
    return e.isIdentity ? identity$1 : decompose(e.a, e.b, e.c, e.d, e.e, e.f);
  }
  function parseSvg(i) {
    return i == null || (svgNode || (svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g")), svgNode.setAttribute("transform", i), !(i = svgNode.transform.baseVal.consolidate())) ? identity$1 : (i = i.matrix, decompose(i.a, i.b, i.c, i.d, i.e, i.f));
  }
  function interpolateTransform(i, e, t, s) {
    function l(_) {
      return _.length ? _.pop() + " " : "";
    }
    function f(_, h, r, n, u, p) {
      if (_ !== r || h !== n) {
        var M = u.push("translate(", null, e, null, t);
        p.push({
          i: M - 4,
          x: interpolateNumber(_, r)
        }, {
          i: M - 2,
          x: interpolateNumber(h, n)
        });
      } else
        (r || n) && u.push("translate(" + r + e + n + t);
    }
    function d(_, h, r, n) {
      _ !== h ? (_ - h > 180 ? h += 360 : h - _ > 180 && (_ += 360), n.push({
        i: r.push(l(r) + "rotate(", null, s) - 2,
        x: interpolateNumber(_, h)
      })) : h && r.push(l(r) + "rotate(" + h + s);
    }
    function w(_, h, r, n) {
      _ !== h ? n.push({
        i: r.push(l(r) + "skewX(", null, s) - 2,
        x: interpolateNumber(_, h)
      }) : h && r.push(l(r) + "skewX(" + h + s);
    }
    function g(_, h, r, n, u, p) {
      if (_ !== r || h !== n) {
        var M = u.push(l(u) + "scale(", null, ",", null, ")");
        p.push({
          i: M - 4,
          x: interpolateNumber(_, r)
        }, {
          i: M - 2,
          x: interpolateNumber(h, n)
        });
      } else
        (r !== 1 || n !== 1) && u.push(l(u) + "scale(" + r + "," + n + ")");
    }
    return function(_, h) {
      var r = [], n = [];
      return _ = i(_), h = i(h), f(_.translateX, _.translateY, h.translateX, h.translateY, r, n), d(_.rotate, h.rotate, r, n), w(_.skewX, h.skewX, r, n), g(_.scaleX, _.scaleY, h.scaleX, h.scaleY, r, n), _ = h = null, function(u) {
        for (var p = -1, M = n.length, P; ++p < M; )
          r[(P = n[p]).i] = P.x(u);
        return r.join("");
      };
    };
  }
  var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)"), interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")"), epsilon2 = 1e-12;
  function cosh(i) {
    return ((i = Math.exp(i)) + 1 / i) / 2;
  }
  function sinh(i) {
    return ((i = Math.exp(i)) - 1 / i) / 2;
  }
  function tanh(i) {
    return ((i = Math.exp(2 * i)) - 1) / (i + 1);
  }
  const interpolateZoom = function i(e, t, s) {
    function l(f, d) {
      var w = f[0], g = f[1], _ = f[2], h = d[0], r = d[1], n = d[2], u = h - w, p = r - g, M = u * u + p * p, P, E;
      if (M < epsilon2)
        E = Math.log(n / _) / e, P = function(D) {
          return [
            w + D * u,
            g + D * p,
            _ * Math.exp(e * D * E)
          ];
        };
      else {
        var k = Math.sqrt(M), $ = (n * n - _ * _ + s * M) / (2 * _ * t * k), A = (n * n - _ * _ - s * M) / (2 * n * t * k), C = Math.log(Math.sqrt($ * $ + 1) - $), F = Math.log(Math.sqrt(A * A + 1) - A);
        E = (F - C) / e, P = function(D) {
          var N = D * E, R = cosh(C), j = _ / (t * k) * (R * tanh(e * N + C) - sinh(C));
          return [
            w + j * u,
            g + j * p,
            _ * R / cosh(e * N + C)
          ];
        };
      }
      return P.duration = E * 1e3 * e / Math.SQRT2, P;
    }
    return l.rho = function(f) {
      var d = Math.max(1e-3, +f), w = d * d, g = w * w;
      return i(d, w, g);
    }, l;
  }(Math.SQRT2, 2, 4);
  var frame = 0, timeout$1 = 0, interval = 0, pokeDelay = 1e3, taskHead, taskTail, clockLast = 0, clockNow = 0, clockSkew = 0, clock = typeof performance == "object" && performance.now ? performance : Date, setFrame = typeof window == "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(i) {
    setTimeout(i, 17);
  };
  function now() {
    return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
  }
  function clearNow() {
    clockNow = 0;
  }
  function Timer() {
    this._call = this._time = this._next = null;
  }
  Timer.prototype = timer.prototype = {
    constructor: Timer,
    restart: function(i, e, t) {
      if (typeof i != "function")
        throw new TypeError("callback is not a function");
      t = (t == null ? now() : +t) + (e == null ? 0 : +e), !this._next && taskTail !== this && (taskTail ? taskTail._next = this : taskHead = this, taskTail = this), this._call = i, this._time = t, sleep();
    },
    stop: function() {
      this._call && (this._call = null, this._time = 1 / 0, sleep());
    }
  };
  function timer(i, e, t) {
    var s = new Timer();
    return s.restart(i, e, t), s;
  }
  function timerFlush() {
    now(), ++frame;
    for (var i = taskHead, e; i; )
      (e = clockNow - i._time) >= 0 && i._call.call(void 0, e), i = i._next;
    --frame;
  }
  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew, frame = timeout$1 = 0;
    try {
      timerFlush();
    } finally {
      frame = 0, nap(), clockNow = 0;
    }
  }
  function poke() {
    var i = clock.now(), e = i - clockLast;
    e > pokeDelay && (clockSkew -= e, clockLast = i);
  }
  function nap() {
    for (var i, e = taskHead, t, s = 1 / 0; e; )
      e._call ? (s > e._time && (s = e._time), i = e, e = e._next) : (t = e._next, e._next = null, e = i ? i._next = t : taskHead = t);
    taskTail = i, sleep(s);
  }
  function sleep(i) {
    if (!frame) {
      timeout$1 && (timeout$1 = clearTimeout(timeout$1));
      var e = i - clockNow;
      e > 24 ? (i < 1 / 0 && (timeout$1 = setTimeout(wake, i - clock.now() - clockSkew)), interval && (interval = clearInterval(interval))) : (interval || (clockLast = clock.now(), interval = setInterval(poke, pokeDelay)), frame = 1, setFrame(wake));
    }
  }
  function timeout(i, e, t) {
    var s = new Timer();
    return e = e == null ? 0 : +e, s.restart((l) => {
      s.stop(), i(l + e);
    }, e, t), s;
  }
  var emptyOn = dispatch("start", "end", "cancel", "interrupt"), emptyTween = [], CREATED = 0, SCHEDULED = 1, STARTING = 2, STARTED = 3, RUNNING = 4, ENDING = 5, ENDED = 6;
  function schedule(i, e, t, s, l, f) {
    var d = i.__transition;
    if (!d)
      i.__transition = {};
    else if (t in d)
      return;
    create(i, t, {
      name: e,
      index: s,
      group: l,
      on: emptyOn,
      tween: emptyTween,
      time: f.time,
      delay: f.delay,
      duration: f.duration,
      ease: f.ease,
      timer: null,
      state: CREATED
    });
  }
  function init(i, e) {
    var t = get(i, e);
    if (t.state > CREATED)
      throw new Error("too late; already scheduled");
    return t;
  }
  function set(i, e) {
    var t = get(i, e);
    if (t.state > STARTED)
      throw new Error("too late; already running");
    return t;
  }
  function get(i, e) {
    var t = i.__transition;
    if (!t || !(t = t[e]))
      throw new Error("transition not found");
    return t;
  }
  function create(i, e, t) {
    var s = i.__transition, l;
    s[e] = t, t.timer = timer(f, 0, t.time);
    function f(_) {
      t.state = SCHEDULED, t.timer.restart(d, t.delay, t.time), t.delay <= _ && d(_ - t.delay);
    }
    function d(_) {
      var h, r, n, u;
      if (t.state !== SCHEDULED)
        return g();
      for (h in s)
        if (u = s[h], u.name === t.name) {
          if (u.state === STARTED)
            return timeout(d);
          u.state === RUNNING ? (u.state = ENDED, u.timer.stop(), u.on.call("interrupt", i, i.__data__, u.index, u.group), delete s[h]) : +h < e && (u.state = ENDED, u.timer.stop(), u.on.call("cancel", i, i.__data__, u.index, u.group), delete s[h]);
        }
      if (timeout(function() {
        t.state === STARTED && (t.state = RUNNING, t.timer.restart(w, t.delay, t.time), w(_));
      }), t.state = STARTING, t.on.call("start", i, i.__data__, t.index, t.group), t.state === STARTING) {
        for (t.state = STARTED, l = new Array(n = t.tween.length), h = 0, r = -1; h < n; ++h)
          (u = t.tween[h].value.call(i, i.__data__, t.index, t.group)) && (l[++r] = u);
        l.length = r + 1;
      }
    }
    function w(_) {
      for (var h = _ < t.duration ? t.ease.call(null, _ / t.duration) : (t.timer.restart(g), t.state = ENDING, 1), r = -1, n = l.length; ++r < n; )
        l[r].call(i, h);
      t.state === ENDING && (t.on.call("end", i, i.__data__, t.index, t.group), g());
    }
    function g() {
      t.state = ENDED, t.timer.stop(), delete s[e];
      for (var _ in s)
        return;
      delete i.__transition;
    }
  }
  function interrupt(i, e) {
    var t = i.__transition, s, l, f = true, d;
    if (t) {
      e = e == null ? null : e + "";
      for (d in t) {
        if ((s = t[d]).name !== e) {
          f = false;
          continue;
        }
        l = s.state > STARTING && s.state < ENDING, s.state = ENDED, s.timer.stop(), s.on.call(l ? "interrupt" : "cancel", i, i.__data__, s.index, s.group), delete t[d];
      }
      f && delete i.__transition;
    }
  }
  function selection_interrupt(i) {
    return this.each(function() {
      interrupt(this, i);
    });
  }
  function tweenRemove(i, e) {
    var t, s;
    return function() {
      var l = set(this, i), f = l.tween;
      if (f !== t) {
        s = t = f;
        for (var d = 0, w = s.length; d < w; ++d)
          if (s[d].name === e) {
            s = s.slice(), s.splice(d, 1);
            break;
          }
      }
      l.tween = s;
    };
  }
  function tweenFunction(i, e, t) {
    var s, l;
    if (typeof t != "function")
      throw new Error();
    return function() {
      var f = set(this, i), d = f.tween;
      if (d !== s) {
        l = (s = d).slice();
        for (var w = {
          name: e,
          value: t
        }, g = 0, _ = l.length; g < _; ++g)
          if (l[g].name === e) {
            l[g] = w;
            break;
          }
        g === _ && l.push(w);
      }
      f.tween = l;
    };
  }
  function transition_tween(i, e) {
    var t = this._id;
    if (i += "", arguments.length < 2) {
      for (var s = get(this.node(), t).tween, l = 0, f = s.length, d; l < f; ++l)
        if ((d = s[l]).name === i)
          return d.value;
      return null;
    }
    return this.each((e == null ? tweenRemove : tweenFunction)(t, i, e));
  }
  function tweenValue(i, e, t) {
    var s = i._id;
    return i.each(function() {
      var l = set(this, s);
      (l.value || (l.value = {}))[e] = t.apply(this, arguments);
    }), function(l) {
      return get(l, s).value[e];
    };
  }
  function interpolate$1(i, e) {
    var t;
    return (typeof e == "number" ? interpolateNumber : e instanceof color ? interpolateRgb : (t = color(e)) ? (e = t, interpolateRgb) : interpolateString)(i, e);
  }
  function attrRemove(i) {
    return function() {
      this.removeAttribute(i);
    };
  }
  function attrRemoveNS(i) {
    return function() {
      this.removeAttributeNS(i.space, i.local);
    };
  }
  function attrConstant(i, e, t) {
    var s, l = t + "", f;
    return function() {
      var d = this.getAttribute(i);
      return d === l ? null : d === s ? f : f = e(s = d, t);
    };
  }
  function attrConstantNS(i, e, t) {
    var s, l = t + "", f;
    return function() {
      var d = this.getAttributeNS(i.space, i.local);
      return d === l ? null : d === s ? f : f = e(s = d, t);
    };
  }
  function attrFunction(i, e, t) {
    var s, l, f;
    return function() {
      var d, w = t(this), g;
      return w == null ? void this.removeAttribute(i) : (d = this.getAttribute(i), g = w + "", d === g ? null : d === s && g === l ? f : (l = g, f = e(s = d, w)));
    };
  }
  function attrFunctionNS(i, e, t) {
    var s, l, f;
    return function() {
      var d, w = t(this), g;
      return w == null ? void this.removeAttributeNS(i.space, i.local) : (d = this.getAttributeNS(i.space, i.local), g = w + "", d === g ? null : d === s && g === l ? f : (l = g, f = e(s = d, w)));
    };
  }
  function transition_attr(i, e) {
    var t = namespace(i), s = t === "transform" ? interpolateTransformSvg : interpolate$1;
    return this.attrTween(i, typeof e == "function" ? (t.local ? attrFunctionNS : attrFunction)(t, s, tweenValue(this, "attr." + i, e)) : e == null ? (t.local ? attrRemoveNS : attrRemove)(t) : (t.local ? attrConstantNS : attrConstant)(t, s, e));
  }
  function attrInterpolate(i, e) {
    return function(t) {
      this.setAttribute(i, e.call(this, t));
    };
  }
  function attrInterpolateNS(i, e) {
    return function(t) {
      this.setAttributeNS(i.space, i.local, e.call(this, t));
    };
  }
  function attrTweenNS(i, e) {
    var t, s;
    function l() {
      var f = e.apply(this, arguments);
      return f !== s && (t = (s = f) && attrInterpolateNS(i, f)), t;
    }
    return l._value = e, l;
  }
  function attrTween(i, e) {
    var t, s;
    function l() {
      var f = e.apply(this, arguments);
      return f !== s && (t = (s = f) && attrInterpolate(i, f)), t;
    }
    return l._value = e, l;
  }
  function transition_attrTween(i, e) {
    var t = "attr." + i;
    if (arguments.length < 2)
      return (t = this.tween(t)) && t._value;
    if (e == null)
      return this.tween(t, null);
    if (typeof e != "function")
      throw new Error();
    var s = namespace(i);
    return this.tween(t, (s.local ? attrTweenNS : attrTween)(s, e));
  }
  function delayFunction(i, e) {
    return function() {
      init(this, i).delay = +e.apply(this, arguments);
    };
  }
  function delayConstant(i, e) {
    return e = +e, function() {
      init(this, i).delay = e;
    };
  }
  function transition_delay(i) {
    var e = this._id;
    return arguments.length ? this.each((typeof i == "function" ? delayFunction : delayConstant)(e, i)) : get(this.node(), e).delay;
  }
  function durationFunction(i, e) {
    return function() {
      set(this, i).duration = +e.apply(this, arguments);
    };
  }
  function durationConstant(i, e) {
    return e = +e, function() {
      set(this, i).duration = e;
    };
  }
  function transition_duration(i) {
    var e = this._id;
    return arguments.length ? this.each((typeof i == "function" ? durationFunction : durationConstant)(e, i)) : get(this.node(), e).duration;
  }
  function easeConstant(i, e) {
    if (typeof e != "function")
      throw new Error();
    return function() {
      set(this, i).ease = e;
    };
  }
  function transition_ease(i) {
    var e = this._id;
    return arguments.length ? this.each(easeConstant(e, i)) : get(this.node(), e).ease;
  }
  function easeVarying(i, e) {
    return function() {
      var t = e.apply(this, arguments);
      if (typeof t != "function")
        throw new Error();
      set(this, i).ease = t;
    };
  }
  function transition_easeVarying(i) {
    if (typeof i != "function")
      throw new Error();
    return this.each(easeVarying(this._id, i));
  }
  function transition_filter(i) {
    typeof i != "function" && (i = matcher(i));
    for (var e = this._groups, t = e.length, s = new Array(t), l = 0; l < t; ++l)
      for (var f = e[l], d = f.length, w = s[l] = [], g, _ = 0; _ < d; ++_)
        (g = f[_]) && i.call(g, g.__data__, _, f) && w.push(g);
    return new Transition(s, this._parents, this._name, this._id);
  }
  function transition_merge(i) {
    if (i._id !== this._id)
      throw new Error();
    for (var e = this._groups, t = i._groups, s = e.length, l = t.length, f = Math.min(s, l), d = new Array(s), w = 0; w < f; ++w)
      for (var g = e[w], _ = t[w], h = g.length, r = d[w] = new Array(h), n, u = 0; u < h; ++u)
        (n = g[u] || _[u]) && (r[u] = n);
    for (; w < s; ++w)
      d[w] = e[w];
    return new Transition(d, this._parents, this._name, this._id);
  }
  function start(i) {
    return (i + "").trim().split(/^|\s+/).every(function(e) {
      var t = e.indexOf(".");
      return t >= 0 && (e = e.slice(0, t)), !e || e === "start";
    });
  }
  function onFunction(i, e, t) {
    var s, l, f = start(e) ? init : set;
    return function() {
      var d = f(this, i), w = d.on;
      w !== s && (l = (s = w).copy()).on(e, t), d.on = l;
    };
  }
  function transition_on(i, e) {
    var t = this._id;
    return arguments.length < 2 ? get(this.node(), t).on.on(i) : this.each(onFunction(t, i, e));
  }
  function removeFunction(i) {
    return function() {
      var e = this.parentNode;
      for (var t in this.__transition)
        if (+t !== i)
          return;
      e && e.removeChild(this);
    };
  }
  function transition_remove() {
    return this.on("end.remove", removeFunction(this._id));
  }
  function transition_select(i) {
    var e = this._name, t = this._id;
    typeof i != "function" && (i = selector(i));
    for (var s = this._groups, l = s.length, f = new Array(l), d = 0; d < l; ++d)
      for (var w = s[d], g = w.length, _ = f[d] = new Array(g), h, r, n = 0; n < g; ++n)
        (h = w[n]) && (r = i.call(h, h.__data__, n, w)) && ("__data__" in h && (r.__data__ = h.__data__), _[n] = r, schedule(_[n], e, t, n, _, get(h, t)));
    return new Transition(f, this._parents, e, t);
  }
  function transition_selectAll(i) {
    var e = this._name, t = this._id;
    typeof i != "function" && (i = selectorAll(i));
    for (var s = this._groups, l = s.length, f = [], d = [], w = 0; w < l; ++w)
      for (var g = s[w], _ = g.length, h, r = 0; r < _; ++r)
        if (h = g[r]) {
          for (var n = i.call(h, h.__data__, r, g), u, p = get(h, t), M = 0, P = n.length; M < P; ++M)
            (u = n[M]) && schedule(u, e, t, M, n, p);
          f.push(n), d.push(h);
        }
    return new Transition(f, d, e, t);
  }
  var Selection = selection.prototype.constructor;
  function transition_selection() {
    return new Selection(this._groups, this._parents);
  }
  function styleNull(i, e) {
    var t, s, l;
    return function() {
      var f = styleValue(this, i), d = (this.style.removeProperty(i), styleValue(this, i));
      return f === d ? null : f === t && d === s ? l : l = e(t = f, s = d);
    };
  }
  function styleRemove(i) {
    return function() {
      this.style.removeProperty(i);
    };
  }
  function styleConstant(i, e, t) {
    var s, l = t + "", f;
    return function() {
      var d = styleValue(this, i);
      return d === l ? null : d === s ? f : f = e(s = d, t);
    };
  }
  function styleFunction(i, e, t) {
    var s, l, f;
    return function() {
      var d = styleValue(this, i), w = t(this), g = w + "";
      return w == null && (g = w = (this.style.removeProperty(i), styleValue(this, i))), d === g ? null : d === s && g === l ? f : (l = g, f = e(s = d, w));
    };
  }
  function styleMaybeRemove(i, e) {
    var t, s, l, f = "style." + e, d = "end." + f, w;
    return function() {
      var g = set(this, i), _ = g.on, h = g.value[f] == null ? w || (w = styleRemove(e)) : void 0;
      (_ !== t || l !== h) && (s = (t = _).copy()).on(d, l = h), g.on = s;
    };
  }
  function transition_style(i, e, t) {
    var s = (i += "") == "transform" ? interpolateTransformCss : interpolate$1;
    return e == null ? this.styleTween(i, styleNull(i, s)).on("end.style." + i, styleRemove(i)) : typeof e == "function" ? this.styleTween(i, styleFunction(i, s, tweenValue(this, "style." + i, e))).each(styleMaybeRemove(this._id, i)) : this.styleTween(i, styleConstant(i, s, e), t).on("end.style." + i, null);
  }
  function styleInterpolate(i, e, t) {
    return function(s) {
      this.style.setProperty(i, e.call(this, s), t);
    };
  }
  function styleTween(i, e, t) {
    var s, l;
    function f() {
      var d = e.apply(this, arguments);
      return d !== l && (s = (l = d) && styleInterpolate(i, d, t)), s;
    }
    return f._value = e, f;
  }
  function transition_styleTween(i, e, t) {
    var s = "style." + (i += "");
    if (arguments.length < 2)
      return (s = this.tween(s)) && s._value;
    if (e == null)
      return this.tween(s, null);
    if (typeof e != "function")
      throw new Error();
    return this.tween(s, styleTween(i, e, t ?? ""));
  }
  function textConstant(i) {
    return function() {
      this.textContent = i;
    };
  }
  function textFunction(i) {
    return function() {
      var e = i(this);
      this.textContent = e ?? "";
    };
  }
  function transition_text(i) {
    return this.tween("text", typeof i == "function" ? textFunction(tweenValue(this, "text", i)) : textConstant(i == null ? "" : i + ""));
  }
  function textInterpolate(i) {
    return function(e) {
      this.textContent = i.call(this, e);
    };
  }
  function textTween(i) {
    var e, t;
    function s() {
      var l = i.apply(this, arguments);
      return l !== t && (e = (t = l) && textInterpolate(l)), e;
    }
    return s._value = i, s;
  }
  function transition_textTween(i) {
    var e = "text";
    if (arguments.length < 1)
      return (e = this.tween(e)) && e._value;
    if (i == null)
      return this.tween(e, null);
    if (typeof i != "function")
      throw new Error();
    return this.tween(e, textTween(i));
  }
  function transition_transition() {
    for (var i = this._name, e = this._id, t = newId(), s = this._groups, l = s.length, f = 0; f < l; ++f)
      for (var d = s[f], w = d.length, g, _ = 0; _ < w; ++_)
        if (g = d[_]) {
          var h = get(g, e);
          schedule(g, i, t, _, d, {
            time: h.time + h.delay + h.duration,
            delay: 0,
            duration: h.duration,
            ease: h.ease
          });
        }
    return new Transition(s, this._parents, i, t);
  }
  function transition_end() {
    var i, e, t = this, s = t._id, l = t.size();
    return new Promise(function(f, d) {
      var w = {
        value: d
      }, g = {
        value: function() {
          --l === 0 && f();
        }
      };
      t.each(function() {
        var _ = set(this, s), h = _.on;
        h !== i && (e = (i = h).copy(), e._.cancel.push(w), e._.interrupt.push(w), e._.end.push(g)), _.on = e;
      }), l === 0 && f();
    });
  }
  var id = 0;
  function Transition(i, e, t, s) {
    this._groups = i, this._parents = e, this._name = t, this._id = s;
  }
  function newId() {
    return ++id;
  }
  var selection_prototype = selection.prototype;
  Transition.prototype = {
    constructor: Transition,
    select: transition_select,
    selectAll: transition_selectAll,
    selectChild: selection_prototype.selectChild,
    selectChildren: selection_prototype.selectChildren,
    filter: transition_filter,
    merge: transition_merge,
    selection: transition_selection,
    transition: transition_transition,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: transition_on,
    attr: transition_attr,
    attrTween: transition_attrTween,
    style: transition_style,
    styleTween: transition_styleTween,
    text: transition_text,
    textTween: transition_textTween,
    remove: transition_remove,
    tween: transition_tween,
    delay: transition_delay,
    duration: transition_duration,
    ease: transition_ease,
    easeVarying: transition_easeVarying,
    end: transition_end,
    [Symbol.iterator]: selection_prototype[Symbol.iterator]
  };
  function quadOut(i) {
    return i * (2 - i);
  }
  function cubicInOut(i) {
    return ((i *= 2) <= 1 ? i * i * i : (i -= 2) * i * i + 2) / 2;
  }
  var defaultTiming = {
    time: null,
    delay: 0,
    duration: 250,
    ease: cubicInOut
  };
  function inherit(i, e) {
    for (var t; !(t = i.__transition) || !(t = t[e]); )
      if (!(i = i.parentNode))
        throw new Error(`transition ${e} not found`);
    return t;
  }
  function selection_transition(i) {
    var e, t;
    i instanceof Transition ? (e = i._id, i = i._name) : (e = newId(), (t = defaultTiming).time = now(), i = i == null ? null : i + "");
    for (var s = this._groups, l = s.length, f = 0; f < l; ++f)
      for (var d = s[f], w = d.length, g, _ = 0; _ < w; ++_)
        (g = d[_]) && schedule(g, i, e, _, d, t || inherit(g, e));
    return new Transition(s, this._parents, i, e);
  }
  selection.prototype.interrupt = selection_interrupt;
  selection.prototype.transition = selection_transition;
  const pi = Math.PI, tau = 2 * pi, epsilon = 1e-6, tauEpsilon = tau - epsilon;
  function append(i) {
    this._ += i[0];
    for (let e = 1, t = i.length; e < t; ++e)
      this._ += arguments[e] + i[e];
  }
  function appendRound(i) {
    let e = Math.floor(i);
    if (!(e >= 0))
      throw new Error(`invalid digits: ${i}`);
    if (e > 15)
      return append;
    const t = 10 ** e;
    return function(s) {
      this._ += s[0];
      for (let l = 1, f = s.length; l < f; ++l)
        this._ += Math.round(arguments[l] * t) / t + s[l];
    };
  }
  class Path {
    constructor(e) {
      this._x0 = this._y0 = this._x1 = this._y1 = null, this._ = "", this._append = e == null ? append : appendRound(e);
    }
    moveTo(e, t) {
      this._append`M${this._x0 = this._x1 = +e},${this._y0 = this._y1 = +t}`;
    }
    closePath() {
      this._x1 !== null && (this._x1 = this._x0, this._y1 = this._y0, this._append`Z`);
    }
    lineTo(e, t) {
      this._append`L${this._x1 = +e},${this._y1 = +t}`;
    }
    quadraticCurveTo(e, t, s, l) {
      this._append`Q${+e},${+t},${this._x1 = +s},${this._y1 = +l}`;
    }
    bezierCurveTo(e, t, s, l, f, d) {
      this._append`C${+e},${+t},${+s},${+l},${this._x1 = +f},${this._y1 = +d}`;
    }
    arcTo(e, t, s, l, f) {
      if (e = +e, t = +t, s = +s, l = +l, f = +f, f < 0)
        throw new Error(`negative radius: ${f}`);
      let d = this._x1, w = this._y1, g = s - e, _ = l - t, h = d - e, r = w - t, n = h * h + r * r;
      if (this._x1 === null)
        this._append`M${this._x1 = e},${this._y1 = t}`;
      else if (n > epsilon)
        if (!(Math.abs(r * g - _ * h) > epsilon) || !f)
          this._append`L${this._x1 = e},${this._y1 = t}`;
        else {
          let u = s - d, p = l - w, M = g * g + _ * _, P = u * u + p * p, E = Math.sqrt(M), k = Math.sqrt(n), $ = f * Math.tan((pi - Math.acos((M + n - P) / (2 * E * k))) / 2), A = $ / k, C = $ / E;
          Math.abs(A - 1) > epsilon && this._append`L${e + A * h},${t + A * r}`, this._append`A${f},${f},0,0,${+(r * u > h * p)},${this._x1 = e + C * g},${this._y1 = t + C * _}`;
        }
    }
    arc(e, t, s, l, f, d) {
      if (e = +e, t = +t, s = +s, d = !!d, s < 0)
        throw new Error(`negative radius: ${s}`);
      let w = s * Math.cos(l), g = s * Math.sin(l), _ = e + w, h = t + g, r = 1 ^ d, n = d ? l - f : f - l;
      this._x1 === null ? this._append`M${_},${h}` : (Math.abs(this._x1 - _) > epsilon || Math.abs(this._y1 - h) > epsilon) && this._append`L${_},${h}`, s && (n < 0 && (n = n % tau + tau), n > tauEpsilon ? this._append`A${s},${s},0,1,${r},${e - w},${t - g}A${s},${s},0,1,${r},${this._x1 = _},${this._y1 = h}` : n > epsilon && this._append`A${s},${s},0,${+(n >= pi)},${r},${this._x1 = e + s * Math.cos(f)},${this._y1 = t + s * Math.sin(f)}`);
    }
    rect(e, t, s, l) {
      this._append`M${this._x0 = this._x1 = +e},${this._y0 = this._y1 = +t}h${s = +s}v${+l}h${-s}Z`;
    }
    toString() {
      return this._;
    }
  }
  function constant$2(i) {
    return function() {
      return i;
    };
  }
  function jiggle(i) {
    return (i() - 0.5) * 1e-6;
  }
  function index(i) {
    return i.index;
  }
  function find(i, e) {
    var t = i.get(e);
    if (!t)
      throw new Error("node not found: " + e);
    return t;
  }
  function link(i) {
    var e = index, t = r, s, l = constant$2(30), f, d, w, g, _, h = 1;
    i == null && (i = []);
    function r(P) {
      return 1 / Math.min(w[P.source.index], w[P.target.index]);
    }
    function n(P) {
      for (var E = 0, k = i.length; E < h; ++E)
        for (var $ = 0, A, C, F, D, N, R, j; $ < k; ++$)
          A = i[$], C = A.source, F = A.target, D = F.x + F.vx - C.x - C.vx || jiggle(_), N = F.y + F.vy - C.y - C.vy || jiggle(_), R = Math.sqrt(D * D + N * N), R = (R - f[$]) / R * P * s[$], D *= R, N *= R, F.vx -= D * (j = g[$]), F.vy -= N * j, C.vx += D * (j = 1 - j), C.vy += N * j;
    }
    function u() {
      if (d) {
        var P, E = d.length, k = i.length, $ = new Map(d.map((C, F) => [
          e(C, F, d),
          C
        ])), A;
        for (P = 0, w = new Array(E); P < k; ++P)
          A = i[P], A.index = P, typeof A.source != "object" && (A.source = find($, A.source)), typeof A.target != "object" && (A.target = find($, A.target)), w[A.source.index] = (w[A.source.index] || 0) + 1, w[A.target.index] = (w[A.target.index] || 0) + 1;
        for (P = 0, g = new Array(k); P < k; ++P)
          A = i[P], g[P] = w[A.source.index] / (w[A.source.index] + w[A.target.index]);
        s = new Array(k), p(), f = new Array(k), M();
      }
    }
    function p() {
      if (d)
        for (var P = 0, E = i.length; P < E; ++P)
          s[P] = +t(i[P], P, i);
    }
    function M() {
      if (d)
        for (var P = 0, E = i.length; P < E; ++P)
          f[P] = +l(i[P], P, i);
    }
    return n.initialize = function(P, E) {
      d = P, _ = E, u();
    }, n.links = function(P) {
      return arguments.length ? (i = P, u(), n) : i;
    }, n.id = function(P) {
      return arguments.length ? (e = P, n) : e;
    }, n.iterations = function(P) {
      return arguments.length ? (h = +P, n) : h;
    }, n.strength = function(P) {
      return arguments.length ? (t = typeof P == "function" ? P : constant$2(+P), p(), n) : t;
    }, n.distance = function(P) {
      return arguments.length ? (l = typeof P == "function" ? P : constant$2(+P), M(), n) : l;
    }, n;
  }
  const a = 1664525, c = 1013904223, m = 4294967296;
  function lcg() {
    let i = 1;
    return () => (i = (a * i + c) % m) / m;
  }
  var initialRadius = 10, initialAngle = Math.PI * (3 - Math.sqrt(5));
  function simulation(i) {
    var e, t = 1, s = 1e-3, l = 1 - Math.pow(s, 1 / 300), f = 0, d = 0.6, w = /* @__PURE__ */ new Map(), g = timer(r), _ = dispatch("tick", "end"), h = lcg();
    i == null && (i = []);
    function r() {
      n(), _.call("tick", e), t < s && (g.stop(), _.call("end", e));
    }
    function n(M) {
      var P, E = i.length, k;
      M === void 0 && (M = 1);
      for (var $ = 0; $ < M; ++$)
        for (t += (f - t) * l, w.forEach(function(A) {
          A(t);
        }), P = 0; P < E; ++P)
          k = i[P], k.fx == null ? k.x += k.vx *= d : (k.x = k.fx, k.vx = 0), k.fy == null ? k.y += k.vy *= d : (k.y = k.fy, k.vy = 0);
      return e;
    }
    function u() {
      for (var M = 0, P = i.length, E; M < P; ++M) {
        if (E = i[M], E.index = M, E.fx != null && (E.x = E.fx), E.fy != null && (E.y = E.fy), isNaN(E.x) || isNaN(E.y)) {
          var k = initialRadius * Math.sqrt(0.5 + M), $ = M * initialAngle;
          E.x = k * Math.cos($), E.y = k * Math.sin($);
        }
        (isNaN(E.vx) || isNaN(E.vy)) && (E.vx = E.vy = 0);
      }
    }
    function p(M) {
      return M.initialize && M.initialize(i, h), M;
    }
    return u(), e = {
      tick: n,
      restart: function() {
        return g.restart(r), e;
      },
      stop: function() {
        return g.stop(), e;
      },
      nodes: function(M) {
        return arguments.length ? (i = M, u(), w.forEach(p), e) : i;
      },
      alpha: function(M) {
        return arguments.length ? (t = +M, e) : t;
      },
      alphaMin: function(M) {
        return arguments.length ? (s = +M, e) : s;
      },
      alphaDecay: function(M) {
        return arguments.length ? (l = +M, e) : +l;
      },
      alphaTarget: function(M) {
        return arguments.length ? (f = +M, e) : f;
      },
      velocityDecay: function(M) {
        return arguments.length ? (d = 1 - M, e) : 1 - d;
      },
      randomSource: function(M) {
        return arguments.length ? (h = M, w.forEach(p), e) : h;
      },
      force: function(M, P) {
        return arguments.length > 1 ? (P == null ? w.delete(M) : w.set(M, p(P)), e) : w.get(M);
      },
      find: function(M, P, E) {
        var k = 0, $ = i.length, A, C, F, D, N;
        for (E == null ? E = 1 / 0 : E *= E, k = 0; k < $; ++k)
          D = i[k], A = M - D.x, C = P - D.y, F = A * A + C * C, F < E && (N = D, E = F);
        return N;
      },
      on: function(M, P) {
        return arguments.length > 1 ? (_.on(M, P), e) : _.on(M);
      }
    };
  }
  function y$1(i) {
    var e = constant$2(0.1), t, s, l;
    typeof i != "function" && (i = constant$2(i == null ? 0 : +i));
    function f(w) {
      for (var g = 0, _ = t.length, h; g < _; ++g)
        h = t[g], h.vy += (l[g] - h.y) * s[g] * w;
    }
    function d() {
      if (t) {
        var w, g = t.length;
        for (s = new Array(g), l = new Array(g), w = 0; w < g; ++w)
          s[w] = isNaN(l[w] = +i(t[w], w, t)) ? 0 : +e(t[w], w, t);
      }
    }
    return f.initialize = function(w) {
      t = w, d();
    }, f.strength = function(w) {
      return arguments.length ? (e = typeof w == "function" ? w : constant$2(+w), d(), f) : e;
    }, f.y = function(w) {
      return arguments.length ? (i = typeof w == "function" ? w : constant$2(+w), d(), f) : i;
    }, f;
  }
  function initRange(i, e) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(i);
        break;
      default:
        this.range(e).domain(i);
        break;
    }
    return this;
  }
  const implicit = Symbol("implicit");
  function ordinal() {
    var i = new InternMap(), e = [], t = [], s = implicit;
    function l(f) {
      let d = i.get(f);
      if (d === void 0) {
        if (s !== implicit)
          return s;
        i.set(f, d = e.push(f) - 1);
      }
      return t[d % t.length];
    }
    return l.domain = function(f) {
      if (!arguments.length)
        return e.slice();
      e = [], i = new InternMap();
      for (const d of f)
        i.has(d) || i.set(d, e.push(d) - 1);
      return l;
    }, l.range = function(f) {
      return arguments.length ? (t = Array.from(f), l) : t.slice();
    }, l.unknown = function(f) {
      return arguments.length ? (s = f, l) : s;
    }, l.copy = function() {
      return ordinal(e, t).unknown(s);
    }, initRange.apply(l, arguments), l;
  }
  function colors(i) {
    for (var e = i.length / 6 | 0, t = new Array(e), s = 0; s < e; )
      t[s] = "#" + i.slice(s * 6, ++s * 6);
    return t;
  }
  const Tableau10 = colors("4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab");
  function constant$1(i) {
    return function() {
      return i;
    };
  }
  function withPath(i) {
    let e = 3;
    return i.digits = function(t) {
      if (!arguments.length)
        return e;
      if (t == null)
        e = null;
      else {
        const s = Math.floor(t);
        if (!(s >= 0))
          throw new RangeError(`invalid digits: ${t}`);
        e = s;
      }
      return i;
    }, () => new Path(e);
  }
  function array(i) {
    return typeof i == "object" && "length" in i ? i : Array.from(i);
  }
  function Linear(i) {
    this._context = i;
  }
  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
    },
    point: function(i, e) {
      switch (i = +i, e = +e, this._point) {
        case 0:
          this._point = 1, this._line ? this._context.lineTo(i, e) : this._context.moveTo(i, e);
          break;
        case 1:
          this._point = 2;
        default:
          this._context.lineTo(i, e);
          break;
      }
    }
  };
  function curveLinear(i) {
    return new Linear(i);
  }
  function x(i) {
    return i[0];
  }
  function y(i) {
    return i[1];
  }
  function line(i, e) {
    var t = constant$1(true), s = null, l = curveLinear, f = null, d = withPath(w);
    i = typeof i == "function" ? i : i === void 0 ? x : constant$1(i), e = typeof e == "function" ? e : e === void 0 ? y : constant$1(e);
    function w(g) {
      var _, h = (g = array(g)).length, r, n = false, u;
      for (s == null && (f = l(u = d())), _ = 0; _ <= h; ++_)
        !(_ < h && t(r = g[_], _, g)) === n && ((n = !n) ? f.lineStart() : f.lineEnd()), n && f.point(+i(r, _, g), +e(r, _, g));
      if (u)
        return f = null, u + "" || null;
    }
    return w.x = function(g) {
      return arguments.length ? (i = typeof g == "function" ? g : constant$1(+g), w) : i;
    }, w.y = function(g) {
      return arguments.length ? (e = typeof g == "function" ? g : constant$1(+g), w) : e;
    }, w.defined = function(g) {
      return arguments.length ? (t = typeof g == "function" ? g : constant$1(!!g), w) : t;
    }, w.curve = function(g) {
      return arguments.length ? (l = g, s != null && (f = l(s)), w) : l;
    }, w.context = function(g) {
      return arguments.length ? (g == null ? s = f = null : f = l(s = g), w) : s;
    }, w;
  }
  function point(i, e, t) {
    i._context.bezierCurveTo(i._x1 + i._k * (i._x2 - i._x0), i._y1 + i._k * (i._y2 - i._y0), i._x2 + i._k * (i._x1 - e), i._y2 + i._k * (i._y1 - t), i._x2, i._y2);
  }
  function Cardinal(i, e) {
    this._context = i, this._k = (1 - e) / 6;
  }
  Cardinal.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN, this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2);
          break;
        case 3:
          point(this, this._x1, this._y1);
          break;
      }
      (this._line || this._line !== 0 && this._point === 1) && this._context.closePath(), this._line = 1 - this._line;
    },
    point: function(i, e) {
      switch (i = +i, e = +e, this._point) {
        case 0:
          this._point = 1, this._line ? this._context.lineTo(i, e) : this._context.moveTo(i, e);
          break;
        case 1:
          this._point = 2, this._x1 = i, this._y1 = e;
          break;
        case 2:
          this._point = 3;
        default:
          point(this, i, e);
          break;
      }
      this._x0 = this._x1, this._x1 = this._x2, this._x2 = i, this._y0 = this._y1, this._y1 = this._y2, this._y2 = e;
    }
  };
  const cardinal = function i(e) {
    function t(s) {
      return new Cardinal(s, e);
    }
    return t.tension = function(s) {
      return i(+s);
    }, t;
  }(0), constant = (i) => () => i;
  function ZoomEvent(i, { sourceEvent: e, target: t, transform: s, dispatch: l }) {
    Object.defineProperties(this, {
      type: {
        value: i,
        enumerable: true,
        configurable: true
      },
      sourceEvent: {
        value: e,
        enumerable: true,
        configurable: true
      },
      target: {
        value: t,
        enumerable: true,
        configurable: true
      },
      transform: {
        value: s,
        enumerable: true,
        configurable: true
      },
      _: {
        value: l
      }
    });
  }
  function Transform(i, e, t) {
    this.k = i, this.x = e, this.y = t;
  }
  Transform.prototype = {
    constructor: Transform,
    scale: function(i) {
      return i === 1 ? this : new Transform(this.k * i, this.x, this.y);
    },
    translate: function(i, e) {
      return i === 0 & e === 0 ? this : new Transform(this.k, this.x + this.k * i, this.y + this.k * e);
    },
    apply: function(i) {
      return [
        i[0] * this.k + this.x,
        i[1] * this.k + this.y
      ];
    },
    applyX: function(i) {
      return i * this.k + this.x;
    },
    applyY: function(i) {
      return i * this.k + this.y;
    },
    invert: function(i) {
      return [
        (i[0] - this.x) / this.k,
        (i[1] - this.y) / this.k
      ];
    },
    invertX: function(i) {
      return (i - this.x) / this.k;
    },
    invertY: function(i) {
      return (i - this.y) / this.k;
    },
    rescaleX: function(i) {
      return i.copy().domain(i.range().map(this.invertX, this).map(i.invert, i));
    },
    rescaleY: function(i) {
      return i.copy().domain(i.range().map(this.invertY, this).map(i.invert, i));
    },
    toString: function() {
      return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
    }
  };
  var identity = new Transform(1, 0, 0);
  Transform.prototype;
  function nopropagation(i) {
    i.stopImmediatePropagation();
  }
  function noevent(i) {
    i.preventDefault(), i.stopImmediatePropagation();
  }
  function defaultFilter(i) {
    return (!i.ctrlKey || i.type === "wheel") && !i.button;
  }
  function defaultExtent() {
    var i = this;
    return i instanceof SVGElement ? (i = i.ownerSVGElement || i, i.hasAttribute("viewBox") ? (i = i.viewBox.baseVal, [
      [
        i.x,
        i.y
      ],
      [
        i.x + i.width,
        i.y + i.height
      ]
    ]) : [
      [
        0,
        0
      ],
      [
        i.width.baseVal.value,
        i.height.baseVal.value
      ]
    ]) : [
      [
        0,
        0
      ],
      [
        i.clientWidth,
        i.clientHeight
      ]
    ];
  }
  function defaultTransform() {
    return this.__zoom || identity;
  }
  function defaultWheelDelta(i) {
    return -i.deltaY * (i.deltaMode === 1 ? 0.05 : i.deltaMode ? 1 : 2e-3) * (i.ctrlKey ? 10 : 1);
  }
  function defaultTouchable() {
    return navigator.maxTouchPoints || "ontouchstart" in this;
  }
  function defaultConstrain(i, e, t) {
    var s = i.invertX(e[0][0]) - t[0][0], l = i.invertX(e[1][0]) - t[1][0], f = i.invertY(e[0][1]) - t[0][1], d = i.invertY(e[1][1]) - t[1][1];
    return i.translate(l > s ? (s + l) / 2 : Math.min(0, s) || Math.max(0, l), d > f ? (f + d) / 2 : Math.min(0, f) || Math.max(0, d));
  }
  function zoom() {
    var i = defaultFilter, e = defaultExtent, t = defaultConstrain, s = defaultWheelDelta, l = defaultTouchable, f = [
      0,
      1 / 0
    ], d = [
      [
        -1 / 0,
        -1 / 0
      ],
      [
        1 / 0,
        1 / 0
      ]
    ], w = 250, g = interpolateZoom, _ = dispatch("start", "zoom", "end"), h, r, n, u = 500, p = 150, M = 0, P = 10;
    function E(G) {
      G.property("__zoom", defaultTransform).on("wheel.zoom", N, {
        passive: false
      }).on("mousedown.zoom", R).on("dblclick.zoom", j).filter(l).on("touchstart.zoom", Z).on("touchmove.zoom", te).on("touchend.zoom touchcancel.zoom", J).style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
    }
    E.transform = function(G, H, U, Q) {
      var he = G.selection ? G.selection() : G;
      he.property("__zoom", defaultTransform), G !== he ? C(G, H, U, Q) : he.interrupt().each(function() {
        F(this, arguments).event(Q).start().zoom(null, typeof H == "function" ? H.apply(this, arguments) : H).end();
      });
    }, E.scaleBy = function(G, H, U, Q) {
      E.scaleTo(G, function() {
        var he = this.__zoom.k, fe = typeof H == "function" ? H.apply(this, arguments) : H;
        return he * fe;
      }, U, Q);
    }, E.scaleTo = function(G, H, U, Q) {
      E.transform(G, function() {
        var he = e.apply(this, arguments), fe = this.__zoom, Me = U == null ? A(he) : typeof U == "function" ? U.apply(this, arguments) : U, pe = fe.invert(Me), oe = typeof H == "function" ? H.apply(this, arguments) : H;
        return t($(k(fe, oe), Me, pe), he, d);
      }, U, Q);
    }, E.translateBy = function(G, H, U, Q) {
      E.transform(G, function() {
        return t(this.__zoom.translate(typeof H == "function" ? H.apply(this, arguments) : H, typeof U == "function" ? U.apply(this, arguments) : U), e.apply(this, arguments), d);
      }, null, Q);
    }, E.translateTo = function(G, H, U, Q, he) {
      E.transform(G, function() {
        var fe = e.apply(this, arguments), Me = this.__zoom, pe = Q == null ? A(fe) : typeof Q == "function" ? Q.apply(this, arguments) : Q;
        return t(identity.translate(pe[0], pe[1]).scale(Me.k).translate(typeof H == "function" ? -H.apply(this, arguments) : -H, typeof U == "function" ? -U.apply(this, arguments) : -U), fe, d);
      }, Q, he);
    };
    function k(G, H) {
      return H = Math.max(f[0], Math.min(f[1], H)), H === G.k ? G : new Transform(H, G.x, G.y);
    }
    function $(G, H, U) {
      var Q = H[0] - U[0] * G.k, he = H[1] - U[1] * G.k;
      return Q === G.x && he === G.y ? G : new Transform(G.k, Q, he);
    }
    function A(G) {
      return [
        (+G[0][0] + +G[1][0]) / 2,
        (+G[0][1] + +G[1][1]) / 2
      ];
    }
    function C(G, H, U, Q) {
      G.on("start.zoom", function() {
        F(this, arguments).event(Q).start();
      }).on("interrupt.zoom end.zoom", function() {
        F(this, arguments).event(Q).end();
      }).tween("zoom", function() {
        var he = this, fe = arguments, Me = F(he, fe).event(Q), pe = e.apply(he, fe), oe = U == null ? A(pe) : typeof U == "function" ? U.apply(he, fe) : U, be = Math.max(pe[1][0] - pe[0][0], pe[1][1] - pe[0][1]), Ee = he.__zoom, Oe = typeof H == "function" ? H.apply(he, fe) : H, Ye = g(Ee.invert(oe).concat(be / Ee.k), Oe.invert(oe).concat(be / Oe.k));
        return function(We) {
          if (We === 1)
            We = Oe;
          else {
            var ot = Ye(We), vt = be / ot[2];
            We = new Transform(vt, oe[0] - ot[0] * vt, oe[1] - ot[1] * vt);
          }
          Me.zoom(null, We);
        };
      });
    }
    function F(G, H, U) {
      return !U && G.__zooming || new D(G, H);
    }
    function D(G, H) {
      this.that = G, this.args = H, this.active = 0, this.sourceEvent = null, this.extent = e.apply(G, H), this.taps = 0;
    }
    D.prototype = {
      event: function(G) {
        return G && (this.sourceEvent = G), this;
      },
      start: function() {
        return ++this.active === 1 && (this.that.__zooming = this, this.emit("start")), this;
      },
      zoom: function(G, H) {
        return this.mouse && G !== "mouse" && (this.mouse[1] = H.invert(this.mouse[0])), this.touch0 && G !== "touch" && (this.touch0[1] = H.invert(this.touch0[0])), this.touch1 && G !== "touch" && (this.touch1[1] = H.invert(this.touch1[0])), this.that.__zoom = H, this.emit("zoom"), this;
      },
      end: function() {
        return --this.active === 0 && (delete this.that.__zooming, this.emit("end")), this;
      },
      emit: function(G) {
        var H = select(this.that).datum();
        _.call(G, this.that, new ZoomEvent(G, {
          sourceEvent: this.sourceEvent,
          target: E,
          type: G,
          transform: this.that.__zoom,
          dispatch: _
        }), H);
      }
    };
    function N(G, ...H) {
      if (!i.apply(this, arguments))
        return;
      var U = F(this, H).event(G), Q = this.__zoom, he = Math.max(f[0], Math.min(f[1], Q.k * Math.pow(2, s.apply(this, arguments)))), fe = pointer(G);
      if (U.wheel)
        (U.mouse[0][0] !== fe[0] || U.mouse[0][1] !== fe[1]) && (U.mouse[1] = Q.invert(U.mouse[0] = fe)), clearTimeout(U.wheel);
      else {
        if (Q.k === he)
          return;
        U.mouse = [
          fe,
          Q.invert(fe)
        ], interrupt(this), U.start();
      }
      noevent(G), U.wheel = setTimeout(Me, p), U.zoom("mouse", t($(k(Q, he), U.mouse[0], U.mouse[1]), U.extent, d));
      function Me() {
        U.wheel = null, U.end();
      }
    }
    function R(G, ...H) {
      if (n || !i.apply(this, arguments))
        return;
      var U = G.currentTarget, Q = F(this, H, true).event(G), he = select(G.view).on("mousemove.zoom", oe, true).on("mouseup.zoom", be, true), fe = pointer(G, U), Me = G.clientX, pe = G.clientY;
      dragDisable(G.view), nopropagation(G), Q.mouse = [
        fe,
        this.__zoom.invert(fe)
      ], interrupt(this), Q.start();
      function oe(Ee) {
        if (noevent(Ee), !Q.moved) {
          var Oe = Ee.clientX - Me, Ye = Ee.clientY - pe;
          Q.moved = Oe * Oe + Ye * Ye > M;
        }
        Q.event(Ee).zoom("mouse", t($(Q.that.__zoom, Q.mouse[0] = pointer(Ee, U), Q.mouse[1]), Q.extent, d));
      }
      function be(Ee) {
        he.on("mousemove.zoom mouseup.zoom", null), yesdrag(Ee.view, Q.moved), noevent(Ee), Q.event(Ee).end();
      }
    }
    function j(G, ...H) {
      if (i.apply(this, arguments)) {
        var U = this.__zoom, Q = pointer(G.changedTouches ? G.changedTouches[0] : G, this), he = U.invert(Q), fe = U.k * (G.shiftKey ? 0.5 : 2), Me = t($(k(U, fe), Q, he), e.apply(this, H), d);
        noevent(G), w > 0 ? select(this).transition().duration(w).call(C, Me, Q, G) : select(this).call(E.transform, Me, Q, G);
      }
    }
    function Z(G, ...H) {
      if (i.apply(this, arguments)) {
        var U = G.touches, Q = U.length, he = F(this, H, G.changedTouches.length === Q).event(G), fe, Me, pe, oe;
        for (nopropagation(G), Me = 0; Me < Q; ++Me)
          pe = U[Me], oe = pointer(pe, this), oe = [
            oe,
            this.__zoom.invert(oe),
            pe.identifier
          ], he.touch0 ? !he.touch1 && he.touch0[2] !== oe[2] && (he.touch1 = oe, he.taps = 0) : (he.touch0 = oe, fe = true, he.taps = 1 + !!h);
        h && (h = clearTimeout(h)), fe && (he.taps < 2 && (r = oe[0], h = setTimeout(function() {
          h = null;
        }, u)), interrupt(this), he.start());
      }
    }
    function te(G, ...H) {
      if (this.__zooming) {
        var U = F(this, H).event(G), Q = G.changedTouches, he = Q.length, fe, Me, pe, oe;
        for (noevent(G), fe = 0; fe < he; ++fe)
          Me = Q[fe], pe = pointer(Me, this), U.touch0 && U.touch0[2] === Me.identifier ? U.touch0[0] = pe : U.touch1 && U.touch1[2] === Me.identifier && (U.touch1[0] = pe);
        if (Me = U.that.__zoom, U.touch1) {
          var be = U.touch0[0], Ee = U.touch0[1], Oe = U.touch1[0], Ye = U.touch1[1], We = (We = Oe[0] - be[0]) * We + (We = Oe[1] - be[1]) * We, ot = (ot = Ye[0] - Ee[0]) * ot + (ot = Ye[1] - Ee[1]) * ot;
          Me = k(Me, Math.sqrt(We / ot)), pe = [
            (be[0] + Oe[0]) / 2,
            (be[1] + Oe[1]) / 2
          ], oe = [
            (Ee[0] + Ye[0]) / 2,
            (Ee[1] + Ye[1]) / 2
          ];
        } else if (U.touch0)
          pe = U.touch0[0], oe = U.touch0[1];
        else
          return;
        U.zoom("touch", t($(Me, pe, oe), U.extent, d));
      }
    }
    function J(G, ...H) {
      if (this.__zooming) {
        var U = F(this, H).event(G), Q = G.changedTouches, he = Q.length, fe, Me;
        for (nopropagation(G), n && clearTimeout(n), n = setTimeout(function() {
          n = null;
        }, u), fe = 0; fe < he; ++fe)
          Me = Q[fe], U.touch0 && U.touch0[2] === Me.identifier ? delete U.touch0 : U.touch1 && U.touch1[2] === Me.identifier && delete U.touch1;
        if (U.touch1 && !U.touch0 && (U.touch0 = U.touch1, delete U.touch1), U.touch0)
          U.touch0[1] = this.__zoom.invert(U.touch0[0]);
        else if (U.end(), U.taps === 2 && (Me = pointer(Me, this), Math.hypot(r[0] - Me[0], r[1] - Me[1]) < P)) {
          var pe = select(this).on("dblclick.zoom");
          pe && pe.apply(this, arguments);
        }
      }
    }
    return E.wheelDelta = function(G) {
      return arguments.length ? (s = typeof G == "function" ? G : constant(+G), E) : s;
    }, E.filter = function(G) {
      return arguments.length ? (i = typeof G == "function" ? G : constant(!!G), E) : i;
    }, E.touchable = function(G) {
      return arguments.length ? (l = typeof G == "function" ? G : constant(!!G), E) : l;
    }, E.extent = function(G) {
      return arguments.length ? (e = typeof G == "function" ? G : constant([
        [
          +G[0][0],
          +G[0][1]
        ],
        [
          +G[1][0],
          +G[1][1]
        ]
      ]), E) : e;
    }, E.scaleExtent = function(G) {
      return arguments.length ? (f[0] = +G[0], f[1] = +G[1], E) : [
        f[0],
        f[1]
      ];
    }, E.translateExtent = function(G) {
      return arguments.length ? (d[0][0] = +G[0][0], d[1][0] = +G[1][0], d[0][1] = +G[0][1], d[1][1] = +G[1][1], E) : [
        [
          d[0][0],
          d[0][1]
        ],
        [
          d[1][0],
          d[1][1]
        ]
      ];
    }, E.constrain = function(G) {
      return arguments.length ? (t = G, E) : t;
    }, E.duration = function(G) {
      return arguments.length ? (w = +G, E) : w;
    }, E.interpolate = function(G) {
      return arguments.length ? (g = G, E) : g;
    }, E.on = function() {
      var G = _.on.apply(_, arguments);
      return G === _ ? E : G;
    }, E.clickDistance = function(G) {
      return arguments.length ? (M = (G = +G) * G, E) : Math.sqrt(M);
    }, E.tapDistance = function(G) {
      return arguments.length ? (P = +G, E) : P;
    }, E;
  }
  function dispatchCallback(i, e) {
    i && i(e);
  }
  function reverseDictionary(i) {
    return Object.fromEntries(Object.entries(i).map(([e, t]) => [
      t,
      e
    ]));
  }
  function escapeRegExp(i) {
    return i.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
  }
  const Callable = class {
    constructor() {
      let i = function(...e) {
        return i._call(...e);
      };
      return Object.setPrototypeOf(i, new.target.prototype);
    }
    _call(...i) {
      throw Error("Must implement _call method in subclass");
    }
  };
  function isTypedArray(i) {
    return i?.prototype?.__proto__?.constructor?.name === "TypedArray";
  }
  function isIntegralNumber(i) {
    return Number.isInteger(i) || typeof i == "bigint";
  }
  function exists(i) {
    return i != null;
  }
  function calculateDimensions(i) {
    const e = [];
    let t = i;
    for (; Array.isArray(t); )
      e.push(t.length), t = t[0];
    return e;
  }
  function pop(i, e, t = void 0) {
    const s = i[e];
    if (s !== void 0)
      return delete i[e], s;
    if (t === void 0)
      throw Error(`Key ${e} does not exist in object.`);
    return t;
  }
  function mergeArrays(...i) {
    return Array.prototype.concat.apply([], i);
  }
  function product(...i) {
    return i.reduce((e, t) => e.flatMap((s) => t.map((l) => [
      s,
      l
    ])));
  }
  function calculateReflectOffset(i, e) {
    return Math.abs((i + e) % (2 * e) - e);
  }
  const sharp = {}, ONNX_NODE = Object.freeze(Object.defineProperty({
    __proto__: null,
    default: sharp
  }, Symbol.toStringTag, {
    value: "Module"
  }));
  var ortWeb_min$1 = {
    exports: {}
  };
  const backends = {}, backendsSortedByPriority = [], registerBackend = (i, e, t) => {
    if (e && typeof e.init == "function" && typeof e.createSessionHandler == "function") {
      const s = backends[i];
      if (s === void 0)
        backends[i] = {
          backend: e,
          priority: t
        };
      else {
        if (s.priority > t)
          return;
        if (s.priority === t && s.backend !== e)
          throw new Error(`cannot register backend "${i}" using priority ${t}`);
      }
      if (t >= 0) {
        const l = backendsSortedByPriority.indexOf(i);
        l !== -1 && backendsSortedByPriority.splice(l, 1);
        for (let f = 0; f < backendsSortedByPriority.length; f++)
          if (backends[backendsSortedByPriority[f]].priority <= t) {
            backendsSortedByPriority.splice(f, 0, i);
            return;
          }
        backendsSortedByPriority.push(i);
      }
      return;
    }
    throw new TypeError("not a valid backend");
  }, resolveBackend = async (i) => {
    const e = i.length === 0 ? backendsSortedByPriority : i, t = [];
    for (const s of e) {
      const l = backends[s];
      if (l) {
        if (l.initialized)
          return l.backend;
        if (l.aborted)
          continue;
        const f = !!l.initPromise;
        try {
          return f || (l.initPromise = l.backend.init()), await l.initPromise, l.initialized = true, l.backend;
        } catch (d) {
          f || t.push({
            name: s,
            err: d
          }), l.aborted = true;
        } finally {
          delete l.initPromise;
        }
      }
    }
    throw new Error(`no available backend found. ERR: ${t.map((s) => `[${s.name}] ${s.err}`).join(", ")}`);
  };
  class EnvImpl {
    constructor() {
      this.wasm = {}, this.webgl = {}, this.logLevelInternal = "warning";
    }
    set logLevel(e) {
      if (e !== void 0) {
        if (typeof e != "string" || [
          "verbose",
          "info",
          "warning",
          "error",
          "fatal"
        ].indexOf(e) === -1)
          throw new Error(`Unsupported logging level: ${e}`);
        this.logLevelInternal = e;
      }
    }
    get logLevel() {
      return this.logLevelInternal;
    }
  }
  const env$2 = new EnvImpl(), isBigInt64ArrayAvailable = typeof BigInt64Array < "u" && typeof BigInt64Array.from == "function", isBigUint64ArrayAvailable = typeof BigUint64Array < "u" && typeof BigUint64Array.from == "function", NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP = /* @__PURE__ */ new Map([
    [
      "float32",
      Float32Array
    ],
    [
      "uint8",
      Uint8Array
    ],
    [
      "int8",
      Int8Array
    ],
    [
      "uint16",
      Uint16Array
    ],
    [
      "int16",
      Int16Array
    ],
    [
      "int32",
      Int32Array
    ],
    [
      "bool",
      Uint8Array
    ],
    [
      "float64",
      Float64Array
    ],
    [
      "uint32",
      Uint32Array
    ]
  ]), NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP = /* @__PURE__ */ new Map([
    [
      Float32Array,
      "float32"
    ],
    [
      Uint8Array,
      "uint8"
    ],
    [
      Int8Array,
      "int8"
    ],
    [
      Uint16Array,
      "uint16"
    ],
    [
      Int16Array,
      "int16"
    ],
    [
      Int32Array,
      "int32"
    ],
    [
      Float64Array,
      "float64"
    ],
    [
      Uint32Array,
      "uint32"
    ]
  ]);
  isBigInt64ArrayAvailable && (NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("int64", BigInt64Array), NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigInt64Array, "int64"));
  isBigUint64ArrayAvailable && (NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.set("uint64", BigUint64Array), NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.set(BigUint64Array, "uint64"));
  const calculateSize = (i) => {
    let e = 1;
    for (let t = 0; t < i.length; t++) {
      const s = i[t];
      if (typeof s != "number" || !Number.isSafeInteger(s))
        throw new TypeError(`dims[${t}] must be an integer, got: ${s}`);
      if (s < 0)
        throw new RangeError(`dims[${t}] must be a non-negative integer, got: ${s}`);
      e *= s;
    }
    return e;
  };
  let Tensor$2 = class Ks {
    constructor(e, t, s) {
      let l, f, d;
      if (typeof e == "string")
        if (l = e, d = s, e === "string") {
          if (!Array.isArray(t))
            throw new TypeError("A string tensor's data must be a string array.");
          f = t;
        } else {
          const g = NUMERIC_TENSOR_TYPE_TO_TYPEDARRAY_MAP.get(e);
          if (g === void 0)
            throw new TypeError(`Unsupported tensor type: ${e}.`);
          if (Array.isArray(t))
            f = g.from(t);
          else if (t instanceof g)
            f = t;
          else
            throw new TypeError(`A ${l} tensor's data must be type of ${g}`);
        }
      else if (d = t, Array.isArray(e)) {
        if (e.length === 0)
          throw new TypeError("Tensor type cannot be inferred from an empty array.");
        const g = typeof e[0];
        if (g === "string")
          l = "string", f = e;
        else if (g === "boolean")
          l = "bool", f = Uint8Array.from(e);
        else
          throw new TypeError(`Invalid element type of data array: ${g}.`);
      } else {
        const g = NUMERIC_TENSOR_TYPEDARRAY_TO_TYPE_MAP.get(e.constructor);
        if (g === void 0)
          throw new TypeError(`Unsupported type for tensor data: ${e.constructor}.`);
        l = g, f = e;
      }
      if (d === void 0)
        d = [
          f.length
        ];
      else if (!Array.isArray(d))
        throw new TypeError("A tensor's dims must be a number array");
      const w = calculateSize(d);
      if (w !== f.length)
        throw new Error(`Tensor's size(${w}) does not match data length(${f.length}).`);
      this.dims = d, this.type = l, this.data = f, this.size = w;
    }
    static bufferToTensor(e, t) {
      if (e === void 0)
        throw new Error("Image buffer must be defined");
      if (t.height === void 0 || t.width === void 0)
        throw new Error("Image height and width must be defined");
      const { height: s, width: l } = t, f = t.norm;
      let d, w;
      f === void 0 || f.mean === void 0 ? d = 255 : d = f.mean, f === void 0 || f.bias === void 0 ? w = 0 : w = f.bias;
      const g = t.bitmapFormat !== void 0 ? t.bitmapFormat : "RGBA", _ = t.tensorFormat !== void 0 && t.tensorFormat !== void 0 ? t.tensorFormat : "RGB", h = s * l, r = _ === "RGBA" ? new Float32Array(h * 4) : new Float32Array(h * 3);
      let n = 4, u = 0, p = 1, M = 2, P = 3, E = 0, k = h, $ = h * 2, A = -1;
      g === "RGB" && (n = 3, u = 0, p = 1, M = 2, P = -1), _ === "RGBA" ? A = h * 3 : _ === "RBG" ? (E = 0, $ = h, k = h * 2) : _ === "BGR" && ($ = 0, k = h, E = h * 2);
      for (let F = 0; F < h; F++, u += n, M += n, p += n, P += n)
        r[E++] = (e[u] + w) / d, r[k++] = (e[p] + w) / d, r[$++] = (e[M] + w) / d, A !== -1 && P !== -1 && (r[A++] = (e[P] + w) / d);
      return _ === "RGBA" ? new Ks("float32", r, [
        1,
        4,
        s,
        l
      ]) : new Ks("float32", r, [
        1,
        3,
        s,
        l
      ]);
    }
    static async fromImage(e, t) {
      const s = typeof HTMLImageElement < "u" && e instanceof HTMLImageElement, l = typeof ImageData < "u" && e instanceof ImageData, f = typeof ImageBitmap < "u" && e instanceof ImageBitmap, d = typeof String < "u" && (e instanceof String || typeof e == "string");
      let w, g = {};
      if (s) {
        const _ = document.createElement("canvas"), h = _.getContext("2d");
        if (h != null) {
          let r = e.naturalHeight, n = e.naturalWidth;
          if (t !== void 0 && t.resizedHeight !== void 0 && t.resizedWidth !== void 0 && (r = t.resizedHeight, n = t.resizedWidth), t !== void 0) {
            if (g = t, t.tensorFormat !== void 0)
              throw new Error("Image input config format must be RGBA for HTMLImageElement");
            if (g.tensorFormat = "RGBA", t.height !== void 0 && t.height !== r)
              throw new Error("Image input config height doesn't match HTMLImageElement height");
            if (g.height = r, t.width !== void 0 && t.width !== n)
              throw new Error("Image input config width doesn't match HTMLImageElement width");
            g.width = n;
          } else
            g.tensorFormat = "RGBA", g.height = r, g.width = n;
          _.width = n, _.height = r, h.drawImage(e, 0, 0, n, r), w = h.getImageData(0, 0, n, r).data;
        } else
          throw new Error("Can not access image data");
      } else if (l) {
        const _ = "RGBA";
        let h, r;
        if (t !== void 0 && t.resizedWidth !== void 0 && t.resizedHeight !== void 0 ? (h = t.resizedHeight, r = t.resizedWidth) : (h = e.height, r = e.width), t !== void 0) {
          if (g = t, t.bitmapFormat !== void 0 && t.bitmapFormat !== _)
            throw new Error("Image input config format must be RGBA for ImageData");
          g.bitmapFormat = "RGBA";
        } else
          g.bitmapFormat = "RGBA";
        if (g.height = h, g.width = r, t !== void 0) {
          const n = document.createElement("canvas");
          n.width = r, n.height = h;
          const u = n.getContext("2d");
          if (u != null)
            u.putImageData(e, 0, 0), w = u.getImageData(0, 0, r, h).data;
          else
            throw new Error("Can not access image data");
        } else
          w = e.data;
      } else if (f) {
        if (t === void 0)
          throw new Error("Please provide image config with format for Imagebitmap");
        if (t.bitmapFormat !== void 0)
          throw new Error("Image input config format must be defined for ImageBitmap");
        const _ = document.createElement("canvas").getContext("2d");
        if (_ != null) {
          const h = e.height, r = e.width;
          if (_.drawImage(e, 0, 0, r, h), w = _.getImageData(0, 0, r, h).data, t !== void 0) {
            if (t.height !== void 0 && t.height !== h)
              throw new Error("Image input config height doesn't match ImageBitmap height");
            if (g.height = h, t.width !== void 0 && t.width !== r)
              throw new Error("Image input config width doesn't match ImageBitmap width");
            g.width = r;
          } else
            g.height = h, g.width = r;
          return Ks.bufferToTensor(w, g);
        } else
          throw new Error("Can not access image data");
      } else {
        if (d)
          return new Promise((_, h) => {
            const r = document.createElement("canvas"), n = r.getContext("2d");
            if (!e || !n)
              return h();
            const u = new Image();
            u.crossOrigin = "Anonymous", u.src = e, u.onload = () => {
              r.width = u.width, r.height = u.height, n.drawImage(u, 0, 0, r.width, r.height);
              const p = n.getImageData(0, 0, r.width, r.height);
              if (t !== void 0) {
                if (t.height !== void 0 && t.height !== r.height)
                  throw new Error("Image input config height doesn't match ImageBitmap height");
                if (g.height = r.height, t.width !== void 0 && t.width !== r.width)
                  throw new Error("Image input config width doesn't match ImageBitmap width");
                g.width = r.width;
              } else
                g.height = r.height, g.width = r.width;
              _(Ks.bufferToTensor(p.data, g));
            };
          });
        throw new Error("Input data provided is not supported - aborted tensor creation");
      }
      if (w !== void 0)
        return Ks.bufferToTensor(w, g);
      throw new Error("Input data provided is not supported - aborted tensor creation");
    }
    toImageData(e) {
      var t, s;
      const l = document.createElement("canvas").getContext("2d");
      let f;
      if (l != null) {
        const d = this.dims[3], w = this.dims[2], g = this.dims[1], _ = e !== void 0 && e.format !== void 0 ? e.format : "RGB", h = e !== void 0 && ((t = e.norm) === null || t === void 0 ? void 0 : t.mean) !== void 0 ? e.norm.mean : 255, r = e !== void 0 && ((s = e.norm) === null || s === void 0 ? void 0 : s.bias) !== void 0 ? e.norm.bias : 0, n = w * d;
        if (e !== void 0) {
          if (e.height !== void 0 && e.height !== w)
            throw new Error("Image output config height doesn't match tensor height");
          if (e.width !== void 0 && e.width !== d)
            throw new Error("Image output config width doesn't match tensor width");
          if (e.format !== void 0 && g === 4 && e.format !== "RGBA" || g === 3 && e.format !== "RGB" && e.format !== "BGR")
            throw new Error("Tensor format doesn't match input tensor dims");
        }
        const u = 4;
        let p = 0, M = 1, P = 2, E = 3, k = 0, $ = n, A = n * 2, C = -1;
        _ === "RGBA" ? (k = 0, $ = n, A = n * 2, C = n * 3) : _ === "RGB" ? (k = 0, $ = n, A = n * 2) : _ === "RBG" && (k = 0, A = n, $ = n * 2), f = l.createImageData(d, w);
        for (let F = 0; F < w * d; p += u, M += u, P += u, E += u, F++)
          f.data[p] = (this.data[k++] - r) * h, f.data[M] = (this.data[$++] - r) * h, f.data[P] = (this.data[A++] - r) * h, f.data[E] = C === -1 ? 255 : (this.data[C++] - r) * h;
      } else
        throw new Error("Can not access image data");
      return f;
    }
    reshape(e) {
      return new Ks(this.type, this.data, e);
    }
  };
  const Tensor$1 = Tensor$2;
  let InferenceSession$2 = class Cp {
    constructor(e) {
      this.handler = e;
    }
    async run(e, t, s) {
      const l = {};
      let f = {};
      if (typeof e != "object" || e === null || e instanceof Tensor$1 || Array.isArray(e))
        throw new TypeError("'feeds' must be an object that use input names as keys and OnnxValue as corresponding values.");
      let d = true;
      if (typeof t == "object") {
        if (t === null)
          throw new TypeError("Unexpected argument[1]: cannot be null.");
        if (t instanceof Tensor$1)
          throw new TypeError("'fetches' cannot be a Tensor");
        if (Array.isArray(t)) {
          if (t.length === 0)
            throw new TypeError("'fetches' cannot be an empty array.");
          d = false;
          for (const _ of t) {
            if (typeof _ != "string")
              throw new TypeError("'fetches' must be a string array or an object.");
            if (this.outputNames.indexOf(_) === -1)
              throw new RangeError(`'fetches' contains invalid output name: ${_}.`);
            l[_] = null;
          }
          if (typeof s == "object" && s !== null)
            f = s;
          else if (typeof s < "u")
            throw new TypeError("'options' must be an object.");
        } else {
          let _ = false;
          const h = Object.getOwnPropertyNames(t);
          for (const r of this.outputNames)
            if (h.indexOf(r) !== -1) {
              const n = t[r];
              (n === null || n instanceof Tensor$1) && (_ = true, d = false, l[r] = n);
            }
          if (_) {
            if (typeof s == "object" && s !== null)
              f = s;
            else if (typeof s < "u")
              throw new TypeError("'options' must be an object.");
          } else
            f = t;
        }
      } else if (typeof t < "u")
        throw new TypeError("Unexpected argument[1]: must be 'fetches' or 'options'.");
      for (const _ of this.inputNames)
        if (typeof e[_] > "u")
          throw new Error(`input '${_}' is missing in 'feeds'.`);
      if (d)
        for (const _ of this.outputNames)
          l[_] = null;
      const w = await this.handler.run(e, l, f), g = {};
      for (const _ in w)
        Object.hasOwnProperty.call(w, _) && (g[_] = new Tensor$1(w[_].type, w[_].data, w[_].dims));
      return g;
    }
    static async create(e, t, s, l) {
      let f, d = {};
      if (typeof e == "string") {
        if (f = e, typeof t == "object" && t !== null)
          d = t;
        else if (typeof t < "u")
          throw new TypeError("'options' must be an object.");
      } else if (e instanceof Uint8Array) {
        if (f = e, typeof t == "object" && t !== null)
          d = t;
        else if (typeof t < "u")
          throw new TypeError("'options' must be an object.");
      } else if (e instanceof ArrayBuffer || typeof SharedArrayBuffer < "u" && e instanceof SharedArrayBuffer) {
        const r = e;
        let n = 0, u = e.byteLength;
        if (typeof t == "object" && t !== null)
          d = t;
        else if (typeof t == "number") {
          if (n = t, !Number.isSafeInteger(n))
            throw new RangeError("'byteOffset' must be an integer.");
          if (n < 0 || n >= r.byteLength)
            throw new RangeError(`'byteOffset' is out of range [0, ${r.byteLength}).`);
          if (u = e.byteLength - n, typeof s == "number") {
            if (u = s, !Number.isSafeInteger(u))
              throw new RangeError("'byteLength' must be an integer.");
            if (u <= 0 || n + u > r.byteLength)
              throw new RangeError(`'byteLength' is out of range (0, ${r.byteLength - n}].`);
            if (typeof l == "object" && l !== null)
              d = l;
            else if (typeof l < "u")
              throw new TypeError("'options' must be an object.");
          } else if (typeof s < "u")
            throw new TypeError("'byteLength' must be a number.");
        } else if (typeof t < "u")
          throw new TypeError("'options' must be an object.");
        f = new Uint8Array(r, n, u);
      } else
        throw new TypeError("Unexpected argument[0]: must be 'path' or 'buffer'.");
      const g = (d.executionProviders || []).map((r) => typeof r == "string" ? r : r.name), h = await (await resolveBackend(g)).createSessionHandler(f, d);
      return new Cp(h);
    }
    startProfiling() {
      this.handler.startProfiling();
    }
    endProfiling() {
      this.handler.endProfiling();
    }
    get inputNames() {
      return this.handler.inputNames;
    }
    get outputNames() {
      return this.handler.outputNames;
    }
  };
  const InferenceSession$1 = InferenceSession$2, lib = Object.freeze(Object.defineProperty({
    __proto__: null,
    InferenceSession: InferenceSession$1,
    Tensor: Tensor$1,
    env: env$2,
    registerBackend
  }, Symbol.toStringTag, {
    value: "Module"
  })), require$$0 = getAugmentedNamespace(lib);
  (function(module, exports) {
    (function(i, e) {
      module.exports = e(require$$0);
    })(self, (__WEBPACK_EXTERNAL_MODULE__1670__) => (() => {
      var __webpack_modules__ = {
        3474: (i, e, t) => {
          var s, l = (s = (s = typeof document < "u" && document.currentScript ? document.currentScript.src : void 0) || "/index.js", function(f) {
            function d() {
              return fe.buffer != pe && De(fe.buffer), oe;
            }
            function w() {
              return fe.buffer != pe && De(fe.buffer), be;
            }
            function g() {
              return fe.buffer != pe && De(fe.buffer), Ee;
            }
            function _() {
              return fe.buffer != pe && De(fe.buffer), Oe;
            }
            function h() {
              return fe.buffer != pe && De(fe.buffer), Ye;
            }
            var r, n, u;
            f = f || {}, r || (r = f !== void 0 ? f : {}), r.ready = new Promise(function(Y, ae) {
              n = Y, u = ae;
            });
            var p, M, P, E, k, $, A = Object.assign({}, r), C = "./this.program", F = (Y, ae) => {
              throw ae;
            }, D = typeof window == "object", N = typeof importScripts == "function", R = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", j = r.ENVIRONMENT_IS_PTHREAD || false, Z = "";
            function te(Y) {
              return r.locateFile ? r.locateFile(Y, Z) : Z + Y;
            }
            if (R) {
              let Y;
              Z = N ? t(908).dirname(Z) + "/" : "//", $ = () => {
                k || (E = t(1384), k = t(908));
              }, p = function(ae, me) {
                return $(), ae = k.normalize(ae), E.readFileSync(ae, me ? void 0 : "utf8");
              }, P = (ae) => ((ae = p(ae, true)).buffer || (ae = new Uint8Array(ae)), ae), M = (ae, me, Ae) => {
                $(), ae = k.normalize(ae), E.readFile(ae, function(Ne, tt) {
                  Ne ? Ae(Ne) : me(tt.buffer);
                });
              }, 1 < process.argv.length && (C = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("uncaughtException", function(ae) {
                if (!(ae instanceof St))
                  throw ae;
              }), process.on("unhandledRejection", function(ae) {
                throw ae;
              }), F = (ae, me) => {
                if (lt())
                  throw process.exitCode = ae, me;
                me instanceof St || Q("exiting due to exception: " + me), process.exit(ae);
              }, r.inspect = function() {
                return "[Emscripten Module object]";
              };
              try {
                Y = t(9925);
              } catch (ae) {
                throw console.error('The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?'), ae;
              }
              t.g.Worker = Y.Worker;
            } else
              (D || N) && (N ? Z = self.location.href : typeof document < "u" && document.currentScript && (Z = document.currentScript.src), s && (Z = s), Z = Z.indexOf("blob:") !== 0 ? Z.substr(0, Z.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", R || (p = (Y) => {
                var ae = new XMLHttpRequest();
                return ae.open("GET", Y, false), ae.send(null), ae.responseText;
              }, N && (P = (Y) => {
                var ae = new XMLHttpRequest();
                return ae.open("GET", Y, false), ae.responseType = "arraybuffer", ae.send(null), new Uint8Array(ae.response);
              }), M = (Y, ae, me) => {
                var Ae = new XMLHttpRequest();
                Ae.open("GET", Y, true), Ae.responseType = "arraybuffer", Ae.onload = () => {
                  Ae.status == 200 || Ae.status == 0 && Ae.response ? ae(Ae.response) : me();
                }, Ae.onerror = me, Ae.send(null);
              }));
            R && typeof performance > "u" && (t.g.performance = t(6953).performance);
            var J = console.log.bind(console), G = console.warn.bind(console);
            R && ($(), J = (Y) => E.writeSync(1, Y + `
`), G = (Y) => E.writeSync(2, Y + `
`));
            var H, U = r.print || J, Q = r.printErr || G;
            Object.assign(r, A), A = null, r.thisProgram && (C = r.thisProgram), r.quit && (F = r.quit), r.wasmBinary && (H = r.wasmBinary);
            var he = r.noExitRuntime || false;
            typeof WebAssembly != "object" && pt("no native wasm support detected");
            var fe, Me, pe, oe, be, Ee, Oe, Ye, We = false, ot = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0;
            function vt(Y, ae, me) {
              var Ae = (ae >>>= 0) + me;
              for (me = ae; Y[me] && !(me >= Ae); )
                ++me;
              if (16 < me - ae && Y.buffer && ot)
                return ot.decode(Y.buffer instanceof SharedArrayBuffer ? Y.slice(ae, me) : Y.subarray(ae, me));
              for (Ae = ""; ae < me; ) {
                var Ne = Y[ae++];
                if (128 & Ne) {
                  var tt = 63 & Y[ae++];
                  if ((224 & Ne) == 192)
                    Ae += String.fromCharCode((31 & Ne) << 6 | tt);
                  else {
                    var gt = 63 & Y[ae++];
                    65536 > (Ne = (240 & Ne) == 224 ? (15 & Ne) << 12 | tt << 6 | gt : (7 & Ne) << 18 | tt << 12 | gt << 6 | 63 & Y[ae++]) ? Ae += String.fromCharCode(Ne) : (Ne -= 65536, Ae += String.fromCharCode(55296 | Ne >> 10, 56320 | 1023 & Ne));
                  }
                } else
                  Ae += String.fromCharCode(Ne);
              }
              return Ae;
            }
            function qe(Y, ae) {
              return (Y >>>= 0) ? vt(w(), Y, ae) : "";
            }
            function _e(Y, ae, me, Ae) {
              if (!(0 < Ae))
                return 0;
              var Ne = me >>>= 0;
              Ae = me + Ae - 1;
              for (var tt = 0; tt < Y.length; ++tt) {
                var gt = Y.charCodeAt(tt);
                if (55296 <= gt && 57343 >= gt && (gt = 65536 + ((1023 & gt) << 10) | 1023 & Y.charCodeAt(++tt)), 127 >= gt) {
                  if (me >= Ae)
                    break;
                  ae[me++ >>> 0] = gt;
                } else {
                  if (2047 >= gt) {
                    if (me + 1 >= Ae)
                      break;
                    ae[me++ >>> 0] = 192 | gt >> 6;
                  } else {
                    if (65535 >= gt) {
                      if (me + 2 >= Ae)
                        break;
                      ae[me++ >>> 0] = 224 | gt >> 12;
                    } else {
                      if (me + 3 >= Ae)
                        break;
                      ae[me++ >>> 0] = 240 | gt >> 18, ae[me++ >>> 0] = 128 | gt >> 12 & 63;
                    }
                    ae[me++ >>> 0] = 128 | gt >> 6 & 63;
                  }
                  ae[me++ >>> 0] = 128 | 63 & gt;
                }
              }
              return ae[me >>> 0] = 0, me - Ne;
            }
            function le(Y) {
              for (var ae = 0, me = 0; me < Y.length; ++me) {
                var Ae = Y.charCodeAt(me);
                127 >= Ae ? ae++ : 2047 >= Ae ? ae += 2 : 55296 <= Ae && 57343 >= Ae ? (ae += 4, ++me) : ae += 3;
              }
              return ae;
            }
            function De(Y) {
              pe = Y, r.HEAP8 = oe = new Int8Array(Y), r.HEAP16 = new Int16Array(Y), r.HEAP32 = Ee = new Int32Array(Y), r.HEAPU8 = be = new Uint8Array(Y), r.HEAPU16 = new Uint16Array(Y), r.HEAPU32 = Oe = new Uint32Array(Y), r.HEAPF32 = new Float32Array(Y), r.HEAPF64 = Ye = new Float64Array(Y);
            }
            j && (pe = r.buffer);
            var Be = r.INITIAL_MEMORY || 16777216;
            if (j)
              fe = r.wasmMemory, pe = r.buffer;
            else if (r.wasmMemory)
              fe = r.wasmMemory;
            else if (!((fe = new WebAssembly.Memory({
              initial: Be / 65536,
              maximum: 65536,
              shared: true
            })).buffer instanceof SharedArrayBuffer))
              throw Q("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"), R && console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"), Error("bad memory");
            fe && (pe = fe.buffer), Be = pe.byteLength, De(pe);
            var Ze, rt = [], je = [], it = [], Ge = [];
            function lt() {
              return he || false;
            }
            function ht() {
              var Y = r.preRun.shift();
              rt.unshift(Y);
            }
            var mt, Je = 0, Rt = null;
            function pt(Y) {
              throw j ? postMessage({
                cmd: "onAbort",
                arg: Y
              }) : r.onAbort && r.onAbort(Y), Q(Y = "Aborted(" + Y + ")"), We = true, Y = new WebAssembly.RuntimeError(Y + ". Build with -sASSERTIONS for more info."), u(Y), Y;
            }
            function At() {
              return mt.startsWith("data:application/octet-stream;base64,");
            }
            function Ot() {
              var Y = mt;
              try {
                if (Y == mt && H)
                  return new Uint8Array(H);
                if (P)
                  return P(Y);
                throw "both async and sync fetching of the wasm failed";
              } catch (ae) {
                pt(ae);
              }
            }
            mt = "ort-wasm-threaded.wasm", At() || (mt = te(mt));
            var Ct = {};
            function St(Y) {
              this.name = "ExitStatus", this.message = "Program terminated with exit(" + Y + ")", this.status = Y;
            }
            function zt(Y) {
              (Y = qt.Vb[Y]) || pt(), qt.mc(Y);
            }
            function _n(Y) {
              var ae = qt.Cc();
              if (!ae)
                return 6;
              qt.ac.push(ae), qt.Vb[Y.Ub] = ae, ae.Ub = Y.Ub;
              var me = {
                cmd: "run",
                start_routine: Y.Ic,
                arg: Y.zc,
                pthread_ptr: Y.Ub
              };
              return ae.$b = () => {
                me.time = performance.now(), ae.postMessage(me, Y.Nc);
              }, ae.loaded && (ae.$b(), delete ae.$b), 0;
            }
            function Zt(Y) {
              if (j)
                return Lt(1, 1, Y);
              lt() || (qt.oc(), r.onExit && r.onExit(Y), We = true), F(Y, new St(Y));
            }
            function en(Y, ae) {
              if (!ae && j)
                throw Un(Y), "unwind";
              lt() || j || (yr(), Cn(it), Xe(0), Kt[1].length && tr(1, 10), Kt[2].length && tr(2, 10), qt.oc()), Zt(Y);
            }
            var qt = {
              Yb: [],
              ac: [],
              qc: [],
              Vb: {},
              fc: function() {
                j && qt.Ec();
              },
              Pc: function() {
              },
              Ec: function() {
                qt.receiveObjectTransfer = qt.Gc, qt.threadInitTLS = qt.pc, qt.setExitStatus = qt.nc, he = false;
              },
              nc: function() {
              },
              oc: function() {
                for (var Y of Object.values(qt.Vb))
                  qt.mc(Y);
                for (Y of qt.Yb)
                  Y.terminate();
                qt.Yb = [];
              },
              mc: function(Y) {
                var ae = Y.Ub;
                delete qt.Vb[ae], qt.Yb.push(Y), qt.ac.splice(qt.ac.indexOf(Y), 1), Y.Ub = 0, Pe(ae);
              },
              Gc: function() {
              },
              pc: function() {
                qt.qc.forEach((Y) => Y());
              },
              Fc: function(Y, ae) {
                Y.onmessage = (me) => {
                  var Ae = (me = me.data).cmd;
                  if (Y.Ub && (qt.Bc = Y.Ub), me.targetThread && me.targetThread != Gn()) {
                    var Ne = qt.Vb[me.Qc];
                    Ne ? Ne.postMessage(me, me.transferList) : Q('Internal error! Worker sent a message "' + Ae + '" to target pthread ' + me.targetThread + ", but that thread no longer exists!");
                  } else
                    Ae === "processProxyingQueue" ? Ie(me.queue) : Ae === "spawnThread" ? _n(me) : Ae === "cleanupThread" ? zt(me.thread) : Ae === "killThread" ? (me = me.thread, Ae = qt.Vb[me], delete qt.Vb[me], Ae.terminate(), Pe(me), qt.ac.splice(qt.ac.indexOf(Ae), 1), Ae.Ub = 0) : Ae === "cancelThread" ? qt.Vb[me.thread].postMessage({
                      cmd: "cancel"
                    }) : Ae === "loaded" ? (Y.loaded = true, ae && ae(Y), Y.$b && (Y.$b(), delete Y.$b)) : Ae === "print" ? U("Thread " + me.threadId + ": " + me.text) : Ae === "printErr" ? Q("Thread " + me.threadId + ": " + me.text) : Ae === "alert" ? alert("Thread " + me.threadId + ": " + me.text) : me.target === "setimmediate" ? Y.postMessage(me) : Ae === "onAbort" ? r.onAbort && r.onAbort(me.arg) : Ae && Q("worker sent an unknown command " + Ae);
                  qt.Bc = void 0;
                }, Y.onerror = (me) => {
                  throw Q("worker sent an error! " + me.filename + ":" + me.lineno + ": " + me.message), me;
                }, R && (Y.on("message", function(me) {
                  Y.onmessage({
                    data: me
                  });
                }), Y.on("error", function(me) {
                  Y.onerror(me);
                }), Y.on("detachedExit", function() {
                })), Y.postMessage({
                  cmd: "load",
                  urlOrBlob: r.mainScriptUrlOrBlob || s,
                  wasmMemory: fe,
                  wasmModule: Me
                });
              },
              yc: function() {
                var Y = te("ort-wasm-threaded.worker.js");
                qt.Yb.push(new Worker(Y));
              },
              Cc: function() {
                return qt.Yb.length == 0 && (qt.yc(), qt.Fc(qt.Yb[0])), qt.Yb.pop();
              }
            };
            function Cn(Y) {
              for (; 0 < Y.length; )
                Y.shift()(r);
            }
            function Hn(Y) {
              var ae = dt();
              return Y = Y(), ut(ae), Y;
            }
            function Un(Y) {
              if (j)
                return Lt(2, 0, Y);
              try {
                en(Y);
              } catch (ae) {
                ae instanceof St || ae == "unwind" || F(1, ae);
              }
            }
            r.PThread = qt, r.establishStackSpace = function() {
              var Y = Gn(), ae = g()[Y + 44 >> 2 >>> 0];
              Y = g()[Y + 48 >> 2 >>> 0], at(ae, ae - Y), ut(ae);
            };
            var kn = [];
            function ln(Y) {
              var ae = kn[Y];
              return ae || (Y >= kn.length && (kn.length = Y + 1), kn[Y] = ae = Ze.get(Y)), ae;
            }
            r.invokeEntryPoint = function(Y, ae) {
              Y = ln(Y)(ae), lt() ? qt.nc(Y) : Ce(Y);
            };
            var nr, ur, rr = [], Jt = 0, wt = 0;
            function tn(Y) {
              this.Zb = Y, this.Sb = Y - 24, this.xc = function(ae) {
                _()[this.Sb + 4 >> 2 >>> 0] = ae;
              }, this.bc = function() {
                return _()[this.Sb + 4 >> 2 >>> 0];
              }, this.wc = function(ae) {
                _()[this.Sb + 8 >> 2 >>> 0] = ae;
              }, this.Dc = function() {
                return _()[this.Sb + 8 >> 2 >>> 0];
              }, this.rc = function() {
                g()[this.Sb >> 2 >>> 0] = 0;
              }, this.hc = function(ae) {
                ae = ae ? 1 : 0, d()[this.Sb + 12 >> 0 >>> 0] = ae;
              }, this.uc = function() {
                return d()[this.Sb + 12 >> 0 >>> 0] != 0;
              }, this.ic = function(ae) {
                ae = ae ? 1 : 0, d()[this.Sb + 13 >> 0 >>> 0] = ae;
              }, this.kc = function() {
                return d()[this.Sb + 13 >> 0 >>> 0] != 0;
              }, this.fc = function(ae, me) {
                this.cc(0), this.xc(ae), this.wc(me), this.rc(), this.hc(false), this.ic(false);
              }, this.sc = function() {
                Atomics.add(g(), this.Sb >> 2, 1);
              }, this.Hc = function() {
                return Atomics.sub(g(), this.Sb >> 2, 1) === 1;
              }, this.cc = function(ae) {
                _()[this.Sb + 16 >> 2 >>> 0] = ae;
              }, this.tc = function() {
                return _()[this.Sb + 16 >> 2 >>> 0];
              }, this.vc = function() {
                if (gn(this.bc()))
                  return _()[this.Zb >> 2 >>> 0];
                var ae = this.tc();
                return ae !== 0 ? ae : this.Zb;
              };
            }
            function ar(Y) {
              return dr(new tn(Y).Sb);
            }
            function on(Y, ae, me, Ae) {
              return j ? Lt(3, 1, Y, ae, me, Ae) : sr(Y, ae, me, Ae);
            }
            function sr(Y, ae, me, Ae) {
              if (typeof SharedArrayBuffer > "u")
                return Q("Current environment does not support SharedArrayBuffer, pthreads are not available!"), 6;
              var Ne = [];
              return j && Ne.length === 0 ? on(Y, ae, me, Ae) : (Y = {
                Ic: me,
                Ub: Y,
                zc: Ae,
                Nc: Ne
              }, j ? (Y.Oc = "spawnThread", postMessage(Y, Ne), 0) : _n(Y));
            }
            function W(Y, ae, me) {
              return j ? Lt(4, 1, Y, ae, me) : 0;
            }
            function ve(Y, ae) {
              if (j)
                return Lt(5, 1, Y, ae);
            }
            function de(Y, ae) {
              if (j)
                return Lt(6, 1, Y, ae);
            }
            function ye(Y, ae, me) {
              if (j)
                return Lt(7, 1, Y, ae, me);
            }
            function ke(Y, ae, me) {
              return j ? Lt(8, 1, Y, ae, me) : 0;
            }
            function Ue(Y, ae) {
              if (j)
                return Lt(9, 1, Y, ae);
            }
            function He(Y, ae, me) {
              if (j)
                return Lt(10, 1, Y, ae, me);
            }
            function Ft(Y, ae, me, Ae) {
              if (j)
                return Lt(11, 1, Y, ae, me, Ae);
            }
            function Bt(Y, ae, me, Ae) {
              if (j)
                return Lt(12, 1, Y, ae, me, Ae);
            }
            function Et(Y, ae, me, Ae) {
              if (j)
                return Lt(13, 1, Y, ae, me, Ae);
            }
            function jt(Y) {
              if (j)
                return Lt(14, 1, Y);
            }
            function ie(Y, ae) {
              if (j)
                return Lt(15, 1, Y, ae);
            }
            function xe(Y, ae, me) {
              if (j)
                return Lt(16, 1, Y, ae, me);
            }
            function Ie(Y) {
              Atomics.store(g(), Y >> 2, 1), Gn() && ce(Y), Atomics.compareExchange(g(), Y >> 2, 1, 0);
            }
            function Re(Y) {
              return _()[Y >>> 2] + 4294967296 * g()[Y + 4 >>> 2];
            }
            function Ve(Y, ae, me, Ae, Ne, tt) {
              return j ? Lt(17, 1, Y, ae, me, Ae, Ne, tt) : -52;
            }
            function Qe(Y, ae, me, Ae, Ne, tt) {
              if (j)
                return Lt(18, 1, Y, ae, me, Ae, Ne, tt);
            }
            function _t(Y) {
              var ae = le(Y) + 1, me = or(ae);
              return me && _e(Y, d(), me, ae), me;
            }
            function Gt(Y, ae, me) {
              function Ae(Pt) {
                return (Pt = Pt.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? Pt[1] : "GMT";
              }
              if (j)
                return Lt(19, 1, Y, ae, me);
              var Ne = (/* @__PURE__ */ new Date()).getFullYear(), tt = new Date(Ne, 0, 1), gt = new Date(Ne, 6, 1);
              Ne = tt.getTimezoneOffset();
              var Nt = gt.getTimezoneOffset(), Xt = Math.max(Ne, Nt);
              g()[Y >> 2 >>> 0] = 60 * Xt, g()[ae >> 2 >>> 0] = +(Ne != Nt), Y = Ae(tt), ae = Ae(gt), Y = _t(Y), ae = _t(ae), Nt < Ne ? (_()[me >> 2 >>> 0] = Y, _()[me + 4 >> 2 >>> 0] = ae) : (_()[me >> 2 >>> 0] = ae, _()[me + 4 >> 2 >>> 0] = Y);
            }
            function Lt(Y, ae) {
              var me = arguments.length - 2, Ae = arguments;
              return Hn(() => {
                for (var Ne = It(8 * me), tt = Ne >> 3, gt = 0; gt < me; gt++) {
                  var Nt = Ae[2 + gt];
                  h()[tt + gt >>> 0] = Nt;
                }
                return K(Y, me, Ne, ae);
              });
            }
            r.executeNotifiedProxyingQueue = Ie, ur = R ? () => {
              var Y = process.hrtime();
              return 1e3 * Y[0] + Y[1] / 1e6;
            } : j ? () => performance.now() - r.__performance_now_clock_drift : () => performance.now();
            var dn, bn = [], Pn = {};
            function Sn() {
              if (!dn) {
                var Y, ae = {
                  USER: "web_user",
                  LOGNAME: "web_user",
                  PATH: "/",
                  PWD: "/",
                  HOME: "/home/web_user",
                  LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8",
                  _: C || "./this.program"
                };
                for (Y in Pn)
                  Pn[Y] === void 0 ? delete ae[Y] : ae[Y] = Pn[Y];
                var me = [];
                for (Y in ae)
                  me.push(Y + "=" + ae[Y]);
                dn = me;
              }
              return dn;
            }
            function et(Y, ae) {
              if (j)
                return Lt(20, 1, Y, ae);
              var me = 0;
              return Sn().forEach(function(Ae, Ne) {
                var tt = ae + me;
                for (Ne = _()[Y + 4 * Ne >> 2 >>> 0] = tt, tt = 0; tt < Ae.length; ++tt)
                  d()[Ne++ >> 0 >>> 0] = Ae.charCodeAt(tt);
                d()[Ne >> 0 >>> 0] = 0, me += Ae.length + 1;
              }), 0;
            }
            function cn(Y, ae) {
              if (j)
                return Lt(21, 1, Y, ae);
              var me = Sn();
              _()[Y >> 2 >>> 0] = me.length;
              var Ae = 0;
              return me.forEach(function(Ne) {
                Ae += Ne.length + 1;
              }), _()[ae >> 2 >>> 0] = Ae, 0;
            }
            function Tn(Y) {
              return j ? Lt(22, 1, Y) : 52;
            }
            function Ln(Y, ae, me, Ae) {
              return j ? Lt(23, 1, Y, ae, me, Ae) : 52;
            }
            function Xn(Y, ae, me, Ae, Ne) {
              return j ? Lt(24, 1, Y, ae, me, Ae, Ne) : 70;
            }
            var Kt = [
              null,
              [],
              []
            ];
            function tr(Y, ae) {
              var me = Kt[Y];
              ae === 0 || ae === 10 ? ((Y === 1 ? U : Q)(vt(me, 0)), me.length = 0) : me.push(ae);
            }
            function fr(Y, ae, me, Ae) {
              if (j)
                return Lt(25, 1, Y, ae, me, Ae);
              for (var Ne = 0, tt = 0; tt < me; tt++) {
                var gt = _()[ae >> 2 >>> 0], Nt = _()[ae + 4 >> 2 >>> 0];
                ae += 8;
                for (var Xt = 0; Xt < Nt; Xt++)
                  tr(Y, w()[gt + Xt >>> 0]);
                Ne += Nt;
              }
              return _()[Ae >> 2 >>> 0] = Ne, 0;
            }
            var Nn = 0;
            function Kn(Y) {
              return Y % 4 == 0 && (Y % 100 != 0 || Y % 400 == 0);
            }
            var bt = [
              31,
              29,
              31,
              30,
              31,
              30,
              31,
              31,
              30,
              31,
              30,
              31
            ], yt = [
              31,
              28,
              31,
              30,
              31,
              30,
              31,
              31,
              30,
              31,
              30,
              31
            ];
            function Vt(Y, ae, me, Ae) {
              function Ne(Ke, sn, kt) {
                for (Ke = typeof Ke == "number" ? Ke.toString() : Ke || ""; Ke.length < sn; )
                  Ke = kt[0] + Ke;
                return Ke;
              }
              function tt(Ke, sn) {
                return Ne(Ke, sn, "0");
              }
              function gt(Ke, sn) {
                function kt(xr) {
                  return 0 > xr ? -1 : 0 < xr ? 1 : 0;
                }
                var Mn;
                return (Mn = kt(Ke.getFullYear() - sn.getFullYear())) === 0 && (Mn = kt(Ke.getMonth() - sn.getMonth())) === 0 && (Mn = kt(Ke.getDate() - sn.getDate())), Mn;
              }
              function Nt(Ke) {
                switch (Ke.getDay()) {
                  case 0:
                    return new Date(Ke.getFullYear() - 1, 11, 29);
                  case 1:
                    return Ke;
                  case 2:
                    return new Date(Ke.getFullYear(), 0, 3);
                  case 3:
                    return new Date(Ke.getFullYear(), 0, 2);
                  case 4:
                    return new Date(Ke.getFullYear(), 0, 1);
                  case 5:
                    return new Date(Ke.getFullYear() - 1, 11, 31);
                  case 6:
                    return new Date(Ke.getFullYear() - 1, 11, 30);
                }
              }
              function Xt(Ke) {
                var sn = Ke.Wb;
                for (Ke = new Date(new Date(Ke.Xb + 1900, 0, 1).getTime()); 0 < sn; ) {
                  var kt = Ke.getMonth(), Mn = (Kn(Ke.getFullYear()) ? bt : yt)[kt];
                  if (!(sn > Mn - Ke.getDate())) {
                    Ke.setDate(Ke.getDate() + sn);
                    break;
                  }
                  sn -= Mn - Ke.getDate() + 1, Ke.setDate(1), 11 > kt ? Ke.setMonth(kt + 1) : (Ke.setMonth(0), Ke.setFullYear(Ke.getFullYear() + 1));
                }
                return kt = new Date(Ke.getFullYear() + 1, 0, 4), sn = Nt(new Date(Ke.getFullYear(), 0, 4)), kt = Nt(kt), 0 >= gt(sn, Ke) ? 0 >= gt(kt, Ke) ? Ke.getFullYear() + 1 : Ke.getFullYear() : Ke.getFullYear() - 1;
              }
              var Pt = g()[Ae + 40 >> 2 >>> 0];
              for (var Qt in Ae = {
                Lc: g()[Ae >> 2 >>> 0],
                Kc: g()[Ae + 4 >> 2 >>> 0],
                dc: g()[Ae + 8 >> 2 >>> 0],
                jc: g()[Ae + 12 >> 2 >>> 0],
                ec: g()[Ae + 16 >> 2 >>> 0],
                Xb: g()[Ae + 20 >> 2 >>> 0],
                Tb: g()[Ae + 24 >> 2 >>> 0],
                Wb: g()[Ae + 28 >> 2 >>> 0],
                Rc: g()[Ae + 32 >> 2 >>> 0],
                Jc: g()[Ae + 36 >> 2 >>> 0],
                Mc: Pt ? qe(Pt) : ""
              }, me = qe(me), Pt = {
                "%c": "%a %b %d %H:%M:%S %Y",
                "%D": "%m/%d/%y",
                "%F": "%Y-%m-%d",
                "%h": "%b",
                "%r": "%I:%M:%S %p",
                "%R": "%H:%M",
                "%T": "%H:%M:%S",
                "%x": "%m/%d/%y",
                "%X": "%H:%M:%S",
                "%Ec": "%c",
                "%EC": "%C",
                "%Ex": "%m/%d/%y",
                "%EX": "%H:%M:%S",
                "%Ey": "%y",
                "%EY": "%Y",
                "%Od": "%d",
                "%Oe": "%e",
                "%OH": "%H",
                "%OI": "%I",
                "%Om": "%m",
                "%OM": "%M",
                "%OS": "%S",
                "%Ou": "%u",
                "%OU": "%U",
                "%OV": "%V",
                "%Ow": "%w",
                "%OW": "%W",
                "%Oy": "%y"
              })
                me = me.replace(new RegExp(Qt, "g"), Pt[Qt]);
              var Vn = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Dn = "January February March April May June July August September October November December".split(" ");
              for (Qt in Pt = {
                "%a": function(Ke) {
                  return Vn[Ke.Tb].substring(0, 3);
                },
                "%A": function(Ke) {
                  return Vn[Ke.Tb];
                },
                "%b": function(Ke) {
                  return Dn[Ke.ec].substring(0, 3);
                },
                "%B": function(Ke) {
                  return Dn[Ke.ec];
                },
                "%C": function(Ke) {
                  return tt((Ke.Xb + 1900) / 100 | 0, 2);
                },
                "%d": function(Ke) {
                  return tt(Ke.jc, 2);
                },
                "%e": function(Ke) {
                  return Ne(Ke.jc, 2, " ");
                },
                "%g": function(Ke) {
                  return Xt(Ke).toString().substring(2);
                },
                "%G": function(Ke) {
                  return Xt(Ke);
                },
                "%H": function(Ke) {
                  return tt(Ke.dc, 2);
                },
                "%I": function(Ke) {
                  return (Ke = Ke.dc) == 0 ? Ke = 12 : 12 < Ke && (Ke -= 12), tt(Ke, 2);
                },
                "%j": function(Ke) {
                  for (var sn = 0, kt = 0; kt <= Ke.ec - 1; sn += (Kn(Ke.Xb + 1900) ? bt : yt)[kt++])
                    ;
                  return tt(Ke.jc + sn, 3);
                },
                "%m": function(Ke) {
                  return tt(Ke.ec + 1, 2);
                },
                "%M": function(Ke) {
                  return tt(Ke.Kc, 2);
                },
                "%n": function() {
                  return `
`;
                },
                "%p": function(Ke) {
                  return 0 <= Ke.dc && 12 > Ke.dc ? "AM" : "PM";
                },
                "%S": function(Ke) {
                  return tt(Ke.Lc, 2);
                },
                "%t": function() {
                  return "	";
                },
                "%u": function(Ke) {
                  return Ke.Tb || 7;
                },
                "%U": function(Ke) {
                  return tt(Math.floor((Ke.Wb + 7 - Ke.Tb) / 7), 2);
                },
                "%V": function(Ke) {
                  var sn = Math.floor((Ke.Wb + 7 - (Ke.Tb + 6) % 7) / 7);
                  if (2 >= (Ke.Tb + 371 - Ke.Wb - 2) % 7 && sn++, sn)
                    sn == 53 && ((kt = (Ke.Tb + 371 - Ke.Wb) % 7) == 4 || kt == 3 && Kn(Ke.Xb) || (sn = 1));
                  else {
                    sn = 52;
                    var kt = (Ke.Tb + 7 - Ke.Wb - 1) % 7;
                    (kt == 4 || kt == 5 && Kn(Ke.Xb % 400 - 1)) && sn++;
                  }
                  return tt(sn, 2);
                },
                "%w": function(Ke) {
                  return Ke.Tb;
                },
                "%W": function(Ke) {
                  return tt(Math.floor((Ke.Wb + 7 - (Ke.Tb + 6) % 7) / 7), 2);
                },
                "%y": function(Ke) {
                  return (Ke.Xb + 1900).toString().substring(2);
                },
                "%Y": function(Ke) {
                  return Ke.Xb + 1900;
                },
                "%z": function(Ke) {
                  var sn = 0 <= (Ke = Ke.Jc);
                  return Ke = Math.abs(Ke) / 60, (sn ? "+" : "-") + ("0000" + (Ke / 60 * 100 + Ke % 60)).slice(-4);
                },
                "%Z": function(Ke) {
                  return Ke.Mc;
                },
                "%%": function() {
                  return "%";
                }
              }, me = me.replace(/%%/g, "\0\0"), Pt)
                me.includes(Qt) && (me = me.replace(new RegExp(Qt, "g"), Pt[Qt](Ae)));
              return Qt = function(Ke) {
                var sn = Array(le(Ke) + 1);
                return _e(Ke, sn, 0, sn.length), sn;
              }(me = me.replace(/\0\0/g, "%")), Qt.length > ae ? 0 : (function(Ke, sn) {
                d().set(Ke, sn >>> 0);
              }(Qt, Y), Qt.length - 1);
            }
            qt.fc();
            var On = [
              null,
              Zt,
              Un,
              on,
              W,
              ve,
              de,
              ye,
              ke,
              Ue,
              He,
              Ft,
              Bt,
              Et,
              jt,
              ie,
              xe,
              Ve,
              Qe,
              Gt,
              et,
              cn,
              Tn,
              Ln,
              Xn,
              fr
            ], mn = {
              b: function(Y) {
                return or(Y + 24) + 24;
              },
              n: function(Y) {
                return (Y = new tn(Y)).uc() || (Y.hc(true), Jt--), Y.ic(false), rr.push(Y), Y.sc(), Y.vc();
              },
              ma: function(Y) {
                throw Q("Unexpected exception thrown, this is not properly supported - aborting"), We = true, Y;
              },
              x: function() {
                $e(0);
                var Y = rr.pop();
                if (Y.Hc() && !Y.kc()) {
                  var ae = Y.Dc();
                  ae && ln(ae)(Y.Zb), ar(Y.Zb);
                }
                wt = 0;
              },
              e: function() {
                var Y = wt;
                if (!Y)
                  return Nn = 0;
                var ae = new tn(Y);
                ae.cc(Y);
                var me = ae.bc();
                if (!me)
                  return Nn = 0, Y;
                for (var Ae = Array.prototype.slice.call(arguments), Ne = 0; Ne < Ae.length; Ne++) {
                  var tt = Ae[Ne];
                  if (tt === 0 || tt === me)
                    break;
                  if (Tt(tt, me, ae.Sb + 16))
                    return Nn = tt, Y;
                }
                return Nn = me, Y;
              },
              l: function() {
                var Y = wt;
                if (!Y)
                  return Nn = 0;
                var ae = new tn(Y);
                ae.cc(Y);
                var me = ae.bc();
                if (!me)
                  return Nn = 0, Y;
                for (var Ae = Array.prototype.slice.call(arguments), Ne = 0; Ne < Ae.length; Ne++) {
                  var tt = Ae[Ne];
                  if (tt === 0 || tt === me)
                    break;
                  if (Tt(tt, me, ae.Sb + 16))
                    return Nn = tt, Y;
                }
                return Nn = me, Y;
              },
              h: function() {
                var Y = wt;
                if (!Y)
                  return Nn = 0;
                var ae = new tn(Y);
                ae.cc(Y);
                var me = ae.bc();
                if (!me)
                  return Nn = 0, Y;
                for (var Ae = Array.prototype.slice.call(arguments), Ne = 0; Ne < Ae.length; Ne++) {
                  var tt = Ae[Ne];
                  if (tt === 0 || tt === me)
                    break;
                  if (Tt(tt, me, ae.Sb + 16))
                    return Nn = tt, Y;
                }
                return Nn = me, Y;
              },
              t: ar,
              M: function() {
                var Y = rr.pop();
                Y || pt("no exception to throw");
                var ae = Y.Zb;
                throw Y.kc() || (rr.push(Y), Y.ic(true), Y.hc(false), Jt++), wt = ae, ae;
              },
              c: function(Y, ae, me) {
                throw new tn(Y).fc(ae, me), wt = Y, Jt++, Y;
              },
              pa: function() {
                return Jt;
              },
              Fa: function(Y) {
                Ir(Y, !N, 1, !D), qt.pc();
              },
              T: function(Y) {
                j ? postMessage({
                  cmd: "cleanupThread",
                  thread: Y
                }) : zt(Y);
              },
              xa: sr,
              j: function(Y) {
                throw wt || (wt = Y), Y;
              },
              H: W,
              Ma: ve,
              ua: de,
              wa: ye,
              oa: ke,
              Ka: Ue,
              Ca: He,
              Ja: Ft,
              V: Bt,
              va: Et,
              sa: jt,
              La: ie,
              ta: xe,
              Ta: function() {
              },
              X: function() {
                pt("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
              },
              Ua: function() {
                pt("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
              },
              W: function() {
                return Date.now();
              },
              ya: function() {
                return 2097152;
              },
              Oa: function() {
                return true;
              },
              za: function(Y, ae, me, Ae) {
                if (Y == ae)
                  setTimeout(() => Ie(Ae));
                else if (j)
                  postMessage({
                    targetThread: Y,
                    cmd: "processProxyingQueue",
                    queue: Ae
                  });
                else {
                  if (!(Y = qt.Vb[Y]))
                    return;
                  Y.postMessage({
                    cmd: "processProxyingQueue",
                    queue: Ae
                  });
                }
                return 1;
              },
              Ea: function() {
                return -1;
              },
              Pa: function(Y, ae) {
                Y = new Date(1e3 * Re(Y)), g()[ae >> 2 >>> 0] = Y.getUTCSeconds(), g()[ae + 4 >> 2 >>> 0] = Y.getUTCMinutes(), g()[ae + 8 >> 2 >>> 0] = Y.getUTCHours(), g()[ae + 12 >> 2 >>> 0] = Y.getUTCDate(), g()[ae + 16 >> 2 >>> 0] = Y.getUTCMonth(), g()[ae + 20 >> 2 >>> 0] = Y.getUTCFullYear() - 1900, g()[ae + 24 >> 2 >>> 0] = Y.getUTCDay(), Y = (Y.getTime() - Date.UTC(Y.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0, g()[ae + 28 >> 2 >>> 0] = Y;
              },
              Qa: function(Y, ae) {
                Y = new Date(1e3 * Re(Y)), g()[ae >> 2 >>> 0] = Y.getSeconds(), g()[ae + 4 >> 2 >>> 0] = Y.getMinutes(), g()[ae + 8 >> 2 >>> 0] = Y.getHours(), g()[ae + 12 >> 2 >>> 0] = Y.getDate(), g()[ae + 16 >> 2 >>> 0] = Y.getMonth(), g()[ae + 20 >> 2 >>> 0] = Y.getFullYear() - 1900, g()[ae + 24 >> 2 >>> 0] = Y.getDay();
                var me = new Date(Y.getFullYear(), 0, 1), Ae = (Y.getTime() - me.getTime()) / 864e5 | 0;
                g()[ae + 28 >> 2 >>> 0] = Ae, g()[ae + 36 >> 2 >>> 0] = -60 * Y.getTimezoneOffset(), Ae = new Date(Y.getFullYear(), 6, 1).getTimezoneOffset(), Y = 0 | (Ae != (me = me.getTimezoneOffset()) && Y.getTimezoneOffset() == Math.min(me, Ae)), g()[ae + 32 >> 2 >>> 0] = Y;
              },
              Ra: function(Y) {
                var ae = new Date(g()[Y + 20 >> 2 >>> 0] + 1900, g()[Y + 16 >> 2 >>> 0], g()[Y + 12 >> 2 >>> 0], g()[Y + 8 >> 2 >>> 0], g()[Y + 4 >> 2 >>> 0], g()[Y >> 2 >>> 0], 0), me = g()[Y + 32 >> 2 >>> 0], Ae = ae.getTimezoneOffset(), Ne = new Date(ae.getFullYear(), 0, 1), tt = new Date(ae.getFullYear(), 6, 1).getTimezoneOffset(), gt = Ne.getTimezoneOffset(), Nt = Math.min(gt, tt);
                return 0 > me ? g()[Y + 32 >> 2 >>> 0] = +(tt != gt && Nt == Ae) : 0 < me != (Nt == Ae) && (tt = Math.max(gt, tt), ae.setTime(ae.getTime() + 6e4 * ((0 < me ? Nt : tt) - Ae))), g()[Y + 24 >> 2 >>> 0] = ae.getDay(), me = (ae.getTime() - Ne.getTime()) / 864e5 | 0, g()[Y + 28 >> 2 >>> 0] = me, g()[Y >> 2 >>> 0] = ae.getSeconds(), g()[Y + 4 >> 2 >>> 0] = ae.getMinutes(), g()[Y + 8 >> 2 >>> 0] = ae.getHours(), g()[Y + 12 >> 2 >>> 0] = ae.getDate(), g()[Y + 16 >> 2 >>> 0] = ae.getMonth(), ae.getTime() / 1e3 | 0;
              },
              Aa: Ve,
              Ba: Qe,
              Sa: function Y(ae, me, Ae) {
                Y.Ac || (Y.Ac = true, Gt(ae, me, Ae));
              },
              y: function() {
                pt("");
              },
              U: function() {
                if (!R && !N) {
                  var Y = "Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread";
                  nr || (nr = {}), nr[Y] || (nr[Y] = 1, R && (Y = "warning: " + Y), Q(Y));
                }
              },
              ra: function() {
                return 4294901760;
              },
              B: ur,
              Ia: function(Y, ae, me) {
                w().copyWithin(Y >>> 0, ae >>> 0, ae + me >>> 0);
              },
              F: function() {
                return R ? t(3993).cpus().length : navigator.hardwareConcurrency;
              },
              Da: function(Y, ae, me) {
                bn.length = ae, me >>= 3;
                for (var Ae = 0; Ae < ae; Ae++)
                  bn[Ae] = h()[me + Ae >>> 0];
                return (0 > Y ? Ct[-Y - 1] : On[Y]).apply(null, bn);
              },
              qa: function(Y) {
                var ae = w().length;
                if ((Y >>>= 0) <= ae || 4294901760 < Y)
                  return false;
                for (var me = 1; 4 >= me; me *= 2) {
                  var Ae = ae * (1 + 0.2 / me);
                  Ae = Math.min(Ae, Y + 100663296);
                  var Ne = Math;
                  Ae = Math.max(Y, Ae), Ne = Ne.min.call(Ne, 4294901760, Ae + (65536 - Ae % 65536) % 65536);
                  e: {
                    try {
                      fe.grow(Ne - pe.byteLength + 65535 >>> 16), De(fe.buffer);
                      var tt = 1;
                      break e;
                    } catch {
                    }
                    tt = void 0;
                  }
                  if (tt)
                    return true;
                }
                return false;
              },
              Na: function() {
                throw "unwind";
              },
              Ga: et,
              Ha: cn,
              J: en,
              I: Tn,
              S: Ln,
              ga: Xn,
              R: fr,
              d: function() {
                return Nn;
              },
              na: function Y(ae, me) {
                Y.lc || (Y.lc = function() {
                  if (typeof crypto == "object" && typeof crypto.getRandomValues == "function") {
                    var Ne = new Uint8Array(1);
                    return () => (crypto.getRandomValues(Ne), Ne[0]);
                  }
                  if (R)
                    try {
                      var tt = t(Object(function() {
                        var gt = new Error("Cannot find module 'crypto'");
                        throw gt.code = "MODULE_NOT_FOUND", gt;
                      }()));
                      return () => tt.randomBytes(1)[0];
                    } catch {
                    }
                  return () => pt("randomDevice");
                }());
                for (var Ae = 0; Ae < me; Ae++)
                  d()[ae + Ae >> 0 >>> 0] = Y.lc();
                return 0;
              },
              ia: function(Y, ae, me) {
                var Ae = dt();
                try {
                  return ln(Y)(ae, me);
                } catch (Ne) {
                  if (ut(Ae), Ne !== Ne + 0)
                    throw Ne;
                  $e(1, 0);
                }
              },
              ja: function(Y, ae, me) {
                var Ae = dt();
                try {
                  return ln(Y)(ae, me);
                } catch (Ne) {
                  if (ut(Ae), Ne !== Ne + 0)
                    throw Ne;
                  $e(1, 0);
                }
              },
              K: function(Y) {
                var ae = dt();
                try {
                  return ln(Y)();
                } catch (me) {
                  if (ut(ae), me !== me + 0)
                    throw me;
                  $e(1, 0);
                }
              },
              f: function(Y, ae) {
                var me = dt();
                try {
                  return ln(Y)(ae);
                } catch (Ae) {
                  if (ut(me), Ae !== Ae + 0)
                    throw Ae;
                  $e(1, 0);
                }
              },
              P: function(Y, ae, me) {
                var Ae = dt();
                try {
                  return ln(Y)(ae, me);
                } catch (Ne) {
                  if (ut(Ae), Ne !== Ne + 0)
                    throw Ne;
                  $e(1, 0);
                }
              },
              Q: function(Y, ae, me) {
                var Ae = dt();
                try {
                  return ln(Y)(ae, me);
                } catch (Ne) {
                  if (ut(Ae), Ne !== Ne + 0)
                    throw Ne;
                  $e(1, 0);
                }
              },
              k: function(Y, ae, me) {
                var Ae = dt();
                try {
                  return ln(Y)(ae, me);
                } catch (Ne) {
                  if (ut(Ae), Ne !== Ne + 0)
                    throw Ne;
                  $e(1, 0);
                }
              },
              p: function(Y, ae, me, Ae) {
                var Ne = dt();
                try {
                  return ln(Y)(ae, me, Ae);
                } catch (tt) {
                  if (ut(Ne), tt !== tt + 0)
                    throw tt;
                  $e(1, 0);
                }
              },
              q: function(Y, ae, me, Ae, Ne) {
                var tt = dt();
                try {
                  return ln(Y)(ae, me, Ae, Ne);
                } catch (gt) {
                  if (ut(tt), gt !== gt + 0)
                    throw gt;
                  $e(1, 0);
                }
              },
              N: function(Y, ae, me, Ae, Ne, tt) {
                var gt = dt();
                try {
                  return ln(Y)(ae, me, Ae, Ne, tt);
                } catch (Nt) {
                  if (ut(gt), Nt !== Nt + 0)
                    throw Nt;
                  $e(1, 0);
                }
              },
              s: function(Y, ae, me, Ae, Ne, tt) {
                var gt = dt();
                try {
                  return ln(Y)(ae, me, Ae, Ne, tt);
                } catch (Nt) {
                  if (ut(gt), Nt !== Nt + 0)
                    throw Nt;
                  $e(1, 0);
                }
              },
              w: function(Y, ae, me, Ae, Ne, tt, gt) {
                var Nt = dt();
                try {
                  return ln(Y)(ae, me, Ae, Ne, tt, gt);
                } catch (Xt) {
                  if (ut(Nt), Xt !== Xt + 0)
                    throw Xt;
                  $e(1, 0);
                }
              },
              L: function(Y, ae, me, Ae, Ne, tt, gt, Nt) {
                var Xt = dt();
                try {
                  return ln(Y)(ae, me, Ae, Ne, tt, gt, Nt);
                } catch (Pt) {
                  if (ut(Xt), Pt !== Pt + 0)
                    throw Pt;
                  $e(1, 0);
                }
              },
              E: function(Y, ae, me, Ae, Ne, tt, gt, Nt, Xt, Pt, Qt, Vn) {
                var Dn = dt();
                try {
                  return ln(Y)(ae, me, Ae, Ne, tt, gt, Nt, Xt, Pt, Qt, Vn);
                } catch (Ke) {
                  if (ut(Dn), Ke !== Ke + 0)
                    throw Ke;
                  $e(1, 0);
                }
              },
              aa: function(Y, ae, me, Ae, Ne, tt, gt, Nt) {
                var Xt = dt();
                try {
                  return jn(Y, ae, me, Ae, Ne, tt, gt, Nt);
                } catch (Pt) {
                  if (ut(Xt), Pt !== Pt + 0)
                    throw Pt;
                  $e(1, 0);
                }
              },
              _: function(Y, ae, me, Ae, Ne, tt, gt) {
                var Nt = dt();
                try {
                  return $n(Y, ae, me, Ae, Ne, tt, gt);
                } catch (Xt) {
                  if (ut(Nt), Xt !== Xt + 0)
                    throw Xt;
                  $e(1, 0);
                }
              },
              Z: function(Y, ae, me, Ae, Ne) {
                var tt = dt();
                try {
                  return pr(Y, ae, me, Ae, Ne);
                } catch (gt) {
                  if (ut(tt), gt !== gt + 0)
                    throw gt;
                  $e(1, 0);
                }
              },
              ca: function(Y, ae, me, Ae) {
                var Ne = dt();
                try {
                  return lr(Y, ae, me, Ae);
                } catch (tt) {
                  if (ut(Ne), tt !== tt + 0)
                    throw tt;
                  $e(1, 0);
                }
              },
              $: function(Y) {
                var ae = dt();
                try {
                  return pn(Y);
                } catch (me) {
                  if (ut(ae), me !== me + 0)
                    throw me;
                  $e(1, 0);
                }
              },
              ba: function(Y, ae) {
                var me = dt();
                try {
                  return Mr(Y, ae);
                } catch (Ae) {
                  if (ut(me), Ae !== Ae + 0)
                    throw Ae;
                  $e(1, 0);
                }
              },
              Y: function(Y, ae, me) {
                var Ae = dt();
                try {
                  return Rn(Y, ae, me);
                } catch (Ne) {
                  if (ut(Ae), Ne !== Ne + 0)
                    throw Ne;
                  $e(1, 0);
                }
              },
              g: function(Y) {
                var ae = dt();
                try {
                  ln(Y)();
                } catch (me) {
                  if (ut(ae), me !== me + 0)
                    throw me;
                  $e(1, 0);
                }
              },
              r: function(Y, ae) {
                var me = dt();
                try {
                  ln(Y)(ae);
                } catch (Ae) {
                  if (ut(me), Ae !== Ae + 0)
                    throw Ae;
                  $e(1, 0);
                }
              },
              i: function(Y, ae, me) {
                var Ae = dt();
                try {
                  ln(Y)(ae, me);
                } catch (Ne) {
                  if (ut(Ae), Ne !== Ne + 0)
                    throw Ne;
                  $e(1, 0);
                }
              },
              ha: function(Y, ae, me, Ae) {
                var Ne = dt();
                try {
                  ln(Y)(ae, me, Ae);
                } catch (tt) {
                  if (ut(Ne), tt !== tt + 0)
                    throw tt;
                  $e(1, 0);
                }
              },
              m: function(Y, ae, me, Ae) {
                var Ne = dt();
                try {
                  ln(Y)(ae, me, Ae);
                } catch (tt) {
                  if (ut(Ne), tt !== tt + 0)
                    throw tt;
                  $e(1, 0);
                }
              },
              v: function(Y, ae, me, Ae, Ne) {
                var tt = dt();
                try {
                  ln(Y)(ae, me, Ae, Ne);
                } catch (gt) {
                  if (ut(tt), gt !== gt + 0)
                    throw gt;
                  $e(1, 0);
                }
              },
              u: function(Y, ae, me, Ae, Ne, tt) {
                var gt = dt();
                try {
                  ln(Y)(ae, me, Ae, Ne, tt);
                } catch (Nt) {
                  if (ut(gt), Nt !== Nt + 0)
                    throw Nt;
                  $e(1, 0);
                }
              },
              O: function(Y, ae, me, Ae, Ne, tt, gt) {
                var Nt = dt();
                try {
                  ln(Y)(ae, me, Ae, Ne, tt, gt);
                } catch (Xt) {
                  if (ut(Nt), Xt !== Xt + 0)
                    throw Xt;
                  $e(1, 0);
                }
              },
              A: function(Y, ae, me, Ae, Ne, tt, gt, Nt) {
                var Xt = dt();
                try {
                  ln(Y)(ae, me, Ae, Ne, tt, gt, Nt);
                } catch (Pt) {
                  if (ut(Xt), Pt !== Pt + 0)
                    throw Pt;
                  $e(1, 0);
                }
              },
              ka: function(Y, ae, me, Ae, Ne, tt, gt, Nt, Xt) {
                var Pt = dt();
                try {
                  ln(Y)(ae, me, Ae, Ne, tt, gt, Nt, Xt);
                } catch (Qt) {
                  if (ut(Pt), Qt !== Qt + 0)
                    throw Qt;
                  $e(1, 0);
                }
              },
              C: function(Y, ae, me, Ae, Ne, tt, gt, Nt, Xt, Pt, Qt) {
                var Vn = dt();
                try {
                  ln(Y)(ae, me, Ae, Ne, tt, gt, Nt, Xt, Pt, Qt);
                } catch (Dn) {
                  if (ut(Vn), Dn !== Dn + 0)
                    throw Dn;
                  $e(1, 0);
                }
              },
              D: function(Y, ae, me, Ae, Ne, tt, gt, Nt, Xt, Pt, Qt, Vn, Dn, Ke, sn, kt) {
                var Mn = dt();
                try {
                  ln(Y)(ae, me, Ae, Ne, tt, gt, Nt, Xt, Pt, Qt, Vn, Dn, Ke, sn, kt);
                } catch (xr) {
                  if (ut(Mn), xr !== xr + 0)
                    throw xr;
                  $e(1, 0);
                }
              },
              fa: function(Y, ae, me, Ae, Ne, tt, gt, Nt) {
                var Xt = dt();
                try {
                  Fn(Y, ae, me, Ae, Ne, tt, gt, Nt);
                } catch (Pt) {
                  if (ut(Xt), Pt !== Pt + 0)
                    throw Pt;
                  $e(1, 0);
                }
              },
              da: function(Y, ae, me, Ae, Ne, tt, gt, Nt, Xt, Pt, Qt, Vn) {
                var Dn = dt();
                try {
                  zn(Y, ae, me, Ae, Ne, tt, gt, Nt, Xt, Pt, Qt, Vn);
                } catch (Ke) {
                  if (ut(Dn), Ke !== Ke + 0)
                    throw Ke;
                  $e(1, 0);
                }
              },
              ea: function(Y, ae, me, Ae, Ne, tt) {
                var gt = dt();
                try {
                  Bn(Y, ae, me, Ae, Ne, tt);
                } catch (Nt) {
                  if (ut(gt), Nt !== Nt + 0)
                    throw Nt;
                  $e(1, 0);
                }
              },
              o: function(Y) {
                return Y;
              },
              a: fe || r.wasmMemory,
              G: function(Y) {
                Nn = Y;
              },
              la: Vt,
              z: function(Y, ae, me, Ae) {
                return Vt(Y, ae, me, Ae);
              }
            };
            (function() {
              function Y(Ne, tt) {
                r.asm = Ne.exports, qt.qc.push(r.asm.sb), Ze = r.asm.ub, je.unshift(r.asm.Va), Me = tt, j || (Je--, r.monitorRunDependencies && r.monitorRunDependencies(Je), Je == 0 && Rt && (Ne = Rt, Rt = null, Ne()));
              }
              function ae(Ne) {
                Y(Ne.instance, Ne.module);
              }
              function me(Ne) {
                return function() {
                  if (!H && (D || N)) {
                    if (typeof fetch == "function" && !mt.startsWith("file://"))
                      return fetch(mt, {
                        credentials: "same-origin"
                      }).then(function(tt) {
                        if (!tt.ok)
                          throw "failed to load wasm binary file at '" + mt + "'";
                        return tt.arrayBuffer();
                      }).catch(function() {
                        return Ot();
                      });
                    if (M)
                      return new Promise(function(tt, gt) {
                        M(mt, function(Nt) {
                          tt(new Uint8Array(Nt));
                        }, gt);
                      });
                  }
                  return Promise.resolve().then(function() {
                    return Ot();
                  });
                }().then(function(tt) {
                  return WebAssembly.instantiate(tt, Ae);
                }).then(function(tt) {
                  return tt;
                }).then(Ne, function(tt) {
                  Q("failed to asynchronously prepare wasm: " + tt), pt(tt);
                });
              }
              var Ae = {
                a: mn
              };
              if (j || (Je++, r.monitorRunDependencies && r.monitorRunDependencies(Je)), r.instantiateWasm)
                try {
                  return r.instantiateWasm(Ae, Y);
                } catch (Ne) {
                  return Q("Module.instantiateWasm callback failed with error: " + Ne), false;
                }
              (H || typeof WebAssembly.instantiateStreaming != "function" || At() || mt.startsWith("file://") || R || typeof fetch != "function" ? me(ae) : fetch(mt, {
                credentials: "same-origin"
              }).then(function(Ne) {
                return WebAssembly.instantiateStreaming(Ne, Ae).then(ae, function(tt) {
                  return Q("wasm streaming compile failed: " + tt), Q("falling back to ArrayBuffer instantiation"), me(ae);
                });
              })).catch(u);
            })(), r.___wasm_call_ctors = function() {
              return (r.___wasm_call_ctors = r.asm.Va).apply(null, arguments);
            }, r._OrtInit = function() {
              return (r._OrtInit = r.asm.Wa).apply(null, arguments);
            }, r._OrtCreateSessionOptions = function() {
              return (r._OrtCreateSessionOptions = r.asm.Xa).apply(null, arguments);
            }, r._OrtAppendExecutionProvider = function() {
              return (r._OrtAppendExecutionProvider = r.asm.Ya).apply(null, arguments);
            }, r._OrtAddSessionConfigEntry = function() {
              return (r._OrtAddSessionConfigEntry = r.asm.Za).apply(null, arguments);
            }, r._OrtReleaseSessionOptions = function() {
              return (r._OrtReleaseSessionOptions = r.asm._a).apply(null, arguments);
            }, r._OrtCreateSession = function() {
              return (r._OrtCreateSession = r.asm.$a).apply(null, arguments);
            }, r._OrtReleaseSession = function() {
              return (r._OrtReleaseSession = r.asm.ab).apply(null, arguments);
            }, r._OrtGetInputCount = function() {
              return (r._OrtGetInputCount = r.asm.bb).apply(null, arguments);
            }, r._OrtGetOutputCount = function() {
              return (r._OrtGetOutputCount = r.asm.cb).apply(null, arguments);
            }, r._OrtGetInputName = function() {
              return (r._OrtGetInputName = r.asm.db).apply(null, arguments);
            }, r._OrtGetOutputName = function() {
              return (r._OrtGetOutputName = r.asm.eb).apply(null, arguments);
            }, r._OrtFree = function() {
              return (r._OrtFree = r.asm.fb).apply(null, arguments);
            }, r._OrtCreateTensor = function() {
              return (r._OrtCreateTensor = r.asm.gb).apply(null, arguments);
            }, r._OrtGetTensorData = function() {
              return (r._OrtGetTensorData = r.asm.hb).apply(null, arguments);
            }, r._OrtReleaseTensor = function() {
              return (r._OrtReleaseTensor = r.asm.ib).apply(null, arguments);
            }, r._OrtCreateRunOptions = function() {
              return (r._OrtCreateRunOptions = r.asm.jb).apply(null, arguments);
            }, r._OrtAddRunConfigEntry = function() {
              return (r._OrtAddRunConfigEntry = r.asm.kb).apply(null, arguments);
            }, r._OrtReleaseRunOptions = function() {
              return (r._OrtReleaseRunOptions = r.asm.lb).apply(null, arguments);
            }, r._OrtRun = function() {
              return (r._OrtRun = r.asm.mb).apply(null, arguments);
            }, r._OrtEndProfiling = function() {
              return (r._OrtEndProfiling = r.asm.nb).apply(null, arguments);
            };
            var Gn = r._pthread_self = function() {
              return (Gn = r._pthread_self = r.asm.ob).apply(null, arguments);
            }, or = r._malloc = function() {
              return (or = r._malloc = r.asm.pb).apply(null, arguments);
            }, dr = r._free = function() {
              return (dr = r._free = r.asm.qb).apply(null, arguments);
            }, Xe = r._fflush = function() {
              return (Xe = r._fflush = r.asm.rb).apply(null, arguments);
            };
            r.__emscripten_tls_init = function() {
              return (r.__emscripten_tls_init = r.asm.sb).apply(null, arguments);
            };
            var yr = r.___funcs_on_exit = function() {
              return (yr = r.___funcs_on_exit = r.asm.tb).apply(null, arguments);
            }, Ir = r.__emscripten_thread_init = function() {
              return (Ir = r.__emscripten_thread_init = r.asm.vb).apply(null, arguments);
            };
            r.__emscripten_thread_crashed = function() {
              return (r.__emscripten_thread_crashed = r.asm.wb).apply(null, arguments);
            };
            var Fe, K = r._emscripten_run_in_main_runtime_thread_js = function() {
              return (K = r._emscripten_run_in_main_runtime_thread_js = r.asm.xb).apply(null, arguments);
            }, ce = r.__emscripten_proxy_execute_task_queue = function() {
              return (ce = r.__emscripten_proxy_execute_task_queue = r.asm.yb).apply(null, arguments);
            }, Pe = r.__emscripten_thread_free_data = function() {
              return (Pe = r.__emscripten_thread_free_data = r.asm.zb).apply(null, arguments);
            }, Ce = r.__emscripten_thread_exit = function() {
              return (Ce = r.__emscripten_thread_exit = r.asm.Ab).apply(null, arguments);
            }, $e = r._setThrew = function() {
              return ($e = r._setThrew = r.asm.Bb).apply(null, arguments);
            }, at = r._emscripten_stack_set_limits = function() {
              return (at = r._emscripten_stack_set_limits = r.asm.Cb).apply(null, arguments);
            }, dt = r.stackSave = function() {
              return (dt = r.stackSave = r.asm.Db).apply(null, arguments);
            }, ut = r.stackRestore = function() {
              return (ut = r.stackRestore = r.asm.Eb).apply(null, arguments);
            }, It = r.stackAlloc = function() {
              return (It = r.stackAlloc = r.asm.Fb).apply(null, arguments);
            }, Tt = r.___cxa_can_catch = function() {
              return (Tt = r.___cxa_can_catch = r.asm.Gb).apply(null, arguments);
            }, gn = r.___cxa_is_pointer_type = function() {
              return (gn = r.___cxa_is_pointer_type = r.asm.Hb).apply(null, arguments);
            }, pn = r.dynCall_j = function() {
              return (pn = r.dynCall_j = r.asm.Ib).apply(null, arguments);
            }, $n = r.dynCall_iiiiij = function() {
              return ($n = r.dynCall_iiiiij = r.asm.Jb).apply(null, arguments);
            }, Rn = r.dynCall_jii = function() {
              return (Rn = r.dynCall_jii = r.asm.Kb).apply(null, arguments);
            }, Fn = r.dynCall_viiiiij = function() {
              return (Fn = r.dynCall_viiiiij = r.asm.Lb).apply(null, arguments);
            }, Bn = r.dynCall_vjji = function() {
              return (Bn = r.dynCall_vjji = r.asm.Mb).apply(null, arguments);
            }, zn = r.dynCall_viiijjjii = function() {
              return (zn = r.dynCall_viiijjjii = r.asm.Nb).apply(null, arguments);
            }, lr = r.dynCall_iij = function() {
              return (lr = r.dynCall_iij = r.asm.Ob).apply(null, arguments);
            }, Mr = r.dynCall_ji = function() {
              return (Mr = r.dynCall_ji = r.asm.Pb).apply(null, arguments);
            }, jn = r.dynCall_iiiiiij = function() {
              return (jn = r.dynCall_iiiiiij = r.asm.Qb).apply(null, arguments);
            }, pr = r.dynCall_iiij = function() {
              return (pr = r.dynCall_iiij = r.asm.Rb).apply(null, arguments);
            };
            function In() {
              function Y() {
                if (!Fe && (Fe = true, r.calledRun = true, !We) && (j || Cn(je), n(r), r.onRuntimeInitialized && r.onRuntimeInitialized(), !j)) {
                  if (r.postRun)
                    for (typeof r.postRun == "function" && (r.postRun = [
                      r.postRun
                    ]); r.postRun.length; ) {
                      var ae = r.postRun.shift();
                      Ge.unshift(ae);
                    }
                  Cn(Ge);
                }
              }
              if (!(0 < Je))
                if (j)
                  n(r), j || Cn(je), postMessage({
                    cmd: "loaded"
                  });
                else {
                  if (r.preRun)
                    for (typeof r.preRun == "function" && (r.preRun = [
                      r.preRun
                    ]); r.preRun.length; )
                      ht();
                  Cn(rt), 0 < Je || (r.setStatus ? (r.setStatus("Running..."), setTimeout(function() {
                    setTimeout(function() {
                      r.setStatus("");
                    }, 1), Y();
                  }, 1)) : Y());
                }
            }
            if (r.UTF8ToString = qe, r.stringToUTF8 = function(Y, ae, me) {
              return _e(Y, w(), ae, me);
            }, r.lengthBytesUTF8 = le, r.keepRuntimeAlive = lt, r.wasmMemory = fe, r.stackSave = dt, r.stackRestore = ut, r.stackAlloc = It, r.ExitStatus = St, r.PThread = qt, Rt = function Y() {
              Fe || In(), Fe || (Rt = Y);
            }, r.preInit)
              for (typeof r.preInit == "function" && (r.preInit = [
                r.preInit
              ]); 0 < r.preInit.length; )
                r.preInit.pop()();
            return In(), f.ready;
          });
          i.exports = l;
        },
        932: (i, e, t) => {
          var s, l = (s = (s = typeof document < "u" && document.currentScript ? document.currentScript.src : void 0) || "/index.js", function(f) {
            var d, w, g;
            f = f || {}, d || (d = f !== void 0 ? f : {}), d.ready = new Promise(function(ie, xe) {
              w = ie, g = xe;
            });
            var _, h, r, n, u, p, M = Object.assign({}, d), P = "./this.program", E = (ie, xe) => {
              throw xe;
            }, k = typeof window == "object", $ = typeof importScripts == "function", A = typeof process == "object" && typeof process.versions == "object" && typeof process.versions.node == "string", C = "";
            A ? (C = $ ? t(908).dirname(C) + "/" : "//", p = () => {
              u || (n = t(1384), u = t(908));
            }, _ = function(ie, xe) {
              return p(), ie = u.normalize(ie), n.readFileSync(ie, xe ? void 0 : "utf8");
            }, r = (ie) => ((ie = _(ie, true)).buffer || (ie = new Uint8Array(ie)), ie), h = (ie, xe, Ie) => {
              p(), ie = u.normalize(ie), n.readFile(ie, function(Re, Ve) {
                Re ? Ie(Re) : xe(Ve.buffer);
              });
            }, 1 < process.argv.length && (P = process.argv[1].replace(/\\/g, "/")), process.argv.slice(2), process.on("uncaughtException", function(ie) {
              if (!(ie instanceof je))
                throw ie;
            }), process.on("unhandledRejection", function(ie) {
              throw ie;
            }), E = (ie, xe) => {
              if (R || 0 < ot)
                throw process.exitCode = ie, xe;
              xe instanceof je || N("exiting due to exception: " + xe), process.exit(ie);
            }, d.inspect = function() {
              return "[Emscripten Module object]";
            }) : (k || $) && ($ ? C = self.location.href : typeof document < "u" && document.currentScript && (C = document.currentScript.src), s && (C = s), C = C.indexOf("blob:") !== 0 ? C.substr(0, C.replace(/[?#].*/, "").lastIndexOf("/") + 1) : "", _ = (ie) => {
              var xe = new XMLHttpRequest();
              return xe.open("GET", ie, false), xe.send(null), xe.responseText;
            }, $ && (r = (ie) => {
              var xe = new XMLHttpRequest();
              return xe.open("GET", ie, false), xe.responseType = "arraybuffer", xe.send(null), new Uint8Array(xe.response);
            }), h = (ie, xe, Ie) => {
              var Re = new XMLHttpRequest();
              Re.open("GET", ie, true), Re.responseType = "arraybuffer", Re.onload = () => {
                Re.status == 200 || Re.status == 0 && Re.response ? xe(Re.response) : Ie();
              }, Re.onerror = Ie, Re.send(null);
            });
            var F, D = d.print || console.log.bind(console), N = d.printErr || console.warn.bind(console);
            Object.assign(d, M), M = null, d.thisProgram && (P = d.thisProgram), d.quit && (E = d.quit), d.wasmBinary && (F = d.wasmBinary);
            var R = d.noExitRuntime || false;
            typeof WebAssembly != "object" && De("no native wasm support detected");
            var j, Z, te, J, G, H, U = false, Q = typeof TextDecoder < "u" ? new TextDecoder("utf8") : void 0;
            function he(ie, xe, Ie) {
              var Re = (xe >>>= 0) + Ie;
              for (Ie = xe; ie[Ie] && !(Ie >= Re); )
                ++Ie;
              if (16 < Ie - xe && ie.buffer && Q)
                return Q.decode(ie.subarray(xe, Ie));
              for (Re = ""; xe < Ie; ) {
                var Ve = ie[xe++];
                if (128 & Ve) {
                  var Qe = 63 & ie[xe++];
                  if ((224 & Ve) == 192)
                    Re += String.fromCharCode((31 & Ve) << 6 | Qe);
                  else {
                    var _t = 63 & ie[xe++];
                    65536 > (Ve = (240 & Ve) == 224 ? (15 & Ve) << 12 | Qe << 6 | _t : (7 & Ve) << 18 | Qe << 12 | _t << 6 | 63 & ie[xe++]) ? Re += String.fromCharCode(Ve) : (Ve -= 65536, Re += String.fromCharCode(55296 | Ve >> 10, 56320 | 1023 & Ve));
                  }
                } else
                  Re += String.fromCharCode(Ve);
              }
              return Re;
            }
            function fe(ie, xe) {
              return (ie >>>= 0) ? he(J, ie, xe) : "";
            }
            function Me(ie, xe, Ie, Re) {
              if (!(0 < Re))
                return 0;
              var Ve = Ie >>>= 0;
              Re = Ie + Re - 1;
              for (var Qe = 0; Qe < ie.length; ++Qe) {
                var _t = ie.charCodeAt(Qe);
                if (55296 <= _t && 57343 >= _t && (_t = 65536 + ((1023 & _t) << 10) | 1023 & ie.charCodeAt(++Qe)), 127 >= _t) {
                  if (Ie >= Re)
                    break;
                  xe[Ie++ >>> 0] = _t;
                } else {
                  if (2047 >= _t) {
                    if (Ie + 1 >= Re)
                      break;
                    xe[Ie++ >>> 0] = 192 | _t >> 6;
                  } else {
                    if (65535 >= _t) {
                      if (Ie + 2 >= Re)
                        break;
                      xe[Ie++ >>> 0] = 224 | _t >> 12;
                    } else {
                      if (Ie + 3 >= Re)
                        break;
                      xe[Ie++ >>> 0] = 240 | _t >> 18, xe[Ie++ >>> 0] = 128 | _t >> 12 & 63;
                    }
                    xe[Ie++ >>> 0] = 128 | _t >> 6 & 63;
                  }
                  xe[Ie++ >>> 0] = 128 | 63 & _t;
                }
              }
              return xe[Ie >>> 0] = 0, Ie - Ve;
            }
            function pe(ie) {
              for (var xe = 0, Ie = 0; Ie < ie.length; ++Ie) {
                var Re = ie.charCodeAt(Ie);
                127 >= Re ? xe++ : 2047 >= Re ? xe += 2 : 55296 <= Re && 57343 >= Re ? (xe += 4, ++Ie) : xe += 3;
              }
              return xe;
            }
            function oe() {
              var ie = j.buffer;
              Z = ie, d.HEAP8 = te = new Int8Array(ie), d.HEAP16 = new Int16Array(ie), d.HEAP32 = G = new Int32Array(ie), d.HEAPU8 = J = new Uint8Array(ie), d.HEAPU16 = new Uint16Array(ie), d.HEAPU32 = H = new Uint32Array(ie), d.HEAPF32 = new Float32Array(ie), d.HEAPF64 = new Float64Array(ie);
            }
            var be, Ee = [], Oe = [], Ye = [], We = [], ot = 0;
            function vt() {
              var ie = d.preRun.shift();
              Ee.unshift(ie);
            }
            var qe, _e = 0, le = null;
            function De(ie) {
              throw d.onAbort && d.onAbort(ie), N(ie = "Aborted(" + ie + ")"), U = true, ie = new WebAssembly.RuntimeError(ie + ". Build with -sASSERTIONS for more info."), g(ie), ie;
            }
            function Be() {
              return qe.startsWith("data:application/octet-stream;base64,");
            }
            if (qe = "ort-wasm.wasm", !Be()) {
              var Ze = qe;
              qe = d.locateFile ? d.locateFile(Ze, C) : C + Ze;
            }
            function rt() {
              var ie = qe;
              try {
                if (ie == qe && F)
                  return new Uint8Array(F);
                if (r)
                  return r(ie);
                throw "both async and sync fetching of the wasm failed";
              } catch (xe) {
                De(xe);
              }
            }
            function je(ie) {
              this.name = "ExitStatus", this.message = "Program terminated with exit(" + ie + ")", this.status = ie;
            }
            function it(ie) {
              for (; 0 < ie.length; )
                ie.shift()(d);
            }
            var Ge = [], lt = 0, ht = 0;
            function mt(ie) {
              this.Db = ie, this.zb = ie - 24, this.Ub = function(xe) {
                H[this.zb + 4 >> 2 >>> 0] = xe;
              }, this.Eb = function() {
                return H[this.zb + 4 >> 2 >>> 0];
              }, this.Sb = function(xe) {
                H[this.zb + 8 >> 2 >>> 0] = xe;
              }, this.Wb = function() {
                return H[this.zb + 8 >> 2 >>> 0];
              }, this.Tb = function() {
                G[this.zb >> 2 >>> 0] = 0;
              }, this.Ib = function(xe) {
                te[this.zb + 12 >> 0 >>> 0] = xe ? 1 : 0;
              }, this.Pb = function() {
                return te[this.zb + 12 >> 0 >>> 0] != 0;
              }, this.Jb = function(xe) {
                te[this.zb + 13 >> 0 >>> 0] = xe ? 1 : 0;
              }, this.Lb = function() {
                return te[this.zb + 13 >> 0 >>> 0] != 0;
              }, this.Rb = function(xe, Ie) {
                this.Fb(0), this.Ub(xe), this.Sb(Ie), this.Tb(), this.Ib(false), this.Jb(false);
              }, this.Nb = function() {
                G[this.zb >> 2 >>> 0] += 1;
              }, this.Xb = function() {
                var xe = G[this.zb >> 2 >>> 0];
                return G[this.zb >> 2 >>> 0] = xe - 1, xe === 1;
              }, this.Fb = function(xe) {
                H[this.zb + 16 >> 2 >>> 0] = xe;
              }, this.Ob = function() {
                return H[this.zb + 16 >> 2 >>> 0];
              }, this.Qb = function() {
                if (sr(this.Eb()))
                  return H[this.Db >> 2 >>> 0];
                var xe = this.Ob();
                return xe !== 0 ? xe : this.Db;
              };
            }
            function Je(ie) {
              return nr(new mt(ie).zb);
            }
            var Rt = [];
            function pt(ie) {
              var xe = Rt[ie];
              return xe || (ie >= Rt.length && (Rt.length = ie + 1), Rt[ie] = xe = be.get(ie)), xe;
            }
            function At(ie) {
              var xe = pe(ie) + 1, Ie = ln(xe);
              return Ie && Me(ie, te, Ie, xe), Ie;
            }
            var Ot = {};
            function Ct() {
              if (!St) {
                var ie, xe = {
                  USER: "web_user",
                  LOGNAME: "web_user",
                  PATH: "/",
                  PWD: "/",
                  HOME: "/home/web_user",
                  LANG: (typeof navigator == "object" && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8",
                  _: P || "./this.program"
                };
                for (ie in Ot)
                  Ot[ie] === void 0 ? delete xe[ie] : xe[ie] = Ot[ie];
                var Ie = [];
                for (ie in xe)
                  Ie.push(ie + "=" + xe[ie]);
                St = Ie;
              }
              return St;
            }
            var St, zt = [
              null,
              [],
              []
            ];
            function _n(ie, xe) {
              var Ie = zt[ie];
              xe === 0 || xe === 10 ? ((ie === 1 ? D : N)(he(Ie, 0)), Ie.length = 0) : Ie.push(xe);
            }
            var Zt = 0;
            function en(ie) {
              return ie % 4 == 0 && (ie % 100 != 0 || ie % 400 == 0);
            }
            var qt = [
              31,
              29,
              31,
              30,
              31,
              30,
              31,
              31,
              30,
              31,
              30,
              31
            ], Cn = [
              31,
              28,
              31,
              30,
              31,
              30,
              31,
              31,
              30,
              31,
              30,
              31
            ];
            function Hn(ie, xe, Ie, Re) {
              function Ve(et, cn, Tn) {
                for (et = typeof et == "number" ? et.toString() : et || ""; et.length < cn; )
                  et = Tn[0] + et;
                return et;
              }
              function Qe(et, cn) {
                return Ve(et, cn, "0");
              }
              function _t(et, cn) {
                function Tn(Xn) {
                  return 0 > Xn ? -1 : 0 < Xn ? 1 : 0;
                }
                var Ln;
                return (Ln = Tn(et.getFullYear() - cn.getFullYear())) === 0 && (Ln = Tn(et.getMonth() - cn.getMonth())) === 0 && (Ln = Tn(et.getDate() - cn.getDate())), Ln;
              }
              function Gt(et) {
                switch (et.getDay()) {
                  case 0:
                    return new Date(et.getFullYear() - 1, 11, 29);
                  case 1:
                    return et;
                  case 2:
                    return new Date(et.getFullYear(), 0, 3);
                  case 3:
                    return new Date(et.getFullYear(), 0, 2);
                  case 4:
                    return new Date(et.getFullYear(), 0, 1);
                  case 5:
                    return new Date(et.getFullYear() - 1, 11, 31);
                  case 6:
                    return new Date(et.getFullYear() - 1, 11, 30);
                }
              }
              function Lt(et) {
                var cn = et.Bb;
                for (et = new Date(new Date(et.Cb + 1900, 0, 1).getTime()); 0 < cn; ) {
                  var Tn = et.getMonth(), Ln = (en(et.getFullYear()) ? qt : Cn)[Tn];
                  if (!(cn > Ln - et.getDate())) {
                    et.setDate(et.getDate() + cn);
                    break;
                  }
                  cn -= Ln - et.getDate() + 1, et.setDate(1), 11 > Tn ? et.setMonth(Tn + 1) : (et.setMonth(0), et.setFullYear(et.getFullYear() + 1));
                }
                return Tn = new Date(et.getFullYear() + 1, 0, 4), cn = Gt(new Date(et.getFullYear(), 0, 4)), Tn = Gt(Tn), 0 >= _t(cn, et) ? 0 >= _t(Tn, et) ? et.getFullYear() + 1 : et.getFullYear() : et.getFullYear() - 1;
              }
              var dn = G[Re + 40 >> 2 >>> 0];
              for (var bn in Re = {
                $b: G[Re >> 2 >>> 0],
                Zb: G[Re + 4 >> 2 >>> 0],
                Gb: G[Re + 8 >> 2 >>> 0],
                Kb: G[Re + 12 >> 2 >>> 0],
                Hb: G[Re + 16 >> 2 >>> 0],
                Cb: G[Re + 20 >> 2 >>> 0],
                Ab: G[Re + 24 >> 2 >>> 0],
                Bb: G[Re + 28 >> 2 >>> 0],
                bc: G[Re + 32 >> 2 >>> 0],
                Yb: G[Re + 36 >> 2 >>> 0],
                ac: dn ? fe(dn) : ""
              }, Ie = fe(Ie), dn = {
                "%c": "%a %b %d %H:%M:%S %Y",
                "%D": "%m/%d/%y",
                "%F": "%Y-%m-%d",
                "%h": "%b",
                "%r": "%I:%M:%S %p",
                "%R": "%H:%M",
                "%T": "%H:%M:%S",
                "%x": "%m/%d/%y",
                "%X": "%H:%M:%S",
                "%Ec": "%c",
                "%EC": "%C",
                "%Ex": "%m/%d/%y",
                "%EX": "%H:%M:%S",
                "%Ey": "%y",
                "%EY": "%Y",
                "%Od": "%d",
                "%Oe": "%e",
                "%OH": "%H",
                "%OI": "%I",
                "%Om": "%m",
                "%OM": "%M",
                "%OS": "%S",
                "%Ou": "%u",
                "%OU": "%U",
                "%OV": "%V",
                "%Ow": "%w",
                "%OW": "%W",
                "%Oy": "%y"
              })
                Ie = Ie.replace(new RegExp(bn, "g"), dn[bn]);
              var Pn = "Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "), Sn = "January February March April May June July August September October November December".split(" ");
              for (bn in dn = {
                "%a": function(et) {
                  return Pn[et.Ab].substring(0, 3);
                },
                "%A": function(et) {
                  return Pn[et.Ab];
                },
                "%b": function(et) {
                  return Sn[et.Hb].substring(0, 3);
                },
                "%B": function(et) {
                  return Sn[et.Hb];
                },
                "%C": function(et) {
                  return Qe((et.Cb + 1900) / 100 | 0, 2);
                },
                "%d": function(et) {
                  return Qe(et.Kb, 2);
                },
                "%e": function(et) {
                  return Ve(et.Kb, 2, " ");
                },
                "%g": function(et) {
                  return Lt(et).toString().substring(2);
                },
                "%G": function(et) {
                  return Lt(et);
                },
                "%H": function(et) {
                  return Qe(et.Gb, 2);
                },
                "%I": function(et) {
                  return (et = et.Gb) == 0 ? et = 12 : 12 < et && (et -= 12), Qe(et, 2);
                },
                "%j": function(et) {
                  for (var cn = 0, Tn = 0; Tn <= et.Hb - 1; cn += (en(et.Cb + 1900) ? qt : Cn)[Tn++])
                    ;
                  return Qe(et.Kb + cn, 3);
                },
                "%m": function(et) {
                  return Qe(et.Hb + 1, 2);
                },
                "%M": function(et) {
                  return Qe(et.Zb, 2);
                },
                "%n": function() {
                  return `
`;
                },
                "%p": function(et) {
                  return 0 <= et.Gb && 12 > et.Gb ? "AM" : "PM";
                },
                "%S": function(et) {
                  return Qe(et.$b, 2);
                },
                "%t": function() {
                  return "	";
                },
                "%u": function(et) {
                  return et.Ab || 7;
                },
                "%U": function(et) {
                  return Qe(Math.floor((et.Bb + 7 - et.Ab) / 7), 2);
                },
                "%V": function(et) {
                  var cn = Math.floor((et.Bb + 7 - (et.Ab + 6) % 7) / 7);
                  if (2 >= (et.Ab + 371 - et.Bb - 2) % 7 && cn++, cn)
                    cn == 53 && ((Tn = (et.Ab + 371 - et.Bb) % 7) == 4 || Tn == 3 && en(et.Cb) || (cn = 1));
                  else {
                    cn = 52;
                    var Tn = (et.Ab + 7 - et.Bb - 1) % 7;
                    (Tn == 4 || Tn == 5 && en(et.Cb % 400 - 1)) && cn++;
                  }
                  return Qe(cn, 2);
                },
                "%w": function(et) {
                  return et.Ab;
                },
                "%W": function(et) {
                  return Qe(Math.floor((et.Bb + 7 - (et.Ab + 6) % 7) / 7), 2);
                },
                "%y": function(et) {
                  return (et.Cb + 1900).toString().substring(2);
                },
                "%Y": function(et) {
                  return et.Cb + 1900;
                },
                "%z": function(et) {
                  var cn = 0 <= (et = et.Yb);
                  return et = Math.abs(et) / 60, (cn ? "+" : "-") + ("0000" + (et / 60 * 100 + et % 60)).slice(-4);
                },
                "%Z": function(et) {
                  return et.ac;
                },
                "%%": function() {
                  return "%";
                }
              }, Ie = Ie.replace(/%%/g, "\0\0"), dn)
                Ie.includes(bn) && (Ie = Ie.replace(new RegExp(bn, "g"), dn[bn](Re)));
              return bn = function(et) {
                var cn = Array(pe(et) + 1);
                return Me(et, cn, 0, cn.length), cn;
              }(Ie = Ie.replace(/\0\0/g, "%")), bn.length > xe ? 0 : (te.set(bn, ie >>> 0), bn.length - 1);
            }
            var Un = {
              a: function(ie) {
                return ln(ie + 24) + 24;
              },
              m: function(ie) {
                return (ie = new mt(ie)).Pb() || (ie.Ib(true), lt--), ie.Jb(false), Ge.push(ie), ie.Nb(), ie.Qb();
              },
              ia: function(ie) {
                throw N("Unexpected exception thrown, this is not properly supported - aborting"), U = true, ie;
              },
              w: function() {
                Jt(0);
                var ie = Ge.pop();
                if (ie.Xb() && !ie.Lb()) {
                  var xe = ie.Wb();
                  xe && pt(xe)(ie.Db), Je(ie.Db);
                }
                ht = 0;
              },
              d: function() {
                var ie = ht;
                if (!ie)
                  return Zt = 0;
                var xe = new mt(ie);
                xe.Fb(ie);
                var Ie = xe.Eb();
                if (!Ie)
                  return Zt = 0, ie;
                for (var Re = Array.prototype.slice.call(arguments), Ve = 0; Ve < Re.length; Ve++) {
                  var Qe = Re[Ve];
                  if (Qe === 0 || Qe === Ie)
                    break;
                  if (on(Qe, Ie, xe.zb + 16))
                    return Zt = Qe, ie;
                }
                return Zt = Ie, ie;
              },
              k: function() {
                var ie = ht;
                if (!ie)
                  return Zt = 0;
                var xe = new mt(ie);
                xe.Fb(ie);
                var Ie = xe.Eb();
                if (!Ie)
                  return Zt = 0, ie;
                for (var Re = Array.prototype.slice.call(arguments), Ve = 0; Ve < Re.length; Ve++) {
                  var Qe = Re[Ve];
                  if (Qe === 0 || Qe === Ie)
                    break;
                  if (on(Qe, Ie, xe.zb + 16))
                    return Zt = Qe, ie;
                }
                return Zt = Ie, ie;
              },
              g: function() {
                var ie = ht;
                if (!ie)
                  return Zt = 0;
                var xe = new mt(ie);
                xe.Fb(ie);
                var Ie = xe.Eb();
                if (!Ie)
                  return Zt = 0, ie;
                for (var Re = Array.prototype.slice.call(arguments), Ve = 0; Ve < Re.length; Ve++) {
                  var Qe = Re[Ve];
                  if (Qe === 0 || Qe === Ie)
                    break;
                  if (on(Qe, Ie, xe.zb + 16))
                    return Zt = Qe, ie;
                }
                return Zt = Ie, ie;
              },
              s: Je,
              L: function() {
                var ie = Ge.pop();
                ie || De("no exception to throw");
                var xe = ie.Db;
                throw ie.Lb() || (Ge.push(ie), ie.Jb(true), ie.Ib(false), lt++), ht = xe, xe;
              },
              b: function(ie, xe, Ie) {
                throw new mt(ie).Rb(xe, Ie), ht = ie, lt++, ie;
              },
              la: function() {
                return lt;
              },
              i: function(ie) {
                throw ht || (ht = ie), ie;
              },
              H: function() {
                return 0;
              },
              Ba: function() {
              },
              pa: function() {
              },
              ra: function() {
              },
              ka: function() {
                return 0;
              },
              za: function() {
              },
              ua: function() {
              },
              ya: function() {
              },
              R: function() {
              },
              qa: function() {
              },
              na: function() {
              },
              Aa: function() {
              },
              oa: function() {
              },
              Ha: function() {
              },
              Ja: function() {
                De("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
              },
              Ia: function() {
                De("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking");
              },
              S: function() {
                return Date.now();
              },
              Ca: function() {
                return true;
              },
              Da: function(ie, xe) {
                ie = new Date(1e3 * (H[ie >>> 2] + 4294967296 * G[ie + 4 >>> 2])), G[xe >> 2 >>> 0] = ie.getUTCSeconds(), G[xe + 4 >> 2 >>> 0] = ie.getUTCMinutes(), G[xe + 8 >> 2 >>> 0] = ie.getUTCHours(), G[xe + 12 >> 2 >>> 0] = ie.getUTCDate(), G[xe + 16 >> 2 >>> 0] = ie.getUTCMonth(), G[xe + 20 >> 2 >>> 0] = ie.getUTCFullYear() - 1900, G[xe + 24 >> 2 >>> 0] = ie.getUTCDay(), G[xe + 28 >> 2 >>> 0] = (ie.getTime() - Date.UTC(ie.getUTCFullYear(), 0, 1, 0, 0, 0, 0)) / 864e5 | 0;
              },
              Ea: function(ie, xe) {
                ie = new Date(1e3 * (H[ie >>> 2] + 4294967296 * G[ie + 4 >>> 2])), G[xe >> 2 >>> 0] = ie.getSeconds(), G[xe + 4 >> 2 >>> 0] = ie.getMinutes(), G[xe + 8 >> 2 >>> 0] = ie.getHours(), G[xe + 12 >> 2 >>> 0] = ie.getDate(), G[xe + 16 >> 2 >>> 0] = ie.getMonth(), G[xe + 20 >> 2 >>> 0] = ie.getFullYear() - 1900, G[xe + 24 >> 2 >>> 0] = ie.getDay();
                var Ie = new Date(ie.getFullYear(), 0, 1);
                G[xe + 28 >> 2 >>> 0] = (ie.getTime() - Ie.getTime()) / 864e5 | 0, G[xe + 36 >> 2 >>> 0] = -60 * ie.getTimezoneOffset();
                var Re = new Date(ie.getFullYear(), 6, 1).getTimezoneOffset();
                Ie = Ie.getTimezoneOffset(), G[xe + 32 >> 2 >>> 0] = 0 | (Re != Ie && ie.getTimezoneOffset() == Math.min(Ie, Re));
              },
              Fa: function(ie) {
                var xe = new Date(G[ie + 20 >> 2 >>> 0] + 1900, G[ie + 16 >> 2 >>> 0], G[ie + 12 >> 2 >>> 0], G[ie + 8 >> 2 >>> 0], G[ie + 4 >> 2 >>> 0], G[ie >> 2 >>> 0], 0), Ie = G[ie + 32 >> 2 >>> 0], Re = xe.getTimezoneOffset(), Ve = new Date(xe.getFullYear(), 0, 1), Qe = new Date(xe.getFullYear(), 6, 1).getTimezoneOffset(), _t = Ve.getTimezoneOffset(), Gt = Math.min(_t, Qe);
                return 0 > Ie ? G[ie + 32 >> 2 >>> 0] = +(Qe != _t && Gt == Re) : 0 < Ie != (Gt == Re) && (Qe = Math.max(_t, Qe), xe.setTime(xe.getTime() + 6e4 * ((0 < Ie ? Gt : Qe) - Re))), G[ie + 24 >> 2 >>> 0] = xe.getDay(), G[ie + 28 >> 2 >>> 0] = (xe.getTime() - Ve.getTime()) / 864e5 | 0, G[ie >> 2 >>> 0] = xe.getSeconds(), G[ie + 4 >> 2 >>> 0] = xe.getMinutes(), G[ie + 8 >> 2 >>> 0] = xe.getHours(), G[ie + 12 >> 2 >>> 0] = xe.getDate(), G[ie + 16 >> 2 >>> 0] = xe.getMonth(), xe.getTime() / 1e3 | 0;
              },
              sa: function() {
                return -52;
              },
              ta: function() {
              },
              Ga: function ie(xe, Ie, Re) {
                ie.Vb || (ie.Vb = true, function(Ve, Qe, _t) {
                  function Gt(Sn) {
                    return (Sn = Sn.toTimeString().match(/\(([A-Za-z ]+)\)$/)) ? Sn[1] : "GMT";
                  }
                  var Lt = (/* @__PURE__ */ new Date()).getFullYear(), dn = new Date(Lt, 0, 1), bn = new Date(Lt, 6, 1);
                  Lt = dn.getTimezoneOffset();
                  var Pn = bn.getTimezoneOffset();
                  G[Ve >> 2 >>> 0] = 60 * Math.max(Lt, Pn), G[Qe >> 2 >>> 0] = +(Lt != Pn), Ve = Gt(dn), Qe = Gt(bn), Ve = At(Ve), Qe = At(Qe), Pn < Lt ? (H[_t >> 2 >>> 0] = Ve, H[_t + 4 >> 2 >>> 0] = Qe) : (H[_t >> 2 >>> 0] = Qe, H[_t + 4 >> 2 >>> 0] = Ve);
                }(xe, Ie, Re));
              },
              B: function() {
                De("");
              },
              ma: function() {
                return 4294901760;
              },
              I: A ? () => {
                var ie = process.hrtime();
                return 1e3 * ie[0] + ie[1] / 1e6;
              } : () => performance.now(),
              xa: function(ie, xe, Ie) {
                J.copyWithin(ie >>> 0, xe >>> 0, xe + Ie >>> 0);
              },
              G: function(ie) {
                var xe = J.length;
                if (4294901760 < (ie >>>= 0))
                  return false;
                for (var Ie = 1; 4 >= Ie; Ie *= 2) {
                  var Re = xe * (1 + 0.2 / Ie);
                  Re = Math.min(Re, ie + 100663296);
                  var Ve = Math;
                  Re = Math.max(ie, Re), Ve = Ve.min.call(Ve, 4294901760, Re + (65536 - Re % 65536) % 65536);
                  e: {
                    try {
                      j.grow(Ve - Z.byteLength + 65535 >>> 16), oe();
                      var Qe = 1;
                      break e;
                    } catch {
                    }
                    Qe = void 0;
                  }
                  if (Qe)
                    return true;
                }
                return false;
              },
              va: function(ie, xe) {
                var Ie = 0;
                return Ct().forEach(function(Re, Ve) {
                  var Qe = xe + Ie;
                  for (Ve = H[ie + 4 * Ve >> 2 >>> 0] = Qe, Qe = 0; Qe < Re.length; ++Qe)
                    te[Ve++ >> 0 >>> 0] = Re.charCodeAt(Qe);
                  te[Ve >> 0 >>> 0] = 0, Ie += Re.length + 1;
                }), 0;
              },
              wa: function(ie, xe) {
                var Ie = Ct();
                H[ie >> 2 >>> 0] = Ie.length;
                var Re = 0;
                return Ie.forEach(function(Ve) {
                  Re += Ve.length + 1;
                }), H[xe >> 2 >>> 0] = Re, 0;
              },
              ba: function(ie) {
                R || 0 < ot || (rr(), it(Ye), ur(0), zt[1].length && _n(1, 10), zt[2].length && _n(2, 10)), R || 0 < ot || (d.onExit && d.onExit(ie), U = true), E(ie, new je(ie));
              },
              E: function() {
                return 52;
              },
              Q: function() {
                return 52;
              },
              ca: function() {
                return 70;
              },
              P: function(ie, xe, Ie, Re) {
                for (var Ve = 0, Qe = 0; Qe < Ie; Qe++) {
                  var _t = H[xe >> 2 >>> 0], Gt = H[xe + 4 >> 2 >>> 0];
                  xe += 8;
                  for (var Lt = 0; Lt < Gt; Lt++)
                    _n(ie, J[_t + Lt >>> 0]);
                  Ve += Gt;
                }
                return H[Re >> 2 >>> 0] = Ve, 0;
              },
              c: function() {
                return Zt;
              },
              ja: function ie(xe, Ie) {
                ie.Mb || (ie.Mb = function() {
                  if (typeof crypto == "object" && typeof crypto.getRandomValues == "function") {
                    var Ve = new Uint8Array(1);
                    return () => (crypto.getRandomValues(Ve), Ve[0]);
                  }
                  if (A)
                    try {
                      var Qe = t(Object(function() {
                        var _t = new Error("Cannot find module 'crypto'");
                        throw _t.code = "MODULE_NOT_FOUND", _t;
                      }()));
                      return () => Qe.randomBytes(1)[0];
                    } catch {
                    }
                  return () => De("randomDevice");
                }());
                for (var Re = 0; Re < Ie; Re++)
                  te[xe + Re >> 0 >>> 0] = ie.Mb();
                return 0;
              },
              ea: function(ie, xe, Ie) {
                var Re = wt();
                try {
                  return pt(ie)(xe, Ie);
                } catch (Ve) {
                  if (tn(Re), Ve !== Ve + 0)
                    throw Ve;
                  Jt(1, 0);
                }
              },
              fa: function(ie, xe, Ie) {
                var Re = wt();
                try {
                  return pt(ie)(xe, Ie);
                } catch (Ve) {
                  if (tn(Re), Ve !== Ve + 0)
                    throw Ve;
                  Jt(1, 0);
                }
              },
              J: function(ie) {
                var xe = wt();
                try {
                  return pt(ie)();
                } catch (Ie) {
                  if (tn(xe), Ie !== Ie + 0)
                    throw Ie;
                  Jt(1, 0);
                }
              },
              e: function(ie, xe) {
                var Ie = wt();
                try {
                  return pt(ie)(xe);
                } catch (Re) {
                  if (tn(Ie), Re !== Re + 0)
                    throw Re;
                  Jt(1, 0);
                }
              },
              N: function(ie, xe, Ie) {
                var Re = wt();
                try {
                  return pt(ie)(xe, Ie);
                } catch (Ve) {
                  if (tn(Re), Ve !== Ve + 0)
                    throw Ve;
                  Jt(1, 0);
                }
              },
              O: function(ie, xe, Ie) {
                var Re = wt();
                try {
                  return pt(ie)(xe, Ie);
                } catch (Ve) {
                  if (tn(Re), Ve !== Ve + 0)
                    throw Ve;
                  Jt(1, 0);
                }
              },
              j: function(ie, xe, Ie) {
                var Re = wt();
                try {
                  return pt(ie)(xe, Ie);
                } catch (Ve) {
                  if (tn(Re), Ve !== Ve + 0)
                    throw Ve;
                  Jt(1, 0);
                }
              },
              o: function(ie, xe, Ie, Re) {
                var Ve = wt();
                try {
                  return pt(ie)(xe, Ie, Re);
                } catch (Qe) {
                  if (tn(Ve), Qe !== Qe + 0)
                    throw Qe;
                  Jt(1, 0);
                }
              },
              p: function(ie, xe, Ie, Re, Ve) {
                var Qe = wt();
                try {
                  return pt(ie)(xe, Ie, Re, Ve);
                } catch (_t) {
                  if (tn(Qe), _t !== _t + 0)
                    throw _t;
                  Jt(1, 0);
                }
              },
              M: function(ie, xe, Ie, Re, Ve, Qe) {
                var _t = wt();
                try {
                  return pt(ie)(xe, Ie, Re, Ve, Qe);
                } catch (Gt) {
                  if (tn(_t), Gt !== Gt + 0)
                    throw Gt;
                  Jt(1, 0);
                }
              },
              r: function(ie, xe, Ie, Re, Ve, Qe) {
                var _t = wt();
                try {
                  return pt(ie)(xe, Ie, Re, Ve, Qe);
                } catch (Gt) {
                  if (tn(_t), Gt !== Gt + 0)
                    throw Gt;
                  Jt(1, 0);
                }
              },
              v: function(ie, xe, Ie, Re, Ve, Qe, _t) {
                var Gt = wt();
                try {
                  return pt(ie)(xe, Ie, Re, Ve, Qe, _t);
                } catch (Lt) {
                  if (tn(Gt), Lt !== Lt + 0)
                    throw Lt;
                  Jt(1, 0);
                }
              },
              K: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt) {
                var Lt = wt();
                try {
                  return pt(ie)(xe, Ie, Re, Ve, Qe, _t, Gt);
                } catch (dn) {
                  if (tn(Lt), dn !== dn + 0)
                    throw dn;
                  Jt(1, 0);
                }
              },
              D: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt, Lt, dn, bn, Pn) {
                var Sn = wt();
                try {
                  return pt(ie)(xe, Ie, Re, Ve, Qe, _t, Gt, Lt, dn, bn, Pn);
                } catch (et) {
                  if (tn(Sn), et !== et + 0)
                    throw et;
                  Jt(1, 0);
                }
              },
              X: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt) {
                var Lt = wt();
                try {
                  return Bt(ie, xe, Ie, Re, Ve, Qe, _t, Gt);
                } catch (dn) {
                  if (tn(Lt), dn !== dn + 0)
                    throw dn;
                  Jt(1, 0);
                }
              },
              V: function(ie, xe, Ie, Re, Ve, Qe, _t) {
                var Gt = wt();
                try {
                  return ve(ie, xe, Ie, Re, Ve, Qe, _t);
                } catch (Lt) {
                  if (tn(Gt), Lt !== Lt + 0)
                    throw Lt;
                  Jt(1, 0);
                }
              },
              U: function(ie, xe, Ie, Re, Ve) {
                var Qe = wt();
                try {
                  return Et(ie, xe, Ie, Re, Ve);
                } catch (_t) {
                  if (tn(Qe), _t !== _t + 0)
                    throw _t;
                  Jt(1, 0);
                }
              },
              Z: function(ie, xe, Ie, Re) {
                var Ve = wt();
                try {
                  return He(ie, xe, Ie, Re);
                } catch (Qe) {
                  if (tn(Ve), Qe !== Qe + 0)
                    throw Qe;
                  Jt(1, 0);
                }
              },
              W: function(ie) {
                var xe = wt();
                try {
                  return W(ie);
                } catch (Ie) {
                  if (tn(xe), Ie !== Ie + 0)
                    throw Ie;
                  Jt(1, 0);
                }
              },
              Y: function(ie, xe) {
                var Ie = wt();
                try {
                  return Ft(ie, xe);
                } catch (Re) {
                  if (tn(Ie), Re !== Re + 0)
                    throw Re;
                  Jt(1, 0);
                }
              },
              T: function(ie, xe, Ie) {
                var Re = wt();
                try {
                  return de(ie, xe, Ie);
                } catch (Ve) {
                  if (tn(Re), Ve !== Ve + 0)
                    throw Ve;
                  Jt(1, 0);
                }
              },
              f: function(ie) {
                var xe = wt();
                try {
                  pt(ie)();
                } catch (Ie) {
                  if (tn(xe), Ie !== Ie + 0)
                    throw Ie;
                  Jt(1, 0);
                }
              },
              q: function(ie, xe) {
                var Ie = wt();
                try {
                  pt(ie)(xe);
                } catch (Re) {
                  if (tn(Ie), Re !== Re + 0)
                    throw Re;
                  Jt(1, 0);
                }
              },
              h: function(ie, xe, Ie) {
                var Re = wt();
                try {
                  pt(ie)(xe, Ie);
                } catch (Ve) {
                  if (tn(Re), Ve !== Ve + 0)
                    throw Ve;
                  Jt(1, 0);
                }
              },
              da: function(ie, xe, Ie, Re) {
                var Ve = wt();
                try {
                  pt(ie)(xe, Ie, Re);
                } catch (Qe) {
                  if (tn(Ve), Qe !== Qe + 0)
                    throw Qe;
                  Jt(1, 0);
                }
              },
              l: function(ie, xe, Ie, Re) {
                var Ve = wt();
                try {
                  pt(ie)(xe, Ie, Re);
                } catch (Qe) {
                  if (tn(Ve), Qe !== Qe + 0)
                    throw Qe;
                  Jt(1, 0);
                }
              },
              t: function(ie, xe, Ie, Re, Ve) {
                var Qe = wt();
                try {
                  pt(ie)(xe, Ie, Re, Ve);
                } catch (_t) {
                  if (tn(Qe), _t !== _t + 0)
                    throw _t;
                  Jt(1, 0);
                }
              },
              u: function(ie, xe, Ie, Re, Ve, Qe) {
                var _t = wt();
                try {
                  pt(ie)(xe, Ie, Re, Ve, Qe);
                } catch (Gt) {
                  if (tn(_t), Gt !== Gt + 0)
                    throw Gt;
                  Jt(1, 0);
                }
              },
              x: function(ie, xe, Ie, Re, Ve, Qe, _t) {
                var Gt = wt();
                try {
                  pt(ie)(xe, Ie, Re, Ve, Qe, _t);
                } catch (Lt) {
                  if (tn(Gt), Lt !== Lt + 0)
                    throw Lt;
                  Jt(1, 0);
                }
              },
              z: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt) {
                var Lt = wt();
                try {
                  pt(ie)(xe, Ie, Re, Ve, Qe, _t, Gt);
                } catch (dn) {
                  if (tn(Lt), dn !== dn + 0)
                    throw dn;
                  Jt(1, 0);
                }
              },
              ga: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt, Lt) {
                var dn = wt();
                try {
                  pt(ie)(xe, Ie, Re, Ve, Qe, _t, Gt, Lt);
                } catch (bn) {
                  if (tn(dn), bn !== bn + 0)
                    throw bn;
                  Jt(1, 0);
                }
              },
              A: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt, Lt, dn, bn) {
                var Pn = wt();
                try {
                  pt(ie)(xe, Ie, Re, Ve, Qe, _t, Gt, Lt, dn, bn);
                } catch (Sn) {
                  if (tn(Pn), Sn !== Sn + 0)
                    throw Sn;
                  Jt(1, 0);
                }
              },
              C: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt, Lt, dn, bn, Pn, Sn, et, cn, Tn) {
                var Ln = wt();
                try {
                  pt(ie)(xe, Ie, Re, Ve, Qe, _t, Gt, Lt, dn, bn, Pn, Sn, et, cn, Tn);
                } catch (Xn) {
                  if (tn(Ln), Xn !== Xn + 0)
                    throw Xn;
                  Jt(1, 0);
                }
              },
              aa: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt) {
                var Lt = wt();
                try {
                  ye(ie, xe, Ie, Re, Ve, Qe, _t, Gt);
                } catch (dn) {
                  if (tn(Lt), dn !== dn + 0)
                    throw dn;
                  Jt(1, 0);
                }
              },
              _: function(ie, xe, Ie, Re, Ve, Qe, _t, Gt, Lt, dn, bn, Pn) {
                var Sn = wt();
                try {
                  Ue(ie, xe, Ie, Re, Ve, Qe, _t, Gt, Lt, dn, bn, Pn);
                } catch (et) {
                  if (tn(Sn), et !== et + 0)
                    throw et;
                  Jt(1, 0);
                }
              },
              $: function(ie, xe, Ie, Re, Ve, Qe) {
                var _t = wt();
                try {
                  ke(ie, xe, Ie, Re, Ve, Qe);
                } catch (Gt) {
                  if (tn(_t), Gt !== Gt + 0)
                    throw Gt;
                  Jt(1, 0);
                }
              },
              n: function(ie) {
                return ie;
              },
              F: function(ie) {
                Zt = ie;
              },
              ha: Hn,
              y: function(ie, xe, Ie, Re) {
                return Hn(ie, xe, Ie, Re);
              }
            };
            (function() {
              function ie(Ve) {
                d.asm = Ve.exports, j = d.asm.Ka, oe(), be = d.asm.ib, Oe.unshift(d.asm.La), _e--, d.monitorRunDependencies && d.monitorRunDependencies(_e), _e == 0 && le && (Ve = le, le = null, Ve());
              }
              function xe(Ve) {
                ie(Ve.instance);
              }
              function Ie(Ve) {
                return function() {
                  if (!F && (k || $)) {
                    if (typeof fetch == "function" && !qe.startsWith("file://"))
                      return fetch(qe, {
                        credentials: "same-origin"
                      }).then(function(Qe) {
                        if (!Qe.ok)
                          throw "failed to load wasm binary file at '" + qe + "'";
                        return Qe.arrayBuffer();
                      }).catch(function() {
                        return rt();
                      });
                    if (h)
                      return new Promise(function(Qe, _t) {
                        h(qe, function(Gt) {
                          Qe(new Uint8Array(Gt));
                        }, _t);
                      });
                  }
                  return Promise.resolve().then(function() {
                    return rt();
                  });
                }().then(function(Qe) {
                  return WebAssembly.instantiate(Qe, Re);
                }).then(function(Qe) {
                  return Qe;
                }).then(Ve, function(Qe) {
                  N("failed to asynchronously prepare wasm: " + Qe), De(Qe);
                });
              }
              var Re = {
                a: Un
              };
              if (_e++, d.monitorRunDependencies && d.monitorRunDependencies(_e), d.instantiateWasm)
                try {
                  return d.instantiateWasm(Re, ie);
                } catch (Ve) {
                  return N("Module.instantiateWasm callback failed with error: " + Ve), false;
                }
              (F || typeof WebAssembly.instantiateStreaming != "function" || Be() || qe.startsWith("file://") || A || typeof fetch != "function" ? Ie(xe) : fetch(qe, {
                credentials: "same-origin"
              }).then(function(Ve) {
                return WebAssembly.instantiateStreaming(Ve, Re).then(xe, function(Qe) {
                  return N("wasm streaming compile failed: " + Qe), N("falling back to ArrayBuffer instantiation"), Ie(xe);
                });
              })).catch(g);
            })(), d.___wasm_call_ctors = function() {
              return (d.___wasm_call_ctors = d.asm.La).apply(null, arguments);
            }, d._OrtInit = function() {
              return (d._OrtInit = d.asm.Ma).apply(null, arguments);
            }, d._OrtCreateSessionOptions = function() {
              return (d._OrtCreateSessionOptions = d.asm.Na).apply(null, arguments);
            }, d._OrtAppendExecutionProvider = function() {
              return (d._OrtAppendExecutionProvider = d.asm.Oa).apply(null, arguments);
            }, d._OrtAddSessionConfigEntry = function() {
              return (d._OrtAddSessionConfigEntry = d.asm.Pa).apply(null, arguments);
            }, d._OrtReleaseSessionOptions = function() {
              return (d._OrtReleaseSessionOptions = d.asm.Qa).apply(null, arguments);
            }, d._OrtCreateSession = function() {
              return (d._OrtCreateSession = d.asm.Ra).apply(null, arguments);
            }, d._OrtReleaseSession = function() {
              return (d._OrtReleaseSession = d.asm.Sa).apply(null, arguments);
            }, d._OrtGetInputCount = function() {
              return (d._OrtGetInputCount = d.asm.Ta).apply(null, arguments);
            }, d._OrtGetOutputCount = function() {
              return (d._OrtGetOutputCount = d.asm.Ua).apply(null, arguments);
            }, d._OrtGetInputName = function() {
              return (d._OrtGetInputName = d.asm.Va).apply(null, arguments);
            }, d._OrtGetOutputName = function() {
              return (d._OrtGetOutputName = d.asm.Wa).apply(null, arguments);
            }, d._OrtFree = function() {
              return (d._OrtFree = d.asm.Xa).apply(null, arguments);
            }, d._OrtCreateTensor = function() {
              return (d._OrtCreateTensor = d.asm.Ya).apply(null, arguments);
            }, d._OrtGetTensorData = function() {
              return (d._OrtGetTensorData = d.asm.Za).apply(null, arguments);
            }, d._OrtReleaseTensor = function() {
              return (d._OrtReleaseTensor = d.asm._a).apply(null, arguments);
            }, d._OrtCreateRunOptions = function() {
              return (d._OrtCreateRunOptions = d.asm.$a).apply(null, arguments);
            }, d._OrtAddRunConfigEntry = function() {
              return (d._OrtAddRunConfigEntry = d.asm.ab).apply(null, arguments);
            }, d._OrtReleaseRunOptions = function() {
              return (d._OrtReleaseRunOptions = d.asm.bb).apply(null, arguments);
            }, d._OrtRun = function() {
              return (d._OrtRun = d.asm.cb).apply(null, arguments);
            }, d._OrtEndProfiling = function() {
              return (d._OrtEndProfiling = d.asm.db).apply(null, arguments);
            };
            var kn, ln = d._malloc = function() {
              return (ln = d._malloc = d.asm.eb).apply(null, arguments);
            }, nr = d._free = function() {
              return (nr = d._free = d.asm.fb).apply(null, arguments);
            }, ur = d._fflush = function() {
              return (ur = d._fflush = d.asm.gb).apply(null, arguments);
            }, rr = d.___funcs_on_exit = function() {
              return (rr = d.___funcs_on_exit = d.asm.hb).apply(null, arguments);
            }, Jt = d._setThrew = function() {
              return (Jt = d._setThrew = d.asm.jb).apply(null, arguments);
            }, wt = d.stackSave = function() {
              return (wt = d.stackSave = d.asm.kb).apply(null, arguments);
            }, tn = d.stackRestore = function() {
              return (tn = d.stackRestore = d.asm.lb).apply(null, arguments);
            }, ar = d.stackAlloc = function() {
              return (ar = d.stackAlloc = d.asm.mb).apply(null, arguments);
            }, on = d.___cxa_can_catch = function() {
              return (on = d.___cxa_can_catch = d.asm.nb).apply(null, arguments);
            }, sr = d.___cxa_is_pointer_type = function() {
              return (sr = d.___cxa_is_pointer_type = d.asm.ob).apply(null, arguments);
            }, W = d.dynCall_j = function() {
              return (W = d.dynCall_j = d.asm.pb).apply(null, arguments);
            }, ve = d.dynCall_iiiiij = function() {
              return (ve = d.dynCall_iiiiij = d.asm.qb).apply(null, arguments);
            }, de = d.dynCall_jii = function() {
              return (de = d.dynCall_jii = d.asm.rb).apply(null, arguments);
            }, ye = d.dynCall_viiiiij = function() {
              return (ye = d.dynCall_viiiiij = d.asm.sb).apply(null, arguments);
            }, ke = d.dynCall_vjji = function() {
              return (ke = d.dynCall_vjji = d.asm.tb).apply(null, arguments);
            }, Ue = d.dynCall_viiijjjii = function() {
              return (Ue = d.dynCall_viiijjjii = d.asm.ub).apply(null, arguments);
            }, He = d.dynCall_iij = function() {
              return (He = d.dynCall_iij = d.asm.vb).apply(null, arguments);
            }, Ft = d.dynCall_ji = function() {
              return (Ft = d.dynCall_ji = d.asm.wb).apply(null, arguments);
            }, Bt = d.dynCall_iiiiiij = function() {
              return (Bt = d.dynCall_iiiiiij = d.asm.xb).apply(null, arguments);
            }, Et = d.dynCall_iiij = function() {
              return (Et = d.dynCall_iiij = d.asm.yb).apply(null, arguments);
            };
            function jt() {
              function ie() {
                if (!kn && (kn = true, d.calledRun = true, !U)) {
                  if (it(Oe), w(d), d.onRuntimeInitialized && d.onRuntimeInitialized(), d.postRun)
                    for (typeof d.postRun == "function" && (d.postRun = [
                      d.postRun
                    ]); d.postRun.length; ) {
                      var xe = d.postRun.shift();
                      We.unshift(xe);
                    }
                  it(We);
                }
              }
              if (!(0 < _e)) {
                if (d.preRun)
                  for (typeof d.preRun == "function" && (d.preRun = [
                    d.preRun
                  ]); d.preRun.length; )
                    vt();
                it(Ee), 0 < _e || (d.setStatus ? (d.setStatus("Running..."), setTimeout(function() {
                  setTimeout(function() {
                    d.setStatus("");
                  }, 1), ie();
                }, 1)) : ie());
              }
            }
            if (d.UTF8ToString = fe, d.stringToUTF8 = function(ie, xe, Ie) {
              return Me(ie, J, xe, Ie);
            }, d.lengthBytesUTF8 = pe, d.stackSave = wt, d.stackRestore = tn, d.stackAlloc = ar, le = function ie() {
              kn || jt(), kn || (le = ie);
            }, d.preInit)
              for (typeof d.preInit == "function" && (d.preInit = [
                d.preInit
              ]); 0 < d.preInit.length; )
                d.preInit.pop()();
            return jt(), f.ready;
          });
          i.exports = l;
        },
        4537: (i) => {
          i.exports = function(e, t) {
            for (var s = new Array(arguments.length - 1), l = 0, f = 2, d = true; f < arguments.length; )
              s[l++] = arguments[f++];
            return new Promise(function(w, g) {
              s[l] = function(_) {
                if (d)
                  if (d = false, _)
                    g(_);
                  else {
                    for (var h = new Array(arguments.length - 1), r = 0; r < h.length; )
                      h[r++] = arguments[r];
                    w.apply(null, h);
                  }
              };
              try {
                e.apply(t || null, s);
              } catch (_) {
                d && (d = false, g(_));
              }
            });
          };
        },
        7419: (i, e) => {
          var t = e;
          t.length = function(w) {
            var g = w.length;
            if (!g)
              return 0;
            for (var _ = 0; --g % 4 > 1 && w.charAt(g) === "="; )
              ++_;
            return Math.ceil(3 * w.length) / 4 - _;
          };
          for (var s = new Array(64), l = new Array(123), f = 0; f < 64; )
            l[s[f] = f < 26 ? f + 65 : f < 52 ? f + 71 : f < 62 ? f - 4 : f - 59 | 43] = f++;
          t.encode = function(w, g, _) {
            for (var h, r = null, n = [], u = 0, p = 0; g < _; ) {
              var M = w[g++];
              switch (p) {
                case 0:
                  n[u++] = s[M >> 2], h = (3 & M) << 4, p = 1;
                  break;
                case 1:
                  n[u++] = s[h | M >> 4], h = (15 & M) << 2, p = 2;
                  break;
                case 2:
                  n[u++] = s[h | M >> 6], n[u++] = s[63 & M], p = 0;
              }
              u > 8191 && ((r || (r = [])).push(String.fromCharCode.apply(String, n)), u = 0);
            }
            return p && (n[u++] = s[h], n[u++] = 61, p === 1 && (n[u++] = 61)), r ? (u && r.push(String.fromCharCode.apply(String, n.slice(0, u))), r.join("")) : String.fromCharCode.apply(String, n.slice(0, u));
          };
          var d = "invalid encoding";
          t.decode = function(w, g, _) {
            for (var h, r = _, n = 0, u = 0; u < w.length; ) {
              var p = w.charCodeAt(u++);
              if (p === 61 && n > 1)
                break;
              if ((p = l[p]) === void 0)
                throw Error(d);
              switch (n) {
                case 0:
                  h = p, n = 1;
                  break;
                case 1:
                  g[_++] = h << 2 | (48 & p) >> 4, h = p, n = 2;
                  break;
                case 2:
                  g[_++] = (15 & h) << 4 | (60 & p) >> 2, h = p, n = 3;
                  break;
                case 3:
                  g[_++] = (3 & h) << 6 | p, n = 0;
              }
            }
            if (n === 1)
              throw Error(d);
            return _ - r;
          }, t.test = function(w) {
            return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(w);
          };
        },
        9211: (i) => {
          function e() {
            this._listeners = {};
          }
          i.exports = e, e.prototype.on = function(t, s, l) {
            return (this._listeners[t] || (this._listeners[t] = [])).push({
              fn: s,
              ctx: l || this
            }), this;
          }, e.prototype.off = function(t, s) {
            if (t === void 0)
              this._listeners = {};
            else if (s === void 0)
              this._listeners[t] = [];
            else
              for (var l = this._listeners[t], f = 0; f < l.length; )
                l[f].fn === s ? l.splice(f, 1) : ++f;
            return this;
          }, e.prototype.emit = function(t) {
            var s = this._listeners[t];
            if (s) {
              for (var l = [], f = 1; f < arguments.length; )
                l.push(arguments[f++]);
              for (f = 0; f < s.length; )
                s[f].fn.apply(s[f++].ctx, l);
            }
            return this;
          };
        },
        945: (i) => {
          function e(d) {
            return typeof Float32Array < "u" ? function() {
              var w = new Float32Array([
                -0
              ]), g = new Uint8Array(w.buffer), _ = g[3] === 128;
              function h(p, M, P) {
                w[0] = p, M[P] = g[0], M[P + 1] = g[1], M[P + 2] = g[2], M[P + 3] = g[3];
              }
              function r(p, M, P) {
                w[0] = p, M[P] = g[3], M[P + 1] = g[2], M[P + 2] = g[1], M[P + 3] = g[0];
              }
              function n(p, M) {
                return g[0] = p[M], g[1] = p[M + 1], g[2] = p[M + 2], g[3] = p[M + 3], w[0];
              }
              function u(p, M) {
                return g[3] = p[M], g[2] = p[M + 1], g[1] = p[M + 2], g[0] = p[M + 3], w[0];
              }
              d.writeFloatLE = _ ? h : r, d.writeFloatBE = _ ? r : h, d.readFloatLE = _ ? n : u, d.readFloatBE = _ ? u : n;
            }() : function() {
              function w(_, h, r, n) {
                var u = h < 0 ? 1 : 0;
                if (u && (h = -h), h === 0)
                  _(1 / h > 0 ? 0 : 2147483648, r, n);
                else if (isNaN(h))
                  _(2143289344, r, n);
                else if (h > 34028234663852886e22)
                  _((u << 31 | 2139095040) >>> 0, r, n);
                else if (h < 11754943508222875e-54)
                  _((u << 31 | Math.round(h / 1401298464324817e-60)) >>> 0, r, n);
                else {
                  var p = Math.floor(Math.log(h) / Math.LN2);
                  _((u << 31 | p + 127 << 23 | 8388607 & Math.round(h * Math.pow(2, -p) * 8388608)) >>> 0, r, n);
                }
              }
              function g(_, h, r) {
                var n = _(h, r), u = 2 * (n >> 31) + 1, p = n >>> 23 & 255, M = 8388607 & n;
                return p === 255 ? M ? NaN : u * (1 / 0) : p === 0 ? 1401298464324817e-60 * u * M : u * Math.pow(2, p - 150) * (M + 8388608);
              }
              d.writeFloatLE = w.bind(null, t), d.writeFloatBE = w.bind(null, s), d.readFloatLE = g.bind(null, l), d.readFloatBE = g.bind(null, f);
            }(), typeof Float64Array < "u" ? function() {
              var w = new Float64Array([
                -0
              ]), g = new Uint8Array(w.buffer), _ = g[7] === 128;
              function h(p, M, P) {
                w[0] = p, M[P] = g[0], M[P + 1] = g[1], M[P + 2] = g[2], M[P + 3] = g[3], M[P + 4] = g[4], M[P + 5] = g[5], M[P + 6] = g[6], M[P + 7] = g[7];
              }
              function r(p, M, P) {
                w[0] = p, M[P] = g[7], M[P + 1] = g[6], M[P + 2] = g[5], M[P + 3] = g[4], M[P + 4] = g[3], M[P + 5] = g[2], M[P + 6] = g[1], M[P + 7] = g[0];
              }
              function n(p, M) {
                return g[0] = p[M], g[1] = p[M + 1], g[2] = p[M + 2], g[3] = p[M + 3], g[4] = p[M + 4], g[5] = p[M + 5], g[6] = p[M + 6], g[7] = p[M + 7], w[0];
              }
              function u(p, M) {
                return g[7] = p[M], g[6] = p[M + 1], g[5] = p[M + 2], g[4] = p[M + 3], g[3] = p[M + 4], g[2] = p[M + 5], g[1] = p[M + 6], g[0] = p[M + 7], w[0];
              }
              d.writeDoubleLE = _ ? h : r, d.writeDoubleBE = _ ? r : h, d.readDoubleLE = _ ? n : u, d.readDoubleBE = _ ? u : n;
            }() : function() {
              function w(_, h, r, n, u, p) {
                var M = n < 0 ? 1 : 0;
                if (M && (n = -n), n === 0)
                  _(0, u, p + h), _(1 / n > 0 ? 0 : 2147483648, u, p + r);
                else if (isNaN(n))
                  _(0, u, p + h), _(2146959360, u, p + r);
                else if (n > 17976931348623157e292)
                  _(0, u, p + h), _((M << 31 | 2146435072) >>> 0, u, p + r);
                else {
                  var P;
                  if (n < 22250738585072014e-324)
                    _((P = n / 5e-324) >>> 0, u, p + h), _((M << 31 | P / 4294967296) >>> 0, u, p + r);
                  else {
                    var E = Math.floor(Math.log(n) / Math.LN2);
                    E === 1024 && (E = 1023), _(4503599627370496 * (P = n * Math.pow(2, -E)) >>> 0, u, p + h), _((M << 31 | E + 1023 << 20 | 1048576 * P & 1048575) >>> 0, u, p + r);
                  }
                }
              }
              function g(_, h, r, n, u) {
                var p = _(n, u + h), M = _(n, u + r), P = 2 * (M >> 31) + 1, E = M >>> 20 & 2047, k = 4294967296 * (1048575 & M) + p;
                return E === 2047 ? k ? NaN : P * (1 / 0) : E === 0 ? 5e-324 * P * k : P * Math.pow(2, E - 1075) * (k + 4503599627370496);
              }
              d.writeDoubleLE = w.bind(null, t, 0, 4), d.writeDoubleBE = w.bind(null, s, 4, 0), d.readDoubleLE = g.bind(null, l, 0, 4), d.readDoubleBE = g.bind(null, f, 4, 0);
            }(), d;
          }
          function t(d, w, g) {
            w[g] = 255 & d, w[g + 1] = d >>> 8 & 255, w[g + 2] = d >>> 16 & 255, w[g + 3] = d >>> 24;
          }
          function s(d, w, g) {
            w[g] = d >>> 24, w[g + 1] = d >>> 16 & 255, w[g + 2] = d >>> 8 & 255, w[g + 3] = 255 & d;
          }
          function l(d, w) {
            return (d[w] | d[w + 1] << 8 | d[w + 2] << 16 | d[w + 3] << 24) >>> 0;
          }
          function f(d, w) {
            return (d[w] << 24 | d[w + 1] << 16 | d[w + 2] << 8 | d[w + 3]) >>> 0;
          }
          i.exports = e(e);
        },
        7199: (module) => {
          function inquire(moduleName) {
            try {
              var mod = eval("quire".replace(/^/, "re"))(moduleName);
              if (mod && (mod.length || Object.keys(mod).length))
                return mod;
            } catch (i) {
            }
            return null;
          }
          module.exports = inquire;
        },
        6662: (i) => {
          i.exports = function(e, t, s) {
            var l = s || 8192, f = l >>> 1, d = null, w = l;
            return function(g) {
              if (g < 1 || g > f)
                return e(g);
              w + g > l && (d = e(l), w = 0);
              var _ = t.call(d, w, w += g);
              return 7 & w && (w = 1 + (7 | w)), _;
            };
          };
        },
        4997: (i, e) => {
          var t = e;
          t.length = function(s) {
            for (var l = 0, f = 0, d = 0; d < s.length; ++d)
              (f = s.charCodeAt(d)) < 128 ? l += 1 : f < 2048 ? l += 2 : (64512 & f) == 55296 && (64512 & s.charCodeAt(d + 1)) == 56320 ? (++d, l += 4) : l += 3;
            return l;
          }, t.read = function(s, l, f) {
            if (f - l < 1)
              return "";
            for (var d, w = null, g = [], _ = 0; l < f; )
              (d = s[l++]) < 128 ? g[_++] = d : d > 191 && d < 224 ? g[_++] = (31 & d) << 6 | 63 & s[l++] : d > 239 && d < 365 ? (d = ((7 & d) << 18 | (63 & s[l++]) << 12 | (63 & s[l++]) << 6 | 63 & s[l++]) - 65536, g[_++] = 55296 + (d >> 10), g[_++] = 56320 + (1023 & d)) : g[_++] = (15 & d) << 12 | (63 & s[l++]) << 6 | 63 & s[l++], _ > 8191 && ((w || (w = [])).push(String.fromCharCode.apply(String, g)), _ = 0);
            return w ? (_ && w.push(String.fromCharCode.apply(String, g.slice(0, _))), w.join("")) : String.fromCharCode.apply(String, g.slice(0, _));
          }, t.write = function(s, l, f) {
            for (var d, w, g = f, _ = 0; _ < s.length; ++_)
              (d = s.charCodeAt(_)) < 128 ? l[f++] = d : d < 2048 ? (l[f++] = d >> 6 | 192, l[f++] = 63 & d | 128) : (64512 & d) == 55296 && (64512 & (w = s.charCodeAt(_ + 1))) == 56320 ? (d = 65536 + ((1023 & d) << 10) + (1023 & w), ++_, l[f++] = d >> 18 | 240, l[f++] = d >> 12 & 63 | 128, l[f++] = d >> 6 & 63 | 128, l[f++] = 63 & d | 128) : (l[f++] = d >> 12 | 224, l[f++] = d >> 6 & 63 | 128, l[f++] = 63 & d | 128);
            return f - g;
          };
        },
        3442: (i, e) => {
          e.__esModule = true;
          var t = function() {
            function s(l) {
              if (!l)
                throw new TypeError("Invalid argument; `value` has no value.");
              this.value = s.EMPTY, l && s.isGuid(l) && (this.value = l);
            }
            return s.isGuid = function(l) {
              var f = l.toString();
              return l && (l instanceof s || s.validator.test(f));
            }, s.create = function() {
              return new s([
                s.gen(2),
                s.gen(1),
                s.gen(1),
                s.gen(1),
                s.gen(3)
              ].join("-"));
            }, s.createEmpty = function() {
              return new s("emptyguid");
            }, s.parse = function(l) {
              return new s(l);
            }, s.raw = function() {
              return [
                s.gen(2),
                s.gen(1),
                s.gen(1),
                s.gen(1),
                s.gen(3)
              ].join("-");
            }, s.gen = function(l) {
              for (var f = "", d = 0; d < l; d++)
                f += (65536 * (1 + Math.random()) | 0).toString(16).substring(1);
              return f;
            }, s.prototype.equals = function(l) {
              return s.isGuid(l) && this.value === l.toString();
            }, s.prototype.isEmpty = function() {
              return this.value === s.EMPTY;
            }, s.prototype.toString = function() {
              return this.value;
            }, s.prototype.toJSON = function() {
              return {
                value: this.value
              };
            }, s.validator = new RegExp("^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$", "i"), s.EMPTY = "00000000-0000-0000-0000-000000000000", s;
          }();
          e.Guid = t;
        },
        3720: (i) => {
          i.exports = t;
          var e = null;
          try {
            e = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([
              0,
              97,
              115,
              109,
              1,
              0,
              0,
              0,
              1,
              13,
              2,
              96,
              0,
              1,
              127,
              96,
              4,
              127,
              127,
              127,
              127,
              1,
              127,
              3,
              7,
              6,
              0,
              1,
              1,
              1,
              1,
              1,
              6,
              6,
              1,
              127,
              1,
              65,
              0,
              11,
              7,
              50,
              6,
              3,
              109,
              117,
              108,
              0,
              1,
              5,
              100,
              105,
              118,
              95,
              115,
              0,
              2,
              5,
              100,
              105,
              118,
              95,
              117,
              0,
              3,
              5,
              114,
              101,
              109,
              95,
              115,
              0,
              4,
              5,
              114,
              101,
              109,
              95,
              117,
              0,
              5,
              8,
              103,
              101,
              116,
              95,
              104,
              105,
              103,
              104,
              0,
              0,
              10,
              191,
              1,
              6,
              4,
              0,
              35,
              0,
              11,
              36,
              1,
              1,
              126,
              32,
              0,
              173,
              32,
              1,
              173,
              66,
              32,
              134,
              132,
              32,
              2,
              173,
              32,
              3,
              173,
              66,
              32,
              134,
              132,
              126,
              34,
              4,
              66,
              32,
              135,
              167,
              36,
              0,
              32,
              4,
              167,
              11,
              36,
              1,
              1,
              126,
              32,
              0,
              173,
              32,
              1,
              173,
              66,
              32,
              134,
              132,
              32,
              2,
              173,
              32,
              3,
              173,
              66,
              32,
              134,
              132,
              127,
              34,
              4,
              66,
              32,
              135,
              167,
              36,
              0,
              32,
              4,
              167,
              11,
              36,
              1,
              1,
              126,
              32,
              0,
              173,
              32,
              1,
              173,
              66,
              32,
              134,
              132,
              32,
              2,
              173,
              32,
              3,
              173,
              66,
              32,
              134,
              132,
              128,
              34,
              4,
              66,
              32,
              135,
              167,
              36,
              0,
              32,
              4,
              167,
              11,
              36,
              1,
              1,
              126,
              32,
              0,
              173,
              32,
              1,
              173,
              66,
              32,
              134,
              132,
              32,
              2,
              173,
              32,
              3,
              173,
              66,
              32,
              134,
              132,
              129,
              34,
              4,
              66,
              32,
              135,
              167,
              36,
              0,
              32,
              4,
              167,
              11,
              36,
              1,
              1,
              126,
              32,
              0,
              173,
              32,
              1,
              173,
              66,
              32,
              134,
              132,
              32,
              2,
              173,
              32,
              3,
              173,
              66,
              32,
              134,
              132,
              130,
              34,
              4,
              66,
              32,
              135,
              167,
              36,
              0,
              32,
              4,
              167,
              11
            ])), {}).exports;
          } catch {
          }
          function t(R, j, Z) {
            this.low = 0 | R, this.high = 0 | j, this.unsigned = !!Z;
          }
          function s(R) {
            return (R && R.__isLong__) === true;
          }
          t.prototype.__isLong__, Object.defineProperty(t.prototype, "__isLong__", {
            value: true
          }), t.isLong = s;
          var l = {}, f = {};
          function d(R, j) {
            var Z, te, J;
            return j ? (J = 0 <= (R >>>= 0) && R < 256) && (te = f[R]) ? te : (Z = g(R, (0 | R) < 0 ? -1 : 0, true), J && (f[R] = Z), Z) : (J = -128 <= (R |= 0) && R < 128) && (te = l[R]) ? te : (Z = g(R, R < 0 ? -1 : 0, false), J && (l[R] = Z), Z);
          }
          function w(R, j) {
            if (isNaN(R))
              return j ? E : P;
            if (j) {
              if (R < 0)
                return E;
              if (R >= u)
                return F;
            } else {
              if (R <= -p)
                return D;
              if (R + 1 >= p)
                return C;
            }
            return R < 0 ? w(-R, j).neg() : g(R % n | 0, R / n | 0, j);
          }
          function g(R, j, Z) {
            return new t(R, j, Z);
          }
          t.fromInt = d, t.fromNumber = w, t.fromBits = g;
          var _ = Math.pow;
          function h(R, j, Z) {
            if (R.length === 0)
              throw Error("empty string");
            if (R === "NaN" || R === "Infinity" || R === "+Infinity" || R === "-Infinity")
              return P;
            if (typeof j == "number" ? (Z = j, j = false) : j = !!j, (Z = Z || 10) < 2 || 36 < Z)
              throw RangeError("radix");
            var te;
            if ((te = R.indexOf("-")) > 0)
              throw Error("interior hyphen");
            if (te === 0)
              return h(R.substring(1), j, Z).neg();
            for (var J = w(_(Z, 8)), G = P, H = 0; H < R.length; H += 8) {
              var U = Math.min(8, R.length - H), Q = parseInt(R.substring(H, H + U), Z);
              if (U < 8) {
                var he = w(_(Z, U));
                G = G.mul(he).add(w(Q));
              } else
                G = (G = G.mul(J)).add(w(Q));
            }
            return G.unsigned = j, G;
          }
          function r(R, j) {
            return typeof R == "number" ? w(R, j) : typeof R == "string" ? h(R, j) : g(R.low, R.high, typeof j == "boolean" ? j : R.unsigned);
          }
          t.fromString = h, t.fromValue = r;
          var n = 4294967296, u = n * n, p = u / 2, M = d(1 << 24), P = d(0);
          t.ZERO = P;
          var E = d(0, true);
          t.UZERO = E;
          var k = d(1);
          t.ONE = k;
          var $ = d(1, true);
          t.UONE = $;
          var A = d(-1);
          t.NEG_ONE = A;
          var C = g(-1, 2147483647, false);
          t.MAX_VALUE = C;
          var F = g(-1, -1, true);
          t.MAX_UNSIGNED_VALUE = F;
          var D = g(0, -2147483648, false);
          t.MIN_VALUE = D;
          var N = t.prototype;
          N.toInt = function() {
            return this.unsigned ? this.low >>> 0 : this.low;
          }, N.toNumber = function() {
            return this.unsigned ? (this.high >>> 0) * n + (this.low >>> 0) : this.high * n + (this.low >>> 0);
          }, N.toString = function(R) {
            if ((R = R || 10) < 2 || 36 < R)
              throw RangeError("radix");
            if (this.isZero())
              return "0";
            if (this.isNegative()) {
              if (this.eq(D)) {
                var j = w(R), Z = this.div(j), te = Z.mul(j).sub(this);
                return Z.toString(R) + te.toInt().toString(R);
              }
              return "-" + this.neg().toString(R);
            }
            for (var J = w(_(R, 6), this.unsigned), G = this, H = ""; ; ) {
              var U = G.div(J), Q = (G.sub(U.mul(J)).toInt() >>> 0).toString(R);
              if ((G = U).isZero())
                return Q + H;
              for (; Q.length < 6; )
                Q = "0" + Q;
              H = "" + Q + H;
            }
          }, N.getHighBits = function() {
            return this.high;
          }, N.getHighBitsUnsigned = function() {
            return this.high >>> 0;
          }, N.getLowBits = function() {
            return this.low;
          }, N.getLowBitsUnsigned = function() {
            return this.low >>> 0;
          }, N.getNumBitsAbs = function() {
            if (this.isNegative())
              return this.eq(D) ? 64 : this.neg().getNumBitsAbs();
            for (var R = this.high != 0 ? this.high : this.low, j = 31; j > 0 && !(R & 1 << j); j--)
              ;
            return this.high != 0 ? j + 33 : j + 1;
          }, N.isZero = function() {
            return this.high === 0 && this.low === 0;
          }, N.eqz = N.isZero, N.isNegative = function() {
            return !this.unsigned && this.high < 0;
          }, N.isPositive = function() {
            return this.unsigned || this.high >= 0;
          }, N.isOdd = function() {
            return (1 & this.low) == 1;
          }, N.isEven = function() {
            return (1 & this.low) == 0;
          }, N.equals = function(R) {
            return s(R) || (R = r(R)), (this.unsigned === R.unsigned || this.high >>> 31 != 1 || R.high >>> 31 != 1) && this.high === R.high && this.low === R.low;
          }, N.eq = N.equals, N.notEquals = function(R) {
            return !this.eq(R);
          }, N.neq = N.notEquals, N.ne = N.notEquals, N.lessThan = function(R) {
            return this.comp(R) < 0;
          }, N.lt = N.lessThan, N.lessThanOrEqual = function(R) {
            return this.comp(R) <= 0;
          }, N.lte = N.lessThanOrEqual, N.le = N.lessThanOrEqual, N.greaterThan = function(R) {
            return this.comp(R) > 0;
          }, N.gt = N.greaterThan, N.greaterThanOrEqual = function(R) {
            return this.comp(R) >= 0;
          }, N.gte = N.greaterThanOrEqual, N.ge = N.greaterThanOrEqual, N.compare = function(R) {
            if (s(R) || (R = r(R)), this.eq(R))
              return 0;
            var j = this.isNegative(), Z = R.isNegative();
            return j && !Z ? -1 : !j && Z ? 1 : this.unsigned ? R.high >>> 0 > this.high >>> 0 || R.high === this.high && R.low >>> 0 > this.low >>> 0 ? -1 : 1 : this.sub(R).isNegative() ? -1 : 1;
          }, N.comp = N.compare, N.negate = function() {
            return !this.unsigned && this.eq(D) ? D : this.not().add(k);
          }, N.neg = N.negate, N.add = function(R) {
            s(R) || (R = r(R));
            var j = this.high >>> 16, Z = 65535 & this.high, te = this.low >>> 16, J = 65535 & this.low, G = R.high >>> 16, H = 65535 & R.high, U = R.low >>> 16, Q = 0, he = 0, fe = 0, Me = 0;
            return fe += (Me += J + (65535 & R.low)) >>> 16, he += (fe += te + U) >>> 16, Q += (he += Z + H) >>> 16, Q += j + G, g((fe &= 65535) << 16 | (Me &= 65535), (Q &= 65535) << 16 | (he &= 65535), this.unsigned);
          }, N.subtract = function(R) {
            return s(R) || (R = r(R)), this.add(R.neg());
          }, N.sub = N.subtract, N.multiply = function(R) {
            if (this.isZero())
              return P;
            if (s(R) || (R = r(R)), e)
              return g(e.mul(this.low, this.high, R.low, R.high), e.get_high(), this.unsigned);
            if (R.isZero())
              return P;
            if (this.eq(D))
              return R.isOdd() ? D : P;
            if (R.eq(D))
              return this.isOdd() ? D : P;
            if (this.isNegative())
              return R.isNegative() ? this.neg().mul(R.neg()) : this.neg().mul(R).neg();
            if (R.isNegative())
              return this.mul(R.neg()).neg();
            if (this.lt(M) && R.lt(M))
              return w(this.toNumber() * R.toNumber(), this.unsigned);
            var j = this.high >>> 16, Z = 65535 & this.high, te = this.low >>> 16, J = 65535 & this.low, G = R.high >>> 16, H = 65535 & R.high, U = R.low >>> 16, Q = 65535 & R.low, he = 0, fe = 0, Me = 0, pe = 0;
            return Me += (pe += J * Q) >>> 16, fe += (Me += te * Q) >>> 16, Me &= 65535, fe += (Me += J * U) >>> 16, he += (fe += Z * Q) >>> 16, fe &= 65535, he += (fe += te * U) >>> 16, fe &= 65535, he += (fe += J * H) >>> 16, he += j * Q + Z * U + te * H + J * G, g((Me &= 65535) << 16 | (pe &= 65535), (he &= 65535) << 16 | (fe &= 65535), this.unsigned);
          }, N.mul = N.multiply, N.divide = function(R) {
            if (s(R) || (R = r(R)), R.isZero())
              throw Error("division by zero");
            var j, Z, te;
            if (e)
              return this.unsigned || this.high !== -2147483648 || R.low !== -1 || R.high !== -1 ? g((this.unsigned ? e.div_u : e.div_s)(this.low, this.high, R.low, R.high), e.get_high(), this.unsigned) : this;
            if (this.isZero())
              return this.unsigned ? E : P;
            if (this.unsigned) {
              if (R.unsigned || (R = R.toUnsigned()), R.gt(this))
                return E;
              if (R.gt(this.shru(1)))
                return $;
              te = E;
            } else {
              if (this.eq(D))
                return R.eq(k) || R.eq(A) ? D : R.eq(D) ? k : (j = this.shr(1).div(R).shl(1)).eq(P) ? R.isNegative() ? k : A : (Z = this.sub(R.mul(j)), te = j.add(Z.div(R)));
              if (R.eq(D))
                return this.unsigned ? E : P;
              if (this.isNegative())
                return R.isNegative() ? this.neg().div(R.neg()) : this.neg().div(R).neg();
              if (R.isNegative())
                return this.div(R.neg()).neg();
              te = P;
            }
            for (Z = this; Z.gte(R); ) {
              j = Math.max(1, Math.floor(Z.toNumber() / R.toNumber()));
              for (var J = Math.ceil(Math.log(j) / Math.LN2), G = J <= 48 ? 1 : _(2, J - 48), H = w(j), U = H.mul(R); U.isNegative() || U.gt(Z); )
                U = (H = w(j -= G, this.unsigned)).mul(R);
              H.isZero() && (H = k), te = te.add(H), Z = Z.sub(U);
            }
            return te;
          }, N.div = N.divide, N.modulo = function(R) {
            return s(R) || (R = r(R)), e ? g((this.unsigned ? e.rem_u : e.rem_s)(this.low, this.high, R.low, R.high), e.get_high(), this.unsigned) : this.sub(this.div(R).mul(R));
          }, N.mod = N.modulo, N.rem = N.modulo, N.not = function() {
            return g(~this.low, ~this.high, this.unsigned);
          }, N.and = function(R) {
            return s(R) || (R = r(R)), g(this.low & R.low, this.high & R.high, this.unsigned);
          }, N.or = function(R) {
            return s(R) || (R = r(R)), g(this.low | R.low, this.high | R.high, this.unsigned);
          }, N.xor = function(R) {
            return s(R) || (R = r(R)), g(this.low ^ R.low, this.high ^ R.high, this.unsigned);
          }, N.shiftLeft = function(R) {
            return s(R) && (R = R.toInt()), (R &= 63) == 0 ? this : R < 32 ? g(this.low << R, this.high << R | this.low >>> 32 - R, this.unsigned) : g(0, this.low << R - 32, this.unsigned);
          }, N.shl = N.shiftLeft, N.shiftRight = function(R) {
            return s(R) && (R = R.toInt()), (R &= 63) == 0 ? this : R < 32 ? g(this.low >>> R | this.high << 32 - R, this.high >> R, this.unsigned) : g(this.high >> R - 32, this.high >= 0 ? 0 : -1, this.unsigned);
          }, N.shr = N.shiftRight, N.shiftRightUnsigned = function(R) {
            if (s(R) && (R = R.toInt()), (R &= 63) == 0)
              return this;
            var j = this.high;
            return R < 32 ? g(this.low >>> R | j << 32 - R, j >>> R, this.unsigned) : g(R === 32 ? j : j >>> R - 32, 0, this.unsigned);
          }, N.shru = N.shiftRightUnsigned, N.shr_u = N.shiftRightUnsigned, N.toSigned = function() {
            return this.unsigned ? g(this.low, this.high, false) : this;
          }, N.toUnsigned = function() {
            return this.unsigned ? this : g(this.low, this.high, true);
          }, N.toBytes = function(R) {
            return R ? this.toBytesLE() : this.toBytesBE();
          }, N.toBytesLE = function() {
            var R = this.high, j = this.low;
            return [
              255 & j,
              j >>> 8 & 255,
              j >>> 16 & 255,
              j >>> 24,
              255 & R,
              R >>> 8 & 255,
              R >>> 16 & 255,
              R >>> 24
            ];
          }, N.toBytesBE = function() {
            var R = this.high, j = this.low;
            return [
              R >>> 24,
              R >>> 16 & 255,
              R >>> 8 & 255,
              255 & R,
              j >>> 24,
              j >>> 16 & 255,
              j >>> 8 & 255,
              255 & j
            ];
          }, t.fromBytes = function(R, j, Z) {
            return Z ? t.fromBytesLE(R, j) : t.fromBytesBE(R, j);
          }, t.fromBytesLE = function(R, j) {
            return new t(R[0] | R[1] << 8 | R[2] << 16 | R[3] << 24, R[4] | R[5] << 8 | R[6] << 16 | R[7] << 24, j);
          }, t.fromBytesBE = function(R, j) {
            return new t(R[4] << 24 | R[5] << 16 | R[6] << 8 | R[7], R[0] << 24 | R[1] << 16 | R[2] << 8 | R[3], j);
          };
        },
        1446: (i, e, t) => {
          var s, l, f, d = t(2100), w = d.Reader, g = d.Writer, _ = d.util, h = d.roots.default || (d.roots.default = {});
          h.onnx = ((f = {}).Version = (s = {}, (l = Object.create(s))[s[0] = "_START_VERSION"] = 0, l[s[1] = "IR_VERSION_2017_10_10"] = 1, l[s[2] = "IR_VERSION_2017_10_30"] = 2, l[s[3] = "IR_VERSION_2017_11_3"] = 3, l[s[4] = "IR_VERSION_2019_1_22"] = 4, l[s[5] = "IR_VERSION"] = 5, l), f.AttributeProto = function() {
            function r(n) {
              if (this.floats = [], this.ints = [], this.strings = [], this.tensors = [], this.graphs = [], n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.name = "", r.prototype.refAttrName = "", r.prototype.docString = "", r.prototype.type = 0, r.prototype.f = 0, r.prototype.i = _.Long ? _.Long.fromBits(0, 0, false) : 0, r.prototype.s = _.newBuffer([]), r.prototype.t = null, r.prototype.g = null, r.prototype.floats = _.emptyArray, r.prototype.ints = _.emptyArray, r.prototype.strings = _.emptyArray, r.prototype.tensors = _.emptyArray, r.prototype.graphs = _.emptyArray, r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              if (u || (u = g.create()), n.name != null && n.hasOwnProperty("name") && u.uint32(10).string(n.name), n.f != null && n.hasOwnProperty("f") && u.uint32(21).float(n.f), n.i != null && n.hasOwnProperty("i") && u.uint32(24).int64(n.i), n.s != null && n.hasOwnProperty("s") && u.uint32(34).bytes(n.s), n.t != null && n.hasOwnProperty("t") && h.onnx.TensorProto.encode(n.t, u.uint32(42).fork()).ldelim(), n.g != null && n.hasOwnProperty("g") && h.onnx.GraphProto.encode(n.g, u.uint32(50).fork()).ldelim(), n.floats != null && n.floats.length) {
                u.uint32(58).fork();
                for (var p = 0; p < n.floats.length; ++p)
                  u.float(n.floats[p]);
                u.ldelim();
              }
              if (n.ints != null && n.ints.length) {
                for (u.uint32(66).fork(), p = 0; p < n.ints.length; ++p)
                  u.int64(n.ints[p]);
                u.ldelim();
              }
              if (n.strings != null && n.strings.length)
                for (p = 0; p < n.strings.length; ++p)
                  u.uint32(74).bytes(n.strings[p]);
              if (n.tensors != null && n.tensors.length)
                for (p = 0; p < n.tensors.length; ++p)
                  h.onnx.TensorProto.encode(n.tensors[p], u.uint32(82).fork()).ldelim();
              if (n.graphs != null && n.graphs.length)
                for (p = 0; p < n.graphs.length; ++p)
                  h.onnx.GraphProto.encode(n.graphs[p], u.uint32(90).fork()).ldelim();
              return n.docString != null && n.hasOwnProperty("docString") && u.uint32(106).string(n.docString), n.type != null && n.hasOwnProperty("type") && u.uint32(160).int32(n.type), n.refAttrName != null && n.hasOwnProperty("refAttrName") && u.uint32(170).string(n.refAttrName), u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.AttributeProto(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    M.name = n.string();
                    break;
                  case 21:
                    M.refAttrName = n.string();
                    break;
                  case 13:
                    M.docString = n.string();
                    break;
                  case 20:
                    M.type = n.int32();
                    break;
                  case 2:
                    M.f = n.float();
                    break;
                  case 3:
                    M.i = n.int64();
                    break;
                  case 4:
                    M.s = n.bytes();
                    break;
                  case 5:
                    M.t = h.onnx.TensorProto.decode(n, n.uint32());
                    break;
                  case 6:
                    M.g = h.onnx.GraphProto.decode(n, n.uint32());
                    break;
                  case 7:
                    if (M.floats && M.floats.length || (M.floats = []), (7 & P) == 2)
                      for (var E = n.uint32() + n.pos; n.pos < E; )
                        M.floats.push(n.float());
                    else
                      M.floats.push(n.float());
                    break;
                  case 8:
                    if (M.ints && M.ints.length || (M.ints = []), (7 & P) == 2)
                      for (E = n.uint32() + n.pos; n.pos < E; )
                        M.ints.push(n.int64());
                    else
                      M.ints.push(n.int64());
                    break;
                  case 9:
                    M.strings && M.strings.length || (M.strings = []), M.strings.push(n.bytes());
                    break;
                  case 10:
                    M.tensors && M.tensors.length || (M.tensors = []), M.tensors.push(h.onnx.TensorProto.decode(n, n.uint32()));
                    break;
                  case 11:
                    M.graphs && M.graphs.length || (M.graphs = []), M.graphs.push(h.onnx.GraphProto.decode(n, n.uint32()));
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              if (typeof n != "object" || n === null)
                return "object expected";
              if (n.name != null && n.hasOwnProperty("name") && !_.isString(n.name))
                return "name: string expected";
              if (n.refAttrName != null && n.hasOwnProperty("refAttrName") && !_.isString(n.refAttrName))
                return "refAttrName: string expected";
              if (n.docString != null && n.hasOwnProperty("docString") && !_.isString(n.docString))
                return "docString: string expected";
              if (n.type != null && n.hasOwnProperty("type"))
                switch (n.type) {
                  default:
                    return "type: enum value expected";
                  case 0:
                  case 1:
                  case 2:
                  case 3:
                  case 4:
                  case 5:
                  case 6:
                  case 7:
                  case 8:
                  case 9:
                  case 10:
                }
              if (n.f != null && n.hasOwnProperty("f") && typeof n.f != "number")
                return "f: number expected";
              if (n.i != null && n.hasOwnProperty("i") && !(_.isInteger(n.i) || n.i && _.isInteger(n.i.low) && _.isInteger(n.i.high)))
                return "i: integer|Long expected";
              if (n.s != null && n.hasOwnProperty("s") && !(n.s && typeof n.s.length == "number" || _.isString(n.s)))
                return "s: buffer expected";
              if (n.t != null && n.hasOwnProperty("t") && (p = h.onnx.TensorProto.verify(n.t)))
                return "t." + p;
              if (n.g != null && n.hasOwnProperty("g") && (p = h.onnx.GraphProto.verify(n.g)))
                return "g." + p;
              if (n.floats != null && n.hasOwnProperty("floats")) {
                if (!Array.isArray(n.floats))
                  return "floats: array expected";
                for (var u = 0; u < n.floats.length; ++u)
                  if (typeof n.floats[u] != "number")
                    return "floats: number[] expected";
              }
              if (n.ints != null && n.hasOwnProperty("ints")) {
                if (!Array.isArray(n.ints))
                  return "ints: array expected";
                for (u = 0; u < n.ints.length; ++u)
                  if (!(_.isInteger(n.ints[u]) || n.ints[u] && _.isInteger(n.ints[u].low) && _.isInteger(n.ints[u].high)))
                    return "ints: integer|Long[] expected";
              }
              if (n.strings != null && n.hasOwnProperty("strings")) {
                if (!Array.isArray(n.strings))
                  return "strings: array expected";
                for (u = 0; u < n.strings.length; ++u)
                  if (!(n.strings[u] && typeof n.strings[u].length == "number" || _.isString(n.strings[u])))
                    return "strings: buffer[] expected";
              }
              if (n.tensors != null && n.hasOwnProperty("tensors")) {
                if (!Array.isArray(n.tensors))
                  return "tensors: array expected";
                for (u = 0; u < n.tensors.length; ++u)
                  if (p = h.onnx.TensorProto.verify(n.tensors[u]))
                    return "tensors." + p;
              }
              if (n.graphs != null && n.hasOwnProperty("graphs")) {
                if (!Array.isArray(n.graphs))
                  return "graphs: array expected";
                for (u = 0; u < n.graphs.length; ++u) {
                  var p;
                  if (p = h.onnx.GraphProto.verify(n.graphs[u]))
                    return "graphs." + p;
                }
              }
              return null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.AttributeProto)
                return n;
              var u = new h.onnx.AttributeProto();
              switch (n.name != null && (u.name = String(n.name)), n.refAttrName != null && (u.refAttrName = String(n.refAttrName)), n.docString != null && (u.docString = String(n.docString)), n.type) {
                case "UNDEFINED":
                case 0:
                  u.type = 0;
                  break;
                case "FLOAT":
                case 1:
                  u.type = 1;
                  break;
                case "INT":
                case 2:
                  u.type = 2;
                  break;
                case "STRING":
                case 3:
                  u.type = 3;
                  break;
                case "TENSOR":
                case 4:
                  u.type = 4;
                  break;
                case "GRAPH":
                case 5:
                  u.type = 5;
                  break;
                case "FLOATS":
                case 6:
                  u.type = 6;
                  break;
                case "INTS":
                case 7:
                  u.type = 7;
                  break;
                case "STRINGS":
                case 8:
                  u.type = 8;
                  break;
                case "TENSORS":
                case 9:
                  u.type = 9;
                  break;
                case "GRAPHS":
                case 10:
                  u.type = 10;
              }
              if (n.f != null && (u.f = Number(n.f)), n.i != null && (_.Long ? (u.i = _.Long.fromValue(n.i)).unsigned = false : typeof n.i == "string" ? u.i = parseInt(n.i, 10) : typeof n.i == "number" ? u.i = n.i : typeof n.i == "object" && (u.i = new _.LongBits(n.i.low >>> 0, n.i.high >>> 0).toNumber())), n.s != null && (typeof n.s == "string" ? _.base64.decode(n.s, u.s = _.newBuffer(_.base64.length(n.s)), 0) : n.s.length && (u.s = n.s)), n.t != null) {
                if (typeof n.t != "object")
                  throw TypeError(".onnx.AttributeProto.t: object expected");
                u.t = h.onnx.TensorProto.fromObject(n.t);
              }
              if (n.g != null) {
                if (typeof n.g != "object")
                  throw TypeError(".onnx.AttributeProto.g: object expected");
                u.g = h.onnx.GraphProto.fromObject(n.g);
              }
              if (n.floats) {
                if (!Array.isArray(n.floats))
                  throw TypeError(".onnx.AttributeProto.floats: array expected");
                u.floats = [];
                for (var p = 0; p < n.floats.length; ++p)
                  u.floats[p] = Number(n.floats[p]);
              }
              if (n.ints) {
                if (!Array.isArray(n.ints))
                  throw TypeError(".onnx.AttributeProto.ints: array expected");
                for (u.ints = [], p = 0; p < n.ints.length; ++p)
                  _.Long ? (u.ints[p] = _.Long.fromValue(n.ints[p])).unsigned = false : typeof n.ints[p] == "string" ? u.ints[p] = parseInt(n.ints[p], 10) : typeof n.ints[p] == "number" ? u.ints[p] = n.ints[p] : typeof n.ints[p] == "object" && (u.ints[p] = new _.LongBits(n.ints[p].low >>> 0, n.ints[p].high >>> 0).toNumber());
              }
              if (n.strings) {
                if (!Array.isArray(n.strings))
                  throw TypeError(".onnx.AttributeProto.strings: array expected");
                for (u.strings = [], p = 0; p < n.strings.length; ++p)
                  typeof n.strings[p] == "string" ? _.base64.decode(n.strings[p], u.strings[p] = _.newBuffer(_.base64.length(n.strings[p])), 0) : n.strings[p].length && (u.strings[p] = n.strings[p]);
              }
              if (n.tensors) {
                if (!Array.isArray(n.tensors))
                  throw TypeError(".onnx.AttributeProto.tensors: array expected");
                for (u.tensors = [], p = 0; p < n.tensors.length; ++p) {
                  if (typeof n.tensors[p] != "object")
                    throw TypeError(".onnx.AttributeProto.tensors: object expected");
                  u.tensors[p] = h.onnx.TensorProto.fromObject(n.tensors[p]);
                }
              }
              if (n.graphs) {
                if (!Array.isArray(n.graphs))
                  throw TypeError(".onnx.AttributeProto.graphs: array expected");
                for (u.graphs = [], p = 0; p < n.graphs.length; ++p) {
                  if (typeof n.graphs[p] != "object")
                    throw TypeError(".onnx.AttributeProto.graphs: object expected");
                  u.graphs[p] = h.onnx.GraphProto.fromObject(n.graphs[p]);
                }
              }
              return u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              if ((u.arrays || u.defaults) && (p.floats = [], p.ints = [], p.strings = [], p.tensors = [], p.graphs = []), u.defaults) {
                if (p.name = "", p.f = 0, _.Long) {
                  var M = new _.Long(0, 0, false);
                  p.i = u.longs === String ? M.toString() : u.longs === Number ? M.toNumber() : M;
                } else
                  p.i = u.longs === String ? "0" : 0;
                u.bytes === String ? p.s = "" : (p.s = [], u.bytes !== Array && (p.s = _.newBuffer(p.s))), p.t = null, p.g = null, p.docString = "", p.type = u.enums === String ? "UNDEFINED" : 0, p.refAttrName = "";
              }
              if (n.name != null && n.hasOwnProperty("name") && (p.name = n.name), n.f != null && n.hasOwnProperty("f") && (p.f = u.json && !isFinite(n.f) ? String(n.f) : n.f), n.i != null && n.hasOwnProperty("i") && (typeof n.i == "number" ? p.i = u.longs === String ? String(n.i) : n.i : p.i = u.longs === String ? _.Long.prototype.toString.call(n.i) : u.longs === Number ? new _.LongBits(n.i.low >>> 0, n.i.high >>> 0).toNumber() : n.i), n.s != null && n.hasOwnProperty("s") && (p.s = u.bytes === String ? _.base64.encode(n.s, 0, n.s.length) : u.bytes === Array ? Array.prototype.slice.call(n.s) : n.s), n.t != null && n.hasOwnProperty("t") && (p.t = h.onnx.TensorProto.toObject(n.t, u)), n.g != null && n.hasOwnProperty("g") && (p.g = h.onnx.GraphProto.toObject(n.g, u)), n.floats && n.floats.length) {
                p.floats = [];
                for (var P = 0; P < n.floats.length; ++P)
                  p.floats[P] = u.json && !isFinite(n.floats[P]) ? String(n.floats[P]) : n.floats[P];
              }
              if (n.ints && n.ints.length)
                for (p.ints = [], P = 0; P < n.ints.length; ++P)
                  typeof n.ints[P] == "number" ? p.ints[P] = u.longs === String ? String(n.ints[P]) : n.ints[P] : p.ints[P] = u.longs === String ? _.Long.prototype.toString.call(n.ints[P]) : u.longs === Number ? new _.LongBits(n.ints[P].low >>> 0, n.ints[P].high >>> 0).toNumber() : n.ints[P];
              if (n.strings && n.strings.length)
                for (p.strings = [], P = 0; P < n.strings.length; ++P)
                  p.strings[P] = u.bytes === String ? _.base64.encode(n.strings[P], 0, n.strings[P].length) : u.bytes === Array ? Array.prototype.slice.call(n.strings[P]) : n.strings[P];
              if (n.tensors && n.tensors.length)
                for (p.tensors = [], P = 0; P < n.tensors.length; ++P)
                  p.tensors[P] = h.onnx.TensorProto.toObject(n.tensors[P], u);
              if (n.graphs && n.graphs.length)
                for (p.graphs = [], P = 0; P < n.graphs.length; ++P)
                  p.graphs[P] = h.onnx.GraphProto.toObject(n.graphs[P], u);
              return n.docString != null && n.hasOwnProperty("docString") && (p.docString = n.docString), n.type != null && n.hasOwnProperty("type") && (p.type = u.enums === String ? h.onnx.AttributeProto.AttributeType[n.type] : n.type), n.refAttrName != null && n.hasOwnProperty("refAttrName") && (p.refAttrName = n.refAttrName), p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r.AttributeType = function() {
              var n = {}, u = Object.create(n);
              return u[n[0] = "UNDEFINED"] = 0, u[n[1] = "FLOAT"] = 1, u[n[2] = "INT"] = 2, u[n[3] = "STRING"] = 3, u[n[4] = "TENSOR"] = 4, u[n[5] = "GRAPH"] = 5, u[n[6] = "FLOATS"] = 6, u[n[7] = "INTS"] = 7, u[n[8] = "STRINGS"] = 8, u[n[9] = "TENSORS"] = 9, u[n[10] = "GRAPHS"] = 10, u;
            }(), r;
          }(), f.ValueInfoProto = function() {
            function r(n) {
              if (n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.name = "", r.prototype.type = null, r.prototype.docString = "", r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              return u || (u = g.create()), n.name != null && n.hasOwnProperty("name") && u.uint32(10).string(n.name), n.type != null && n.hasOwnProperty("type") && h.onnx.TypeProto.encode(n.type, u.uint32(18).fork()).ldelim(), n.docString != null && n.hasOwnProperty("docString") && u.uint32(26).string(n.docString), u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.ValueInfoProto(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    M.name = n.string();
                    break;
                  case 2:
                    M.type = h.onnx.TypeProto.decode(n, n.uint32());
                    break;
                  case 3:
                    M.docString = n.string();
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              if (typeof n != "object" || n === null)
                return "object expected";
              if (n.name != null && n.hasOwnProperty("name") && !_.isString(n.name))
                return "name: string expected";
              if (n.type != null && n.hasOwnProperty("type")) {
                var u = h.onnx.TypeProto.verify(n.type);
                if (u)
                  return "type." + u;
              }
              return n.docString != null && n.hasOwnProperty("docString") && !_.isString(n.docString) ? "docString: string expected" : null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.ValueInfoProto)
                return n;
              var u = new h.onnx.ValueInfoProto();
              if (n.name != null && (u.name = String(n.name)), n.type != null) {
                if (typeof n.type != "object")
                  throw TypeError(".onnx.ValueInfoProto.type: object expected");
                u.type = h.onnx.TypeProto.fromObject(n.type);
              }
              return n.docString != null && (u.docString = String(n.docString)), u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              return u.defaults && (p.name = "", p.type = null, p.docString = ""), n.name != null && n.hasOwnProperty("name") && (p.name = n.name), n.type != null && n.hasOwnProperty("type") && (p.type = h.onnx.TypeProto.toObject(n.type, u)), n.docString != null && n.hasOwnProperty("docString") && (p.docString = n.docString), p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r;
          }(), f.NodeProto = function() {
            function r(n) {
              if (this.input = [], this.output = [], this.attribute = [], n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.input = _.emptyArray, r.prototype.output = _.emptyArray, r.prototype.name = "", r.prototype.opType = "", r.prototype.domain = "", r.prototype.attribute = _.emptyArray, r.prototype.docString = "", r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              if (u || (u = g.create()), n.input != null && n.input.length)
                for (var p = 0; p < n.input.length; ++p)
                  u.uint32(10).string(n.input[p]);
              if (n.output != null && n.output.length)
                for (p = 0; p < n.output.length; ++p)
                  u.uint32(18).string(n.output[p]);
              if (n.name != null && n.hasOwnProperty("name") && u.uint32(26).string(n.name), n.opType != null && n.hasOwnProperty("opType") && u.uint32(34).string(n.opType), n.attribute != null && n.attribute.length)
                for (p = 0; p < n.attribute.length; ++p)
                  h.onnx.AttributeProto.encode(n.attribute[p], u.uint32(42).fork()).ldelim();
              return n.docString != null && n.hasOwnProperty("docString") && u.uint32(50).string(n.docString), n.domain != null && n.hasOwnProperty("domain") && u.uint32(58).string(n.domain), u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.NodeProto(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    M.input && M.input.length || (M.input = []), M.input.push(n.string());
                    break;
                  case 2:
                    M.output && M.output.length || (M.output = []), M.output.push(n.string());
                    break;
                  case 3:
                    M.name = n.string();
                    break;
                  case 4:
                    M.opType = n.string();
                    break;
                  case 7:
                    M.domain = n.string();
                    break;
                  case 5:
                    M.attribute && M.attribute.length || (M.attribute = []), M.attribute.push(h.onnx.AttributeProto.decode(n, n.uint32()));
                    break;
                  case 6:
                    M.docString = n.string();
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              if (typeof n != "object" || n === null)
                return "object expected";
              if (n.input != null && n.hasOwnProperty("input")) {
                if (!Array.isArray(n.input))
                  return "input: array expected";
                for (var u = 0; u < n.input.length; ++u)
                  if (!_.isString(n.input[u]))
                    return "input: string[] expected";
              }
              if (n.output != null && n.hasOwnProperty("output")) {
                if (!Array.isArray(n.output))
                  return "output: array expected";
                for (u = 0; u < n.output.length; ++u)
                  if (!_.isString(n.output[u]))
                    return "output: string[] expected";
              }
              if (n.name != null && n.hasOwnProperty("name") && !_.isString(n.name))
                return "name: string expected";
              if (n.opType != null && n.hasOwnProperty("opType") && !_.isString(n.opType))
                return "opType: string expected";
              if (n.domain != null && n.hasOwnProperty("domain") && !_.isString(n.domain))
                return "domain: string expected";
              if (n.attribute != null && n.hasOwnProperty("attribute")) {
                if (!Array.isArray(n.attribute))
                  return "attribute: array expected";
                for (u = 0; u < n.attribute.length; ++u) {
                  var p = h.onnx.AttributeProto.verify(n.attribute[u]);
                  if (p)
                    return "attribute." + p;
                }
              }
              return n.docString != null && n.hasOwnProperty("docString") && !_.isString(n.docString) ? "docString: string expected" : null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.NodeProto)
                return n;
              var u = new h.onnx.NodeProto();
              if (n.input) {
                if (!Array.isArray(n.input))
                  throw TypeError(".onnx.NodeProto.input: array expected");
                u.input = [];
                for (var p = 0; p < n.input.length; ++p)
                  u.input[p] = String(n.input[p]);
              }
              if (n.output) {
                if (!Array.isArray(n.output))
                  throw TypeError(".onnx.NodeProto.output: array expected");
                for (u.output = [], p = 0; p < n.output.length; ++p)
                  u.output[p] = String(n.output[p]);
              }
              if (n.name != null && (u.name = String(n.name)), n.opType != null && (u.opType = String(n.opType)), n.domain != null && (u.domain = String(n.domain)), n.attribute) {
                if (!Array.isArray(n.attribute))
                  throw TypeError(".onnx.NodeProto.attribute: array expected");
                for (u.attribute = [], p = 0; p < n.attribute.length; ++p) {
                  if (typeof n.attribute[p] != "object")
                    throw TypeError(".onnx.NodeProto.attribute: object expected");
                  u.attribute[p] = h.onnx.AttributeProto.fromObject(n.attribute[p]);
                }
              }
              return n.docString != null && (u.docString = String(n.docString)), u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              if ((u.arrays || u.defaults) && (p.input = [], p.output = [], p.attribute = []), u.defaults && (p.name = "", p.opType = "", p.docString = "", p.domain = ""), n.input && n.input.length) {
                p.input = [];
                for (var M = 0; M < n.input.length; ++M)
                  p.input[M] = n.input[M];
              }
              if (n.output && n.output.length)
                for (p.output = [], M = 0; M < n.output.length; ++M)
                  p.output[M] = n.output[M];
              if (n.name != null && n.hasOwnProperty("name") && (p.name = n.name), n.opType != null && n.hasOwnProperty("opType") && (p.opType = n.opType), n.attribute && n.attribute.length)
                for (p.attribute = [], M = 0; M < n.attribute.length; ++M)
                  p.attribute[M] = h.onnx.AttributeProto.toObject(n.attribute[M], u);
              return n.docString != null && n.hasOwnProperty("docString") && (p.docString = n.docString), n.domain != null && n.hasOwnProperty("domain") && (p.domain = n.domain), p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r;
          }(), f.ModelProto = function() {
            function r(n) {
              if (this.opsetImport = [], this.metadataProps = [], n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.irVersion = _.Long ? _.Long.fromBits(0, 0, false) : 0, r.prototype.opsetImport = _.emptyArray, r.prototype.producerName = "", r.prototype.producerVersion = "", r.prototype.domain = "", r.prototype.modelVersion = _.Long ? _.Long.fromBits(0, 0, false) : 0, r.prototype.docString = "", r.prototype.graph = null, r.prototype.metadataProps = _.emptyArray, r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              if (u || (u = g.create()), n.irVersion != null && n.hasOwnProperty("irVersion") && u.uint32(8).int64(n.irVersion), n.producerName != null && n.hasOwnProperty("producerName") && u.uint32(18).string(n.producerName), n.producerVersion != null && n.hasOwnProperty("producerVersion") && u.uint32(26).string(n.producerVersion), n.domain != null && n.hasOwnProperty("domain") && u.uint32(34).string(n.domain), n.modelVersion != null && n.hasOwnProperty("modelVersion") && u.uint32(40).int64(n.modelVersion), n.docString != null && n.hasOwnProperty("docString") && u.uint32(50).string(n.docString), n.graph != null && n.hasOwnProperty("graph") && h.onnx.GraphProto.encode(n.graph, u.uint32(58).fork()).ldelim(), n.opsetImport != null && n.opsetImport.length)
                for (var p = 0; p < n.opsetImport.length; ++p)
                  h.onnx.OperatorSetIdProto.encode(n.opsetImport[p], u.uint32(66).fork()).ldelim();
              if (n.metadataProps != null && n.metadataProps.length)
                for (p = 0; p < n.metadataProps.length; ++p)
                  h.onnx.StringStringEntryProto.encode(n.metadataProps[p], u.uint32(114).fork()).ldelim();
              return u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.ModelProto(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    M.irVersion = n.int64();
                    break;
                  case 8:
                    M.opsetImport && M.opsetImport.length || (M.opsetImport = []), M.opsetImport.push(h.onnx.OperatorSetIdProto.decode(n, n.uint32()));
                    break;
                  case 2:
                    M.producerName = n.string();
                    break;
                  case 3:
                    M.producerVersion = n.string();
                    break;
                  case 4:
                    M.domain = n.string();
                    break;
                  case 5:
                    M.modelVersion = n.int64();
                    break;
                  case 6:
                    M.docString = n.string();
                    break;
                  case 7:
                    M.graph = h.onnx.GraphProto.decode(n, n.uint32());
                    break;
                  case 14:
                    M.metadataProps && M.metadataProps.length || (M.metadataProps = []), M.metadataProps.push(h.onnx.StringStringEntryProto.decode(n, n.uint32()));
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              if (typeof n != "object" || n === null)
                return "object expected";
              if (n.irVersion != null && n.hasOwnProperty("irVersion") && !(_.isInteger(n.irVersion) || n.irVersion && _.isInteger(n.irVersion.low) && _.isInteger(n.irVersion.high)))
                return "irVersion: integer|Long expected";
              if (n.opsetImport != null && n.hasOwnProperty("opsetImport")) {
                if (!Array.isArray(n.opsetImport))
                  return "opsetImport: array expected";
                for (var u = 0; u < n.opsetImport.length; ++u)
                  if (p = h.onnx.OperatorSetIdProto.verify(n.opsetImport[u]))
                    return "opsetImport." + p;
              }
              if (n.producerName != null && n.hasOwnProperty("producerName") && !_.isString(n.producerName))
                return "producerName: string expected";
              if (n.producerVersion != null && n.hasOwnProperty("producerVersion") && !_.isString(n.producerVersion))
                return "producerVersion: string expected";
              if (n.domain != null && n.hasOwnProperty("domain") && !_.isString(n.domain))
                return "domain: string expected";
              if (n.modelVersion != null && n.hasOwnProperty("modelVersion") && !(_.isInteger(n.modelVersion) || n.modelVersion && _.isInteger(n.modelVersion.low) && _.isInteger(n.modelVersion.high)))
                return "modelVersion: integer|Long expected";
              if (n.docString != null && n.hasOwnProperty("docString") && !_.isString(n.docString))
                return "docString: string expected";
              if (n.graph != null && n.hasOwnProperty("graph") && (p = h.onnx.GraphProto.verify(n.graph)))
                return "graph." + p;
              if (n.metadataProps != null && n.hasOwnProperty("metadataProps")) {
                if (!Array.isArray(n.metadataProps))
                  return "metadataProps: array expected";
                for (u = 0; u < n.metadataProps.length; ++u) {
                  var p;
                  if (p = h.onnx.StringStringEntryProto.verify(n.metadataProps[u]))
                    return "metadataProps." + p;
                }
              }
              return null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.ModelProto)
                return n;
              var u = new h.onnx.ModelProto();
              if (n.irVersion != null && (_.Long ? (u.irVersion = _.Long.fromValue(n.irVersion)).unsigned = false : typeof n.irVersion == "string" ? u.irVersion = parseInt(n.irVersion, 10) : typeof n.irVersion == "number" ? u.irVersion = n.irVersion : typeof n.irVersion == "object" && (u.irVersion = new _.LongBits(n.irVersion.low >>> 0, n.irVersion.high >>> 0).toNumber())), n.opsetImport) {
                if (!Array.isArray(n.opsetImport))
                  throw TypeError(".onnx.ModelProto.opsetImport: array expected");
                u.opsetImport = [];
                for (var p = 0; p < n.opsetImport.length; ++p) {
                  if (typeof n.opsetImport[p] != "object")
                    throw TypeError(".onnx.ModelProto.opsetImport: object expected");
                  u.opsetImport[p] = h.onnx.OperatorSetIdProto.fromObject(n.opsetImport[p]);
                }
              }
              if (n.producerName != null && (u.producerName = String(n.producerName)), n.producerVersion != null && (u.producerVersion = String(n.producerVersion)), n.domain != null && (u.domain = String(n.domain)), n.modelVersion != null && (_.Long ? (u.modelVersion = _.Long.fromValue(n.modelVersion)).unsigned = false : typeof n.modelVersion == "string" ? u.modelVersion = parseInt(n.modelVersion, 10) : typeof n.modelVersion == "number" ? u.modelVersion = n.modelVersion : typeof n.modelVersion == "object" && (u.modelVersion = new _.LongBits(n.modelVersion.low >>> 0, n.modelVersion.high >>> 0).toNumber())), n.docString != null && (u.docString = String(n.docString)), n.graph != null) {
                if (typeof n.graph != "object")
                  throw TypeError(".onnx.ModelProto.graph: object expected");
                u.graph = h.onnx.GraphProto.fromObject(n.graph);
              }
              if (n.metadataProps) {
                if (!Array.isArray(n.metadataProps))
                  throw TypeError(".onnx.ModelProto.metadataProps: array expected");
                for (u.metadataProps = [], p = 0; p < n.metadataProps.length; ++p) {
                  if (typeof n.metadataProps[p] != "object")
                    throw TypeError(".onnx.ModelProto.metadataProps: object expected");
                  u.metadataProps[p] = h.onnx.StringStringEntryProto.fromObject(n.metadataProps[p]);
                }
              }
              return u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              if ((u.arrays || u.defaults) && (p.opsetImport = [], p.metadataProps = []), u.defaults) {
                if (_.Long) {
                  var M = new _.Long(0, 0, false);
                  p.irVersion = u.longs === String ? M.toString() : u.longs === Number ? M.toNumber() : M;
                } else
                  p.irVersion = u.longs === String ? "0" : 0;
                p.producerName = "", p.producerVersion = "", p.domain = "", _.Long ? (M = new _.Long(0, 0, false), p.modelVersion = u.longs === String ? M.toString() : u.longs === Number ? M.toNumber() : M) : p.modelVersion = u.longs === String ? "0" : 0, p.docString = "", p.graph = null;
              }
              if (n.irVersion != null && n.hasOwnProperty("irVersion") && (typeof n.irVersion == "number" ? p.irVersion = u.longs === String ? String(n.irVersion) : n.irVersion : p.irVersion = u.longs === String ? _.Long.prototype.toString.call(n.irVersion) : u.longs === Number ? new _.LongBits(n.irVersion.low >>> 0, n.irVersion.high >>> 0).toNumber() : n.irVersion), n.producerName != null && n.hasOwnProperty("producerName") && (p.producerName = n.producerName), n.producerVersion != null && n.hasOwnProperty("producerVersion") && (p.producerVersion = n.producerVersion), n.domain != null && n.hasOwnProperty("domain") && (p.domain = n.domain), n.modelVersion != null && n.hasOwnProperty("modelVersion") && (typeof n.modelVersion == "number" ? p.modelVersion = u.longs === String ? String(n.modelVersion) : n.modelVersion : p.modelVersion = u.longs === String ? _.Long.prototype.toString.call(n.modelVersion) : u.longs === Number ? new _.LongBits(n.modelVersion.low >>> 0, n.modelVersion.high >>> 0).toNumber() : n.modelVersion), n.docString != null && n.hasOwnProperty("docString") && (p.docString = n.docString), n.graph != null && n.hasOwnProperty("graph") && (p.graph = h.onnx.GraphProto.toObject(n.graph, u)), n.opsetImport && n.opsetImport.length) {
                p.opsetImport = [];
                for (var P = 0; P < n.opsetImport.length; ++P)
                  p.opsetImport[P] = h.onnx.OperatorSetIdProto.toObject(n.opsetImport[P], u);
              }
              if (n.metadataProps && n.metadataProps.length)
                for (p.metadataProps = [], P = 0; P < n.metadataProps.length; ++P)
                  p.metadataProps[P] = h.onnx.StringStringEntryProto.toObject(n.metadataProps[P], u);
              return p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r;
          }(), f.StringStringEntryProto = function() {
            function r(n) {
              if (n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.key = "", r.prototype.value = "", r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              return u || (u = g.create()), n.key != null && n.hasOwnProperty("key") && u.uint32(10).string(n.key), n.value != null && n.hasOwnProperty("value") && u.uint32(18).string(n.value), u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.StringStringEntryProto(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    M.key = n.string();
                    break;
                  case 2:
                    M.value = n.string();
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              return typeof n != "object" || n === null ? "object expected" : n.key != null && n.hasOwnProperty("key") && !_.isString(n.key) ? "key: string expected" : n.value != null && n.hasOwnProperty("value") && !_.isString(n.value) ? "value: string expected" : null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.StringStringEntryProto)
                return n;
              var u = new h.onnx.StringStringEntryProto();
              return n.key != null && (u.key = String(n.key)), n.value != null && (u.value = String(n.value)), u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              return u.defaults && (p.key = "", p.value = ""), n.key != null && n.hasOwnProperty("key") && (p.key = n.key), n.value != null && n.hasOwnProperty("value") && (p.value = n.value), p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r;
          }(), f.TensorAnnotation = function() {
            function r(n) {
              if (this.quantParameterTensorNames = [], n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.tensorName = "", r.prototype.quantParameterTensorNames = _.emptyArray, r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              if (u || (u = g.create()), n.tensorName != null && n.hasOwnProperty("tensorName") && u.uint32(10).string(n.tensorName), n.quantParameterTensorNames != null && n.quantParameterTensorNames.length)
                for (var p = 0; p < n.quantParameterTensorNames.length; ++p)
                  h.onnx.StringStringEntryProto.encode(n.quantParameterTensorNames[p], u.uint32(18).fork()).ldelim();
              return u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.TensorAnnotation(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    M.tensorName = n.string();
                    break;
                  case 2:
                    M.quantParameterTensorNames && M.quantParameterTensorNames.length || (M.quantParameterTensorNames = []), M.quantParameterTensorNames.push(h.onnx.StringStringEntryProto.decode(n, n.uint32()));
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              if (typeof n != "object" || n === null)
                return "object expected";
              if (n.tensorName != null && n.hasOwnProperty("tensorName") && !_.isString(n.tensorName))
                return "tensorName: string expected";
              if (n.quantParameterTensorNames != null && n.hasOwnProperty("quantParameterTensorNames")) {
                if (!Array.isArray(n.quantParameterTensorNames))
                  return "quantParameterTensorNames: array expected";
                for (var u = 0; u < n.quantParameterTensorNames.length; ++u) {
                  var p = h.onnx.StringStringEntryProto.verify(n.quantParameterTensorNames[u]);
                  if (p)
                    return "quantParameterTensorNames." + p;
                }
              }
              return null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.TensorAnnotation)
                return n;
              var u = new h.onnx.TensorAnnotation();
              if (n.tensorName != null && (u.tensorName = String(n.tensorName)), n.quantParameterTensorNames) {
                if (!Array.isArray(n.quantParameterTensorNames))
                  throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: array expected");
                u.quantParameterTensorNames = [];
                for (var p = 0; p < n.quantParameterTensorNames.length; ++p) {
                  if (typeof n.quantParameterTensorNames[p] != "object")
                    throw TypeError(".onnx.TensorAnnotation.quantParameterTensorNames: object expected");
                  u.quantParameterTensorNames[p] = h.onnx.StringStringEntryProto.fromObject(n.quantParameterTensorNames[p]);
                }
              }
              return u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              if ((u.arrays || u.defaults) && (p.quantParameterTensorNames = []), u.defaults && (p.tensorName = ""), n.tensorName != null && n.hasOwnProperty("tensorName") && (p.tensorName = n.tensorName), n.quantParameterTensorNames && n.quantParameterTensorNames.length) {
                p.quantParameterTensorNames = [];
                for (var M = 0; M < n.quantParameterTensorNames.length; ++M)
                  p.quantParameterTensorNames[M] = h.onnx.StringStringEntryProto.toObject(n.quantParameterTensorNames[M], u);
              }
              return p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r;
          }(), f.GraphProto = function() {
            function r(n) {
              if (this.node = [], this.initializer = [], this.input = [], this.output = [], this.valueInfo = [], this.quantizationAnnotation = [], n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.node = _.emptyArray, r.prototype.name = "", r.prototype.initializer = _.emptyArray, r.prototype.docString = "", r.prototype.input = _.emptyArray, r.prototype.output = _.emptyArray, r.prototype.valueInfo = _.emptyArray, r.prototype.quantizationAnnotation = _.emptyArray, r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              if (u || (u = g.create()), n.node != null && n.node.length)
                for (var p = 0; p < n.node.length; ++p)
                  h.onnx.NodeProto.encode(n.node[p], u.uint32(10).fork()).ldelim();
              if (n.name != null && n.hasOwnProperty("name") && u.uint32(18).string(n.name), n.initializer != null && n.initializer.length)
                for (p = 0; p < n.initializer.length; ++p)
                  h.onnx.TensorProto.encode(n.initializer[p], u.uint32(42).fork()).ldelim();
              if (n.docString != null && n.hasOwnProperty("docString") && u.uint32(82).string(n.docString), n.input != null && n.input.length)
                for (p = 0; p < n.input.length; ++p)
                  h.onnx.ValueInfoProto.encode(n.input[p], u.uint32(90).fork()).ldelim();
              if (n.output != null && n.output.length)
                for (p = 0; p < n.output.length; ++p)
                  h.onnx.ValueInfoProto.encode(n.output[p], u.uint32(98).fork()).ldelim();
              if (n.valueInfo != null && n.valueInfo.length)
                for (p = 0; p < n.valueInfo.length; ++p)
                  h.onnx.ValueInfoProto.encode(n.valueInfo[p], u.uint32(106).fork()).ldelim();
              if (n.quantizationAnnotation != null && n.quantizationAnnotation.length)
                for (p = 0; p < n.quantizationAnnotation.length; ++p)
                  h.onnx.TensorAnnotation.encode(n.quantizationAnnotation[p], u.uint32(114).fork()).ldelim();
              return u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.GraphProto(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    M.node && M.node.length || (M.node = []), M.node.push(h.onnx.NodeProto.decode(n, n.uint32()));
                    break;
                  case 2:
                    M.name = n.string();
                    break;
                  case 5:
                    M.initializer && M.initializer.length || (M.initializer = []), M.initializer.push(h.onnx.TensorProto.decode(n, n.uint32()));
                    break;
                  case 10:
                    M.docString = n.string();
                    break;
                  case 11:
                    M.input && M.input.length || (M.input = []), M.input.push(h.onnx.ValueInfoProto.decode(n, n.uint32()));
                    break;
                  case 12:
                    M.output && M.output.length || (M.output = []), M.output.push(h.onnx.ValueInfoProto.decode(n, n.uint32()));
                    break;
                  case 13:
                    M.valueInfo && M.valueInfo.length || (M.valueInfo = []), M.valueInfo.push(h.onnx.ValueInfoProto.decode(n, n.uint32()));
                    break;
                  case 14:
                    M.quantizationAnnotation && M.quantizationAnnotation.length || (M.quantizationAnnotation = []), M.quantizationAnnotation.push(h.onnx.TensorAnnotation.decode(n, n.uint32()));
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              if (typeof n != "object" || n === null)
                return "object expected";
              if (n.node != null && n.hasOwnProperty("node")) {
                if (!Array.isArray(n.node))
                  return "node: array expected";
                for (var u = 0; u < n.node.length; ++u)
                  if (p = h.onnx.NodeProto.verify(n.node[u]))
                    return "node." + p;
              }
              if (n.name != null && n.hasOwnProperty("name") && !_.isString(n.name))
                return "name: string expected";
              if (n.initializer != null && n.hasOwnProperty("initializer")) {
                if (!Array.isArray(n.initializer))
                  return "initializer: array expected";
                for (u = 0; u < n.initializer.length; ++u)
                  if (p = h.onnx.TensorProto.verify(n.initializer[u]))
                    return "initializer." + p;
              }
              if (n.docString != null && n.hasOwnProperty("docString") && !_.isString(n.docString))
                return "docString: string expected";
              if (n.input != null && n.hasOwnProperty("input")) {
                if (!Array.isArray(n.input))
                  return "input: array expected";
                for (u = 0; u < n.input.length; ++u)
                  if (p = h.onnx.ValueInfoProto.verify(n.input[u]))
                    return "input." + p;
              }
              if (n.output != null && n.hasOwnProperty("output")) {
                if (!Array.isArray(n.output))
                  return "output: array expected";
                for (u = 0; u < n.output.length; ++u)
                  if (p = h.onnx.ValueInfoProto.verify(n.output[u]))
                    return "output." + p;
              }
              if (n.valueInfo != null && n.hasOwnProperty("valueInfo")) {
                if (!Array.isArray(n.valueInfo))
                  return "valueInfo: array expected";
                for (u = 0; u < n.valueInfo.length; ++u)
                  if (p = h.onnx.ValueInfoProto.verify(n.valueInfo[u]))
                    return "valueInfo." + p;
              }
              if (n.quantizationAnnotation != null && n.hasOwnProperty("quantizationAnnotation")) {
                if (!Array.isArray(n.quantizationAnnotation))
                  return "quantizationAnnotation: array expected";
                for (u = 0; u < n.quantizationAnnotation.length; ++u) {
                  var p;
                  if (p = h.onnx.TensorAnnotation.verify(n.quantizationAnnotation[u]))
                    return "quantizationAnnotation." + p;
                }
              }
              return null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.GraphProto)
                return n;
              var u = new h.onnx.GraphProto();
              if (n.node) {
                if (!Array.isArray(n.node))
                  throw TypeError(".onnx.GraphProto.node: array expected");
                u.node = [];
                for (var p = 0; p < n.node.length; ++p) {
                  if (typeof n.node[p] != "object")
                    throw TypeError(".onnx.GraphProto.node: object expected");
                  u.node[p] = h.onnx.NodeProto.fromObject(n.node[p]);
                }
              }
              if (n.name != null && (u.name = String(n.name)), n.initializer) {
                if (!Array.isArray(n.initializer))
                  throw TypeError(".onnx.GraphProto.initializer: array expected");
                for (u.initializer = [], p = 0; p < n.initializer.length; ++p) {
                  if (typeof n.initializer[p] != "object")
                    throw TypeError(".onnx.GraphProto.initializer: object expected");
                  u.initializer[p] = h.onnx.TensorProto.fromObject(n.initializer[p]);
                }
              }
              if (n.docString != null && (u.docString = String(n.docString)), n.input) {
                if (!Array.isArray(n.input))
                  throw TypeError(".onnx.GraphProto.input: array expected");
                for (u.input = [], p = 0; p < n.input.length; ++p) {
                  if (typeof n.input[p] != "object")
                    throw TypeError(".onnx.GraphProto.input: object expected");
                  u.input[p] = h.onnx.ValueInfoProto.fromObject(n.input[p]);
                }
              }
              if (n.output) {
                if (!Array.isArray(n.output))
                  throw TypeError(".onnx.GraphProto.output: array expected");
                for (u.output = [], p = 0; p < n.output.length; ++p) {
                  if (typeof n.output[p] != "object")
                    throw TypeError(".onnx.GraphProto.output: object expected");
                  u.output[p] = h.onnx.ValueInfoProto.fromObject(n.output[p]);
                }
              }
              if (n.valueInfo) {
                if (!Array.isArray(n.valueInfo))
                  throw TypeError(".onnx.GraphProto.valueInfo: array expected");
                for (u.valueInfo = [], p = 0; p < n.valueInfo.length; ++p) {
                  if (typeof n.valueInfo[p] != "object")
                    throw TypeError(".onnx.GraphProto.valueInfo: object expected");
                  u.valueInfo[p] = h.onnx.ValueInfoProto.fromObject(n.valueInfo[p]);
                }
              }
              if (n.quantizationAnnotation) {
                if (!Array.isArray(n.quantizationAnnotation))
                  throw TypeError(".onnx.GraphProto.quantizationAnnotation: array expected");
                for (u.quantizationAnnotation = [], p = 0; p < n.quantizationAnnotation.length; ++p) {
                  if (typeof n.quantizationAnnotation[p] != "object")
                    throw TypeError(".onnx.GraphProto.quantizationAnnotation: object expected");
                  u.quantizationAnnotation[p] = h.onnx.TensorAnnotation.fromObject(n.quantizationAnnotation[p]);
                }
              }
              return u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              if ((u.arrays || u.defaults) && (p.node = [], p.initializer = [], p.input = [], p.output = [], p.valueInfo = [], p.quantizationAnnotation = []), u.defaults && (p.name = "", p.docString = ""), n.node && n.node.length) {
                p.node = [];
                for (var M = 0; M < n.node.length; ++M)
                  p.node[M] = h.onnx.NodeProto.toObject(n.node[M], u);
              }
              if (n.name != null && n.hasOwnProperty("name") && (p.name = n.name), n.initializer && n.initializer.length)
                for (p.initializer = [], M = 0; M < n.initializer.length; ++M)
                  p.initializer[M] = h.onnx.TensorProto.toObject(n.initializer[M], u);
              if (n.docString != null && n.hasOwnProperty("docString") && (p.docString = n.docString), n.input && n.input.length)
                for (p.input = [], M = 0; M < n.input.length; ++M)
                  p.input[M] = h.onnx.ValueInfoProto.toObject(n.input[M], u);
              if (n.output && n.output.length)
                for (p.output = [], M = 0; M < n.output.length; ++M)
                  p.output[M] = h.onnx.ValueInfoProto.toObject(n.output[M], u);
              if (n.valueInfo && n.valueInfo.length)
                for (p.valueInfo = [], M = 0; M < n.valueInfo.length; ++M)
                  p.valueInfo[M] = h.onnx.ValueInfoProto.toObject(n.valueInfo[M], u);
              if (n.quantizationAnnotation && n.quantizationAnnotation.length)
                for (p.quantizationAnnotation = [], M = 0; M < n.quantizationAnnotation.length; ++M)
                  p.quantizationAnnotation[M] = h.onnx.TensorAnnotation.toObject(n.quantizationAnnotation[M], u);
              return p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r;
          }(), f.TensorProto = function() {
            function r(n) {
              if (this.dims = [], this.floatData = [], this.int32Data = [], this.stringData = [], this.int64Data = [], this.externalData = [], this.doubleData = [], this.uint64Data = [], n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.dims = _.emptyArray, r.prototype.dataType = 0, r.prototype.segment = null, r.prototype.floatData = _.emptyArray, r.prototype.int32Data = _.emptyArray, r.prototype.stringData = _.emptyArray, r.prototype.int64Data = _.emptyArray, r.prototype.name = "", r.prototype.docString = "", r.prototype.rawData = _.newBuffer([]), r.prototype.externalData = _.emptyArray, r.prototype.dataLocation = 0, r.prototype.doubleData = _.emptyArray, r.prototype.uint64Data = _.emptyArray, r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              if (u || (u = g.create()), n.dims != null && n.dims.length) {
                u.uint32(10).fork();
                for (var p = 0; p < n.dims.length; ++p)
                  u.int64(n.dims[p]);
                u.ldelim();
              }
              if (n.dataType != null && n.hasOwnProperty("dataType") && u.uint32(16).int32(n.dataType), n.segment != null && n.hasOwnProperty("segment") && h.onnx.TensorProto.Segment.encode(n.segment, u.uint32(26).fork()).ldelim(), n.floatData != null && n.floatData.length) {
                for (u.uint32(34).fork(), p = 0; p < n.floatData.length; ++p)
                  u.float(n.floatData[p]);
                u.ldelim();
              }
              if (n.int32Data != null && n.int32Data.length) {
                for (u.uint32(42).fork(), p = 0; p < n.int32Data.length; ++p)
                  u.int32(n.int32Data[p]);
                u.ldelim();
              }
              if (n.stringData != null && n.stringData.length)
                for (p = 0; p < n.stringData.length; ++p)
                  u.uint32(50).bytes(n.stringData[p]);
              if (n.int64Data != null && n.int64Data.length) {
                for (u.uint32(58).fork(), p = 0; p < n.int64Data.length; ++p)
                  u.int64(n.int64Data[p]);
                u.ldelim();
              }
              if (n.name != null && n.hasOwnProperty("name") && u.uint32(66).string(n.name), n.rawData != null && n.hasOwnProperty("rawData") && u.uint32(74).bytes(n.rawData), n.doubleData != null && n.doubleData.length) {
                for (u.uint32(82).fork(), p = 0; p < n.doubleData.length; ++p)
                  u.double(n.doubleData[p]);
                u.ldelim();
              }
              if (n.uint64Data != null && n.uint64Data.length) {
                for (u.uint32(90).fork(), p = 0; p < n.uint64Data.length; ++p)
                  u.uint64(n.uint64Data[p]);
                u.ldelim();
              }
              if (n.docString != null && n.hasOwnProperty("docString") && u.uint32(98).string(n.docString), n.externalData != null && n.externalData.length)
                for (p = 0; p < n.externalData.length; ++p)
                  h.onnx.StringStringEntryProto.encode(n.externalData[p], u.uint32(106).fork()).ldelim();
              return n.dataLocation != null && n.hasOwnProperty("dataLocation") && u.uint32(112).int32(n.dataLocation), u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.TensorProto(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    if (M.dims && M.dims.length || (M.dims = []), (7 & P) == 2)
                      for (var E = n.uint32() + n.pos; n.pos < E; )
                        M.dims.push(n.int64());
                    else
                      M.dims.push(n.int64());
                    break;
                  case 2:
                    M.dataType = n.int32();
                    break;
                  case 3:
                    M.segment = h.onnx.TensorProto.Segment.decode(n, n.uint32());
                    break;
                  case 4:
                    if (M.floatData && M.floatData.length || (M.floatData = []), (7 & P) == 2)
                      for (E = n.uint32() + n.pos; n.pos < E; )
                        M.floatData.push(n.float());
                    else
                      M.floatData.push(n.float());
                    break;
                  case 5:
                    if (M.int32Data && M.int32Data.length || (M.int32Data = []), (7 & P) == 2)
                      for (E = n.uint32() + n.pos; n.pos < E; )
                        M.int32Data.push(n.int32());
                    else
                      M.int32Data.push(n.int32());
                    break;
                  case 6:
                    M.stringData && M.stringData.length || (M.stringData = []), M.stringData.push(n.bytes());
                    break;
                  case 7:
                    if (M.int64Data && M.int64Data.length || (M.int64Data = []), (7 & P) == 2)
                      for (E = n.uint32() + n.pos; n.pos < E; )
                        M.int64Data.push(n.int64());
                    else
                      M.int64Data.push(n.int64());
                    break;
                  case 8:
                    M.name = n.string();
                    break;
                  case 12:
                    M.docString = n.string();
                    break;
                  case 9:
                    M.rawData = n.bytes();
                    break;
                  case 13:
                    M.externalData && M.externalData.length || (M.externalData = []), M.externalData.push(h.onnx.StringStringEntryProto.decode(n, n.uint32()));
                    break;
                  case 14:
                    M.dataLocation = n.int32();
                    break;
                  case 10:
                    if (M.doubleData && M.doubleData.length || (M.doubleData = []), (7 & P) == 2)
                      for (E = n.uint32() + n.pos; n.pos < E; )
                        M.doubleData.push(n.double());
                    else
                      M.doubleData.push(n.double());
                    break;
                  case 11:
                    if (M.uint64Data && M.uint64Data.length || (M.uint64Data = []), (7 & P) == 2)
                      for (E = n.uint32() + n.pos; n.pos < E; )
                        M.uint64Data.push(n.uint64());
                    else
                      M.uint64Data.push(n.uint64());
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              if (typeof n != "object" || n === null)
                return "object expected";
              if (n.dims != null && n.hasOwnProperty("dims")) {
                if (!Array.isArray(n.dims))
                  return "dims: array expected";
                for (var u = 0; u < n.dims.length; ++u)
                  if (!(_.isInteger(n.dims[u]) || n.dims[u] && _.isInteger(n.dims[u].low) && _.isInteger(n.dims[u].high)))
                    return "dims: integer|Long[] expected";
              }
              if (n.dataType != null && n.hasOwnProperty("dataType") && !_.isInteger(n.dataType))
                return "dataType: integer expected";
              if (n.segment != null && n.hasOwnProperty("segment") && (p = h.onnx.TensorProto.Segment.verify(n.segment)))
                return "segment." + p;
              if (n.floatData != null && n.hasOwnProperty("floatData")) {
                if (!Array.isArray(n.floatData))
                  return "floatData: array expected";
                for (u = 0; u < n.floatData.length; ++u)
                  if (typeof n.floatData[u] != "number")
                    return "floatData: number[] expected";
              }
              if (n.int32Data != null && n.hasOwnProperty("int32Data")) {
                if (!Array.isArray(n.int32Data))
                  return "int32Data: array expected";
                for (u = 0; u < n.int32Data.length; ++u)
                  if (!_.isInteger(n.int32Data[u]))
                    return "int32Data: integer[] expected";
              }
              if (n.stringData != null && n.hasOwnProperty("stringData")) {
                if (!Array.isArray(n.stringData))
                  return "stringData: array expected";
                for (u = 0; u < n.stringData.length; ++u)
                  if (!(n.stringData[u] && typeof n.stringData[u].length == "number" || _.isString(n.stringData[u])))
                    return "stringData: buffer[] expected";
              }
              if (n.int64Data != null && n.hasOwnProperty("int64Data")) {
                if (!Array.isArray(n.int64Data))
                  return "int64Data: array expected";
                for (u = 0; u < n.int64Data.length; ++u)
                  if (!(_.isInteger(n.int64Data[u]) || n.int64Data[u] && _.isInteger(n.int64Data[u].low) && _.isInteger(n.int64Data[u].high)))
                    return "int64Data: integer|Long[] expected";
              }
              if (n.name != null && n.hasOwnProperty("name") && !_.isString(n.name))
                return "name: string expected";
              if (n.docString != null && n.hasOwnProperty("docString") && !_.isString(n.docString))
                return "docString: string expected";
              if (n.rawData != null && n.hasOwnProperty("rawData") && !(n.rawData && typeof n.rawData.length == "number" || _.isString(n.rawData)))
                return "rawData: buffer expected";
              if (n.externalData != null && n.hasOwnProperty("externalData")) {
                if (!Array.isArray(n.externalData))
                  return "externalData: array expected";
                for (u = 0; u < n.externalData.length; ++u) {
                  var p;
                  if (p = h.onnx.StringStringEntryProto.verify(n.externalData[u]))
                    return "externalData." + p;
                }
              }
              if (n.dataLocation != null && n.hasOwnProperty("dataLocation"))
                switch (n.dataLocation) {
                  default:
                    return "dataLocation: enum value expected";
                  case 0:
                  case 1:
                }
              if (n.doubleData != null && n.hasOwnProperty("doubleData")) {
                if (!Array.isArray(n.doubleData))
                  return "doubleData: array expected";
                for (u = 0; u < n.doubleData.length; ++u)
                  if (typeof n.doubleData[u] != "number")
                    return "doubleData: number[] expected";
              }
              if (n.uint64Data != null && n.hasOwnProperty("uint64Data")) {
                if (!Array.isArray(n.uint64Data))
                  return "uint64Data: array expected";
                for (u = 0; u < n.uint64Data.length; ++u)
                  if (!(_.isInteger(n.uint64Data[u]) || n.uint64Data[u] && _.isInteger(n.uint64Data[u].low) && _.isInteger(n.uint64Data[u].high)))
                    return "uint64Data: integer|Long[] expected";
              }
              return null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.TensorProto)
                return n;
              var u = new h.onnx.TensorProto();
              if (n.dims) {
                if (!Array.isArray(n.dims))
                  throw TypeError(".onnx.TensorProto.dims: array expected");
                u.dims = [];
                for (var p = 0; p < n.dims.length; ++p)
                  _.Long ? (u.dims[p] = _.Long.fromValue(n.dims[p])).unsigned = false : typeof n.dims[p] == "string" ? u.dims[p] = parseInt(n.dims[p], 10) : typeof n.dims[p] == "number" ? u.dims[p] = n.dims[p] : typeof n.dims[p] == "object" && (u.dims[p] = new _.LongBits(n.dims[p].low >>> 0, n.dims[p].high >>> 0).toNumber());
              }
              if (n.dataType != null && (u.dataType = 0 | n.dataType), n.segment != null) {
                if (typeof n.segment != "object")
                  throw TypeError(".onnx.TensorProto.segment: object expected");
                u.segment = h.onnx.TensorProto.Segment.fromObject(n.segment);
              }
              if (n.floatData) {
                if (!Array.isArray(n.floatData))
                  throw TypeError(".onnx.TensorProto.floatData: array expected");
                for (u.floatData = [], p = 0; p < n.floatData.length; ++p)
                  u.floatData[p] = Number(n.floatData[p]);
              }
              if (n.int32Data) {
                if (!Array.isArray(n.int32Data))
                  throw TypeError(".onnx.TensorProto.int32Data: array expected");
                for (u.int32Data = [], p = 0; p < n.int32Data.length; ++p)
                  u.int32Data[p] = 0 | n.int32Data[p];
              }
              if (n.stringData) {
                if (!Array.isArray(n.stringData))
                  throw TypeError(".onnx.TensorProto.stringData: array expected");
                for (u.stringData = [], p = 0; p < n.stringData.length; ++p)
                  typeof n.stringData[p] == "string" ? _.base64.decode(n.stringData[p], u.stringData[p] = _.newBuffer(_.base64.length(n.stringData[p])), 0) : n.stringData[p].length && (u.stringData[p] = n.stringData[p]);
              }
              if (n.int64Data) {
                if (!Array.isArray(n.int64Data))
                  throw TypeError(".onnx.TensorProto.int64Data: array expected");
                for (u.int64Data = [], p = 0; p < n.int64Data.length; ++p)
                  _.Long ? (u.int64Data[p] = _.Long.fromValue(n.int64Data[p])).unsigned = false : typeof n.int64Data[p] == "string" ? u.int64Data[p] = parseInt(n.int64Data[p], 10) : typeof n.int64Data[p] == "number" ? u.int64Data[p] = n.int64Data[p] : typeof n.int64Data[p] == "object" && (u.int64Data[p] = new _.LongBits(n.int64Data[p].low >>> 0, n.int64Data[p].high >>> 0).toNumber());
              }
              if (n.name != null && (u.name = String(n.name)), n.docString != null && (u.docString = String(n.docString)), n.rawData != null && (typeof n.rawData == "string" ? _.base64.decode(n.rawData, u.rawData = _.newBuffer(_.base64.length(n.rawData)), 0) : n.rawData.length && (u.rawData = n.rawData)), n.externalData) {
                if (!Array.isArray(n.externalData))
                  throw TypeError(".onnx.TensorProto.externalData: array expected");
                for (u.externalData = [], p = 0; p < n.externalData.length; ++p) {
                  if (typeof n.externalData[p] != "object")
                    throw TypeError(".onnx.TensorProto.externalData: object expected");
                  u.externalData[p] = h.onnx.StringStringEntryProto.fromObject(n.externalData[p]);
                }
              }
              switch (n.dataLocation) {
                case "DEFAULT":
                case 0:
                  u.dataLocation = 0;
                  break;
                case "EXTERNAL":
                case 1:
                  u.dataLocation = 1;
              }
              if (n.doubleData) {
                if (!Array.isArray(n.doubleData))
                  throw TypeError(".onnx.TensorProto.doubleData: array expected");
                for (u.doubleData = [], p = 0; p < n.doubleData.length; ++p)
                  u.doubleData[p] = Number(n.doubleData[p]);
              }
              if (n.uint64Data) {
                if (!Array.isArray(n.uint64Data))
                  throw TypeError(".onnx.TensorProto.uint64Data: array expected");
                for (u.uint64Data = [], p = 0; p < n.uint64Data.length; ++p)
                  _.Long ? (u.uint64Data[p] = _.Long.fromValue(n.uint64Data[p])).unsigned = true : typeof n.uint64Data[p] == "string" ? u.uint64Data[p] = parseInt(n.uint64Data[p], 10) : typeof n.uint64Data[p] == "number" ? u.uint64Data[p] = n.uint64Data[p] : typeof n.uint64Data[p] == "object" && (u.uint64Data[p] = new _.LongBits(n.uint64Data[p].low >>> 0, n.uint64Data[p].high >>> 0).toNumber(true));
              }
              return u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              if ((u.arrays || u.defaults) && (p.dims = [], p.floatData = [], p.int32Data = [], p.stringData = [], p.int64Data = [], p.doubleData = [], p.uint64Data = [], p.externalData = []), u.defaults && (p.dataType = 0, p.segment = null, p.name = "", u.bytes === String ? p.rawData = "" : (p.rawData = [], u.bytes !== Array && (p.rawData = _.newBuffer(p.rawData))), p.docString = "", p.dataLocation = u.enums === String ? "DEFAULT" : 0), n.dims && n.dims.length) {
                p.dims = [];
                for (var M = 0; M < n.dims.length; ++M)
                  typeof n.dims[M] == "number" ? p.dims[M] = u.longs === String ? String(n.dims[M]) : n.dims[M] : p.dims[M] = u.longs === String ? _.Long.prototype.toString.call(n.dims[M]) : u.longs === Number ? new _.LongBits(n.dims[M].low >>> 0, n.dims[M].high >>> 0).toNumber() : n.dims[M];
              }
              if (n.dataType != null && n.hasOwnProperty("dataType") && (p.dataType = n.dataType), n.segment != null && n.hasOwnProperty("segment") && (p.segment = h.onnx.TensorProto.Segment.toObject(n.segment, u)), n.floatData && n.floatData.length)
                for (p.floatData = [], M = 0; M < n.floatData.length; ++M)
                  p.floatData[M] = u.json && !isFinite(n.floatData[M]) ? String(n.floatData[M]) : n.floatData[M];
              if (n.int32Data && n.int32Data.length)
                for (p.int32Data = [], M = 0; M < n.int32Data.length; ++M)
                  p.int32Data[M] = n.int32Data[M];
              if (n.stringData && n.stringData.length)
                for (p.stringData = [], M = 0; M < n.stringData.length; ++M)
                  p.stringData[M] = u.bytes === String ? _.base64.encode(n.stringData[M], 0, n.stringData[M].length) : u.bytes === Array ? Array.prototype.slice.call(n.stringData[M]) : n.stringData[M];
              if (n.int64Data && n.int64Data.length)
                for (p.int64Data = [], M = 0; M < n.int64Data.length; ++M)
                  typeof n.int64Data[M] == "number" ? p.int64Data[M] = u.longs === String ? String(n.int64Data[M]) : n.int64Data[M] : p.int64Data[M] = u.longs === String ? _.Long.prototype.toString.call(n.int64Data[M]) : u.longs === Number ? new _.LongBits(n.int64Data[M].low >>> 0, n.int64Data[M].high >>> 0).toNumber() : n.int64Data[M];
              if (n.name != null && n.hasOwnProperty("name") && (p.name = n.name), n.rawData != null && n.hasOwnProperty("rawData") && (p.rawData = u.bytes === String ? _.base64.encode(n.rawData, 0, n.rawData.length) : u.bytes === Array ? Array.prototype.slice.call(n.rawData) : n.rawData), n.doubleData && n.doubleData.length)
                for (p.doubleData = [], M = 0; M < n.doubleData.length; ++M)
                  p.doubleData[M] = u.json && !isFinite(n.doubleData[M]) ? String(n.doubleData[M]) : n.doubleData[M];
              if (n.uint64Data && n.uint64Data.length)
                for (p.uint64Data = [], M = 0; M < n.uint64Data.length; ++M)
                  typeof n.uint64Data[M] == "number" ? p.uint64Data[M] = u.longs === String ? String(n.uint64Data[M]) : n.uint64Data[M] : p.uint64Data[M] = u.longs === String ? _.Long.prototype.toString.call(n.uint64Data[M]) : u.longs === Number ? new _.LongBits(n.uint64Data[M].low >>> 0, n.uint64Data[M].high >>> 0).toNumber(true) : n.uint64Data[M];
              if (n.docString != null && n.hasOwnProperty("docString") && (p.docString = n.docString), n.externalData && n.externalData.length)
                for (p.externalData = [], M = 0; M < n.externalData.length; ++M)
                  p.externalData[M] = h.onnx.StringStringEntryProto.toObject(n.externalData[M], u);
              return n.dataLocation != null && n.hasOwnProperty("dataLocation") && (p.dataLocation = u.enums === String ? h.onnx.TensorProto.DataLocation[n.dataLocation] : n.dataLocation), p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r.DataType = function() {
              var n = {}, u = Object.create(n);
              return u[n[0] = "UNDEFINED"] = 0, u[n[1] = "FLOAT"] = 1, u[n[2] = "UINT8"] = 2, u[n[3] = "INT8"] = 3, u[n[4] = "UINT16"] = 4, u[n[5] = "INT16"] = 5, u[n[6] = "INT32"] = 6, u[n[7] = "INT64"] = 7, u[n[8] = "STRING"] = 8, u[n[9] = "BOOL"] = 9, u[n[10] = "FLOAT16"] = 10, u[n[11] = "DOUBLE"] = 11, u[n[12] = "UINT32"] = 12, u[n[13] = "UINT64"] = 13, u[n[14] = "COMPLEX64"] = 14, u[n[15] = "COMPLEX128"] = 15, u[n[16] = "BFLOAT16"] = 16, u;
            }(), r.Segment = function() {
              function n(u) {
                if (u)
                  for (var p = Object.keys(u), M = 0; M < p.length; ++M)
                    u[p[M]] != null && (this[p[M]] = u[p[M]]);
              }
              return n.prototype.begin = _.Long ? _.Long.fromBits(0, 0, false) : 0, n.prototype.end = _.Long ? _.Long.fromBits(0, 0, false) : 0, n.create = function(u) {
                return new n(u);
              }, n.encode = function(u, p) {
                return p || (p = g.create()), u.begin != null && u.hasOwnProperty("begin") && p.uint32(8).int64(u.begin), u.end != null && u.hasOwnProperty("end") && p.uint32(16).int64(u.end), p;
              }, n.encodeDelimited = function(u, p) {
                return this.encode(u, p).ldelim();
              }, n.decode = function(u, p) {
                u instanceof w || (u = w.create(u));
                for (var M = p === void 0 ? u.len : u.pos + p, P = new h.onnx.TensorProto.Segment(); u.pos < M; ) {
                  var E = u.uint32();
                  switch (E >>> 3) {
                    case 1:
                      P.begin = u.int64();
                      break;
                    case 2:
                      P.end = u.int64();
                      break;
                    default:
                      u.skipType(7 & E);
                  }
                }
                return P;
              }, n.decodeDelimited = function(u) {
                return u instanceof w || (u = new w(u)), this.decode(u, u.uint32());
              }, n.verify = function(u) {
                return typeof u != "object" || u === null ? "object expected" : u.begin != null && u.hasOwnProperty("begin") && !(_.isInteger(u.begin) || u.begin && _.isInteger(u.begin.low) && _.isInteger(u.begin.high)) ? "begin: integer|Long expected" : u.end != null && u.hasOwnProperty("end") && !(_.isInteger(u.end) || u.end && _.isInteger(u.end.low) && _.isInteger(u.end.high)) ? "end: integer|Long expected" : null;
              }, n.fromObject = function(u) {
                if (u instanceof h.onnx.TensorProto.Segment)
                  return u;
                var p = new h.onnx.TensorProto.Segment();
                return u.begin != null && (_.Long ? (p.begin = _.Long.fromValue(u.begin)).unsigned = false : typeof u.begin == "string" ? p.begin = parseInt(u.begin, 10) : typeof u.begin == "number" ? p.begin = u.begin : typeof u.begin == "object" && (p.begin = new _.LongBits(u.begin.low >>> 0, u.begin.high >>> 0).toNumber())), u.end != null && (_.Long ? (p.end = _.Long.fromValue(u.end)).unsigned = false : typeof u.end == "string" ? p.end = parseInt(u.end, 10) : typeof u.end == "number" ? p.end = u.end : typeof u.end == "object" && (p.end = new _.LongBits(u.end.low >>> 0, u.end.high >>> 0).toNumber())), p;
              }, n.toObject = function(u, p) {
                p || (p = {});
                var M = {};
                if (p.defaults) {
                  if (_.Long) {
                    var P = new _.Long(0, 0, false);
                    M.begin = p.longs === String ? P.toString() : p.longs === Number ? P.toNumber() : P;
                  } else
                    M.begin = p.longs === String ? "0" : 0;
                  _.Long ? (P = new _.Long(0, 0, false), M.end = p.longs === String ? P.toString() : p.longs === Number ? P.toNumber() : P) : M.end = p.longs === String ? "0" : 0;
                }
                return u.begin != null && u.hasOwnProperty("begin") && (typeof u.begin == "number" ? M.begin = p.longs === String ? String(u.begin) : u.begin : M.begin = p.longs === String ? _.Long.prototype.toString.call(u.begin) : p.longs === Number ? new _.LongBits(u.begin.low >>> 0, u.begin.high >>> 0).toNumber() : u.begin), u.end != null && u.hasOwnProperty("end") && (typeof u.end == "number" ? M.end = p.longs === String ? String(u.end) : u.end : M.end = p.longs === String ? _.Long.prototype.toString.call(u.end) : p.longs === Number ? new _.LongBits(u.end.low >>> 0, u.end.high >>> 0).toNumber() : u.end), M;
              }, n.prototype.toJSON = function() {
                return this.constructor.toObject(this, d.util.toJSONOptions);
              }, n;
            }(), r.DataLocation = function() {
              var n = {}, u = Object.create(n);
              return u[n[0] = "DEFAULT"] = 0, u[n[1] = "EXTERNAL"] = 1, u;
            }(), r;
          }(), f.TensorShapeProto = function() {
            function r(n) {
              if (this.dim = [], n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.dim = _.emptyArray, r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              if (u || (u = g.create()), n.dim != null && n.dim.length)
                for (var p = 0; p < n.dim.length; ++p)
                  h.onnx.TensorShapeProto.Dimension.encode(n.dim[p], u.uint32(10).fork()).ldelim();
              return u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.TensorShapeProto(); n.pos < p; ) {
                var P = n.uint32();
                P >>> 3 == 1 ? (M.dim && M.dim.length || (M.dim = []), M.dim.push(h.onnx.TensorShapeProto.Dimension.decode(n, n.uint32()))) : n.skipType(7 & P);
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              if (typeof n != "object" || n === null)
                return "object expected";
              if (n.dim != null && n.hasOwnProperty("dim")) {
                if (!Array.isArray(n.dim))
                  return "dim: array expected";
                for (var u = 0; u < n.dim.length; ++u) {
                  var p = h.onnx.TensorShapeProto.Dimension.verify(n.dim[u]);
                  if (p)
                    return "dim." + p;
                }
              }
              return null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.TensorShapeProto)
                return n;
              var u = new h.onnx.TensorShapeProto();
              if (n.dim) {
                if (!Array.isArray(n.dim))
                  throw TypeError(".onnx.TensorShapeProto.dim: array expected");
                u.dim = [];
                for (var p = 0; p < n.dim.length; ++p) {
                  if (typeof n.dim[p] != "object")
                    throw TypeError(".onnx.TensorShapeProto.dim: object expected");
                  u.dim[p] = h.onnx.TensorShapeProto.Dimension.fromObject(n.dim[p]);
                }
              }
              return u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              if ((u.arrays || u.defaults) && (p.dim = []), n.dim && n.dim.length) {
                p.dim = [];
                for (var M = 0; M < n.dim.length; ++M)
                  p.dim[M] = h.onnx.TensorShapeProto.Dimension.toObject(n.dim[M], u);
              }
              return p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r.Dimension = function() {
              function n(p) {
                if (p)
                  for (var M = Object.keys(p), P = 0; P < M.length; ++P)
                    p[M[P]] != null && (this[M[P]] = p[M[P]]);
              }
              var u;
              return n.prototype.dimValue = _.Long ? _.Long.fromBits(0, 0, false) : 0, n.prototype.dimParam = "", n.prototype.denotation = "", Object.defineProperty(n.prototype, "value", {
                get: _.oneOfGetter(u = [
                  "dimValue",
                  "dimParam"
                ]),
                set: _.oneOfSetter(u)
              }), n.create = function(p) {
                return new n(p);
              }, n.encode = function(p, M) {
                return M || (M = g.create()), p.dimValue != null && p.hasOwnProperty("dimValue") && M.uint32(8).int64(p.dimValue), p.dimParam != null && p.hasOwnProperty("dimParam") && M.uint32(18).string(p.dimParam), p.denotation != null && p.hasOwnProperty("denotation") && M.uint32(26).string(p.denotation), M;
              }, n.encodeDelimited = function(p, M) {
                return this.encode(p, M).ldelim();
              }, n.decode = function(p, M) {
                p instanceof w || (p = w.create(p));
                for (var P = M === void 0 ? p.len : p.pos + M, E = new h.onnx.TensorShapeProto.Dimension(); p.pos < P; ) {
                  var k = p.uint32();
                  switch (k >>> 3) {
                    case 1:
                      E.dimValue = p.int64();
                      break;
                    case 2:
                      E.dimParam = p.string();
                      break;
                    case 3:
                      E.denotation = p.string();
                      break;
                    default:
                      p.skipType(7 & k);
                  }
                }
                return E;
              }, n.decodeDelimited = function(p) {
                return p instanceof w || (p = new w(p)), this.decode(p, p.uint32());
              }, n.verify = function(p) {
                if (typeof p != "object" || p === null)
                  return "object expected";
                var M = {};
                if (p.dimValue != null && p.hasOwnProperty("dimValue") && (M.value = 1, !(_.isInteger(p.dimValue) || p.dimValue && _.isInteger(p.dimValue.low) && _.isInteger(p.dimValue.high))))
                  return "dimValue: integer|Long expected";
                if (p.dimParam != null && p.hasOwnProperty("dimParam")) {
                  if (M.value === 1)
                    return "value: multiple values";
                  if (M.value = 1, !_.isString(p.dimParam))
                    return "dimParam: string expected";
                }
                return p.denotation != null && p.hasOwnProperty("denotation") && !_.isString(p.denotation) ? "denotation: string expected" : null;
              }, n.fromObject = function(p) {
                if (p instanceof h.onnx.TensorShapeProto.Dimension)
                  return p;
                var M = new h.onnx.TensorShapeProto.Dimension();
                return p.dimValue != null && (_.Long ? (M.dimValue = _.Long.fromValue(p.dimValue)).unsigned = false : typeof p.dimValue == "string" ? M.dimValue = parseInt(p.dimValue, 10) : typeof p.dimValue == "number" ? M.dimValue = p.dimValue : typeof p.dimValue == "object" && (M.dimValue = new _.LongBits(p.dimValue.low >>> 0, p.dimValue.high >>> 0).toNumber())), p.dimParam != null && (M.dimParam = String(p.dimParam)), p.denotation != null && (M.denotation = String(p.denotation)), M;
              }, n.toObject = function(p, M) {
                M || (M = {});
                var P = {};
                return M.defaults && (P.denotation = ""), p.dimValue != null && p.hasOwnProperty("dimValue") && (typeof p.dimValue == "number" ? P.dimValue = M.longs === String ? String(p.dimValue) : p.dimValue : P.dimValue = M.longs === String ? _.Long.prototype.toString.call(p.dimValue) : M.longs === Number ? new _.LongBits(p.dimValue.low >>> 0, p.dimValue.high >>> 0).toNumber() : p.dimValue, M.oneofs && (P.value = "dimValue")), p.dimParam != null && p.hasOwnProperty("dimParam") && (P.dimParam = p.dimParam, M.oneofs && (P.value = "dimParam")), p.denotation != null && p.hasOwnProperty("denotation") && (P.denotation = p.denotation), P;
              }, n.prototype.toJSON = function() {
                return this.constructor.toObject(this, d.util.toJSONOptions);
              }, n;
            }(), r;
          }(), f.TypeProto = function() {
            function r(u) {
              if (u)
                for (var p = Object.keys(u), M = 0; M < p.length; ++M)
                  u[p[M]] != null && (this[p[M]] = u[p[M]]);
            }
            var n;
            return r.prototype.tensorType = null, r.prototype.denotation = "", Object.defineProperty(r.prototype, "value", {
              get: _.oneOfGetter(n = [
                "tensorType"
              ]),
              set: _.oneOfSetter(n)
            }), r.create = function(u) {
              return new r(u);
            }, r.encode = function(u, p) {
              return p || (p = g.create()), u.tensorType != null && u.hasOwnProperty("tensorType") && h.onnx.TypeProto.Tensor.encode(u.tensorType, p.uint32(10).fork()).ldelim(), u.denotation != null && u.hasOwnProperty("denotation") && p.uint32(50).string(u.denotation), p;
            }, r.encodeDelimited = function(u, p) {
              return this.encode(u, p).ldelim();
            }, r.decode = function(u, p) {
              u instanceof w || (u = w.create(u));
              for (var M = p === void 0 ? u.len : u.pos + p, P = new h.onnx.TypeProto(); u.pos < M; ) {
                var E = u.uint32();
                switch (E >>> 3) {
                  case 1:
                    P.tensorType = h.onnx.TypeProto.Tensor.decode(u, u.uint32());
                    break;
                  case 6:
                    P.denotation = u.string();
                    break;
                  default:
                    u.skipType(7 & E);
                }
              }
              return P;
            }, r.decodeDelimited = function(u) {
              return u instanceof w || (u = new w(u)), this.decode(u, u.uint32());
            }, r.verify = function(u) {
              if (typeof u != "object" || u === null)
                return "object expected";
              if (u.tensorType != null && u.hasOwnProperty("tensorType")) {
                var p = h.onnx.TypeProto.Tensor.verify(u.tensorType);
                if (p)
                  return "tensorType." + p;
              }
              return u.denotation != null && u.hasOwnProperty("denotation") && !_.isString(u.denotation) ? "denotation: string expected" : null;
            }, r.fromObject = function(u) {
              if (u instanceof h.onnx.TypeProto)
                return u;
              var p = new h.onnx.TypeProto();
              if (u.tensorType != null) {
                if (typeof u.tensorType != "object")
                  throw TypeError(".onnx.TypeProto.tensorType: object expected");
                p.tensorType = h.onnx.TypeProto.Tensor.fromObject(u.tensorType);
              }
              return u.denotation != null && (p.denotation = String(u.denotation)), p;
            }, r.toObject = function(u, p) {
              p || (p = {});
              var M = {};
              return p.defaults && (M.denotation = ""), u.tensorType != null && u.hasOwnProperty("tensorType") && (M.tensorType = h.onnx.TypeProto.Tensor.toObject(u.tensorType, p), p.oneofs && (M.value = "tensorType")), u.denotation != null && u.hasOwnProperty("denotation") && (M.denotation = u.denotation), M;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r.Tensor = function() {
              function u(p) {
                if (p)
                  for (var M = Object.keys(p), P = 0; P < M.length; ++P)
                    p[M[P]] != null && (this[M[P]] = p[M[P]]);
              }
              return u.prototype.elemType = 0, u.prototype.shape = null, u.create = function(p) {
                return new u(p);
              }, u.encode = function(p, M) {
                return M || (M = g.create()), p.elemType != null && p.hasOwnProperty("elemType") && M.uint32(8).int32(p.elemType), p.shape != null && p.hasOwnProperty("shape") && h.onnx.TensorShapeProto.encode(p.shape, M.uint32(18).fork()).ldelim(), M;
              }, u.encodeDelimited = function(p, M) {
                return this.encode(p, M).ldelim();
              }, u.decode = function(p, M) {
                p instanceof w || (p = w.create(p));
                for (var P = M === void 0 ? p.len : p.pos + M, E = new h.onnx.TypeProto.Tensor(); p.pos < P; ) {
                  var k = p.uint32();
                  switch (k >>> 3) {
                    case 1:
                      E.elemType = p.int32();
                      break;
                    case 2:
                      E.shape = h.onnx.TensorShapeProto.decode(p, p.uint32());
                      break;
                    default:
                      p.skipType(7 & k);
                  }
                }
                return E;
              }, u.decodeDelimited = function(p) {
                return p instanceof w || (p = new w(p)), this.decode(p, p.uint32());
              }, u.verify = function(p) {
                if (typeof p != "object" || p === null)
                  return "object expected";
                if (p.elemType != null && p.hasOwnProperty("elemType") && !_.isInteger(p.elemType))
                  return "elemType: integer expected";
                if (p.shape != null && p.hasOwnProperty("shape")) {
                  var M = h.onnx.TensorShapeProto.verify(p.shape);
                  if (M)
                    return "shape." + M;
                }
                return null;
              }, u.fromObject = function(p) {
                if (p instanceof h.onnx.TypeProto.Tensor)
                  return p;
                var M = new h.onnx.TypeProto.Tensor();
                if (p.elemType != null && (M.elemType = 0 | p.elemType), p.shape != null) {
                  if (typeof p.shape != "object")
                    throw TypeError(".onnx.TypeProto.Tensor.shape: object expected");
                  M.shape = h.onnx.TensorShapeProto.fromObject(p.shape);
                }
                return M;
              }, u.toObject = function(p, M) {
                M || (M = {});
                var P = {};
                return M.defaults && (P.elemType = 0, P.shape = null), p.elemType != null && p.hasOwnProperty("elemType") && (P.elemType = p.elemType), p.shape != null && p.hasOwnProperty("shape") && (P.shape = h.onnx.TensorShapeProto.toObject(p.shape, M)), P;
              }, u.prototype.toJSON = function() {
                return this.constructor.toObject(this, d.util.toJSONOptions);
              }, u;
            }(), r;
          }(), f.OperatorSetIdProto = function() {
            function r(n) {
              if (n)
                for (var u = Object.keys(n), p = 0; p < u.length; ++p)
                  n[u[p]] != null && (this[u[p]] = n[u[p]]);
            }
            return r.prototype.domain = "", r.prototype.version = _.Long ? _.Long.fromBits(0, 0, false) : 0, r.create = function(n) {
              return new r(n);
            }, r.encode = function(n, u) {
              return u || (u = g.create()), n.domain != null && n.hasOwnProperty("domain") && u.uint32(10).string(n.domain), n.version != null && n.hasOwnProperty("version") && u.uint32(16).int64(n.version), u;
            }, r.encodeDelimited = function(n, u) {
              return this.encode(n, u).ldelim();
            }, r.decode = function(n, u) {
              n instanceof w || (n = w.create(n));
              for (var p = u === void 0 ? n.len : n.pos + u, M = new h.onnx.OperatorSetIdProto(); n.pos < p; ) {
                var P = n.uint32();
                switch (P >>> 3) {
                  case 1:
                    M.domain = n.string();
                    break;
                  case 2:
                    M.version = n.int64();
                    break;
                  default:
                    n.skipType(7 & P);
                }
              }
              return M;
            }, r.decodeDelimited = function(n) {
              return n instanceof w || (n = new w(n)), this.decode(n, n.uint32());
            }, r.verify = function(n) {
              return typeof n != "object" || n === null ? "object expected" : n.domain != null && n.hasOwnProperty("domain") && !_.isString(n.domain) ? "domain: string expected" : n.version != null && n.hasOwnProperty("version") && !(_.isInteger(n.version) || n.version && _.isInteger(n.version.low) && _.isInteger(n.version.high)) ? "version: integer|Long expected" : null;
            }, r.fromObject = function(n) {
              if (n instanceof h.onnx.OperatorSetIdProto)
                return n;
              var u = new h.onnx.OperatorSetIdProto();
              return n.domain != null && (u.domain = String(n.domain)), n.version != null && (_.Long ? (u.version = _.Long.fromValue(n.version)).unsigned = false : typeof n.version == "string" ? u.version = parseInt(n.version, 10) : typeof n.version == "number" ? u.version = n.version : typeof n.version == "object" && (u.version = new _.LongBits(n.version.low >>> 0, n.version.high >>> 0).toNumber())), u;
            }, r.toObject = function(n, u) {
              u || (u = {});
              var p = {};
              if (u.defaults)
                if (p.domain = "", _.Long) {
                  var M = new _.Long(0, 0, false);
                  p.version = u.longs === String ? M.toString() : u.longs === Number ? M.toNumber() : M;
                } else
                  p.version = u.longs === String ? "0" : 0;
              return n.domain != null && n.hasOwnProperty("domain") && (p.domain = n.domain), n.version != null && n.hasOwnProperty("version") && (typeof n.version == "number" ? p.version = u.longs === String ? String(n.version) : n.version : p.version = u.longs === String ? _.Long.prototype.toString.call(n.version) : u.longs === Number ? new _.LongBits(n.version.low >>> 0, n.version.high >>> 0).toNumber() : n.version), p;
            }, r.prototype.toJSON = function() {
              return this.constructor.toObject(this, d.util.toJSONOptions);
            }, r;
          }(), f), i.exports = h;
        },
        2100: (i, e, t) => {
          i.exports = t(9482);
        },
        9482: (i, e, t) => {
          var s = e;
          function l() {
            s.util._configure(), s.Writer._configure(s.BufferWriter), s.Reader._configure(s.BufferReader);
          }
          s.build = "minimal", s.Writer = t(1173), s.BufferWriter = t(3155), s.Reader = t(1408), s.BufferReader = t(593), s.util = t(9693), s.rpc = t(5994), s.roots = t(5054), s.configure = l, l();
        },
        1408: (i, e, t) => {
          i.exports = g;
          var s, l = t(9693), f = l.LongBits, d = l.utf8;
          function w(M, P) {
            return RangeError("index out of range: " + M.pos + " + " + (P || 1) + " > " + M.len);
          }
          function g(M) {
            this.buf = M, this.pos = 0, this.len = M.length;
          }
          var _, h = typeof Uint8Array < "u" ? function(M) {
            if (M instanceof Uint8Array || Array.isArray(M))
              return new g(M);
            throw Error("illegal buffer");
          } : function(M) {
            if (Array.isArray(M))
              return new g(M);
            throw Error("illegal buffer");
          }, r = function() {
            return l.Buffer ? function(M) {
              return (g.create = function(P) {
                return l.Buffer.isBuffer(P) ? new s(P) : h(P);
              })(M);
            } : h;
          };
          function n() {
            var M = new f(0, 0), P = 0;
            if (!(this.len - this.pos > 4)) {
              for (; P < 3; ++P) {
                if (this.pos >= this.len)
                  throw w(this);
                if (M.lo = (M.lo | (127 & this.buf[this.pos]) << 7 * P) >>> 0, this.buf[this.pos++] < 128)
                  return M;
              }
              return M.lo = (M.lo | (127 & this.buf[this.pos++]) << 7 * P) >>> 0, M;
            }
            for (; P < 4; ++P)
              if (M.lo = (M.lo | (127 & this.buf[this.pos]) << 7 * P) >>> 0, this.buf[this.pos++] < 128)
                return M;
            if (M.lo = (M.lo | (127 & this.buf[this.pos]) << 28) >>> 0, M.hi = (M.hi | (127 & this.buf[this.pos]) >> 4) >>> 0, this.buf[this.pos++] < 128)
              return M;
            if (P = 0, this.len - this.pos > 4) {
              for (; P < 5; ++P)
                if (M.hi = (M.hi | (127 & this.buf[this.pos]) << 7 * P + 3) >>> 0, this.buf[this.pos++] < 128)
                  return M;
            } else
              for (; P < 5; ++P) {
                if (this.pos >= this.len)
                  throw w(this);
                if (M.hi = (M.hi | (127 & this.buf[this.pos]) << 7 * P + 3) >>> 0, this.buf[this.pos++] < 128)
                  return M;
              }
            throw Error("invalid varint encoding");
          }
          function u(M, P) {
            return (M[P - 4] | M[P - 3] << 8 | M[P - 2] << 16 | M[P - 1] << 24) >>> 0;
          }
          function p() {
            if (this.pos + 8 > this.len)
              throw w(this, 8);
            return new f(u(this.buf, this.pos += 4), u(this.buf, this.pos += 4));
          }
          g.create = r(), g.prototype._slice = l.Array.prototype.subarray || l.Array.prototype.slice, g.prototype.uint32 = (_ = 4294967295, function() {
            if (_ = (127 & this.buf[this.pos]) >>> 0, this.buf[this.pos++] < 128 || (_ = (_ | (127 & this.buf[this.pos]) << 7) >>> 0, this.buf[this.pos++] < 128) || (_ = (_ | (127 & this.buf[this.pos]) << 14) >>> 0, this.buf[this.pos++] < 128) || (_ = (_ | (127 & this.buf[this.pos]) << 21) >>> 0, this.buf[this.pos++] < 128) || (_ = (_ | (15 & this.buf[this.pos]) << 28) >>> 0, this.buf[this.pos++] < 128))
              return _;
            if ((this.pos += 5) > this.len)
              throw this.pos = this.len, w(this, 10);
            return _;
          }), g.prototype.int32 = function() {
            return 0 | this.uint32();
          }, g.prototype.sint32 = function() {
            var M = this.uint32();
            return M >>> 1 ^ -(1 & M) | 0;
          }, g.prototype.bool = function() {
            return this.uint32() !== 0;
          }, g.prototype.fixed32 = function() {
            if (this.pos + 4 > this.len)
              throw w(this, 4);
            return u(this.buf, this.pos += 4);
          }, g.prototype.sfixed32 = function() {
            if (this.pos + 4 > this.len)
              throw w(this, 4);
            return 0 | u(this.buf, this.pos += 4);
          }, g.prototype.float = function() {
            if (this.pos + 4 > this.len)
              throw w(this, 4);
            var M = l.float.readFloatLE(this.buf, this.pos);
            return this.pos += 4, M;
          }, g.prototype.double = function() {
            if (this.pos + 8 > this.len)
              throw w(this, 4);
            var M = l.float.readDoubleLE(this.buf, this.pos);
            return this.pos += 8, M;
          }, g.prototype.bytes = function() {
            var M = this.uint32(), P = this.pos, E = this.pos + M;
            if (E > this.len)
              throw w(this, M);
            return this.pos += M, Array.isArray(this.buf) ? this.buf.slice(P, E) : P === E ? new this.buf.constructor(0) : this._slice.call(this.buf, P, E);
          }, g.prototype.string = function() {
            var M = this.bytes();
            return d.read(M, 0, M.length);
          }, g.prototype.skip = function(M) {
            if (typeof M == "number") {
              if (this.pos + M > this.len)
                throw w(this, M);
              this.pos += M;
            } else
              do
                if (this.pos >= this.len)
                  throw w(this);
              while (128 & this.buf[this.pos++]);
            return this;
          }, g.prototype.skipType = function(M) {
            switch (M) {
              case 0:
                this.skip();
                break;
              case 1:
                this.skip(8);
                break;
              case 2:
                this.skip(this.uint32());
                break;
              case 3:
                for (; (M = 7 & this.uint32()) != 4; )
                  this.skipType(M);
                break;
              case 5:
                this.skip(4);
                break;
              default:
                throw Error("invalid wire type " + M + " at offset " + this.pos);
            }
            return this;
          }, g._configure = function(M) {
            s = M, g.create = r(), s._configure();
            var P = l.Long ? "toLong" : "toNumber";
            l.merge(g.prototype, {
              int64: function() {
                return n.call(this)[P](false);
              },
              uint64: function() {
                return n.call(this)[P](true);
              },
              sint64: function() {
                return n.call(this).zzDecode()[P](false);
              },
              fixed64: function() {
                return p.call(this)[P](true);
              },
              sfixed64: function() {
                return p.call(this)[P](false);
              }
            });
          };
        },
        593: (i, e, t) => {
          i.exports = f;
          var s = t(1408);
          (f.prototype = Object.create(s.prototype)).constructor = f;
          var l = t(9693);
          function f(d) {
            s.call(this, d);
          }
          f._configure = function() {
            l.Buffer && (f.prototype._slice = l.Buffer.prototype.slice);
          }, f.prototype.string = function() {
            var d = this.uint32();
            return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + d, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + d, this.len));
          }, f._configure();
        },
        5054: (i) => {
          i.exports = {};
        },
        5994: (i, e, t) => {
          e.Service = t(7948);
        },
        7948: (i, e, t) => {
          i.exports = l;
          var s = t(9693);
          function l(f, d, w) {
            if (typeof f != "function")
              throw TypeError("rpcImpl must be a function");
            s.EventEmitter.call(this), this.rpcImpl = f, this.requestDelimited = !!d, this.responseDelimited = !!w;
          }
          (l.prototype = Object.create(s.EventEmitter.prototype)).constructor = l, l.prototype.rpcCall = function f(d, w, g, _, h) {
            if (!_)
              throw TypeError("request must be specified");
            var r = this;
            if (!h)
              return s.asPromise(f, r, d, w, g, _);
            if (r.rpcImpl)
              try {
                return r.rpcImpl(d, w[r.requestDelimited ? "encodeDelimited" : "encode"](_).finish(), function(n, u) {
                  if (n)
                    return r.emit("error", n, d), h(n);
                  if (u !== null) {
                    if (!(u instanceof g))
                      try {
                        u = g[r.responseDelimited ? "decodeDelimited" : "decode"](u);
                      } catch (p) {
                        return r.emit("error", p, d), h(p);
                      }
                    return r.emit("data", u, d), h(null, u);
                  }
                  r.end(true);
                });
              } catch (n) {
                return r.emit("error", n, d), void setTimeout(function() {
                  h(n);
                }, 0);
              }
            else
              setTimeout(function() {
                h(Error("already ended"));
              }, 0);
          }, l.prototype.end = function(f) {
            return this.rpcImpl && (f || this.rpcImpl(null, null, null), this.rpcImpl = null, this.emit("end").off()), this;
          };
        },
        1945: (i, e, t) => {
          i.exports = l;
          var s = t(9693);
          function l(g, _) {
            this.lo = g >>> 0, this.hi = _ >>> 0;
          }
          var f = l.zero = new l(0, 0);
          f.toNumber = function() {
            return 0;
          }, f.zzEncode = f.zzDecode = function() {
            return this;
          }, f.length = function() {
            return 1;
          };
          var d = l.zeroHash = "\0\0\0\0\0\0\0\0";
          l.fromNumber = function(g) {
            if (g === 0)
              return f;
            var _ = g < 0;
            _ && (g = -g);
            var h = g >>> 0, r = (g - h) / 4294967296 >>> 0;
            return _ && (r = ~r >>> 0, h = ~h >>> 0, ++h > 4294967295 && (h = 0, ++r > 4294967295 && (r = 0))), new l(h, r);
          }, l.from = function(g) {
            if (typeof g == "number")
              return l.fromNumber(g);
            if (s.isString(g)) {
              if (!s.Long)
                return l.fromNumber(parseInt(g, 10));
              g = s.Long.fromString(g);
            }
            return g.low || g.high ? new l(g.low >>> 0, g.high >>> 0) : f;
          }, l.prototype.toNumber = function(g) {
            if (!g && this.hi >>> 31) {
              var _ = 1 + ~this.lo >>> 0, h = ~this.hi >>> 0;
              return _ || (h = h + 1 >>> 0), -(_ + 4294967296 * h);
            }
            return this.lo + 4294967296 * this.hi;
          }, l.prototype.toLong = function(g) {
            return s.Long ? new s.Long(0 | this.lo, 0 | this.hi, !!g) : {
              low: 0 | this.lo,
              high: 0 | this.hi,
              unsigned: !!g
            };
          };
          var w = String.prototype.charCodeAt;
          l.fromHash = function(g) {
            return g === d ? f : new l((w.call(g, 0) | w.call(g, 1) << 8 | w.call(g, 2) << 16 | w.call(g, 3) << 24) >>> 0, (w.call(g, 4) | w.call(g, 5) << 8 | w.call(g, 6) << 16 | w.call(g, 7) << 24) >>> 0);
          }, l.prototype.toHash = function() {
            return String.fromCharCode(255 & this.lo, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, 255 & this.hi, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
          }, l.prototype.zzEncode = function() {
            var g = this.hi >> 31;
            return this.hi = ((this.hi << 1 | this.lo >>> 31) ^ g) >>> 0, this.lo = (this.lo << 1 ^ g) >>> 0, this;
          }, l.prototype.zzDecode = function() {
            var g = -(1 & this.lo);
            return this.lo = ((this.lo >>> 1 | this.hi << 31) ^ g) >>> 0, this.hi = (this.hi >>> 1 ^ g) >>> 0, this;
          }, l.prototype.length = function() {
            var g = this.lo, _ = (this.lo >>> 28 | this.hi << 4) >>> 0, h = this.hi >>> 24;
            return h === 0 ? _ === 0 ? g < 16384 ? g < 128 ? 1 : 2 : g < 2097152 ? 3 : 4 : _ < 16384 ? _ < 128 ? 5 : 6 : _ < 2097152 ? 7 : 8 : h < 128 ? 9 : 10;
          };
        },
        9693: function(i, e, t) {
          var s = e;
          function l(d, w, g) {
            for (var _ = Object.keys(w), h = 0; h < _.length; ++h)
              d[_[h]] !== void 0 && g || (d[_[h]] = w[_[h]]);
            return d;
          }
          function f(d) {
            function w(g, _) {
              if (!(this instanceof w))
                return new w(g, _);
              Object.defineProperty(this, "message", {
                get: function() {
                  return g;
                }
              }), Error.captureStackTrace ? Error.captureStackTrace(this, w) : Object.defineProperty(this, "stack", {
                value: new Error().stack || ""
              }), _ && l(this, _);
            }
            return (w.prototype = Object.create(Error.prototype)).constructor = w, Object.defineProperty(w.prototype, "name", {
              get: function() {
                return d;
              }
            }), w.prototype.toString = function() {
              return this.name + ": " + this.message;
            }, w;
          }
          s.asPromise = t(4537), s.base64 = t(7419), s.EventEmitter = t(9211), s.float = t(945), s.inquire = t(7199), s.utf8 = t(4997), s.pool = t(6662), s.LongBits = t(1945), s.isNode = !!(t.g !== void 0 && t.g && t.g.process && t.g.process.versions && t.g.process.versions.node), s.global = s.isNode && t.g || typeof window < "u" && window || typeof self < "u" && self || this, s.emptyArray = Object.freeze ? Object.freeze([]) : [], s.emptyObject = Object.freeze ? Object.freeze({}) : {}, s.isInteger = Number.isInteger || function(d) {
            return typeof d == "number" && isFinite(d) && Math.floor(d) === d;
          }, s.isString = function(d) {
            return typeof d == "string" || d instanceof String;
          }, s.isObject = function(d) {
            return d && typeof d == "object";
          }, s.isset = s.isSet = function(d, w) {
            var g = d[w];
            return !(g == null || !d.hasOwnProperty(w)) && (typeof g != "object" || (Array.isArray(g) ? g.length : Object.keys(g).length) > 0);
          }, s.Buffer = function() {
            try {
              var d = s.inquire("buffer").Buffer;
              return d.prototype.utf8Write ? d : null;
            } catch {
              return null;
            }
          }(), s._Buffer_from = null, s._Buffer_allocUnsafe = null, s.newBuffer = function(d) {
            return typeof d == "number" ? s.Buffer ? s._Buffer_allocUnsafe(d) : new s.Array(d) : s.Buffer ? s._Buffer_from(d) : typeof Uint8Array > "u" ? d : new Uint8Array(d);
          }, s.Array = typeof Uint8Array < "u" ? Uint8Array : Array, s.Long = s.global.dcodeIO && s.global.dcodeIO.Long || s.global.Long || s.inquire("long"), s.key2Re = /^true|false|0|1$/, s.key32Re = /^-?(?:0|[1-9][0-9]*)$/, s.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/, s.longToHash = function(d) {
            return d ? s.LongBits.from(d).toHash() : s.LongBits.zeroHash;
          }, s.longFromHash = function(d, w) {
            var g = s.LongBits.fromHash(d);
            return s.Long ? s.Long.fromBits(g.lo, g.hi, w) : g.toNumber(!!w);
          }, s.merge = l, s.lcFirst = function(d) {
            return d.charAt(0).toLowerCase() + d.substring(1);
          }, s.newError = f, s.ProtocolError = f("ProtocolError"), s.oneOfGetter = function(d) {
            for (var w = {}, g = 0; g < d.length; ++g)
              w[d[g]] = 1;
            return function() {
              for (var _ = Object.keys(this), h = _.length - 1; h > -1; --h)
                if (w[_[h]] === 1 && this[_[h]] !== void 0 && this[_[h]] !== null)
                  return _[h];
            };
          }, s.oneOfSetter = function(d) {
            return function(w) {
              for (var g = 0; g < d.length; ++g)
                d[g] !== w && delete this[d[g]];
            };
          }, s.toJSONOptions = {
            longs: String,
            enums: String,
            bytes: String,
            json: true
          }, s._configure = function() {
            var d = s.Buffer;
            d ? (s._Buffer_from = d.from !== Uint8Array.from && d.from || function(w, g) {
              return new d(w, g);
            }, s._Buffer_allocUnsafe = d.allocUnsafe || function(w) {
              return new d(w);
            }) : s._Buffer_from = s._Buffer_allocUnsafe = null;
          };
        },
        1173: (i, e, t) => {
          i.exports = r;
          var s, l = t(9693), f = l.LongBits, d = l.base64, w = l.utf8;
          function g(k, $, A) {
            this.fn = k, this.len = $, this.next = void 0, this.val = A;
          }
          function _() {
          }
          function h(k) {
            this.head = k.head, this.tail = k.tail, this.len = k.len, this.next = k.states;
          }
          function r() {
            this.len = 0, this.head = new g(_, 0, 0), this.tail = this.head, this.states = null;
          }
          var n = function() {
            return l.Buffer ? function() {
              return (r.create = function() {
                return new s();
              })();
            } : function() {
              return new r();
            };
          };
          function u(k, $, A) {
            $[A] = 255 & k;
          }
          function p(k, $) {
            this.len = k, this.next = void 0, this.val = $;
          }
          function M(k, $, A) {
            for (; k.hi; )
              $[A++] = 127 & k.lo | 128, k.lo = (k.lo >>> 7 | k.hi << 25) >>> 0, k.hi >>>= 7;
            for (; k.lo > 127; )
              $[A++] = 127 & k.lo | 128, k.lo = k.lo >>> 7;
            $[A++] = k.lo;
          }
          function P(k, $, A) {
            $[A] = 255 & k, $[A + 1] = k >>> 8 & 255, $[A + 2] = k >>> 16 & 255, $[A + 3] = k >>> 24;
          }
          r.create = n(), r.alloc = function(k) {
            return new l.Array(k);
          }, l.Array !== Array && (r.alloc = l.pool(r.alloc, l.Array.prototype.subarray)), r.prototype._push = function(k, $, A) {
            return this.tail = this.tail.next = new g(k, $, A), this.len += $, this;
          }, p.prototype = Object.create(g.prototype), p.prototype.fn = function(k, $, A) {
            for (; k > 127; )
              $[A++] = 127 & k | 128, k >>>= 7;
            $[A] = k;
          }, r.prototype.uint32 = function(k) {
            return this.len += (this.tail = this.tail.next = new p((k >>>= 0) < 128 ? 1 : k < 16384 ? 2 : k < 2097152 ? 3 : k < 268435456 ? 4 : 5, k)).len, this;
          }, r.prototype.int32 = function(k) {
            return k < 0 ? this._push(M, 10, f.fromNumber(k)) : this.uint32(k);
          }, r.prototype.sint32 = function(k) {
            return this.uint32((k << 1 ^ k >> 31) >>> 0);
          }, r.prototype.uint64 = function(k) {
            var $ = f.from(k);
            return this._push(M, $.length(), $);
          }, r.prototype.int64 = r.prototype.uint64, r.prototype.sint64 = function(k) {
            var $ = f.from(k).zzEncode();
            return this._push(M, $.length(), $);
          }, r.prototype.bool = function(k) {
            return this._push(u, 1, k ? 1 : 0);
          }, r.prototype.fixed32 = function(k) {
            return this._push(P, 4, k >>> 0);
          }, r.prototype.sfixed32 = r.prototype.fixed32, r.prototype.fixed64 = function(k) {
            var $ = f.from(k);
            return this._push(P, 4, $.lo)._push(P, 4, $.hi);
          }, r.prototype.sfixed64 = r.prototype.fixed64, r.prototype.float = function(k) {
            return this._push(l.float.writeFloatLE, 4, k);
          }, r.prototype.double = function(k) {
            return this._push(l.float.writeDoubleLE, 8, k);
          };
          var E = l.Array.prototype.set ? function(k, $, A) {
            $.set(k, A);
          } : function(k, $, A) {
            for (var C = 0; C < k.length; ++C)
              $[A + C] = k[C];
          };
          r.prototype.bytes = function(k) {
            var $ = k.length >>> 0;
            if (!$)
              return this._push(u, 1, 0);
            if (l.isString(k)) {
              var A = r.alloc($ = d.length(k));
              d.decode(k, A, 0), k = A;
            }
            return this.uint32($)._push(E, $, k);
          }, r.prototype.string = function(k) {
            var $ = w.length(k);
            return $ ? this.uint32($)._push(w.write, $, k) : this._push(u, 1, 0);
          }, r.prototype.fork = function() {
            return this.states = new h(this), this.head = this.tail = new g(_, 0, 0), this.len = 0, this;
          }, r.prototype.reset = function() {
            return this.states ? (this.head = this.states.head, this.tail = this.states.tail, this.len = this.states.len, this.states = this.states.next) : (this.head = this.tail = new g(_, 0, 0), this.len = 0), this;
          }, r.prototype.ldelim = function() {
            var k = this.head, $ = this.tail, A = this.len;
            return this.reset().uint32(A), A && (this.tail.next = k.next, this.tail = $, this.len += A), this;
          }, r.prototype.finish = function() {
            for (var k = this.head.next, $ = this.constructor.alloc(this.len), A = 0; k; )
              k.fn(k.val, $, A), A += k.len, k = k.next;
            return $;
          }, r._configure = function(k) {
            s = k, r.create = n(), s._configure();
          };
        },
        3155: (i, e, t) => {
          i.exports = f;
          var s = t(1173);
          (f.prototype = Object.create(s.prototype)).constructor = f;
          var l = t(9693);
          function f() {
            s.call(this);
          }
          function d(w, g, _) {
            w.length < 40 ? l.utf8.write(w, g, _) : g.utf8Write ? g.utf8Write(w, _) : g.write(w, _);
          }
          f._configure = function() {
            f.alloc = l._Buffer_allocUnsafe, f.writeBytesBuffer = l.Buffer && l.Buffer.prototype instanceof Uint8Array && l.Buffer.prototype.set.name === "set" ? function(w, g, _) {
              g.set(w, _);
            } : function(w, g, _) {
              if (w.copy)
                w.copy(g, _, 0, w.length);
              else
                for (var h = 0; h < w.length; )
                  g[_++] = w[h++];
            };
          }, f.prototype.bytes = function(w) {
            l.isString(w) && (w = l._Buffer_from(w, "base64"));
            var g = w.length >>> 0;
            return this.uint32(g), g && this._push(f.writeBytesBuffer, g, w), this;
          }, f.prototype.string = function(w) {
            var g = l.Buffer.byteLength(w);
            return this.uint32(g), g && this._push(d, g, w), this;
          }, f._configure();
        },
        7714: (i, e, t) => {
          e.R = void 0;
          const s = t(6919), l = t(7448);
          e.R = new class {
            async init() {
            }
            async createSessionHandler(f, d) {
              const w = new s.Session(d);
              return await w.loadModel(f), new l.OnnxjsSessionHandler(w);
            }
          }();
        },
        4200: (i, e, t) => {
          e.c8 = e.rX = void 0;
          const s = t(1670), l = t(5381), f = t(2157), d = t(2306);
          e.rX = () => {
            if ((typeof s.env.wasm.initTimeout != "number" || s.env.wasm.initTimeout < 0) && (s.env.wasm.initTimeout = 0), typeof s.env.wasm.simd != "boolean" && (s.env.wasm.simd = true), typeof s.env.wasm.proxy != "boolean" && (s.env.wasm.proxy = false), typeof s.env.wasm.numThreads != "number" || !Number.isInteger(s.env.wasm.numThreads) || s.env.wasm.numThreads <= 0) {
              const w = typeof navigator > "u" ? (0, l.cpus)().length : navigator.hardwareConcurrency;
              s.env.wasm.numThreads = Math.min(4, Math.ceil((w || 1) / 2));
            }
          }, e.c8 = new class {
            async init() {
              (0, e.rX)(), await (0, f.initWasm)();
            }
            async createSessionHandler(w, g) {
              const _ = new d.OnnxruntimeWebAssemblySessionHandler();
              return await _.loadModel(w, g), Promise.resolve(_);
            }
          }();
        },
        6018: function(i, e, t) {
          var s = this && this.__createBinding || (Object.create ? function(d, w, g, _) {
            _ === void 0 && (_ = g);
            var h = Object.getOwnPropertyDescriptor(w, g);
            h && !("get" in h ? !w.__esModule : h.writable || h.configurable) || (h = {
              enumerable: true,
              get: function() {
                return w[g];
              }
            }), Object.defineProperty(d, _, h);
          } : function(d, w, g, _) {
            _ === void 0 && (_ = g), d[_] = w[g];
          }), l = this && this.__exportStar || function(d, w) {
            for (var g in d)
              g === "default" || Object.prototype.hasOwnProperty.call(w, g) || s(w, d, g);
          };
          Object.defineProperty(e, "__esModule", {
            value: true
          }), l(t(1670), e);
          const f = t(1670);
          {
            const d = t(7714).R;
            (0, f.registerBackend)("webgl", d, -10);
          }
          {
            const d = t(4200).c8;
            (0, f.registerBackend)("cpu", d, 10), (0, f.registerBackend)("wasm", d, 10), (0, f.registerBackend)("xnnpack", d, 9);
          }
        },
        246: (i, e) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createAttributeWithCacheKey = void 0;
          class t {
            constructor(l) {
              Object.assign(this, l);
            }
            get cacheKey() {
              return this._cacheKey || (this._cacheKey = Object.getOwnPropertyNames(this).sort().map((l) => `${this[l]}`).join(";")), this._cacheKey;
            }
          }
          e.createAttributeWithCacheKey = (s) => new t(s);
        },
        7778: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.Attribute = void 0;
          const s = t(1446), l = t(9395), f = t(9162), d = t(2517);
          var w = l.onnxruntime.experimental.fbs;
          class g {
            constructor(h) {
              if (this._attributes = /* @__PURE__ */ new Map(), h != null) {
                for (const r of h)
                  r instanceof s.onnx.AttributeProto ? this._attributes.set(r.name, [
                    g.getValue(r),
                    g.getType(r)
                  ]) : r instanceof w.Attribute && this._attributes.set(r.name(), [
                    g.getValue(r),
                    g.getType(r)
                  ]);
                if (this._attributes.size < h.length)
                  throw new Error("duplicated attribute names");
              }
            }
            set(h, r, n) {
              this._attributes.set(h, [
                n,
                r
              ]);
            }
            delete(h) {
              this._attributes.delete(h);
            }
            getFloat(h, r) {
              return this.get(h, "float", r);
            }
            getInt(h, r) {
              return this.get(h, "int", r);
            }
            getString(h, r) {
              return this.get(h, "string", r);
            }
            getTensor(h, r) {
              return this.get(h, "tensor", r);
            }
            getFloats(h, r) {
              return this.get(h, "floats", r);
            }
            getInts(h, r) {
              return this.get(h, "ints", r);
            }
            getStrings(h, r) {
              return this.get(h, "strings", r);
            }
            getTensors(h, r) {
              return this.get(h, "tensors", r);
            }
            get(h, r, n) {
              const u = this._attributes.get(h);
              if (u === void 0) {
                if (n !== void 0)
                  return n;
                throw new Error(`required attribute not found: ${h}`);
              }
              if (u[1] !== r)
                throw new Error(`type mismatch: expected ${r} but got ${u[1]}`);
              return u[0];
            }
            static getType(h) {
              const r = h instanceof s.onnx.AttributeProto ? h.type : h.type();
              switch (r) {
                case s.onnx.AttributeProto.AttributeType.FLOAT:
                  return "float";
                case s.onnx.AttributeProto.AttributeType.INT:
                  return "int";
                case s.onnx.AttributeProto.AttributeType.STRING:
                  return "string";
                case s.onnx.AttributeProto.AttributeType.TENSOR:
                  return "tensor";
                case s.onnx.AttributeProto.AttributeType.FLOATS:
                  return "floats";
                case s.onnx.AttributeProto.AttributeType.INTS:
                  return "ints";
                case s.onnx.AttributeProto.AttributeType.STRINGS:
                  return "strings";
                case s.onnx.AttributeProto.AttributeType.TENSORS:
                  return "tensors";
                default:
                  throw new Error(`attribute type is not supported yet: ${s.onnx.AttributeProto.AttributeType[r]}`);
              }
            }
            static getValue(h) {
              const r = h instanceof s.onnx.AttributeProto ? h.type : h.type();
              if (r === s.onnx.AttributeProto.AttributeType.GRAPH || r === s.onnx.AttributeProto.AttributeType.GRAPHS)
                throw new Error("graph attribute is not supported yet");
              const n = this.getValueNoCheck(h);
              if (r === s.onnx.AttributeProto.AttributeType.INT && d.LongUtil.isLong(n))
                return d.LongUtil.longToNumber(n);
              if (r === s.onnx.AttributeProto.AttributeType.INTS) {
                const u = n, p = new Array(u.length);
                for (let M = 0; M < u.length; M++) {
                  const P = u[M];
                  p[M] = d.LongUtil.longToNumber(P);
                }
                return p;
              }
              if (r === s.onnx.AttributeProto.AttributeType.TENSOR)
                return h instanceof s.onnx.AttributeProto ? f.Tensor.fromProto(n) : f.Tensor.fromOrtTensor(n);
              if (r === s.onnx.AttributeProto.AttributeType.TENSORS) {
                if (h instanceof s.onnx.AttributeProto)
                  return n.map((u) => f.Tensor.fromProto(u));
                if (h instanceof w.Attribute)
                  return n.map((u) => f.Tensor.fromOrtTensor(u));
              }
              if (r === s.onnx.AttributeProto.AttributeType.STRING && h instanceof s.onnx.AttributeProto) {
                const u = n;
                return (0, d.decodeUtf8String)(u);
              }
              return r === s.onnx.AttributeProto.AttributeType.STRINGS && h instanceof s.onnx.AttributeProto ? n.map(d.decodeUtf8String) : n;
            }
            static getValueNoCheck(h) {
              return h instanceof s.onnx.AttributeProto ? this.getValueNoCheckFromOnnxFormat(h) : this.getValueNoCheckFromOrtFormat(h);
            }
            static getValueNoCheckFromOnnxFormat(h) {
              switch (h.type) {
                case s.onnx.AttributeProto.AttributeType.FLOAT:
                  return h.f;
                case s.onnx.AttributeProto.AttributeType.INT:
                  return h.i;
                case s.onnx.AttributeProto.AttributeType.STRING:
                  return h.s;
                case s.onnx.AttributeProto.AttributeType.TENSOR:
                  return h.t;
                case s.onnx.AttributeProto.AttributeType.GRAPH:
                  return h.g;
                case s.onnx.AttributeProto.AttributeType.FLOATS:
                  return h.floats;
                case s.onnx.AttributeProto.AttributeType.INTS:
                  return h.ints;
                case s.onnx.AttributeProto.AttributeType.STRINGS:
                  return h.strings;
                case s.onnx.AttributeProto.AttributeType.TENSORS:
                  return h.tensors;
                case s.onnx.AttributeProto.AttributeType.GRAPHS:
                  return h.graphs;
                default:
                  throw new Error(`unsupported attribute type: ${s.onnx.AttributeProto.AttributeType[h.type]}`);
              }
            }
            static getValueNoCheckFromOrtFormat(h) {
              switch (h.type()) {
                case w.AttributeType.FLOAT:
                  return h.f();
                case w.AttributeType.INT:
                  return h.i();
                case w.AttributeType.STRING:
                  return h.s();
                case w.AttributeType.TENSOR:
                  return h.t();
                case w.AttributeType.GRAPH:
                  return h.g();
                case w.AttributeType.FLOATS:
                  return h.floatsArray();
                case w.AttributeType.INTS: {
                  const r = [];
                  for (let n = 0; n < h.intsLength(); n++)
                    r.push(h.ints(n));
                  return r;
                }
                case w.AttributeType.STRINGS: {
                  const r = [];
                  for (let n = 0; n < h.stringsLength(); n++)
                    r.push(h.strings(n));
                  return r;
                }
                case w.AttributeType.TENSORS: {
                  const r = [];
                  for (let n = 0; n < h.tensorsLength(); n++)
                    r.push(h.tensors(n));
                  return r;
                }
                default:
                  throw new Error(`unsupported attribute type: ${w.AttributeType[h.type()]}`);
              }
            }
          }
          e.Attribute = g;
        },
        7091: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.resolveBackend = e.backend = void 0;
          const s = t(5038), l = /* @__PURE__ */ new Map();
          async function f(d) {
            const w = e.backend;
            if (w[d] !== void 0 && function(g) {
              const _ = g;
              return "initialize" in _ && typeof _.initialize == "function" && "createSessionHandler" in _ && typeof _.createSessionHandler == "function" && "dispose" in _ && typeof _.dispose == "function";
            }(w[d])) {
              const g = w[d];
              let _ = g.initialize();
              if (typeof _ == "object" && "then" in _ && (_ = await _), _)
                return l.set(d, g), g;
            }
          }
          e.backend = {
            webgl: new s.WebGLBackend()
          }, e.resolveBackend = async function d(w) {
            if (!w)
              return d([
                "webgl"
              ]);
            {
              const g = typeof w == "string" ? [
                w
              ] : w;
              for (const _ of g) {
                const h = l.get(_);
                if (h)
                  return h;
                const r = await f(_);
                if (r)
                  return r;
              }
            }
            throw new Error("no available backend to use");
          };
        },
        5038: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.WebGLBackend = void 0;
          const s = t(1670), l = t(6231), f = t(6416), d = t(7305);
          e.WebGLBackend = class {
            get contextId() {
              return s.env.webgl.contextId;
            }
            set contextId(w) {
              s.env.webgl.contextId = w;
            }
            get matmulMaxBatchSize() {
              return s.env.webgl.matmulMaxBatchSize;
            }
            set matmulMaxBatchSize(w) {
              s.env.webgl.matmulMaxBatchSize = w;
            }
            get textureCacheMode() {
              return s.env.webgl.textureCacheMode;
            }
            set textureCacheMode(w) {
              s.env.webgl.textureCacheMode = w;
            }
            get pack() {
              return s.env.webgl.pack;
            }
            set pack(w) {
              s.env.webgl.pack = w;
            }
            get async() {
              return s.env.webgl.async;
            }
            set async(w) {
              s.env.webgl.async = w;
            }
            initialize() {
              try {
                return this.glContext = (0, d.createWebGLContext)(this.contextId), typeof this.matmulMaxBatchSize != "number" && (this.matmulMaxBatchSize = 16), typeof this.textureCacheMode != "string" && (this.textureCacheMode = "full"), typeof this.pack != "boolean" && (this.pack = false), typeof this.async != "boolean" && (this.async = false), l.Logger.setWithEnv(s.env), l.Logger.verbose("WebGLBackend", `Created WebGLContext: ${typeof this.glContext} with matmulMaxBatchSize: ${this.matmulMaxBatchSize}; textureCacheMode: ${this.textureCacheMode}; pack: ${this.pack}; async: ${this.async}.`), true;
              } catch (w) {
                return l.Logger.warning("WebGLBackend", `Unable to initialize WebGLBackend. ${w}`), false;
              }
            }
            createSessionHandler(w) {
              return new f.WebGLSessionHandler(this, w);
            }
            dispose() {
              this.glContext.dispose();
            }
          };
        },
        5107: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.CoordsGlslLib = void 0;
          const s = t(2517), l = t(8520), f = t(5060), d = t(7859), w = t(9390);
          class g extends l.GlslLib {
            constructor(h) {
              super(h);
            }
            getFunctions() {
              return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.offsetToCoords()), this.coordsToOffset()), this.toVec()), this.valueFrom()), this.getCommonUtilFuncs()), this.getInputsSamplingSnippets()), this.getOutputSamplingSnippet());
            }
            getCustomTypes() {
              return {};
            }
            offsetToCoords() {
              return {
                offsetToCoords: new l.GlslLibRoutine(`
      vec2 offsetToCoords(int offset, int width, int height) {
        int t = offset / width;
        int s = offset - t*width;
        vec2 coords = (vec2(s,t) + vec2(0.5,0.5)) / vec2(width, height);
        return coords;
      }
      `)
              };
            }
            coordsToOffset() {
              return {
                coordsToOffset: new l.GlslLibRoutine(`
      int coordsToOffset(vec2 coords, int width, int height) {
        float s = coords.s * float(width);
        float t = coords.t * float(height);
        int offset = int(t) * width + int(s);
        return offset;
      }
      `)
              };
            }
            getOutputSamplingSnippet() {
              const h = this.context.outputTextureLayout;
              return h.isPacked ? this.getPackedOutputSamplingSnippet(h) : this.getUnpackedOutputSamplingSnippet(h);
            }
            getPackedOutputSamplingSnippet(h) {
              const r = h.unpackedShape, n = [
                h.width,
                h.height
              ], u = {}, p = "getOutputCoords";
              switch (r.length) {
                case 0:
                  u[p] = this.getOutputScalarCoords();
                  break;
                case 1:
                  u[p] = this.getOutputPacked1DCoords(r, n);
                  break;
                case 2:
                  u[p] = this.getOutputPacked2DCoords(r, n);
                  break;
                case 3:
                  u[p] = this.getOutputPacked3DCoords(r, n);
                  break;
                default:
                  u[p] = this.getOutputPackedNDCoords(r, n);
              }
              const M = `
      void setOutput(vec4 val) {
        ${(0, f.getGlsl)(this.context.glContext.version).output} = val;
      }
    `;
              return u.floatTextureSetRGBA = new l.GlslLibRoutine(M), u;
            }
            getUnpackedOutputSamplingSnippet(h) {
              const r = h.unpackedShape, n = [
                h.width,
                h.height
              ], u = {}, p = "getOutputCoords";
              switch (r.length) {
                case 0:
                  u[p] = this.getOutputScalarCoords();
                  break;
                case 1:
                  u[p] = this.getOutputUnpacked1DCoords(r, n);
                  break;
                case 2:
                  u[p] = this.getOutputUnpacked2DCoords(r, n);
                  break;
                case 3:
                  u[p] = this.getOutputUnpacked3DCoords(r, n);
                  break;
                case 4:
                  u[p] = this.getOutputUnpacked4DCoords(r, n);
                  break;
                case 5:
                  u[p] = this.getOutputUnpacked5DCoords(r, n);
                  break;
                case 6:
                  u[p] = this.getOutputUnpacked6DCoords(r, n);
                  break;
                default:
                  throw new Error(`Unsupported output dimensionality: ${r.length}`);
              }
              const M = `
        void setOutput(float val) {
          ${(0, f.getGlsl)(this.context.glContext.version).output} = vec4(val, 0, 0, 0);
        }
    `;
              return u.floatTextureSetR = new l.GlslLibRoutine(M), u;
            }
            getOutputScalarCoords() {
              return new l.GlslLibRoutine(`
      int getOutputCoords() {
        return 0;
      }
    `);
            }
            getOutputPacked1DCoords(h, r) {
              const n = r;
              let u = "";
              return n[0] === 1 ? (u = `
          int getOutputCoords() {
            return 2 * int(TexCoords.y * ${n[1]}.0);
          }
        `, new l.GlslLibRoutine(u)) : n[1] === 1 ? (u = `
          int getOutputCoords() {
            return 2 * int(TexCoords.x * ${n[0]}.0);
          }
        `, new l.GlslLibRoutine(u)) : (u = `
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                 vec2(${n[0]}, ${n[1]}));
          return 2 * (resTexRC.y * ${n[0]} + resTexRC.x);
        }
      `, new l.GlslLibRoutine(u));
            }
            getOutputPacked2DCoords(h, r) {
              let n = "";
              if (s.ArrayUtil.arraysEqual(h, r))
                return n = `
        ivec2 getOutputCoords() {
          return 2 * ivec2(TexCoords.xy * vec2(${r[0]}, ${r[1]}));
        }
      `, new l.GlslLibRoutine(n);
              const u = r, p = Math.ceil(h[1] / 2);
              return n = `
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${u[0]}, ${u[1]}));

          int index = resTexRC.y * ${u[0]} + resTexRC.x;

          // reverse r and c order for packed texture
          int r = imod(index, ${p}) * 2;
          int c = 2 * (index / ${p});

          return ivec2(r, c);
        }
      `, new l.GlslLibRoutine(n);
            }
            getOutputPacked3DCoords(h, r) {
              const n = [
                r[0],
                r[1]
              ], u = Math.ceil(h[2] / 2), p = u * Math.ceil(h[1] / 2), M = `
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${n[0]}, ${n[1]}));
          int index = resTexRC.y * ${n[0]} + resTexRC.x;

          int b = index / ${p};
          index -= b * ${p};

          // reverse r and c order for packed texture
          int r = imod(index, ${u}) * 2;
          int c = 2 * (index / ${u});

          return ivec3(b, r, c);
        }
      `;
              return new l.GlslLibRoutine(M);
            }
            getOutputPackedNDCoords(h, r) {
              const n = [
                r[0],
                r[1]
              ], u = Math.ceil(h[h.length - 1] / 2), p = u * Math.ceil(h[h.length - 2] / 2);
              let M = p, P = "", E = "b, r, c";
              for (let $ = 2; $ < h.length - 1; $++)
                M *= h[h.length - $ - 1], P = `
      int b${$} = index / ${M};
      index -= b${$} * ${M};
    ` + P, E = `b${$}, ` + E;
              const k = `
      ivec${h.length} getOutputCoords() {
        ivec2 resTexRC = ivec2(TexCoords.xy *
                              vec2(${n[0]}, ${n[1]}));
        int index = resTexRC.y * ${n[0]} + resTexRC.x;

        ${P}

        int b = index / ${p};
        index -= b * ${p};

        // reverse r and c order for packed texture
        int r = imod(index, ${u}) * 2;
        int c = 2 * (index / ${u});

        return ivec${h.length}(${E});
      }
    `;
              return new l.GlslLibRoutine(k);
            }
            getOutputUnpacked1DCoords(h, r) {
              const n = `
        int getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${r[0]}, ${r[1]}));
          return resTexRC.y * ${r[0]} + resTexRC.x;
        }
      `;
              return new l.GlslLibRoutine(n);
            }
            getOutputUnpacked2DCoords(h, r) {
              const n = `
        ivec2 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${r[0]}, ${r[1]}));
          int index = resTexRC.y * ${r[0]} + resTexRC.x;
          int r = index / ${h[1]};
          int c = index - r * ${h[1]};
          return ivec2(r, c);
        }
      `;
              return new l.GlslLibRoutine(n);
            }
            getOutputUnpacked3DCoords(h, r) {
              let n = "";
              const u = h.length;
              let p = null;
              u < 2 && (p = []), p = new Array(u - 1), p[u - 2] = h[u - 1];
              for (let E = u - 3; E >= 0; --E)
                p[E] = p[E + 1] * h[E + 1];
              const M = [
                "r",
                "c",
                "d"
              ], P = p.map((E, k) => `int ${M[k]} = index / ${E}; ${k === p.length - 1 ? `int ${M[k + 1]} = index - ${M[k]} * ${E}` : `index -= ${M[k]} * ${E}`};`).join("");
              return n = `
        ivec3 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${r[0]}, ${r[1]}));
          int index = resTexRC.y * ${r[0]} + resTexRC.x;
          ${P}
          return ivec3(r, c, d);
        }
      `, new l.GlslLibRoutine(n);
            }
            getOutputUnpacked4DCoords(h, r) {
              let n = "";
              const u = h.length;
              let p = null;
              u < 2 && (p = []), p = new Array(u - 1), p[u - 2] = h[u - 1];
              for (let E = u - 3; E >= 0; --E)
                p[E] = p[E + 1] * h[E + 1];
              const M = [
                "r",
                "c",
                "d",
                "d2"
              ], P = p.map((E, k) => `int ${M[k]} = index / ${E}; ${k === p.length - 1 ? `int ${M[k + 1]} = index - ${M[k]} * ${E}` : `index -= ${M[k]} * ${E}`};`).join("");
              return n = `
      ivec4 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${r[0]}, ${r[1]}));
          int index = resTexRC.y * ${r[0]} + resTexRC.x;
          ${P}
          return ivec4(r, c, d, d2);
        }
      `, new l.GlslLibRoutine(n);
            }
            getOutputUnpacked5DCoords(h, r) {
              let n = "";
              const u = h.length;
              let p = null;
              u < 2 && (p = []), p = new Array(u - 1), p[u - 2] = h[u - 1];
              for (let E = u - 3; E >= 0; --E)
                p[E] = p[E + 1] * h[E + 1];
              const M = [
                "r",
                "c",
                "d",
                "d2",
                "d3"
              ], P = p.map((E, k) => `int ${M[k]} = index / ${E}; ${k === p.length - 1 ? `int ${M[k + 1]} = index - ${M[k]} * ${E}` : `index -= ${M[k]} * ${E}`};`).join("");
              return n = `
      ivec5 getOutputCoords() {
          ivec2 resTexRC = ivec2(TexCoords.xy *
                                vec2(${r[0]}, ${r[1]}));
          int index = resTexRC.y * ${r[0]} + resTexRC.x;
          ${P}
          return ivec5(r, c, d, d2, d3);
        }
      `, new l.GlslLibRoutine(n);
            }
            getOutputUnpacked6DCoords(h, r) {
              let n = "";
              const u = h.length;
              let p = null;
              u < 2 && (p = []), p = new Array(u - 1), p[u - 2] = h[u - 1];
              for (let E = u - 3; E >= 0; --E)
                p[E] = p[E + 1] * h[E + 1];
              const M = [
                "r",
                "c",
                "d",
                "d2",
                "d3",
                "d4"
              ], P = p.map((E, k) => `int ${M[k]} = index / ${E}; ${k === p.length - 1 ? `int ${M[k + 1]} = index - ${M[k]} * ${E}` : `index -= ${M[k]} * ${E}`};`).join("");
              return n = `
     ivec6 getOutputCoords() {
         ivec2 resTexRC = ivec2(TexCoords.xy *
                               vec2(${r[0]}, ${r[1]}));
         int index = resTexRC.y * ${r[0]} + resTexRC.x;
         ${P}
         return ivec6(r, c, d, d2, d3, d4);
       }
     `, new l.GlslLibRoutine(n);
            }
            getCommonUtilFuncs() {
              const h = {};
              let r = "uvFromFlat";
              h[r] = new l.GlslLibRoutine(`
    vec2 uvFromFlat(int texNumR, int texNumC, int index) {
      int texC = index / texNumR;
      int texR = index - texC * texNumR;
      // TODO: swap texR, texC order in following function so row is corresponding to u and column is corresponding to
      //       v.
      return (vec2(texR, texC) + halfCR) / vec2(texNumR, texNumC);
    }
    `), r = "packedUVfrom1D", h[r] = new l.GlslLibRoutine(`
      vec2 packedUVfrom1D(int texNumR, int texNumC, int index) {
        int texelIndex = index / 2;
        int texR = texelIndex / texNumC;
        int texC = texelIndex - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `), r = "packedUVfrom2D", h[r] = new l.GlslLibRoutine(`
      vec2 packedUVfrom2D(int texNumR, int texNumC, int texelsInLogicalRow, int row, int col) {
        int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);
        int texR = texelIndex / texNumC;
        int texC = texelIndex - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `), r = "packedUVfrom3D", h[r] = new l.GlslLibRoutine(`
      vec2 packedUVfrom3D(int texNumR, int texNumC,
          int texelsInBatch, int texelsInLogicalRow, int b,
          int row, int col) {
        int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);
        int texR = index / texNumC;
        int texC = index - texR * texNumC;
        return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);
      }
      `), r = "sampleTexture";
              const n = (0, f.getGlsl)(this.context.glContext.version);
              return h[r] = new l.GlslLibRoutine(`
        float sampleTexture(sampler2D textureSampler, vec2 uv) {
            return ${n.texture2D}(textureSampler, uv).r;
        }`), h;
            }
            getInputsSamplingSnippets() {
              const h = {}, r = this.context.outputTextureLayout;
              return this.context.programInfo.inputNames.forEach((n, u) => {
                const p = this.context.inputTextureLayouts[u], M = (0, w.generateShaderFuncNameFromInputSamplerName)(n);
                p.isPacked ? h[M] = this.getPackedSamplerFromInput(M, n, p) : h[M] = this.getUnpackedSamplerFromInput(M, n, p);
                const P = (0, w.generateShaderFuncNameFromInputSamplerNameAtOutCoords)(n);
                p.unpackedShape.length <= r.unpackedShape.length && (p.isPacked ? h[P] = this.getPackedSamplerAtOutputCoords(P, p, r, n) : h[P] = this.getUnpackedSamplerAtOutputCoords(P, p, r, n));
              }), h;
            }
            getPackedSamplerAtOutputCoords(h, r, n, u) {
              const p = r.unpackedShape, M = n.unpackedShape, P = u, E = (0, w.generateShaderFuncNameFromInputSamplerName)(P), k = p.length, $ = M.length, A = s.BroadcastUtil.getBroadcastDims(p, M), C = (0, w.getCoordsDataType)($), F = $ - k;
              let D;
              const N = (0, w.getGlChannels)();
              D = k === 0 ? "" : $ < 2 && A.length >= 1 ? "coords = 0;" : A.map((G) => `coords.${N[G + F]} = 0;`).join(`
`);
              let R = "";
              R = $ < 2 && k > 0 ? "coords" : p.map((G, H) => `coords.${N[H + F]}`).join(", ");
              let j = "return outputValue;";
              const Z = s.ShapeUtil.size(p) === 1, te = s.ShapeUtil.size(M) === 1;
              if (k !== 1 || Z || te) {
                if (Z && !te)
                  j = $ === 1 ? `
          return vec4(outputValue.x, outputValue.x, 0., 0.);
        ` : `
          return vec4(outputValue.x);
        `;
                else if (A.length) {
                  const G = k - 2, H = k - 1;
                  A.indexOf(G) > -1 && A.indexOf(H) > -1 ? j = "return vec4(outputValue.x);" : A.indexOf(G) > -1 ? j = "return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);" : A.indexOf(H) > -1 && (j = "return vec4(outputValue.xx, outputValue.zz);");
                }
              } else
                j = `
        return vec4(outputValue.xy, outputValue.xy);
      `;
              const J = `
      vec4 ${h}() {
        ${C} coords = getOutputCoords();
        
        int lastDim = coords.${N[$ - 1]};
        coords.${N[$ - 1]} = coords.${N[$ - 2]};
        coords.${N[$ - 2]} = lastDim;
      
        ${D}
        vec4 outputValue = ${E}(${R});
        ${j}
      }
    `;
              return new l.GlslLibRoutine(J, [
                "coordinates.getOutputCoords"
              ]);
            }
            getUnpackedSamplerAtOutputCoords(h, r, n, u) {
              const p = [
                n.width,
                n.height
              ], M = [
                r.width,
                r.height
              ], P = r.unpackedShape.length, E = n.unpackedShape.length, k = r.unpackedShape, $ = n.unpackedShape, A = (0, w.generateShaderFuncNameFromInputSamplerName)(u);
              if (P === E && s.ArrayUtil.arraysEqual(M, p)) {
                const te = `
          float ${h}() {
            return sampleTexture(${u}, TexCoords);
          }
        `;
                return new l.GlslLibRoutine(te, [
                  "coordinates.sampleTexture"
                ]);
              }
              const C = (0, w.getCoordsDataType)(E), F = s.BroadcastUtil.getBroadcastDims(k, $), D = E - P;
              let N;
              const R = (0, w.getGlChannels)();
              N = P === 0 ? "" : E < 2 && F.length >= 1 ? "coords = 0;" : F.map((te) => `coords.${R[te + D]} = 0;`).join(`
`);
              let j = "";
              j = E < 2 && P > 0 ? "coords" : r.unpackedShape.map((te, J) => `coords.${R[J + D]}`).join(", ");
              const Z = `
        float ${h}() {
          ${C} coords = getOutputCoords();
          ${N}
          return ${A}(${j});
        }
      `;
              return new l.GlslLibRoutine(Z, [
                "coordinates.getOutputCoords"
              ]);
            }
            getPackedSamplerFromInput(h, r, n) {
              switch (n.unpackedShape.length) {
                case 0:
                  return this.getPackedSamplerScalar(h, r);
                case 1:
                  return this.getPackedSampler1D(h, r, n);
                case 2:
                  return this.getPackedSampler2D(h, r, n);
                case 3:
                  return this.getPackedSampler3D(h, r, n);
                default:
                  return this.getPackedSamplerND(h, r, n);
              }
            }
            getUnpackedSamplerFromInput(h, r, n) {
              const u = n.unpackedShape;
              switch (u.length) {
                case 0:
                  return this.getUnpackedSamplerScalar(h, r, n);
                case 1:
                  return this.getUnpackedSampler1D(h, r, n);
                case 2:
                  return this.getUnpackedSampler2D(h, r, n);
                case 3:
                  return this.getUnpackedSampler3D(h, r, n);
                case 4:
                  return this.getUnpackedSampler4D(h, r, n);
                case 5:
                  return this.getUnpackedSampler5D(h, r, n);
                case 6:
                  return this.getUnpackedSampler6D(h, r, n);
                default:
                  throw new Error(`Unsupported dimension ${u.length}-D`);
              }
            }
            getPackedSamplerScalar(h, r) {
              const n = `
          vec4 ${h}() {
            return ${(0, f.getGlsl)(this.context.glContext.version).texture2D}(${r}, halfCR);
          }
        `;
              return new l.GlslLibRoutine(n);
            }
            getPackedSampler1D(h, r, n) {
              const u = [
                n.width,
                n.height
              ], p = [
                u[1],
                u[0]
              ], M = (0, f.getGlsl)(this.context.glContext.version), P = `vec4 ${h}(int index) {
      vec2 uv = packedUVfrom1D(
      ${p[0]}, ${p[1]}, index);
      return ${M.texture2D}(${r}, uv);
    }`;
              return new l.GlslLibRoutine(P, [
                "coordinates.packedUVfrom1D"
              ]);
            }
            getPackedSampler2D(h, r, n) {
              const u = n.unpackedShape, p = [
                n.width,
                n.height
              ], M = (0, f.getGlsl)(this.context.glContext.version), P = p[0], E = p[1];
              if (p != null && s.ArrayUtil.arraysEqual(u, p)) {
                const C = `vec4 ${h}(int row, int col) {
        vec2 uv = (vec2(col, row) + halfCR) / vec2(${E}.0, ${P}.0);
        return ${M.texture2D}(${r}, uv);
      }`;
                return new l.GlslLibRoutine(C);
              }
              const k = p, $ = Math.ceil(u[1] / 2), A = `vec4 ${h}(int row, int col) {
      vec2 uv = packedUVfrom2D(${k[1]}, ${k[0]}, ${$}, row, col);
      return ${M.texture2D}(${r}, uv);
    }`;
              return new l.GlslLibRoutine(A, [
                "coordinates.packedUVfrom2D"
              ]);
            }
            getPackedSampler3D(h, r, n) {
              const u = n.unpackedShape, p = [
                n.width,
                n.height
              ], M = [
                p[0],
                p[1]
              ], P = (0, f.getGlsl)(this.context.glContext.version);
              if (u[0] === 1) {
                const C = u.slice(1), F = [
                  1,
                  2
                ], D = (0, w.squeezeInputShape)(u, C), N = [
                  "b",
                  "row",
                  "col"
                ], R = JSON.parse(JSON.stringify(n));
                R.unpackedShape = D;
                const j = this.getPackedSamplerFromInput(h, r, R), Z = `${j.routineBody}
      vec4 ${h}(int b, int row, int col) {
        return ${h}(${(0, w.getSqueezedParams)(N, F)});
      } `;
                return new l.GlslLibRoutine(Z, j.dependencies);
              }
              const E = M[0], k = M[1], $ = Math.ceil(u[2] / 2), A = `vec4 ${h}(int b, int row, int col) {
      vec2 uv = packedUVfrom3D(
        ${k}, ${E}, ${$ * Math.ceil(u[1] / 2)}, ${$}, b, row, col);
      return ${P.texture2D}(${r}, uv);}`;
              return new l.GlslLibRoutine(A, [
                "coordinates.packedUVfrom3D"
              ]);
            }
            getPackedSamplerND(h, r, n) {
              const u = n.unpackedShape, p = u.length, M = [
                n.width,
                n.height
              ], P = (0, f.getGlsl)(this.context.glContext.version), E = [
                M[0],
                M[1]
              ], k = E[1], $ = E[0], A = Math.ceil(u[p - 1] / 2);
              let C = A * Math.ceil(u[p - 2] / 2), F = "int b, int row, int col", D = `b * ${C} + (row / 2) * ${A} + (col / 2)`;
              for (let R = 2; R < p - 1; R++)
                F = `int b${R}, ` + F, C *= u[p - R - 1], D = `b${R} * ${C} + ` + D;
              const N = `vec4 ${h}(${F}) {
      int index = ${D};
      int texR = index / ${$};
      int texC = index - texR * ${$};
      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${$}, ${k});
      return ${P.texture2D}(${r}, uv);
    }`;
              return new l.GlslLibRoutine(N);
            }
            getUnpackedSamplerScalar(h, r, n) {
              const [u, p] = [
                n.width,
                n.height
              ];
              if (u === 1 && p === 1) {
                const P = `
          float ${h}() {
            return sampleTexture(${r}, halfCR);
          }
        `;
                return new l.GlslLibRoutine(P, [
                  "coordinates.sampleTexture"
                ]);
              }
              const M = `
        float ${h}() {
          int offset_${r} = coordsToOffset(TexCoords, ${u}, ${p});
          vec2 uv = uvFromFlat(${u}, ${p}, offset_${r});
          return sampleTexture(${r}, uv);
        }
      `;
              return new l.GlslLibRoutine(M, [
                "coordinates.uvFromFlat",
                "coordinates.sampleTexture",
                "coordinates.coordsToOffset"
              ]);
            }
            getUnpackedSampler1D(h, r, n) {
              const u = n.width, p = n.height;
              if (p === 1 && u === 1) {
                const P = `
        float ${h}(int index) {
          return sampleTexture(${r}, halfCR);
        }
      `;
                return new l.GlslLibRoutine(P, [
                  "coordinates.sampleTexture"
                ]);
              }
              if (p === 1) {
                const P = `
          float ${h}(int index) {
            vec2 uv = vec2((float(index) + 0.5) / ${u}.0, 0.5);
            return sampleTexture(${r}, uv);
          }
        `;
                return new l.GlslLibRoutine(P, [
                  "coordinates.sampleTexture"
                ]);
              }
              if (u === 1) {
                const P = `
          float ${h}(int index) {
            vec2 uv = vec2(0.5, (float(index) + 0.5) / ${p}.0);
            return sampleTexture(${r}, uv);
          }
        `;
                return new l.GlslLibRoutine(P, [
                  "coordinates.sampleTexture"
                ]);
              }
              const M = `
        float ${h}(int index) {
          vec2 uv = uvFromFlat(${u}, ${p}, index);
          return sampleTexture(${r}, uv);
        }
      `;
              return new l.GlslLibRoutine(M, [
                "coordinates.uvFromFlat",
                "coordinates.sampleTexture"
              ]);
            }
            getUnpackedSampler2D(h, r, n) {
              const u = n.unpackedShape, p = [
                n.height,
                n.width
              ];
              if (p != null && s.ArrayUtil.arraysEqual(u, p)) {
                const C = `
          float ${h}(int row, int col) {
            vec2 uv = (vec2(row, col) + halfCR) / vec2(${p[1]}.0, ${p[0]}.0);
            return sampleTexture(${r}, uv);
          }
        `;
                return new l.GlslLibRoutine(C, [
                  "coordinates.sampleTexture"
                ]);
              }
              const { newShape: M, keptDims: P } = (0, d.squeezeShape)(u), E = M;
              if (E.length < u.length) {
                const C = (0, w.squeezeInputShape)(u, E), F = JSON.parse(JSON.stringify(n));
                F.unpackedShape = C;
                const D = [
                  "col",
                  "row"
                ], N = `
          ${this.getUnpackedSamplerFromInput(h, r, F).routineBody}
          float ${h}(int row, int col) {
            return ${h}(${(0, w.getSqueezedParams)(D, P)});
          }
        `;
                return new l.GlslLibRoutine(N, [
                  "coordinates.sampleTexture"
                ]);
              }
              const k = p[1], $ = p[0];
              if ($ === 1) {
                const C = `
          float ${h}(int row, int col) {
            int offset_${r} = coordsToOffset(TexCoords, ${k}, ${$});
            float index = dot(vec3(row, col, offset_${r}), vec3(${u[1]}, 1, 1));
            vec2 uv = vec2(0.5, (index + 0.5) / ${k}.0);
            return sampleTexture(${r}, uv);
          }
        `;
                return new l.GlslLibRoutine(C, [
                  "coordinates.sampleTexture",
                  "coordinates.coordsToOffset"
                ]);
              }
              if (k === 1) {
                const C = `
          float ${h}(int row, int col) {
            int offset_${r} = coordsToOffset(TexCoords, ${k}, ${$});
            float index = dot(vec3(row, col, offset_${r}), vec3(${u[1]}, 1, 1));
            vec2 uv = vec2((index + 0.5) / ${$}.0, 0.5);
            return sampleTexture(${r}, uv);
          }
        `;
                return new l.GlslLibRoutine(C, [
                  "coordinates.sampleTexture",
                  "coordinates.coordsToOffset"
                ]);
              }
              const A = `
        float ${h}(int row, int col) {
          int index = col * ${u[1]} + row;
          vec2 uv = uvFromFlat(${k}, ${$}, index);
          return sampleTexture(${r}, uv);
        }
      `;
              return new l.GlslLibRoutine(A, [
                "coordinates.uvFromFlat",
                "coordinates.sampleTexture",
                "coordinates.coordsToOffset"
              ]);
            }
            getUnpackedSampler3D(h, r, n) {
              const u = n.unpackedShape, p = u[1] * u[2], M = u[2], { newShape: P, keptDims: E } = (0, d.squeezeShape)(u), k = P;
              if (k.length < u.length) {
                const A = (0, w.squeezeInputShape)(u, k), C = [
                  "batch",
                  "col",
                  "row"
                ], F = JSON.parse(JSON.stringify(n));
                F.unpackedShape = A;
                const D = this.getUnpackedSamplerFromInput(h, r, F), N = E.reverse(), R = `
          ${D.routineBody}
          float ${h}(int batch, int row, int col) {
            return ${h}(${(0, w.getSqueezedParams)(C, N)});
          }
        `;
                return new l.GlslLibRoutine(R, D.dependencies);
              }
              const $ = `
          float ${h}(int depth, int row, int col) {
            // Explicitly use integer operations as dot() only works on floats.
            int index = depth * ${p} + col * ${M} + row;
            vec2 uv = uvFromFlat(${n.width}, ${n.height}, index);
            return sampleTexture(${r}, uv);
          }
      `;
              return new l.GlslLibRoutine($, [
                "coordinates.uvFromFlat",
                "coordinates.sampleTexture",
                "coordinates.coordsToOffset"
              ]);
            }
            getUnpackedSampler4D(h, r, n) {
              const u = n.unpackedShape, p = u[3], M = u[2] * p, P = `
        float ${h}(int row, int col, int depth, int depth2) {
          int index = row * ${u[1] * M} + col * ${M} +
              depth2 * ${p} + depth;
          vec2 uv = uvFromFlat(${n.width}, ${n.height}, index);
          return sampleTexture(${r}, uv);
        }
      `;
              return new l.GlslLibRoutine(P, [
                "coordinates.uvFromFlat",
                "coordinates.sampleTexture"
              ]);
            }
            getUnpackedSampler5D(h, r, n) {
              const u = n.unpackedShape, p = u[4], M = u[3] * p, P = u[2] * M, E = u[1] * P, { newShape: k, keptDims: $ } = (0, d.squeezeShape)(u);
              if (k.length < u.length) {
                const C = (0, w.squeezeInputShape)(u, k), F = [
                  "row",
                  "col",
                  "depth",
                  "depth2",
                  "depth3"
                ], D = JSON.parse(JSON.stringify(n));
                D.unpackedShape = C;
                const N = `
          ${this.getUnpackedSamplerFromInput(h, r, D).routineBody}
          float ${h}(int row, int col, int depth, int depth2, int depth3) {
            return ${h}(${(0, w.getSqueezedParams)(F, $)});
          }
        `;
                return new l.GlslLibRoutine(N, [
                  "coordinates.sampleTexture",
                  "coordinates.uvFromFlat"
                ]);
              }
              const A = `
        float ${h}(int row, int col, int depth, int depth2, int depth3) {
          int index = row * ${E} + col * ${P} + depth * ${M} +
          depth3 * ${p} + depth2;
          vec2 uv = uvFromFlat(${n.width}, ${n.height}, index);
          return sampleTexture(${r}, uv);
        }
      `;
              return new l.GlslLibRoutine(A, [
                "coordinates.sampleTexture",
                "coordinates.uvFromFlat"
              ]);
            }
            getUnpackedSampler6D(h, r, n) {
              const u = n.unpackedShape, p = u[5], M = u[4] * p, P = u[3] * M, E = u[2] * P, k = u[1] * E, { newShape: $, keptDims: A } = (0, d.squeezeShape)(u);
              if ($.length < u.length) {
                const F = (0, w.squeezeInputShape)(u, $), D = [
                  "row",
                  "col",
                  "depth",
                  "depth2",
                  "depth3",
                  "depth4"
                ], N = JSON.parse(JSON.stringify(n));
                N.unpackedShape = F;
                const R = `
            ${this.getUnpackedSamplerFromInput(h, r, N).routineBody}
            float ${h}(int row, int col, int depth,
              int depth2, int depth3, int depth4) {
              return ${h}(${(0, w.getSqueezedParams)(D, A)});
            }
          `;
                return new l.GlslLibRoutine(R, [
                  "coordinates.sampleTexture",
                  "coordinates.uvFromFlat"
                ]);
              }
              const C = `
          float ${h}(int row, int col, int depth,
            int depth2, int depth3, int depth4) {
            int index = row * ${k} + col * ${E} + depth * ${P} +
            depth2 * ${M} + depth3 * ${p} + depth4;
            vec2 uv = uvFromFlat(${n.width}, ${n.height}, index);
            return sampleTexture(${r}, uv);
          }
        `;
              return new l.GlslLibRoutine(C, [
                "coordinates.uvFromFlat",
                "coordinates.sampleTexture",
                "coordinates.coordsToOffset"
              ]);
            }
            toVec() {
              const h = this.context.outputTextureLayout, r = h.shape.length, n = h.strides, u = h.width, p = h.height, M = [];
              for (let E = 0; E < r - 1; ++E)
                M.push(`
        c[${E}] = offset / ${n[E]};`), M.push(`
        offset -= c[${E}] * ${n[E]};`);
              M.push(`
        c[${r - 1}] = offset;`);
              const P = `
      void toVec(vec2 texCoords, out int c[${r}]) {
        int offset = coordsToOffset(texCoords, ${u}, ${p});
        ${M.join("")}
      }
      void toVec(int offset, out int c[${r}]) {
        ${M.join("")}
      }
    `;
              return {
                toVec: new l.GlslLibRoutine(P, [
                  "coordinates.coordsToOffset"
                ])
              };
            }
            valueFrom() {
              const h = {};
              return this.context.programInfo.inputNames.forEach((r, n) => {
                const u = this.context.inputTextureLayouts[n], p = (u.unpackedShape.length > 0 ? u.unpackedShape : u.shape).length;
                let M = `_${r}`;
                h[M] = new l.GlslLibRoutine(this.getValueFromSingle(r, p, u.width, u.height, false), [
                  `shapeUtils.indicesToOffset${M}`,
                  "coordinates.offsetToCoords",
                  "fragcolor.getColorAsFloat"
                ]), M += "_T", h[M] = new l.GlslLibRoutine(this.getValueFromSingle(r, p, u.width, u.height, true), [
                  `shapeUtils.indicesToOffset${M}`,
                  "coordinates.offsetToCoords",
                  "fragcolor.getColorAsFloat"
                ]);
              }), h;
            }
            getValueFromSingle(h, r, n, u, p) {
              let M = `_${h}`;
              return p && (M += "_T"), `
        float ${M}(int m[${r}]) {
          int offset = indicesToOffset${M}(m);
          vec2 coords = offsetToCoords(offset, ${n}, ${u});
          float value = getColorAsFloat(${(0, f.getGlsl)(this.context.glContext.version).texture2D}(${h}, coords));
          return value;
        }
        `;
            }
            getPackedValueFrom(h, r, n, u, p) {
              let M = `_${h}_Pack`;
              return p && (M += "_T"), `
        vec4 ${M}(int m[${r}]) {
          int offset = indicesToOffset_${h}(m);
          vec2 coords = offsetToCoords(offset, ${n}, ${u});
          return ${(0, f.getGlsl)(this.context.glContext.version).texture2D}(${h}, coords);
        }
        `;
            }
          }
          e.CoordsGlslLib = g;
        },
        8520: (i, e) => {
          var t;
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.TopologicalSortGlslRoutines = e.GlslLibRoutineNode = e.GlslLibRoutine = e.GlslLib = e.GlslContext = e.FunctionType = void 0, (t = e.FunctionType || (e.FunctionType = {}))[t.ValueBased = 0] = "ValueBased", t[t.Positional = 1] = "Positional", e.GlslContext = class {
            constructor(s, l, f, d) {
              this.glContext = s, this.programInfo = l, this.inputTextureLayouts = f, this.outputTextureLayout = d;
            }
          }, e.GlslLib = class {
            constructor(s) {
              this.context = s;
            }
          }, e.GlslLibRoutine = class {
            constructor(s, l) {
              this.routineBody = s, this.dependencies = l;
            }
          }, e.GlslLibRoutineNode = class {
            constructor(s, l, f) {
              this.name = s, this.dependencies = f || [], l && (this.routineBody = l);
            }
            addDependency(s) {
              s && this.dependencies.push(s);
            }
          }, e.TopologicalSortGlslRoutines = class {
            static returnOrderedNodes(s) {
              if (!s || s.length === 0)
                return [];
              if (s.length === 1)
                return s;
              const l = /* @__PURE__ */ new Set(), f = /* @__PURE__ */ new Set(), d = new Array();
              return this.createOrderedNodes(s, l, f, d), d;
            }
            static createOrderedNodes(s, l, f, d) {
              for (let w = 0; w < s.length; ++w)
                this.dfsTraverse(s[w], l, f, d);
            }
            static dfsTraverse(s, l, f, d) {
              if (!s || f.has(s.name))
                return;
              if (l.has(s.name))
                throw new Error("Cyclic dependency detected. Can't topologically sort routines needed for shader.");
              l.add(s.name);
              const w = s.dependencies;
              if (w && w.length > 0)
                for (let g = 0; g < w.length; ++g)
                  this.dfsTraverse(w[g], l, f, d);
              d.push(s), f.add(s.name), l.delete(s.name);
            }
          };
        },
        7341: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.EncodingGlslLib = void 0;
          const s = t(8520);
          class l extends s.GlslLib {
            constructor(d) {
              super(d);
            }
            getFunctions() {
              return Object.assign(Object.assign({}, this.encodeFloat32()), this.decodeFloat32());
            }
            getCustomTypes() {
              return {};
            }
            encodeFloat32() {
              return {
                encode: new s.GlslLibRoutine(`highp vec4 encode(highp float f) {
        return vec4(f, 0.0, 0.0, 0.0);
      }
        `)
              };
            }
            decodeFloat32() {
              return {
                decode: new s.GlslLibRoutine(`highp float decode(highp vec4 rgba) {
        return rgba.r;
      }
        `)
              };
            }
            encodeUint8() {
              const d = l.isLittleEndian() ? "rgba.rgba=rgba.abgr;" : "";
              return {
                encode: new s.GlslLibRoutine(`
      highp vec4 encode(highp float f) {
        highp float F = abs(f);
        highp float Sign = step(0.0,-f);
        highp float Exponent = floor(log2(F));
        highp float Mantissa = (exp2(- Exponent) * F);
        Exponent = floor(log2(F) + 127.0) + floor(log2(Mantissa));
        highp vec4 rgba;
        rgba[0] = 128.0 * Sign  + floor(Exponent*exp2(-1.0));
        rgba[1] = 128.0 * mod(Exponent,2.0) + mod(floor(Mantissa*128.0),128.0);
        rgba[2] = floor(mod(floor(Mantissa*exp2(23.0 -8.0)),exp2(8.0)));
        rgba[3] = floor(exp2(23.0)*mod(Mantissa,exp2(-15.0)));
        ${d}
        rgba = rgba / 255.0; // values need to be normalized to [0,1]
        return rgba;
    }
        `)
              };
            }
            decodeUint8() {
              const d = l.isLittleEndian() ? "rgba.rgba=rgba.abgr;" : "";
              return {
                decode: new s.GlslLibRoutine(`
        highp float decode(highp vec4 rgba) {
          rgba = rgba * 255.0; // values need to be de-normalized from [0,1] to [0,255]
          ${d}
          highp float Sign = 1.0 - step(128.0,rgba[0])*2.0;
          highp float Exponent = 2.0 * mod(rgba[0],128.0) + step(128.0,rgba[1]) - 127.0;
          highp float Mantissa = mod(rgba[1],128.0)*65536.0 + rgba[2]*256.0 +rgba[3] + float(0x800000);
          highp float Result =  Sign * exp2(Exponent) * (Mantissa * exp2(-23.0 ));
          return Result;
      }
        `)
              };
            }
            static isLittleEndian() {
              const d = new ArrayBuffer(4), w = new Uint32Array(d), g = new Uint8Array(d);
              if (w[0] = 3735928559, g[0] === 239)
                return true;
              if (g[0] === 222)
                return false;
              throw new Error("unknown endianness");
            }
          }
          e.EncodingGlslLib = l;
        },
        9894: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.FragColorGlslLib = void 0;
          const s = t(8520), l = t(5060);
          class f extends s.GlslLib {
            constructor(w) {
              super(w);
            }
            getFunctions() {
              return Object.assign(Object.assign({}, this.setFragColor()), this.getColorAsFloat());
            }
            getCustomTypes() {
              return {};
            }
            setFragColor() {
              const w = (0, l.getGlsl)(this.context.glContext.version);
              return {
                setFragColor: new s.GlslLibRoutine(`
        void setFragColor(float value) {
            ${w.output} = encode(value);
        }
        `, [
                  "encoding.encode"
                ])
              };
            }
            getColorAsFloat() {
              return {
                getColorAsFloat: new s.GlslLibRoutine(`
        float getColorAsFloat(vec4 color) {
            return decode(color);
        }
        `, [
                  "encoding.decode"
                ])
              };
            }
          }
          e.FragColorGlslLib = f;
        },
        2848: (i, e) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.replaceInlines = void 0;
          const t = /@inline[\s\n\r]+(\w+)[\s\n\r]+([0-9a-zA-Z_]+)\s*\(([^)]*)\)\s*{(([^}]|[\n\r])*)}/gm;
          e.replaceInlines = function(s) {
            const l = {};
            let f;
            for (; (f = t.exec(s)) !== null; ) {
              const d = f[3].split(",").map((w) => {
                const g = w.trim().split(" ");
                return g && g.length === 2 ? {
                  type: g[0],
                  name: g[1]
                } : null;
              }).filter((w) => w !== null);
              l[f[2]] = {
                params: d,
                body: f[4]
              };
            }
            for (const d in l) {
              const w = "(\\w+)?\\s+([_0-9a-zA-Z]+)\\s+=\\s+__FUNC__\\((.*)\\)\\s*;".replace("__FUNC__", d), g = new RegExp(w, "gm");
              for (; (f = g.exec(s)) !== null; ) {
                const _ = f[1], h = f[2], r = f[3].split(","), n = _ ? `${_} ${h};` : "";
                let u = l[d].body, p = "";
                l[d].params.forEach((P, E) => {
                  P && (p += `${P.type} ${P.name} = ${r[E]};
`);
                }), u = `${p}
 ${u}`, u = u.replace("return", `${h} = `);
                const M = `
      ${n}
      {
        ${u}
      }
      `;
                s = s.replace(f[0], M);
              }
            }
            return s.replace(t, "");
          };
        },
        8879: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.GlslPreprocessor = void 0;
          const s = t(8520), l = t(2848), f = t(5483), d = t(5060);
          e.GlslPreprocessor = class {
            constructor(w, g, _, h) {
              this.libs = {}, this.glslLibRoutineDependencyGraph = {}, this.context = new s.GlslContext(w, g, _, h), Object.keys(f.glslRegistry).forEach((n) => {
                const u = new f.glslRegistry[n](this.context);
                this.libs[n] = u;
              });
              const r = this.glslLibRoutineDependencyGraph;
              for (const n in this.libs) {
                const u = this.libs[n].getFunctions();
                for (const p in u) {
                  const M = n + "." + p;
                  let P;
                  r[M] ? (P = r[M], P.routineBody = u[p].routineBody) : (P = new s.GlslLibRoutineNode(M, u[p].routineBody), r[M] = P);
                  const E = u[p].dependencies;
                  if (E)
                    for (let k = 0; k < E.length; ++k)
                      if (r[E[k]])
                        P.addDependency(r[E[k]]);
                      else {
                        const $ = new s.GlslLibRoutineNode(E[k]);
                        r[E[k]] = $, P.addDependency($);
                      }
                }
              }
            }
            preprocess() {
              const w = this.context.programInfo;
              let g = w.shaderSource;
              return this.context.programInfo.hasMain || (g = `${g}
      ${(0, d.getDefaultFragShaderMain)(this.context.glContext.version, this.context.outputTextureLayout.shape.length)}`), g = (0, l.replaceInlines)(g), `${(0, d.getFragShaderPreamble)(this.context.glContext.version)}
    ${this.getUniforms(w.inputNames, w.variables)}
    ${this.getImports(g)}
    ${g}`;
            }
            getImports(w) {
              const g = this.selectGlslLibRoutinesToBeIncluded(w);
              if (g.length === 0)
                return "";
              let _ = "";
              for (let h = 0; h < g.length; ++h) {
                if (!g[h].routineBody)
                  throw new Error(`Missing body for the Glsl Library routine: ${g[h].name}`);
                _ += g[h].routineBody + `
`;
              }
              return _;
            }
            selectGlslLibRoutinesToBeIncluded(w) {
              const g = [];
              return Object.keys(this.glslLibRoutineDependencyGraph).forEach((_) => {
                const h = _.split(".")[1];
                w.indexOf(h) !== -1 && g.push(this.glslLibRoutineDependencyGraph[_]);
              }), s.TopologicalSortGlslRoutines.returnOrderedNodes(g);
            }
            getUniforms(w, g) {
              const _ = [];
              if (w)
                for (const h of w)
                  _.push(`uniform sampler2D ${h};`);
              if (g)
                for (const h of g)
                  _.push(`uniform ${h.type} ${h.name}${h.arrayLength ? `[${h.arrayLength}]` : ""};`);
              return _.join(`
`);
            }
          };
        },
        5483: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.glslRegistry = void 0;
          const s = t(5107), l = t(7341), f = t(9894), d = t(2655), w = t(3891);
          e.glslRegistry = {
            encoding: l.EncodingGlslLib,
            fragcolor: f.FragColorGlslLib,
            vec: w.VecGlslLib,
            shapeUtils: d.ShapeUtilsGlslLib,
            coordinates: s.CoordsGlslLib
          };
        },
        2655: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.ShapeUtilsGlslLib = void 0;
          const s = t(8520);
          class l extends s.GlslLib {
            constructor(d) {
              super(d);
            }
            getFunctions() {
              return Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, this.bcastIndex()), this.bcastMatmulIndex()), this.offsetToIndices()), this.indicesToOffset()), this.incrementIndices());
            }
            getCustomTypes() {
              return {};
            }
            bcastIndex() {
              const d = this.context.outputTextureLayout.shape.length, w = {};
              return this.context.programInfo.inputNames.forEach((g, _) => {
                const h = this.context.inputTextureLayouts[_].unpackedShape;
                if (h.length <= d) {
                  const r = h.length, n = d - r, u = `bcastIndices_${g}`;
                  let p = "";
                  for (let P = 0; P < r; ++P)
                    p += `
          realIndices[${P}] = int( mod(float(bcastedIndices[${n + P}]), ${h[P]}.0) );
          `;
                  const M = `
        void ${u} (int bcastedIndices[${d}], out int realIndices[${r}]) {
          ${p}
        }
        `;
                  w[u] = new s.GlslLibRoutine(M);
                }
              }), w;
            }
            bcastMatmulIndex() {
              const d = this.context.outputTextureLayout.shape.length, w = {};
              return this.context.programInfo.inputNames.forEach((g, _) => {
                const h = this.context.inputTextureLayouts[_].shape;
                if (!(h.length < 2 || h.length > d)) {
                  const r = h.length, n = d - r, u = `bcastMatmulIndices_${g}`;
                  let p = "";
                  for (let P = 0; P < r - 2; ++P)
                    p += `
          realIndices[${P}] = int( mod(float(bcastedIndices[${n + P}]), ${h[P]}.0) );
          `;
                  const M = `
        void ${u}(int bcastedIndices[${d}], out int realIndices[${r}]) {
          ${p}
          realIndices[${r - 1}] = bcastedIndices[${d - 1}];
          realIndices[${r - 2}] = bcastedIndices[${d - 2}];
        }
        `;
                  w[u] = new s.GlslLibRoutine(M);
                }
              }), w;
            }
            indicesToOffset() {
              const d = {};
              return this.context.programInfo.inputNames.forEach((w, g) => {
                const _ = this.context.inputTextureLayouts[g].shape, h = this.context.inputTextureLayouts[g].strides, r = _.length;
                let n = `indicesToOffset_${w}`;
                d[n] = new s.GlslLibRoutine(l.indexToOffsetSingle(n, r, h)), n = `indicesToOffset_${w}_T`, d[n] = new s.GlslLibRoutine(l.indexToOffsetSingle(n, r, h.slice().reverse()));
              }), d;
            }
            static indexToOffsetSingle(d, w, g) {
              let _ = "";
              for (let h = w - 1; h >= 0; --h)
                _ += `
        offset += indices[${h}] * ${g[h]};
        `;
              return `
      int ${d}(int indices[${w}]) {
        int offset = 0;
        ${_}
        return offset;
      }
      `;
            }
            offsetToIndices() {
              const d = {};
              return this.context.programInfo.inputNames.forEach((w, g) => {
                const _ = this.context.inputTextureLayouts[g].shape, h = this.context.inputTextureLayouts[g].strides, r = _.length;
                let n = `offsetToIndices_${w}`;
                d[n] = new s.GlslLibRoutine(l.offsetToIndicesSingle(n, r, h)), n = `offsetToIndices_${w}_T`, d[n] = new s.GlslLibRoutine(l.offsetToIndicesSingle(n, r, h.slice().reverse()));
              }), d;
            }
            static offsetToIndicesSingle(d, w, g) {
              const _ = [];
              for (let h = 0; h < w - 1; ++h)
                _.push(`
      indices[${h}] = offset / ${g[h]};`), _.push(`
        offset -= indices[${h}] * ${g[h]};`);
              return _.push(`
      indices[${w - 1}] = offset;`), `
      void ${d}(int offset, out int indices[${w}]) {
        ${_.join("")}
      }
      `;
            }
            incrementIndices() {
              const d = {};
              return this.context.programInfo.inputNames.forEach((w, g) => {
                const _ = this.context.inputTextureLayouts[g].shape, h = _.length, r = `incrementIndices_${w}`;
                let n = "";
                for (let p = 0; p < h; ++p)
                  n += `
        shape[${p}] = ${_[p]};`;
                const u = `
        void ${r}(int axis, out int indices[${h}]) {
          int shape[${h}];
          ${n};
          for(int i = ${h} -1 ; i >= 0; --i) {
            if(i > axis) continue;
            indices[i] += 1;
            if(indices[i] < shape[i]) {
              break;
            }
            indices[i] = 0;
          }
        }
        `;
                d[r] = new s.GlslLibRoutine(u);
              }), d;
            }
          }
          e.ShapeUtilsGlslLib = l;
        },
        5060: (i, e) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.getDefaultFragShaderMain = e.getFragShaderPreamble = e.getVertexShaderSource = e.getGlsl = void 0;
          const t = {
            version: "",
            attribute: "attribute",
            varyingVertex: "varying",
            varyingFrag: "varying",
            texture2D: "texture2D",
            output: "gl_FragColor",
            outputDeclaration: ""
          }, s = {
            version: "#version 300 es",
            attribute: "in",
            varyingVertex: "out",
            varyingFrag: "in",
            texture2D: "texture",
            output: "outputColor",
            outputDeclaration: "out vec4 outputColor;"
          };
          function l(f) {
            return f === 1 ? t : s;
          }
          e.getGlsl = l, e.getVertexShaderSource = function(f) {
            const d = l(f);
            return `${d.version}
      precision highp float;
      ${d.attribute} vec3 position;
      ${d.attribute} vec2 textureCoord;

      ${d.varyingVertex} vec2 TexCoords;

      void main()
      {
          gl_Position = vec4(position, 1.0);
          TexCoords = textureCoord;
      }`;
          }, e.getFragShaderPreamble = function(f) {
            const d = l(f);
            return `${d.version}
    precision highp float;
    precision highp int;
    precision highp sampler2D;
    ${d.varyingFrag} vec2 TexCoords;
    ${d.outputDeclaration}
    const vec2 halfCR = vec2(0.5, 0.5);

    // Custom vector types to handle higher dimenalities.
    struct ivec5
    {
      int x;
      int y;
      int z;
      int w;
      int u;
    };

    struct ivec6
    {
      int x;
      int y;
      int z;
      int w;
      int u;
      int v;
    };

    int imod(int x, int y) {
      return x - y * (x / y);
    }

    `;
          }, e.getDefaultFragShaderMain = function(f, d) {
            return `
  void main() {
    int indices[${d}];
    toVec(TexCoords, indices);
    vec4 result = vec4(process(indices));
    ${l(f).output} = result;
  }
  `;
          };
        },
        3891: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.VecGlslLib = void 0;
          const s = t(8520);
          class l extends s.GlslLib {
            constructor(d) {
              super(d);
            }
            getCustomTypes() {
              return {};
            }
            getFunctions() {
              return Object.assign(Object.assign(Object.assign(Object.assign({}, this.binaryVecFunctions()), this.copyVec()), this.setVecItem()), this.getVecItem());
            }
            binaryVecFunctions() {
              const d = this.context.outputTextureLayout.shape.length, w = {
                add: "+=",
                sub: "-=",
                mul: "*=",
                div: "/="
              }, g = {};
              for (const _ in w) {
                const h = `${_}Vec`;
                let r = "";
                for (let u = 0; u < d; ++u)
                  r += `
          dest[${u}] ${w[_]} src[${u}];
          `;
                const n = `
        void ${h}(int src[${d}], out int dest[${d}]) {
          ${r}
        }
        `;
                g[h] = new s.GlslLibRoutine(n);
              }
              return g;
            }
            copyVec() {
              const d = this.context.outputTextureLayout.shape.length;
              let w = "";
              for (let _ = 0; _ < d; ++_)
                w += `
        dest[${_}] = src[${_}];
        `;
              const g = `
      void copyVec(int src[${d}], out int dest[${d}]) {
        ${w}
      }
      `;
              return {
                copyVec: new s.GlslLibRoutine(g)
              };
            }
            setVecItem() {
              const d = this.context.outputTextureLayout.shape.length;
              let w = `
        if(index < 0)
            index =${d} + index;
        if (index == 0)
            m[0] = value;
        `;
              for (let _ = 1; _ < d - 1; ++_)
                w += `
        else if (index == ${_})
            m[${_}] = value;
            `;
              w += `
        else
            m[${d - 1}] = value;
        `;
              const g = `
      void setVecItem(out int m[${d}], int index, int value) {
        ${w}
      }
        `;
              return {
                setVecItem: new s.GlslLibRoutine(g)
              };
            }
            getVecItem() {
              const d = this.context.outputTextureLayout.shape.length;
              let w = `
        if(index < 0)
            index = ${d} + index;
        if (index == 0)
            return m[0];
      `;
              for (let _ = 1; _ < d - 1; ++_)
                w += `
        else if (index == ${_})
            return m[${_}];
      `;
              w += `
        else
            return m[${d - 1}];
        `;
              const g = `
      int getVecItem(int m[${d}], int index) {
        ${w}
      }
    `;
              return {
                getVecItem: new s.GlslLibRoutine(g)
              };
            }
          }
          e.VecGlslLib = l;
        },
        8316: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.WebGLInferenceHandler = void 0;
          const s = t(6231), l = t(9162), f = t(2517), d = t(2403), w = t(7019), g = t(8710), _ = t(5611), h = t(4057), r = t(2039);
          e.WebGLInferenceHandler = class {
            constructor(n) {
              this.session = n, this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
            }
            calculateTextureWidthAndHeight(n, u) {
              return (0, h.calculateTextureWidthAndHeight)(this.session.layoutStrategy, n, u);
            }
            executeProgram(n, u) {
              if (u.length < n.inputNames.length)
                throw new Error(`Input size mustn't be less than ${n.inputNames.length}.`);
              if (n.inputNames.length !== n.inputTypes.length)
                throw new Error("input names size does not match input types");
              const p = [];
              for (let A = 0; A < n.inputNames.length; ++A)
                p[A] = this.getOrCreateTextureData(u[A], n.inputTypes[A]);
              const M = ((A, C) => {
                const F = C.map((N) => `${N.unpackedShape.join(",")};${N.width}x${N.height}`).join("_");
                let D = A.name;
                return A.cacheHint && (D += "[" + A.cacheHint + "]"), D += ":" + F, D;
              })(n, p);
              let P = this.session.programManager.getArtifact(M);
              const E = P ? P.programInfo : typeof n.get == "function" ? n.get() : n, k = (0, h.createTextureLayoutFromTextureType)(this.session.layoutStrategy, E.output.dims, E.output.textureType), $ = this.createTextureData(k, E.output.type);
              return P || (P = this.session.programManager.build(E, p, $), this.session.programManager.setArtifact(M, P)), this.runProgram(P, p, $), $;
            }
            run(n, u) {
              return this.executeProgram(n, u).tensor;
            }
            runProgram(n, u, p) {
              for (let M = 0; M < u.length; ++M)
                if (!!u[M].isPacked != (n.programInfo.inputTypes[M] === r.TextureType.packed))
                  throw new Error(`input[${M}] property packed inconsistent`);
              if (!!p.isPacked != (n.programInfo.output.textureType === r.TextureType.packed))
                throw new Error("output property packed inconsistent");
              this.session.programManager.run(n, u, p);
            }
            getOrCreateTextureData(n, u) {
              let p = this.getTextureData(n.dataId, u === r.TextureType.packed);
              if (!p && (p = this.getTextureData(n.dataId, u !== r.TextureType.packed), p))
                return u === r.TextureType.packed ? this.pack(p) : this.unpack(p);
              if (!p) {
                const M = (0, h.createTextureLayoutFromTextureType)(this.session.layoutStrategy, n.dims, u);
                if (u === r.TextureType.packedLastDimension) {
                  const k = n.dims;
                  if (k.length === 4) {
                    const $ = [
                      k[0],
                      Math.ceil(k[1] * k[2] * k[3] / 4)
                    ], A = (0, h.createTextureLayoutFromTextureType)(this.session.layoutStrategy, $, u);
                    let C = n.numberData;
                    if (k[1] * k[2] * k[3] % 4 != 0) {
                      const F = k[0], D = k[1] * k[2] * k[3], N = Math.ceil(D * 1 / 4) * 4;
                      C = new Float32Array(F * N);
                      for (let R = 0; R < F; ++R) {
                        const j = R * D, Z = R * N + R % 1 * D;
                        C.set(n.numberData.subarray(j, j + D), Z);
                      }
                    }
                    return this.createTextureData(A, n.type, C, n, 1);
                  }
                }
                if (u === r.TextureType.packed) {
                  const P = (0, h.createTextureLayoutFromShape)(this.session.layoutStrategy, n.dims, 1, [], {
                    reverseWH: true
                  }), E = this.createTextureData(P, n.type, n.numberData, n, 1);
                  p = this.pack(E);
                } else
                  p = this.createTextureData(M, n.type, n.numberData, n, 1);
              }
              return p;
            }
            createTextureDataFromLayoutBindTensor(n, u, p, M) {
              return this.createTextureData(n, u, p, M, 1);
            }
            createTextureData(n, u, p, M, P) {
              s.Logger.verbose("InferenceHandler", `Creating TextureData: layout:[${JSON.stringify(n)}]`);
              const E = this.session.textureManager.createTextureFromLayout(u, n, p, P);
              return this.createTextureDataFromTexture(n, u, E, M);
            }
            reshapeUnpacked(n, u) {
              const p = this.getOrCreateTextureData(n, r.TextureType.unpacked), M = {
                channels: p.channels,
                height: p.height,
                width: p.width,
                shape: u.length !== 0 ? u : [
                  1
                ],
                strides: f.ShapeUtil.computeStrides(u),
                unpackedShape: u
              };
              return this.createTextureDataFromTexture(M, n.type, p.texture).tensor;
            }
            reshapePacked(n, u) {
              const p = this.getOrCreateTextureData(n, r.TextureType.packed);
              if ((0, w.isReshapeCheap)(n.dims, u)) {
                const $ = {
                  channels: p.channels,
                  height: p.height,
                  width: p.width,
                  shape: u.length !== 0 ? u : [
                    1
                  ],
                  strides: f.ShapeUtil.computeStrides(u),
                  unpackedShape: u,
                  isPacked: true
                };
                return this.createTextureDataFromTexture($, n.type, p.texture).tensor;
              }
              const M = (0, w.processDims3D)(n.dims), P = (0, w.processDims3D)(u), E = this.reshapePacked(n, M), k = this.run((0, w.createPackedReshape3DProgramInfoLoader)(this, E, P), [
                E
              ]);
              return this.reshapePacked(k, u);
            }
            cast(n, u) {
              const p = this.getOrCreateTextureData(n, r.TextureType.unpacked);
              return this.createTextureDataFromTexture(p, u, p.texture).tensor;
            }
            createTextureDataFromTexture(n, u, p, M, P) {
              const E = Object.assign(Object.assign({}, n), {
                tensor: M || new l.Tensor(n.unpackedShape, u, (k) => this.readTexture(E), async (k) => this.readTextureAsync(E), void 0, P),
                texture: p
              });
              return this.setTextureData(E.tensor.dataId, E, n.isPacked), E;
            }
            getTextureData(n, u = false) {
              return this.session.isInitializer(n) ? this.session.getTextureData(n, u) : u ? this.packedTextureDataCache.get(n) : this.unpackedTextureDataCache.get(n);
            }
            setTextureData(n, u, p = false) {
              this.session.isInitializer(n) ? this.session.setTextureData(n, u, p) : (p ? this.packedTextureDataCache : this.unpackedTextureDataCache).set(n, u);
            }
            isTextureLayoutCached(n, u = false) {
              return !!this.getTextureData(n.dataId, u);
            }
            dispose() {
              this.session.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((n) => this.session.textureManager.releaseTexture(n)), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache.forEach((n) => this.session.textureManager.releaseTexture(n)), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
            }
            readTexture(n) {
              return n.isPacked ? this.readTexture(this.unpack(n)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTexture(n, n.tensor.type, n.channels) : this.session.textureManager.readUint8TextureAsFloat((0, g.encodeAsUint8)(this, n));
            }
            async readTextureAsync(n) {
              return n.isPacked ? this.readTextureAsync(this.unpack(n)) : this.session.backend.glContext.isFloat32DownloadSupported ? this.session.textureManager.readTextureAsync(n, n.tensor.type, n.channels) : this.session.textureManager.readUint8TextureAsFloat((0, g.encodeAsUint8)(this, n));
            }
            pack(n) {
              return this.executeProgram((0, d.createPackProgramInfoLoader)(this, n.tensor), [
                n.tensor
              ]);
            }
            unpack(n) {
              return this.executeProgram((0, _.createUnpackProgramInfoLoader)(this, n.tensor), [
                n.tensor
              ]);
            }
          };
        },
        1640: function(i, e, t) {
          var s = this && this.__createBinding || (Object.create ? function(fe, Me, pe, oe) {
            oe === void 0 && (oe = pe);
            var be = Object.getOwnPropertyDescriptor(Me, pe);
            be && !("get" in be ? !Me.__esModule : be.writable || be.configurable) || (be = {
              enumerable: true,
              get: function() {
                return Me[pe];
              }
            }), Object.defineProperty(fe, oe, be);
          } : function(fe, Me, pe, oe) {
            oe === void 0 && (oe = pe), fe[oe] = Me[pe];
          }), l = this && this.__setModuleDefault || (Object.create ? function(fe, Me) {
            Object.defineProperty(fe, "default", {
              enumerable: true,
              value: Me
            });
          } : function(fe, Me) {
            fe.default = Me;
          }), f = this && this.__importStar || function(fe) {
            if (fe && fe.__esModule)
              return fe;
            var Me = {};
            if (fe != null)
              for (var pe in fe)
                pe !== "default" && Object.prototype.hasOwnProperty.call(fe, pe) && s(Me, fe, pe);
            return l(Me, fe), Me;
          };
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.WEBGL_OP_RESOLVE_RULES = void 0;
          const d = t(2898), w = f(t(7839)), g = t(4196), _ = t(2069), h = t(8138), r = t(9663), n = t(5193), u = t(7992), p = t(1253), M = t(4776), P = t(6572), E = t(3346), k = t(5623), $ = t(2870), A = t(2143), C = t(4939), F = t(718), D = t(2268), N = t(8117), R = t(2278), j = t(5524), Z = t(5975), te = t(3933), J = t(6558), G = t(5723), H = t(3738), U = f(t(4909)), Q = t(8428), he = t(9793);
          e.WEBGL_OP_RESOLVE_RULES = [
            [
              "Abs",
              "",
              "6+",
              U.abs
            ],
            [
              "Acos",
              "",
              "7+",
              U.acos
            ],
            [
              "Add",
              "",
              "7+",
              w.add
            ],
            [
              "And",
              "",
              "7+",
              w.and
            ],
            [
              "Asin",
              "",
              "7+",
              U.asin
            ],
            [
              "Atan",
              "",
              "7+",
              U.atan
            ],
            [
              "AveragePool",
              "",
              "7+",
              A.averagePool,
              A.parseAveragePoolAttributes
            ],
            [
              "BatchNormalization",
              "",
              "7+",
              d.batchNormalization,
              d.parseBatchNormalizationAttributes
            ],
            [
              "Cast",
              "",
              "6+",
              g.cast,
              g.parseCastAttributes
            ],
            [
              "Ceil",
              "",
              "6+",
              U.ceil
            ],
            [
              "Clip",
              "",
              "6-10",
              U.clip,
              U.parseClipAttributes
            ],
            [
              "Clip",
              "",
              "11+",
              U.clipV11
            ],
            [
              "Concat",
              "",
              "4+",
              _.concat,
              _.parseConcatAttributes
            ],
            [
              "Conv",
              "",
              "1+",
              h.conv,
              h.parseConvAttributes
            ],
            [
              "ConvTranspose",
              "",
              "1+",
              r.convTranspose,
              r.parseConvTransposeAttributes
            ],
            [
              "Cos",
              "",
              "7+",
              U.cos
            ],
            [
              "Div",
              "",
              "7+",
              w.div
            ],
            [
              "Dropout",
              "",
              "7+",
              U.identity
            ],
            [
              "DepthToSpace",
              "",
              "1+",
              n.depthToSpace,
              n.parseDepthToSpaceAttributes
            ],
            [
              "Equal",
              "",
              "7+",
              w.equal
            ],
            [
              "Elu",
              "",
              "6+",
              U.elu,
              U.parseEluAttributes
            ],
            [
              "Exp",
              "",
              "6+",
              U.exp
            ],
            [
              "Flatten",
              "",
              "1+",
              u.flatten,
              u.parseFlattenAttributes
            ],
            [
              "Floor",
              "",
              "6+",
              U.floor
            ],
            [
              "FusedConv",
              "com.microsoft",
              "1+",
              h.conv,
              h.parseConvAttributes
            ],
            [
              "Gather",
              "",
              "1+",
              p.gather,
              p.parseGatherAttributes
            ],
            [
              "Gemm",
              "",
              "7-10",
              M.gemm,
              M.parseGemmAttributesV7
            ],
            [
              "Gemm",
              "",
              "11+",
              M.gemm,
              M.parseGemmAttributesV11
            ],
            [
              "GlobalAveragePool",
              "",
              "1+",
              A.globalAveragePool,
              A.parseGlobalAveragePoolAttributes
            ],
            [
              "GlobalMaxPool",
              "",
              "1+",
              A.globalMaxPool
            ],
            [
              "Greater",
              "",
              "7+",
              w.greater
            ],
            [
              "Identity",
              "",
              "1+",
              U.identity
            ],
            [
              "ImageScaler",
              "",
              "1+",
              P.imageScaler,
              P.parseImageScalerAttributes
            ],
            [
              "InstanceNormalization",
              "",
              "6+",
              E.instanceNormalization,
              E.parseInstanceNormalizationAttributes
            ],
            [
              "LeakyRelu",
              "",
              "6+",
              U.leakyRelu,
              U.parseLeakyReluAttributes
            ],
            [
              "Less",
              "",
              "7+",
              w.less
            ],
            [
              "Log",
              "",
              "6+",
              U.log
            ],
            [
              "MatMul",
              "",
              "1+",
              k.matMul,
              k.parseMatMulAttributes
            ],
            [
              "MaxPool",
              "",
              "1+",
              A.maxPool,
              A.parseMaxPoolAttributes
            ],
            [
              "Mul",
              "",
              "7+",
              w.mul
            ],
            [
              "Neg",
              "",
              "6+",
              U.neg
            ],
            [
              "Not",
              "",
              "1+",
              U.not
            ],
            [
              "Or",
              "",
              "7+",
              w.or
            ],
            [
              "Pad",
              "",
              "2-10",
              $.padV2,
              $.parsePadAttributesV2
            ],
            [
              "Pad",
              "",
              "11+",
              $.padV11,
              $.parsePadAttributesV11
            ],
            [
              "Pow",
              "",
              "7+",
              w.pow
            ],
            [
              "PRelu",
              "",
              "7+",
              w.pRelu
            ],
            [
              "ReduceLogSum",
              "",
              "1+",
              C.reduceLogSum,
              C.parseReduceAttributes
            ],
            [
              "ReduceMax",
              "",
              "1+",
              C.reduceMax,
              C.parseReduceAttributes
            ],
            [
              "ReduceMean",
              "",
              "1+",
              C.reduceMean,
              C.parseReduceAttributes
            ],
            [
              "ReduceMin",
              "",
              "1+",
              C.reduceMin,
              C.parseReduceAttributes
            ],
            [
              "ReduceProd",
              "",
              "1+",
              C.reduceProd,
              C.parseReduceAttributes
            ],
            [
              "ReduceSum",
              "",
              "1-12",
              C.reduceSum,
              C.parseReduceAttributes
            ],
            [
              "ReduceSumSquare",
              "",
              "1+",
              C.reduceLogSumSquare,
              C.parseReduceAttributes
            ],
            [
              "Relu",
              "",
              "6+",
              U.relu
            ],
            [
              "Reshape",
              "",
              "5+",
              F.reshape
            ],
            [
              "Resize",
              "",
              "10",
              D.resize,
              D.parseResizeAttributesV10
            ],
            [
              "Resize",
              "",
              "11+",
              D.resize,
              D.parseResizeAttributesV11
            ],
            [
              "Shape",
              "",
              "1+",
              N.shape
            ],
            [
              "Sigmoid",
              "",
              "6+",
              U.sigmoid
            ],
            [
              "Sin",
              "",
              "7+",
              U.sin
            ],
            [
              "Slice",
              "",
              "10+",
              R.sliceV10
            ],
            [
              "Slice",
              "",
              "1-9",
              R.slice,
              R.parseSliceAttributes
            ],
            [
              "Softmax",
              "",
              "1-12",
              j.softmax,
              j.parseSoftmaxAttributes
            ],
            [
              "Softmax",
              "",
              "13+",
              j.softmaxV13,
              j.parseSoftmaxAttributesV13
            ],
            [
              "Split",
              "",
              "2-12",
              Z.split,
              Z.parseSplitAttributes
            ],
            [
              "Sqrt",
              "",
              "6+",
              U.sqrt
            ],
            [
              "Squeeze",
              "",
              "1-12",
              te.squeeze,
              te.parseSqueezeAttributes
            ],
            [
              "Squeeze",
              "",
              "13+",
              te.squeezeV13
            ],
            [
              "Sub",
              "",
              "7+",
              w.sub
            ],
            [
              "Sum",
              "",
              "6+",
              J.sum
            ],
            [
              "Tan",
              "",
              "7+",
              U.tan
            ],
            [
              "Tanh",
              "",
              "6+",
              U.tanh
            ],
            [
              "Tile",
              "",
              "6+",
              G.tile
            ],
            [
              "Transpose",
              "",
              "1+",
              H.transpose,
              H.parseTransposeAttributes
            ],
            [
              "Upsample",
              "",
              "7-8",
              he.upsample,
              he.parseUpsampleAttributesV7
            ],
            [
              "Upsample",
              "",
              "9",
              he.upsample,
              he.parseUpsampleAttributesV9
            ],
            [
              "Unsqueeze",
              "",
              "1-12",
              Q.unsqueeze,
              Q.parseUnsqueezeAttributes
            ],
            [
              "Unsqueeze",
              "",
              "13+",
              Q.unsqueezeV13
            ],
            [
              "Xor",
              "",
              "7+",
              w.xor
            ]
          ];
        },
        2898: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseBatchNormalizationAttributes = e.batchNormalization = void 0;
          const s = t(246), l = t(5060), f = t(2039), d = {
            name: "BatchNormalization",
            inputNames: [
              "A",
              "Scale",
              "B",
              "Mean",
              "Variance"
            ],
            inputTypes: [
              f.TextureType.unpacked,
              f.TextureType.unpacked,
              f.TextureType.unpacked,
              f.TextureType.unpacked,
              f.TextureType.unpacked
            ]
          };
          e.batchNormalization = (_, h, r) => (g(h), [
            _.run(Object.assign(Object.assign({}, d), {
              cacheHint: r.cacheKey,
              get: () => w(_, h, r)
            }), h)
          ]), e.parseBatchNormalizationAttributes = (_) => {
            const h = _.attributes.getFloat("epsilon", 1e-5), r = _.attributes.getFloat("momentum", 0.9), n = _.attributes.getInt("spatial", 1);
            return (0, s.createAttributeWithCacheKey)({
              epsilon: h,
              momentum: r,
              spatial: n
            });
          };
          const w = (_, h, r) => {
            const n = (0, l.getGlsl)(_.session.backend.glContext.version), u = h[0].dims.length, [p, M] = _.calculateTextureWidthAndHeight(h[1].dims, f.TextureType.unpacked), P = `
  float process(int[${u}] indices) {
    vec2 position = offsetToCoords(indices[1], ${p}, ${M});
    float scale = getColorAsFloat(${n.texture2D}(Scale, position));
    float mean = getColorAsFloat(${n.texture2D}(Mean, position));
    float variance = getColorAsFloat(${n.texture2D}(Variance, position));
    float b = getColorAsFloat(${n.texture2D}(B, position));

    return scale * ( (_A(indices) - mean) / sqrt(variance + float(${r.epsilon})) ) + b;
  }`;
            return Object.assign(Object.assign({}, d), {
              output: {
                dims: h[0].dims,
                type: h[0].type,
                textureType: f.TextureType.unpacked
              },
              shaderSource: P
            });
          }, g = (_) => {
            if (!_ || _.length !== 5)
              throw new Error("BatchNormalization requires 5 inputs.");
            const h = _[0], r = _[1], n = _[2], u = _[3], p = _[4];
            if (h.dims.length < 3 || r.dims.length !== 1 || n.dims.length !== 1 || u.dims.length !== 1 || p.dims.length !== 1)
              throw new Error("invalid input shape.");
            if (r.dims[0] !== h.dims[1] || n.dims[0] !== h.dims[1] || u.dims[0] !== h.dims[1] || p.dims[0] !== h.dims[1])
              throw new Error("invalid input shape.");
            if (h.type !== "float32" && h.type !== "float64" || r.type !== "float32" && r.type !== "float64" || n.type !== "float32" && n.type !== "float64" || u.type !== "float32" && u.type !== "float64" || p.type !== "float32" && p.type !== "float64")
              throw new Error("invalid input tensor types.");
          };
        },
        7839: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.xor = e.sub = e.pRelu = e.pow = e.or = e.mul = e.less = e.greater = e.equal = e.div = e.and = e.add = e.glslPRelu = e.glslPow = e.glslXor = e.glslOr = e.glslAnd = e.glslLess = e.glslGreater = e.glslEqual = e.glslSub = e.glslMul = e.glslDiv = e.glslAdd = void 0;
          const s = t(2517), l = t(8520), f = t(5060), d = t(2039);
          function w() {
            const C = "add_";
            return {
              body: `
  float ${C}(float a, float b) {
    return a + b;
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    return v1 + v2;
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function g() {
            const C = "div_";
            return {
              body: `
  float ${C}(float a, float b) {
    return a / b;
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    return v1 / v2;
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function _() {
            const C = "mul_";
            return {
              body: `
  float ${C}(float a, float b) {
    return a * b;
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    return v1 * v2;
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function h() {
            const C = "sub_";
            return {
              body: `
  float ${C}(float a, float b) {
    return a - b;
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    return v1 - v2;
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function r() {
            const C = "equal_";
            return {
              body: `
  float ${C}(float a, float b) {
    return float(a == b);
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    return vec4(equal(v1, v2));
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function n() {
            const C = "greater_";
            return {
              body: `
  float ${C}(float a, float b) {
    return float(a > b);
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    return vec4( v1.r > v2.r ,
      v1.g > v2.g,
      v1.b > v2.b,
      v1.a > v2.a );
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function u() {
            const C = "less_";
            return {
              body: `
  float ${C}(float a, float b) {
    return float(a < b);
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    return vec4( v1.r < v2.r ,
                v1.g < v2.g,
                v1.b < v2.b,
                v1.a < v2.a );
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function p() {
            const C = "and_";
            return {
              body: `
  float ${C}(float a, float b) {
    return float( bool(a) && bool(b) );
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r && b2.r ,
                b1.g && b2.g,
                b1.b && b2.b,
                b1.a && b2.a );
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function M() {
            const C = "or_";
            return {
              body: `
  float ${C}(float a, float b) {
    return float( bool(a) || bool(b) );
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r || b2.r ,
                b1.g || b2.g,
                b1.b || b2.b,
                b1.a || b2.a );
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function P() {
            const C = "xor_";
            return {
              body: `
  float ${C}(float a, float b) {
    return float( bool(a) ^^ bool(b) );
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    bvec4 b1 = bvec4(v1);
    bvec4 b2 = bvec4(v2);
    return vec4( b1.r ^^ b2.r ,
                b1.g ^^ b2.g,
                b1.b ^^ b2.b,
                b1.a ^^ b2.a );
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          function E() {
            return function(C) {
              const F = `${C}_`;
              return {
                body: `
  float ${F}(float a, float b) {
    return ${C}(a, b);
  }
  vec4 ${F}(vec4 v1, vec4 v2) {
    return ${C}(v1, v2);
  }
  `,
                name: F,
                type: l.FunctionType.ValueBased
              };
            }("pow");
          }
          function k() {
            const C = "prelu_";
            return {
              body: `
  float ${C}(float a, float b) {
    return a < 0.0 ? a * b: a;
  }
  vec4 ${C}(vec4 v1, vec4 v2) {
    return vec4(
      v1.r < 0.0 ? v1.r * v2.r: v1.r,
      v1.g < 0.0 ? v1.g * v2.g: v1.g,
      v1.b < 0.0 ? v1.b * v2.b: v1.b,
      v1.a < 0.0 ? v1.a * v2.a: v1.a
      );
  }
  `,
              name: C,
              type: l.FunctionType.ValueBased
            };
          }
          e.glslAdd = w, e.glslDiv = g, e.glslMul = _, e.glslSub = h, e.glslEqual = r, e.glslGreater = n, e.glslLess = u, e.glslAnd = p, e.glslOr = M, e.glslXor = P, e.glslPow = E, e.glslPRelu = k;
          const $ = (C, F, D, N = F[0].type, R) => {
            const j = C.session.pack ? d.TextureType.packed : d.TextureType.unpacked;
            return {
              name: D.name,
              inputNames: [
                "A",
                "B"
              ],
              inputTypes: [
                j,
                j
              ],
              cacheHint: R,
              get: () => A(C, F, D, N)
            };
          }, A = (C, F, D, N = F[0].type) => {
            const R = C.session.pack ? d.TextureType.packed : d.TextureType.unpacked, j = !s.ShapeUtil.areEqual(F[0].dims, F[1].dims);
            let Z = F[0].dims;
            const te = C.session.pack;
            if (j) {
              const H = s.BroadcastUtil.calcShape(F[0].dims, F[1].dims, false);
              if (!H)
                throw new Error("Can't perform binary op on the given tensors");
              Z = H;
              const U = Z.length, Q = F[0].dims.length !== 0 ? F[0].dims.length : 1, he = F[1].dims.length !== 0 ? F[1].dims.length : 1, fe = F[0].dims.length !== 0 ? "bcastIndices_A(indices, aindices);" : "aindices[0] = 0;", Me = F[1].dims.length !== 0 ? "bcastIndices_B(indices, bindices);" : "bindices[0] = 0;", pe = (0, f.getGlsl)(C.session.backend.glContext.version), oe = te ? `
      ${D.body}
      void main() {
        vec4 a = getAAtOutCoords();
        vec4 b = getBAtOutCoords();
        vec4 result = ${D.name}(a, b);
        ${pe.output} = result;
      }` : `
      ${D.body}
      float process(int indices[${U}]) {
        int aindices[${Q}];
        int bindices[${he}];
        ${fe}
        ${Me}
        return ${D.name}(_A(aindices), _B(bindices));
      }`;
              return {
                name: D.name,
                inputNames: [
                  "A",
                  "B"
                ],
                inputTypes: [
                  R,
                  R
                ],
                output: {
                  dims: Z,
                  type: N,
                  textureType: R
                },
                shaderSource: oe,
                hasMain: te
              };
            }
            const J = (0, f.getGlsl)(C.session.backend.glContext.version), G = `
    ${D.body}
    void main() {
      vec4 v1 = ${J.texture2D}(A, TexCoords);
      vec4 v2 = ${J.texture2D}(B, TexCoords);
      vec4 result = ${D.name}(v1, v2);
      ${J.output} = result;
    }
    `;
            return {
              name: D.name,
              inputNames: [
                "A",
                "B"
              ],
              inputTypes: [
                R,
                R
              ],
              output: {
                dims: F[0].dims,
                type: N,
                textureType: R
              },
              shaderSource: G,
              hasMain: true
            };
          };
          e.add = (C, F) => [
            C.run($(C, F, w()), F)
          ], e.and = (C, F) => [
            C.run($(C, F, p(), "bool"), F)
          ], e.div = (C, F) => [
            C.run($(C, F, g()), F)
          ], e.equal = (C, F) => [
            C.run($(C, F, r(), "bool"), F)
          ], e.greater = (C, F) => [
            C.run($(C, F, n(), "bool"), F)
          ], e.less = (C, F) => [
            C.run($(C, F, u(), "bool"), F)
          ], e.mul = (C, F) => [
            C.run($(C, F, _()), F)
          ], e.or = (C, F) => [
            C.run($(C, F, M(), "bool"), F)
          ], e.pow = (C, F) => [
            C.run($(C, F, E()), F)
          ], e.pRelu = (C, F) => [
            C.run($(C, F, k()), F)
          ], e.sub = (C, F) => [
            C.run($(C, F, h()), F)
          ], e.xor = (C, F) => [
            C.run($(C, F, P(), "bool"), F)
          ];
        },
        4196: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseCastAttributes = e.cast = void 0;
          const s = t(2517);
          e.cast = (f, d, w) => (l(d), [
            f.cast(d[0], w)
          ]), e.parseCastAttributes = (f) => s.ProtoUtil.tensorDataTypeFromProto(f.attributes.getInt("to"));
          const l = (f) => {
            if (!f || f.length !== 1)
              throw new Error("Cast requires 1 input.");
            if (f[0].type === "string")
              throw new Error("Invalid input type.");
          };
        },
        1163: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createPackedConcatProgramInfoLoader = void 0;
          const s = t(5060), l = t(2039), f = t(9390), d = t(2827);
          e.createPackedConcatProgramInfoLoader = (g, _, h) => {
            const r = (n = _.length, u = h.cacheKey, {
              name: "Concat (packed)",
              inputNames: Array.from({
                length: n
              }, (p, M) => `X${M}`),
              inputTypes: Array(n).fill(l.TextureType.packed),
              cacheHint: u
            });
            var n, u;
            return Object.assign(Object.assign({}, r), {
              get: () => ((p, M, P, E) => {
                const k = P[0].dims.slice();
                if (E >= k.length || E < -1 * k.length)
                  throw new Error("axis specified for concat doesn't match input dimensionality");
                E < 0 && (E = k.length + E);
                const $ = k.slice(0);
                for (let fe = 1; fe < P.length; fe++) {
                  const Me = P[fe].dims.slice();
                  for (let pe = 0; pe < k.length; pe++)
                    if (pe === E)
                      $[E] += Me[pe];
                    else if (k[pe] !== Me[pe])
                      throw new Error("non concat dimensions must match");
                }
                const A = $.length, C = (0, d.getChannels)("coords", A), F = (0, f.getCoordsDataType)(A), D = (0, d.unpackFromChannel)(), N = P.map((fe) => fe.dims), R = (0, f.getGlChannels)(A), j = new Array(N.length - 1);
                j[0] = N[0][E];
                for (let fe = 1; fe < j.length; fe++)
                  j[fe] = j[fe - 1] + N[fe][E];
                const Z = R[E], te = R.slice(-2), J = R.join();
                let G = `if (${Z} < ${j[0]}) {
        return getChannel(
            getX0(${J}), vec2(${te.join()}));
        }`;
                for (let fe = 1; fe < j.length; fe++) {
                  const Me = j[fe - 1];
                  G += `
            if (${Z} < ${j[fe]}  && ${Z} >= ${j[fe - 1]}) {
              return getChannel(
                getX${fe}(${w(R, Z, Me)}),
                vec2(${w(te, Z, Me)}));
            }`;
                }
                const H = j.length, U = j[j.length - 1];
                G += `
            return getChannel(
              getX${H}(${w(R, Z, U)}),
              vec2(${w(te, Z, U)}));`;
                const Q = (0, s.getGlsl)(p.session.backend.glContext.version), he = `
          ${D}
          float getValue(${R.map((fe) => "int " + fe)}) {
            ${G}
          }

          void main() {
            ${F} coords = getOutputCoords();
            int lastDim = coords.${R[A - 1]};
            coords.${R[A - 1]} = coords.${R[A - 2]};
            coords.${R[A - 2]} = lastDim;

            vec4 result = vec4(getValue(${C}), 0., 0., 0.);

            ${C[A - 1]} = ${C[A - 1]} + 1;
            if (${C[A - 1]} < ${$[A - 1]}) {
              result.g = getValue(${C});
            }

            ${C[A - 2]} = ${C[A - 2]} + 1;
            if (${C[A - 2]} < ${$[A - 2]}) {
              result.a = getValue(${C});
            }

            ${C[A - 1]} = ${C[A - 1]} - 1;
            if (${C[A - 2]} < ${$[A - 2]} &&
                ${C[A - 1]} < ${$[A - 1]}) {
              result.b = getValue(${C});
            }
            ${Q.output} = result;
          }
        `;
                return Object.assign(Object.assign({}, M), {
                  output: {
                    dims: $,
                    type: P[0].type,
                    textureType: l.TextureType.packed
                  },
                  shaderSource: he,
                  hasMain: true
                });
              })(g, r, _, h.axis)
            });
          };
          const w = (g, _, h) => {
            const r = g.indexOf(_);
            return g.map((n, u) => u === r ? `${n} - ${h}` : n).join();
          };
        },
        2069: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseConcatAttributes = e.concat = void 0;
          const s = t(246), l = t(2039), f = t(1163);
          e.concat = (n, u, p) => (r(u), n.session.pack && u[0].dims.length > 1 ? [
            n.run((0, f.createPackedConcatProgramInfoLoader)(n, u, p), u)
          ] : [
            n.run(d(n, u, p), u)
          ]);
          const d = (n, u, p) => {
            const M = (P = u.length, E = p.cacheKey, {
              name: "Concat",
              inputNames: Array.from({
                length: P
              }, (k, $) => `X${$}`),
              inputTypes: Array(P).fill(l.TextureType.unpacked),
              cacheHint: E
            });
            var P, E;
            return Object.assign(Object.assign({}, M), {
              get: () => ((k, $, A, C) => {
                const F = A[0].dims.slice();
                if (C >= F.length || C < -1 * F.length)
                  throw new Error("axis specified for concat doesn't match input dimensionality");
                C < 0 && (C = F.length + C);
                const D = F.slice(0);
                for (let J = 1; J < A.length; J++) {
                  const G = A[J].dims.slice();
                  for (let H = 0; H < F.length; H++)
                    if (H === C)
                      D[C] += G[H];
                    else if (F[H] !== G[H])
                      throw new Error("non concat dimensions must match");
                }
                const N = D.length, R = new Array(A.length);
                let j = 0;
                for (let J = 0; J < R.length; ++J)
                  j += A[J].dims[C], R[J] = j;
                let Z = "";
                Z = A.length < 5 ? w(R) : g(R);
                const te = `
        ${_(A.length, N)}
        ${h(R)}
        ${Z}
        float process(int indices[${N}]) {
          int textureIndex = getTextureWhereDataResides (indices[${C}]);

          if(textureIndex != 0) {
            indices[${C}] = indices[${C}] - int(getSizeInConcatAxisValueFromIndex(textureIndex-int(1)));
          }

          return fetchDataFromCorrectTexture(textureIndex, indices);
        }`;
                return Object.assign(Object.assign({}, $), {
                  output: {
                    dims: D,
                    type: A[0].type,
                    textureType: l.TextureType.unpacked
                  },
                  shaderSource: te
                });
              })(0, M, u, p.axis)
            });
          }, w = (n) => `int getTextureWhereDataResides(int index) {
      ${n.map((u, p) => `if(index<${u}) {return ${p};}
`).join("")}
    }`, g = (n) => w(n), _ = (n, u) => {
            const p = [
              `float fetchDataFromCorrectTexture(int textureIndex, int indices[${u}]) {`
            ];
            for (let M = 0; M < n; ++M)
              M === 0 ? p.push(`	if (textureIndex == ${M}) { return _X${M}(indices); }`) : M === n - 1 ? p.push(`	else { return _X${M}(indices); }`) : p.push(`	else if (textureIndex == ${M}) { return _X${M}(indices); }`);
            return p.push("	}"), p.join(`
`);
          }, h = (n) => {
            const u = [
              "int getSizeInConcatAxisValueFromIndex(int index) {"
            ];
            for (let p = 0; p < n.length; ++p)
              p === 0 ? u.push(`	if (index == ${p}) { return ${n[p]}; }`) : p === n.length - 1 ? u.push(`	else { return ${n[p]}; }`) : u.push(`	else if (index == ${p}) { return ${n[p]}; }`);
            return u.push("	}"), u.join(`
`);
          };
          e.parseConcatAttributes = (n) => (0, s.createAttributeWithCacheKey)({
            axis: n.attributes.getInt("axis")
          });
          const r = (n) => {
            if (!n || n.length < 1)
              throw new Error("too few inputs");
            const u = n[0].type, p = n[0].dims.length;
            if (u === "string")
              throw new Error("string tensor is not supported yet");
            for (const M of n) {
              if (M.type !== u)
                throw new Error("input tensors should be one type");
              if (M.dims.length !== p)
                throw new Error("input tensors should have the same shape");
            }
          };
        },
        4770: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createUnpackedGroupedConvProgramInfoLoader = void 0;
          const s = t(6231), l = t(5060), f = t(2039), d = t(8138), w = t(2823);
          e.createUnpackedGroupedConvProgramInfoLoader = (g, _, h) => {
            const r = (n = _.length > 2, u = h.cacheKey, {
              name: "GroupedConv",
              inputNames: n ? [
                "X",
                "W",
                "Bias"
              ] : [
                "X",
                "W"
              ],
              inputTypes: n ? [
                f.TextureType.unpacked,
                f.TextureType.unpacked,
                f.TextureType.unpacked
              ] : [
                f.TextureType.unpacked,
                f.TextureType.unpacked
              ],
              cacheHint: u
            });
            var n, u;
            return Object.assign(Object.assign({}, r), {
              get: () => ((p, M, P, E) => {
                const k = M.length > 2 ? "value += getBias(output_channel);" : "", $ = M[0].dims.slice(), A = M[1].dims.slice(), C = A[0] / E.group;
                s.Logger.verbose("GroupedConv", `autpPad:${E.autoPad}, dilations:${E.dilations}, group:${E.group}, kernelShape:${E.kernelShape}, pads:${E.pads}, strides:${E.strides}`);
                const F = (0, d.calculateOutputShape)($, A, E.dilations, E.pads, E.strides), D = (0, l.getGlsl)(p.session.backend.glContext.version), { activationFunction: N, applyActivation: R } = (0, w.getActivationSnippet)(E), j = `
  const ivec2 strides = ivec2(${E.strides[0]}, ${E.strides[1]});
  const ivec2 pads = ivec2(${E.pads[0]}, ${E.pads[1]});
  ${N}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;
    ivec2 xRCCorner = coords.zw * strides - pads;
    int group_id = output_channel / ${C};

    float value = 0.0;
    for (int wInChannel = 0; wInChannel < ${A[1]}; wInChannel++) {
      int input_channel = group_id * ${A[1]} + wInChannel;
      for (int wHeight = 0; wHeight < ${A[2]}; wHeight++) {
        int xHeight = xRCCorner.x + wHeight * ${E.dilations[0]};

        if (xHeight < 0 || xHeight >= ${$[2]}) {
          continue;
        }

        for (int wWidth = 0; wWidth < ${A[3]}; wWidth++) {
          int xWidth = xRCCorner.y + wWidth * ${E.dilations[1]};
          if (xWidth < 0 || xWidth >= ${$[3]}) {
            continue;
          }

          float xVal = getX(batch, input_channel, xWidth, xHeight);
          float wVal = getW(output_channel, wInChannel, wWidth, wHeight);
          value += xVal*wVal;
        }
      }
    }
    ${k}
    ${R}
    ${D.output} = vec4(value, .0, .0, .0);
  }
`;
                return Object.assign(Object.assign({}, P), {
                  output: {
                    dims: F,
                    type: M[0].type,
                    textureType: f.TextureType.unpacked
                  },
                  shaderSource: j,
                  hasMain: true
                });
              })(g, _, r, h)
            });
          };
        },
        1386: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.conv2DPacked = e.conv2DPackedPointwise = void 0;
          const s = t(8138), l = t(8555), f = t(708);
          e.conv2DPackedPointwise = (d, w, g) => {
            const _ = w[0].dims, h = w[1].dims, r = (0, s.calculateOutputShape)(_, h, g.dilations, g.pads, g.strides), n = d.reshapePacked(w[0], [
              _[1],
              _[2] * _[3]
            ]), u = d.reshapePacked(w[1], [
              h[0],
              h[1]
            ]), p = w.length > 2 ? [
              u,
              n,
              w[2]
            ] : [
              u,
              n
            ], M = d.run((0, f.createPackedMatmulProgramInfoLoader)(d, p, g), p);
            return d.reshapePacked(M, r);
          }, e.conv2DPacked = (d, w, g) => {
            const _ = w[0].dims, h = w[1].dims, r = (0, s.calculateOutputShape)(_, h, g.dilations, g.pads, g.strides), n = d.run((0, l.createPackedIm2ColProgramInfoLoader)(d, w[0], w[1], r, g), [
              w[0]
            ]), u = d.reshapePacked(w[1], [
              h[0],
              h[1] * h[2] * h[3]
            ]), p = w.length === 3 ? [
              u,
              n,
              w[2]
            ] : [
              u,
              n
            ], M = d.run((0, f.createPackedMatmulProgramInfoLoader)(d, p, g), p);
            return d.reshapePacked(M, r);
          };
        },
        9663: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseConvTransposeAttributes = e.convTranspose = void 0;
          const s = t(246), l = t(5060), f = t(2039), d = t(2823), w = (u, p, M, P, E, k) => (u - 1) * p + M + (P - 1) * E + 1 - k, g = (u, p, M, P, E) => {
            const k = Math.floor(u / 2);
            p === "SAME_UPPER" ? (M[P] = k, M[E] = u - k) : p === "SAME_LOWER" && (M[P] = u - k, M[E] = k);
          };
          e.convTranspose = (u, p, M) => (n(p, M), _(u, p, M));
          const _ = (u, p, M) => {
            const P = r(M, p);
            return [
              h(u, p, P)
            ];
          }, h = (u, p, M) => u.run(((P, E, k) => {
            const $ = (A = E.length > 2, C = k.cacheKey, {
              name: "ConvTranspose",
              inputNames: A ? [
                "X",
                "W",
                "B"
              ] : [
                "X",
                "W"
              ],
              inputTypes: A ? [
                f.TextureType.unpacked,
                f.TextureType.unpacked,
                f.TextureType.unpacked
              ] : [
                f.TextureType.unpacked,
                f.TextureType.unpacked
              ],
              cacheHint: C
            });
            var A, C;
            return Object.assign(Object.assign({}, $), {
              get: () => ((F, D, N, R) => {
                const j = D.length > 2 ? "getB(output_channel)" : "0.0", Z = D[0].dims, te = D[1].dims, J = te[1], G = te[0] / R.group, H = [
                  D[0].dims[0],
                  D[1].dims[1] * R.group,
                  ...R.outputShape
                ], U = (0, l.getGlsl)(F.session.backend.glContext.version), { activationFunction: Q, applyActivation: he } = (0, d.getActivationSnippet)(R), fe = `
  const ivec2 strides = ivec2(${R.strides[0]}, ${R.strides[1]});
  const ivec2 pads = ivec2(${R.pads[0]}, ${R.pads[1]});
  ${Q}
  void main() {
    ivec4 coords = getOutputCoords();
    int batch = coords.x;
    int output_channel = coords.y;

    ivec2 loc = coords.zw + pads;

    int group_id = output_channel / ${J};
    int wOutChannel = output_channel - group_id * ${J};

    float value = ${j};
    for (int inChannelOffset = 0; inChannelOffset < ${G}; inChannelOffset++) {
      int input_channel = group_id * ${G} + inChannelOffset;
      for (int wWOff = 0; wWOff < ${te[2]}; wWOff++) {
        for (int wHOff = 0; wHOff < ${te[3]}; wHOff++) {
          ivec2 wOff = ivec2(wWOff * ${R.dilations[0]}, wHOff * ${R.dilations[1]});
          ivec2 wLoc = loc - wOff;
          ivec2 wLocIn = wLoc / strides;
          if (
            wLocIn * strides == wLoc &&
            wLocIn.x >= 0 && wLocIn.x < ${Z[2]} &&
            wLocIn.y >= 0 && wLocIn.y < ${Z[3]}
          ) {
            float xVal = getX(batch, input_channel, wLocIn.y, wLocIn.x);
            float wVal = getW(input_channel, wOutChannel, wHOff, wWOff);
            value += xVal * wVal;
          }
        }
      }
    }
    ${he}
    ${U.output} = vec4(value, .0, .0, .0);
  }
`;
                return Object.assign(Object.assign({}, N), {
                  output: {
                    dims: H,
                    type: D[0].type,
                    textureType: f.TextureType.unpacked
                  },
                  shaderSource: fe,
                  hasMain: true
                });
              })(P, E, $, k)
            });
          })(u, p, M), p), r = (u, p) => {
            const M = u.kernelShape.slice();
            if (u.kernelShape.length === 0)
              for (let $ = 2; $ < p[1].dims.length; ++$)
                M.push(p[1].dims[$]);
            const P = u.pads.slice(), E = u.outputShape.slice();
            (($, A, C, F, D, N, R, j) => {
              const Z = $.length - 2, te = j.length === 0;
              for (let J = 0; J < Z; ++J) {
                const G = te ? $[J + 2] * N[J] : j[J], H = w($[J + 2], N[J], D[J], A[J], C[J], G);
                g(H, F, D, J, J + Z), te && j.push(N[J] * ($[J + 2] - 1) + R[J] + (A[J] - 1) * C[J] + 1 - D[J] - D[J + Z]);
              }
            })(p[0].dims, M, u.dilations, u.autoPad, P, u.strides, u.outputPadding, E);
            const k = Object.assign({}, u);
            return Object.assign(k, {
              kernelShape: M,
              pads: P,
              outputShape: E,
              cacheKey: u.cacheKey
            }), k;
          };
          e.parseConvTransposeAttributes = (u) => {
            const p = u.attributes, M = (0, d.parseInternalActivationAttributes)(p), P = p.getString("auto_pad", "NOTSET"), E = p.getInts("dilations", [
              1,
              1
            ]), k = p.getInt("group", 1), $ = p.getInts("kernel_shape", []), A = p.getInts("output_padding", [
              0,
              0
            ]), C = p.getInts("output_shape", []), F = p.getInts("pads", [
              0,
              0,
              0,
              0
            ]), D = p.getInts("strides", [
              1,
              1
            ]);
            return (0, s.createAttributeWithCacheKey)(Object.assign({
              autoPad: P,
              dilations: E,
              group: k,
              kernelShape: $,
              outputPadding: A,
              outputShape: C,
              pads: F,
              strides: D
            }, M));
          };
          const n = (u, p) => {
            if (!u || u.length !== 2 && u.length !== 3)
              throw new Error("Conv requires 2 or 3 inputs");
            if (u[0].dims.length !== 4 || u[1].dims.length !== 4)
              throw new Error("currently only support 2-dimensional conv");
            if (u[0].dims[1] !== u[1].dims[0])
              throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
            const M = u[1].dims[1] * p.group;
            if (u.length === 3 && (u[2].dims.length !== 1 || u[2].dims[0] !== M))
              throw new Error("invalid bias");
            const P = u[0].dims.length - 2;
            if (p.dilations.length !== P)
              throw new Error(`dilations should be ${P}D`);
            if (p.strides.length !== P)
              throw new Error(`strides should be ${P}D`);
            if (p.pads.length !== 2 * P)
              throw new Error(`pads should be ${2 * P}D`);
            if (p.outputPadding.length !== P)
              throw new Error(`output_padding should be ${P}D`);
            if (p.kernelShape.length !== 0 && p.kernelShape.length !== u[1].dims.length - 2)
              throw new Error("invalid kernel shape");
            if (p.outputShape.length !== 0 && p.outputShape.length !== u[0].dims.length - 2)
              throw new Error("invalid output shape");
            if (u[0].type !== "float32" || u[1].type !== "float32")
              throw new Error("ConvTranspose input(X,W) should be float tensor");
            if (u.length === 3 && u[2].type !== "float32")
              throw new Error("ConvTranspose input(bias) should be float tensor");
          };
        },
        8138: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseConvAttributes = e.conv = e.calculateOutputShape = void 0;
          const s = t(246), l = t(2517), f = t(4770), d = t(1386), w = t(9828), g = t(2823), _ = t(3248), h = t(5623);
          e.calculateOutputShape = (P, E, k, $, A) => {
            const C = P[0], F = P.slice(2), D = F.length, N = E[0], R = E.slice(2).map((Z, te) => Z + (Z - 1) * (k[te] - 1)), j = F.map((Z, te) => Z + $[te] + $[te + D]).map((Z, te) => Math.floor((Z - R[te] + A[te]) / A[te]));
            return [
              C,
              N
            ].concat(...j);
          }, e.conv = (P, E, k) => (M(E, k), r(P, E, k));
          const r = (P, E, k) => {
            const $ = p(k, E), A = P.session.pack, C = $.kernelShape[0] === 1 && $.kernelShape[1] === 1;
            return $.group > 1 ? [
              P.run((0, f.createUnpackedGroupedConvProgramInfoLoader)(P, E, $), E)
            ] : C && A ? [
              n(P, E, $)
            ] : A && E[0].dims.length === 4 && E[0].dims[0] === 1 && !C ? [
              (0, d.conv2DPacked)(P, E, $)
            ] : [
              u(P, E, $)
            ];
          }, n = (P, E, k) => {
            const $ = E[0].dims, A = E[1].dims, C = (0, e.calculateOutputShape)($, A, k.dilations, k.pads, k.strides), F = P.reshapeUnpacked(E[0], [
              $[1],
              $[2] * $[3]
            ]), D = P.reshapeUnpacked(E[1], [
              A[0],
              A[1]
            ]), N = E.length > 2 ? [
              D,
              F,
              E[2]
            ] : [
              D,
              F
            ], R = P.run((0, h.createMatmulProgramInfoLoader)(N, k), N);
            return P.reshapeUnpacked(R, C);
          }, u = (P, E, k) => {
            const $ = E[0].dims, A = E[1].dims, C = (0, e.calculateOutputShape)($, A, k.dilations, k.pads, k.strides), F = P.run((0, _.createIm2ColProgramInfoLoader)(P, E[0], E[1], C, k), [
              E[0]
            ]), D = E.length === 3 ? [
              F,
              E[1],
              E[2]
            ] : [
              F,
              E[1]
            ];
            return P.run((0, w.createDotProductProgramInfoLoader)(P, E, C, k), D);
          }, p = (P, E) => {
            const k = P.kernelShape.slice();
            if (P.kernelShape.length === 0)
              for (let C = 2; C < E[1].dims.length; ++C)
                k.push(E[1].dims[C]);
            const $ = P.pads.slice();
            l.PoolConvUtil.adjustPadsBasedOnAutoPad(E[0].dims, P.strides, P.dilations, k, $, P.autoPad);
            const A = Object.assign({}, P);
            return Object.assign(A, {
              kernelShape: k,
              pads: $,
              cacheKey: P.cacheKey
            }), A;
          };
          e.parseConvAttributes = (P) => {
            const E = P.attributes, k = (0, g.parseInternalActivationAttributes)(E), $ = E.getString("auto_pad", "NOTSET"), A = E.getInts("dilations", [
              1,
              1
            ]), C = E.getInt("group", 1), F = E.getInts("kernel_shape", []), D = E.getInts("pads", [
              0,
              0,
              0,
              0
            ]), N = E.getInts("strides", [
              1,
              1
            ]);
            return (0, s.createAttributeWithCacheKey)(Object.assign({
              autoPad: $,
              dilations: A,
              group: C,
              kernelShape: F,
              pads: D,
              strides: N
            }, k));
          };
          const M = (P, E) => {
            if (!P || P.length !== 2 && P.length !== 3)
              throw new Error("Conv requires 2 or 3 inputs");
            if (P[0].dims.length !== 4 || P[1].dims.length !== 4)
              throw new Error("currently only support 2-dimensional conv");
            if (P[0].dims[1] !== P[1].dims[1] * E.group)
              throw new Error("FILTER_IN_CHANNEL should be equal to DATA_CHANNEL");
            if (P.length === 3 && (P[2].dims.length !== 1 || P[1].dims[0] !== P[2].dims[0]))
              throw new Error("invalid bias");
            const k = P[0].dims.length - 2;
            if (E.dilations.length !== k)
              throw new Error(`dilations should be ${k}D`);
            if (E.strides.length !== k)
              throw new Error(`strides should be ${k}D`);
            if (E.pads.length !== 2 * k)
              throw new Error(`pads should be ${2 * k}D`);
            if (E.kernelShape.length !== 0 && E.kernelShape.length !== P[1].dims.length - 2)
              throw new Error("invalid kernel shape");
            if (P[0].type !== "float32" || P[1].type !== "float32")
              throw new Error("Conv input(X,W) should be float tensor");
            if (P.length === 3 && P[2].type !== "float32")
              throw new Error("Conv input(bias) should be float tensor");
          };
        },
        5193: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseDepthToSpaceAttributes = e.depthToSpace = void 0;
          const s = t(3738);
          e.depthToSpace = (f, d, w) => {
            l(d);
            const g = w.blocksize, _ = g * g, h = w.mode === "DCR" ? [
              0,
              3,
              4,
              1,
              5,
              2
            ] : [
              0,
              1,
              4,
              2,
              5,
              3
            ], r = w.mode === "DCR" ? [
              d[0].dims[0],
              g,
              g,
              d[0].dims[1] / _,
              d[0].dims[2],
              d[0].dims[3]
            ] : [
              d[0].dims[0],
              d[0].dims[1] / _,
              g,
              g,
              d[0].dims[2],
              d[0].dims[3]
            ], n = f.reshapeUnpacked(d[0], r), u = {
              perm: h,
              cacheKey: `${h}`
            }, [p] = (0, s.transpose)(f, [
              n
            ], u), M = [
              d[0].dims[0],
              d[0].dims[1] / _,
              d[0].dims[2] * g,
              d[0].dims[3] * g
            ];
            return [
              f.reshapeUnpacked(p, M)
            ];
          }, e.parseDepthToSpaceAttributes = (f) => {
            const d = f.attributes.getInt("blocksize");
            if (d < 1)
              throw new Error(`blocksize must be >= 1, but got : ${d} for DepthToSpace`);
            const w = f.attributes.getString("mode", "DCR");
            if (w !== "DCR" && w !== "CRD")
              throw new Error(`unrecognized mode: ${w} for DepthToSpace`);
            return {
              mode: w,
              blocksize: d
            };
          };
          const l = (f) => {
            if (f.length !== 1)
              throw new Error(`DepthToSpace expect 1 inputs, but got ${f.length}`);
            if (f[0].type === "string" || f[0].dims.length !== 4)
              throw new TypeError("DepthToSpace input should be a 4-D numeric tensor");
          };
        },
        9828: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createDotProductProgramInfoLoader = void 0;
          const s = t(2517), l = t(5060), f = t(2039), d = t(2823), w = t(3248);
          e.createDotProductProgramInfoLoader = (g, _, h, r) => {
            const n = ((u, p) => ({
              name: "ConvDotProduct",
              inputNames: u ? [
                "Im2Col",
                "K",
                "B"
              ] : [
                "Im2Col",
                "K"
              ],
              inputTypes: u ? [
                f.TextureType.unpacked,
                f.TextureType.packedLastDimension,
                f.TextureType.unpacked
              ] : [
                f.TextureType.unpacked,
                f.TextureType.packedLastDimension
              ],
              cacheKey: p.activationCacheKey
            }))(_.length > 2, r);
            return Object.assign(Object.assign({}, n), {
              get: () => ((u, p, M, P, E) => {
                const k = M[0].dims, $ = M[1].dims, A = [
                  $[0],
                  Math.ceil(k[1] * $[2] * $[3] / 4)
                ], C = (0, w.calculateIm2ColDims)(k, $, P), [F, D] = u.calculateTextureWidthAndHeight(A, f.TextureType.packedLastDimension), N = s.ShapeUtil.computeStrides(C), [R, j] = u.calculateTextureWidthAndHeight(C, f.TextureType.packedLastDimension), Z = P.length, te = M.length < 3 ? "0.0" : "_B(b)", J = Math.ceil(k[1] * $[2] * $[3] / 4), { activationFunction: G, applyActivation: H } = (0, d.getActivationSnippet)(E), U = (0, l.getGlsl)(u.session.backend.glContext.version), Q = `
${G}
float process(int indices[${Z}]) {
  int b[1];
  b[0] = indices[1];
  int im2col[4];
  im2col[0] = indices[0];
  im2col[1] = indices[2];
  im2col[2] = indices[3];
  int im2colOffset = im2col[0] * ${N[0]} + im2col[1] * ${N[1]} + im2col[2] * ${N[2]};
  int kernelOffset = indices[1] * ${A[1]};
  float value = ${te};
  for (int i = 0; i < ${J}; ++i) {
    vec2 im2colCoords = offsetToCoords(im2colOffset, ${R}, ${j});
    vec2 kernelCoords = offsetToCoords(kernelOffset, ${F}, ${D});
    value += dot(${U.texture2D}(Im2Col, im2colCoords), ${U.texture2D}(K, kernelCoords));
    ++im2colOffset;
    ++kernelOffset;
  }
  ${H}
  return value;
}`;
                return Object.assign(Object.assign({}, p), {
                  output: {
                    dims: P,
                    type: M[0].type,
                    textureType: f.TextureType.unpacked
                  },
                  shaderSource: Q
                });
              })(g, n, _, h, r)
            });
          };
        },
        7992: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseFlattenAttributes = e.flatten = void 0;
          const s = t(2517);
          e.flatten = (f, d, w) => {
            l(d, w);
            const g = s.ShapeUtil.flattenShape(d[0].dims, w);
            return [
              f.reshapeUnpacked(d[0], g)
            ];
          }, e.parseFlattenAttributes = (f) => f.attributes.getInt("axis", 1);
          const l = (f, d) => {
            if (!f || f.length !== 1)
              throw new Error("Flatten requires 1 input.");
            const w = f[0].dims.length;
            if (w === 0)
              throw new Error("scalar tensor is not supported.");
            if (d < -w || d > w)
              throw new Error("Invalid axis");
            if (f[0].type === "string")
              throw new Error("string tensor is not supported.");
          };
        },
        2823: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseInternalActivationAttributes = e.getActivationSnippet = void 0;
          const s = t(2517), l = t(4909);
          e.getActivationSnippet = function(f) {
            let d;
            switch (f.activation) {
              case "Relu":
                d = (0, l.glslRelu)();
                break;
              case "Sigmoid":
                d = (0, l.glslSigmoid)();
                break;
              case "Clip":
                d = (0, l.glslClip)(f.clipMin, f.clipMax);
                break;
              default:
                return {
                  activationFunction: "",
                  applyActivation: ""
                };
            }
            const w = d.name;
            return {
              activationFunction: d.body,
              applyActivation: `value = ${w}_(value);`
            };
          }, e.parseInternalActivationAttributes = (f) => {
            const d = f.getString("activation", "");
            if (d === "Clip") {
              const [w, g] = f.getFloats("activation_params", [
                s.MIN_CLIP,
                s.MAX_CLIP
              ]);
              return {
                activation: d,
                clipMax: g,
                clipMin: w,
                activationCacheKey: `${d}:${w},${g}`
              };
            }
            return {
              activation: d,
              activationCacheKey: d
            };
          };
        },
        1253: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseGatherAttributes = e.gather = void 0;
          const s = t(246), l = t(782), f = t(2517), d = t(2039);
          e.gather = (h, r, n) => (_(r, n.axis), [
            h.run(g(h, r, n), r)
          ]), e.parseGatherAttributes = (h) => (0, s.createAttributeWithCacheKey)({
            axis: h.attributes.getInt("axis", 0)
          });
          const w = {
            name: "Gather",
            inputNames: [
              "A",
              "B"
            ],
            inputTypes: [
              d.TextureType.unpacked,
              d.TextureType.unpacked
            ]
          }, g = (h, r, n) => {
            const u = Object.assign(Object.assign({}, w), {
              cacheHint: n.cacheKey
            });
            return Object.assign(Object.assign({}, u), {
              get: () => ((p, M, P, E) => {
                const k = P[0].dims.slice(), $ = P[1].dims.slice(), A = new Array(k.length + $.length - 1);
                E = f.ShapeUtil.normalizeAxis(E, k.length);
                const C = [];
                for (let D = 0; D < A.length; D++)
                  D < E ? (A[D] = k[D], C.push(`inputIdx[${D}] = outputIdx[${D}];`)) : D < E + $.length ? (A[D] = $[D - E], C.push(`indexDataIdx[${D - E}] = outputIdx[${D}];`)) : (A[D] = k[D - $.length + 1], C.push(`inputIdx[${D - $.length + 1}] = outputIdx[${D}];`));
                const F = `
      float process(int outputIdx[${A.length || 1}]) {
        int inputIdx[${k.length}];
        int indexDataIdx[${$.length || 1}];
        indexDataIdx[0] = 0;
        ${C.join(`
        `)}
        int idx = int(_B(indexDataIdx));
        inputIdx[${E}] = idx < 0 ? idx + ${k[E]} : idx;
        return _A(inputIdx);
      }`;
                return Object.assign(Object.assign({}, M), {
                  output: {
                    dims: A,
                    type: P[0].type,
                    textureType: d.TextureType.unpacked
                  },
                  shaderSource: F
                });
              })(0, u, r, n.axis)
            });
          }, _ = (h, r) => {
            if (!h || h.length !== 2)
              throw new Error("Gather requires 2 inputs.");
            const n = h[0].dims.length;
            if (n < 1)
              throw new Error("Invalid input shape.");
            if (r < -n || r > n - 1)
              throw new Error("Invalid axis.");
            if (l.NUMBER_TYPES.indexOf(h[0].type) === -1)
              throw new Error("Invaid input type.");
            if (h[1].type !== "int32" && h[1].type !== "int16")
              throw new Error("Invaid input type.");
          };
        },
        4776: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseGemmAttributesV11 = e.parseGemmAttributesV7 = e.gemm = void 0;
          const s = t(246), l = t(2517), f = t(2039);
          e.gemm = (h, r, n) => (_(r, n), [
            h.run(w(r, n), r)
          ]);
          const d = (h, r) => {
            const n = h.attributes.getInt("transA", 0) !== 0, u = h.attributes.getInt("transB", 0) !== 0, p = h.attributes.getFloat("alpha", 1), M = h.attributes.getFloat("beta", 1);
            return (0, s.createAttributeWithCacheKey)({
              transA: n,
              transB: u,
              alpha: p,
              beta: M,
              isOptionalC: r
            });
          };
          e.parseGemmAttributesV7 = (h) => d(h, false), e.parseGemmAttributesV11 = (h) => d(h, true);
          const w = (h, r) => {
            const n = {
              name: "Gemm",
              inputNames: h.length === 3 ? [
                "A",
                "B",
                "C"
              ] : [
                "A",
                "B"
              ],
              inputTypes: h.length === 3 ? [
                f.TextureType.unpacked,
                f.TextureType.unpacked,
                f.TextureType.unpacked
              ] : [
                f.TextureType.unpacked,
                f.TextureType.unpacked
              ],
              key: r.cacheKey
            };
            return Object.assign(Object.assign({}, n), {
              get: () => g(n, h, r)
            });
          }, g = (h, r, n) => {
            const u = r[0].dims.slice(), p = r[1].dims.slice(), [M, P] = l.GemmUtil.getShapeOfGemmResult(u, n.transA, p, n.transB, r.length === 3 ? r[2].dims : void 0), E = [
              M,
              P
            ];
            if (!E)
              throw new Error("Can't use gemm on the given tensors");
            let k = u[u.length - 1], $ = "";
            n.transA && (k = u[0]), n.transA && n.transB ? $ = "value += _A_T(a) * _B_T(b);" : n.transA && !n.transB ? $ = "value += _A_T(a) * _B(b);" : !n.transA && n.transB ? $ = "value += _A(a) * _B_T(b);" : n.transA || n.transB || ($ = "value += _A(a) * _B(b);");
            const A = E.length, C = `
      float process(int indices[${A}]) {
          int a[${A}];
          int b[${A}];
          ${r.length === 3 ? `int c[${r[2].dims.length}];` : ""}

          copyVec(indices, a);
          copyVec(indices, b);
          ${r.length === 3 ? "bcastIndices_C(indices, c);" : ""}

          float value = 0.0;
          for (int k=0; k<${k}; ++k) {
              a[${A - 1}] = k;
              b[${A - 2}] = k;
              ${$}
          }

          value = value * alpha;
          ${r.length === 3 ? "value += beta * _C(c);" : ""}
          return value;
      }`;
            return Object.assign(Object.assign({}, h), {
              output: {
                dims: E,
                type: r[0].type,
                textureType: f.TextureType.unpacked
              },
              variables: [
                {
                  name: "alpha",
                  type: "float",
                  data: n.alpha
                },
                {
                  name: "beta",
                  type: "float",
                  data: n.beta
                }
              ],
              shaderSource: C
            });
          }, _ = (h, r) => {
            if (!h)
              throw new Error("Input is missing");
            if (r.isOptionalC && (h.length < 2 || h.length > 3))
              throw new Error("Invaid input shape.");
            if (!r.isOptionalC && h.length !== 3)
              throw new Error("Gemm requires 3 inputs");
            if (h.length === 3 && h[2].dims.length !== 1 && h[2].dims.length !== 2)
              throw new Error("Invalid input shape of C");
            if (h[0].type !== "float32" && h[0].type !== "float64" || h[1].type !== "float32" && h[1].type !== "float64" || h.length === 3 && h[2].type !== "float32" && h[2].type !== "float64")
              throw new Error("Invalid input type.");
            if (h[0].type !== h[1].type || h.length === 3 && h[0].type !== h[2].type)
              throw new Error("Input types are mismatched");
          };
        },
        8555: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createPackedIm2ColProgramInfoLoader = void 0;
          const s = t(5060), l = t(2039), f = t(2827);
          e.createPackedIm2ColProgramInfoLoader = (d, w, g, _, h) => {
            const r = (n = h.cacheKey, {
              name: "Im2Col (packed)",
              inputNames: [
                "A"
              ],
              inputTypes: [
                l.TextureType.packed
              ],
              cacheHint: n
            });
            var n;
            return Object.assign(Object.assign({}, r), {
              get: () => ((u, p, M, P, E, k) => {
                const $ = M.dims, A = P.dims, C = E.length, F = [
                  A[1] * A[2] * A[3],
                  E[2] * E[3]
                ], D = A[2] * A[3], N = (0, f.unpackFromChannel)(), R = (0, s.getGlsl)(u.session.backend.glContext.version);
                let j = "";
                for (let te = 0; te <= 1; te++)
                  for (let J = 0; J <= 1; J++)
                    j += `
            blockIndex = rc.x + ${J};
            pos = rc.y + ${te};

            if(blockIndex < ${F[1]} && pos < ${F[0]}) {
              offsetY = int(blockIndex / (${E[C - 1]})) * ${k.strides[0]} -
                ${k.pads[0]};
              d0 = offsetY + ${k.dilations[0]} * (imod(pos, ${D}) / ${A[2]});

              if(d0 < ${$[2]} && d0 >= 0) {
                offsetX = imod(blockIndex, ${E[C - 1]}) * ${k.strides[1]} -
                  ${k.pads[1]};
                d1 = offsetX + ${k.dilations[1]} * imod(imod(pos, ${D}), ${A[2]});

                if(d1 < ${$[3]} && d1 >= 0) {

                  ch = int(float(pos)/ ${D}.);
                    innerDims = vec2(d0, d1);
                    result[${2 * te + J}] = getChannel(
                      getA(0, ch, int(innerDims.x),
                      int(innerDims.y)), innerDims);
                }
              }
            }

          `;
                const Z = `
      ${N}

      void main() {
        ivec2 rc = getOutputCoords();
          vec4 result = vec4(0.0);
          int blockIndex, pos, offsetY, d0, offsetX, d1, ch;
          vec2 innerDims;
          ${j}
          ${R.output} = result;
      }
            `;
                return Object.assign(Object.assign({}, p), {
                  output: {
                    dims: F,
                    type: M.type,
                    textureType: l.TextureType.packed
                  },
                  shaderSource: Z,
                  hasMain: true
                });
              })(d, r, w, g, _, h)
            });
          };
        },
        3248: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.calculateIm2ColDims = e.createIm2ColProgramInfoLoader = void 0;
          const s = t(2039);
          e.createIm2ColProgramInfoLoader = (l, f, d, w, g) => {
            const _ = (h = g.cacheKey, {
              name: "Im2Col",
              inputNames: [
                "X"
              ],
              inputTypes: [
                s.TextureType.unpacked
              ],
              cacheHint: h
            });
            var h;
            return Object.assign(Object.assign({}, _), {
              get: () => ((r, n, u, p, M, P) => {
                const E = u.dims, k = p.dims, $ = M.length, A = (0, e.calculateIm2ColDims)(E, k, M, 4), C = `
        const int XC = ${E[1]};
        const int XH = ${E[2]};
        const int XW = ${E[3]};
        const int KH = ${P.kernelShape[0]};
        const int KW = ${P.kernelShape[1]};
        const int dilationH = ${P.dilations[0]};
        const int dilationW = ${P.dilations[1]};
        const int strideH = ${P.strides[0]};
        const int strideW = ${P.strides[1]};
        const int padH = ${P.pads[0]};
        const int padW = ${P.pads[1]};
        const int KHKW = KH*KW;
        const int XCKHKW = XC * KHKW;
        const int outputChannels = 4;
        vec4 process(int indices[${$}]) {
          int b  = indices[0]; // batch size
          int oh = indices[1] * strideH - padH; //output height
          int ow = indices[2] * strideW - padW; //output width
          int p = indices[3] * outputChannels; //patch
          vec4 value = vec4(0.0);
          for(int i=0; i < outputChannels; ++i) {
            if(p < XCKHKW) {
              int patchC = p / KHKW;
              int patchH = (p - patchC*KHKW) / KW;
              int patchW = (p - patchC*KHKW) - patchH * KW;
              int xh2 = oh + patchH * dilationH;
              int xw2 = ow + patchW * dilationW;
              int x[${E.length}];
              x[0] = b;
              x[1] = patchC;
              x[2] = xh2;
              x[3] = xw2;
              if(xh2 >= 0 &&
                  xh2 < XH &&
                  xw2 >= 0 &&
                  xw2 < XW) {
                value[i] = _X(x);
              }
            }
            ++p;
          }
          return value;
        }
        `;
                return Object.assign(Object.assign({}, n), {
                  output: {
                    dims: A,
                    type: u.type,
                    textureType: s.TextureType.packedLastDimension
                  },
                  shaderSource: C
                });
              })(0, _, f, d, w, g)
            });
          }, e.calculateIm2ColDims = (l, f, d, w = 4) => [
            d[0],
            d[2],
            d[3],
            Math.ceil(l[1] * f[2] * f[3] / w)
          ];
        },
        6572: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseImageScalerAttributes = e.imageScaler = void 0;
          const s = t(246), l = t(2039);
          e.imageScaler = (_, h, r) => (g(h), [
            _.run(d(_, h, r), h)
          ]), e.parseImageScalerAttributes = (_) => {
            const h = _.attributes.getFloat("scale"), r = _.attributes.getFloats("bias");
            return (0, s.createAttributeWithCacheKey)({
              scale: h,
              bias: r
            });
          };
          const f = {
            name: "ImageScaler",
            inputNames: [
              "X"
            ],
            inputTypes: [
              l.TextureType.unpacked
            ]
          }, d = (_, h, r) => {
            const n = Object.assign(Object.assign({}, f), {
              cacheHint: r.cacheKey
            });
            return Object.assign(Object.assign({}, n), {
              get: () => ((u, p, M, P) => {
                const E = M[0].dims.slice(), k = E.length, $ = `
      ${w(P.bias.length)}
      float process(int indices[${k}]) {
        return _X(indices) * scale + getBias(bias, indices[1]);
      }`;
                return Object.assign(Object.assign({}, p), {
                  output: {
                    dims: E,
                    type: M[0].type,
                    textureType: l.TextureType.unpacked
                  },
                  variables: [
                    {
                      name: "bias",
                      type: "float",
                      arrayLength: P.bias.length,
                      data: P.bias
                    },
                    {
                      name: "scale",
                      type: "float",
                      data: P.scale
                    }
                  ],
                  shaderSource: $
                });
              })(0, n, h, r)
            });
          }, w = (_) => {
            const h = [
              `float getBias(float bias[${_}], int channel) {`
            ];
            for (let r = 0; r < _; ++r)
              r === 0 ? h.push(`	if (channel == ${r}) { return bias[${r}]; }`) : r === _ - 1 ? h.push(`	else { return bias[${r}]; }`) : h.push(`	else if (channel == ${r}) { return bias[${r}]; }`);
            return h.push("	}"), h.join(`
`);
          }, g = (_) => {
            if (!_ || _.length !== 1)
              throw new Error("ImageScaler requires 1 input.");
            if (_[0].dims.length !== 4)
              throw new Error("Invalid input shape.");
            if (_[0].type !== "float32" && _[0].type !== "float64")
              throw new Error("Invalid input type.");
          };
        },
        3346: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseInstanceNormalizationAttributes = e.instanceNormalization = void 0;
          const s = t(5060), l = t(2039);
          e.instanceNormalization = (h, r, n) => {
            _(r);
            const u = h.run(d(r[0]), r);
            return [
              h.run(g(h, r[0], n, u.dims), [
                r[0],
                u,
                r[1],
                r[2]
              ])
            ];
          }, e.parseInstanceNormalizationAttributes = (h) => h.attributes.getFloat("epsilon", 1e-5);
          const f = {
            name: "InstanceNormalization_MeanAndVariance",
            inputNames: [
              "X"
            ],
            inputTypes: [
              l.TextureType.unpacked
            ]
          }, d = (h) => Object.assign(Object.assign({}, f), {
            get: () => ((r, n) => {
              const u = n.dims.slice(), p = u[1], M = u[2] * u[3], P = [
                u[0],
                p
              ], E = `
      vec4 process(int[2] indices) {
        vec4 v = vec4(0.0);
        int a[4];
        a[0] = indices[0];
        a[1] = indices[1];
        float temp = 0.0;
        for(int a2=0; a2<${u[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${u[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += x;
          }
        }
        float mean = temp / float(${M});
        temp = 0.0;
        for(int a2=0; a2<${u[2]}; a2++) {
          a[2] = a2;
          for(int a3=0; a3<${u[3]}; a3++) {
            a[3] = a3;
            float x = _X(a);
            temp += (x - mean) * (x - mean);
          }
        }
        v.r = mean;
        v.g = temp / float(${M});

        return v;
      }`;
              return Object.assign(Object.assign({}, r), {
                output: {
                  dims: P,
                  type: n.type,
                  textureType: l.TextureType.packedLastDimension
                },
                shaderSource: E
              });
            })(f, h)
          }), w = {
            name: "InstanceNormalization_ComputeOutput",
            inputNames: [
              "X",
              "MeanAndVariance",
              "Scale",
              "B"
            ],
            inputTypes: [
              l.TextureType.unpacked,
              l.TextureType.packedLastDimension,
              l.TextureType.unpacked,
              l.TextureType.unpacked
            ]
          }, g = (h, r, n, u) => {
            const p = Object.assign(Object.assign({}, w), {
              cacheHint: `${n}`
            });
            return Object.assign(Object.assign({}, p), {
              get: () => ((M, P, E, k, $) => {
                const A = (0, s.getGlsl)(M.session.backend.glContext.version), [C, F] = M.calculateTextureWidthAndHeight($, l.TextureType.packedLastDimension), [D, N] = [
                  C / 4,
                  F
                ], R = `
      vec4 get_MeanAndVariance(int[2] mv) {
        int offset = indicesToOffset_MeanAndVariance(mv);
        vec2 coords = offsetToCoords(offset, ${D}, ${N});
        return ${A.texture2D}(MeanAndVariance, coords);
      }

      float process(int[4] indices) {
        int mv[2];
        mv[0] = indices[0];
        mv[1] = indices[1];
        vec4 mean_and_variance = get_MeanAndVariance(mv);
        float mean = mean_and_variance.r;
        float variance = mean_and_variance.g;

        int sb[1];
        sb[0] = indices[1];
        float scale = _Scale(sb);
        float b = _B(sb);

        return scale * (_X(indices) - mean) / sqrt(variance + epsilon) + b;
      }`;
                return Object.assign(Object.assign({}, P), {
                  output: {
                    dims: E.dims,
                    type: E.type,
                    textureType: l.TextureType.unpacked
                  },
                  variables: [
                    {
                      name: "epsilon",
                      type: "float",
                      data: k
                    }
                  ],
                  shaderSource: R
                });
              })(h, p, r, n, u)
            });
          }, _ = (h) => {
            if (!h || h.length !== 3)
              throw new Error("InstanceNormalization requires 3 inputs.");
            const r = h[0], n = h[1], u = h[2];
            if (r.dims.length < 3 || n.dims.length !== 1 || u.dims.length !== 1)
              throw new Error("Invalid input shape.");
            if (n.dims[0] !== r.dims[1] || u.dims[0] !== r.dims[1])
              throw new Error("Input shapes are mismatched.");
            if (r.type !== "float32" && r.type !== "float64" || n.type !== "float32" && n.type !== "float64" || u.type !== "float32" && u.type !== "float64")
              throw new Error("Invalid input type.");
            if (h[0].dims.length !== 4)
              throw new Error("Only support 4-D input shape.");
          };
        },
        708: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createPackedMatmulProgramInfoLoader = void 0;
          const s = t(2517), l = t(5060), f = t(2039), d = t(9390), w = t(2823), g = t(5623);
          e.createPackedMatmulProgramInfoLoader = (_, h, r) => {
            const n = (u = h.length > 2, p = r.activationCacheKey, {
              name: "MatMul (packed)",
              inputNames: u ? [
                "A",
                "B",
                "Bias"
              ] : [
                "A",
                "B"
              ],
              inputTypes: u ? [
                f.TextureType.packed,
                f.TextureType.packed,
                f.TextureType.packed
              ] : [
                f.TextureType.packed,
                f.TextureType.packed
              ],
              cacheHint: p
            });
            var u, p;
            return Object.assign(Object.assign({}, n), {
              get: () => ((M, P, E, k) => {
                const $ = E.length > 2, A = $ ? "value += getBiasForMatmul();" : "", C = E[0].dims, F = E[1].dims, D = s.BroadcastUtil.calcShape(C, F, true), N = !s.ShapeUtil.areEqual(E[0].dims, E[1].dims);
                if (!D)
                  throw new Error("Can't use matmul on the given tensors");
                const R = C[C.length - 1], j = Math.ceil(R / 2), Z = C.length, te = F.length, J = (0, l.getGlsl)(M.session.backend.glContext.version), G = (0, d.getCoordsDataType)(D.length), H = D.length, U = (0, d.getGlChannels)(), { activationFunction: Q, applyActivation: he } = (0, w.getActivationSnippet)(k), fe = $ ? `${(0, g.getBiasForMatmul)(G, U, E[2].dims, D, true)}` : "", Me = N ? `${function(Ee, Oe, Ye, We) {
                  let ot = [], vt = [];
                  const qe = Ye[0].dims, _e = Ye[1].dims, le = qe.length, De = _e.length, Be = We.length, Ze = Be - le, rt = Be - De;
                  ot = qe.map((mt, Je) => `coords.${Oe[Je + Ze]}`), ot[le - 1] = "i*2", ot.join(", "), vt = _e.map((mt, Je) => `coords.${Oe[Je + rt]}`), vt[De - 2] = "i*2", vt.join(", ");
                  const je = s.BroadcastUtil.getBroadcastDims(qe, We), it = s.BroadcastUtil.getBroadcastDims(_e, We), Ge = je.map((mt) => `coords.${Oe[mt + Ze]} = 0;`).join(`
`), lt = it.map((mt) => `coords.${Oe[mt + rt]} = 0;`).join(`
`), ht = `int lastDim = coords.${Oe[Be - 1]};
  coords.${Oe[Be - 1]} = coords.${Oe[Be - 2]};
  coords.${Oe[Be - 2]} = lastDim;`;
                  return `
vec4 getAAtOutCoordsMatmul(int i) {
  ${Ee} coords = getOutputCoords();
  ${ht}
  ${Ge}
  vec4 outputValue = getA(${ot});
  return outputValue;
}

vec4 getBAtOutCoordsMatmul(int i) {
  ${Ee} coords = getOutputCoords();
  ${ht}
  ${lt}
  vec4 outputValue = getB(${vt});
  return outputValue;
}`;
                }(G, U, E, D)}` : "", pe = N ? "getAAtOutCoordsMatmul(i)" : `getA(${function(Ee, Oe) {
                  let Ye = "";
                  for (let We = 0; We < Oe - 2; We++)
                    Ye += `rc.${Ee[We]}, `;
                  return Ye += `rc.${Ee[Oe - 2]}, i*2`, Ye;
                }(U, Z)})`, oe = N ? "getBAtOutCoordsMatmul(i)" : `getB(${function(Ee, Oe) {
                  let Ye = "";
                  for (let We = 0; We < Oe - 2; We++)
                    Ye += `rc.${Ee[We]}, `;
                  return Ye += `i*2, rc.${Ee[Oe - 1]}`, Ye;
                }(U, te)})`, be = `
            ${Me}
            ${fe}
            ${Q}
            void main() {
              ${N ? "" : `${G} rc =
          getOutputCoords(); int lastDim = rc.${U[H - 1]}; rc.${U[H - 1]} =
          rc.${U[H - 2]}; rc.${U[H - 2]} = lastDim;
      `}

              vec4 value = vec4(0);
              for (int i = 0; i < ${j}; i++) {
                vec4 a = ${pe};
                vec4 b = ${oe};

                value += (a.rrbb * b.rgrg);
                value += (a.ggaa * b.baba);
              }
              ${A}
              ${he}
              ${J.output} = value;
            }`;
                return Object.assign(Object.assign({}, P), {
                  output: {
                    dims: D,
                    type: E[0].type,
                    textureType: f.TextureType.packed
                  },
                  shaderSource: be,
                  hasMain: true
                });
              })(_, n, h, r)
            });
          };
        },
        5623: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.getBiasForMatmul = e.createMatmulProgramInfoLoader = e.parseMatMulAttributes = e.matMul = void 0;
          const s = t(2517), l = t(2039), f = t(9390), d = t(2823), w = t(708);
          function g(r, n) {
            const u = (p = r.length > 2, M = n.activationCacheKey, {
              name: "MatMul",
              inputNames: p ? [
                "A",
                "B",
                "Bias"
              ] : [
                "A",
                "B"
              ],
              inputTypes: p ? [
                l.TextureType.unpacked,
                l.TextureType.unpacked,
                l.TextureType.unpacked
              ] : [
                l.TextureType.unpacked,
                l.TextureType.unpacked
              ],
              cacheHint: M
            });
            var p, M;
            return Object.assign(Object.assign({}, u), {
              get: () => function(P, E, k) {
                const $ = E[0].dims, A = E[1].dims, C = s.BroadcastUtil.calcShape($, A, true);
                if (!C)
                  throw new Error("Can't use matmul on the given tensors");
                const F = (0, f.getCoordsDataType)(C.length), D = (0, f.getGlChannels)(), { activationFunction: N, applyActivation: R } = (0, d.getActivationSnippet)(k), j = E.length > 2, Z = j ? "value += getBiasForMatmul();" : "", te = j ? `${h(F, D, E[2].dims, C, false)}` : "", J = C.length, G = $.length, H = A.length, U = `
    ${N}
    ${te}
    float process(int indices[${J}]) {
        int a[${G}];
        int b[${H}];
        bcastMatmulIndices_A(indices, a);
        bcastMatmulIndices_B(indices, b);

        float value;
        for (int k=0; k<${$[$.length - 1]}; ++k) {
            a[${G - 1}] = k;
            b[${H - 2}] = k;
            value += _A(a) * _B(b);
        }
        ${Z}
        ${R}
        return value;
    }`;
                return Object.assign(Object.assign({}, P), {
                  output: {
                    dims: C,
                    type: E[0].type,
                    textureType: l.TextureType.unpacked
                  },
                  shaderSource: U
                });
              }(u, r, n)
            });
          }
          e.matMul = (r, n, u) => (_(n), r.session.pack ? [
            r.run((0, w.createPackedMatmulProgramInfoLoader)(r, n, u), n)
          ] : [
            r.run(g(n, u), n)
          ]), e.parseMatMulAttributes = (r) => (0, d.parseInternalActivationAttributes)(r.attributes), e.createMatmulProgramInfoLoader = g;
          const _ = (r) => {
            if (!r || r.length !== 2)
              throw new Error("MatMul requires 2 inputs.");
            if (r[0].dims[r[0].dims.length - 1] !== r[1].dims[r[1].dims.length - 2])
              throw new Error("shared dimension does not match.");
            if (r[0].type !== "float32" && r[0].type !== "float64" || r[1].type !== "float32" && r[1].type !== "float64")
              throw new Error("inputs should be float type");
            if (r[0].type !== r[1].type)
              throw new Error("inputs types should match");
          };
          function h(r, n, u, p, M) {
            let P = "";
            const E = u.length, k = p.length, $ = k - E;
            P = k < 2 && E > 0 ? "coords" : u.map((F, D) => `coords.${n[D + $]}`).join(", ");
            const A = s.BroadcastUtil.getBroadcastDims(u, p).map((F) => `coords.${n[F + $]} = 0;`).join(`
`);
            let C = "vec4(outputValue.xx, outputValue.yy)";
            return s.ShapeUtil.size(u) === 1 && (C = "vec4(outputValue.x)"), M ? `
vec4 getBiasForMatmul() {
  ${r} coords = getOutputCoords();
  ${A}
  vec4 outputValue = getBias(${P});
  return ${C};
}` : `
float getBiasForMatmul() {
  ${r} coords = getOutputCoords();
  ${A}
  return getBias(coords.x);
}`;
          }
          e.getBiasForMatmul = h;
        },
        2403: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createPackProgramInfoLoader = void 0;
          const s = t(5060), l = t(2039), f = t(9390), d = t(2827), w = {
            name: "pack",
            inputNames: [
              "A"
            ],
            inputTypes: [
              l.TextureType.unpackedReversed
            ]
          };
          e.createPackProgramInfoLoader = (g, _) => Object.assign(Object.assign({}, w), {
            get: () => ((h, r) => {
              const n = (0, s.getGlsl)(h.session.backend.glContext.version), u = r.dims, p = u.length, M = r.dims.length, P = (0, f.getCoordsDataType)(M), E = (0, d.getChannels)("rc", M), k = ($ = M, A = E, C = u[u.length - 2], F = u[u.length - 1], $ === 0 || $ === 1 ? "" : `
    int r = ${A[$ - 2]};
    int c = ${A[$ - 1]};
    int rp1 = ${A[$ - 2]} + 1;
    int cp1 = ${A[$ - 1]} + 1;
    bool rEdge = rp1 >= ${F};
    bool cEdge = cp1 >= ${C};
    `);
              var $, A, C, F;
              let D;
              D = p === 0 ? [
                1,
                1
              ] : p === 1 ? [
                u[0],
                1
              ] : [
                u[M - 1],
                u[M - 2]
              ];
              const N = function(Z, te, J) {
                if (Z === 0)
                  return "false";
                if (Z === 1)
                  return `rc > ${te[0]}`;
                let G = "";
                for (let H = Z - 2; H < Z; H++)
                  G += `${J[H]} >= ${te[H - Z + 2]}`, H < Z - 1 && (G += "||");
                return G;
              }(M, D, E), R = function(Z, te) {
                const J = Z.length;
                if (J === 0)
                  return "getA(), 0, 0, 0";
                if (J === 1)
                  return `getA(rc),
            rc + 1 >= ${Z[0]} ? 0. : getA(rc + 1),
            0, 0`;
                let G = "";
                if (J > 2)
                  for (let H = 0; H < J - 2; ++H)
                    G += `${te[H]},`;
                return `getA(${G}r, c),
          rEdge ? 0. : getA(${G}rp1, c),
          cEdge ? 0. : getA(${G}r, cp1),
          rEdge || cEdge ? 0. : getA(${G}rp1, cp1)`;
              }(u, E), j = `
        void main() {
          ${P} rc = getOutputCoords();

          if(${N}) {
            ${n.output} = vec4(0);
          } else {
            ${k}

            ${n.output} = vec4(${R});
          }
        }
      `;
              return Object.assign(Object.assign({}, w), {
                hasMain: true,
                output: {
                  dims: r.dims,
                  type: r.type,
                  textureType: l.TextureType.packed
                },
                shaderSource: j
              });
            })(g, _)
          });
        },
        2827: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.unpackFromChannel = e.getChannels = e.getVecChannels = void 0;
          const s = t(9390);
          function l(f, d) {
            return (0, s.getGlChannels)(d).map((w) => `${f}.${w}`);
          }
          e.getVecChannels = l, e.getChannels = function(f, d) {
            return d === 1 ? [
              f
            ] : l(f, d);
          }, e.unpackFromChannel = function() {
            return `
    float getChannel(vec4 frag, int dim) {
      int modCoord = imod(dim, 2);
      return modCoord == 0 ? frag.r : frag.g;
    }

    float getChannel(vec4 frag, vec2 innerDims) {
      vec2 modCoord = mod(innerDims, 2.);
      return modCoord.x == 0. ?
        (modCoord.y == 0. ? frag.r : frag.g) :
        (modCoord.y == 0. ? frag.b : frag.a);
    }
  `;
          };
        },
        2870: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parsePadAttributesV11 = e.padV11 = e.parsePadAttributesV2 = e.padV2 = void 0;
          const s = t(246), l = t(2517), f = t(5060), d = t(2039), w = {
            name: "Pad",
            inputNames: [
              "A"
            ],
            inputTypes: [
              d.TextureType.unpacked
            ]
          };
          e.padV2 = (P, E, k) => (h(E), [
            P.run(Object.assign(Object.assign({}, w), {
              cacheHint: k.cacheKey,
              get: () => _(P, E[0], k)
            }), E)
          ]), e.parsePadAttributesV2 = (P) => {
            const E = P.attributes.getString("mode", "constant"), k = P.attributes.getFloat("value", 0), $ = P.attributes.getInts("pads");
            return (0, s.createAttributeWithCacheKey)({
              mode: E,
              value: k,
              pads: $
            });
          }, e.padV11 = (P, E, k) => {
            r(E);
            const $ = g(P, E, k);
            return (0, e.padV2)(P, [
              E[0]
            ], $);
          }, e.parsePadAttributesV11 = (P) => P.attributes.getString("mode", "constant");
          const g = (P, E, k) => {
            if (!P.session.isInitializer(E[1].dataId) || E.length >= 3 && !P.session.isInitializer(E[2].dataId))
              throw new Error("dynamic pad attributes are not allowed");
            const $ = Array.from(E[1].integerData), A = E.length >= 3 ? E[2].floatData[0] : 0;
            return (0, s.createAttributeWithCacheKey)({
              mode: k,
              pads: $,
              value: A
            });
          }, _ = (P, E, k) => {
            const $ = l.ShapeUtil.padShape(E.dims.slice(), k.pads), A = $.length, C = `
      ${n(P, E, k)}
      float process(int[${A}] indices) {
          return padA(indices);
      }`;
            return {
              name: "Pad",
              inputNames: [
                "A"
              ],
              inputTypes: [
                d.TextureType.unpacked
              ],
              output: {
                dims: $,
                type: E.type,
                textureType: d.TextureType.unpacked
              },
              shaderSource: C
            };
          }, h = (P) => {
            if (!P || P.length !== 1)
              throw new Error("Pad requires 1 input");
            if (P[0].type !== "float32" && P[0].type !== "float64")
              throw new Error("Invalid input type.");
          }, r = (P) => {
            if (!P || P.length !== 2 && P.length !== 3)
              throw new Error("Pad requires 2 or 3 inputs");
            if (P[1].type !== "int32")
              throw new Error("Invalid input type.");
            if (P.length >= 3 && P[2].type === "string")
              throw new Error("Invalid input type.");
          }, n = (P, E, k) => {
            const $ = (0, f.getGlsl)(P.session.backend.glContext.version), [A, C] = P.calculateTextureWidthAndHeight(E.dims, d.TextureType.unpacked), F = l.ShapeUtil.computeStrides(E.dims);
            switch (k.mode) {
              case "constant":
                return u($, E.dims, F, A, C, k.pads, k.value);
              case "reflect":
                return p($, E.dims, F, A, C, k.pads);
              case "edge":
                return M($, E.dims, F, A, C, k.pads);
              default:
                throw new Error("Invalid mode");
            }
          }, u = (P, E, k, $, A, C, F) => {
            const D = E.length;
            let N = "";
            for (let R = D - 1; R >= 0; --R)
              N += `
        k = m[${R}] - ${C[R]};
        if (k < 0)  return constant;
        if (k >= ${E[R]}) return constant;
        offset += k * ${k[R]};
        `;
            return `
      float padA(int m[${D}]) {
        const float constant = float(${F});
        int offset = 0;
        int k = 0;
        ${N}
        vec2 coords = offsetToCoords(offset, ${$}, ${A});
        float value = getColorAsFloat(${P.texture2D}(A, coords));
        return value;
      }
      `;
          }, p = (P, E, k, $, A, C) => {
            const F = E.length;
            let D = "";
            for (let N = F - 1; N >= 0; --N)
              D += `
        k = m[${N}] - ${C[N]};
        if (k < 0) { k = -k; }
        {
          const int _2n_1 = ${2 * (E[N] - 1)};
          k = int( mod( float(k), float(_2n_1) ) ) ;
          if(k >= ${E[N]}) { k = _2n_1 - k; }
        }
        offset += k * ${k[N]};
        `;
            return `
      float padA(int m[${F}]) {
        int offset = 0;
        int k = 0;
        ${D}
        vec2 coords = offsetToCoords(offset, ${$}, ${A});
        float value = getColorAsFloat(${P.texture2D}(A, coords));
        return value;
      }
      `;
          }, M = (P, E, k, $, A, C) => {
            const F = E.length;
            let D = "";
            for (let N = F - 1; N >= 0; --N)
              D += `
        k = m[${N}] - ${C[N]};
        if (k < 0)  k = 0;
        if (k >= ${E[N]}) k = ${E[N] - 1};
        offset += k * ${k[N]};
      `;
            return `
      float padA(int m[${F}]) {
        int offset = 0;
        int k = 0;
        ${D}
        vec2 coords = offsetToCoords(offset, ${$}, ${A});
        float value = getColorAsFloat(${P.texture2D}(A, coords));
        return value;
      }
      `;
          };
        },
        2143: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.globalMaxPool = e.parseMaxPoolAttributes = e.maxPool = e.parseGlobalAveragePoolAttributes = e.globalAveragePool = e.parseAveragePoolAttributes = e.averagePool = void 0;
          const s = t(246), l = t(2517), f = t(2039);
          e.averagePool = (M, P, E) => {
            r(P);
            const k = {
              name: "AveragePool",
              inputNames: [
                "X"
              ],
              inputTypes: [
                f.TextureType.unpacked
              ],
              cacheHint: E.cacheKey
            };
            return [
              M.run(Object.assign(Object.assign({}, k), {
                get: () => d(P, k, false, E)
              }), P)
            ];
          }, e.parseAveragePoolAttributes = (M) => {
            const P = M.attributes.getString("auto_pad", "NOTSET"), E = M.attributes.getInt("ceil_mode", 0), k = M.attributes.getInt("count_include_pad", 0) !== 0, $ = M.attributes.getInts("kernel_shape"), A = M.attributes.getInts("strides", []), C = M.attributes.getInts("pads", []);
            if (E !== 0)
              throw new Error("using ceil() in shape computation is not yet supported for AveragePool");
            return (0, s.createAttributeWithCacheKey)({
              autoPad: P,
              ceilMode: E,
              countIncludePad: k,
              kernelShape: $,
              strides: A,
              pads: C
            });
          };
          const d = (M, P, E, k) => {
            const [$, A] = g(M, k, E), C = l.ShapeUtil.size($.kernelShape);
            let F = "";
            $.countIncludePad ? F += `value /= float(${C});` : F += `value /= float(${C} - pad);`;
            const D = `
        ${n(M[0].dims, $, "value += _X(x);", F, "0.0")}
      `;
            return Object.assign(Object.assign({}, P), {
              output: {
                dims: A,
                type: M[0].type,
                textureType: f.TextureType.unpacked
              },
              shaderSource: D
            });
          };
          e.globalAveragePool = (M, P, E) => {
            r(P);
            const k = {
              name: "GlobalAveragePool",
              inputNames: [
                "X"
              ],
              inputTypes: [
                f.TextureType.unpacked
              ],
              cacheHint: `${E.countIncludePad}`
            };
            return [
              M.run(Object.assign(Object.assign({}, k), {
                get: () => d(P, k, true, E)
              }), P)
            ];
          }, e.parseGlobalAveragePoolAttributes = (M) => {
            const P = M.attributes.getInt("count_include_pad", 0) !== 0;
            return (0, s.createAttributeWithCacheKey)({
              autoPad: "",
              ceilMode: 0,
              countIncludePad: P,
              kernelShape: [],
              strides: [],
              pads: []
            });
          }, e.maxPool = (M, P, E) => {
            r(P);
            const k = {
              name: "MaxPool",
              inputNames: [
                "X"
              ],
              inputTypes: [
                f.TextureType.unpacked
              ],
              cacheHint: E.cacheKey
            };
            return [
              M.run(Object.assign(Object.assign({}, k), {
                get: () => w(P, k, false, E)
              }), P)
            ];
          }, e.parseMaxPoolAttributes = (M) => {
            const P = M.attributes.getString("auto_pad", "NOTSET"), E = M.attributes.getInt("ceil_mode", 0), k = M.attributes.getInts("kernel_shape"), $ = M.attributes.getInts("strides", []), A = M.attributes.getInts("pads", []), C = M.attributes.getInt("storage_order", 0), F = M.attributes.getInts("dilations", []);
            if (C !== 0)
              throw new Error("column major storage order is not yet supported for MaxPool");
            if (E !== 0)
              throw new Error("using ceil() in shape computation is not yet supported for MaxPool");
            return (0, s.createAttributeWithCacheKey)({
              autoPad: P,
              ceilMode: E,
              countIncludePad: false,
              kernelShape: k,
              strides: $,
              pads: A,
              storageOrder: C,
              dilations: F
            });
          };
          const w = (M, P, E, k) => {
            const [$, A] = g(M, k, E), C = `
      ${n(M[0].dims, $, `
      value = max(_X(x), value);
    `, "", "-1e5")}
    `;
            return Object.assign(Object.assign({}, P), {
              output: {
                dims: A,
                type: M[0].type,
                textureType: f.TextureType.unpacked
              },
              shaderSource: C
            });
          }, g = (M, P, E) => {
            const k = M[0].dims.slice(), $ = Object.hasOwnProperty.call(P, "dilations"), A = P.kernelShape.slice(), C = P.strides.slice(), F = $ ? P.dilations.slice() : [], D = P.pads.slice();
            l.PoolConvUtil.adjustPoolAttributes(E, k, A, C, F, D);
            const N = l.PoolConvUtil.computePoolOutputShape(E, k, C, F, A, D, P.autoPad), R = Object.assign({}, P);
            return $ ? Object.assign(R, {
              kernelShape: A,
              strides: C,
              pads: D,
              dilations: F,
              cacheKey: P.cacheKey
            }) : Object.assign(R, {
              kernelShape: A,
              strides: C,
              pads: D,
              cacheKey: P.cacheKey
            }), [
              R,
              N
            ];
          }, _ = {
            autoPad: "",
            ceilMode: 0,
            countIncludePad: false,
            kernelShape: [],
            strides: [],
            pads: [],
            storageOrder: 0,
            dilations: [],
            cacheKey: ""
          }, h = {
            name: "GlobalMaxPool",
            inputNames: [
              "X"
            ],
            inputTypes: [
              f.TextureType.unpacked
            ]
          };
          e.globalMaxPool = (M, P) => (r(P), [
            M.run(Object.assign(Object.assign({}, h), {
              get: () => w(P, h, true, _)
            }), P)
          ]);
          const r = (M) => {
            if (!M || M.length !== 1)
              throw new Error("Pool ops requires 1 input.");
            if (M[0].type !== "float32" && M[0].type !== "float64")
              throw new Error("Invalid input type.");
          }, n = (M, P, E, k, $) => {
            const A = M.length;
            if (P.kernelShape.length <= 2) {
              const C = P.kernelShape[P.kernelShape.length - 1], F = P.strides[P.strides.length - 1], D = P.pads[P.pads.length / 2 - 1], N = P.pads[P.pads.length - 1], R = M[A - 1];
              let j = "", Z = "", te = "";
              if (j = D + N !== 0 ? `
          for (int i = 0; i < ${C}; i++) {
            x[${A} - 1] = indices[${A} - 1] * ${F} - ${D} + i;
            if (x[${A} - 1] < 0 || x[${A} - 1] >= ${R}) {
              pad++;
              continue;
            }
            ${E}
          }` : `
          for (int i = 0; i < ${C}; i++) {
            x[${A} - 1] = indices[${A} - 1] * ${F} - ${D} + i;
            ${E}
          }`, P.kernelShape.length === 2) {
                const J = P.kernelShape[P.kernelShape.length - 2], G = P.strides[P.strides.length - 2], H = P.pads[P.pads.length / 2 - 2], U = P.pads[P.pads.length - 2], Q = M[A - 2];
                Z = H + U !== 0 ? `
            for (int j = 0; j < ${J}; j++) {
              x[${A} - 2] = indices[${A} - 2] * ${G} - ${H} + j;
              if (x[${A} - 2] < 0 || x[${A} - 2] >= ${Q}) {
                pad+= ${C};
                continue;
              }
          ` : `
            for (int j = 0; j < ${J}; j++) {
              x[${A} - 2] = indices[${A} - 2] * ${G} - ${H} + j;
            `, te = `
          }
        `;
              }
              return `
        float process(int indices[${A}]) {
          int x[${A}];
          copyVec(indices, x);

          float value = ${$};
          int pad = 0;
          ${Z}
          ${j}
          ${te}
          ${k}
          return value;
        }
      `;
            }
            {
              const C = l.ShapeUtil.size(P.kernelShape), F = l.ShapeUtil.computeStrides(P.kernelShape), D = F.length, N = P.pads.length, R = p(D), j = u(M, "inputDims"), Z = u(P.pads, "pads"), te = u(F, "kernelStrides"), J = u(P.strides, "strides");
              let G = "";
              return G = P.pads.reduce((H, U) => H + U) ? `
            if (x[j] >= inputDims[j] || x[j] < 0) {
              pad++;
              isPad = true;
              break;
            }
          }
          if (!isPad) {
            ${E}
          }` : `
          }
          ${E}
        `, `
        ${R}
        float process(int indices[${A}]) {
          int x[${A}];
          copyVec(indices, x);
          int offset[${D}];
          int pads[${N}];
          int inputDims[${A}];
          int kernelStrides[${D}];
          int strides[${D}];
          ${Z}
          ${j}
          ${J}
          ${te}

          float value = ${$};
          int pad = 0;
          bool isPad = false;
          for (int i = 0; i < ${C}; i++) {
            offsetToIndices(i, kernelStrides, offset);
            isPad = false;
            for (int j = ${A} - ${D}; j < ${A}; j++) {
              x[j] = indices[j] * strides[j - ${A} + ${D}]
                + offset[j - ${A} + ${D}] - pads[j - 2];
              ${G}
          }
          ${k}

          return value;
        }
      `;
            }
          }, u = (M, P) => {
            let E = "";
            for (let k = 0; k < M.length; k++)
              E += `
      ${P}[${k}] = ${M[k]};
    `;
            return E;
          }, p = (M) => `
  void offsetToIndices(int offset, int[${M}] strides, out int[${M}] indices) {
    if (${M} == 0) {
      return;
    }
    for (int i = 0; i < ${M} - 1; ++i) {
      indices[i] = offset / strides[i];
      offset -= indices[i] * strides[i];
    }
    indices[${M} - 1] = offset;
  }`;
        },
        4939: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.reduceLogSumSquare = e.reduceLogSum = e.reduceProd = e.reduceMin = e.reduceMax = e.reduceMean = e.reduceSum = e.parseReduceAttributes = void 0;
          const s = t(246), l = t(782), f = t(2517), d = t(2039), w = (h, r, n, u, p) => {
            _(r);
            const M = {
              name: u,
              inputNames: [
                "A"
              ],
              inputTypes: [
                d.TextureType.unpacked
              ]
            };
            return [
              h.run(Object.assign(Object.assign({}, M), {
                cacheHint: n.cacheKey,
                get: () => g(h, r, n, u, p, M)
              }), r)
            ];
          };
          e.parseReduceAttributes = (h) => {
            const r = h.attributes.getInts("axes", []), n = h.attributes.getInt("keepdims", 1) === 1;
            return (0, s.createAttributeWithCacheKey)({
              axes: r,
              keepDims: n
            });
          };
          const g = (h, r, n, u, p, M) => {
            const P = [], E = r[0].dims.length || 1, k = [], $ = f.ShapeUtil.normalizeAxes(n.axes, r[0].dims.length), A = p(r, $);
            let C = A[1];
            for (let D = 0; D < r[0].dims.length; D++)
              $.indexOf(D) >= 0 || $.length === 0 ? (n.keepDims && P.push(1), C = `
          for(int j${D} = 0; j${D} < ${r[0].dims[D]}; j${D}++) {
            inputIdx[${D}] = j${D};
            ${C}
          }`) : (k.push(`inputIdx[${D}] = outputIdx[${P.length}];`), P.push(r[0].dims[D]));
            const F = `
      float process(int outputIdx[${P.length || 1}]) {
        float value;                 // final result
        int inputIdx[${E}];      // addressing input data
        ${k.join(`
`)}
        ${A[0]}       // init ops for reduce max/min
        ${C}
        ${A[2]}       // final computation for reduce mean
        return value;
      }`;
            return Object.assign(Object.assign({}, M), {
              output: {
                dims: P,
                type: r[0].type,
                textureType: d.TextureType.unpacked
              },
              shaderSource: F
            });
          }, _ = (h) => {
            if (!h || h.length !== 1)
              throw new Error("Reduce op requires 1 input.");
            if (l.NUMBER_TYPES.indexOf(h[0].type) === -1)
              throw new Error("Invalid input type.");
          };
          e.reduceSum = (h, r, n) => w(h, r, n, "ReduceSum", () => [
            "value = 0.0;",
            "value += _A(inputIdx);",
            ""
          ]), e.reduceMean = (h, r, n) => w(h, r, n, "ReduceMean", (u, p) => {
            let M = 1;
            for (let P = 0; P < u[0].dims.length; P++)
              (p.indexOf(P) >= 0 || p.length === 0) && (M *= u[0].dims[P]);
            return [
              "value = 0.0;",
              "value += _A(inputIdx);",
              `value /= ${M}.;`
            ];
          }), e.reduceMax = (h, r, n) => w(h, r, n, "ReduceMax", (u, p) => {
            const M = [];
            for (let P = 0; P < u[0].dims.length; P++)
              (p.indexOf(P) >= 0 || p.length === 0) && M.push(`inputIdx[${P}] = 0;`);
            return [
              `${M.join(`
`)}
value = _A(inputIdx);`,
              "value = max(value, _A(inputIdx));",
              ""
            ];
          }), e.reduceMin = (h, r, n) => w(h, r, n, "ReduceMin", (u, p) => {
            const M = [];
            for (let P = 0; P < u[0].dims.length; P++)
              (p.indexOf(P) >= 0 || p.length === 0) && M.push(`inputIdx[${P}] = 0;`);
            return [
              `${M.join(`
`)}
value = _A(inputIdx);`,
              "value = min(value, _A(inputIdx));",
              ""
            ];
          }), e.reduceProd = (h, r, n) => w(h, r, n, "ReduceProd", () => [
            "value = 1.0;",
            "value *= _A(inputIdx);",
            ""
          ]), e.reduceLogSum = (h, r, n) => w(h, r, n, "ReduceLogSum", () => [
            "value = 0.0;",
            "value += _A(inputIdx);",
            "value = log(value);"
          ]), e.reduceLogSumSquare = (h, r, n) => w(h, r, n, "ReduceLogSumSquare", () => [
            "float t; value = 0.0;",
            "t = _A(inputIdx); value += t * t;",
            ""
          ]);
        },
        7019: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.isReshapeCheap = e.processDims3D = e.createPackedReshape3DProgramInfoLoader = void 0;
          const s = t(2517), l = t(5060), f = t(2039), d = t(2827);
          e.createPackedReshape3DProgramInfoLoader = (w, g, _) => {
            const h = ((r) => ({
              name: "Reshape (packed)",
              inputTypes: [
                f.TextureType.packed
              ],
              inputNames: [
                "A"
              ],
              cacheHint: `${r}`
            }))(_);
            return Object.assign(Object.assign({}, h), {
              get: () => ((r, n, u, p) => {
                const M = n.dims, P = p;
                let E = "";
                for (let A = 0; A < 4; A++) {
                  let C = "";
                  switch (A) {
                    case 0:
                      C = "outputCoords = rc;";
                      break;
                    case 1:
                      C = "outputCoords = ivec3(rc.x, rc.y+1, rc.z);";
                      break;
                    case 2:
                      C = "outputCoords = ivec3(rc.x, rc.y, rc.z+1);";
                      break;
                    case 3:
                      C = "outputCoords = ivec3(rc.x, rc.y+1, rc.z+1);";
                      break;
                    default:
                      throw new Error();
                  }
                  E += `
        ${C}
        ${A > 0 ? "if(outputCoords.y < rows && outputCoords.z < cols){" : ""}
          int flattenedIndex = getFlattenedIndex(outputCoords);

          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flattenedIndex);
          vec2 innerDims = vec2(float(inputRC.y),float(inputRC.z));

          result[${A}] = getChannel(getA(inputRC.x, inputRC.y, inputRC.z), innerDims);

        ${A > 0 ? "}" : ""}
      `;
                }
                const k = (0, l.getGlsl)(r.session.backend.glContext.version), $ = `
      ${function(A) {
                  const C = s.ShapeUtil.computeStrides(A), F = [
                    "b",
                    "r",
                    "c"
                  ], D = "index";
                  return `
    ivec3 inputCoordsFromReshapedOutCoords(int index) {
      ${C.map((N, R) => `int ${F[R]} = ${D} / ${N}; ${R === C.length - 1 ? `int ${F[R + 1]} = ${D} - ${F[R]} * ${N}` : `index -= ${F[R]} * ${N}`};`).join("")}
      return ivec3(b, r, c);
    }
  `;
                }(M)}
      ${function(A) {
                  const C = s.ShapeUtil.computeStrides(A);
                  return `
  int getFlattenedIndex(ivec3 coords) {
    // reverse y, z order
    return coords.x * ${C[0]} + coords.z * ${C[1]} + coords.y;
  }
`;
                }(P)}
      ${(0, d.unpackFromChannel)()}

      void main() {
        ivec3 rc = getOutputCoords();

        vec4 result = vec4(0.0);

        ivec3 outputCoords;
        int rows = ${P[2]};
        int cols = ${P[1]};

        ${E}
        ${k.output} = result;
      }
    `;
                return Object.assign(Object.assign({}, u), {
                  output: {
                    dims: P,
                    type: n.type,
                    textureType: f.TextureType.packed
                  },
                  shaderSource: $,
                  hasMain: true
                });
              })(w, g, h, _)
            });
          }, e.processDims3D = function(w) {
            if (w.length === 0)
              return [
                1,
                1,
                1
              ];
            let g = 1;
            for (let _ = 0; _ < w.length - 2; ++_)
              g *= w[_];
            return [
              g,
              w.length > 1 ? w[w.length - 2] : 1,
              w[w.length - 1]
            ];
          }, e.isReshapeCheap = function(w, g) {
            let _ = false;
            return _ = w.length === 0 || g.length === 0 || (w.length < 2 || g.length < 2 ? w[w.length - 1] === g[g.length - 1] : w[w.length - 1] === g[g.length - 1] && w[w.length - 2] === g[g.length - 2]), _;
          };
        },
        718: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.reshape = void 0;
          const s = t(2517);
          e.reshape = (l, f) => {
            const d = s.ShapeUtil.calculateReshapedDims(f[0].dims, f[1].integerData);
            return l.session.pack ? [
              l.reshapePacked(f[0], d)
            ] : [
              l.reshapeUnpacked(f[0], d)
            ];
          };
        },
        2268: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseResizeAttributesV11 = e.parseResizeAttributesV10 = e.resize = void 0;
          const s = t(5060), l = t(2039), f = t(9390), d = t(2827), w = t(9793), g = {
            name: "Resize",
            inputNames: [
              "A"
            ],
            inputTypes: [
              l.TextureType.packed
            ]
          };
          e.resize = (u, p, M) => ((0, w.validateInputs)(p, M), [
            u.run(Object.assign(Object.assign({}, g), {
              cacheHint: M.cacheKey,
              get: () => _(u, p, M)
            }), p)
          ]), e.parseResizeAttributesV10 = (u) => (0, w.parseUpsampleAttributes)(u, 10), e.parseResizeAttributesV11 = (u) => (0, w.parseUpsampleAttributes)(u, 11);
          const _ = (u, p, M) => {
            const P = (0, s.getGlsl)(u.session.backend.glContext.version), [E, k] = h(p, M);
            if (E.every((G) => G === 1) && M.coordinateTransformMode !== "tf_crop_and_resize")
              return Object.assign(Object.assign({}, g), {
                output: {
                  dims: k,
                  type: p[0].type,
                  textureType: l.TextureType.packed
                },
                hasMain: true,
                shaderSource: `void main() {
                    vec4 v = ${P.texture2D}(X, TexCoords);
                    ${P.output} = v;
                }`
              });
            const $ = k.length;
            if ($ < 2)
              throw new Error(`output dimension should be at least 2, but got ${$}`);
            const A = k[$ - 2], C = k[$ - 1], F = p[0].dims;
            if ($ !== F.length)
              throw new Error(`output dimension should match input ${F.length}, but got ${$}`);
            const D = F[$ - 2], N = F[$ - 1], R = E[$ - 2], j = E[$ - 1];
            let Z = "";
            if (M.mode !== "linear")
              throw new Error(`resize (packed) does not support mode: '${M.mode}'`);
            switch (M.coordinateTransformMode) {
              case "asymmetric":
                Z = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        return vec4(coords) / scaleWHWH;
                    }
                `;
                break;
              case "half_pixel":
                Z = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        return (vec4(coords) + 0.5) / scaleWHWH - 0.5;
                    }
                `;
                break;
              case "pytorch_half_pixel":
                Z = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 fcoords = vec4(coords);
                        return vec4(
                            ${C}.0 > 1.0 ? (fcoords.x + 0.5) / scaleWHWH.x - 0.5 : 0.0,
                            ${A}.0 > 1.0 ? (fcoords.y + 0.5) / scaleWHWH.y - 0.5 : 0.0,
                            ${C}.0 > 1.0 ? (fcoords.z + 0.5) / scaleWHWH.z - 0.5 : 0.0,
                            ${A}.0 > 1.0 ? (fcoords.w + 0.5) / scaleWHWH.w - 0.5 : 0.0
                          );
                    }
                `;
                break;
              case "align_corners":
                Z = `
                    vec4 getSourceFracIndex(ivec4 coords) {
                        vec4 resized = vec4(${C}.0 - 1.0, ${A}.0 - 1.0, ${C}.0 - 1.0,
                            ${A}.0 - 1.0);
                        vec4 original = vec4(${N}.0 - 1.0, ${D}.0 - 1.0, ${N}.0 - 1.0,
                            ${D}.0 - 1.0);
                        vec4 new_scale = original / resized;
                        return vec4(coords) * new_scale;
                    }
                `;
                break;
              default:
                throw new Error(`resize (packed) does not support coordinateTransformMode:                                 '${M.coordinateTransformMode}'`);
            }
            const te = (0, f.getCoordsDataType)($), J = `
            const vec2 inputWH = vec2(${D}.0, ${N}.0);
            const vec4 scaleWHWH = vec4(float(${R}), float(${j}), float(${R}), float(${j}));
            ${(0, d.unpackFromChannel)()}
            ${Z}
            float getAValue(int x10, int r, int c, int d) {
                return getChannel(getA(x10, r, c, d), vec2(c, d));
            }
            void main() {
                ${te} rc = getOutputCoords();

                int batch = rc[0];
                int depth = rc[1];

                // retrieve the 4 coordinates that is used in the 4 packed output values.
                ivec4 coords = ivec4(rc.wz, rc.w + 1, rc.z + 1);

                // calculate the source index in fraction
                vec4 sourceFrac = getSourceFracIndex(coords);

                // get the lower and upper bound of the 4 values that will be packed into one texel.
                ivec4 x00 = ivec4(max(sourceFrac.xy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xy)));
                ivec4 x01 = ivec4(max(sourceFrac.xw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.xw)));
                ivec4 x10 = ivec4(max(sourceFrac.zy, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zy)));
                ivec4 x11 = ivec4(max(sourceFrac.zw, vec2(0.0)), min(inputWH - 1.0, ceil(sourceFrac.zw)));

                bool hasNextRow = rc.w < ${A - 1};
                bool hasNextCol = rc.z < ${C - 1};

                // pack x00, x01, x10, x11's top-left corner into one vec4 structure
                vec4 topLeft = vec4(
                    getAValue(batch, depth, x00.x, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.y) : 0.0);

                // pack x00, x01, x10, x11's top-right corner into one vec4 structure
                vec4 topRight = vec4(
                    getAValue(batch, depth, x00.x, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.x, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.x, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.x, x11.w) : 0.0);

                // pack x00, x01, x10, x11's bottom-left corner into one vec4 structure
                vec4 bottomLeft = vec4(
                    getAValue(batch, depth, x00.z, x00.y),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.y) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.y) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.y) : 0.0);

                // pack x00, x01, x10, x11's bottom-right corner into one vec4 structure
                vec4 bottomRight = vec4(
                    getAValue(batch, depth, x00.z, x00.w),
                    hasNextCol ? getAValue(batch, depth, x01.z, x01.w) : 0.0,
                    hasNextRow ? getAValue(batch, depth, x10.z, x10.w) : 0.0,
                    (hasNextRow && hasNextCol) ? getAValue(batch, depth, x11.z, x11.w) : 0.0);

                // calculate the interpolation fraction on u and v direction
                vec4 frac = vec4(sourceFrac) - floor(sourceFrac);
                vec4 clampFrac = clamp(frac, vec4(0.0), vec4(1.0));

                vec4 top = mix(topLeft, topRight, clampFrac.ywyw);
                vec4 bottom = mix(bottomLeft, bottomRight, clampFrac.ywyw);
                vec4 newValue = mix(top, bottom, clampFrac.xxzz);

                ${P.output} = vec4(newValue);
            }
        `;
            return Object.assign(Object.assign({}, g), {
              output: {
                dims: k,
                type: p[0].type,
                textureType: l.TextureType.packed
              },
              hasMain: true,
              shaderSource: J
            });
          }, h = (u, p) => {
            const M = u[0].dims;
            let P, E = p.scales;
            if (E.length === 0) {
              const $ = u[p.scalesInputIdx];
              if ($ && $.size !== 0) {
                if (u[p.sizesInputIdx])
                  throw new Error("Only one of scales or sizes must be provided as input.");
                E = r($, p.mode, p.isResize);
              } else {
                const A = u[p.sizesInputIdx];
                if (!A || A.size === 0)
                  throw new Error("Either scales or sizes MUST be provided as input.");
                P = Array.from(A.integerData), E = n(P, M, p.mode, p.isResize);
              }
            } else if (u[p.sizesInputIdx])
              throw new Error("Only one of scales or sizes must be provided as input.");
            const k = P || M.map(($, A) => Math.floor($ * E[A]));
            return [
              E,
              k
            ];
          }, r = (u, p, M) => {
            const P = Array.from(u.floatData);
            return (0, w.scalesValidation)(P, p, M), P;
          }, n = (u, p, M, P) => {
            const E = p.length, k = new Array(E);
            for (let $ = 0, A = E; $ < A; $++)
              if (p[$] === 0) {
                if (u[$] !== 0)
                  throw new Error("Input dim is zero but required output dim is non-zero.");
                k[$] = 1;
              } else
                k[$] = u[$] / p[$];
            return (0, w.scalesValidation)(k, M, P), k;
          };
        },
        8117: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.shape = void 0;
          const s = t(9162);
          e.shape = (f, d) => (l(d), [
            new s.Tensor([
              d[0].dims.length
            ], "int32", void 0, void 0, new Int32Array(d[0].dims))
          ]);
          const l = (f) => {
            if (!f || f.length !== 1)
              throw new Error("Shape requires 1 input.");
          };
        },
        2278: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.sliceV10 = e.parseSliceAttributes = e.slice = void 0;
          const s = t(246), l = t(782), f = t(2517), d = t(2039), w = {
            name: "Slice",
            inputNames: [
              "A"
            ],
            inputTypes: [
              d.TextureType.unpacked
            ]
          };
          e.slice = (n, u, p) => (_(u), [
            n.run(Object.assign(Object.assign({}, w), {
              cacheHint: p.cacheKey,
              get: () => g(n, u[0], p)
            }), u)
          ]), e.parseSliceAttributes = (n) => {
            const u = n.attributes.getInts("starts"), p = n.attributes.getInts("ends"), M = n.attributes.getInts("axes", []);
            return (0, s.createAttributeWithCacheKey)({
              starts: u,
              ends: p,
              axes: M
            });
          };
          const g = (n, u, p) => {
            const M = p.axes.length === 0 ? u.dims.slice(0).map((F, D) => D) : p.axes, P = f.ShapeUtil.normalizeAxes(M, u.dims.length), E = p.starts.map((F, D) => F > u.dims[P[D]] - 1 ? u.dims[P[D]] : f.ShapeUtil.normalizeAxis(F, u.dims[P[D]])), k = p.ends.map((F, D) => F > u.dims[P[D]] - 1 ? u.dims[P[D]] : f.ShapeUtil.normalizeAxis(F, u.dims[P[D]])), $ = u.dims.slice(), A = [];
            for (let F = 0; F < P.length; F++)
              $[P[F]] = k[F] - E[F], E[F] > 0 && A.push(`outputIdx[${P[F]}] += ${E[F]};`);
            const C = `
      float process(int outputIdx[${$.length}]) {
        ${A.join(`
      `)}
        return _A(outputIdx);
      }`;
            return Object.assign(Object.assign({}, w), {
              output: {
                dims: $,
                type: u.type,
                textureType: d.TextureType.unpacked
              },
              shaderSource: C
            });
          }, _ = (n) => {
            if (!n || n.length !== 1)
              throw new Error("Slice requires 1 input.");
            if (l.NUMBER_TYPES.indexOf(n[0].type) === -1)
              throw new Error("Invalid input type.");
          };
          e.sliceV10 = (n, u) => {
            r(u);
            const p = h(n, u);
            return [
              n.run(Object.assign(Object.assign({}, w), {
                cacheHint: p.cacheKey,
                get: () => g(n, u[0], p)
              }), [
                u[0]
              ])
            ];
          };
          const h = (n, u) => {
            if (!n.session.isInitializer(u[1].dataId) || !n.session.isInitializer(u[2].dataId) || u.length >= 4 && !n.session.isInitializer(u[3].dataId) || u.length >= 5 && !n.session.isInitializer(u[4].dataId))
              throw new Error("dynamic slice attributes are not allowed");
            if (u.length >= 5 && u[4].integerData.some((E) => E !== 1))
              throw new Error("currently non-1 steps is not supported for Slice");
            const p = Array.from(u[1].integerData), M = Array.from(u[2].integerData), P = u.length >= 4 ? Array.from(u[3].integerData) : [];
            return {
              starts: p,
              ends: M,
              axes: P,
              cacheKey: `${P};${p};${M}`
            };
          }, r = (n) => {
            if (!n || n.length < 3 || n.length > 5)
              throw new Error("Invalid input number.");
            if (n[1].type !== "int32" || n[1].dims.length !== 1)
              throw new Error("Invalid input type.");
            if (n[2].type !== "int32" || n[2].dims.length !== 1)
              throw new Error("Invalid input type.");
            if (n.length >= 4 && (n[3].type !== "int32" || n[3].dims.length !== 1))
              throw new Error("Invalid input type.");
            if (n.length >= 5 && (n[4].type !== "int32" || n[4].dims.length !== 1))
              throw new Error("Invalid input type.");
          };
        },
        5524: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.softmaxV13 = e.parseSoftmaxAttributesV13 = e.parseSoftmaxAttributes = e.softmax = void 0;
          const s = t(246), l = t(2517), f = t(5060), d = t(2039), w = t(3738), g = {
            name: "SoftmaxComputeMax",
            inputNames: [
              "A"
            ],
            inputTypes: [
              d.TextureType.unpacked
            ]
          }, _ = {
            name: "SoftmaxComputeScale",
            inputNames: [
              "A",
              "Max"
            ],
            inputTypes: [
              d.TextureType.unpacked,
              d.TextureType.unpacked
            ]
          }, h = {
            name: "SoftMax",
            inputNames: [
              "A",
              "Max",
              "Norm"
            ],
            inputTypes: [
              d.TextureType.unpacked,
              d.TextureType.unpacked,
              d.TextureType.unpacked
            ]
          };
          e.softmax = (P, E, k) => {
            M(E);
            const $ = E[0].dims.slice(), A = l.ShapeUtil.normalizeAxis(k.axis, $.length), C = l.ShapeUtil.sizeToDimension($, A), F = l.ShapeUtil.sizeFromDimension($, A);
            return r(P, E, k, C, F);
          }, e.parseSoftmaxAttributes = (P) => (0, s.createAttributeWithCacheKey)({
            axis: P.attributes.getInt("axis", 1)
          }), e.parseSoftmaxAttributesV13 = (P) => (0, s.createAttributeWithCacheKey)({
            axis: P.attributes.getInt("axis", -1)
          }), e.softmaxV13 = (P, E, k) => {
            M(E);
            const $ = E[0].dims.slice(), A = l.ShapeUtil.normalizeAxis(k.axis, $.length), C = $.length, F = A !== C - 1, D = [];
            let N, R = [], j = [];
            F && (R = Array.from({
              length: C
            }).map((G, H) => H), R[A] = C - 1, R[C - 1] = A, R.map((G) => D.push($[G])), N = (0, s.createAttributeWithCacheKey)({
              perm: R
            }), j = (0, w.transpose)(P, E, N));
            const Z = F ? l.ShapeUtil.sizeToDimension(D, C - 1) : l.ShapeUtil.sizeToDimension($, C - 1), te = F ? l.ShapeUtil.sizeFromDimension(D, C - 1) : l.ShapeUtil.sizeFromDimension($, C - 1), J = r(P, F ? j : E, k, Z, te);
            return F ? (0, w.transpose)(P, J, N) : J;
          };
          const r = (P, E, k, $, A) => {
            const C = n(P, E[0], $, A, [
              $
            ]), F = P.run(Object.assign(Object.assign({}, g), {
              cacheHint: k.cacheKey,
              get: () => C
            }), E), D = u(P, E[0], $, A, C.output.dims, [
              $
            ]), N = P.run(Object.assign(Object.assign({}, _), {
              cacheHint: k.cacheKey,
              get: () => D
            }), [
              E[0],
              F
            ]), R = p(P, E[0], $, A, C.output.dims, D.output.dims);
            return [
              P.run(Object.assign(Object.assign({}, h), {
                cacheHint: k.cacheKey,
                get: () => R
              }), [
                E[0],
                F,
                N
              ])
            ];
          }, n = (P, E, k, $, A) => {
            const [C, F] = P.calculateTextureWidthAndHeight(E.dims, d.TextureType.unpacked), D = A.length;
            if (k < 1 || $ < 1)
              throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
            if (A.length !== 1)
              throw new Error("Dimensionality of the output should be 1");
            if (A[0] !== k)
              throw new Error("Shape of the output should be equal to logical row count");
            const N = (0, f.getGlsl)(P.session.backend.glContext.version), R = `
      float process(int[${D}] indices) {
        int logical_row_start_offset = indices[0] * ${$};

        float max = getColorAsFloat(${N.texture2D}(A, offsetToCoords(logical_row_start_offset, ${C},
        ${F} )));
        for(int i=1; i<${$}; ++i)
        {
          float current = getColorAsFloat(${N.texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${C}, ${F})));
          if(current > max)
          max = current;
        }

        return max;
      }`;
            return Object.assign(Object.assign({}, g), {
              output: {
                dims: A,
                type: E.type,
                textureType: d.TextureType.unpacked
              },
              shaderSource: R
            });
          }, u = (P, E, k, $, A, C) => {
            const [F, D] = P.calculateTextureWidthAndHeight(E.dims, d.TextureType.unpacked), N = C.length;
            if (k < 1 || $ < 1)
              throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
            if (C.length !== 1)
              throw new Error("Dimensionality of the output should be 1");
            if (C[0] !== k)
              throw new Error("Shape of the output should be equal to logical row count");
            if (A.length !== 1)
              throw new Error("Dimensionality of the intermediate results should be 1");
            if (A[0] !== k)
              throw new Error("Shape of the intermediate results should be equal to logical row count");
            const R = `
      float process(int[${N}] indices) {
        int logical_row_start_offset = indices[0] * ${$};

        float norm_factor = 0.0;
        float max = _Max(indices);
        for(int i=0; i<${$}; ++i)
        {
          norm_factor += exp(getColorAsFloat(${(0, f.getGlsl)(P.session.backend.glContext.version).texture2D}(A, offsetToCoords(logical_row_start_offset + i,
            ${F}, ${D}))) - max);
        }

        return norm_factor;
      }`;
            return Object.assign(Object.assign({}, _), {
              output: {
                dims: C,
                type: E.type,
                textureType: d.TextureType.unpacked
              },
              shaderSource: R
            });
          }, p = (P, E, k, $, A, C) => {
            const [F, D] = P.calculateTextureWidthAndHeight(E.dims, d.TextureType.unpacked), N = E.dims.length;
            if (k < 1 || $ < 1)
              throw new Error("Logical row count N and feature count D must be greater than or equal to 1");
            if (A.length !== 1 || C.length !== 1)
              throw new Error("Dimensionality of the intermediate results should be 1");
            if (A[0] !== k || C[0] !== k)
              throw new Error("Shape of the intermediate results should be equal to logical row count");
            const R = `
      float process(int[${N}] indices) {

      // get offset of current logical tensor index from the 2-D texture coordinates (TexCoords)
      int offset = coordsToOffset(TexCoords, ${F}, ${D});

      //determine the logical row for this index
      int logical_row_index[1];
      logical_row_index[0] = offset / ${$};

      float norm_factor = _Norm(logical_row_index);

      // avoid possible division by 0
      // if norm_facor is 0, all elements are zero
      // if so, return 0
      if(norm_factor == 0.0)
        return 0.0;

      return exp(_A(indices) - _Max(logical_row_index)) / norm_factor;
    }`;
            return Object.assign(Object.assign({}, h), {
              output: {
                dims: E.dims,
                type: E.type,
                textureType: d.TextureType.unpacked
              },
              shaderSource: R
            });
          }, M = (P) => {
            if (!P || P.length !== 1)
              throw new Error("Softmax requires 1 input.");
            if (P[0].type !== "float32" && P[0].type !== "float64")
              throw new Error("Invalid input type");
          };
        },
        5975: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseSplitAttributes = e.split = void 0;
          const s = t(246), l = t(2517), f = t(2039), d = {
            name: "Split",
            inputNames: [
              "A"
            ],
            inputTypes: [
              f.TextureType.unpacked
            ]
          };
          e.split = (h, r, n) => {
            _(r);
            const u = l.ShapeUtil.normalizeAxis(n.axis, r[0].dims.length), p = w(h, r, u, n), M = [];
            for (let P = 0; P < p; ++P)
              M.push(h.run(Object.assign(Object.assign({}, d), {
                cacheHint: `${n.cacheKey};${P}`,
                get: () => g(h, r[0], n, u, P)
              }), r));
            return M;
          }, e.parseSplitAttributes = (h) => {
            const r = h.attributes.getInt("axis", 0), n = h.attributes.getInts("split", []), u = h.outputs.length;
            return (0, s.createAttributeWithCacheKey)({
              axis: r,
              split: n,
              numOutputs: u
            });
          };
          const w = (h, r, n, u) => {
            const [, p] = l.SplitUtil.splitShape(r[0].dims, n, u.split, u.numOutputs);
            return p.length;
          }, g = (h, r, n, u, p) => {
            const [M, P] = l.SplitUtil.splitShape(r.dims, u, n.split, n.numOutputs), E = P[p], k = M[p], $ = `
      float process(int indices[${k.length}]) {
        indices[${u}] += ${E};
        return _A(indices);
      }
    `;
            return Object.assign(Object.assign({}, d), {
              cacheHint: `${n.cacheKey}:${p}`,
              output: {
                dims: k,
                type: r.type,
                textureType: f.TextureType.unpacked
              },
              shaderSource: $
            });
          }, _ = (h) => {
            if (!h || h.length !== 1)
              throw new Error("Split requires one input.");
            if (h[0].type !== "int8" && h[0].type !== "uint8" && h[0].type !== "int16" && h[0].type !== "uint16" && h[0].type !== "int32" && h[0].type !== "uint32" && h[0].type !== "float32" && h[0].type !== "float64" && h[0].type !== "bool")
              throw new Error("Invalid input type.");
          };
        },
        3933: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseSqueezeAttributes = e.squeezeV13 = e.squeeze = void 0;
          const s = t(2517);
          e.squeeze = (d, w, g) => {
            l(w);
            const _ = s.ShapeUtil.squeezeShape(w[0].dims, g);
            return [
              d.reshapeUnpacked(w[0], _)
            ];
          }, e.squeezeV13 = (d, w) => (f(w), (0, e.squeeze)(d, [
            w[0]
          ], Array.from(w[1].integerData))), e.parseSqueezeAttributes = (d) => d.attributes.getInts("axes");
          const l = (d) => {
            if (!d || d.length !== 1)
              throw new Error("Squeeze requires 1 input.");
            if (d[0].type === "string")
              throw new Error("invalid input tensor types.");
          }, f = (d) => {
            if (!d || d.length !== 2)
              throw new Error("Squeeze requires 2 inputs.");
            if (d[1].type !== "int32")
              throw new Error("Invalid input type.");
          };
        },
        6558: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.sum = void 0;
          const s = t(5060), l = t(2039);
          e.sum = (w, g) => {
            d(g);
            const _ = {
              name: "Sum",
              inputNames: g.map((h, r) => `X${r}`),
              inputTypes: new Array(g.length).fill(l.TextureType.unpacked)
            };
            return [
              w.run(Object.assign(Object.assign({}, _), {
                get: () => f(w, g, _)
              }), g)
            ];
          };
          const f = (w, g, _) => {
            const h = (0, s.getGlsl)(w.session.backend.glContext.version), r = g[0].dims.slice(), n = `
      void main() {
        vec4 result = ${g.map((u, p) => `${h.texture2D}(X${p},TexCoords)`).join(" + ")};
        ${h.output} = result;
      }
    `;
            return Object.assign(Object.assign({}, _), {
              output: {
                dims: r,
                type: g[0].type,
                textureType: l.TextureType.unpacked
              },
              hasMain: true,
              shaderSource: n
            });
          }, d = (w) => {
            if (!w || w.length === 0)
              throw new Error("Sum requires inputs.");
            const g = w[0].dims.length;
            for (let _ = 1; _ < w.length; _++) {
              if (g !== w[_].dims.length)
                throw new Error("Input shapes are mismatched.");
              for (let h = 0; h < g; h++)
                if (w[0].dims[h] !== w[_].dims[h])
                  throw new Error("Input shapes are not matched.");
            }
            if (w[0].type !== "float32" && w[0].type !== "float64")
              throw new Error("Invalid input type.");
            for (let _ = 1; _ < w.length; _++)
              if (w[0].type !== w[_].type)
                throw new Error("Input types are not matched.");
          };
        },
        5723: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.tile = void 0;
          const s = t(782), l = t(2039);
          e.tile = (w, g) => {
            d(g);
            const _ = {
              name: "Tile",
              inputNames: [
                "A"
              ],
              inputTypes: [
                l.TextureType.unpacked
              ]
            };
            return [
              w.run(Object.assign(Object.assign({}, _), {
                get: () => f(w, g, _)
              }), g)
            ];
          };
          const f = (w, g, _) => {
            const h = g[0].dims.slice(), r = new Array(h.length), n = [];
            for (let M = 0; M < h.length; M++)
              r[M] = h[M] * g[1].numberData[M], n.push(`inputIdx[${M}] = int(mod(float(outputIdx[${M}]), ${h[M]}.));`);
            const u = r.length, p = `
      float process(int outputIdx[${u}]) {
        int inputIdx[${u}];
        ${n.join(`
`)}
        return _A(inputIdx);
      }
    `;
            return Object.assign(Object.assign({}, _), {
              output: {
                dims: r,
                type: g[0].type,
                textureType: l.TextureType.unpacked
              },
              shaderSource: p
            });
          }, d = (w) => {
            if (!w || w.length !== 2)
              throw new Error("Tile requires 2 input.");
            if (w[1].dims.length !== 1)
              throw new Error("The second input shape must 1 dimension.");
            if (w[1].dims[0] !== w[0].dims.length)
              throw new Error("Invalid input shape.");
            if (s.NUMBER_TYPES.indexOf(w[0].type) === -1)
              throw new Error("Invalid input type.");
            if (w[1].type !== "int32" && w[1].type !== "int16")
              throw new Error("Invalid repeat type.");
          };
        },
        3738: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseTransposeAttributes = e.transpose = void 0;
          const s = t(246), l = t(2517), f = t(2039), d = {
            name: "Transpose",
            inputNames: [
              "A"
            ],
            inputTypes: [
              f.TextureType.unpacked
            ]
          };
          e.transpose = (n, u, p) => (r(u), [
            n.run(Object.assign(Object.assign({}, d), {
              cacheHint: p.cacheKey,
              get: () => w(n, u[0], p.perm)
            }), u)
          ]), e.parseTransposeAttributes = (n) => (0, s.createAttributeWithCacheKey)({
            perm: n.attributes.getInts("perm", [])
          });
          const w = (n, u, p) => {
            const M = u.dims;
            p = g(M, p);
            const P = _(M, p), E = M.length, k = `
      ${h("perm", p, E)}
      float process(int indices[${E}]) {
        int a[${E}];
        perm(a, indices);
        return _A(a);
      }`;
            return Object.assign(Object.assign({}, d), {
              output: {
                dims: P,
                type: u.type,
                textureType: f.TextureType.unpacked
              },
              shaderSource: k
            });
          }, g = (n, u) => (u && u.length !== n.length && (u = [
            ...n.keys()
          ].reverse()), u), _ = (n, u) => (u = g(n, u), l.ShapeUtil.sortBasedOnPerm(n, u)), h = (n, u, p) => {
            const M = [];
            M.push(`void ${n}(out int a[${p}], int src[${p}]) {`);
            for (let P = 0; P < p; ++P)
              M.push(`	a[${u[P]}]=src[${P}];`);
            return M.push("	}"), M.join(`
`);
          }, r = (n) => {
            if (!n || n.length !== 1)
              throw new Error("Transpose requires 1 input.");
            if (n[0].type !== "float32" && n[0].type !== "float64")
              throw new Error("input should be float tensor");
          };
        },
        8710: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.encodeAsUint8 = void 0;
          const s = t(5060), l = t(2039);
          e.encodeAsUint8 = (f, d) => {
            const w = d.shape, g = (0, s.getGlsl)(f.session.backend.glContext.version), _ = `
    const float FLOAT_MAX = 1.70141184e38;
    const float FLOAT_MIN = 1.17549435e-38;

    bool isNaN(float val) {
      return (val < 1.0 || 0.0 < val || val == 0.0) ? false : true;
    }

    highp vec4 encodeAsUint8(highp float v) {
      if (isNaN(v)) {
        return vec4(255, 255, 255, 255);
      }

      highp float av = abs(v);

      if(av < FLOAT_MIN) {
        return vec4(0.0, 0.0, 0.0, 0.0);
      } else if(v > FLOAT_MAX) {
        return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;
      } else if(v < -FLOAT_MAX) {
        return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;
      }

      highp vec4 c = vec4(0,0,0,0);

      highp float e = floor(log2(av));
      highp float m = exp2(fract(log2(av))) - 1.0;

      c[2] = floor(128.0 * m);
      m -= c[2] / 128.0;
      c[1] = floor(32768.0 * m);
      m -= c[1] / 32768.0;
      c[0] = floor(8388608.0 * m);

      highp float ebias = e + 127.0;
      c[3] = floor(ebias / 2.0);
      ebias -= c[3] * 2.0;
      c[2] += floor(ebias) * 128.0;

      c[3] += 128.0 * step(0.0, -v);

      return c / 255.0;
    }

    void main() {
      float value = ${g.texture2D}(X,TexCoords).r;
      ${g.output} = encodeAsUint8(value);
    }`, h = {
              name: "Uint8Encode",
              inputTypes: [
                l.TextureType.unpacked
              ],
              inputNames: [
                "X"
              ],
              output: {
                dims: w,
                type: d.tensor.type,
                textureType: l.TextureType.downloadUint8AsFloat
              },
              shaderSource: _,
              hasMain: true
            };
            return f.executeProgram(h, [
              d.tensor
            ]);
          };
        },
        4909: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.tanh = e.tan = e.sqrt = e.sin = e.sigmoid = e.relu = e.not = e.neg = e.log = e.parseLeakyReluAttributes = e.leakyRelu = e.identity = e.floor = e.exp = e.parseEluAttributes = e.elu = e.cos = e.ceil = e.clipV11 = e.parseClipAttributes = e.clip = e.atan = e.asin = e.acos = e.abs = e.glslTanh = e.glslTan = e.glslSqrt = e.glslSigmoid = e.glslRelu = e.glslSin = e.glslNot = e.glslNeg = e.glslLog = e.glslLeakyRelu = e.glslIdentity = e.glslClip = e.glslFloor = e.glslExp = e.glslElu = e.glslCos = e.glslCeil = e.glslAtan = e.glslAsin = e.glslAcos = e.glslAbs = void 0;
          const s = t(246), l = t(2517), f = t(8520), d = t(5060), w = t(2039);
          function g() {
            return J("abs");
          }
          function _() {
            return J("acos");
          }
          function h() {
            return J("asin");
          }
          function r() {
            return J("atan");
          }
          function n() {
            return J("ceil");
          }
          function u() {
            return J("cos");
          }
          function p(U) {
            const Q = "elu";
            return {
              body: `
  const float alpha = float(${U});

  float ${Q}_(float a) {
    return a >= 0.0 ? a: (exp(a) - 1.0) * alpha;
  }
  vec4 ${Q}_(vec4 v) {
    return vec4(${Q}_(v.x), ${Q}_(v.y), ${Q}_(v.z), ${Q}_(v.w));
  }
  `,
              name: Q,
              type: f.FunctionType.ValueBased
            };
          }
          function M() {
            return J("exp");
          }
          function P() {
            return J("floor");
          }
          function E(U, Q) {
            const he = "clip";
            return {
              body: `
  const float min = float(${U});
  const float max = float(${Q});

  float ${he}_(float a) {
    return clamp(a, min, max);
  }
  vec4 ${he}_(vec4 v) {
    return clamp(v, min, max);
  }
  `,
              name: he,
              type: f.FunctionType.ValueBased
            };
          }
          function k() {
            const U = "indentity";
            return {
              body: `
  float ${U}_(float a) {
    return a;
  }
  vec4 ${U}_(vec4 v) {
    return v;
  }
  `,
              name: U,
              type: f.FunctionType.ValueBased
            };
          }
          function $(U) {
            const Q = "leakyRelu";
            return {
              body: `
  const float alpha = float(${U});

  float ${Q}_(float a) {
    return a < 0.0 ? a * alpha : a;
  }
  vec4 ${Q}_(vec4 v) {
    return vec4(${Q}_(v.x), ${Q}_(v.y), ${Q}_(v.z), ${Q}_(v.w));
  }
  `,
              name: Q,
              type: f.FunctionType.ValueBased
            };
          }
          function A() {
            return J("log");
          }
          function C() {
            const U = "neg";
            return {
              body: `
  float ${U}_(float a) {
    return -a;
  }
  vec4 ${U}_(vec4 v) {
    return -v;
  }
  `,
              name: U,
              type: f.FunctionType.ValueBased
            };
          }
          function F() {
            const U = "not";
            return {
              body: `
  float ${U}_(float a) {
    return float( ! bool(a) );
  }
  bool ${U}_(bool a) {
    return !a;
  }
  vec4 ${U}_(vec4 v) {
    return vec4(!bool(v.x), !bool(v.y), !bool(v.z), !bool(v.w));
  }
  bvec4 ${U}_(bvec4 v) {
    return bvec4(!v.x, !v.y, !v.z, !v.w);
  }
  `,
              name: U,
              type: f.FunctionType.ValueBased
            };
          }
          function D() {
            return J("sin");
          }
          function N() {
            const U = "relu";
            return {
              body: `
  float ${U}_(float a) {
    return max( a, 0.0 );
  }
  vec4 ${U}_(vec4 v) {
    return max( v, 0.0 );
  }
  `,
              name: U,
              type: f.FunctionType.ValueBased
            };
          }
          function R() {
            const U = "sigmoid";
            return {
              body: `
  float ${U}_(float a) {
    return 1.0 / (1.0 + exp(-a));
  }
  vec4 ${U}_(vec4 v) {
    return 1.0 / (1.0 + exp(-v));
  }
  `,
              name: U,
              type: f.FunctionType.ValueBased
            };
          }
          function j() {
            return J("sqrt");
          }
          function Z() {
            return J("tan");
          }
          function te() {
            const U = "tanh";
            return {
              body: `
  float ${U}_(float a) {
    a = clamp(a, -10., 10.);
    a = exp(2.*a);
    return (a - 1.) / (a + 1.);
  }
  vec4 ${U}_(vec4 v) {
    v = clamp(v, -10., 10.);
    v = exp(2.*v);
    return (v - 1.) / (v + 1.);
  }
  `,
              name: U,
              type: f.FunctionType.ValueBased
            };
          }
          function J(U) {
            return {
              body: `
  float ${U}_(float a) {
    return ${U}(a);
  }
  vec4 ${U}_(vec4 v) {
    return ${U}(v);
  }
  `,
              name: U,
              type: f.FunctionType.ValueBased
            };
          }
          e.glslAbs = g, e.glslAcos = _, e.glslAsin = h, e.glslAtan = r, e.glslCeil = n, e.glslCos = u, e.glslElu = p, e.glslExp = M, e.glslFloor = P, e.glslClip = E, e.glslIdentity = k, e.glslLeakyRelu = $, e.glslLog = A, e.glslNeg = C, e.glslNot = F, e.glslSin = D, e.glslRelu = N, e.glslSigmoid = R, e.glslSqrt = j, e.glslTan = Z, e.glslTanh = te;
          const G = (U, Q, he, fe) => {
            const Me = U.session.pack ? w.TextureType.packed : w.TextureType.unpacked, pe = {
              name: he.name,
              inputTypes: [
                Me
              ],
              inputNames: [
                "A"
              ],
              cacheHint: fe
            };
            return Object.assign(Object.assign({}, pe), {
              get: () => ((oe, be, Ee, Oe) => {
                const Ye = oe.session.pack ? w.TextureType.packed : w.TextureType.unpacked, We = (0, d.getGlsl)(oe.session.backend.glContext.version);
                return Object.assign(Object.assign({}, be), {
                  output: {
                    dims: Ee.dims,
                    type: Ee.type,
                    textureType: Ye
                  },
                  shaderSource: `
     ${Oe.body}
     void main() {
       vec4 v = ${We.texture2D}(A, TexCoords);
       v = ${Oe.name}_(v);
       ${We.output} = v;
     }
     `,
                  hasMain: true
                });
              })(U, pe, Q, he)
            });
          };
          e.abs = (U, Q) => [
            U.run(G(U, Q[0], g()), Q)
          ], e.acos = (U, Q) => [
            U.run(G(U, Q[0], _()), Q)
          ], e.asin = (U, Q) => [
            U.run(G(U, Q[0], h()), Q)
          ], e.atan = (U, Q) => [
            U.run(G(U, Q[0], r()), Q)
          ], e.clip = (U, Q, he) => [
            U.run(G(U, Q[0], E(he.min, he.max), he.cacheKey), Q)
          ], e.parseClipAttributes = (U) => (0, s.createAttributeWithCacheKey)({
            min: U.attributes.getFloat("min", l.MIN_CLIP),
            max: U.attributes.getFloat("max", l.MAX_CLIP)
          }), e.clipV11 = (U, Q) => {
            const he = H(U, Q);
            return (0, e.clip)(U, [
              Q[0]
            ], he);
          };
          const H = (U, Q) => {
            if (Q.length >= 3 && (!U.session.isInitializer(Q[1].dataId) || !U.session.isInitializer(Q[2].dataId)))
              throw new Error("dynamic clip attributes are not allowed");
            const he = Q.length >= 3 ? Q[1].numberData[0] : l.MIN_CLIP, fe = Q.length >= 3 ? Q[2].numberData[0] : l.MAX_CLIP;
            return (0, s.createAttributeWithCacheKey)({
              min: he,
              max: fe
            });
          };
          e.ceil = (U, Q) => [
            U.run(G(U, Q[0], n()), Q)
          ], e.cos = (U, Q) => [
            U.run(G(U, Q[0], u()), Q)
          ], e.elu = (U, Q, he) => [
            U.run(G(U, Q[0], p(he.alpha), he.cacheKey), Q)
          ], e.parseEluAttributes = (U) => (0, s.createAttributeWithCacheKey)({
            alpha: U.attributes.getFloat("alpha", 1)
          }), e.exp = (U, Q) => [
            U.run(G(U, Q[0], M()), Q)
          ], e.floor = (U, Q) => [
            U.run(G(U, Q[0], P()), Q)
          ], e.identity = (U, Q) => [
            U.run(G(U, Q[0], k()), Q)
          ], e.leakyRelu = (U, Q, he) => [
            U.run(G(U, Q[0], $(he.alpha), he.cacheKey), Q)
          ], e.parseLeakyReluAttributes = (U) => (0, s.createAttributeWithCacheKey)({
            alpha: U.attributes.getFloat("alpha", 0.01)
          }), e.log = (U, Q) => [
            U.run(G(U, Q[0], A()), Q)
          ], e.neg = (U, Q) => [
            U.run(G(U, Q[0], C()), Q)
          ], e.not = (U, Q) => [
            U.run(G(U, Q[0], F()), Q)
          ], e.relu = (U, Q) => [
            U.run(G(U, Q[0], N()), Q)
          ], e.sigmoid = (U, Q) => [
            U.run(G(U, Q[0], R()), Q)
          ], e.sin = (U, Q) => [
            U.run(G(U, Q[0], D()), Q)
          ], e.sqrt = (U, Q) => [
            U.run(G(U, Q[0], j()), Q)
          ], e.tan = (U, Q) => [
            U.run(G(U, Q[0], Z()), Q)
          ], e.tanh = (U, Q) => [
            U.run(G(U, Q[0], te()), Q)
          ];
        },
        5611: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createUnpackProgramInfoLoader = e.createUnpackProgramInfo = void 0;
          const s = t(5060), l = t(2039), f = t(9390), d = t(2827), w = {
            name: "unpack",
            inputNames: [
              "A"
            ],
            inputTypes: [
              l.TextureType.packed
            ]
          };
          e.createUnpackProgramInfo = (g, _) => {
            const h = _.dims.length, r = (0, d.getChannels)("rc", h), n = r.slice(-2), u = (0, f.getCoordsDataType)(h), p = (0, d.unpackFromChannel)(), M = _.dims.length === 0 ? "" : function(k, $) {
              if (k === 1)
                return "rc";
              let A = "";
              for (let C = 0; C < k; C++)
                A += $[C], C < k - 1 && (A += ",");
              return A;
            }(h, r), P = h <= 1 ? "rc" : `vec2(${n.join(",")})`, E = `
    ${p}
    void main() {
      ${u} rc = getOutputCoords();

       // Sample the texture with the coords to get the rgba channel value.
       vec4 packedInput = getA(${M});

       ${(0, s.getGlsl)(g.session.backend.glContext.version).output} = vec4(getChannel(packedInput, ${P}), 0, 0, 0);
     }
   `;
            return Object.assign(Object.assign({}, w), {
              hasMain: true,
              output: {
                dims: _.dims,
                type: _.type,
                textureType: l.TextureType.unpacked
              },
              shaderSource: E
            });
          }, e.createUnpackProgramInfoLoader = (g, _) => Object.assign(Object.assign({}, w), {
            get: () => (0, e.createUnpackProgramInfo)(g, _)
          });
        },
        8428: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.parseUnsqueezeAttributes = e.unsqueezeV13 = e.unsqueeze = void 0;
          const s = t(2517);
          e.unsqueeze = (d, w, g) => {
            l(w);
            const _ = s.ShapeUtil.unsqueezeShape(w[0].dims, g);
            return [
              d.reshapeUnpacked(w[0], _)
            ];
          }, e.unsqueezeV13 = (d, w) => (f(w), (0, e.unsqueeze)(d, [
            w[0]
          ], Array.from(w[1].integerData))), e.parseUnsqueezeAttributes = (d) => d.attributes.getInts("axes");
          const l = (d) => {
            if (!d || d.length !== 1)
              throw new Error("Unsqueeze requires 1 input.");
            if (d[0].type === "string")
              throw new Error("invalid input tensor types.");
          }, f = (d) => {
            if (!d || d.length !== 2)
              throw new Error("Unsqueeze requires 2 inputs.");
            if (d[1].type !== "int32")
              throw new Error("Invalid input type.");
          };
        },
        9793: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.scalesValidation = e.validateInputs = e.parseUpsampleAttributes = e.parseUpsampleAttributesV9 = e.parseUpsampleAttributesV7 = e.upsample = void 0;
          const s = t(246), l = t(5060), f = t(2039), d = {
            name: "Upsample",
            inputNames: [
              "X"
            ],
            inputTypes: [
              f.TextureType.unpacked
            ]
          };
          e.upsample = (g, _, h) => ((0, e.validateInputs)(_, h), [
            g.run(Object.assign(Object.assign({}, d), {
              cacheHint: h.cacheKey,
              get: () => w(g, _, h)
            }), _)
          ]), e.parseUpsampleAttributesV7 = (g) => (0, e.parseUpsampleAttributes)(g, 7), e.parseUpsampleAttributesV9 = (g) => (0, e.parseUpsampleAttributes)(g, 9), e.parseUpsampleAttributes = (g, _) => {
            const h = _ >= 10, r = g.attributes.getString("mode", "nearest");
            if (r !== "nearest" && r !== "linear" && (_ < 11 || r !== "cubic"))
              throw new Error(`unrecognized mode: ${r}`);
            let n = [];
            _ < 9 && (n = g.attributes.getFloats("scales"), (0, e.scalesValidation)(n, r, h));
            const u = g.attributes.getFloat("extrapolation_value", 0), p = _ > 10 ? g.attributes.getString("coordinate_transformation_mode", "half_pixel") : "asymmetric";
            if ([
              "asymmetric",
              "pytorch_half_pixel",
              "tf_half_pixel_for_nn",
              "align_corners",
              "tf_crop_and_resize",
              "half_pixel"
            ].indexOf(p) === -1)
              throw new Error(`coordinate_transform_mode '${p}' is not supported`);
            const M = p === "tf_crop_and_resize", P = M, E = r === "nearest" && _ >= 11 ? g.attributes.getString("nearest_mode", "round_prefer_floor") : "";
            if ([
              "round_prefer_floor",
              "round_prefer_ceil",
              "floor",
              "ceil",
              ""
            ].indexOf(E) === -1)
              throw new Error(`nearest_mode '${E}' is not supported`);
            const k = g.attributes.getFloat("cubic_coeff_a", -0.75), $ = g.attributes.getInt("exclude_outside", 0) !== 0;
            if ($ && r !== "cubic")
              throw new Error("exclude_outside can be set to 1 only when mode is CUBIC.");
            const A = _ < 11 || r === "nearest" && p === "asymmetric" && E === "floor";
            let C = 0, F = 0, D = 0;
            return _ > 10 ? g.inputs.length > 2 ? (C = 1, F = 2, D = 3) : (F = 1, D = 2) : _ === 9 && (F = 1), (0, s.createAttributeWithCacheKey)({
              opset: _,
              isResize: h,
              mode: r,
              scales: n,
              extrapolationValue: u,
              coordinateTransformMode: p,
              useExtrapolation: P,
              needRoiInput: M,
              nearestMode: E,
              cubicCoefficientA: k,
              excludeOutside: $,
              useNearest2xOptimization: A,
              roiInputIdx: C,
              scalesInputIdx: F,
              sizesInputIdx: D
            });
          };
          const w = (g, _, h) => {
            const r = (0, l.getGlsl)(g.session.backend.glContext.version), [n, u] = g.calculateTextureWidthAndHeight(_[0].dims, f.TextureType.unpacked), p = _[0].dims.map((D, N) => Math.floor(D * h.scales[N])), [M, P] = g.calculateTextureWidthAndHeight(p, f.TextureType.unpacked), E = p.length, k = new Array(E), $ = new Array(E);
            let A = `
      int output_pitches[${E}];
      int input_pitches[${E}];
      `;
            for (let D = E - 1; D >= 0; D--)
              k[D] = D === E - 1 ? 1 : k[D + 1] * p[D + 1], $[D] = D === E - 1 ? 1 : $[D + 1] * _[0].dims[D + 1], A += `
        output_pitches[${D}] = ${k[D]};
        input_pitches[${D}] = ${$[D]};
        `;
            const C = `
      float getInputFloat(int index) {
        vec2 coords = offsetToCoords(index, ${n}, ${u});
        float value = getColorAsFloat(${r.texture2D}(X, coords));
        return value;
      }
      `, F = h.mode === "nearest" ? `
    ${C}
    float process(int indices[${E}]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${M}, ${P});

      ${A}

      int d, m;
      for (int dim = 0; dim < ${E}; ++dim) {
        d = output_index / output_pitches[dim];
        m = output_index - d * output_pitches[dim];
        output_index = m;

        if (scales[dim] != 1 && d > 0) {
          int d2 = d / scales[dim];
          m = d - d2 * scales[dim];
          d = d2;
        }
        input_index += input_pitches[dim] * d;
      }

      return getInputFloat(input_index);
    }` : E === 4 ? `
    ${C}
    float process(int indices[4]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${M}, ${P});

      ${A}

      int m;
      int index_of_dim0, index_of_dim1, index_of_dim2, index_of_dim3;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m / output_pitches[1];
      m = m - index_of_dim1 * output_pitches[1];
      index_of_dim2 = m / output_pitches[2];
      m = m - index_of_dim2 * output_pitches[2];
      index_of_dim3 = m;

      int index_of_input_dim2, index_of_input_dim3, x_offset, y_offset;
      index_of_input_dim2 = index_of_dim2 / scales[2];
      y_offset = index_of_dim2 - index_of_input_dim2 * scales[2];
      index_of_input_dim3 = index_of_dim3 / scales[3];
      x_offset = index_of_dim3 - index_of_input_dim3 * scales[3];

      input_index = index_of_dim0 * input_pitches[0] +
            index_of_dim1 * input_pitches[1] +
            index_of_input_dim2 * input_pitches[2] +
            index_of_input_dim3;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim2 = false;
      if (index_of_input_dim2 == (${_[0].dims[2]} - 1)) {
        // It's the end in dimension 2
        x01 = x00;
        end_of_dim2 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[2]);
      }

      if (index_of_input_dim3 == (input_pitches[2] - 1)) {
        // It's the end in dimension 3
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim2 ? x10 : getInputFloat(input_index + input_pitches[2] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[2]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[2]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[3]);
    }` : `
    ${C}
    float process(int indices[2]) {
      int input_index = 0;
      int output_index = coordsToOffset(TexCoords, ${M}, ${P});

      ${A}

      int m;
      int index_of_dim0, index_of_dim1;
      index_of_dim0 = output_index / output_pitches[0];
      m = output_index - index_of_dim0 * output_pitches[0];
      index_of_dim1 = m;

      int index_of_input_dim0, index_of_input_dim1, x_offset, y_offset;
      index_of_input_dim0 = index_of_dim0 / scales[0];
      y_offset = index_of_dim0 - index_of_input_dim0 * scales[0];
      index_of_input_dim1 = index_of_dim1 / scales[1];
      x_offset = index_of_dim1 - index_of_input_dim1 * scales[1];

      input_index = index_of_input_dim0 * input_pitches[0] + index_of_input_dim1;

      float x00 = getInputFloat(input_index);
      float x10, x01, x11;

      bool end_of_dim0 = false;
      if (index_of_input_dim0 == (${_[0].dims[0]} - 1)) {
        // It's the end in dimension 0
        x01 = x00;
        end_of_dim0 = true;
      } else {
        x01 = getInputFloat(input_index + input_pitches[0]);
      }

      if (index_of_input_dim1 == (input_pitches[0] - 1)) {
        // It's the end in dimension 1
        x10 = x00;
        x11 = x01;
      }
      else {
        x10 = getInputFloat(input_index + 1);
        x11 = end_of_dim0 ? x10 : getInputFloat(input_index + input_pitches[0] + 1);
      }

      float y0 = x00 + float(y_offset) * (x01 - x00) / float(scales[0]);
      float y1 = x10 + float(y_offset) * (x11 - x10) / float(scales[0]);
      return y0 + float(x_offset) * (y1 - y0) / float(scales[1]);
    }`;
            return Object.assign(Object.assign({}, d), {
              output: {
                dims: p,
                type: _[0].type,
                textureType: f.TextureType.unpacked
              },
              shaderSource: F,
              variables: [
                {
                  name: "scales",
                  type: "int",
                  arrayLength: h.scales.length,
                  data: h.scales.map((D) => Math.ceil(D))
                }
              ]
            });
          };
          e.validateInputs = (g, _) => {
            if (!g || _.opset < 9 && g.length !== 1 || _.opset >= 9 && _.opset < 11 && g.length !== 2 || _.opset >= 11 && g.length < 2)
              throw new Error("invalid inputs.");
            if (_.scales.length > 0 && g[0].dims.length !== _.scales.length)
              throw new Error("Invalid input shape.");
            if (g[0].type === "string")
              throw new Error("Invalid input tensor types.");
          }, e.scalesValidation = (g, _, h) => {
            if (h) {
              for (const r of g)
                if (r <= 0)
                  throw new Error("Scale value should be greater than 0.");
            } else
              for (const r of g)
                if (r < 1)
                  throw new Error("Scale value should be greater than or equal to 1.");
            if (!(_ !== "linear" && _ !== "cubic" || g.length === 2 || g.length === 4 && g[0] === 1 && g[1] === 1))
              throw new Error(`'Linear' mode and 'Cubic' mode only support 2-D inputs ('Bilinear', 'Bicubic')         or 4-D inputs with the corresponding outermost 2 scale values being 1         in the ${h ? "Resize" : "Upsample"} opeartor.`);
          };
        },
        1958: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.ProgramManager = void 0;
          const s = t(1670), l = t(6231), f = t(8879), d = t(5060);
          e.ProgramManager = class {
            constructor(w, g, _) {
              this.profiler = w, this.glContext = g, this.textureLayoutStrategy = _, this.repo = /* @__PURE__ */ new Map(), this.attributesBound = false;
            }
            getArtifact(w) {
              return this.repo.get(w);
            }
            setArtifact(w, g) {
              this.repo.set(w, g);
            }
            run(w, g, _) {
              var h;
              this.profiler.event("op", `ProgramManager.run ${(h = w.programInfo.name) !== null && h !== void 0 ? h : "unknown kernel"}`, () => {
                var r;
                const n = this.glContext.gl, u = w.program;
                n.useProgram(u);
                try {
                  this.bindOutput(_), this.attributesBound || this.bindAttributes(w.attribLocations), this.bindUniforms(w.uniformLocations, (r = w.programInfo.variables) !== null && r !== void 0 ? r : [], g);
                } catch (p) {
                  throw l.Logger.error("ProgramManager", w.programInfo.shaderSource), p;
                }
                this.profiler.event("backend", "GlContext.draw()", () => {
                  this.glContext.draw();
                });
              }, this.glContext);
            }
            dispose() {
              this.vertexShader && this.glContext.deleteShader(this.vertexShader), this.repo.forEach((w) => this.glContext.deleteProgram(w.program));
            }
            build(w, g, _) {
              return this.profiler.event("backend", "ProgramManager.build", () => {
                const h = new f.GlslPreprocessor(this.glContext, w, g, _), r = h.preprocess(), n = this.compile(r);
                return {
                  programInfo: w,
                  program: n,
                  uniformLocations: this.getUniformLocations(n, h.context.programInfo.inputNames, h.context.programInfo.variables),
                  attribLocations: this.getAttribLocations(n)
                };
              });
            }
            compile(w) {
              if (!this.vertexShader) {
                l.Logger.verbose("ProrgramManager", "Compiling and caching Vertex shader for the first time");
                const h = (0, d.getVertexShaderSource)(this.glContext.version);
                this.vertexShader = this.glContext.compileShader(h, this.glContext.gl.VERTEX_SHADER);
              }
              s.env.debug && l.Logger.verbose("ProrgramManager", `FragShader:
${w}
`);
              const g = this.glContext.compileShader(w, this.glContext.gl.FRAGMENT_SHADER), _ = this.glContext.createProgram(this.vertexShader, g);
              return this.glContext.deleteShader(g), _;
            }
            bindOutput(w) {
              const g = w.width, _ = w.height;
              l.Logger.verbose("ProrgramManager", `Binding output texture to Framebuffer: w/h=${g}/${_}, shape=${w.shape}, type=${w.tensor.type}`), this.glContext.attachFramebuffer(w.texture, g, _);
            }
            bindAttributes(w) {
              const g = w.position, _ = w.textureCoord;
              this.glContext.setVertexAttributes(g, _), this.attributesBound = true;
            }
            bindUniforms(w, g, _) {
              var h;
              const r = this.glContext.gl;
              let n = 0;
              for (const { name: u, type: p, location: M, arrayLength: P } of w) {
                const E = (h = g.find((k) => k.name === u)) === null || h === void 0 ? void 0 : h.data;
                if (p !== "sampler2D" && !E)
                  throw new Error(`variable '${u}' does not have data defined in program info`);
                switch (p) {
                  case "sampler2D":
                    this.bindTexture(_[n], M, n), n++;
                    break;
                  case "float":
                    P ? r.uniform1fv(M, E) : r.uniform1f(M, E);
                    break;
                  case "int":
                    P ? r.uniform1iv(M, E) : r.uniform1i(M, E);
                    break;
                  default:
                    throw new Error(`Uniform not implemented: ${p}`);
                }
              }
            }
            bindTexture(w, g, _) {
              this.glContext.bindTextureToUniform(w.texture, _, g);
            }
            getAttribLocations(w) {
              return {
                position: this.getAttribLocation(w, "position"),
                textureCoord: this.getAttribLocation(w, "textureCoord")
              };
            }
            getUniformLocations(w, g, _) {
              const h = [];
              if (g)
                for (const r of g)
                  h.push({
                    name: r,
                    type: "sampler2D",
                    location: this.getUniformLocation(w, r)
                  });
              if (_)
                for (const r of _)
                  h.push(Object.assign(Object.assign({}, r), {
                    location: this.getUniformLocation(w, r.name)
                  }));
              return h;
            }
            getUniformLocation(w, g) {
              const _ = this.glContext.gl.getUniformLocation(w, g);
              if (_ === null)
                throw new Error(`Uniform ${g} not found.`);
              return _;
            }
            getAttribLocation(w, g) {
              return this.glContext.gl.getAttribLocation(w, g);
            }
          };
        },
        6416: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.WebGLSessionHandler = void 0;
          const s = t(6231), l = t(1047), f = t(8316), d = t(1640), w = t(1958), g = t(7859), _ = t(5702);
          e.WebGLSessionHandler = class {
            constructor(h, r) {
              this.backend = h, this.context = r, this.layoutStrategy = new g.PreferLogicalStrategy(h.glContext.maxTextureSize), this.programManager = new w.ProgramManager(this.context.profiler, h.glContext, this.layoutStrategy), this.textureManager = new _.TextureManager(h.glContext, this.layoutStrategy, this.context.profiler, {
                reuseTextures: h.textureCacheMode === "full"
              }), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache = /* @__PURE__ */ new Map(), this.pack = h.pack, this.pack2unpackMap = /* @__PURE__ */ new Map(), this.unpack2packMap = /* @__PURE__ */ new Map();
            }
            createInferenceHandler() {
              return new f.WebGLInferenceHandler(this);
            }
            onGraphInitialized(h) {
              const r = h.getValues().filter((n) => n.from === -1 && n.tensor).map((n) => n.tensor.dataId);
              this.initializers = new Set(r);
            }
            isInitializer(h) {
              return !!this.initializers && this.initializers.has(h);
            }
            addInitializer(h) {
              this.initializers.add(h);
            }
            getTextureData(h, r) {
              return r ? this.packedTextureDataCache.get(h) : this.unpackedTextureDataCache.get(h);
            }
            setTextureData(h, r, n = false) {
              s.Logger.verbose("WebGLSessionHandler", "Storing Texture data in cache"), n ? this.packedTextureDataCache.set(h, r) : this.unpackedTextureDataCache.set(h, r);
            }
            dispose() {
              this.programManager.dispose(), this.textureManager.clearActiveTextures(), this.packedTextureDataCache.forEach((h) => this.textureManager.releaseTexture(h, true)), this.packedTextureDataCache = /* @__PURE__ */ new Map(), this.unpackedTextureDataCache.forEach((h) => this.textureManager.releaseTexture(h, true)), this.unpackedTextureDataCache = /* @__PURE__ */ new Map();
            }
            resolve(h, r, n) {
              const u = (0, l.resolveOperator)(h, r, d.WEBGL_OP_RESOLVE_RULES);
              return {
                impl: u.opImpl,
                context: u.opInit ? u.opInit(h, n) : h
              };
            }
          };
        },
        7769: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.Uint8DataEncoder = e.RGBAFloatDataEncoder = e.RedFloat32DataEncoder = void 0;
          const s = t(6231);
          e.RedFloat32DataEncoder = class {
            constructor(l, f = 1) {
              if (f === 1)
                this.internalFormat = l.R32F, this.format = l.RED, this.textureType = l.FLOAT, this.channelSize = f;
              else {
                if (f !== 4)
                  throw new Error(`Invalid number of channels: ${f}`);
                this.internalFormat = l.RGBA32F, this.format = l.RGBA, this.textureType = l.FLOAT, this.channelSize = f;
              }
            }
            encode(l, f) {
              let d, w;
              return l.constructor !== Float32Array && (s.Logger.warning("Encoder", "data was not of type Float32; creating new Float32Array"), w = new Float32Array(l)), f * this.channelSize > l.length ? (s.Logger.warning("Encoder", "Source data too small. Allocating larger array"), w = l, d = this.allocate(f * this.channelSize), w.forEach((g, _) => d[_] = g)) : (w = l, d = w), d;
            }
            allocate(l) {
              return new Float32Array(4 * l);
            }
            decode(l, f) {
              return this.channelSize === 1 ? l.filter((d, w) => w % 4 == 0).subarray(0, f) : l.subarray(0, f);
            }
          }, e.RGBAFloatDataEncoder = class {
            constructor(l, f = 1, d) {
              if (f !== 1 && f !== 4)
                throw new Error(`Invalid number of channels: ${f}`);
              this.internalFormat = l.RGBA, this.format = l.RGBA, this.channelSize = f, this.textureType = d || l.FLOAT;
            }
            encode(l, f) {
              let d = l;
              return this.channelSize === 1 && (s.Logger.verbose("Encoder", "Exploding into a larger array"), d = this.allocate(f), l.forEach((w, g) => d[4 * g] = w)), d;
            }
            allocate(l) {
              return new Float32Array(4 * l);
            }
            decode(l, f) {
              return this.channelSize === 1 ? l.filter((d, w) => w % 4 == 0).subarray(0, f) : l.subarray(0, f);
            }
          }, e.Uint8DataEncoder = class {
            constructor(l, f = 1) {
              if (this.channelSize = 4, f === 1)
                this.internalFormat = l.ALPHA, this.format = l.ALPHA, this.textureType = l.UNSIGNED_BYTE, this.channelSize = f;
              else {
                if (f !== 4)
                  throw new Error(`Invalid number of channels: ${f}`);
                this.internalFormat = l.RGBA, this.format = l.RGBA, this.textureType = l.UNSIGNED_BYTE, this.channelSize = f;
              }
            }
            encode(l, f) {
              return new Uint8Array(l.buffer, l.byteOffset, l.byteLength);
            }
            allocate(l) {
              return new Uint8Array(l * this.channelSize);
            }
            decode(l, f) {
              if (l instanceof Uint8Array)
                return l.subarray(0, f);
              throw new Error(`Invalid array type: ${l.constructor}`);
            }
          };
        },
        7859: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.getBatchDim = e.sizeToSquarishShape = e.getRowsCols = e.sizeFromShape = e.isInt = e.parseAxisParam = e.squeezeShape = e.PreferLogicalStrategy = e.AlwaysKeepOriginalSizeStrategy = void 0;
          const s = t(6231), l = t(2517);
          function f(h, r) {
            const n = [], u = [], p = r != null && Array.isArray(r) && r.length === 0, M = r == null || p ? null : d(r, h).sort();
            let P = 0;
            for (let E = 0; E < h.length; ++E) {
              if (M != null) {
                if (M[P] === E && h[E] !== 1)
                  throw new Error(`Can't squeeze axis ${E} since its dim '${h[E]}' is not 1`);
                (M[P] == null || M[P] > E) && h[E] === 1 && (n.push(h[E]), u.push(E)), M[P] <= E && P++;
              }
              h[E] !== 1 && (n.push(h[E]), u.push(E));
            }
            return {
              newShape: n,
              keptDims: u
            };
          }
          function d(h, r) {
            const n = r.length;
            return h = h == null ? r.map((u, p) => p) : [].concat(h), (0, l.assert)(h.every((u) => u >= -n && u < n), () => `All values in axis param must be in range [-${n}, ${n}) but got axis ${h}`), (0, l.assert)(h.every(w), () => `All values in axis param must be integers but got axis ${h}`), h.map((u) => u < 0 ? n + u : u);
          }
          function w(h) {
            return h % 1 == 0;
          }
          function g(h) {
            if (h.length === 0)
              return 1;
            let r = h[0];
            for (let n = 1; n < h.length; n++)
              r *= h[n];
            return r;
          }
          function _(h) {
            const r = Math.ceil(Math.sqrt(h));
            return [
              r,
              Math.ceil(h / r)
            ];
          }
          e.AlwaysKeepOriginalSizeStrategy = class {
            constructor(h) {
              this.maxTextureSize = h;
            }
            computeTextureWH(h, r) {
              if (h.length === 0)
                return [
                  1,
                  1
                ];
              const n = this.maxTextureSize;
              if (r && r.breakAxis !== void 0) {
                const M = r.breakAxis >= h.length ? 1 : h.slice(r.breakAxis).reduce((E, k) => E * k), P = r.breakAxis <= 0 ? 1 : h.slice(0, r.breakAxis).reduce((E, k) => E * k);
                if (!(M > n || P > n))
                  return [
                    M,
                    P
                  ];
                s.Logger.verbose("TextureLayout", `Given width/height preferences were unattainable: shape:${h}, breakAxis:${r.breakAxis}`);
              }
              const u = h.reduce((M, P) => M * P);
              let p = Math.floor(Math.sqrt(u));
              for (; p < n && p < u && u % p != 0; p++)
                ;
              if (p >= n || u % p != 0)
                throw new Error(`The given dimensions are outside this GPU's boundaries: ${h}`);
              return [
                p,
                u / p
              ];
            }
          }, e.PreferLogicalStrategy = class {
            constructor(h) {
              this.maxTextureSize = h;
            }
            computeTextureWH(h, r) {
              const n = this.computeTexture(h, r);
              return r && r.isPacked && (n[0] /= 2, n[1] /= 2), r && r.reverseWH ? [
                n[1],
                n[0]
              ] : n;
            }
            computeTexture(h, r) {
              const n = r && r.isPacked;
              if (h.length === 0)
                return n ? [
                  2,
                  2
                ] : [
                  1,
                  1
                ];
              let u = this.maxTextureSize;
              if (r && r.breakAxis !== void 0) {
                const P = r.breakAxis >= h.length ? 1 : h.slice(r.breakAxis).reduce((k, $) => k * $), E = r.breakAxis <= 0 ? 1 : h.slice(0, r.breakAxis).reduce((k, $) => k * $);
                if (!(P > u || E > u))
                  return [
                    P,
                    E
                  ];
                s.Logger.verbose("TextureLayout", `Given width/height preferences were unattainable: shape:${h}, breakAxis:${r.breakAxis}`);
              }
              let p = h.slice(0);
              n && (u *= 2, p = p.map((P, E) => E >= p.length - 2 ? p[E] % 2 == 0 ? p[E] : p[E] + 1 : p[E]), p.length === 1 && (p = [
                2,
                p[0]
              ])), p.length !== 2 && (p = f(p).newShape);
              const M = g(p);
              return p.length <= 1 && M <= u ? [
                1,
                M
              ] : p.length === 2 && p[0] <= u && p[1] <= u ? p : p.length === 3 && p[0] * p[1] <= u && p[2] <= u ? [
                p[0] * p[1],
                p[2]
              ] : p.length === 3 && p[0] <= u && p[1] * p[2] <= u ? [
                p[0],
                p[1] * p[2]
              ] : p.length === 4 && p[0] * p[1] * p[2] <= u && p[3] <= u ? [
                p[0] * p[1] * p[2],
                p[3]
              ] : p.length === 4 && p[0] <= u && p[1] * p[2] * p[3] <= u ? [
                p[0],
                p[1] * p[2] * p[3]
              ] : n ? _(M / 4).map((P) => 2 * P) : _(M);
            }
          }, e.squeezeShape = f, e.parseAxisParam = d, e.isInt = w, e.sizeFromShape = g, e.getRowsCols = function(h) {
            if (h.length === 0)
              throw Error("Cannot get rows and columns of an empty shape array.");
            return [
              h.length > 1 ? h[h.length - 2] : 1,
              h[h.length - 1]
            ];
          }, e.sizeToSquarishShape = _, e.getBatchDim = function(h, r = 2) {
            return g(h.slice(0, h.length - r));
          };
        },
        4057: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createTextureLayoutFromShape = e.calculateTextureWidthAndHeight = e.createTextureLayoutFromTextureType = void 0;
          const s = t(2517), l = t(2039);
          e.createTextureLayoutFromTextureType = (f, d, w) => {
            const g = w === l.TextureType.unpacked || w === l.TextureType.unpackedReversed ? 1 : 4, _ = w === l.TextureType.packed, h = w === l.TextureType.unpackedReversed || w === l.TextureType.packed, r = w === l.TextureType.packedLastDimension ? d.length - 1 : void 0, n = w === l.TextureType.packedLastDimension ? d.map((u, p) => p === d.length - 1 ? 4 * u : u) : void 0;
            return (0, e.createTextureLayoutFromShape)(f, d, g, n, {
              isPacked: _,
              reverseWH: h,
              breakAxis: r
            });
          }, e.calculateTextureWidthAndHeight = (f, d, w) => {
            const g = (0, e.createTextureLayoutFromTextureType)(f, d, w);
            return [
              g.width,
              g.height
            ];
          }, e.createTextureLayoutFromShape = (f, d, w = 1, g, _) => {
            const h = !(!_ || !_.isPacked), [r, n] = f.computeTextureWH(h && g || d, _), u = d.length;
            let p = d.slice(0);
            if (u === 0 && (p = [
              1
            ]), w === 1)
              g = d;
            else if (h) {
              if (w !== 4)
                throw new Error("a packed texture must be 4-channel");
              g = d, u > 0 && (p[u - 1] = Math.ceil(p[u - 1] / 2)), u > 1 && (p[u - 2] = Math.ceil(p[u - 2] / 2));
            } else if (!g)
              throw new Error("Unpacked shape is needed when using channels > 1");
            return {
              width: r,
              height: n,
              channels: w,
              isPacked: h,
              shape: p,
              strides: s.ShapeUtil.computeStrides(p),
              unpackedShape: g,
              reversedWH: _ && _.reverseWH
            };
          };
        },
        5702: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.TextureManager = void 0;
          const s = t(6231);
          e.TextureManager = class {
            constructor(l, f, d, w) {
              this.glContext = l, this.layoutStrategy = f, this.profiler = d, this.config = w, this.pendingRead = /* @__PURE__ */ new Map(), w.reuseTextures && (this.inUseTextures = /* @__PURE__ */ new Map(), this.idleTextures = /* @__PURE__ */ new Map(), this.textureLookup = /* @__PURE__ */ new Map());
            }
            createTextureFromLayout(l, f, d, w) {
              const g = this.toEncoderType(l), _ = this.glContext.getEncoder(g, f.channels || 1, w);
              if (f.isPacked && w === 1)
                throw new Error("not implemented");
              const h = f.width, r = f.height;
              let n, u;
              if (this.config.reuseTextures) {
                n = `${h}x${r}_${_.format}_${_.internalFormat}_${_.textureType}`, u = this.inUseTextures.get(n), u || (u = [], this.inUseTextures.set(n, u));
                const M = this.idleTextures.get(n);
                if (M && M.length > 0) {
                  const P = M.pop();
                  return u.push(P), w === 1 && this.glContext.updateTexture(P, h, r, _, this.toTextureData(l, d)), P;
                }
              }
              s.Logger.verbose("TextureManager", `Creating new texture of size ${f.width}x${f.height}`);
              const p = this.glContext.allocateTexture(h, r, _, this.toTextureData(l, d));
              return this.config.reuseTextures && (u.push(p), this.textureLookup.set(p, n)), p;
            }
            readTexture(l, f, d) {
              return d || (d = 1), this.profiler.event("backend", "TextureManager.readTexture", () => {
                const w = l.shape.reduce((_, h) => _ * h) * d, g = this.glContext.readTexture(l.texture, l.width, l.height, w, this.toEncoderType(f), d);
                return this.toTensorData(f, g);
              });
            }
            async readTextureAsync(l, f, d) {
              const w = l.tensor.dataId;
              if (d || (d = 1), this.pendingRead.has(w)) {
                const g = this.pendingRead.get(w);
                return new Promise((_) => g?.push(_));
              }
              return this.profiler.event("backend", "TextureManager.readTextureAsync", async () => {
                this.pendingRead.set(w, []);
                const g = l.shape.reduce((n, u) => n * u) * d;
                await this.glContext.createAndWaitForFence();
                const _ = this.glContext.readTexture(l.texture, l.width, l.height, g, this.toEncoderType(f), d), h = this.toTensorData(f, _), r = this.pendingRead.get(w);
                return this.pendingRead.delete(w), r?.forEach((n) => n(h)), h;
              });
            }
            readUint8TextureAsFloat(l) {
              return this.profiler.event("backend", "TextureManager.readUint8TextureAsFloat", () => {
                const f = l.shape.reduce((w, g) => w * g), d = this.glContext.readTexture(l.texture, l.width, l.height, 4 * f, "byte", 4);
                return new Float32Array(d.buffer, d.byteOffset, f);
              });
            }
            releaseTexture(l, f) {
              let d;
              if (this.config.reuseTextures && (d = this.textureLookup.get(l.texture), d)) {
                f && this.textureLookup.delete(d);
                const w = this.inUseTextures.get(d);
                if (w) {
                  const g = w.indexOf(l.texture);
                  if (g !== -1) {
                    w.splice(g, 1);
                    let _ = this.idleTextures.get(d);
                    _ || (_ = [], this.idleTextures.set(d, _)), _.push(l.texture);
                  }
                }
              }
              d && !f || (s.Logger.verbose("TextureManager", `Deleting texture of size ${l.width}x${l.height}`), this.glContext.deleteTexture(l.texture));
            }
            toTensorData(l, f) {
              switch (l) {
                case "int16":
                  return f instanceof Int16Array ? f : Int16Array.from(f);
                case "int32":
                  return f instanceof Int32Array ? f : Int32Array.from(f);
                case "int8":
                  return f instanceof Int8Array ? f : Int8Array.from(f);
                case "uint16":
                  return f instanceof Uint16Array ? f : Uint16Array.from(f);
                case "uint32":
                  return f instanceof Uint32Array ? f : Uint32Array.from(f);
                case "uint8":
                case "bool":
                  return f instanceof Uint8Array ? f : Uint8Array.from(f);
                case "float32":
                  return f instanceof Float32Array ? f : Float32Array.from(f);
                case "float64":
                  return f instanceof Float64Array ? f : Float64Array.from(f);
                default:
                  throw new Error(`TensorData type ${l} is not supported`);
              }
            }
            toTextureData(l, f) {
              if (f)
                return f instanceof Float32Array ? f : new Float32Array(f);
            }
            toEncoderType(l) {
              return "float";
            }
            clearActiveTextures() {
              this.glContext.clearActiveTextures();
            }
          };
        },
        2039: (i, e) => {
          var t;
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.TextureType = void 0, (t = e.TextureType || (e.TextureType = {}))[t.unpacked = 0] = "unpacked", t[t.unpackedReversed = 1] = "unpackedReversed", t[t.packed = 2] = "packed", t[t.downloadUint8AsFloat = 3] = "downloadUint8AsFloat", t[t.packedLastDimension = 4] = "packedLastDimension";
        },
        9390: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.getGlChannels = e.getCoordsDataType = e.getSqueezedParams = e.squeezeInputShape = e.generateShaderFuncNameFromInputSamplerNameAtOutCoords = e.generateShaderFuncNameFromInputSamplerName = e.repeatedTry = e.getPackedShape = void 0;
          const s = t(2517);
          e.getPackedShape = function(l) {
            const f = l.length;
            return l.slice(0, f - 1).concat(l[f - 1] / 4);
          }, e.repeatedTry = async function(l, f = (w) => 0, d) {
            return new Promise((w, g) => {
              let _ = 0;
              const h = () => {
                if (l())
                  return void w();
                _++;
                const r = f(_);
                d != null && _ >= d ? g() : setTimeout(h, r);
              };
              h();
            });
          }, e.generateShaderFuncNameFromInputSamplerName = function(l) {
            return (0, s.assert)(l !== void 0 && l.length !== 0, () => "empty string found for sampler name"), "get" + l.charAt(0).toUpperCase() + l.slice(1);
          }, e.generateShaderFuncNameFromInputSamplerNameAtOutCoords = function(l) {
            return (0, s.assert)(l !== void 0 && l.length !== 0, () => "empty string found for sampler name"), "get" + l.charAt(0).toUpperCase() + l.slice(1) + "AtOutCoords";
          }, e.squeezeInputShape = function(l, f) {
            let d = JSON.parse(JSON.stringify(l));
            return d = f, d;
          }, e.getSqueezedParams = function(l, f) {
            return f.map((d) => l[d]).join(", ");
          }, e.getCoordsDataType = function(l) {
            if (l <= 1)
              return "int";
            if (l === 2)
              return "ivec2";
            if (l === 3)
              return "ivec3";
            if (l === 4)
              return "ivec4";
            if (l === 5)
              return "ivec5";
            if (l === 6)
              return "ivec6";
            throw Error(`GPU for rank ${l} is not yet supported`);
          }, e.getGlChannels = function(l = 6) {
            return [
              "x",
              "y",
              "z",
              "w",
              "u",
              "v"
            ].slice(0, l);
          };
        },
        7305: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.createNewWebGLContext = e.createWebGLContext = void 0;
          const s = t(6231), l = t(1713), f = {};
          function d(w) {
            const g = function() {
              if (typeof document > "u") {
                if (typeof OffscreenCanvas > "u")
                  throw new TypeError("failed to create canvas: OffscreenCanvas is not supported");
                return new OffscreenCanvas(1, 1);
              }
              const r = document.createElement("canvas");
              return r.width = 1, r.height = 1, r;
            }();
            let _;
            const h = {
              alpha: false,
              depth: false,
              antialias: false,
              stencil: false,
              preserveDrawingBuffer: false,
              premultipliedAlpha: false,
              failIfMajorPerformanceCaveat: false
            };
            if ((!w || w === "webgl2") && (_ = g.getContext("webgl2", h), _))
              try {
                return new l.WebGLContext(_, 2);
              } catch (r) {
                s.Logger.warning("GlContextFactory", `failed to create WebGLContext using contextId 'webgl2'. Error: ${r}`);
              }
            if ((!w || w === "webgl") && (_ = g.getContext("webgl", h) || g.getContext("experimental-webgl", h), _))
              try {
                return new l.WebGLContext(_, 1);
              } catch (r) {
                s.Logger.warning("GlContextFactory", `failed to create WebGLContext using contextId 'webgl' or 'experimental-webgl'. Error: ${r}`);
              }
            throw new Error("WebGL is not supported");
          }
          e.createWebGLContext = function w(g) {
            let _;
            g && g !== "webgl2" || !("webgl2" in f) ? g && g !== "webgl" || !("webgl" in f) || (_ = f.webgl) : _ = f.webgl2, _ = _ || d(g), g = g || _.version === 1 ? "webgl" : "webgl2";
            const h = _.gl;
            return f[g] = _, h.isContextLost() ? (delete f[g], w(g)) : (h.disable(h.DEPTH_TEST), h.disable(h.STENCIL_TEST), h.disable(h.BLEND), h.disable(h.DITHER), h.disable(h.POLYGON_OFFSET_FILL), h.disable(h.SAMPLE_COVERAGE), h.enable(h.SCISSOR_TEST), h.enable(h.CULL_FACE), h.cullFace(h.BACK), _);
          }, e.createNewWebGLContext = d;
        },
        1713: function(i, e, t) {
          var s = this && this.__createBinding || (Object.create ? function(h, r, n, u) {
            u === void 0 && (u = n);
            var p = Object.getOwnPropertyDescriptor(r, n);
            p && !("get" in p ? !r.__esModule : p.writable || p.configurable) || (p = {
              enumerable: true,
              get: function() {
                return r[n];
              }
            }), Object.defineProperty(h, u, p);
          } : function(h, r, n, u) {
            u === void 0 && (u = n), h[u] = r[n];
          }), l = this && this.__setModuleDefault || (Object.create ? function(h, r) {
            Object.defineProperty(h, "default", {
              enumerable: true,
              value: r
            });
          } : function(h, r) {
            h.default = r;
          }), f = this && this.__importStar || function(h) {
            if (h && h.__esModule)
              return h;
            var r = {};
            if (h != null)
              for (var n in h)
                n !== "default" && Object.prototype.hasOwnProperty.call(h, n) && s(r, h, n);
            return l(r, h), r;
          };
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.WebGLContext = e.linearSearchLastTrue = void 0;
          const d = t(1670), w = f(t(7769)), g = t(9390);
          function _(h) {
            let r = 0;
            for (; r < h.length && h[r](); ++r)
              ;
            return r - 1;
          }
          e.linearSearchLastTrue = _, e.WebGLContext = class {
            constructor(h, r) {
              this.frameBufferBound = false, this.itemsToPoll = [], this.gl = h, this.version = r, this.getExtensions(), this.vertexbuffer = this.createVertexbuffer(), this.framebuffer = this.createFramebuffer(), this.queryVitalParameters();
            }
            allocateTexture(h, r, n, u) {
              const p = this.gl, M = p.createTexture();
              p.bindTexture(p.TEXTURE_2D, M), p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MIN_FILTER, p.NEAREST), p.texParameteri(p.TEXTURE_2D, p.TEXTURE_MAG_FILTER, p.NEAREST), p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_S, p.CLAMP_TO_EDGE), p.texParameteri(p.TEXTURE_2D, p.TEXTURE_WRAP_T, p.CLAMP_TO_EDGE);
              const P = u ? n.encode(u, h * r) : null;
              return p.texImage2D(p.TEXTURE_2D, 0, n.internalFormat, h, r, 0, n.format, n.textureType, P), this.checkError(), M;
            }
            updateTexture(h, r, n, u, p) {
              const M = this.gl;
              M.bindTexture(M.TEXTURE_2D, h);
              const P = u.encode(p, r * n);
              M.texSubImage2D(M.TEXTURE_2D, 0, 0, 0, r, n, u.format, u.textureType, P), this.checkError();
            }
            attachFramebuffer(h, r, n) {
              const u = this.gl;
              u.bindTexture(u.TEXTURE_2D, h), u.bindFramebuffer(u.FRAMEBUFFER, this.framebuffer), u.framebufferTexture2D(u.FRAMEBUFFER, u.COLOR_ATTACHMENT0, u.TEXTURE_2D, h, 0), this.checkError(), u.viewport(0, 0, r, n), u.scissor(0, 0, r, n);
            }
            readTexture(h, r, n, u, p, M) {
              const P = this.gl;
              M || (M = 1), this.frameBufferBound || this.attachFramebuffer(h, r, n);
              const E = this.getEncoder(p, M), k = E.allocate(r * n);
              return P.bindTexture(P.TEXTURE_2D, h), P.framebufferTexture2D(P.FRAMEBUFFER, P.COLOR_ATTACHMENT0, P.TEXTURE_2D, h, 0), P.readPixels(0, 0, r, n, P.RGBA, E.textureType, k), this.checkError(), E.decode(k, u);
            }
            isFramebufferReady() {
              return true;
            }
            getActiveTexture() {
              const h = this.gl;
              return "TEXTURE" + (h.getParameter(this.gl.ACTIVE_TEXTURE) - h.TEXTURE0);
            }
            getTextureBinding() {
              return this.gl.getParameter(this.gl.TEXTURE_BINDING_2D);
            }
            getFramebufferBinding() {
              return this.gl.getParameter(this.gl.FRAMEBUFFER_BINDING);
            }
            setVertexAttributes(h, r) {
              const n = this.gl;
              n.vertexAttribPointer(h, 3, n.FLOAT, false, 20, 0), n.enableVertexAttribArray(h), r !== -1 && (n.vertexAttribPointer(r, 2, n.FLOAT, false, 20, 12), n.enableVertexAttribArray(r)), this.checkError();
            }
            createProgram(h, r) {
              const n = this.gl, u = n.createProgram();
              return n.attachShader(u, h), n.attachShader(u, r), n.linkProgram(u), u;
            }
            compileShader(h, r) {
              const n = this.gl, u = n.createShader(r);
              if (!u)
                throw new Error(`createShader() returned null with type ${r}`);
              if (n.shaderSource(u, h), n.compileShader(u), n.getShaderParameter(u, n.COMPILE_STATUS) === false)
                throw new Error(`Failed to compile shader: ${n.getShaderInfoLog(u)}
Shader source:
${h}`);
              return u;
            }
            deleteShader(h) {
              this.gl.deleteShader(h);
            }
            bindTextureToUniform(h, r, n) {
              const u = this.gl;
              u.activeTexture(u.TEXTURE0 + r), this.checkError(), u.bindTexture(u.TEXTURE_2D, h), this.checkError(), u.uniform1i(n, r), this.checkError();
            }
            draw() {
              this.gl.drawArrays(this.gl.TRIANGLE_STRIP, 0, 4), this.checkError();
            }
            checkError() {
              if (d.env.debug) {
                const h = this.gl, r = h.getError();
                let n = "";
                switch (r) {
                  case h.NO_ERROR:
                    return;
                  case h.INVALID_ENUM:
                    n = "INVALID_ENUM";
                    break;
                  case h.INVALID_VALUE:
                    n = "INVALID_VALUE";
                    break;
                  case h.INVALID_OPERATION:
                    n = "INVALID_OPERATION";
                    break;
                  case h.INVALID_FRAMEBUFFER_OPERATION:
                    n = "INVALID_FRAMEBUFFER_OPERATION";
                    break;
                  case h.OUT_OF_MEMORY:
                    n = "OUT_OF_MEMORY";
                    break;
                  case h.CONTEXT_LOST_WEBGL:
                    n = "CONTEXT_LOST_WEBGL";
                    break;
                  default:
                    n = `Unknown WebGL Error: ${r.toString(16)}`;
                }
                throw new Error(n);
              }
            }
            deleteTexture(h) {
              this.gl.deleteTexture(h);
            }
            deleteProgram(h) {
              this.gl.deleteProgram(h);
            }
            getEncoder(h, r, n = 0) {
              if (this.version === 2)
                return new w.RedFloat32DataEncoder(this.gl, r);
              switch (h) {
                case "float":
                  return n === 1 || this.isRenderFloat32Supported ? new w.RGBAFloatDataEncoder(this.gl, r) : new w.RGBAFloatDataEncoder(this.gl, r, this.textureHalfFloatExtension.HALF_FLOAT_OES);
                case "int":
                  throw new Error("not implemented");
                case "byte":
                  return new w.Uint8DataEncoder(this.gl, r);
                default:
                  throw new Error(`Invalid dataType: ${h}`);
              }
            }
            clearActiveTextures() {
              const h = this.gl;
              for (let r = 0; r < this.maxTextureImageUnits; ++r)
                h.activeTexture(h.TEXTURE0 + r), h.bindTexture(h.TEXTURE_2D, null);
            }
            dispose() {
              if (this.disposed)
                return;
              const h = this.gl;
              h.bindFramebuffer(h.FRAMEBUFFER, null), h.deleteFramebuffer(this.framebuffer), h.bindBuffer(h.ARRAY_BUFFER, null), h.deleteBuffer(this.vertexbuffer), h.bindBuffer(h.ELEMENT_ARRAY_BUFFER, null), h.finish(), this.disposed = true;
            }
            createDefaultGeometry() {
              return new Float32Array([
                -1,
                1,
                0,
                0,
                1,
                -1,
                -1,
                0,
                0,
                0,
                1,
                1,
                0,
                1,
                1,
                1,
                -1,
                0,
                1,
                0
              ]);
            }
            createVertexbuffer() {
              const h = this.gl, r = h.createBuffer();
              if (!r)
                throw new Error("createBuffer() returned null");
              const n = this.createDefaultGeometry();
              return h.bindBuffer(h.ARRAY_BUFFER, r), h.bufferData(h.ARRAY_BUFFER, n, h.STATIC_DRAW), this.checkError(), r;
            }
            createFramebuffer() {
              const h = this.gl.createFramebuffer();
              if (!h)
                throw new Error("createFramebuffer returned null");
              return h;
            }
            queryVitalParameters() {
              const h = this.gl;
              if (this.isFloatTextureAttachableToFrameBuffer = this.checkFloatTextureAttachableToFrameBuffer(), this.isRenderFloat32Supported = this.checkRenderFloat32(), this.isFloat32DownloadSupported = this.checkFloat32Download(), this.version === 1 && !this.textureHalfFloatExtension && !this.isRenderFloat32Supported)
                throw new Error("both float32 and float16 TextureType are not supported");
              this.isBlendSupported = !this.isRenderFloat32Supported || this.checkFloat32Blend(), this.maxTextureSize = h.getParameter(h.MAX_TEXTURE_SIZE), this.maxTextureImageUnits = h.getParameter(h.MAX_TEXTURE_IMAGE_UNITS), this.version;
            }
            getExtensions() {
              this.version === 2 ? (this.colorBufferFloatExtension = this.gl.getExtension("EXT_color_buffer_float"), this.disjointTimerQueryWebgl2Extension = this.gl.getExtension("EXT_disjoint_timer_query_webgl2")) : (this.textureFloatExtension = this.gl.getExtension("OES_texture_float"), this.textureHalfFloatExtension = this.gl.getExtension("OES_texture_half_float"));
            }
            checkFloatTextureAttachableToFrameBuffer() {
              const h = this.gl, r = h.createTexture();
              h.bindTexture(h.TEXTURE_2D, r);
              const n = this.version === 2 ? h.RGBA32F : h.RGBA;
              h.texImage2D(h.TEXTURE_2D, 0, n, 1, 1, 0, h.RGBA, h.FLOAT, null);
              const u = h.createFramebuffer();
              h.bindFramebuffer(h.FRAMEBUFFER, u), h.framebufferTexture2D(h.FRAMEBUFFER, h.COLOR_ATTACHMENT0, h.TEXTURE_2D, r, 0);
              const p = h.checkFramebufferStatus(h.FRAMEBUFFER) === h.FRAMEBUFFER_COMPLETE;
              return h.bindTexture(h.TEXTURE_2D, null), h.bindFramebuffer(h.FRAMEBUFFER, null), h.deleteTexture(r), h.deleteFramebuffer(u), p;
            }
            checkRenderFloat32() {
              if (this.version === 2) {
                if (!this.colorBufferFloatExtension)
                  return false;
              } else if (!this.textureFloatExtension)
                return false;
              return this.isFloatTextureAttachableToFrameBuffer;
            }
            checkFloat32Download() {
              if (this.version === 2) {
                if (!this.colorBufferFloatExtension)
                  return false;
              } else if (!this.textureFloatExtension || !this.gl.getExtension("WEBGL_color_buffer_float"))
                return false;
              return this.isFloatTextureAttachableToFrameBuffer;
            }
            checkFloat32Blend() {
              const h = this.gl;
              let r, n, u, p, M;
              try {
                r = h.createTexture(), n = h.createFramebuffer(), h.bindTexture(h.TEXTURE_2D, r);
                const P = this.version === 2 ? h.RGBA32F : h.RGBA;
                return h.texImage2D(h.TEXTURE_2D, 0, P, 1, 1, 0, h.RGBA, h.FLOAT, null), h.bindFramebuffer(h.FRAMEBUFFER, n), h.framebufferTexture2D(h.FRAMEBUFFER, h.COLOR_ATTACHMENT0, h.TEXTURE_2D, r, 0), h.enable(h.BLEND), u = h.createShader(h.VERTEX_SHADER), !!u && (h.shaderSource(u, "void main(){}"), h.compileShader(u), p = h.createShader(h.FRAGMENT_SHADER), !!p && (h.shaderSource(p, "precision highp float;void main(){gl_FragColor=vec4(0.5);}"), h.compileShader(p), M = h.createProgram(), !!M && (h.attachShader(M, u), h.attachShader(M, p), h.linkProgram(M), h.useProgram(M), h.drawArrays(h.POINTS, 0, 1), h.getError() === h.NO_ERROR)));
              } finally {
                h.disable(h.BLEND), M && h.deleteProgram(M), u && h.deleteShader(u), p && h.deleteShader(p), n && (h.bindFramebuffer(h.FRAMEBUFFER, null), h.deleteFramebuffer(n)), r && (h.bindTexture(h.TEXTURE_2D, null), h.deleteTexture(r));
              }
            }
            beginTimer() {
              if (this.version === 2 && this.disjointTimerQueryWebgl2Extension) {
                const h = this.gl, r = this.disjointTimerQueryWebgl2Extension, n = h.createQuery();
                return h.beginQuery(r.TIME_ELAPSED_EXT, n), n;
              }
              throw new Error("WebGL1 profiling currently not supported.");
            }
            endTimer() {
              if (this.version !== 2 || !this.disjointTimerQueryWebgl2Extension)
                throw new Error("WebGL1 profiling currently not supported");
              {
                const h = this.gl, r = this.disjointTimerQueryWebgl2Extension;
                h.endQuery(r.TIME_ELAPSED_EXT);
              }
            }
            isTimerResultAvailable(h) {
              let r = false, n = false;
              if (this.version !== 2 || !this.disjointTimerQueryWebgl2Extension)
                throw new Error("WebGL1 profiling currently not supported");
              {
                const u = this.gl, p = this.disjointTimerQueryWebgl2Extension;
                r = u.getQueryParameter(h, u.QUERY_RESULT_AVAILABLE), n = u.getParameter(p.GPU_DISJOINT_EXT);
              }
              return r && !n;
            }
            getTimerResult(h) {
              let r = 0;
              if (this.version !== 2)
                throw new Error("WebGL1 profiling currently not supported");
              {
                const n = this.gl;
                r = n.getQueryParameter(h, n.QUERY_RESULT), n.deleteQuery(h);
              }
              return r / 1e6;
            }
            async waitForQueryAndGetTime(h) {
              return await (0, g.repeatedTry)(() => this.isTimerResultAvailable(h)), this.getTimerResult(h);
            }
            async createAndWaitForFence() {
              const h = this.createFence(this.gl);
              return this.pollFence(h);
            }
            createFence(h) {
              let r;
              const n = h, u = n.fenceSync(n.SYNC_GPU_COMMANDS_COMPLETE, 0);
              return h.flush(), r = u === null ? () => true : () => {
                const p = n.clientWaitSync(u, 0, 0);
                return p === n.ALREADY_SIGNALED || p === n.CONDITION_SATISFIED;
              }, {
                query: u,
                isFencePassed: r
              };
            }
            async pollFence(h) {
              return new Promise((r) => {
                this.addItemToPoll(() => h.isFencePassed(), () => r());
              });
            }
            pollItems() {
              const h = _(this.itemsToPoll.map((r) => r.isDoneFn));
              for (let r = 0; r <= h; ++r) {
                const { resolveFn: n } = this.itemsToPoll[r];
                n();
              }
              this.itemsToPoll = this.itemsToPoll.slice(h + 1);
            }
            async addItemToPoll(h, r) {
              this.itemsToPoll.push({
                isDoneFn: h,
                resolveFn: r
              }), this.itemsToPoll.length > 1 || await (0, g.repeatedTry)(() => (this.pollItems(), this.itemsToPoll.length === 0));
            }
          };
        },
        1036: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.ExecutionPlan = void 0;
          const s = t(6231);
          class l {
            constructor(d, w) {
              this.op = d, this.node = w;
            }
          }
          e.ExecutionPlan = class {
            constructor(f, d, w) {
              this.graph = f, this.profiler = w, this.initialize(d);
            }
            initialize(f) {
              this.profiler.event("session", "ExecutionPlan.initialize", () => {
                const d = this.graph.getNodes();
                if (d.length !== f.length)
                  throw new Error("The size of nodes and OPs do not match.");
                this._ops = f.map((w, g) => new l(w, d[g])), this.reset(), this._starter = [], this._ops.forEach((w, g) => {
                  let _ = true;
                  for (const h of w.node.inputs)
                    if (!this._values[h] && this.graph.getInputIndices().indexOf(h) === -1) {
                      _ = false;
                      break;
                    }
                  _ && this._starter.push(g);
                });
              });
            }
            reset() {
              this._values = this.graph.getValues().map((f) => f.tensor);
            }
            async execute(f, d) {
              return this.profiler.event("session", "ExecutionPlan.execute", async () => {
                this.reset();
                const w = f.createInferenceHandler(), g = this.graph.getInputIndices();
                if (d.length !== g.length)
                  throw new Error(`number of input tensors don't match the number of inputs to the model: actual: ${d.length} expected: ${g.length}`);
                d.forEach((p, M) => {
                  const P = g[M];
                  this._values[P] = p;
                });
                const _ = this._starter.slice(0), h = this.graph.getValues(), r = this.graph.getNodes();
                let n = 0;
                for (; n < _.length; ) {
                  const p = _[n++], M = this._ops[p], P = M.node.inputs.map((A) => this._values[A]);
                  if (P.indexOf(void 0) !== -1)
                    throw new Error(`unresolved input detected: op: ${M.node}`);
                  const E = P;
                  s.Logger.verbose("ExecPlan", `Runing op:${M.node.name} (${E.map((A, C) => `'${M.node.inputs[C]}': ${A.type}[${A.dims.join(",")}]`).join(", ")})`);
                  const k = await this.profiler.event("node", M.node.name, async () => M.op.impl(w, E, M.op.context));
                  if (k.length !== M.node.outputs.length)
                    throw new Error("the size of output does not match model definition.");
                  k.forEach((A, C) => {
                    const F = M.node.outputs[C];
                    if (this._values[F])
                      throw new Error(`output [${F}] already has value: op:${M.node.name}`);
                    this._values[F] = A;
                  });
                  const $ = /* @__PURE__ */ new Set();
                  k.forEach((A, C) => {
                    const F = M.node.outputs[C];
                    for (const D of h[F].to) {
                      const N = r[D];
                      let R = true;
                      for (const j of N.inputs)
                        if (!this._values[j]) {
                          R = false;
                          break;
                        }
                      R && $.add(D);
                    }
                  }), _.push(...$);
                }
                const u = [];
                for (let p = 0; p < this.graph.getOutputIndices().length; p++) {
                  const M = this.graph.getOutputIndices()[p], P = this._values[M];
                  if (P === void 0)
                    throw new Error(`required output [${M}] does not have value`);
                  M === 0 ? await P.getData() : P.data, u.push(P);
                }
                return s.Logger.verbose("ExecPlan", "disposing of inferenceHandler"), w.dispose(), u;
              });
            }
          };
        },
        7070: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.Graph = void 0;
          const s = t(1446), l = t(7778), f = t(9395), d = t(9162), w = t(2517);
          var g = f.onnxruntime.experimental.fbs;
          e.Graph = {
            from: (n, u) => new r(n, u)
          };
          class _ {
            constructor(u) {
              this._from = void 0, this._to = [], this.tensor = void 0, this.type = void 0, u && (this.type = w.ProtoUtil.tensorValueTypeFromProto(u.type.tensorType));
            }
            get from() {
              return this._from;
            }
            get to() {
              return this._to;
            }
          }
          class h {
            constructor(u, p) {
              u instanceof s.onnx.NodeProto ? (this.name = u.name, this.opType = u.opType, this.attributes = new l.Attribute(u.attribute)) : u instanceof g.Node && (this.name = p ?? u.name(), this.opType = u.opType(), this.attributes = new l.Attribute(w.ProtoUtil.tensorAttributesFromORTFormat(u))), this.inputs = [], this.outputs = [], this.executeNode = true;
            }
          }
          class r {
            constructor(u, p) {
              if (!u)
                throw new TypeError("graph is empty");
              this.buildGraph(u), this.transformGraph(p), this.checkIsAcyclic();
            }
            getInputIndices() {
              return this._allInputIndices;
            }
            getInputNames() {
              return this._allInputNames;
            }
            getOutputIndices() {
              return this._allOutputIndices;
            }
            getOutputNames() {
              return this._allOutputNames;
            }
            getValues() {
              return this._allData;
            }
            getNodes() {
              return this._nodes;
            }
            buildGraph(u) {
              if (u instanceof s.onnx.GraphProto)
                this.buildGraphFromOnnxFormat(u);
              else {
                if (!(u instanceof g.Graph))
                  throw new TypeError("Graph type is not supported.");
                this.buildGraphFromOrtFormat(u);
              }
            }
            buildGraphFromOnnxFormat(u) {
              const p = /* @__PURE__ */ new Map();
              this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];
              const M = /* @__PURE__ */ new Map();
              if (!u.input)
                throw new Error("missing information in graph: input");
              const P = [];
              for (const E of u.input) {
                if (p.has(E.name))
                  throw new Error(`duplicated input name: ${E.name}`);
                const k = this._allData.push(new _(E)) - 1;
                p.set(E.name, k), P.push(E.name);
              }
              if (!u.initializer)
                throw new Error("missing information in graph: initializer");
              for (const E of u.initializer) {
                let k = p.get(E.name);
                if (k === void 0) {
                  const $ = new _();
                  $.type = {
                    shape: {
                      dims: w.ProtoUtil.tensorDimsFromProto(E.dims)
                    },
                    tensorType: w.ProtoUtil.tensorDataTypeFromProto(E.dataType)
                  }, k = this._allData.push($) - 1, p.set(E.name, k);
                }
                this._allData[k]._from = -1, this._allData[k].tensor = d.Tensor.fromProto(E);
              }
              for (let E = 0; E < this._allData.length; E++)
                this._allData[E].tensor || (this._allInputIndices.push(E), this._allInputNames.push(P[E]));
              if (!u.output)
                throw new Error("missing information in graph: output");
              for (const E of u.output) {
                if (p.has(E.name))
                  throw new Error(`duplicated output name: ${E.name}`);
                const k = this._allData.push(new _(E)) - 1;
                p.set(E.name, k), this._allOutputIndices.push(k), this._allOutputNames.push(E.name);
              }
              if (!u.node)
                throw new Error("missing information in graph: node");
              for (const E of u.node) {
                if (!E.name)
                  for (let $ = 0; ; $++) {
                    const A = `unnamed_${E.opType}_${$}`;
                    if (!M.has(A)) {
                      E.name = A;
                      break;
                    }
                  }
                if (M.has(E.name))
                  throw new Error(`duplicated node name: ${E.name}`);
                const k = this._nodes.push(new h(E)) - 1;
                M.set(E.name, k);
              }
              for (let E = 0; E < this._nodes.length; E++) {
                const k = this._nodes[E], $ = u.node[E];
                if (!$.output)
                  throw new Error(`missing output for node: ${$.name}`);
                for (const A of $.output) {
                  let C = p.get(A);
                  if (C === void 0 && (C = this._allData.push(new _()) - 1, p.set(A, C)), k.outputs.push(C), this._allData[C]._from !== void 0)
                    throw new Error(`multiple nodes output to one data value: ${C}`);
                  if (this._allData[C]._from = E, $.opType === "Constant") {
                    if (!$.attribute || $.attribute.length !== 1 || !$.attribute[0].t)
                      throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");
                    if (!$.output || $.output.length !== 1)
                      throw new Error("missing output or incorrect number of outputs for this Constant operator");
                    k.outputs.pop(), k.executeNode = false, this._allData[C]._from = -1, this._allData[C].tensor = d.Tensor.fromProto($.attribute[0].t);
                  }
                }
              }
              for (let E = 0; E < this._nodes.length; E++) {
                const k = this._nodes[E], $ = u.node[E];
                if (!$.input)
                  throw new Error(`missing input for node: ${$.name}`);
                for (const A of $.input) {
                  const C = p.get(A);
                  if (C === void 0) {
                    if (A === "" && $.input.length === 3 && $.opType === "Resize")
                      continue;
                    throw new Error(`unrecognized input '${A}' for node: ${$.name}`);
                  }
                  k.inputs.push(C), this._allData[C]._to.push(E);
                }
              }
              return true;
            }
            buildGraphFromOrtFormat(u) {
              var p, M, P;
              const E = /* @__PURE__ */ new Map();
              this._allData = [], this._allInputIndices = [], this._allInputNames = [], this._allOutputIndices = [], this._allOutputNames = [], this._nodes = [];
              const k = /* @__PURE__ */ new Map(), $ = [];
              for (let A = 0; A < u.inputsLength(); A++) {
                const C = u.inputs(A);
                if (E.has(C))
                  throw new Error(`duplicated input name: ${C}`);
                for (let F = 0; F < u.nodeArgsLength(); F++)
                  if (((p = u.nodeArgs(F)) === null || p === void 0 ? void 0 : p.name()) === C) {
                    const D = new _();
                    if (((P = (M = u.nodeArgs(F)) === null || M === void 0 ? void 0 : M.type()) === null || P === void 0 ? void 0 : P.valueType()) !== g.TypeInfoValue.tensor_type)
                      throw new Error("Unexpected value type for the nodeArg.");
                    const N = u.nodeArgs(F).type().value(new g.TensorTypeAndShape()), R = w.ProtoUtil.tensorDataTypeFromProto(N.elemType()), j = N.shape(), Z = [];
                    for (let J = 0; J < j.dimLength(); J++)
                      Z.push(w.LongUtil.longToNumber(j.dim(J).value().dimValue()));
                    D.type = {
                      shape: {
                        dims: Z
                      },
                      tensorType: R
                    };
                    const te = this._allData.push(D) - 1;
                    E.set(C, te), $.push(C);
                  }
              }
              for (let A = 0; A < u.initializersLength(); A++) {
                const C = u.initializers(A);
                let F = E.get(C.name());
                if (F === void 0) {
                  const D = new _(), N = w.ProtoUtil.tensorDimsFromORTFormat(C), R = w.ProtoUtil.tensorDataTypeFromProto(C.dataType());
                  D.type = {
                    shape: {
                      dims: N
                    },
                    tensorType: R
                  }, F = this._allData.push(D) - 1, E.set(C.name(), F);
                }
                this._allData[F]._from = -1, this._allData[F].tensor = d.Tensor.fromOrtTensor(C);
              }
              for (let A = 0; A < this._allData.length; A++)
                this._allData[A].tensor || (this._allInputIndices.push(A), this._allInputNames.push($[A]));
              for (let A = 0; A < u.outputsLength(); A++) {
                const C = u.outputs(A);
                if (E.has(C))
                  throw new Error(`duplicated output name: ${C}`);
                const F = this._allData.push(new _()) - 1;
                E.set(C, F), this._allOutputIndices.push(F), this._allOutputNames.push(C);
              }
              if (!u.nodes)
                throw new Error("missing information in graph: node");
              for (let A = 0; A < u.nodesLength(); A++) {
                const C = u.nodes(A);
                let F = C.name();
                if (!F)
                  for (let N = 0; F = `unnamed_${C.opType()}_${N}`, k.has(F); N++)
                    ;
                if (k.has(F))
                  throw new Error(`duplicated node name: ${F}`);
                const D = this._nodes.push(new h(C, F)) - 1;
                k.set(F, D);
              }
              for (let A = 0; A < this._nodes.length; A++) {
                const C = this._nodes[A], F = u.nodes(A);
                if (F == null)
                  throw new Error(`No node exists at index ${A}`);
                if (F?.outputsLength() === 0)
                  throw new Error(`missing output for node: ${F.name}`);
                for (let D = 0; D < F?.outputsLength(); D++) {
                  const N = F?.outputs(D);
                  let R = E.get(N);
                  if (R === void 0 && (R = this._allData.push(new _()) - 1, E.set(N, R)), C.outputs.push(R), this._allData[R]._from !== void 0)
                    throw new Error(`multiple nodes output to one data value: ${R}`);
                  if (this._allData[R]._from = A, F.opType() === "Constant") {
                    if (F.attributesLength() !== 1 || !F.attributes(0).t())
                      throw new Error("missing attributes or missing tensor value in attributes for this Constant operator");
                    if (F.outputsLength() !== 1)
                      throw new Error("missing output or incorrect number of outputs for this Constant operator");
                    C.outputs.pop(), C.executeNode = false, this._allData[R]._from = -1, this._allData[R].tensor = d.Tensor.fromOrtTensor(F.attributes(0).t());
                  }
                }
              }
              for (let A = 0; A < this._nodes.length; A++) {
                const C = this._nodes[A], F = u.nodes(A);
                if (F.inputsLength() === 0)
                  throw new Error(`missing input for node: ${F.name}`);
                for (let D = 0; D < F.inputsLength(); D++) {
                  const N = F.inputs(D), R = E.get(N);
                  if (R === void 0)
                    throw new Error(`unrecognized input '${N}' for node: ${F.name()}`);
                  C.inputs.push(R), this._allData[R]._to.push(A);
                }
              }
            }
            checkIsAcyclic() {
              const u = /* @__PURE__ */ new Set();
              this._allInputIndices.forEach((P) => {
                this._allData[P]._to.forEach((E) => {
                  u.add(E);
                });
              });
              const p = Array.from(u), M = new Array(this._nodes.length).fill("white");
              for (; p.length > 0; ) {
                const P = p.pop();
                M[P] === "gray" ? M[P] = "black" : (p.push(P), M[P] = "gray", this._nodes[P].outputs.forEach((E) => {
                  const k = this._allData[E];
                  if (k.tensor !== void 0)
                    throw new Error("node outputs should not be initialized");
                  if (k._from !== P)
                    throw new Error("from property of the Value object doesn't match index of Node being processed");
                  k._to.forEach(($) => {
                    if (M[$] === "gray")
                      throw new Error("model graph is cyclic");
                    M[$] === "white" && p.push($);
                  });
                }));
              }
            }
            transformGraph(u) {
              this.removeAllIdentityNodes(), this.removeAllDropoutNodes(), this.fuseConvActivationNodes(), u && u.transformGraph(this), this.finalizeGraph();
            }
            finalizeGraph() {
              let u = 0;
              for (let p = 0; p < this._nodes.length; p++)
                this._nodes[p].executeNode ? u > 0 && (this._nodes[p].inputs.forEach((M) => {
                  const P = this._allData[M]._to.indexOf(p + u);
                  P !== -1 && (this._allData[M]._to[P] = p);
                }), this._nodes[p].outputs.forEach((M) => {
                  this._allData[M]._from && this._allData[M]._from === p + u && (this._allData[M]._from = p);
                })) : (u++, this._nodes[p].outputs.forEach((M) => {
                  this._allData[M]._from = -2;
                }), this._nodes.splice(p, 1), p--);
              u = 0;
              for (let p = 0; p < this._allData.length; p++)
                if (this._allData[p].from !== -2 || this._allOutputIndices.indexOf(p + u) !== -1) {
                  if (u > 0) {
                    let M = -1;
                    this._allData[p].from !== void 0 && this._allData[p].from !== -1 ? (M = this._nodes[this._allData[p].from].outputs.indexOf(p + u), M !== -1 && (this._nodes[this._allData[p].from].outputs[M] = p)) : (M = this._allInputIndices.indexOf(p + u), M !== -1 && (this._allInputIndices[M] = p)), this._allData[p].to.forEach((P) => {
                      M = this._nodes[P].inputs.indexOf(p + u), M !== -1 && (this._nodes[P].inputs[M] = p);
                    }), this._allData[p].to.length === 0 && (M = this._allOutputIndices.indexOf(p + u), M !== -1 && (this._allOutputIndices[M] = p));
                  }
                } else
                  u++, this._allData.splice(p, 1), p--;
            }
            deleteNode(u) {
              const p = this._nodes[u];
              if (p.outputs.length > 1) {
                for (let A = 1; A < p.outputs.length; A++)
                  if (this._allData[p.outputs[A]].to.length > 0)
                    throw new Error("Node deletion with more than one output connected to other nodes is not supported. ");
              }
              p.executeNode = false;
              const M = p.inputs[0], P = p.outputs[0], E = this._allData[P].to, k = this._allData[M].to.indexOf(u);
              if (k === -1)
                throw new Error("The Value object doesn't have the current Node in it's 'to' property ");
              this._allData[M].to.splice(k, 1), this._allData[P]._to = [];
              const $ = this._allOutputIndices.indexOf(P);
              if ($ !== -1 && (this._allOutputIndices[$] = M), E && E.length > 0)
                for (const A of E) {
                  const C = this._nodes[A].inputs.indexOf(P);
                  if (C === -1)
                    throw new Error("The Node object doesn't have the output Value in it's 'inputs' property ");
                  this._nodes[A].inputs[C] = M, this._allData[M].to.push(A);
                }
            }
            removeAllDropoutNodes() {
              let u = 0;
              for (const p of this._nodes) {
                if (p.opType === "Dropout") {
                  if (p.inputs.length !== 1)
                    throw new Error("Dropout nodes should only contain one input. ");
                  if (p.outputs.length !== 1 && p.outputs.length !== 2)
                    throw new Error("Dropout nodes should contain either 1 or 2 output(s)");
                  if (p.outputs.length === 2 && this._allData[p.outputs[1]]._to.length !== 0)
                    throw new Error("Dropout nodes's second output should not be referenced by other nodes");
                  this.deleteNode(u);
                }
                u++;
              }
            }
            removeAllIdentityNodes() {
              let u = 0;
              for (const p of this._nodes)
                p.opType === "Identity" && this.deleteNode(u), u++;
            }
            isActivation(u) {
              switch (u.opType) {
                case "Relu":
                case "Sigmoid":
                case "Clip":
                  return true;
                default:
                  return false;
              }
            }
            fuseConvActivationNodes() {
              for (const u of this._nodes)
                if (u.opType === "Conv") {
                  const p = this._allData[u.outputs[0]]._to;
                  if (p.length === 1 && this.isActivation(this._nodes[p[0]])) {
                    const M = this._nodes[p[0]];
                    if (M.opType === "Clip")
                      if (M.inputs.length === 1)
                        try {
                          u.attributes.set("activation_params", "floats", [
                            M.attributes.getFloat("min"),
                            M.attributes.getFloat("max")
                          ]);
                        } catch {
                          u.attributes.set("activation_params", "floats", [
                            w.MIN_CLIP,
                            w.MAX_CLIP
                          ]);
                        }
                      else {
                        if (!(M.inputs.length >= 3 && this._allData[M.inputs[1]].tensor !== void 0 && this._allData[M.inputs[2]].tensor !== void 0))
                          continue;
                        u.attributes.set("activation_params", "floats", [
                          this._allData[M.inputs[1]].tensor.floatData[0],
                          this._allData[M.inputs[2]].tensor.floatData[0]
                        ]);
                      }
                    u.attributes.set("activation", "string", M.opType), this.deleteNode(p[0]);
                  }
                }
            }
          }
        },
        6231: (i, e) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.now = e.Profiler = e.Logger = void 0;
          const t = {
            verbose: 1e3,
            info: 2e3,
            warning: 4e3,
            error: 5e3,
            fatal: 6e3
          }, s = {
            none: new class {
              log(h, r, n) {
              }
            }(),
            console: new class {
              log(h, r, n) {
                console.log(`${this.color(h)} ${n ? "\x1B[35m" + n + "\x1B[0m " : ""}${r}`);
              }
              color(h) {
                switch (h) {
                  case "verbose":
                    return "\x1B[34;40mv\x1B[0m";
                  case "info":
                    return "\x1B[32mi\x1B[0m";
                  case "warning":
                    return "\x1B[30;43mw\x1B[0m";
                  case "error":
                    return "\x1B[31;40me\x1B[0m";
                  case "fatal":
                    return "\x1B[101mf\x1B[0m";
                  default:
                    throw new Error(`unsupported severity: ${h}`);
                }
              }
            }()
          }, l = {
            provider: "console",
            minimalSeverity: "warning",
            logDateTime: true,
            logSourceLocation: false
          };
          let f = {
            "": l
          };
          function d(h, r, n, u) {
            if (r === void 0)
              return p = h, {
                verbose: d.verbose.bind(null, p),
                info: d.info.bind(null, p),
                warning: d.warning.bind(null, p),
                error: d.error.bind(null, p),
                fatal: d.fatal.bind(null, p)
              };
            if (n === void 0)
              w(h, r);
            else if (typeof n == "number" && u === void 0)
              w(h, r);
            else if (typeof n == "string" && u === void 0)
              w(h, n, 0, r);
            else {
              if (typeof n != "string" || typeof u != "number")
                throw new TypeError("input is valid");
              w(h, n, 0, r);
            }
            var p;
          }
          function w(h, r, n, u) {
            const p = f[u || ""] || f[""];
            t[h] < t[p.minimalSeverity] || (p.logDateTime && (r = `${(/* @__PURE__ */ new Date()).toISOString()}|${r}`), p.logSourceLocation, s[p.provider].log(h, r, u));
          }
          (function(h) {
            function r(u) {
              f = {}, n("", u || {});
            }
            function n(u, p) {
              if (u === "*")
                r(p);
              else {
                const M = f[u] || l;
                f[u] = {
                  provider: p.provider || M.provider,
                  minimalSeverity: p.minimalSeverity || M.minimalSeverity,
                  logDateTime: p.logDateTime === void 0 ? M.logDateTime : p.logDateTime,
                  logSourceLocation: p.logSourceLocation === void 0 ? M.logSourceLocation : p.logSourceLocation
                };
              }
            }
            h.verbose = function(u, p) {
              h("verbose", u, p);
            }, h.info = function(u, p) {
              h("info", u, p);
            }, h.warning = function(u, p) {
              h("warning", u, p);
            }, h.error = function(u, p) {
              h("error", u, p);
            }, h.fatal = function(u, p) {
              h("fatal", u, p);
            }, h.reset = r, h.set = n, h.setWithEnv = function(u) {
              const p = {};
              u.logLevel && (p.minimalSeverity = u.logLevel), n("", p);
            };
          })(d || (d = {})), e.Logger = d;
          class g {
            constructor(r, n, u, p, M, P) {
              this.category = r, this.name = n, this.startTime = u, this.endCallback = p, this.timer = M, this.ctx = P;
            }
            end() {
              return this.endCallback(this);
            }
            async checkTimer() {
              if (this.ctx === void 0 || this.timer === void 0)
                throw new Error("No webgl timer found");
              return this.ctx.endTimer(), this.ctx.waitForQueryAndGetTime(this.timer);
            }
          }
          class _ {
            constructor(r, n, u, p) {
              this.category = r, this.name = n, this.startTime = u, this.endTime = p;
            }
          }
          e.Profiler = class {
            static create(h) {
              return h === void 0 ? new this() : new this(h.maxNumberEvents, h.flushBatchSize, h.flushIntervalInMilliseconds);
            }
            constructor(h, r, n) {
              this._started = false, this._flushPointer = 0, this._started = false, this._maxNumberEvents = h === void 0 ? 1e4 : h, this._flushBatchSize = r === void 0 ? 10 : r, this._flushIntervalInMilliseconds = n === void 0 ? 5e3 : n;
            }
            start() {
              this._started = true, this._timingEvents = [], this._flushTime = (0, e.now)(), this._flushPointer = 0;
            }
            stop() {
              for (this._started = false; this._flushPointer < this._timingEvents.length; this._flushPointer++)
                this.logOneEvent(this._timingEvents[this._flushPointer]);
            }
            event(h, r, n, u) {
              const p = this._started ? this.begin(h, r, u) : void 0;
              let M = false;
              const P = n();
              if (P && typeof P.then == "function")
                return M = true, new Promise((E, k) => {
                  P.then(async ($) => {
                    p && await p.end(), E($);
                  }, async ($) => {
                    p && await p.end(), k($);
                  });
                });
              if (!M && p) {
                const E = p.end();
                if (E && typeof E.then == "function")
                  return new Promise((k, $) => {
                    E.then(() => {
                      k(P);
                    }, (A) => {
                      $(A);
                    });
                  });
              }
              return P;
            }
            begin(h, r, n) {
              if (!this._started)
                throw new Error("profiler is not started yet");
              if (n === void 0) {
                const u = (0, e.now)();
                return this.flush(u), new g(h, r, u, (p) => this.endSync(p));
              }
              {
                const u = n.beginTimer();
                return new g(h, r, 0, async (p) => this.end(p), u, n);
              }
            }
            async end(h) {
              const r = await h.checkTimer();
              this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new _(h.category, h.name, h.startTime, r)), this.flush(r));
            }
            endSync(h) {
              const r = (0, e.now)();
              this._timingEvents.length < this._maxNumberEvents && (this._timingEvents.push(new _(h.category, h.name, h.startTime, r)), this.flush(r));
            }
            logOneEvent(h) {
              e.Logger.verbose(`Profiler.${h.category}`, `${(h.endTime - h.startTime).toFixed(2)}ms on event '${h.name}' at ${h.endTime.toFixed(2)}`);
            }
            flush(h) {
              if (this._timingEvents.length - this._flushPointer >= this._flushBatchSize || h - this._flushTime >= this._flushIntervalInMilliseconds) {
                for (const r = this._flushPointer; this._flushPointer < r + this._flushBatchSize && this._flushPointer < this._timingEvents.length; this._flushPointer++)
                  this.logOneEvent(this._timingEvents[this._flushPointer]);
                this._flushTime = (0, e.now)();
              }
            }
            get started() {
              return this._started;
            }
          }, e.now = typeof performance < "u" && performance.now ? () => performance.now() : Date.now;
        },
        2644: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.Model = void 0;
          const s = t(5686), l = t(1446), f = t(7070), d = t(9395), w = t(2517);
          var g = d.onnxruntime.experimental.fbs;
          e.Model = class {
            constructor() {
            }
            load(_, h, r) {
              if (!r)
                try {
                  return void this.loadFromOnnxFormat(_, h);
                } catch (n) {
                  if (r !== void 0)
                    throw n;
                }
              this.loadFromOrtFormat(_, h);
            }
            loadFromOnnxFormat(_, h) {
              const r = l.onnx.ModelProto.decode(_);
              if (w.LongUtil.longToNumber(r.irVersion) < 3)
                throw new Error("only support ONNX model with IR_VERSION>=3");
              this._opsets = r.opsetImport.map((n) => ({
                domain: n.domain,
                version: w.LongUtil.longToNumber(n.version)
              })), this._graph = f.Graph.from(r.graph, h);
            }
            loadFromOrtFormat(_, h) {
              const r = new s.flatbuffers.ByteBuffer(_), n = g.InferenceSession.getRootAsInferenceSession(r).model();
              if (w.LongUtil.longToNumber(n.irVersion()) < 3)
                throw new Error("only support ONNX model with IR_VERSION>=3");
              this._opsets = [];
              for (let u = 0; u < n.opsetImportLength(); u++) {
                const p = n.opsetImport(u);
                this._opsets.push({
                  domain: p?.domain(),
                  version: w.LongUtil.longToNumber(p.version())
                });
              }
              this._graph = f.Graph.from(n.graph(), h);
            }
            get graph() {
              return this._graph;
            }
            get opsets() {
              return this._opsets;
            }
          };
        },
        782: (i, e) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.FLOAT_TYPES = e.INT_TYPES = e.NUMBER_TYPES = void 0, e.NUMBER_TYPES = [
            "float32",
            "float64",
            "int32",
            "int16",
            "int8",
            "uint16",
            "uint32",
            "uint8"
          ], e.INT_TYPES = [
            "int32",
            "int16",
            "int8",
            "uint16",
            "uint32",
            "uint8"
          ], e.FLOAT_TYPES = [
            "float32",
            "float64"
          ];
        },
        1047: (i, e) => {
          function t(s, l) {
            if (l.endsWith("+")) {
              const f = Number.parseInt(l.substring(0, l.length - 1), 10);
              return !isNaN(f) && f <= s;
            }
            if (l.split("-").length === 2) {
              const f = l.split("-"), d = Number.parseInt(f[0], 10), w = Number.parseInt(f[1], 10);
              return !isNaN(d) && !isNaN(w) && d <= s && s <= w;
            }
            return Number.parseInt(l, 10) === s;
          }
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.resolveOperator = void 0, e.resolveOperator = function(s, l, f) {
            for (const d of f) {
              const w = d[0], g = d[1], _ = d[2], h = d[3], r = d[4];
              if (s.opType === w) {
                for (const n of l)
                  if ((n.domain === g || n.domain === "ai.onnx" && g === "") && t(n.version, _))
                    return {
                      opImpl: h,
                      opInit: r
                    };
              }
            }
            throw new TypeError(`cannot resolve operator '${s.opType}' with opsets: ${l.map((d) => `${d.domain || "ai.onnx"} v${d.version}`).join(", ")}`);
          };
        },
        9395: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.onnxruntime = void 0;
          const s = t(5686);
          var l, f;
          l = e.onnxruntime || (e.onnxruntime = {}), function(d) {
            (function(w) {
              w[w.UNDEFINED = 0] = "UNDEFINED", w[w.FLOAT = 1] = "FLOAT", w[w.INT = 2] = "INT", w[w.STRING = 3] = "STRING", w[w.TENSOR = 4] = "TENSOR", w[w.GRAPH = 5] = "GRAPH", w[w.FLOATS = 6] = "FLOATS", w[w.INTS = 7] = "INTS", w[w.STRINGS = 8] = "STRINGS", w[w.TENSORS = 9] = "TENSORS", w[w.GRAPHS = 10] = "GRAPHS", w[w.SPARSE_TENSOR = 11] = "SPARSE_TENSOR", w[w.SPARSE_TENSORS = 12] = "SPARSE_TENSORS";
            })(d.AttributeType || (d.AttributeType = {}));
          }((f = l.experimental || (l.experimental = {})).fbs || (f.fbs = {})), function(d) {
            (function(w) {
              (function(g) {
                (function(_) {
                  _[_.UNKNOWN = 0] = "UNKNOWN", _[_.VALUE = 1] = "VALUE", _[_.PARAM = 2] = "PARAM";
                })(g.DimensionValueType || (g.DimensionValueType = {}));
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                (function(_) {
                  _[_.UNDEFINED = 0] = "UNDEFINED", _[_.FLOAT = 1] = "FLOAT", _[_.UINT8 = 2] = "UINT8", _[_.INT8 = 3] = "INT8", _[_.UINT16 = 4] = "UINT16", _[_.INT16 = 5] = "INT16", _[_.INT32 = 6] = "INT32", _[_.INT64 = 7] = "INT64", _[_.STRING = 8] = "STRING", _[_.BOOL = 9] = "BOOL", _[_.FLOAT16 = 10] = "FLOAT16", _[_.DOUBLE = 11] = "DOUBLE", _[_.UINT32 = 12] = "UINT32", _[_.UINT64 = 13] = "UINT64", _[_.COMPLEX64 = 14] = "COMPLEX64", _[_.COMPLEX128 = 15] = "COMPLEX128", _[_.BFLOAT16 = 16] = "BFLOAT16";
                })(g.TensorDataType || (g.TensorDataType = {}));
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                (function(_) {
                  _[_.Primitive = 0] = "Primitive", _[_.Fused = 1] = "Fused";
                })(g.NodeType || (g.NodeType = {}));
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                (function(_) {
                  _[_.NONE = 0] = "NONE", _[_.tensor_type = 1] = "tensor_type", _[_.sequence_type = 2] = "sequence_type", _[_.map_type = 3] = "map_type";
                })(g.TypeInfoValue || (g.TypeInfoValue = {}));
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsShape(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsShape(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  dim(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 4);
                    return u ? (n || new d.experimental.fbs.Dimension()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  dimLength() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startShape(r) {
                    r.startObject(1);
                  }
                  static addDim(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static createDimVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startDimVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static endShape(r) {
                    return r.endObject();
                  }
                  static createShape(r, n) {
                    return _.startShape(r), _.addDim(r, n), _.endShape(r);
                  }
                }
                g.Shape = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsDimension(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsDimension(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  value(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? (r || new d.experimental.fbs.DimensionValue()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  denotation(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  static startDimension(r) {
                    r.startObject(2);
                  }
                  static addValue(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addDenotation(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static endDimension(r) {
                    return r.endObject();
                  }
                  static createDimension(r, n, u) {
                    return _.startDimension(r), _.addValue(r, n), _.addDenotation(r, u), _.endDimension(r);
                  }
                }
                g.Dimension = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsDimensionValue(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsDimensionValue(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  dimType() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? this.bb.readInt8(this.bb_pos + r) : d.experimental.fbs.DimensionValueType.UNKNOWN;
                  }
                  dimValue() {
                    let r = this.bb.__offset(this.bb_pos, 6);
                    return r ? this.bb.readInt64(this.bb_pos + r) : this.bb.createLong(0, 0);
                  }
                  dimParam(r) {
                    let n = this.bb.__offset(this.bb_pos, 8);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  static startDimensionValue(r) {
                    r.startObject(3);
                  }
                  static addDimType(r, n) {
                    r.addFieldInt8(0, n, d.experimental.fbs.DimensionValueType.UNKNOWN);
                  }
                  static addDimValue(r, n) {
                    r.addFieldInt64(1, n, r.createLong(0, 0));
                  }
                  static addDimParam(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static endDimensionValue(r) {
                    return r.endObject();
                  }
                  static createDimensionValue(r, n, u, p) {
                    return _.startDimensionValue(r), _.addDimType(r, n), _.addDimValue(r, u), _.addDimParam(r, p), _.endDimensionValue(r);
                  }
                }
                g.DimensionValue = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsTensorTypeAndShape(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsTensorTypeAndShape(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  elemType() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? this.bb.readInt32(this.bb_pos + r) : d.experimental.fbs.TensorDataType.UNDEFINED;
                  }
                  shape(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? (r || new d.experimental.fbs.Shape()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  static startTensorTypeAndShape(r) {
                    r.startObject(2);
                  }
                  static addElemType(r, n) {
                    r.addFieldInt32(0, n, d.experimental.fbs.TensorDataType.UNDEFINED);
                  }
                  static addShape(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static endTensorTypeAndShape(r) {
                    return r.endObject();
                  }
                  static createTensorTypeAndShape(r, n, u) {
                    return _.startTensorTypeAndShape(r), _.addElemType(r, n), _.addShape(r, u), _.endTensorTypeAndShape(r);
                  }
                }
                g.TensorTypeAndShape = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsMapType(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsMapType(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  keyType() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? this.bb.readInt32(this.bb_pos + r) : d.experimental.fbs.TensorDataType.UNDEFINED;
                  }
                  valueType(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? (r || new d.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  static startMapType(r) {
                    r.startObject(2);
                  }
                  static addKeyType(r, n) {
                    r.addFieldInt32(0, n, d.experimental.fbs.TensorDataType.UNDEFINED);
                  }
                  static addValueType(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static endMapType(r) {
                    return r.endObject();
                  }
                  static createMapType(r, n, u) {
                    return _.startMapType(r), _.addKeyType(r, n), _.addValueType(r, u), _.endMapType(r);
                  }
                }
                g.MapType = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsSequenceType(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsSequenceType(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  elemType(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? (r || new d.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  static startSequenceType(r) {
                    r.startObject(1);
                  }
                  static addElemType(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static endSequenceType(r) {
                    return r.endObject();
                  }
                  static createSequenceType(r, n) {
                    return _.startSequenceType(r), _.addElemType(r, n), _.endSequenceType(r);
                  }
                }
                g.SequenceType = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (w.fbs || (w.fbs = {})).EdgeEnd = class {
                constructor() {
                  this.bb = null, this.bb_pos = 0;
                }
                __init(g, _) {
                  return this.bb_pos = g, this.bb = _, this;
                }
                nodeIndex() {
                  return this.bb.readUint32(this.bb_pos);
                }
                srcArgIndex() {
                  return this.bb.readInt32(this.bb_pos + 4);
                }
                dstArgIndex() {
                  return this.bb.readInt32(this.bb_pos + 8);
                }
                static createEdgeEnd(g, _, h, r) {
                  return g.prep(4, 12), g.writeInt32(r), g.writeInt32(h), g.writeInt32(_), g.offset();
                }
              };
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsNodeEdge(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsNodeEdge(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  nodeIndex() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? this.bb.readUint32(this.bb_pos + r) : 0;
                  }
                  inputEdges(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 6);
                    return u ? (n || new d.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos + u) + 12 * r, this.bb) : null;
                  }
                  inputEdgesLength() {
                    let r = this.bb.__offset(this.bb_pos, 6);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  outputEdges(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 8);
                    return u ? (n || new d.experimental.fbs.EdgeEnd()).__init(this.bb.__vector(this.bb_pos + u) + 12 * r, this.bb) : null;
                  }
                  outputEdgesLength() {
                    let r = this.bb.__offset(this.bb_pos, 8);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startNodeEdge(r) {
                    r.startObject(3);
                  }
                  static addNodeIndex(r, n) {
                    r.addFieldInt32(0, n, 0);
                  }
                  static addInputEdges(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static startInputEdgesVector(r, n) {
                    r.startVector(12, n, 4);
                  }
                  static addOutputEdges(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static startOutputEdgesVector(r, n) {
                    r.startVector(12, n, 4);
                  }
                  static endNodeEdge(r) {
                    return r.endObject();
                  }
                  static createNodeEdge(r, n, u, p) {
                    return _.startNodeEdge(r), _.addNodeIndex(r, n), _.addInputEdges(r, u), _.addOutputEdges(r, p), _.endNodeEdge(r);
                  }
                }
                g.NodeEdge = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsNode(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsNode(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  name(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  docString(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  domain(r) {
                    let n = this.bb.__offset(this.bb_pos, 8);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  sinceVersion() {
                    let r = this.bb.__offset(this.bb_pos, 10);
                    return r ? this.bb.readInt32(this.bb_pos + r) : 0;
                  }
                  index() {
                    let r = this.bb.__offset(this.bb_pos, 12);
                    return r ? this.bb.readUint32(this.bb_pos + r) : 0;
                  }
                  opType(r) {
                    let n = this.bb.__offset(this.bb_pos, 14);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  type() {
                    let r = this.bb.__offset(this.bb_pos, 16);
                    return r ? this.bb.readInt32(this.bb_pos + r) : d.experimental.fbs.NodeType.Primitive;
                  }
                  executionProviderType(r) {
                    let n = this.bb.__offset(this.bb_pos, 18);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  inputs(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 20);
                    return u ? this.bb.__string(this.bb.__vector(this.bb_pos + u) + 4 * r, n) : null;
                  }
                  inputsLength() {
                    let r = this.bb.__offset(this.bb_pos, 20);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  outputs(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 22);
                    return u ? this.bb.__string(this.bb.__vector(this.bb_pos + u) + 4 * r, n) : null;
                  }
                  outputsLength() {
                    let r = this.bb.__offset(this.bb_pos, 22);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  attributes(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 24);
                    return u ? (n || new d.experimental.fbs.Attribute()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  attributesLength() {
                    let r = this.bb.__offset(this.bb_pos, 24);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  inputArgCounts(r) {
                    let n = this.bb.__offset(this.bb_pos, 26);
                    return n ? this.bb.readInt32(this.bb.__vector(this.bb_pos + n) + 4 * r) : 0;
                  }
                  inputArgCountsLength() {
                    let r = this.bb.__offset(this.bb_pos, 26);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  inputArgCountsArray() {
                    let r = this.bb.__offset(this.bb_pos, 26);
                    return r ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + r), this.bb.__vector_len(this.bb_pos + r)) : null;
                  }
                  implicitInputs(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 28);
                    return u ? this.bb.__string(this.bb.__vector(this.bb_pos + u) + 4 * r, n) : null;
                  }
                  implicitInputsLength() {
                    let r = this.bb.__offset(this.bb_pos, 28);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startNode(r) {
                    r.startObject(13);
                  }
                  static addName(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addDocString(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static addDomain(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static addSinceVersion(r, n) {
                    r.addFieldInt32(3, n, 0);
                  }
                  static addIndex(r, n) {
                    r.addFieldInt32(4, n, 0);
                  }
                  static addOpType(r, n) {
                    r.addFieldOffset(5, n, 0);
                  }
                  static addType(r, n) {
                    r.addFieldInt32(6, n, d.experimental.fbs.NodeType.Primitive);
                  }
                  static addExecutionProviderType(r, n) {
                    r.addFieldOffset(7, n, 0);
                  }
                  static addInputs(r, n) {
                    r.addFieldOffset(8, n, 0);
                  }
                  static createInputsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startInputsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addOutputs(r, n) {
                    r.addFieldOffset(9, n, 0);
                  }
                  static createOutputsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startOutputsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addAttributes(r, n) {
                    r.addFieldOffset(10, n, 0);
                  }
                  static createAttributesVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startAttributesVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addInputArgCounts(r, n) {
                    r.addFieldOffset(11, n, 0);
                  }
                  static createInputArgCountsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addInt32(n[u]);
                    return r.endVector();
                  }
                  static startInputArgCountsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addImplicitInputs(r, n) {
                    r.addFieldOffset(12, n, 0);
                  }
                  static createImplicitInputsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startImplicitInputsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static endNode(r) {
                    return r.endObject();
                  }
                  static createNode(r, n, u, p, M, P, E, k, $, A, C, F, D, N) {
                    return _.startNode(r), _.addName(r, n), _.addDocString(r, u), _.addDomain(r, p), _.addSinceVersion(r, M), _.addIndex(r, P), _.addOpType(r, E), _.addType(r, k), _.addExecutionProviderType(r, $), _.addInputs(r, A), _.addOutputs(r, C), _.addAttributes(r, F), _.addInputArgCounts(r, D), _.addImplicitInputs(r, N), _.endNode(r);
                  }
                }
                g.Node = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsValueInfo(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsValueInfo(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  name(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  docString(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  type(r) {
                    let n = this.bb.__offset(this.bb_pos, 8);
                    return n ? (r || new d.experimental.fbs.TypeInfo()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  static startValueInfo(r) {
                    r.startObject(3);
                  }
                  static addName(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addDocString(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static addType(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static endValueInfo(r) {
                    return r.endObject();
                  }
                  static createValueInfo(r, n, u, p) {
                    return _.startValueInfo(r), _.addName(r, n), _.addDocString(r, u), _.addType(r, p), _.endValueInfo(r);
                  }
                }
                g.ValueInfo = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsTypeInfo(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsTypeInfo(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  denotation(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  valueType() {
                    let r = this.bb.__offset(this.bb_pos, 6);
                    return r ? this.bb.readUint8(this.bb_pos + r) : d.experimental.fbs.TypeInfoValue.NONE;
                  }
                  value(r) {
                    let n = this.bb.__offset(this.bb_pos, 8);
                    return n ? this.bb.__union(r, this.bb_pos + n) : null;
                  }
                  static startTypeInfo(r) {
                    r.startObject(3);
                  }
                  static addDenotation(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addValueType(r, n) {
                    r.addFieldInt8(1, n, d.experimental.fbs.TypeInfoValue.NONE);
                  }
                  static addValue(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static endTypeInfo(r) {
                    return r.endObject();
                  }
                  static createTypeInfo(r, n, u, p) {
                    return _.startTypeInfo(r), _.addDenotation(r, n), _.addValueType(r, u), _.addValue(r, p), _.endTypeInfo(r);
                  }
                }
                g.TypeInfo = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsOperatorSetId(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsOperatorSetId(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  domain(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  version() {
                    let r = this.bb.__offset(this.bb_pos, 6);
                    return r ? this.bb.readInt64(this.bb_pos + r) : this.bb.createLong(0, 0);
                  }
                  static startOperatorSetId(r) {
                    r.startObject(2);
                  }
                  static addDomain(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addVersion(r, n) {
                    r.addFieldInt64(1, n, r.createLong(0, 0));
                  }
                  static endOperatorSetId(r) {
                    return r.endObject();
                  }
                  static createOperatorSetId(r, n, u) {
                    return _.startOperatorSetId(r), _.addDomain(r, n), _.addVersion(r, u), _.endOperatorSetId(r);
                  }
                }
                g.OperatorSetId = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsTensor(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsTensor(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  name(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  docString(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  dims(r) {
                    let n = this.bb.__offset(this.bb_pos, 8);
                    return n ? this.bb.readInt64(this.bb.__vector(this.bb_pos + n) + 8 * r) : this.bb.createLong(0, 0);
                  }
                  dimsLength() {
                    let r = this.bb.__offset(this.bb_pos, 8);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  dataType() {
                    let r = this.bb.__offset(this.bb_pos, 10);
                    return r ? this.bb.readInt32(this.bb_pos + r) : d.experimental.fbs.TensorDataType.UNDEFINED;
                  }
                  rawData(r) {
                    let n = this.bb.__offset(this.bb_pos, 12);
                    return n ? this.bb.readUint8(this.bb.__vector(this.bb_pos + n) + r) : 0;
                  }
                  rawDataLength() {
                    let r = this.bb.__offset(this.bb_pos, 12);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  rawDataArray() {
                    let r = this.bb.__offset(this.bb_pos, 12);
                    return r ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + r), this.bb.__vector_len(this.bb_pos + r)) : null;
                  }
                  stringData(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 14);
                    return u ? this.bb.__string(this.bb.__vector(this.bb_pos + u) + 4 * r, n) : null;
                  }
                  stringDataLength() {
                    let r = this.bb.__offset(this.bb_pos, 14);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startTensor(r) {
                    r.startObject(6);
                  }
                  static addName(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addDocString(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static addDims(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static createDimsVector(r, n) {
                    r.startVector(8, n.length, 8);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addInt64(n[u]);
                    return r.endVector();
                  }
                  static startDimsVector(r, n) {
                    r.startVector(8, n, 8);
                  }
                  static addDataType(r, n) {
                    r.addFieldInt32(3, n, d.experimental.fbs.TensorDataType.UNDEFINED);
                  }
                  static addRawData(r, n) {
                    r.addFieldOffset(4, n, 0);
                  }
                  static createRawDataVector(r, n) {
                    r.startVector(1, n.length, 1);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addInt8(n[u]);
                    return r.endVector();
                  }
                  static startRawDataVector(r, n) {
                    r.startVector(1, n, 1);
                  }
                  static addStringData(r, n) {
                    r.addFieldOffset(5, n, 0);
                  }
                  static createStringDataVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startStringDataVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static endTensor(r) {
                    return r.endObject();
                  }
                  static createTensor(r, n, u, p, M, P, E) {
                    return _.startTensor(r), _.addName(r, n), _.addDocString(r, u), _.addDims(r, p), _.addDataType(r, M), _.addRawData(r, P), _.addStringData(r, E), _.endTensor(r);
                  }
                }
                g.Tensor = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsSparseTensor(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsSparseTensor(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  values(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? (r || new d.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  indices(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? (r || new d.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  dims(r) {
                    let n = this.bb.__offset(this.bb_pos, 8);
                    return n ? this.bb.readInt64(this.bb.__vector(this.bb_pos + n) + 8 * r) : this.bb.createLong(0, 0);
                  }
                  dimsLength() {
                    let r = this.bb.__offset(this.bb_pos, 8);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startSparseTensor(r) {
                    r.startObject(3);
                  }
                  static addValues(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addIndices(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static addDims(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static createDimsVector(r, n) {
                    r.startVector(8, n.length, 8);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addInt64(n[u]);
                    return r.endVector();
                  }
                  static startDimsVector(r, n) {
                    r.startVector(8, n, 8);
                  }
                  static endSparseTensor(r) {
                    return r.endObject();
                  }
                  static createSparseTensor(r, n, u, p) {
                    return _.startSparseTensor(r), _.addValues(r, n), _.addIndices(r, u), _.addDims(r, p), _.endSparseTensor(r);
                  }
                }
                g.SparseTensor = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsAttribute(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsAttribute(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  name(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  docString(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  type() {
                    let r = this.bb.__offset(this.bb_pos, 8);
                    return r ? this.bb.readInt32(this.bb_pos + r) : d.experimental.fbs.AttributeType.UNDEFINED;
                  }
                  f() {
                    let r = this.bb.__offset(this.bb_pos, 10);
                    return r ? this.bb.readFloat32(this.bb_pos + r) : 0;
                  }
                  i() {
                    let r = this.bb.__offset(this.bb_pos, 12);
                    return r ? this.bb.readInt64(this.bb_pos + r) : this.bb.createLong(0, 0);
                  }
                  s(r) {
                    let n = this.bb.__offset(this.bb_pos, 14);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  t(r) {
                    let n = this.bb.__offset(this.bb_pos, 16);
                    return n ? (r || new d.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  g(r) {
                    let n = this.bb.__offset(this.bb_pos, 18);
                    return n ? (r || new d.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  floats(r) {
                    let n = this.bb.__offset(this.bb_pos, 20);
                    return n ? this.bb.readFloat32(this.bb.__vector(this.bb_pos + n) + 4 * r) : 0;
                  }
                  floatsLength() {
                    let r = this.bb.__offset(this.bb_pos, 20);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  floatsArray() {
                    let r = this.bb.__offset(this.bb_pos, 20);
                    return r ? new Float32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + r), this.bb.__vector_len(this.bb_pos + r)) : null;
                  }
                  ints(r) {
                    let n = this.bb.__offset(this.bb_pos, 22);
                    return n ? this.bb.readInt64(this.bb.__vector(this.bb_pos + n) + 8 * r) : this.bb.createLong(0, 0);
                  }
                  intsLength() {
                    let r = this.bb.__offset(this.bb_pos, 22);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  strings(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 24);
                    return u ? this.bb.__string(this.bb.__vector(this.bb_pos + u) + 4 * r, n) : null;
                  }
                  stringsLength() {
                    let r = this.bb.__offset(this.bb_pos, 24);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  tensors(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 26);
                    return u ? (n || new d.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  tensorsLength() {
                    let r = this.bb.__offset(this.bb_pos, 26);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  graphs(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 28);
                    return u ? (n || new d.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  graphsLength() {
                    let r = this.bb.__offset(this.bb_pos, 28);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startAttribute(r) {
                    r.startObject(13);
                  }
                  static addName(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addDocString(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static addType(r, n) {
                    r.addFieldInt32(2, n, d.experimental.fbs.AttributeType.UNDEFINED);
                  }
                  static addF(r, n) {
                    r.addFieldFloat32(3, n, 0);
                  }
                  static addI(r, n) {
                    r.addFieldInt64(4, n, r.createLong(0, 0));
                  }
                  static addS(r, n) {
                    r.addFieldOffset(5, n, 0);
                  }
                  static addT(r, n) {
                    r.addFieldOffset(6, n, 0);
                  }
                  static addG(r, n) {
                    r.addFieldOffset(7, n, 0);
                  }
                  static addFloats(r, n) {
                    r.addFieldOffset(8, n, 0);
                  }
                  static createFloatsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addFloat32(n[u]);
                    return r.endVector();
                  }
                  static startFloatsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addInts(r, n) {
                    r.addFieldOffset(9, n, 0);
                  }
                  static createIntsVector(r, n) {
                    r.startVector(8, n.length, 8);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addInt64(n[u]);
                    return r.endVector();
                  }
                  static startIntsVector(r, n) {
                    r.startVector(8, n, 8);
                  }
                  static addStrings(r, n) {
                    r.addFieldOffset(10, n, 0);
                  }
                  static createStringsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startStringsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addTensors(r, n) {
                    r.addFieldOffset(11, n, 0);
                  }
                  static createTensorsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startTensorsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addGraphs(r, n) {
                    r.addFieldOffset(12, n, 0);
                  }
                  static createGraphsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startGraphsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static endAttribute(r) {
                    return r.endObject();
                  }
                  static createAttribute(r, n, u, p, M, P, E, k, $, A, C, F, D, N) {
                    return _.startAttribute(r), _.addName(r, n), _.addDocString(r, u), _.addType(r, p), _.addF(r, M), _.addI(r, P), _.addS(r, E), _.addT(r, k), _.addG(r, $), _.addFloats(r, A), _.addInts(r, C), _.addStrings(r, F), _.addTensors(r, D), _.addGraphs(r, N), _.endAttribute(r);
                  }
                }
                g.Attribute = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsGraph(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsGraph(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  initializers(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 4);
                    return u ? (n || new d.experimental.fbs.Tensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  initializersLength() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  nodeArgs(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 6);
                    return u ? (n || new d.experimental.fbs.ValueInfo()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  nodeArgsLength() {
                    let r = this.bb.__offset(this.bb_pos, 6);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  nodes(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 8);
                    return u ? (n || new d.experimental.fbs.Node()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  nodesLength() {
                    let r = this.bb.__offset(this.bb_pos, 8);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  maxNodeIndex() {
                    let r = this.bb.__offset(this.bb_pos, 10);
                    return r ? this.bb.readUint32(this.bb_pos + r) : 0;
                  }
                  nodeEdges(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 12);
                    return u ? (n || new d.experimental.fbs.NodeEdge()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  nodeEdgesLength() {
                    let r = this.bb.__offset(this.bb_pos, 12);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  inputs(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 14);
                    return u ? this.bb.__string(this.bb.__vector(this.bb_pos + u) + 4 * r, n) : null;
                  }
                  inputsLength() {
                    let r = this.bb.__offset(this.bb_pos, 14);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  outputs(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 16);
                    return u ? this.bb.__string(this.bb.__vector(this.bb_pos + u) + 4 * r, n) : null;
                  }
                  outputsLength() {
                    let r = this.bb.__offset(this.bb_pos, 16);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  sparseInitializers(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 18);
                    return u ? (n || new d.experimental.fbs.SparseTensor()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  sparseInitializersLength() {
                    let r = this.bb.__offset(this.bb_pos, 18);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startGraph(r) {
                    r.startObject(8);
                  }
                  static addInitializers(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static createInitializersVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startInitializersVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addNodeArgs(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static createNodeArgsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startNodeArgsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addNodes(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static createNodesVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startNodesVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addMaxNodeIndex(r, n) {
                    r.addFieldInt32(3, n, 0);
                  }
                  static addNodeEdges(r, n) {
                    r.addFieldOffset(4, n, 0);
                  }
                  static createNodeEdgesVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startNodeEdgesVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addInputs(r, n) {
                    r.addFieldOffset(5, n, 0);
                  }
                  static createInputsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startInputsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addOutputs(r, n) {
                    r.addFieldOffset(6, n, 0);
                  }
                  static createOutputsVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startOutputsVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addSparseInitializers(r, n) {
                    r.addFieldOffset(7, n, 0);
                  }
                  static createSparseInitializersVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startSparseInitializersVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static endGraph(r) {
                    return r.endObject();
                  }
                  static createGraph(r, n, u, p, M, P, E, k, $) {
                    return _.startGraph(r), _.addInitializers(r, n), _.addNodeArgs(r, u), _.addNodes(r, p), _.addMaxNodeIndex(r, M), _.addNodeEdges(r, P), _.addInputs(r, E), _.addOutputs(r, k), _.addSparseInitializers(r, $), _.endGraph(r);
                  }
                }
                g.Graph = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsModel(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsModel(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  irVersion() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? this.bb.readInt64(this.bb_pos + r) : this.bb.createLong(0, 0);
                  }
                  opsetImport(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 6);
                    return u ? (n || new d.experimental.fbs.OperatorSetId()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  opsetImportLength() {
                    let r = this.bb.__offset(this.bb_pos, 6);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  producerName(r) {
                    let n = this.bb.__offset(this.bb_pos, 8);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  producerVersion(r) {
                    let n = this.bb.__offset(this.bb_pos, 10);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  domain(r) {
                    let n = this.bb.__offset(this.bb_pos, 12);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  modelVersion() {
                    let r = this.bb.__offset(this.bb_pos, 14);
                    return r ? this.bb.readInt64(this.bb_pos + r) : this.bb.createLong(0, 0);
                  }
                  docString(r) {
                    let n = this.bb.__offset(this.bb_pos, 16);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  graph(r) {
                    let n = this.bb.__offset(this.bb_pos, 18);
                    return n ? (r || new d.experimental.fbs.Graph()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  graphDocString(r) {
                    let n = this.bb.__offset(this.bb_pos, 20);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  static startModel(r) {
                    r.startObject(9);
                  }
                  static addIrVersion(r, n) {
                    r.addFieldInt64(0, n, r.createLong(0, 0));
                  }
                  static addOpsetImport(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static createOpsetImportVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startOpsetImportVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addProducerName(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static addProducerVersion(r, n) {
                    r.addFieldOffset(3, n, 0);
                  }
                  static addDomain(r, n) {
                    r.addFieldOffset(4, n, 0);
                  }
                  static addModelVersion(r, n) {
                    r.addFieldInt64(5, n, r.createLong(0, 0));
                  }
                  static addDocString(r, n) {
                    r.addFieldOffset(6, n, 0);
                  }
                  static addGraph(r, n) {
                    r.addFieldOffset(7, n, 0);
                  }
                  static addGraphDocString(r, n) {
                    r.addFieldOffset(8, n, 0);
                  }
                  static endModel(r) {
                    return r.endObject();
                  }
                  static createModel(r, n, u, p, M, P, E, k, $, A) {
                    return _.startModel(r), _.addIrVersion(r, n), _.addOpsetImport(r, u), _.addProducerName(r, p), _.addProducerVersion(r, M), _.addDomain(r, P), _.addModelVersion(r, E), _.addDocString(r, k), _.addGraph(r, $), _.addGraphDocString(r, A), _.endModel(r);
                  }
                }
                g.Model = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsKernelCreateInfos(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsKernelCreateInfos(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  nodeIndices(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.readUint32(this.bb.__vector(this.bb_pos + n) + 4 * r) : 0;
                  }
                  nodeIndicesLength() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  nodeIndicesArray() {
                    let r = this.bb.__offset(this.bb_pos, 4);
                    return r ? new Uint32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + r), this.bb.__vector_len(this.bb_pos + r)) : null;
                  }
                  kernelDefHashes(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? this.bb.readUint64(this.bb.__vector(this.bb_pos + n) + 8 * r) : this.bb.createLong(0, 0);
                  }
                  kernelDefHashesLength() {
                    let r = this.bb.__offset(this.bb_pos, 6);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startKernelCreateInfos(r) {
                    r.startObject(2);
                  }
                  static addNodeIndices(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static createNodeIndicesVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addInt32(n[u]);
                    return r.endVector();
                  }
                  static startNodeIndicesVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static addKernelDefHashes(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static createKernelDefHashesVector(r, n) {
                    r.startVector(8, n.length, 8);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addInt64(n[u]);
                    return r.endVector();
                  }
                  static startKernelDefHashesVector(r, n) {
                    r.startVector(8, n, 8);
                  }
                  static endKernelCreateInfos(r) {
                    return r.endObject();
                  }
                  static createKernelCreateInfos(r, n, u) {
                    return _.startKernelCreateInfos(r), _.addNodeIndices(r, n), _.addKernelDefHashes(r, u), _.endKernelCreateInfos(r);
                  }
                }
                g.KernelCreateInfos = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsSubGraphSessionState(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsSubGraphSessionState(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  graphId(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  sessionState(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? (r || new d.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  static startSubGraphSessionState(r) {
                    r.startObject(2);
                  }
                  static addGraphId(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addSessionState(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static endSubGraphSessionState(r) {
                    let n = r.endObject();
                    return r.requiredField(n, 4), n;
                  }
                  static createSubGraphSessionState(r, n, u) {
                    return _.startSubGraphSessionState(r), _.addGraphId(r, n), _.addSessionState(r, u), _.endSubGraphSessionState(r);
                  }
                }
                g.SubGraphSessionState = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsSessionState(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsSessionState(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  kernels(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? (r || new d.experimental.fbs.KernelCreateInfos()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  subGraphSessionStates(r, n) {
                    let u = this.bb.__offset(this.bb_pos, 6);
                    return u ? (n || new d.experimental.fbs.SubGraphSessionState()).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + u) + 4 * r), this.bb) : null;
                  }
                  subGraphSessionStatesLength() {
                    let r = this.bb.__offset(this.bb_pos, 6);
                    return r ? this.bb.__vector_len(this.bb_pos + r) : 0;
                  }
                  static startSessionState(r) {
                    r.startObject(2);
                  }
                  static addKernels(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addSubGraphSessionStates(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static createSubGraphSessionStatesVector(r, n) {
                    r.startVector(4, n.length, 4);
                    for (let u = n.length - 1; u >= 0; u--)
                      r.addOffset(n[u]);
                    return r.endVector();
                  }
                  static startSubGraphSessionStatesVector(r, n) {
                    r.startVector(4, n, 4);
                  }
                  static endSessionState(r) {
                    return r.endObject();
                  }
                  static createSessionState(r, n, u) {
                    return _.startSessionState(r), _.addKernels(r, n), _.addSubGraphSessionStates(r, u), _.endSessionState(r);
                  }
                }
                g.SessionState = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {})), function(d) {
            (function(w) {
              (function(g) {
                class _ {
                  constructor() {
                    this.bb = null, this.bb_pos = 0;
                  }
                  __init(r, n) {
                    return this.bb_pos = r, this.bb = n, this;
                  }
                  static getRootAsInferenceSession(r, n) {
                    return (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static getSizePrefixedRootAsInferenceSession(r, n) {
                    return r.setPosition(r.position() + s.flatbuffers.SIZE_PREFIX_LENGTH), (n || new _()).__init(r.readInt32(r.position()) + r.position(), r);
                  }
                  static bufferHasIdentifier(r) {
                    return r.__has_identifier("ORTM");
                  }
                  ortVersion(r) {
                    let n = this.bb.__offset(this.bb_pos, 4);
                    return n ? this.bb.__string(this.bb_pos + n, r) : null;
                  }
                  model(r) {
                    let n = this.bb.__offset(this.bb_pos, 6);
                    return n ? (r || new d.experimental.fbs.Model()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  sessionState(r) {
                    let n = this.bb.__offset(this.bb_pos, 8);
                    return n ? (r || new d.experimental.fbs.SessionState()).__init(this.bb.__indirect(this.bb_pos + n), this.bb) : null;
                  }
                  static startInferenceSession(r) {
                    r.startObject(3);
                  }
                  static addOrtVersion(r, n) {
                    r.addFieldOffset(0, n, 0);
                  }
                  static addModel(r, n) {
                    r.addFieldOffset(1, n, 0);
                  }
                  static addSessionState(r, n) {
                    r.addFieldOffset(2, n, 0);
                  }
                  static endInferenceSession(r) {
                    return r.endObject();
                  }
                  static finishInferenceSessionBuffer(r, n) {
                    r.finish(n, "ORTM");
                  }
                  static finishSizePrefixedInferenceSessionBuffer(r, n) {
                    r.finish(n, "ORTM", true);
                  }
                  static createInferenceSession(r, n, u, p) {
                    return _.startInferenceSession(r), _.addOrtVersion(r, n), _.addModel(r, u), _.addSessionState(r, p), _.endInferenceSession(r);
                  }
                }
                g.InferenceSession = _;
              })(w.fbs || (w.fbs = {}));
            })(d.experimental || (d.experimental = {}));
          }(e.onnxruntime || (e.onnxruntime = {}));
        },
        7448: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.OnnxjsSessionHandler = void 0;
          const s = t(1670), l = t(9162);
          e.OnnxjsSessionHandler = class {
            constructor(f) {
              this.session = f, this.inputNames = this.session.inputNames, this.outputNames = this.session.outputNames;
            }
            async dispose() {
            }
            async run(f, d, w) {
              const g = /* @__PURE__ */ new Map();
              for (const r in f)
                if (Object.hasOwnProperty.call(f, r)) {
                  const n = f[r];
                  g.set(r, new l.Tensor(n.dims, n.type, void 0, void 0, n.data));
                }
              const _ = await this.session.run(g), h = {};
              return _.forEach((r, n) => {
                h[n] = new s.Tensor(r.type, r.data, r.dims);
              }), h;
            }
            startProfiling() {
              this.session.startProfiling();
            }
            endProfiling() {
              this.session.endProfiling();
            }
          };
        },
        6919: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.Session = void 0;
          const s = t(7067), l = t(1296), f = t(7091), d = t(1036), w = t(6231), g = t(2644);
          e.Session = class {
            constructor(_ = {}) {
              this._initialized = false, this.backendHint = _.backendHint, this.profiler = w.Profiler.create(_.profiler), this.context = {
                profiler: this.profiler,
                graphInputTypes: [],
                graphInputDims: []
              };
            }
            get inputNames() {
              return this._model.graph.getInputNames();
            }
            get outputNames() {
              return this._model.graph.getOutputNames();
            }
            startProfiling() {
              this.profiler.start();
            }
            endProfiling() {
              this.profiler.stop();
            }
            async loadModel(_, h, r) {
              await this.profiler.event("session", "Session.loadModel", async () => {
                const n = await (0, f.resolveBackend)(this.backendHint);
                if (this.sessionHandler = n.createSessionHandler(this.context), this._model = new g.Model(), typeof _ == "string") {
                  const u = _.endsWith(".ort");
                  if (typeof fetch > "u") {
                    const p = await (0, l.promisify)(s.readFile)(_);
                    this.initialize(p, u);
                  } else {
                    const p = await fetch(_), M = await p.arrayBuffer();
                    this.initialize(new Uint8Array(M), u);
                  }
                } else if (ArrayBuffer.isView(_))
                  this.initialize(_);
                else {
                  const u = new Uint8Array(_, h || 0, r || _.byteLength);
                  this.initialize(u);
                }
              });
            }
            initialize(_, h) {
              if (this._initialized)
                throw new Error("already initialized");
              this.profiler.event("session", "Session.initialize", () => {
                const r = this.sessionHandler.transformGraph ? this.sessionHandler : void 0;
                this._model.load(_, r, h), this.sessionHandler.onGraphInitialized && this.sessionHandler.onGraphInitialized(this._model.graph), this.initializeOps(this._model.graph), this._executionPlan = new d.ExecutionPlan(this._model.graph, this._ops, this.profiler);
              }), this._initialized = true;
            }
            async run(_) {
              if (!this._initialized)
                throw new Error("session not initialized yet");
              return this.profiler.event("session", "Session.run", async () => {
                const h = this.normalizeAndValidateInputs(_), r = await this._executionPlan.execute(this.sessionHandler, h);
                return this.createOutput(r);
              });
            }
            normalizeAndValidateInputs(_) {
              const h = this._model.graph.getInputNames();
              if (Array.isArray(_)) {
                if (_.length !== h.length)
                  throw new Error(`incorrect input array length: expected ${h.length} but got ${_.length}`);
              } else {
                if (_.size !== h.length)
                  throw new Error(`incorrect input map size: expected ${h.length} but got ${_.size}`);
                const r = new Array(_.size);
                let n = 0;
                for (let u = 0; u < h.length; ++u) {
                  const p = _.get(h[u]);
                  if (!p)
                    throw new Error(`missing input tensor for: '${name}'`);
                  r[n++] = p;
                }
                _ = r;
              }
              if (this.context.graphInputTypes && this.context.graphInputTypes.length !== 0 && this.context.graphInputDims && this.context.graphInputDims.length !== 0)
                this.validateInputTensorDims(this.context.graphInputDims, _, false);
              else {
                const r = this._model.graph.getInputIndices(), n = this._model.graph.getValues(), u = new Array(r.length);
                for (let p = 0; p < r.length; ++p) {
                  const M = n[r[p]];
                  u[p] = M.type.shape.dims, this.context.graphInputTypes.push(M.type.tensorType), this.context.graphInputDims.push(_[p].dims);
                }
                this.validateInputTensorDims(u, _, true);
              }
              return this.validateInputTensorTypes(this.context.graphInputTypes, _), _;
            }
            validateInputTensorTypes(_, h) {
              for (let r = 0; r < h.length; r++) {
                const n = _[r], u = h[r].type;
                if (n !== u)
                  throw new Error(`input tensor[${r}] check failed: expected type '${n}' but got ${u}`);
              }
            }
            validateInputTensorDims(_, h, r) {
              for (let n = 0; n < h.length; n++) {
                const u = _[n], p = h[n].dims;
                if (!this.compareTensorDims(u, p, r))
                  throw new Error(`input tensor[${n}] check failed: expected shape '[${u.join(",")}]' but got [${p.join(",")}]`);
              }
            }
            compareTensorDims(_, h, r) {
              if (_.length !== h.length)
                return false;
              for (let n = 0; n < _.length; ++n)
                if (_[n] !== h[n] && (!r || _[n] !== 0))
                  return false;
              return true;
            }
            createOutput(_) {
              const h = this._model.graph.getOutputNames();
              if (_.length !== h.length)
                throw new Error("expected number of outputs do not match number of generated outputs");
              const r = /* @__PURE__ */ new Map();
              for (let n = 0; n < h.length; ++n)
                r.set(h[n], _[n]);
              return r;
            }
            initializeOps(_) {
              const h = _.getNodes();
              this._ops = new Array(h.length);
              for (let r = 0; r < h.length; r++)
                this._ops[r] = this.sessionHandler.resolve(h[r], this._model.opsets, _);
            }
          };
        },
        9162: function(i, e, t) {
          var s = this && this.__importDefault || function(M) {
            return M && M.__esModule ? M : {
              default: M
            };
          };
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.Tensor = void 0;
          const l = t(3442), f = s(t(3720)), d = t(1446), w = t(9395), g = t(2517);
          var _ = w.onnxruntime.experimental.fbs;
          class h {
            get data() {
              if (this.cache === void 0) {
                const P = this.dataProvider(this.dataId);
                if (P.length !== this.size)
                  throw new Error("Length of data provided by the Data Provider is inconsistent with the dims of this Tensor.");
                this.cache = P;
              }
              return this.cache;
            }
            get stringData() {
              if (this.type !== "string")
                throw new TypeError("data type is not string");
              return this.data;
            }
            get integerData() {
              switch (this.type) {
                case "uint8":
                case "int8":
                case "uint16":
                case "int16":
                case "int32":
                case "uint32":
                case "bool":
                  return this.data;
                default:
                  throw new TypeError("data type is not integer (uint8, int8, uint16, int16, int32, uint32, bool)");
              }
            }
            get floatData() {
              switch (this.type) {
                case "float32":
                case "float64":
                  return this.data;
                default:
                  throw new TypeError("data type is not float (float32, float64)");
              }
            }
            get numberData() {
              if (this.type !== "string")
                return this.data;
              throw new TypeError("type cannot be non-number (string)");
            }
            get(P) {
              return this.data[g.ShapeUtil.indicesToOffset(P, this.strides)];
            }
            set(P, E) {
              this.data[g.ShapeUtil.indicesToOffset(P, this.strides)] = E;
            }
            async getData() {
              return this.cache === void 0 && (this.cache = await this.asyncDataProvider(this.dataId)), this.cache;
            }
            get strides() {
              return this._strides || (this._strides = g.ShapeUtil.computeStrides(this.dims)), this._strides;
            }
            constructor(P, E, k, $, A, C = l.Guid.create()) {
              this.dims = P, this.type = E, this.dataProvider = k, this.asyncDataProvider = $, this.cache = A, this.dataId = C, this.size = g.ShapeUtil.validateDimsAndCalcSize(P);
              const F = this.size, D = k === void 0 && $ === void 0 && A === void 0;
              if (A !== void 0 && A.length !== F)
                throw new RangeError("Input dims doesn't match data length.");
              if (E === "string") {
                if (!(A === void 0 || Array.isArray(A) && A.every((N) => typeof N == "string")))
                  throw new TypeError("cache should be a string array");
                D && (this.cache = new Array(F));
              } else {
                if (A !== void 0) {
                  const N = n(E);
                  if (!(A instanceof N))
                    throw new TypeError(`cache should be type ${N.name}`);
                }
                if (D) {
                  const N = new ArrayBuffer(F * function(R) {
                    switch (R) {
                      case "bool":
                      case "int8":
                      case "uint8":
                        return 1;
                      case "int16":
                      case "uint16":
                        return 2;
                      case "int32":
                      case "uint32":
                      case "float32":
                        return 4;
                      case "float64":
                        return 8;
                      default:
                        throw new Error(`cannot calculate sizeof() on type ${R}`);
                    }
                  }(E));
                  this.cache = function(R, j) {
                    return new (n(j))(R);
                  }(N, E);
                }
              }
            }
            static fromProto(P) {
              if (!P)
                throw new Error("cannot construct Value from an empty tensor");
              const E = g.ProtoUtil.tensorDataTypeFromProto(P.dataType), k = g.ProtoUtil.tensorDimsFromProto(P.dims), $ = new h(k, E);
              if (E === "string")
                P.stringData.forEach((A, C) => {
                  $.data[C] = (0, g.decodeUtf8String)(A);
                });
              else if (P.rawData && typeof P.rawData.byteLength == "number" && P.rawData.byteLength > 0) {
                const A = $.data, C = new DataView(P.rawData.buffer, P.rawData.byteOffset, P.rawData.byteLength), F = r(P.dataType), D = P.rawData.byteLength / F;
                if (P.rawData.byteLength % F != 0)
                  throw new Error("invalid buffer length");
                if (A.length !== D)
                  throw new Error("buffer length mismatch");
                for (let N = 0; N < D; N++) {
                  const R = p(C, P.dataType, N * F);
                  A[N] = R;
                }
              } else {
                let A;
                switch (P.dataType) {
                  case d.onnx.TensorProto.DataType.FLOAT:
                    A = P.floatData;
                    break;
                  case d.onnx.TensorProto.DataType.INT32:
                  case d.onnx.TensorProto.DataType.INT16:
                  case d.onnx.TensorProto.DataType.UINT16:
                  case d.onnx.TensorProto.DataType.INT8:
                  case d.onnx.TensorProto.DataType.UINT8:
                  case d.onnx.TensorProto.DataType.BOOL:
                    A = P.int32Data;
                    break;
                  case d.onnx.TensorProto.DataType.INT64:
                    A = P.int64Data;
                    break;
                  case d.onnx.TensorProto.DataType.DOUBLE:
                    A = P.doubleData;
                    break;
                  case d.onnx.TensorProto.DataType.UINT32:
                  case d.onnx.TensorProto.DataType.UINT64:
                    A = P.uint64Data;
                    break;
                  default:
                    throw new Error("unspecific error");
                }
                if (A == null)
                  throw new Error("failed to populate data from a tensorproto value");
                const C = $.data;
                if (C.length !== A.length)
                  throw new Error("array length mismatch");
                for (let F = 0; F < A.length; F++) {
                  const D = A[F];
                  f.default.isLong(D) ? C[F] = u(D, P.dataType) : C[F] = D;
                }
              }
              return $;
            }
            static fromData(P, E, k) {
              return new h(E, k, void 0, void 0, P);
            }
            static fromOrtTensor(P) {
              if (!P)
                throw new Error("cannot construct Value from an empty tensor");
              const E = g.ProtoUtil.tensorDimsFromORTFormat(P), k = g.ProtoUtil.tensorDataTypeFromProto(P.dataType()), $ = new h(E, k);
              if (k === "string")
                for (let A = 0; A < P.stringDataLength(); A++)
                  $.data[A] = P.stringData(A);
              else if (P.rawDataArray() && typeof P.rawDataLength() == "number" && P.rawDataLength() > 0) {
                const A = $.data, C = new DataView(P.rawDataArray().buffer, P.rawDataArray().byteOffset, P.rawDataLength()), F = r(P.dataType()), D = P.rawDataLength() / F;
                if (P.rawDataLength() % F != 0)
                  throw new Error("invalid buffer length");
                if (A.length !== D)
                  throw new Error("buffer length mismatch");
                for (let N = 0; N < D; N++) {
                  const R = p(C, P.dataType(), N * F);
                  A[N] = R;
                }
              }
              return $;
            }
          }
          function r(M) {
            switch (M) {
              case d.onnx.TensorProto.DataType.UINT8:
              case d.onnx.TensorProto.DataType.INT8:
              case d.onnx.TensorProto.DataType.BOOL:
                return 1;
              case d.onnx.TensorProto.DataType.UINT16:
              case d.onnx.TensorProto.DataType.INT16:
                return 2;
              case d.onnx.TensorProto.DataType.FLOAT:
              case d.onnx.TensorProto.DataType.INT32:
              case d.onnx.TensorProto.DataType.UINT32:
                return 4;
              case d.onnx.TensorProto.DataType.INT64:
              case d.onnx.TensorProto.DataType.DOUBLE:
              case d.onnx.TensorProto.DataType.UINT64:
                return 8;
              default:
                throw new Error(`cannot calculate sizeof() on type ${d.onnx.TensorProto.DataType[M]}`);
            }
          }
          function n(M) {
            switch (M) {
              case "bool":
              case "uint8":
                return Uint8Array;
              case "int8":
                return Int8Array;
              case "int16":
                return Int16Array;
              case "uint16":
                return Uint16Array;
              case "int32":
                return Int32Array;
              case "uint32":
                return Uint32Array;
              case "float32":
                return Float32Array;
              case "float64":
                return Float64Array;
              default:
                throw new Error("unspecified error");
            }
          }
          function u(M, P) {
            if (P === d.onnx.TensorProto.DataType.INT64 || P === _.TensorDataType.INT64) {
              if (M.greaterThanOrEqual(2147483648) || M.lessThan(-2147483648))
                throw new TypeError("int64 is not supported");
            } else {
              if (P !== d.onnx.TensorProto.DataType.UINT32 && P !== _.TensorDataType.UINT32 && P !== d.onnx.TensorProto.DataType.UINT64 && P !== _.TensorDataType.UINT64)
                throw new TypeError(`not a LONG type: ${d.onnx.TensorProto.DataType[P]}`);
              if (M.greaterThanOrEqual(4294967296) || M.lessThan(0))
                throw new TypeError("uint64 is not supported");
            }
            return M.toNumber();
          }
          function p(M, P, E) {
            switch (P) {
              case d.onnx.TensorProto.DataType.BOOL:
              case d.onnx.TensorProto.DataType.UINT8:
                return M.getUint8(E);
              case d.onnx.TensorProto.DataType.INT8:
                return M.getInt8(E);
              case d.onnx.TensorProto.DataType.UINT16:
                return M.getUint16(E, true);
              case d.onnx.TensorProto.DataType.INT16:
                return M.getInt16(E, true);
              case d.onnx.TensorProto.DataType.FLOAT:
                return M.getFloat32(E, true);
              case d.onnx.TensorProto.DataType.INT32:
                return M.getInt32(E, true);
              case d.onnx.TensorProto.DataType.UINT32:
                return M.getUint32(E, true);
              case d.onnx.TensorProto.DataType.INT64:
                return u(f.default.fromBits(M.getUint32(E, true), M.getUint32(E + 4, true), false), P);
              case d.onnx.TensorProto.DataType.DOUBLE:
                return M.getFloat64(E, true);
              case d.onnx.TensorProto.DataType.UINT64:
                return u(f.default.fromBits(M.getUint32(E, true), M.getUint32(E + 4, true), true), P);
              default:
                throw new Error(`cannot read from DataView for type ${d.onnx.TensorProto.DataType[P]}`);
            }
          }
          e.Tensor = h;
        },
        2517: function(i, e, t) {
          var s = this && this.__importDefault || function(P) {
            return P && P.__esModule ? P : {
              default: P
            };
          };
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.decodeUtf8String = e.MAX_CLIP = e.MIN_CLIP = e.PoolConvUtil = e.ReduceUtil = e.SplitUtil = e.MathUtil = e.ShapeUtil = e.LongUtil = e.ProtoUtil = e.GemmUtil = e.arrayCopyHelper = e.BroadcastUtil = e.MatMulUtil = e.ArrayUtil = e.assert = e.checkInputsShape = void 0;
          const l = t(5686), f = s(t(3720)), d = t(1446), w = t(9162);
          e.checkInputsShape = function(P, ...E) {
            if (!P || P.length !== E.length)
              return false;
            for (let k = 0; k < P.length; k++)
              if (!P[k].dims || P[k].dims.length !== E[k])
                return false;
            return true;
          }, e.assert = function(P, E) {
            if (!P)
              throw new Error(typeof E == "string" ? E : E());
          }, e.ArrayUtil = class {
            static arraysEqual(P, E) {
              if (P.length !== E.length)
                return false;
              for (let k = 0; k < P.length; k++)
                if (P[k] !== E[k])
                  return false;
              return true;
            }
          };
          class g {
            static preprocessInputShapes(E, k) {
              return [
                E.length === 1 ? [
                  1,
                  E[0]
                ] : E,
                k.length === 1 ? [
                  k[0],
                  1
                ] : k
              ];
            }
            static postprocessOutputShape(E, k, $) {
              k === 1 && E.splice(E.length - 2, 1), $ === 1 && E.pop();
            }
            static calcMatMulShape(E, k) {
              return E[1] !== k[0] ? void 0 : [
                E[0],
                k[1]
              ];
            }
          }
          e.MatMulUtil = g;
          class _ {
            static calcShape(E, k, $ = false) {
              const A = E.length, C = k.length;
              if (A === 0)
                return k;
              if (C === 0)
                return E;
              const F = Math.max(E.length, k.length), D = new Array(F);
              if ($) {
                if (A < 2 || C < 2)
                  return;
                const N = g.calcMatMulShape([
                  E[A - 2],
                  E[A - 1]
                ], [
                  k[C - 2],
                  k[C - 1]
                ]);
                if (N === void 0)
                  return;
                [D[F - 2], D[F - 1]] = N;
              }
              for (let N = $ ? 3 : 1; N <= F; N++) {
                const R = A - N < 0 ? 1 : E[A - N], j = C - N < 0 ? 1 : k[C - N];
                if (R !== j && R > 1 && j > 1)
                  return;
                D[F - N] = Math.max(R, j);
              }
              return D;
            }
            static index(E, k) {
              const $ = new Array(k.length);
              return _.fillIndex(E, k, $), $;
            }
            static fillIndex(E, k, $) {
              const A = E.length - k.length;
              for (let C = 0; C < k.length; C++)
                $[C] = E[A + C] % k[C];
            }
            static calc(E, k, $, A, C) {
              const F = _.calcShape(E.dims, k.dims);
              if (F) {
                if (A && !n.areEqual(F, E.dims))
                  return;
                const D = n.size(F), N = A ? E : new w.Tensor(F, C || E.type);
                if (F.length === 0)
                  N.set([], $(E.get([]), k.get([])));
                else {
                  const R = new Array(F.length), j = new Array(E.dims.length), Z = new Array(k.dims.length);
                  let te, J = 0, G = 0, H = false, U = false;
                  E.dims.length === 0 && (J = E.get([]), H = true), k.dims.length === 0 && (G = k.get([]), U = true);
                  for (let Q = 0; Q < D; Q++) {
                    te = Q;
                    for (let he = F.length - 1; he >= 0; he--)
                      R[he] = te % F[he], te = Math.floor(te / F[he]);
                    H || (_.fillIndex(R, E.dims, j), J = E.get(j)), U || (_.fillIndex(R, k.dims, Z), G = k.get(Z)), N.set(R, $(J, G));
                  }
                }
                return N;
              }
            }
            static isValidBroadcast(E, k) {
              const $ = E.length, A = k.length;
              if ($ > A)
                return false;
              for (let C = 1; C <= $; C++)
                if (E[$ - C] !== 1 && E[$ - C] !== k[A - C])
                  return false;
              return true;
            }
            static getBroadcastDims(E, k) {
              const $ = E.length, A = [];
              for (let C = 0; C < $; C++) {
                const F = $ - 1 - C, D = E[F] || 1;
                (k[k.length - 1 - C] || 1) > 1 && D === 1 && A.unshift(F);
              }
              return A;
            }
          }
          e.BroadcastUtil = _, e.arrayCopyHelper = function(P, E, k, $, A) {
            if ($ < 0 || $ >= E.length)
              throw new Error("sourceIndex out of bounds");
            if (k < 0 || k >= P.length)
              throw new Error("targetIndex out of bounds");
            if ($ + A > E.length)
              throw new Error("source indices to be copied are outside bounds");
            if (k + A > P.length)
              throw new Error("target array is too small to hold result");
            for (let C = 0; C < A; C++)
              P[k + C] = E[$ + C];
          }, e.GemmUtil = class {
            static getShapeOfGemmResult(P, E, k, $, A) {
              if (P.length !== 2 || k.length !== 2)
                throw new Error("shape need to be of size 2");
              let C, F, D;
              E ? (C = P[1], F = P[0]) : (C = P[0], F = P[1]);
              let N = -1;
              if ($ ? (D = k[0], N = 1) : (D = k[1], N = 0), k[N] !== F)
                throw new Error("dimension mismatch");
              if (C <= 0 || D <= 0 || F <= 0)
                throw new Error("invalid shape specified");
              if (A && !_.isValidBroadcast(A, [
                C,
                D
              ]))
                throw new Error("gemm: invalid bias shape for broadcast");
              return [
                C,
                D,
                F
              ];
            }
          };
          class h {
            static tensorDataTypeFromProto(E) {
              switch (E) {
                case d.onnx.TensorProto.DataType.INT8:
                  return "int8";
                case d.onnx.TensorProto.DataType.UINT8:
                  return "uint8";
                case d.onnx.TensorProto.DataType.BOOL:
                  return "bool";
                case d.onnx.TensorProto.DataType.INT16:
                  return "int16";
                case d.onnx.TensorProto.DataType.UINT16:
                  return "uint16";
                case d.onnx.TensorProto.DataType.INT32:
                  return "int32";
                case d.onnx.TensorProto.DataType.UINT32:
                  return "uint32";
                case d.onnx.TensorProto.DataType.FLOAT:
                  return "float32";
                case d.onnx.TensorProto.DataType.DOUBLE:
                  return "float64";
                case d.onnx.TensorProto.DataType.STRING:
                  return "string";
                case d.onnx.TensorProto.DataType.INT64:
                  return "int32";
                case d.onnx.TensorProto.DataType.UINT64:
                  return "uint32";
                default:
                  throw new Error(`unsupported data type: ${d.onnx.TensorProto.DataType[E]}`);
              }
            }
            static tensorDataTypeStringToEnum(E) {
              switch (E) {
                case "int8":
                  return d.onnx.TensorProto.DataType.INT8;
                case "uint8":
                  return d.onnx.TensorProto.DataType.UINT8;
                case "bool":
                  return d.onnx.TensorProto.DataType.BOOL;
                case "int16":
                  return d.onnx.TensorProto.DataType.INT16;
                case "uint16":
                  return d.onnx.TensorProto.DataType.UINT16;
                case "int32":
                  return d.onnx.TensorProto.DataType.INT32;
                case "uint32":
                  return d.onnx.TensorProto.DataType.UINT32;
                case "float32":
                  return d.onnx.TensorProto.DataType.FLOAT;
                case "float64":
                  return d.onnx.TensorProto.DataType.DOUBLE;
                case "string":
                  return d.onnx.TensorProto.DataType.STRING;
                case "int64":
                  return d.onnx.TensorProto.DataType.INT64;
                case "uint64":
                  return d.onnx.TensorProto.DataType.UINT64;
                default:
                  throw new Error(`unsupported data type: ${E}`);
              }
            }
            static tensorDimsFromProto(E) {
              return E.map((k) => f.default.isLong(k) ? k.toNumber() : k);
            }
            static tensorValueTypeFromProto(E) {
              return {
                tensorType: h.tensorDataTypeFromProto(E.elemType),
                shape: {
                  dims: h.tensorDimsFromProto(E.shape.dim.map((k) => k.dimValue))
                }
              };
            }
            static tensorDimsFromORTFormat(E) {
              const k = [];
              for (let $ = 0; $ < E.dimsLength(); $++)
                k.push(r.longToNumber(E.dims($)));
              return k;
            }
            static tensorAttributesFromORTFormat(E) {
              const k = [];
              for (let $ = 0; $ < E.attributesLength(); $++)
                k.push(E.attributes($));
              return k;
            }
          }
          e.ProtoUtil = h;
          class r {
            static longToNumber(E, k) {
              return f.default.isLong(E) ? E.toNumber() : E instanceof l.flatbuffers.Long ? f.default.fromValue({
                low: E.low,
                high: E.high,
                unsigned: k != null && k
              }).toNumber() : E;
            }
            static isLong(E) {
              return f.default.isLong(E) || E instanceof l.flatbuffers.Long;
            }
          }
          e.LongUtil = r;
          class n {
            static size(E) {
              return n.getSizeFromDimensionRange(E, 0, E.length);
            }
            static sizeFromDimension(E, k) {
              if (k < 0 || k > E.length)
                throw new Error(`invalid dimension of ${k} for sizeFromDimension as Tensor has ${E.length} dimensions.`);
              return n.getSizeFromDimensionRange(E, k, E.length);
            }
            static sizeToDimension(E, k) {
              if (k < 0 || k > E.length)
                throw new Error(`invalid dimension of ${k} for sizeToDimension as Tensor has ${E.length} dimensions.`);
              return n.getSizeFromDimensionRange(E, 0, k);
            }
            static getSizeFromDimensionRange(E, k, $) {
              let A = 1;
              for (let C = k; C < $; C++) {
                if (E[C] <= 0)
                  throw new Error("cannot get valid size from specified dimension range. Most likely the range contains 0 or negative values in them.");
                A *= E[C];
              }
              return A;
            }
            static computeStrides(E) {
              const k = E.length;
              if (k === 0)
                return [];
              if (k === 1)
                return [
                  1
                ];
              const $ = new Array(k);
              $[k - 1] = 1, $[k - 2] = E[k - 1];
              for (let A = k - 3; A >= 0; --A)
                $[A] = $[A + 1] * E[A + 1];
              return $;
            }
            static transpose(E) {
              return E.slice().reverse();
            }
            static indicesToOffset(E, k, $) {
              $ === void 0 && ($ = E.length);
              let A = 0;
              for (let C = 0; C < $; ++C)
                A += k[C] * E[C];
              return A;
            }
            static offsetToIndices(E, k) {
              const $ = k.length;
              if ($ === 0)
                return [];
              if ($ === 1)
                return [
                  E * k[0]
                ];
              const A = new Array(k.length);
              for (let C = 0; C < A.length - 1; ++C)
                A[C] = Math.floor(E / k[C]), E -= A[C] * k[C];
              return A[A.length - 1] = E, A;
            }
            static normalizeAxis(E, k) {
              if (E < -k && E >= k)
                throw new Error("unsupported axis for this operation.");
              return E < 0 ? E + k : E;
            }
            static normalizeAxes(E, k) {
              return E.map(($) => this.normalizeAxis($, k));
            }
            static incrementIndex(E, k, $) {
              if (k.length === 0 || E.length === 0)
                throw new Error("Index incrementing unsupported for scalar Tensor");
              if ($ === void 0)
                $ = k.length;
              else if ($ <= 0 || $ > k.length)
                throw new Error("Incorrect axis to increment on");
              for (let A = $ - 1; A >= 0 && (E[A]++, !(E[A] < k[A])); --A)
                E[A] = 0;
            }
            static calculateReshapedDims(E, k) {
              if (k.length === 0) {
                if (E.length === 0 || n.size(E) === 1)
                  return [];
                throw new Error("cannot reshape to a scalar Tensor");
              }
              const $ = k.length, A = new Array($);
              let C = -1, F = 1;
              for (let N = 0; N < $; N++) {
                if (k[N] < -1)
                  throw new Error("a dimension in shape hints cannot be less than -1");
                if (k[N] === -1) {
                  if (C !== -1)
                    throw new Error("at most one dimension in shape hints can be -1");
                  C = N;
                } else {
                  if (k[N] === 0) {
                    if (N >= E.length)
                      throw new Error("the dimension with value zero exceeds the dimension size of the input tensor");
                    A[N] = E[N];
                  } else
                    A[N] = k[N];
                  F *= A[N];
                }
              }
              const D = n.size(E);
              if (C !== -1) {
                if (D % F != 0)
                  throw new Error(`the input tensor cannot be reshaped to the requested shape. Input shape: [${E}] Output shape: [${k}]`);
                A[C] = D / F;
              } else if (F !== D)
                throw new Error("reshapedDims and originalDims don't have matching sizes");
              return A;
            }
            static sortBasedOnPerm(E, k) {
              return k ? k.map(($) => E[$]) : E.slice().reverse();
            }
            static padShape(E, k) {
              const $ = E.length;
              return E.map((A, C) => A + k[C] + k[C + $]);
            }
            static areEqual(E, k) {
              return E.length === k.length && E.every(($, A) => $ === k[A]);
            }
            static validateDimsAndCalcSize(E) {
              if (E.length > 6)
                throw new TypeError("Only rank 0 to 6 is supported for tensor shape.");
              let k = 1;
              for (const $ of E) {
                if (!Number.isInteger($))
                  throw new TypeError(`Invalid shape: ${$} is not an integer`);
                if ($ < 0 || $ > 2147483647)
                  throw new TypeError(`Invalid shape: length ${$} is not allowed`);
                k *= $;
              }
              return k;
            }
            static flattenShape(E, k) {
              k < 0 && (k += E.length);
              const $ = E.reduce((C, F) => C * F, 1), A = E.slice(k).reduce((C, F) => C * F, 1);
              return [
                $ / A,
                A
              ];
            }
            static squeezeShape(E, k) {
              const $ = new Array();
              k = n.normalizeAxes(k, E.length);
              for (let A = 0; A < E.length; A++) {
                const C = k.indexOf(A) >= 0;
                if (C && E[A] !== 1)
                  throw new Error("squeeze an axis of size different than 1");
                (k.length === 0 && E[A] > 1 || k.length > 0 && !C) && $.push(E[A]);
              }
              return $;
            }
            static unsqueezeShape(E, k) {
              const $ = new Array(E.length + k.length);
              $.fill(0);
              for (let C = 0; C < k.length; C++) {
                const F = n.normalizeAxis(k[C], $.length);
                if (F >= $.length)
                  throw new Error("'axes' has an out of range axis");
                if ($[F] !== 0)
                  throw new Error("'axes' has a duplicate axis");
                $[F] = 1;
              }
              let A = 0;
              for (let C = 0; C < $.length; C++)
                $[C] === 0 && ($[C] = E[A++]);
              if (A !== E.length)
                throw new Error("the unsqueezed dimension could not be established");
              return $;
            }
          }
          e.ShapeUtil = n, e.MathUtil = class {
            static sqr(P, E, k, $, A) {
              if ($ < 0 || $ >= E.length)
                throw new Error("sourceIndex out of bounds");
              if (k < 0 || k >= P.length)
                throw new Error("targetIndex out of bounds");
              if ($ + A > E.length)
                throw new Error("source indices to be copied are outside bounds");
              if (k + A > P.length)
                throw new Error("target array is too small to hold result");
              for (let C = 0; C < A; C++)
                P[k + C] += Math.pow(E[$ + C], 2);
            }
            static axpy(P, E, k, $, A, C) {
              if ($ < 0 || $ >= E.length)
                throw new Error("sourceIndex out of bounds");
              if (k < 0 || k >= P.length)
                throw new Error("targetIndex out of bounds");
              if ($ + A > E.length)
                throw new Error("source indices to be copied are outside bounds");
              if (k + A > P.length)
                throw new Error("target array is too small to hold result");
              for (let F = 0; F < A; F++)
                P[k + F] += C * E[$ + F];
            }
            static powx(P, E, k, $, A, C) {
              if ($ < 0 || $ >= E.length)
                throw new Error("sourceIndex out of bounds");
              if (k < 0 || k >= P.length)
                throw new Error("targetIndex out of bounds");
              if ($ + A > E.length)
                throw new Error("source indices to be copied are outside bounds");
              if (k + A > P.length)
                throw new Error("target array is too small to hold result");
              for (let F = 0; F < A; F++)
                P[k + F] = Math.pow(E[$ + F], C);
            }
            static mul(P, E, k, $, A) {
              if ($ < 0 || $ >= E.length)
                throw new Error("sourceIndex out of bounds");
              if (k < 0 || k >= P.length)
                throw new Error("targetIndex out of bounds");
              if ($ + A > E.length)
                throw new Error("source indices to be copied are outside bounds");
              if (k + A > P.length)
                throw new Error("target array is too small to hold result");
              for (let C = 0; C < A; C++)
                P[k + C] = E[$ + C] * P[k + C];
            }
          };
          class u {
            static splitShape(E, k, $, A) {
              if ($.length === 0) {
                if (!A)
                  throw new Error("need to know number of outputs when the 'split' attribute is not specified");
                u.determineSplit(E[k], A, $);
              }
              const C = [], F = [
                0
              ];
              for (let D = 0; D < $.length; ++D) {
                D !== 0 && F.push(F[D - 1] + $[D - 1]);
                const N = E.slice();
                N[k] = $[D], C.push(N);
              }
              return [
                C,
                F
              ];
            }
            static determineSplit(E, k, $) {
              if (E % k != 0)
                throw new Error("cannot split tensor to equal sized parts");
              for (let A = 0; A < k; ++A)
                $.push(E / k);
            }
          }
          e.SplitUtil = u;
          class p {
            static calcReduce(E, k, $, A, C) {
              const F = E.dims.slice(0);
              k.length === 0 && F.forEach((J, G) => k.push(G));
              const D = p.calcReduceShape(F, k, true), N = n.size(D), R = new w.Tensor(D, E.type), j = n.computeStrides(D), Z = n.computeStrides(F), te = new Array(F.length);
              for (let J = 0; J < N; J++) {
                const G = n.offsetToIndices(J, j);
                _.fillIndex(G, F, te), R.set(G, p.calcReduceByAxis(E.numberData, k, F, 0, n.indicesToOffset(te, Z), A, C));
              }
              return $ ? R : new w.Tensor(p.calcReduceShape(F, k, $), R.type, void 0, void 0, R.data, R.dataId);
            }
            static calcReduceByAxis(E, k, $, A, C, F, D) {
              let N = 0;
              if (A >= k.length)
                return F(E[C]);
              const R = k[A], j = R >= $.length ? 1 : n.size($.slice(R + 1));
              for (let Z = 0; Z < $[R]; Z++)
                N = Z === 0 ? p.calcReduceByAxis(E, k, $, A + 1, C, F, D) : D(N, p.calcReduceByAxis(E, k, $, A + 1, C, F, D)), C += j;
              return N;
            }
            static calcReduceShape(E, k, $) {
              const A = E.slice();
              for (let C = 0; C < k.length; C++)
                A[k[C]] = $ ? 1 : 0;
              return A.filter((C) => C !== 0);
            }
          }
          e.ReduceUtil = p;
          class M {
            static adjustPoolAttributes(E, k, $, A, C, F) {
              if (!E && $.length !== k.length - 2)
                throw new Error("length of specified kernel shapes should be 2 less than length of input dimensions");
              if (E)
                for (let D = 0; D < k.length - 2; D++)
                  D >= $.length ? $.push(k[D + 2]) : $[D] = k[D + 2];
              for (let D = 0; D < $.length; D++)
                if (D < A.length) {
                  if (A[D] < 0)
                    throw new Error("strides should be greater than or equal to 1");
                } else
                  A.push(1);
              for (let D = 0; D < $.length; D++)
                if (D < C.length) {
                  if (C[D] < 0)
                    throw new Error("dilations should be greater than or equal to 1");
                } else
                  C.push(1);
              for (let D = 0; D < 2 * $.length; D++)
                if (D < F.length) {
                  if (F[D] < 0)
                    throw new Error("pad should be greater than or equal to 1");
                } else
                  F.push(0);
              for (let D = 0; D < $.length; D++) {
                if ($[D] <= 0)
                  throw new Error("kernel shapes need to be greater than 0");
                if (F[D] >= $[D] || F[D + $.length] >= $[D])
                  throw new Error("pads should be smaller than kernel");
              }
            }
            static adjustPadsBasedOnAutoPad(E, k, $, A, C, F) {
              if (F) {
                if (C.length !== 2 * (E.length - 2))
                  throw new Error("length of pads should be twice the length of data dimensions");
                if (k.length !== E.length - 2)
                  throw new Error("length of strides should be the length of data dimensions");
                if (A.length !== E.length - 2)
                  throw new Error("length of kernel shapes should be the length of data dimensions");
                for (let D = 0; D < E.length - 2; D++)
                  M.adjustPadAndReturnShape(E[D + 2], k[D], $[D], A[D], C, D, D + E.length - 2, F);
              }
            }
            static computePoolOutputShape(E, k, $, A, C, F, D) {
              if (k.length <= 0)
                throw new Error("input shape must be of size greater than 0");
              const N = [
                k[0],
                k[1]
              ];
              return M.computeShapeHelper(E, k, N, $, A, C, F, D), N;
            }
            static computeConvOutputShape(E, k, $, A, C, F, D) {
              if (E.length <= 0 || k.length <= 0)
                throw new Error("invalid input tensor dims or invalid filter tensor dims");
              const N = [
                E[0],
                k[0]
              ];
              return M.computeShapeHelper(false, E, N, $, A, C, F, D), N;
            }
            static computeShapeHelper(E, k, $, A, C, F, D, N) {
              if (E)
                for (let R = 0; R < k.length - 2; R++)
                  $.push(1);
              else
                for (let R = 0; R < k.length - 2; R++)
                  $.push(M.adjustPadAndReturnShape(k[R + 2], A[R], C[R], F[R], D, R, R + k.length - 2, N));
            }
            static adjustPadAndReturnShape(E, k, $, A, C, F, D, N) {
              const R = $ * (A - 1) + 1;
              if (!N || N === "NOTSET")
                return Math.floor((E + C[F] + C[D] - R) / k + 1);
              switch (N) {
                case "VALID":
                  return C[F] = 0, C[D] = 0, Math.floor((E - R) / k + 1);
                case "SAME_LOWER":
                case "SAME_UPPER":
                  if ($ !== 1)
                    throw new Error("Dilation not supported for SAME_UPPER or SAME_LOWER");
                  {
                    const j = ((E + k - 1) / k - 1) * k + A - E;
                    return C[F] = Math.floor(N === "SAME_LOWER" ? (j + 1) / 2 : j / 2), C[D] = j - C[F], Math.floor((E + j - A) / k + 1);
                  }
                default:
                  throw new Error("Unsupported AutoPad type");
              }
            }
          }
          e.PoolConvUtil = M, e.MIN_CLIP = -34028234663852886e22, e.MAX_CLIP = 34028234663852886e22, e.decodeUtf8String = function(P) {
            return new TextDecoder().decode(P);
          };
        },
        7967: (i, e) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.iterateExtraOptions = void 0, e.iterateExtraOptions = (t, s, l, f) => {
            if (typeof t == "object" && t !== null) {
              if (l.has(t))
                throw new Error("Circular reference in options");
              l.add(t);
            }
            Object.entries(t).forEach(([d, w]) => {
              const g = s ? s + d : d;
              if (typeof w == "object")
                (0, e.iterateExtraOptions)(w, g + ".", l, f);
              else if (typeof w == "string" || typeof w == "number")
                f(g, w.toString());
              else {
                if (typeof w != "boolean")
                  throw new Error("Can't handle extra config type: " + typeof w);
                f(g, w ? "1" : "0");
              }
            });
          };
        },
        2157: function(i, e, t) {
          var s, l = this && this.__createBinding || (Object.create ? function(j, Z, te, J) {
            J === void 0 && (J = te);
            var G = Object.getOwnPropertyDescriptor(Z, te);
            G && !("get" in G ? !Z.__esModule : G.writable || G.configurable) || (G = {
              enumerable: true,
              get: function() {
                return Z[te];
              }
            }), Object.defineProperty(j, J, G);
          } : function(j, Z, te, J) {
            J === void 0 && (J = te), j[J] = Z[te];
          }), f = this && this.__setModuleDefault || (Object.create ? function(j, Z) {
            Object.defineProperty(j, "default", {
              enumerable: true,
              value: Z
            });
          } : function(j, Z) {
            j.default = Z;
          }), d = this && this.__importStar || function(j) {
            if (j && j.__esModule)
              return j;
            var Z = {};
            if (j != null)
              for (var te in j)
                te !== "default" && Object.prototype.hasOwnProperty.call(j, te) && l(Z, j, te);
            return f(Z, j), Z;
          };
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.endProfiling = e.run = e.releaseSession = e.createSession = e.createSessionFinalize = e.createSessionAllocate = e.initOrt = e.initWasm = void 0;
          const w = t(1670), g = d(t(349)), _ = t(6361), h = () => !!w.env.wasm.proxy && typeof document < "u";
          let r, n, u, p = false, M = false, P = false;
          const E = [], k = [], $ = [], A = [], C = [], F = [], D = () => {
            if (p || !M || P || !r)
              throw new Error("worker not ready");
          }, N = (j) => {
            switch (j.data.type) {
              case "init-wasm":
                p = false, j.data.err ? (P = true, n[1](j.data.err)) : (M = true, n[0]());
                break;
              case "init-ort":
                j.data.err ? u[1](j.data.err) : u[0]();
                break;
              case "create_allocate":
                j.data.err ? E.shift()[1](j.data.err) : E.shift()[0](j.data.out);
                break;
              case "create_finalize":
                j.data.err ? k.shift()[1](j.data.err) : k.shift()[0](j.data.out);
                break;
              case "create":
                j.data.err ? $.shift()[1](j.data.err) : $.shift()[0](j.data.out);
                break;
              case "release":
                j.data.err ? A.shift()[1](j.data.err) : A.shift()[0]();
                break;
              case "run":
                j.data.err ? C.shift()[1](j.data.err) : C.shift()[0](j.data.out);
                break;
              case "end-profiling":
                j.data.err ? F.shift()[1](j.data.err) : F.shift()[0]();
            }
          }, R = typeof document < "u" ? (s = document?.currentScript) === null || s === void 0 ? void 0 : s.src : void 0;
          e.initWasm = async () => {
            if (h()) {
              if (M)
                return;
              if (p)
                throw new Error("multiple calls to 'initWasm()' detected.");
              if (P)
                throw new Error("previous call to 'initWasm()' failed.");
              return p = true, w.env.wasm.wasmPaths === void 0 && R && R.indexOf("blob:") !== 0 && (w.env.wasm.wasmPaths = R.substr(0, +R.lastIndexOf("/") + 1)), new Promise((j, Z) => {
                r?.terminate(), r = t(9710).Z(), r.onmessage = N, n = [
                  j,
                  Z
                ];
                const te = {
                  type: "init-wasm",
                  in: w.env.wasm
                };
                r.postMessage(te);
              });
            }
            return (0, _.initializeWebAssembly)(w.env.wasm);
          }, e.initOrt = async (j, Z) => {
            if (h())
              return D(), new Promise((te, J) => {
                u = [
                  te,
                  J
                ];
                const G = {
                  type: "init-ort",
                  in: {
                    numThreads: j,
                    loggingLevel: Z
                  }
                };
                r.postMessage(G);
              });
            g.initOrt(j, Z);
          }, e.createSessionAllocate = async (j) => h() ? (D(), new Promise((Z, te) => {
            E.push([
              Z,
              te
            ]);
            const J = {
              type: "create_allocate",
              in: {
                model: j
              }
            };
            r.postMessage(J, [
              j.buffer
            ]);
          })) : g.createSessionAllocate(j), e.createSessionFinalize = async (j, Z) => h() ? (D(), new Promise((te, J) => {
            k.push([
              te,
              J
            ]);
            const G = {
              type: "create_finalize",
              in: {
                modeldata: j,
                options: Z
              }
            };
            r.postMessage(G);
          })) : g.createSessionFinalize(j, Z), e.createSession = async (j, Z) => h() ? (D(), new Promise((te, J) => {
            $.push([
              te,
              J
            ]);
            const G = {
              type: "create",
              in: {
                model: j,
                options: Z
              }
            };
            r.postMessage(G, [
              j.buffer
            ]);
          })) : g.createSession(j, Z), e.releaseSession = async (j) => {
            if (h())
              return D(), new Promise((Z, te) => {
                A.push([
                  Z,
                  te
                ]);
                const J = {
                  type: "release",
                  in: j
                };
                r.postMessage(J);
              });
            g.releaseSession(j);
          }, e.run = async (j, Z, te, J, G) => h() ? (D(), new Promise((H, U) => {
            C.push([
              H,
              U
            ]);
            const Q = {
              type: "run",
              in: {
                sessionId: j,
                inputIndices: Z,
                inputs: te,
                outputIndices: J,
                options: G
              }
            };
            r.postMessage(Q, g.extractTransferableBuffers(te));
          })) : g.run(j, Z, te, J, G), e.endProfiling = async (j) => {
            if (h())
              return D(), new Promise((Z, te) => {
                F.push([
                  Z,
                  te
                ]);
                const J = {
                  type: "end-profiling",
                  in: j
                };
                r.postMessage(J);
              });
            g.endProfiling(j);
          };
        },
        586: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.setRunOptions = void 0;
          const s = t(7967), l = t(4983), f = t(6361);
          e.setRunOptions = (d) => {
            const w = (0, f.getInstance)();
            let g = 0;
            const _ = [], h = d || {};
            try {
              if (d?.logSeverityLevel === void 0)
                h.logSeverityLevel = 2;
              else if (typeof d.logSeverityLevel != "number" || !Number.isInteger(d.logSeverityLevel) || d.logSeverityLevel < 0 || d.logSeverityLevel > 4)
                throw new Error(`log serverity level is not valid: ${d.logSeverityLevel}`);
              if (d?.logVerbosityLevel === void 0)
                h.logVerbosityLevel = 0;
              else if (typeof d.logVerbosityLevel != "number" || !Number.isInteger(d.logVerbosityLevel))
                throw new Error(`log verbosity level is not valid: ${d.logVerbosityLevel}`);
              d?.terminate === void 0 && (h.terminate = false);
              let r = 0;
              if (d?.tag !== void 0 && (r = (0, l.allocWasmString)(d.tag, _)), g = w._OrtCreateRunOptions(h.logSeverityLevel, h.logVerbosityLevel, !!h.terminate, r), g === 0)
                throw new Error("Can't create run options");
              return d?.extra !== void 0 && (0, s.iterateExtraOptions)(d.extra, "", /* @__PURE__ */ new WeakSet(), (n, u) => {
                const p = (0, l.allocWasmString)(n, _), M = (0, l.allocWasmString)(u, _);
                if (w._OrtAddRunConfigEntry(g, p, M) !== 0)
                  throw new Error(`Can't set a run config entry: ${n} - ${u}`);
              }), [
                g,
                _
              ];
            } catch (r) {
              throw g !== 0 && w._OrtReleaseRunOptions(g), _.forEach(w._free), r;
            }
          };
        },
        2306: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.OnnxruntimeWebAssemblySessionHandler = void 0;
          const s = t(2806), l = t(1670), f = t(2850), d = t(2157);
          let w;
          e.OnnxruntimeWebAssemblySessionHandler = class {
            async createSessionAllocate(g) {
              const _ = await fetch(g), h = await _.arrayBuffer();
              return (0, d.createSessionAllocate)(new Uint8Array(h));
            }
            async loadModel(g, _) {
              if (w || (await (0, d.initOrt)(l.env.wasm.numThreads, ((h) => {
                switch (h) {
                  case "verbose":
                    return 0;
                  case "info":
                    return 1;
                  case "warning":
                    return 2;
                  case "error":
                    return 3;
                  case "fatal":
                    return 4;
                  default:
                    throw new Error(`unsupported logging level: ${h}`);
                }
              })(l.env.logLevel)), w = true), typeof g == "string")
                if (typeof fetch > "u") {
                  const h = await (0, f.promisify)(s.readFile)(g);
                  [this.sessionId, this.inputNames, this.outputNames] = await (0, d.createSession)(h, _);
                } else {
                  const h = await this.createSessionAllocate(g);
                  [this.sessionId, this.inputNames, this.outputNames] = await (0, d.createSessionFinalize)(h, _);
                }
              else
                [this.sessionId, this.inputNames, this.outputNames] = await (0, d.createSession)(g, _);
            }
            async dispose() {
              return (0, d.releaseSession)(this.sessionId);
            }
            async run(g, _, h) {
              const r = [], n = [];
              Object.entries(g).forEach((P) => {
                const E = P[0], k = P[1], $ = this.inputNames.indexOf(E);
                if ($ === -1)
                  throw new Error(`invalid input '${E}'`);
                r.push(k), n.push($);
              });
              const u = [];
              Object.entries(_).forEach((P) => {
                const E = P[0], k = this.outputNames.indexOf(E);
                if (k === -1)
                  throw new Error(`invalid output '${E}'`);
                u.push(k);
              });
              const p = await (0, d.run)(this.sessionId, n, r.map((P) => [
                P.type,
                P.dims,
                P.data
              ]), u, h), M = {};
              for (let P = 0; P < p.length; P++)
                M[this.outputNames[u[P]]] = new l.Tensor(p[P][0], p[P][2], p[P][1]);
              return M;
            }
            startProfiling() {
            }
            endProfiling() {
              (0, d.endProfiling)(this.sessionId);
            }
          };
        },
        4919: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.setSessionOptions = void 0;
          const s = t(7967), l = t(4983), f = t(6361);
          e.setSessionOptions = (d) => {
            const w = (0, f.getInstance)();
            let g = 0;
            const _ = [], h = d || {};
            ((r) => {
              r.extra || (r.extra = {}), r.extra.session || (r.extra.session = {});
              const n = r.extra.session;
              n.use_ort_model_bytes_directly || (n.use_ort_model_bytes_directly = "1");
            })(h);
            try {
              d?.graphOptimizationLevel === void 0 && (h.graphOptimizationLevel = "all");
              const r = ((p) => {
                switch (p) {
                  case "disabled":
                    return 0;
                  case "basic":
                    return 1;
                  case "extended":
                    return 2;
                  case "all":
                    return 99;
                  default:
                    throw new Error(`unsupported graph optimization level: ${p}`);
                }
              })(h.graphOptimizationLevel);
              d?.enableCpuMemArena === void 0 && (h.enableCpuMemArena = true), d?.enableMemPattern === void 0 && (h.enableMemPattern = true), d?.executionMode === void 0 && (h.executionMode = "sequential");
              const n = ((p) => {
                switch (p) {
                  case "sequential":
                    return 0;
                  case "parallel":
                    return 1;
                  default:
                    throw new Error(`unsupported execution mode: ${p}`);
                }
              })(h.executionMode);
              let u = 0;
              if (d?.logId !== void 0 && (u = (0, l.allocWasmString)(d.logId, _)), d?.logSeverityLevel === void 0)
                h.logSeverityLevel = 2;
              else if (typeof d.logSeverityLevel != "number" || !Number.isInteger(d.logSeverityLevel) || d.logSeverityLevel < 0 || d.logSeverityLevel > 4)
                throw new Error(`log serverity level is not valid: ${d.logSeverityLevel}`);
              if (d?.logVerbosityLevel === void 0)
                h.logVerbosityLevel = 0;
              else if (typeof d.logVerbosityLevel != "number" || !Number.isInteger(d.logVerbosityLevel))
                throw new Error(`log verbosity level is not valid: ${d.logVerbosityLevel}`);
              if (d?.enableProfiling === void 0 && (h.enableProfiling = false), g = w._OrtCreateSessionOptions(r, !!h.enableCpuMemArena, !!h.enableMemPattern, n, !!h.enableProfiling, 0, u, h.logSeverityLevel, h.logVerbosityLevel), g === 0)
                throw new Error("Can't create session options");
              return d?.executionProviders && ((p, M, P) => {
                for (const E of M) {
                  let k = typeof E == "string" ? E : E.name;
                  switch (k) {
                    case "xnnpack":
                      k = "XNNPACK";
                      break;
                    case "wasm":
                    case "cpu":
                      continue;
                    default:
                      throw new Error(`not supported EP: ${k}`);
                  }
                  const $ = (0, l.allocWasmString)(k, P);
                  if ((0, f.getInstance)()._OrtAppendExecutionProvider(p, $) !== 0)
                    throw new Error(`Can't append execution provider: ${k}`);
                }
              })(g, d.executionProviders, _), d?.extra !== void 0 && (0, s.iterateExtraOptions)(d.extra, "", /* @__PURE__ */ new WeakSet(), (p, M) => {
                const P = (0, l.allocWasmString)(p, _), E = (0, l.allocWasmString)(M, _);
                if (w._OrtAddSessionConfigEntry(g, P, E) !== 0)
                  throw new Error(`Can't set a session config entry: ${p} - ${M}`);
              }), [
                g,
                _
              ];
            } catch (r) {
              throw g !== 0 && w._OrtReleaseSessionOptions(g), _.forEach(w._free), r;
            }
          };
        },
        4983: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.allocWasmString = void 0;
          const s = t(6361);
          e.allocWasmString = (l, f) => {
            const d = (0, s.getInstance)(), w = d.lengthBytesUTF8(l) + 1, g = d._malloc(w);
            return d.stringToUTF8(l, g, w), f.push(g), g;
          };
        },
        349: (i, e, t) => {
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.extractTransferableBuffers = e.endProfiling = e.run = e.releaseSession = e.createSession = e.createSessionFinalize = e.createSessionAllocate = e.initOrt = void 0;
          const s = t(586), l = t(4919), f = t(4983), d = t(6361);
          e.initOrt = (r, n) => {
            const u = (0, d.getInstance)()._OrtInit(r, n);
            if (u !== 0)
              throw new Error(`Can't initialize onnxruntime. error code = ${u}`);
          };
          const w = /* @__PURE__ */ new Map();
          e.createSessionAllocate = (r) => {
            const n = (0, d.getInstance)(), u = n._malloc(r.byteLength);
            return n.HEAPU8.set(r, u), [
              u,
              r.byteLength
            ];
          }, e.createSessionFinalize = (r, n) => {
            const u = (0, d.getInstance)();
            let p = 0, M = 0, P = [];
            try {
              if ([M, P] = (0, l.setSessionOptions)(n), p = u._OrtCreateSession(r[0], r[1], M), p === 0)
                throw new Error("Can't create a session");
            } finally {
              u._free(r[0]), u._OrtReleaseSessionOptions(M), P.forEach(u._free);
            }
            const E = u._OrtGetInputCount(p), k = u._OrtGetOutputCount(p), $ = [], A = [], C = [], F = [];
            for (let D = 0; D < E; D++) {
              const N = u._OrtGetInputName(p, D);
              if (N === 0)
                throw new Error("Can't get an input name");
              A.push(N), $.push(u.UTF8ToString(N));
            }
            for (let D = 0; D < k; D++) {
              const N = u._OrtGetOutputName(p, D);
              if (N === 0)
                throw new Error("Can't get an output name");
              F.push(N), C.push(u.UTF8ToString(N));
            }
            return w.set(p, [
              p,
              A,
              F
            ]), [
              p,
              $,
              C
            ];
          }, e.createSession = (r, n) => {
            const u = (0, e.createSessionAllocate)(r);
            return (0, e.createSessionFinalize)(u, n);
          }, e.releaseSession = (r) => {
            const n = (0, d.getInstance)(), u = w.get(r);
            if (!u)
              throw new Error("invalid session id");
            const p = u[0], M = u[1], P = u[2];
            M.forEach(n._OrtFree), P.forEach(n._OrtFree), n._OrtReleaseSession(p), w.delete(r);
          };
          const g = (r) => {
            switch (r) {
              case "int8":
                return 3;
              case "uint8":
                return 2;
              case "bool":
                return 9;
              case "int16":
                return 5;
              case "uint16":
                return 4;
              case "int32":
                return 6;
              case "uint32":
                return 12;
              case "float32":
                return 1;
              case "float64":
                return 11;
              case "string":
                return 8;
              case "int64":
                return 7;
              case "uint64":
                return 13;
              default:
                throw new Error(`unsupported data type: ${r}`);
            }
          }, _ = (r) => {
            switch (r) {
              case 3:
                return "int8";
              case 2:
                return "uint8";
              case 9:
                return "bool";
              case 5:
                return "int16";
              case 4:
                return "uint16";
              case 6:
                return "int32";
              case 12:
                return "uint32";
              case 1:
                return "float32";
              case 11:
                return "float64";
              case 8:
                return "string";
              case 7:
                return "int64";
              case 13:
                return "uint64";
              default:
                throw new Error(`unsupported data type: ${r}`);
            }
          }, h = (r) => {
            switch (r) {
              case "float32":
                return Float32Array;
              case "uint8":
              case "bool":
                return Uint8Array;
              case "int8":
                return Int8Array;
              case "uint16":
                return Uint16Array;
              case "int16":
                return Int16Array;
              case "int32":
                return Int32Array;
              case "float64":
                return Float64Array;
              case "uint32":
                return Uint32Array;
              case "int64":
                return BigInt64Array;
              case "uint64":
                return BigUint64Array;
              default:
                throw new Error(`unsupported type: ${r}`);
            }
          };
          e.run = (r, n, u, p, M) => {
            const P = (0, d.getInstance)(), E = w.get(r);
            if (!E)
              throw new Error("invalid session id");
            const k = E[0], $ = E[1], A = E[2], C = n.length, F = p.length;
            let D = 0, N = [];
            const R = [], j = [];
            try {
              [D, N] = (0, s.setRunOptions)(M);
              for (let U = 0; U < C; U++) {
                const Q = u[U][0], he = u[U][1], fe = u[U][2];
                let Me, pe;
                if (Array.isArray(fe)) {
                  pe = 4 * fe.length, Me = P._malloc(pe), j.push(Me);
                  let Ee = Me / 4;
                  for (let Oe = 0; Oe < fe.length; Oe++) {
                    if (typeof fe[Oe] != "string")
                      throw new TypeError(`tensor data at index ${Oe} is not a string`);
                    P.HEAPU32[Ee++] = (0, f.allocWasmString)(fe[Oe], j);
                  }
                } else
                  pe = fe.byteLength, Me = P._malloc(pe), j.push(Me), P.HEAPU8.set(new Uint8Array(fe.buffer, fe.byteOffset, pe), Me);
                const oe = P.stackSave(), be = P.stackAlloc(4 * he.length);
                try {
                  let Ee = be / 4;
                  he.forEach((Ye) => P.HEAP32[Ee++] = Ye);
                  const Oe = P._OrtCreateTensor(g(Q), Me, pe, be, he.length);
                  if (Oe === 0)
                    throw new Error("Can't create a tensor");
                  R.push(Oe);
                } finally {
                  P.stackRestore(oe);
                }
              }
              const Z = P.stackSave(), te = P.stackAlloc(4 * C), J = P.stackAlloc(4 * C), G = P.stackAlloc(4 * F), H = P.stackAlloc(4 * F);
              try {
                let U = te / 4, Q = J / 4, he = G / 4, fe = H / 4;
                for (let oe = 0; oe < C; oe++)
                  P.HEAPU32[U++] = R[oe], P.HEAPU32[Q++] = $[n[oe]];
                for (let oe = 0; oe < F; oe++)
                  P.HEAPU32[he++] = 0, P.HEAPU32[fe++] = A[p[oe]];
                let Me = P._OrtRun(k, J, te, C, H, F, G, D);
                const pe = [];
                if (Me === 0)
                  for (let oe = 0; oe < F; oe++) {
                    const be = P.HEAPU32[G / 4 + oe], Ee = P.stackSave(), Oe = P.stackAlloc(16);
                    let Ye, We = 0;
                    try {
                      if (Me = P._OrtGetTensorData(be, Oe, Oe + 4, Oe + 8, Oe + 12), Me !== 0)
                        throw new Error(`Can't access output tensor data. error code = ${Me}`);
                      let ot = Oe / 4;
                      const vt = P.HEAPU32[ot++];
                      We = P.HEAPU32[ot++];
                      const qe = P.HEAPU32[ot++], _e = P.HEAPU32[ot++], le = [];
                      for (let Be = 0; Be < _e; Be++)
                        le.push(P.HEAPU32[qe / 4 + Be]);
                      P._OrtFree(qe);
                      const De = le.length === 0 ? 1 : le.reduce((Be, Ze) => Be * Ze);
                      if (Ye = _(vt), Ye === "string") {
                        const Be = [];
                        let Ze = We / 4;
                        for (let rt = 0; rt < De; rt++) {
                          const je = P.HEAPU32[Ze++], it = rt === De - 1 ? void 0 : P.HEAPU32[Ze] - je;
                          Be.push(P.UTF8ToString(je, it));
                        }
                        pe.push([
                          Ye,
                          le,
                          Be
                        ]);
                      } else {
                        const Be = new (h(Ye))(De);
                        new Uint8Array(Be.buffer, Be.byteOffset, Be.byteLength).set(P.HEAPU8.subarray(We, We + Be.byteLength)), pe.push([
                          Ye,
                          le,
                          Be
                        ]);
                      }
                    } finally {
                      P.stackRestore(Ee), Ye === "string" && We && P._free(We), P._OrtReleaseTensor(be);
                    }
                  }
                if (Me === 0)
                  return pe;
                throw new Error(`failed to call OrtRun(). error code = ${Me}.`);
              } finally {
                P.stackRestore(Z);
              }
            } finally {
              R.forEach(P._OrtReleaseTensor), j.forEach(P._free), P._OrtReleaseRunOptions(D), N.forEach(P._free);
            }
          }, e.endProfiling = (r) => {
            const n = (0, d.getInstance)(), u = w.get(r);
            if (!u)
              throw new Error("invalid session id");
            const p = u[0], M = n._OrtEndProfiling(p);
            if (M === 0)
              throw new Error("Can't get an profile file name");
            n._OrtFree(M);
          }, e.extractTransferableBuffers = (r) => {
            const n = [];
            for (const u of r) {
              const p = u[2];
              !Array.isArray(p) && p.buffer && n.push(p.buffer);
            }
            return n;
          };
        },
        6361: function(i, e, t) {
          var s = this && this.__createBinding || (Object.create ? function(M, P, E, k) {
            k === void 0 && (k = E);
            var $ = Object.getOwnPropertyDescriptor(P, E);
            $ && !("get" in $ ? !P.__esModule : $.writable || $.configurable) || ($ = {
              enumerable: true,
              get: function() {
                return P[E];
              }
            }), Object.defineProperty(M, k, $);
          } : function(M, P, E, k) {
            k === void 0 && (k = E), M[k] = P[E];
          }), l = this && this.__setModuleDefault || (Object.create ? function(M, P) {
            Object.defineProperty(M, "default", {
              enumerable: true,
              value: P
            });
          } : function(M, P) {
            M.default = P;
          }), f = this && this.__importStar || function(M) {
            if (M && M.__esModule)
              return M;
            var P = {};
            if (M != null)
              for (var E in M)
                E !== "default" && Object.prototype.hasOwnProperty.call(M, E) && s(P, M, E);
            return l(P, M), P;
          }, d = this && this.__importDefault || function(M) {
            return M && M.__esModule ? M : {
              default: M
            };
          };
          Object.defineProperty(e, "__esModule", {
            value: true
          }), e.dispose = e.getInstance = e.initializeWebAssembly = void 0;
          const w = f(t(6449)), g = d(t(932)), _ = t(3474);
          let h, r = false, n = false, u = false;
          const p = (M, P) => P ? M ? "ort-wasm-simd-threaded.wasm" : "ort-wasm-threaded.wasm" : M ? "ort-wasm-simd.wasm" : "ort-wasm.wasm";
          e.initializeWebAssembly = async (M) => {
            if (r)
              return Promise.resolve();
            if (n)
              throw new Error("multiple calls to 'initializeWebAssembly()' detected.");
            if (u)
              throw new Error("previous call to 'initializeWebAssembly()' failed.");
            n = true;
            const P = M.initTimeout, E = M.numThreads, k = M.simd, $ = E > 1 && (() => {
              try {
                return typeof SharedArrayBuffer < "u" && (typeof MessageChannel < "u" && new MessageChannel().port1.postMessage(new SharedArrayBuffer(1)), WebAssembly.validate(new Uint8Array([
                  0,
                  97,
                  115,
                  109,
                  1,
                  0,
                  0,
                  0,
                  1,
                  4,
                  1,
                  96,
                  0,
                  0,
                  3,
                  2,
                  1,
                  0,
                  5,
                  4,
                  1,
                  3,
                  1,
                  1,
                  10,
                  11,
                  1,
                  9,
                  0,
                  65,
                  0,
                  254,
                  16,
                  2,
                  0,
                  26,
                  11
                ])));
              } catch {
                return false;
              }
            })(), A = k && (() => {
              try {
                return WebAssembly.validate(new Uint8Array([
                  0,
                  97,
                  115,
                  109,
                  1,
                  0,
                  0,
                  0,
                  1,
                  4,
                  1,
                  96,
                  0,
                  0,
                  3,
                  2,
                  1,
                  0,
                  10,
                  30,
                  1,
                  28,
                  0,
                  65,
                  0,
                  253,
                  15,
                  253,
                  12,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  253,
                  186,
                  1,
                  26,
                  11
                ]));
              } catch {
                return false;
              }
            })(), C = typeof M.wasmPaths == "string" ? M.wasmPaths : void 0, F = p(false, $), D = p(A, $), N = typeof M.wasmPaths == "object" ? M.wasmPaths[D] : void 0;
            let R = false;
            const j = [];
            if (P > 0 && j.push(new Promise((Z) => {
              setTimeout(() => {
                R = true, Z();
              }, P);
            })), j.push(new Promise((Z, te) => {
              const J = $ ? _ : g.default, G = {
                locateFile: (H, U) => $ && H.endsWith(".worker.js") && typeof Blob < "u" ? URL.createObjectURL(new Blob([
                  t(4154)
                ], {
                  type: "text/javascript"
                })) : H === F ? N ?? (C ?? U) + D : U + H
              };
              if ($)
                if (typeof Blob > "u")
                  G.mainScriptUrlOrBlob = w.join("/", "ort-wasm-threaded.js");
                else {
                  const H = `var ortWasmThreaded=(function(){var _scriptDir;return ${J.toString()}})();`;
                  G.mainScriptUrlOrBlob = new Blob([
                    H
                  ], {
                    type: "text/javascript"
                  });
                }
              J(G).then((H) => {
                n = false, r = true, h = H, Z();
              }, (H) => {
                n = false, u = true, te(H);
              });
            })), await Promise.race(j), R)
              throw new Error(`WebAssembly backend initializing failed due to timeout: ${P}ms`);
          }, e.getInstance = () => {
            if (r && h)
              return h;
            throw new Error("WebAssembly is not initialized yet.");
          }, e.dispose = () => {
            var M;
            !r || n || u || (n = true, (M = h.PThread) === null || M === void 0 || M.terminateAllThreads(), h = void 0, n = false, r = false, u = true);
          };
        },
        9710: (i, e, t) => {
          t.d(e, {
            Z: () => f
          });
          var s = t(477), l = t.n(s);
          function f() {
            return l()('/*!\n* ONNX Runtime Web v1.14.0\n* Copyright (c) Microsoft Corporation. All rights reserved.\n* Licensed under the MIT License.\n*/\n(()=>{var t={474:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){function e(){return j.buffer!=D&&N(j.buffer),P}function r(){return j.buffer!=D&&N(j.buffer),U}function a(){return j.buffer!=D&&N(j.buffer),F}function i(){return j.buffer!=D&&N(j.buffer),I}function o(){return j.buffer!=D&&N(j.buffer),W}var u,c,s;t=t||{},u||(u=void 0!==t?t:{}),u.ready=new Promise((function(t,e){c=t,s=e}));var l,f,p,h,d,y,b=Object.assign({},u),m="./this.program",g=(t,e)=>{throw e},v="object"==typeof window,w="function"==typeof importScripts,_="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,O=u.ENVIRONMENT_IS_PTHREAD||!1,A="";function S(t){return u.locateFile?u.locateFile(t,A):A+t}if(_){let e;A=w?n(908).dirname(A)+"/":"//",y=()=>{d||(h=n(384),d=n(908))},l=function(t,e){return y(),t=d.normalize(t),h.readFileSync(t,e?void 0:"utf8")},p=t=>((t=l(t,!0)).buffer||(t=new Uint8Array(t)),t),f=(t,e,n)=>{y(),t=d.normalize(t),h.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(m=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof ct))throw t})),process.on("unhandledRejection",(function(t){throw t})),g=(t,e)=>{if(Q())throw process.exitCode=t,e;e instanceof ct||x("exiting due to exception: "+e),process.exit(t)},u.inspect=function(){return"[Emscripten Module object]"};try{e=n(925)}catch(t){throw console.error(\'The "worker_threads" module is not supported in this node.js build - perhaps a newer version is needed?\'),t}n.g.Worker=e.Worker}else(v||w)&&(w?A=self.location.href:"undefined"!=typeof document&&document.currentScript&&(A=document.currentScript.src),_scriptDir&&(A=_scriptDir),A=0!==A.indexOf("blob:")?A.substr(0,A.replace(/[?#].*/,"").lastIndexOf("/")+1):"",_||(l=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},w&&(p=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),f=(t,e,n)=>{var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)}));_&&"undefined"==typeof performance&&(n.g.performance=n(953).performance);var T=console.log.bind(console),E=console.warn.bind(console);_&&(y(),T=t=>h.writeSync(1,t+"\\n"),E=t=>h.writeSync(2,t+"\\n"));var M,C=u.print||T,x=u.printErr||E;Object.assign(u,b),b=null,u.thisProgram&&(m=u.thisProgram),u.quit&&(g=u.quit),u.wasmBinary&&(M=u.wasmBinary);var R=u.noExitRuntime||!1;"object"!=typeof WebAssembly&&at("no native wasm support detected");var j,k,D,P,U,F,I,W,H=!1,L="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function z(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&L)return L.decode(t.buffer instanceof SharedArrayBuffer?t.slice(e,n):t.subarray(e,n));for(r="";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function Y(t,e){return(t>>>=0)?z(r(),t,e):""}function B(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function G(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function N(t){D=t,u.HEAP8=P=new Int8Array(t),u.HEAP16=new Int16Array(t),u.HEAP32=F=new Int32Array(t),u.HEAPU8=U=new Uint8Array(t),u.HEAPU16=new Uint16Array(t),u.HEAPU32=I=new Uint32Array(t),u.HEAPF32=new Float32Array(t),u.HEAPF64=W=new Float64Array(t)}O&&(D=u.buffer);var V=u.INITIAL_MEMORY||16777216;if(O)j=u.wasmMemory,D=u.buffer;else if(u.wasmMemory)j=u.wasmMemory;else if(!((j=new WebAssembly.Memory({initial:V/65536,maximum:65536,shared:!0})).buffer instanceof SharedArrayBuffer))throw x("requested a shared WebAssembly.Memory but the returned buffer is not a SharedArrayBuffer, indicating that while the browser has SharedArrayBuffer it does not have WebAssembly threads support - you may need to set a flag"),_&&console.log("(on node you may need: --experimental-wasm-threads --experimental-wasm-bulk-memory and also use a recent version)"),Error("bad memory");j&&(D=j.buffer),V=D.byteLength,N(D);var $,q=[],X=[],J=[],Z=[];function Q(){return R||!1}function K(){var t=u.preRun.shift();q.unshift(t)}var tt,et=0,nt=null,rt=null;function at(t){throw O?postMessage({cmd:"onAbort",arg:t}):u.onAbort&&u.onAbort(t),x(t="Aborted("+t+")"),H=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),s(t),t}function it(){return tt.startsWith("data:application/octet-stream;base64,")}function ot(){var t=tt;try{if(t==tt&&M)return new Uint8Array(M);if(p)return p(t);throw"both async and sync fetching of the wasm failed"}catch(t){at(t)}}tt="ort-wasm-threaded.wasm",it()||(tt=S(tt));var ut={};function ct(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function st(t){(t=ht.Vb[t])||at(),ht.mc(t)}function lt(t){var e=ht.Cc();if(!e)return 6;ht.ac.push(e),ht.Vb[t.Ub]=e,e.Ub=t.Ub;var n={cmd:"run",start_routine:t.Ic,arg:t.zc,pthread_ptr:t.Ub};return e.$b=()=>{n.time=performance.now(),e.postMessage(n,t.Nc)},e.loaded&&(e.$b(),delete e.$b),0}function ft(t){if(O)return $t(1,1,t);Q()||(ht.oc(),u.onExit&&u.onExit(t),H=!0),g(t,new ct(t))}function pt(t,e){if(!e&&O)throw bt(t),"unwind";Q()||O||(me(),dt(J),be(0),re[1].length&&ae(1,10),re[2].length&&ae(2,10),ht.oc()),ft(t)}var ht={Yb:[],ac:[],qc:[],Vb:{},fc:function(){O&&ht.Ec()},Pc:function(){},Ec:function(){ht.receiveObjectTransfer=ht.Gc,ht.threadInitTLS=ht.pc,ht.setExitStatus=ht.nc,R=!1},nc:function(){},oc:function(){for(var t of Object.values(ht.Vb))ht.mc(t);for(t of ht.Yb)t.terminate();ht.Yb=[]},mc:function(t){var e=t.Ub;delete ht.Vb[e],ht.Yb.push(t),ht.ac.splice(ht.ac.indexOf(t),1),t.Ub=0,Oe(e)},Gc:function(){},pc:function(){ht.qc.forEach((t=>t()))},Fc:function(t,e){t.onmessage=n=>{var r=(n=n.data).cmd;if(t.Ub&&(ht.Bc=t.Ub),n.targetThread&&n.targetThread!=he()){var a=ht.Vb[n.Qc];a?a.postMessage(n,n.transferList):x(\'Internal error! Worker sent a message "\'+r+\'" to target pthread \'+n.targetThread+", but that thread no longer exists!")}else"processProxyingQueue"===r?zt(n.queue):"spawnThread"===r?lt(n):"cleanupThread"===r?st(n.thread):"killThread"===r?(n=n.thread,r=ht.Vb[n],delete ht.Vb[n],r.terminate(),Oe(n),ht.ac.splice(ht.ac.indexOf(r),1),r.Ub=0):"cancelThread"===r?ht.Vb[n.thread].postMessage({cmd:"cancel"}):"loaded"===r?(t.loaded=!0,e&&e(t),t.$b&&(t.$b(),delete t.$b)):"print"===r?C("Thread "+n.threadId+": "+n.text):"printErr"===r?x("Thread "+n.threadId+": "+n.text):"alert"===r?alert("Thread "+n.threadId+": "+n.text):"setimmediate"===n.target?t.postMessage(n):"onAbort"===r?u.onAbort&&u.onAbort(n.arg):r&&x("worker sent an unknown command "+r);ht.Bc=void 0},t.onerror=t=>{throw x("worker sent an error! "+t.filename+":"+t.lineno+": "+t.message),t},_&&(t.on("message",(function(e){t.onmessage({data:e})})),t.on("error",(function(e){t.onerror(e)})),t.on("detachedExit",(function(){}))),t.postMessage({cmd:"load",urlOrBlob:u.mainScriptUrlOrBlob||_scriptDir,wasmMemory:j,wasmModule:k})},yc:function(){var t=S("ort-wasm-threaded.worker.js");ht.Yb.push(new Worker(t))},Cc:function(){return 0==ht.Yb.length&&(ht.yc(),ht.Fc(ht.Yb[0])),ht.Yb.pop()}};function dt(t){for(;0<t.length;)t.shift()(u)}function yt(t){var e=Ee();return t=t(),Me(e),t}function bt(t){if(O)return $t(2,0,t);try{pt(t)}catch(t){t instanceof ct||"unwind"==t||g(1,t)}}u.PThread=ht,u.establishStackSpace=function(){var t=he(),e=a()[t+44>>2>>>0];t=a()[t+48>>2>>>0],Te(e,e-t),Me(e)};var mt=[];function gt(t){var e=mt[t];return e||(t>=mt.length&&(mt.length=t+1),mt[t]=e=$.get(t)),e}u.invokeEntryPoint=function(t,e){t=gt(t)(e),Q()?ht.nc(t):Ae(t)};var vt,wt,_t=[],Ot=0,At=0;function St(t){this.Zb=t,this.Sb=t-24,this.xc=function(t){i()[this.Sb+4>>2>>>0]=t},this.bc=function(){return i()[this.Sb+4>>2>>>0]},this.wc=function(t){i()[this.Sb+8>>2>>>0]=t},this.Dc=function(){return i()[this.Sb+8>>2>>>0]},this.rc=function(){a()[this.Sb>>2>>>0]=0},this.hc=function(t){t=t?1:0,e()[this.Sb+12>>0>>>0]=t},this.uc=function(){return 0!=e()[this.Sb+12>>0>>>0]},this.ic=function(t){t=t?1:0,e()[this.Sb+13>>0>>>0]=t},this.kc=function(){return 0!=e()[this.Sb+13>>0>>>0]},this.fc=function(t,e){this.cc(0),this.xc(t),this.wc(e),this.rc(),this.hc(!1),this.ic(!1)},this.sc=function(){Atomics.add(a(),this.Sb>>2,1)},this.Hc=function(){return 1===Atomics.sub(a(),this.Sb>>2,1)},this.cc=function(t){i()[this.Sb+16>>2>>>0]=t},this.tc=function(){return i()[this.Sb+16>>2>>>0]},this.vc=function(){if(Re(this.bc()))return i()[this.Zb>>2>>>0];var t=this.tc();return 0!==t?t:this.Zb}}function Tt(t){return ye(new St(t).Sb)}function Et(t,e,n,r){return O?$t(3,1,t,e,n,r):Mt(t,e,n,r)}function Mt(t,e,n,r){if("undefined"==typeof SharedArrayBuffer)return x("Current environment does not support SharedArrayBuffer, pthreads are not available!"),6;var a=[];return O&&0===a.length?Et(t,e,n,r):(t={Ic:n,Ub:t,zc:r,Nc:a},O?(t.Oc="spawnThread",postMessage(t,a),0):lt(t))}function Ct(t,e,n){return O?$t(4,1,t,e,n):0}function xt(t,e){if(O)return $t(5,1,t,e)}function Rt(t,e){if(O)return $t(6,1,t,e)}function jt(t,e,n){if(O)return $t(7,1,t,e,n)}function kt(t,e,n){return O?$t(8,1,t,e,n):0}function Dt(t,e){if(O)return $t(9,1,t,e)}function Pt(t,e,n){if(O)return $t(10,1,t,e,n)}function Ut(t,e,n,r){if(O)return $t(11,1,t,e,n,r)}function Ft(t,e,n,r){if(O)return $t(12,1,t,e,n,r)}function It(t,e,n,r){if(O)return $t(13,1,t,e,n,r)}function Wt(t){if(O)return $t(14,1,t)}function Ht(t,e){if(O)return $t(15,1,t,e)}function Lt(t,e,n){if(O)return $t(16,1,t,e,n)}function zt(t){Atomics.store(a(),t>>2,1),he()&&_e(t),Atomics.compareExchange(a(),t>>2,1,0)}function Yt(t){return i()[t>>>2]+4294967296*a()[t+4>>>2]}function Bt(t,e,n,r,a,i){return O?$t(17,1,t,e,n,r,a,i):-52}function Gt(t,e,n,r,a,i){if(O)return $t(18,1,t,e,n,r,a,i)}function Nt(t){var n=G(t)+1,r=de(n);return r&&B(t,e(),r,n),r}function Vt(t,e,n){function r(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:"GMT"}if(O)return $t(19,1,t,e,n);var o=(new Date).getFullYear(),u=new Date(o,0,1),c=new Date(o,6,1);o=u.getTimezoneOffset();var s=c.getTimezoneOffset(),l=Math.max(o,s);a()[t>>2>>>0]=60*l,a()[e>>2>>>0]=Number(o!=s),t=r(u),e=r(c),t=Nt(t),e=Nt(e),s<o?(i()[n>>2>>>0]=t,i()[n+4>>2>>>0]=e):(i()[n>>2>>>0]=e,i()[n+4>>2>>>0]=t)}function $t(t,e){var n=arguments.length-2,r=arguments;return yt((()=>{for(var a=Ce(8*n),i=a>>3,u=0;u<n;u++){var c=r[2+u];o()[i+u>>>0]=c}return we(t,n,a,e)}))}u.executeNotifiedProxyingQueue=zt,wt=_?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:O?()=>performance.now()-u.__performance_now_clock_drift:()=>performance.now();var qt,Xt=[],Jt={};function Zt(){if(!qt){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:m||"./this.program"};for(t in Jt)void 0===Jt[t]?delete e[t]:e[t]=Jt[t];var n=[];for(t in e)n.push(t+"="+e[t]);qt=n}return qt}function Qt(t,n){if(O)return $t(20,1,t,n);var r=0;return Zt().forEach((function(a,o){var u=n+r;for(o=i()[t+4*o>>2>>>0]=u,u=0;u<a.length;++u)e()[o++>>0>>>0]=a.charCodeAt(u);e()[o>>0>>>0]=0,r+=a.length+1})),0}function Kt(t,e){if(O)return $t(21,1,t,e);var n=Zt();i()[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),i()[e>>2>>>0]=r,0}function te(t){return O?$t(22,1,t):52}function ee(t,e,n,r){return O?$t(23,1,t,e,n,r):52}function ne(t,e,n,r,a){return O?$t(24,1,t,e,n,r,a):70}var re=[null,[],[]];function ae(t,e){var n=re[t];0===e||10===e?((1===t?C:x)(z(n,0)),n.length=0):n.push(e)}function ie(t,e,n,a){if(O)return $t(25,1,t,e,n,a);for(var o=0,u=0;u<n;u++){var c=i()[e>>2>>>0],s=i()[e+4>>2>>>0];e+=8;for(var l=0;l<s;l++)ae(t,r()[c+l>>>0]);o+=s}return i()[a>>2>>>0]=o,0}var oe=0;function ue(t){return 0==t%4&&(0!=t%100||0==t%400)}var ce=[31,29,31,30,31,30,31,31,30,31,30,31],se=[31,28,31,30,31,30,31,31,30,31,30,31];function le(t,n,r,i){function o(t,e,n){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=n[0]+t;return t}function u(t,e){return o(t,e,"0")}function c(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function s(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function l(t){var e=t.Wb;for(t=new Date(new Date(t.Xb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(ue(t.getFullYear())?ce:se)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=s(new Date(t.getFullYear(),0,4)),n=s(n),0>=c(e,t)?0>=c(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var f=a()[i+40>>2>>>0];for(var p in i={Lc:a()[i>>2>>>0],Kc:a()[i+4>>2>>>0],dc:a()[i+8>>2>>>0],jc:a()[i+12>>2>>>0],ec:a()[i+16>>2>>>0],Xb:a()[i+20>>2>>>0],Tb:a()[i+24>>2>>>0],Wb:a()[i+28>>2>>>0],Rc:a()[i+32>>2>>>0],Jc:a()[i+36>>2>>>0],Mc:f?Y(f):""},r=Y(r),f={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})r=r.replace(new RegExp(p,"g"),f[p]);var h="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),d="January February March April May June July August September October November December".split(" ");for(p in f={"%a":function(t){return h[t.Tb].substring(0,3)},"%A":function(t){return h[t.Tb]},"%b":function(t){return d[t.ec].substring(0,3)},"%B":function(t){return d[t.ec]},"%C":function(t){return u((t.Xb+1900)/100|0,2)},"%d":function(t){return u(t.jc,2)},"%e":function(t){return o(t.jc,2," ")},"%g":function(t){return l(t).toString().substring(2)},"%G":function(t){return l(t)},"%H":function(t){return u(t.dc,2)},"%I":function(t){return 0==(t=t.dc)?t=12:12<t&&(t-=12),u(t,2)},"%j":function(t){for(var e=0,n=0;n<=t.ec-1;e+=(ue(t.Xb+1900)?ce:se)[n++]);return u(t.jc+e,3)},"%m":function(t){return u(t.ec+1,2)},"%M":function(t){return u(t.Kc,2)},"%n":function(){return"\\n"},"%p":function(t){return 0<=t.dc&&12>t.dc?"AM":"PM"},"%S":function(t){return u(t.Lc,2)},"%t":function(){return"\\t"},"%u":function(t){return t.Tb||7},"%U":function(t){return u(Math.floor((t.Wb+7-t.Tb)/7),2)},"%V":function(t){var e=Math.floor((t.Wb+7-(t.Tb+6)%7)/7);if(2>=(t.Tb+371-t.Wb-2)%7&&e++,e)53==e&&(4==(n=(t.Tb+371-t.Wb)%7)||3==n&&ue(t.Xb)||(e=1));else{e=52;var n=(t.Tb+7-t.Wb-1)%7;(4==n||5==n&&ue(t.Xb%400-1))&&e++}return u(e,2)},"%w":function(t){return t.Tb},"%W":function(t){return u(Math.floor((t.Wb+7-(t.Tb+6)%7)/7),2)},"%y":function(t){return(t.Xb+1900).toString().substring(2)},"%Y":function(t){return t.Xb+1900},"%z":function(t){var e=0<=(t=t.Jc);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":function(t){return t.Mc},"%%":function(){return"%"}},r=r.replace(/%%/g,"\\0\\0"),f)r.includes(p)&&(r=r.replace(new RegExp(p,"g"),f[p](i)));return p=function(t){var e=Array(G(t)+1);return B(t,e,0,e.length),e}(r=r.replace(/\\0\\0/g,"%")),p.length>n?0:(function(t,n){e().set(t,n>>>0)}(p,t),p.length-1)}ht.fc();var fe=[null,ft,bt,Et,Ct,xt,Rt,jt,kt,Dt,Pt,Ut,Ft,It,Wt,Ht,Lt,Bt,Gt,Vt,Qt,Kt,te,ee,ne,ie],pe={b:function(t){return de(t+24)+24},n:function(t){return(t=new St(t)).uc()||(t.hc(!0),Ot--),t.ic(!1),_t.push(t),t.sc(),t.vc()},ma:function(t){throw x("Unexpected exception thrown, this is not properly supported - aborting"),H=!0,t},x:function(){Se(0);var t=_t.pop();if(t.Hc()&&!t.kc()){var e=t.Dc();e&&gt(e)(t.Zb),Tt(t.Zb)}At=0},e:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},l:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},h:function(){var t=At;if(!t)return oe=0;var e=new St(t);e.cc(t);var n=e.bc();if(!n)return oe=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(xe(i,n,e.Sb+16))return oe=i,t}return oe=n,t},t:Tt,M:function(){var t=_t.pop();t||at("no exception to throw");var e=t.Zb;throw t.kc()||(_t.push(t),t.ic(!0),t.hc(!1),Ot++),At=e,e},c:function(t,e,n){throw new St(t).fc(e,n),At=t,Ot++,t},pa:function(){return Ot},Fa:function(t){ge(t,!w,1,!v),ht.pc()},T:function(t){O?postMessage({cmd:"cleanupThread",thread:t}):st(t)},xa:Mt,j:function(t){throw At||(At=t),t},H:Ct,Ma:xt,ua:Rt,wa:jt,oa:kt,Ka:Dt,Ca:Pt,Ja:Ut,V:Ft,va:It,sa:Wt,La:Ht,ta:Lt,Ta:function(){},X:function(){at("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},Ua:function(){at("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},W:function(){return Date.now()},ya:function(){return 2097152},Oa:function(){return!0},za:function(t,e,n,r){if(t==e)setTimeout((()=>zt(r)));else if(O)postMessage({targetThread:t,cmd:"processProxyingQueue",queue:r});else{if(!(t=ht.Vb[t]))return;t.postMessage({cmd:"processProxyingQueue",queue:r})}return 1},Ea:function(){return-1},Pa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getUTCSeconds(),a()[e+4>>2>>>0]=t.getUTCMinutes(),a()[e+8>>2>>>0]=t.getUTCHours(),a()[e+12>>2>>>0]=t.getUTCDate(),a()[e+16>>2>>>0]=t.getUTCMonth(),a()[e+20>>2>>>0]=t.getUTCFullYear()-1900,a()[e+24>>2>>>0]=t.getUTCDay(),t=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0,a()[e+28>>2>>>0]=t},Qa:function(t,e){t=new Date(1e3*Yt(t)),a()[e>>2>>>0]=t.getSeconds(),a()[e+4>>2>>>0]=t.getMinutes(),a()[e+8>>2>>>0]=t.getHours(),a()[e+12>>2>>>0]=t.getDate(),a()[e+16>>2>>>0]=t.getMonth(),a()[e+20>>2>>>0]=t.getFullYear()-1900,a()[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1),r=(t.getTime()-n.getTime())/864e5|0;a()[e+28>>2>>>0]=r,a()[e+36>>2>>>0]=-60*t.getTimezoneOffset(),r=new Date(t.getFullYear(),6,1).getTimezoneOffset(),t=0|(r!=(n=n.getTimezoneOffset())&&t.getTimezoneOffset()==Math.min(n,r)),a()[e+32>>2>>>0]=t},Ra:function(t){var e=new Date(a()[t+20>>2>>>0]+1900,a()[t+16>>2>>>0],a()[t+12>>2>>>0],a()[t+8>>2>>>0],a()[t+4>>2>>>0],a()[t>>2>>>0],0),n=a()[t+32>>2>>>0],r=e.getTimezoneOffset(),i=new Date(e.getFullYear(),0,1),o=new Date(e.getFullYear(),6,1).getTimezoneOffset(),u=i.getTimezoneOffset(),c=Math.min(u,o);return 0>n?a()[t+32>>2>>>0]=Number(o!=u&&c==r):0<n!=(c==r)&&(o=Math.max(u,o),e.setTime(e.getTime()+6e4*((0<n?c:o)-r))),a()[t+24>>2>>>0]=e.getDay(),n=(e.getTime()-i.getTime())/864e5|0,a()[t+28>>2>>>0]=n,a()[t>>2>>>0]=e.getSeconds(),a()[t+4>>2>>>0]=e.getMinutes(),a()[t+8>>2>>>0]=e.getHours(),a()[t+12>>2>>>0]=e.getDate(),a()[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},Aa:Bt,Ba:Gt,Sa:function t(e,n,r){t.Ac||(t.Ac=!0,Vt(e,n,r))},y:function(){at("")},U:function(){if(!_&&!w){var t="Blocking on the main thread is very dangerous, see https://emscripten.org/docs/porting/pthreads.html#blocking-on-the-main-browser-thread";vt||(vt={}),vt[t]||(vt[t]=1,_&&(t="warning: "+t),x(t))}},ra:function(){return 4294901760},B:wt,Ia:function(t,e,n){r().copyWithin(t>>>0,e>>>0,e+n>>>0)},F:function(){return _?n(993).cpus().length:navigator.hardwareConcurrency},Da:function(t,e,n){Xt.length=e,n>>=3;for(var r=0;r<e;r++)Xt[r]=o()[n+r>>>0];return(0>t?ut[-t-1]:fe[t]).apply(null,Xt)},qa:function(t){var e=r().length;if((t>>>=0)<=e||4294901760<t)return!1;for(var n=1;4>=n;n*=2){var a=e*(1+.2/n);a=Math.min(a,t+100663296);var i=Math;a=Math.max(t,a),i=i.min.call(i,4294901760,a+(65536-a%65536)%65536);t:{try{j.grow(i-D.byteLength+65535>>>16),N(j.buffer);var o=1;break t}catch(t){}o=void 0}if(o)return!0}return!1},Na:function(){throw"unwind"},Ga:Qt,Ha:Kt,J:pt,I:te,S:ee,ga:ne,R:ie,d:function(){return oe},na:function t(r,a){t.lc||(t.lc=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(_)try{var e=n(Object(function(){var t=new Error("Cannot find module \'crypto\'");throw t.code="MODULE_NOT_FOUND",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>at("randomDevice")}());for(var i=0;i<a;i++)e()[r+i>>0>>>0]=t.lc();return 0},ia:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ja:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},K:function(t){var e=Ee();try{return gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},f:function(t,e){var n=Ee();try{return gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},P:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},Q:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},k:function(t,e,n){var r=Ee();try{return gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},p:function(t,e,n,r){var a=Ee();try{return gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},q:function(t,e,n,r,a){var i=Ee();try{return gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},N:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},s:function(t,e,n,r,a,i){var o=Ee();try{return gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},w:function(t,e,n,r,a,i,o){var u=Ee();try{return gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},L:function(t,e,n,r,a,i,o,u){var c=Ee();try{return gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},E:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{return gt(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=Ee();try{return He(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},_:function(t,e,n,r,a,i,o){var u=Ee();try{return ke(t,e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},Z:function(t,e,n,r,a){var i=Ee();try{return Le(t,e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},ca:function(t,e,n,r){var a=Ee();try{return Ie(t,e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},$:function(t){var e=Ee();try{return je(t)}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},ba:function(t,e){var n=Ee();try{return We(t,e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},Y:function(t,e,n){var r=Ee();try{return De(t,e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},g:function(t){var e=Ee();try{gt(t)()}catch(t){if(Me(e),t!==t+0)throw t;Se(1,0)}},r:function(t,e){var n=Ee();try{gt(t)(e)}catch(t){if(Me(n),t!==t+0)throw t;Se(1,0)}},i:function(t,e,n){var r=Ee();try{gt(t)(e,n)}catch(t){if(Me(r),t!==t+0)throw t;Se(1,0)}},ha:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},m:function(t,e,n,r){var a=Ee();try{gt(t)(e,n,r)}catch(t){if(Me(a),t!==t+0)throw t;Se(1,0)}},v:function(t,e,n,r,a){var i=Ee();try{gt(t)(e,n,r,a)}catch(t){if(Me(i),t!==t+0)throw t;Se(1,0)}},u:function(t,e,n,r,a,i){var o=Ee();try{gt(t)(e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},O:function(t,e,n,r,a,i,o){var u=Ee();try{gt(t)(e,n,r,a,i,o)}catch(t){if(Me(u),t!==t+0)throw t;Se(1,0)}},A:function(t,e,n,r,a,i,o,u){var c=Ee();try{gt(t)(e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},ka:function(t,e,n,r,a,i,o,u,c){var s=Ee();try{gt(t)(e,n,r,a,i,o,u,c)}catch(t){if(Me(s),t!==t+0)throw t;Se(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l){var f=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(Me(f),t!==t+0)throw t;Se(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=Ee();try{gt(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(Me(b),t!==t+0)throw t;Se(1,0)}},fa:function(t,e,n,r,a,i,o,u){var c=Ee();try{Pe(t,e,n,r,a,i,o,u)}catch(t){if(Me(c),t!==t+0)throw t;Se(1,0)}},da:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=Ee();try{Fe(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(Me(p),t!==t+0)throw t;Se(1,0)}},ea:function(t,e,n,r,a,i){var o=Ee();try{Ue(t,e,n,r,a,i)}catch(t){if(Me(o),t!==t+0)throw t;Se(1,0)}},o:function(t){return t},a:j||u.wasmMemory,G:function(t){oe=t},la:le,z:function(t,e,n,r){return le(t,e,n,r)}};!function(){function t(t,e){u.asm=t.exports,ht.qc.push(u.asm.sb),$=u.asm.ub,X.unshift(u.asm.Va),k=e,O||(et--,u.monitorRunDependencies&&u.monitorRunDependencies(et),0==et&&(null!==nt&&(clearInterval(nt),nt=null),rt&&(t=rt,rt=null,t())))}function e(e){t(e.instance,e.module)}function n(t){return function(){if(!M&&(v||w)){if("function"==typeof fetch&&!tt.startsWith("file://"))return fetch(tt,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at \'"+tt+"\'";return t.arrayBuffer()})).catch((function(){return ot()}));if(f)return new Promise((function(t,e){f(tt,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return ot()}))}().then((function(t){return WebAssembly.instantiate(t,r)})).then((function(t){return t})).then(t,(function(t){x("failed to asynchronously prepare wasm: "+t),at(t)}))}var r={a:pe};if(O||(et++,u.monitorRunDependencies&&u.monitorRunDependencies(et)),u.instantiateWasm)try{return u.instantiateWasm(r,t)}catch(t){return x("Module.instantiateWasm callback failed with error: "+t),!1}(M||"function"!=typeof WebAssembly.instantiateStreaming||it()||tt.startsWith("file://")||_||"function"!=typeof fetch?n(e):fetch(tt,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,r).then(e,(function(t){return x("wasm streaming compile failed: "+t),x("falling back to ArrayBuffer instantiation"),n(e)}))}))).catch(s)}(),u.___wasm_call_ctors=function(){return(u.___wasm_call_ctors=u.asm.Va).apply(null,arguments)},u._OrtInit=function(){return(u._OrtInit=u.asm.Wa).apply(null,arguments)},u._OrtCreateSessionOptions=function(){return(u._OrtCreateSessionOptions=u.asm.Xa).apply(null,arguments)},u._OrtAppendExecutionProvider=function(){return(u._OrtAppendExecutionProvider=u.asm.Ya).apply(null,arguments)},u._OrtAddSessionConfigEntry=function(){return(u._OrtAddSessionConfigEntry=u.asm.Za).apply(null,arguments)},u._OrtReleaseSessionOptions=function(){return(u._OrtReleaseSessionOptions=u.asm._a).apply(null,arguments)},u._OrtCreateSession=function(){return(u._OrtCreateSession=u.asm.$a).apply(null,arguments)},u._OrtReleaseSession=function(){return(u._OrtReleaseSession=u.asm.ab).apply(null,arguments)},u._OrtGetInputCount=function(){return(u._OrtGetInputCount=u.asm.bb).apply(null,arguments)},u._OrtGetOutputCount=function(){return(u._OrtGetOutputCount=u.asm.cb).apply(null,arguments)},u._OrtGetInputName=function(){return(u._OrtGetInputName=u.asm.db).apply(null,arguments)},u._OrtGetOutputName=function(){return(u._OrtGetOutputName=u.asm.eb).apply(null,arguments)},u._OrtFree=function(){return(u._OrtFree=u.asm.fb).apply(null,arguments)},u._OrtCreateTensor=function(){return(u._OrtCreateTensor=u.asm.gb).apply(null,arguments)},u._OrtGetTensorData=function(){return(u._OrtGetTensorData=u.asm.hb).apply(null,arguments)},u._OrtReleaseTensor=function(){return(u._OrtReleaseTensor=u.asm.ib).apply(null,arguments)},u._OrtCreateRunOptions=function(){return(u._OrtCreateRunOptions=u.asm.jb).apply(null,arguments)},u._OrtAddRunConfigEntry=function(){return(u._OrtAddRunConfigEntry=u.asm.kb).apply(null,arguments)},u._OrtReleaseRunOptions=function(){return(u._OrtReleaseRunOptions=u.asm.lb).apply(null,arguments)},u._OrtRun=function(){return(u._OrtRun=u.asm.mb).apply(null,arguments)},u._OrtEndProfiling=function(){return(u._OrtEndProfiling=u.asm.nb).apply(null,arguments)};var he=u._pthread_self=function(){return(he=u._pthread_self=u.asm.ob).apply(null,arguments)},de=u._malloc=function(){return(de=u._malloc=u.asm.pb).apply(null,arguments)},ye=u._free=function(){return(ye=u._free=u.asm.qb).apply(null,arguments)},be=u._fflush=function(){return(be=u._fflush=u.asm.rb).apply(null,arguments)};u.__emscripten_tls_init=function(){return(u.__emscripten_tls_init=u.asm.sb).apply(null,arguments)};var me=u.___funcs_on_exit=function(){return(me=u.___funcs_on_exit=u.asm.tb).apply(null,arguments)},ge=u.__emscripten_thread_init=function(){return(ge=u.__emscripten_thread_init=u.asm.vb).apply(null,arguments)};u.__emscripten_thread_crashed=function(){return(u.__emscripten_thread_crashed=u.asm.wb).apply(null,arguments)};var ve,we=u._emscripten_run_in_main_runtime_thread_js=function(){return(we=u._emscripten_run_in_main_runtime_thread_js=u.asm.xb).apply(null,arguments)},_e=u.__emscripten_proxy_execute_task_queue=function(){return(_e=u.__emscripten_proxy_execute_task_queue=u.asm.yb).apply(null,arguments)},Oe=u.__emscripten_thread_free_data=function(){return(Oe=u.__emscripten_thread_free_data=u.asm.zb).apply(null,arguments)},Ae=u.__emscripten_thread_exit=function(){return(Ae=u.__emscripten_thread_exit=u.asm.Ab).apply(null,arguments)},Se=u._setThrew=function(){return(Se=u._setThrew=u.asm.Bb).apply(null,arguments)},Te=u._emscripten_stack_set_limits=function(){return(Te=u._emscripten_stack_set_limits=u.asm.Cb).apply(null,arguments)},Ee=u.stackSave=function(){return(Ee=u.stackSave=u.asm.Db).apply(null,arguments)},Me=u.stackRestore=function(){return(Me=u.stackRestore=u.asm.Eb).apply(null,arguments)},Ce=u.stackAlloc=function(){return(Ce=u.stackAlloc=u.asm.Fb).apply(null,arguments)},xe=u.___cxa_can_catch=function(){return(xe=u.___cxa_can_catch=u.asm.Gb).apply(null,arguments)},Re=u.___cxa_is_pointer_type=function(){return(Re=u.___cxa_is_pointer_type=u.asm.Hb).apply(null,arguments)},je=u.dynCall_j=function(){return(je=u.dynCall_j=u.asm.Ib).apply(null,arguments)},ke=u.dynCall_iiiiij=function(){return(ke=u.dynCall_iiiiij=u.asm.Jb).apply(null,arguments)},De=u.dynCall_jii=function(){return(De=u.dynCall_jii=u.asm.Kb).apply(null,arguments)},Pe=u.dynCall_viiiiij=function(){return(Pe=u.dynCall_viiiiij=u.asm.Lb).apply(null,arguments)},Ue=u.dynCall_vjji=function(){return(Ue=u.dynCall_vjji=u.asm.Mb).apply(null,arguments)},Fe=u.dynCall_viiijjjii=function(){return(Fe=u.dynCall_viiijjjii=u.asm.Nb).apply(null,arguments)},Ie=u.dynCall_iij=function(){return(Ie=u.dynCall_iij=u.asm.Ob).apply(null,arguments)},We=u.dynCall_ji=function(){return(We=u.dynCall_ji=u.asm.Pb).apply(null,arguments)},He=u.dynCall_iiiiiij=function(){return(He=u.dynCall_iiiiiij=u.asm.Qb).apply(null,arguments)},Le=u.dynCall_iiij=function(){return(Le=u.dynCall_iiij=u.asm.Rb).apply(null,arguments)};function ze(){function t(){if(!ve&&(ve=!0,u.calledRun=!0,!H)&&(O||dt(X),c(u),u.onRuntimeInitialized&&u.onRuntimeInitialized(),!O)){if(u.postRun)for("function"==typeof u.postRun&&(u.postRun=[u.postRun]);u.postRun.length;){var t=u.postRun.shift();Z.unshift(t)}dt(Z)}}if(!(0<et))if(O)c(u),O||dt(X),postMessage({cmd:"loaded"});else{if(u.preRun)for("function"==typeof u.preRun&&(u.preRun=[u.preRun]);u.preRun.length;)K();dt(q),0<et||(u.setStatus?(u.setStatus("Running..."),setTimeout((function(){setTimeout((function(){u.setStatus("")}),1),t()}),1)):t())}}if(u.UTF8ToString=Y,u.stringToUTF8=function(t,e,n){return B(t,r(),e,n)},u.lengthBytesUTF8=G,u.keepRuntimeAlive=Q,u.wasmMemory=j,u.stackSave=Ee,u.stackRestore=Me,u.stackAlloc=Ce,u.ExitStatus=ct,u.PThread=ht,rt=function t(){ve||ze(),ve||(rt=t)},u.preInit)for("function"==typeof u.preInit&&(u.preInit=[u.preInit]);0<u.preInit.length;)u.preInit.pop()();return ze(),t.ready});t.exports=r},932:(t,e,n)=>{var _scriptDir,r=(_scriptDir=(_scriptDir="undefined"!=typeof document&&document.currentScript?document.currentScript.src:void 0)||"/index.js",function(t){var e,r,a;t=t||{},e||(e=void 0!==t?t:{}),e.ready=new Promise((function(t,e){r=t,a=e}));var i,o,u,c,s,l,f=Object.assign({},e),p="./this.program",h=(t,e)=>{throw e},d="object"==typeof window,y="function"==typeof importScripts,b="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node,m="";b?(m=y?n(908).dirname(m)+"/":"//",l=()=>{s||(c=n(384),s=n(908))},i=function(t,e){return l(),t=s.normalize(t),c.readFileSync(t,e?void 0:"utf8")},u=t=>((t=i(t,!0)).buffer||(t=new Uint8Array(t)),t),o=(t,e,n)=>{l(),t=s.normalize(t),c.readFile(t,(function(t,r){t?n(t):e(r.buffer)}))},1<process.argv.length&&(p=process.argv[1].replace(/\\\\/g,"/")),process.argv.slice(2),process.on("uncaughtException",(function(t){if(!(t instanceof J))throw t})),process.on("unhandledRejection",(function(t){throw t})),h=(t,e)=>{if(_||0<L)throw process.exitCode=t,e;e instanceof J||w("exiting due to exception: "+e),process.exit(t)},e.inspect=function(){return"[Emscripten Module object]"}):(d||y)&&(y?m=self.location.href:"undefined"!=typeof document&&document.currentScript&&(m=document.currentScript.src),_scriptDir&&(m=_scriptDir),m=0!==m.indexOf("blob:")?m.substr(0,m.replace(/[?#].*/,"").lastIndexOf("/")+1):"",i=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.send(null),e.responseText},y&&(u=t=>{var e=new XMLHttpRequest;return e.open("GET",t,!1),e.responseType="arraybuffer",e.send(null),new Uint8Array(e.response)}),o=(t,e,n)=>{var r=new XMLHttpRequest;r.open("GET",t,!0),r.responseType="arraybuffer",r.onload=()=>{200==r.status||0==r.status&&r.response?e(r.response):n()},r.onerror=n,r.send(null)});var g,v=e.print||console.log.bind(console),w=e.printErr||console.warn.bind(console);Object.assign(e,f),f=null,e.thisProgram&&(p=e.thisProgram),e.quit&&(h=e.quit),e.wasmBinary&&(g=e.wasmBinary);var _=e.noExitRuntime||!1;"object"!=typeof WebAssembly&&V("no native wasm support detected");var O,A,S,T,E,M,C=!1,x="undefined"!=typeof TextDecoder?new TextDecoder("utf8"):void 0;function R(t,e,n){var r=(e>>>=0)+n;for(n=e;t[n]&&!(n>=r);)++n;if(16<n-e&&t.buffer&&x)return x.decode(t.subarray(e,n));for(r="";e<n;){var a=t[e++];if(128&a){var i=63&t[e++];if(192==(224&a))r+=String.fromCharCode((31&a)<<6|i);else{var o=63&t[e++];65536>(a=224==(240&a)?(15&a)<<12|i<<6|o:(7&a)<<18|i<<12|o<<6|63&t[e++])?r+=String.fromCharCode(a):(a-=65536,r+=String.fromCharCode(55296|a>>10,56320|1023&a))}}else r+=String.fromCharCode(a)}return r}function j(t,e){return(t>>>=0)?R(T,t,e):""}function k(t,e,n,r){if(!(0<r))return 0;var a=n>>>=0;r=n+r-1;for(var i=0;i<t.length;++i){var o=t.charCodeAt(i);if(55296<=o&&57343>=o&&(o=65536+((1023&o)<<10)|1023&t.charCodeAt(++i)),127>=o){if(n>=r)break;e[n++>>>0]=o}else{if(2047>=o){if(n+1>=r)break;e[n++>>>0]=192|o>>6}else{if(65535>=o){if(n+2>=r)break;e[n++>>>0]=224|o>>12}else{if(n+3>=r)break;e[n++>>>0]=240|o>>18,e[n++>>>0]=128|o>>12&63}e[n++>>>0]=128|o>>6&63}e[n++>>>0]=128|63&o}}return e[n>>>0]=0,n-a}function D(t){for(var e=0,n=0;n<t.length;++n){var r=t.charCodeAt(n);127>=r?e++:2047>=r?e+=2:55296<=r&&57343>=r?(e+=4,++n):e+=3}return e}function P(){var t=O.buffer;A=t,e.HEAP8=S=new Int8Array(t),e.HEAP16=new Int16Array(t),e.HEAP32=E=new Int32Array(t),e.HEAPU8=T=new Uint8Array(t),e.HEAPU16=new Uint16Array(t),e.HEAPU32=M=new Uint32Array(t),e.HEAPF32=new Float32Array(t),e.HEAPF64=new Float64Array(t)}var U,F=[],I=[],W=[],H=[],L=0;function z(){var t=e.preRun.shift();F.unshift(t)}var Y,B=0,G=null,N=null;function V(t){throw e.onAbort&&e.onAbort(t),w(t="Aborted("+t+")"),C=!0,t=new WebAssembly.RuntimeError(t+". Build with -sASSERTIONS for more info."),a(t),t}function $(){return Y.startsWith("data:application/octet-stream;base64,")}if(Y="ort-wasm.wasm",!$()){var q=Y;Y=e.locateFile?e.locateFile(q,m):m+q}function X(){var t=Y;try{if(t==Y&&g)return new Uint8Array(g);if(u)return u(t);throw"both async and sync fetching of the wasm failed"}catch(t){V(t)}}function J(t){this.name="ExitStatus",this.message="Program terminated with exit("+t+")",this.status=t}function Z(t){for(;0<t.length;)t.shift()(e)}var Q=[],K=0,tt=0;function et(t){this.Db=t,this.zb=t-24,this.Ub=function(t){M[this.zb+4>>2>>>0]=t},this.Eb=function(){return M[this.zb+4>>2>>>0]},this.Sb=function(t){M[this.zb+8>>2>>>0]=t},this.Wb=function(){return M[this.zb+8>>2>>>0]},this.Tb=function(){E[this.zb>>2>>>0]=0},this.Ib=function(t){S[this.zb+12>>0>>>0]=t?1:0},this.Pb=function(){return 0!=S[this.zb+12>>0>>>0]},this.Jb=function(t){S[this.zb+13>>0>>>0]=t?1:0},this.Lb=function(){return 0!=S[this.zb+13>>0>>>0]},this.Rb=function(t,e){this.Fb(0),this.Ub(t),this.Sb(e),this.Tb(),this.Ib(!1),this.Jb(!1)},this.Nb=function(){E[this.zb>>2>>>0]+=1},this.Xb=function(){var t=E[this.zb>>2>>>0];return E[this.zb>>2>>>0]=t-1,1===t},this.Fb=function(t){M[this.zb+16>>2>>>0]=t},this.Ob=function(){return M[this.zb+16>>2>>>0]},this.Qb=function(){if(Mt(this.Eb()))return M[this.Db>>2>>>0];var t=this.Ob();return 0!==t?t:this.Db}}function nt(t){return vt(new et(t).zb)}var rt=[];function at(t){var e=rt[t];return e||(t>=rt.length&&(rt.length=t+1),rt[t]=e=U.get(t)),e}function it(t){var e=D(t)+1,n=gt(e);return n&&k(t,S,n,e),n}var ot={};function ut(){if(!ct){var t,e={USER:"web_user",LOGNAME:"web_user",PATH:"/",PWD:"/",HOME:"/home/web_user",LANG:("object"==typeof navigator&&navigator.languages&&navigator.languages[0]||"C").replace("-","_")+".UTF-8",_:p||"./this.program"};for(t in ot)void 0===ot[t]?delete e[t]:e[t]=ot[t];var n=[];for(t in e)n.push(t+"="+e[t]);ct=n}return ct}var ct,st=[null,[],[]];function lt(t,e){var n=st[t];0===e||10===e?((1===t?v:w)(R(n,0)),n.length=0):n.push(e)}var ft=0;function pt(t){return 0==t%4&&(0!=t%100||0==t%400)}var ht=[31,29,31,30,31,30,31,31,30,31,30,31],dt=[31,28,31,30,31,30,31,31,30,31,30,31];function yt(t,e,n,r){function a(t,e,n){for(t="number"==typeof t?t.toString():t||"";t.length<e;)t=n[0]+t;return t}function i(t,e){return a(t,e,"0")}function o(t,e){function n(t){return 0>t?-1:0<t?1:0}var r;return 0===(r=n(t.getFullYear()-e.getFullYear()))&&0===(r=n(t.getMonth()-e.getMonth()))&&(r=n(t.getDate()-e.getDate())),r}function u(t){switch(t.getDay()){case 0:return new Date(t.getFullYear()-1,11,29);case 1:return t;case 2:return new Date(t.getFullYear(),0,3);case 3:return new Date(t.getFullYear(),0,2);case 4:return new Date(t.getFullYear(),0,1);case 5:return new Date(t.getFullYear()-1,11,31);case 6:return new Date(t.getFullYear()-1,11,30)}}function c(t){var e=t.Bb;for(t=new Date(new Date(t.Cb+1900,0,1).getTime());0<e;){var n=t.getMonth(),r=(pt(t.getFullYear())?ht:dt)[n];if(!(e>r-t.getDate())){t.setDate(t.getDate()+e);break}e-=r-t.getDate()+1,t.setDate(1),11>n?t.setMonth(n+1):(t.setMonth(0),t.setFullYear(t.getFullYear()+1))}return n=new Date(t.getFullYear()+1,0,4),e=u(new Date(t.getFullYear(),0,4)),n=u(n),0>=o(e,t)?0>=o(n,t)?t.getFullYear()+1:t.getFullYear():t.getFullYear()-1}var s=E[r+40>>2>>>0];for(var l in r={$b:E[r>>2>>>0],Zb:E[r+4>>2>>>0],Gb:E[r+8>>2>>>0],Kb:E[r+12>>2>>>0],Hb:E[r+16>>2>>>0],Cb:E[r+20>>2>>>0],Ab:E[r+24>>2>>>0],Bb:E[r+28>>2>>>0],bc:E[r+32>>2>>>0],Yb:E[r+36>>2>>>0],ac:s?j(s):""},n=j(n),s={"%c":"%a %b %d %H:%M:%S %Y","%D":"%m/%d/%y","%F":"%Y-%m-%d","%h":"%b","%r":"%I:%M:%S %p","%R":"%H:%M","%T":"%H:%M:%S","%x":"%m/%d/%y","%X":"%H:%M:%S","%Ec":"%c","%EC":"%C","%Ex":"%m/%d/%y","%EX":"%H:%M:%S","%Ey":"%y","%EY":"%Y","%Od":"%d","%Oe":"%e","%OH":"%H","%OI":"%I","%Om":"%m","%OM":"%M","%OS":"%S","%Ou":"%u","%OU":"%U","%OV":"%V","%Ow":"%w","%OW":"%W","%Oy":"%y"})n=n.replace(new RegExp(l,"g"),s[l]);var f="Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),p="January February March April May June July August September October November December".split(" ");for(l in s={"%a":function(t){return f[t.Ab].substring(0,3)},"%A":function(t){return f[t.Ab]},"%b":function(t){return p[t.Hb].substring(0,3)},"%B":function(t){return p[t.Hb]},"%C":function(t){return i((t.Cb+1900)/100|0,2)},"%d":function(t){return i(t.Kb,2)},"%e":function(t){return a(t.Kb,2," ")},"%g":function(t){return c(t).toString().substring(2)},"%G":function(t){return c(t)},"%H":function(t){return i(t.Gb,2)},"%I":function(t){return 0==(t=t.Gb)?t=12:12<t&&(t-=12),i(t,2)},"%j":function(t){for(var e=0,n=0;n<=t.Hb-1;e+=(pt(t.Cb+1900)?ht:dt)[n++]);return i(t.Kb+e,3)},"%m":function(t){return i(t.Hb+1,2)},"%M":function(t){return i(t.Zb,2)},"%n":function(){return"\\n"},"%p":function(t){return 0<=t.Gb&&12>t.Gb?"AM":"PM"},"%S":function(t){return i(t.$b,2)},"%t":function(){return"\\t"},"%u":function(t){return t.Ab||7},"%U":function(t){return i(Math.floor((t.Bb+7-t.Ab)/7),2)},"%V":function(t){var e=Math.floor((t.Bb+7-(t.Ab+6)%7)/7);if(2>=(t.Ab+371-t.Bb-2)%7&&e++,e)53==e&&(4==(n=(t.Ab+371-t.Bb)%7)||3==n&&pt(t.Cb)||(e=1));else{e=52;var n=(t.Ab+7-t.Bb-1)%7;(4==n||5==n&&pt(t.Cb%400-1))&&e++}return i(e,2)},"%w":function(t){return t.Ab},"%W":function(t){return i(Math.floor((t.Bb+7-(t.Ab+6)%7)/7),2)},"%y":function(t){return(t.Cb+1900).toString().substring(2)},"%Y":function(t){return t.Cb+1900},"%z":function(t){var e=0<=(t=t.Yb);return t=Math.abs(t)/60,(e?"+":"-")+String("0000"+(t/60*100+t%60)).slice(-4)},"%Z":function(t){return t.ac},"%%":function(){return"%"}},n=n.replace(/%%/g,"\\0\\0"),s)n.includes(l)&&(n=n.replace(new RegExp(l,"g"),s[l](r)));return l=function(t){var e=Array(D(t)+1);return k(t,e,0,e.length),e}(n=n.replace(/\\0\\0/g,"%")),l.length>e?0:(S.set(l,t>>>0),l.length-1)}var bt={a:function(t){return gt(t+24)+24},m:function(t){return(t=new et(t)).Pb()||(t.Ib(!0),K--),t.Jb(!1),Q.push(t),t.Nb(),t.Qb()},ia:function(t){throw w("Unexpected exception thrown, this is not properly supported - aborting"),C=!0,t},w:function(){Ot(0);var t=Q.pop();if(t.Xb()&&!t.Lb()){var e=t.Wb();e&&at(e)(t.Db),nt(t.Db)}tt=0},d:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},k:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},g:function(){var t=tt;if(!t)return ft=0;var e=new et(t);e.Fb(t);var n=e.Eb();if(!n)return ft=0,t;for(var r=Array.prototype.slice.call(arguments),a=0;a<r.length;a++){var i=r[a];if(0===i||i===n)break;if(Et(i,n,e.zb+16))return ft=i,t}return ft=n,t},s:nt,L:function(){var t=Q.pop();t||V("no exception to throw");var e=t.Db;throw t.Lb()||(Q.push(t),t.Jb(!0),t.Ib(!1),K++),tt=e,e},b:function(t,e,n){throw new et(t).Rb(e,n),tt=t,K++,t},la:function(){return K},i:function(t){throw tt||(tt=t),t},H:function(){return 0},Ba:function(){},pa:function(){},ra:function(){},ka:function(){return 0},za:function(){},ua:function(){},ya:function(){},R:function(){},qa:function(){},na:function(){},Aa:function(){},oa:function(){},Ha:function(){},Ja:function(){V("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},Ia:function(){V("To use dlopen, you need enable dynamic linking, see https://github.com/emscripten-core/emscripten/wiki/Linking")},S:function(){return Date.now()},Ca:function(){return!0},Da:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getUTCSeconds(),E[e+4>>2>>>0]=t.getUTCMinutes(),E[e+8>>2>>>0]=t.getUTCHours(),E[e+12>>2>>>0]=t.getUTCDate(),E[e+16>>2>>>0]=t.getUTCMonth(),E[e+20>>2>>>0]=t.getUTCFullYear()-1900,E[e+24>>2>>>0]=t.getUTCDay(),E[e+28>>2>>>0]=(t.getTime()-Date.UTC(t.getUTCFullYear(),0,1,0,0,0,0))/864e5|0},Ea:function(t,e){t=new Date(1e3*(M[t>>>2]+4294967296*E[t+4>>>2])),E[e>>2>>>0]=t.getSeconds(),E[e+4>>2>>>0]=t.getMinutes(),E[e+8>>2>>>0]=t.getHours(),E[e+12>>2>>>0]=t.getDate(),E[e+16>>2>>>0]=t.getMonth(),E[e+20>>2>>>0]=t.getFullYear()-1900,E[e+24>>2>>>0]=t.getDay();var n=new Date(t.getFullYear(),0,1);E[e+28>>2>>>0]=(t.getTime()-n.getTime())/864e5|0,E[e+36>>2>>>0]=-60*t.getTimezoneOffset();var r=new Date(t.getFullYear(),6,1).getTimezoneOffset();n=n.getTimezoneOffset(),E[e+32>>2>>>0]=0|(r!=n&&t.getTimezoneOffset()==Math.min(n,r))},Fa:function(t){var e=new Date(E[t+20>>2>>>0]+1900,E[t+16>>2>>>0],E[t+12>>2>>>0],E[t+8>>2>>>0],E[t+4>>2>>>0],E[t>>2>>>0],0),n=E[t+32>>2>>>0],r=e.getTimezoneOffset(),a=new Date(e.getFullYear(),0,1),i=new Date(e.getFullYear(),6,1).getTimezoneOffset(),o=a.getTimezoneOffset(),u=Math.min(o,i);return 0>n?E[t+32>>2>>>0]=Number(i!=o&&u==r):0<n!=(u==r)&&(i=Math.max(o,i),e.setTime(e.getTime()+6e4*((0<n?u:i)-r))),E[t+24>>2>>>0]=e.getDay(),E[t+28>>2>>>0]=(e.getTime()-a.getTime())/864e5|0,E[t>>2>>>0]=e.getSeconds(),E[t+4>>2>>>0]=e.getMinutes(),E[t+8>>2>>>0]=e.getHours(),E[t+12>>2>>>0]=e.getDate(),E[t+16>>2>>>0]=e.getMonth(),e.getTime()/1e3|0},sa:function(){return-52},ta:function(){},Ga:function t(e,n,r){t.Vb||(t.Vb=!0,function(t,e,n){function r(t){return(t=t.toTimeString().match(/\\(([A-Za-z ]+)\\)$/))?t[1]:"GMT"}var a=(new Date).getFullYear(),i=new Date(a,0,1),o=new Date(a,6,1);a=i.getTimezoneOffset();var u=o.getTimezoneOffset();E[t>>2>>>0]=60*Math.max(a,u),E[e>>2>>>0]=Number(a!=u),t=r(i),e=r(o),t=it(t),e=it(e),u<a?(M[n>>2>>>0]=t,M[n+4>>2>>>0]=e):(M[n>>2>>>0]=e,M[n+4>>2>>>0]=t)}(e,n,r))},B:function(){V("")},ma:function(){return 4294901760},I:b?()=>{var t=process.hrtime();return 1e3*t[0]+t[1]/1e6}:()=>performance.now(),xa:function(t,e,n){T.copyWithin(t>>>0,e>>>0,e+n>>>0)},G:function(t){var e=T.length;if(4294901760<(t>>>=0))return!1;for(var n=1;4>=n;n*=2){var r=e*(1+.2/n);r=Math.min(r,t+100663296);var a=Math;r=Math.max(t,r),a=a.min.call(a,4294901760,r+(65536-r%65536)%65536);t:{try{O.grow(a-A.byteLength+65535>>>16),P();var i=1;break t}catch(t){}i=void 0}if(i)return!0}return!1},va:function(t,e){var n=0;return ut().forEach((function(r,a){var i=e+n;for(a=M[t+4*a>>2>>>0]=i,i=0;i<r.length;++i)S[a++>>0>>>0]=r.charCodeAt(i);S[a>>0>>>0]=0,n+=r.length+1})),0},wa:function(t,e){var n=ut();M[t>>2>>>0]=n.length;var r=0;return n.forEach((function(t){r+=t.length+1})),M[e>>2>>>0]=r,0},ba:function(t){_||0<L||(_t(),Z(W),wt(0),st[1].length&&lt(1,10),st[2].length&&lt(2,10)),_||0<L||(e.onExit&&e.onExit(t),C=!0),h(t,new J(t))},E:function(){return 52},Q:function(){return 52},ca:function(){return 70},P:function(t,e,n,r){for(var a=0,i=0;i<n;i++){var o=M[e>>2>>>0],u=M[e+4>>2>>>0];e+=8;for(var c=0;c<u;c++)lt(t,T[o+c>>>0]);a+=u}return M[r>>2>>>0]=a,0},c:function(){return ft},ja:function t(e,r){t.Mb||(t.Mb=function(){if("object"==typeof crypto&&"function"==typeof crypto.getRandomValues){var t=new Uint8Array(1);return()=>(crypto.getRandomValues(t),t[0])}if(b)try{var e=n(Object(function(){var t=new Error("Cannot find module \'crypto\'");throw t.code="MODULE_NOT_FOUND",t}()));return()=>e.randomBytes(1)[0]}catch(t){}return()=>V("randomDevice")}());for(var a=0;a<r;a++)S[e+a>>0>>>0]=t.Mb();return 0},ea:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},fa:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},J:function(t){var e=At();try{return at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},e:function(t,e){var n=At();try{return at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},N:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},O:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},j:function(t,e,n){var r=At();try{return at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},o:function(t,e,n,r){var a=At();try{return at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},p:function(t,e,n,r,a){var i=At();try{return at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},M:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},r:function(t,e,n,r,a,i){var o=At();try{return at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},v:function(t,e,n,r,a,i,o){var u=At();try{return at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},K:function(t,e,n,r,a,i,o,u){var c=At();try{return at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},D:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{return at(t)(e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},X:function(t,e,n,r,a,i,o,u){var c=At();try{return Ft(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},V:function(t,e,n,r,a,i,o){var u=At();try{return xt(t,e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},U:function(t,e,n,r,a){var i=At();try{return It(t,e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},Z:function(t,e,n,r){var a=At();try{return Pt(t,e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},W:function(t){var e=At();try{return Ct(t)}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},Y:function(t,e){var n=At();try{return Ut(t,e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},T:function(t,e,n){var r=At();try{return Rt(t,e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},f:function(t){var e=At();try{at(t)()}catch(t){if(St(e),t!==t+0)throw t;Ot(1,0)}},q:function(t,e){var n=At();try{at(t)(e)}catch(t){if(St(n),t!==t+0)throw t;Ot(1,0)}},h:function(t,e,n){var r=At();try{at(t)(e,n)}catch(t){if(St(r),t!==t+0)throw t;Ot(1,0)}},da:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},l:function(t,e,n,r){var a=At();try{at(t)(e,n,r)}catch(t){if(St(a),t!==t+0)throw t;Ot(1,0)}},t:function(t,e,n,r,a){var i=At();try{at(t)(e,n,r,a)}catch(t){if(St(i),t!==t+0)throw t;Ot(1,0)}},u:function(t,e,n,r,a,i){var o=At();try{at(t)(e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},x:function(t,e,n,r,a,i,o){var u=At();try{at(t)(e,n,r,a,i,o)}catch(t){if(St(u),t!==t+0)throw t;Ot(1,0)}},z:function(t,e,n,r,a,i,o,u){var c=At();try{at(t)(e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},ga:function(t,e,n,r,a,i,o,u,c){var s=At();try{at(t)(e,n,r,a,i,o,u,c)}catch(t){if(St(s),t!==t+0)throw t;Ot(1,0)}},A:function(t,e,n,r,a,i,o,u,c,s,l){var f=At();try{at(t)(e,n,r,a,i,o,u,c,s,l)}catch(t){if(St(f),t!==t+0)throw t;Ot(1,0)}},C:function(t,e,n,r,a,i,o,u,c,s,l,f,p,h,d,y){var b=At();try{at(t)(e,n,r,a,i,o,u,c,s,l,f,p,h,d,y)}catch(t){if(St(b),t!==t+0)throw t;Ot(1,0)}},aa:function(t,e,n,r,a,i,o,u){var c=At();try{jt(t,e,n,r,a,i,o,u)}catch(t){if(St(c),t!==t+0)throw t;Ot(1,0)}},_:function(t,e,n,r,a,i,o,u,c,s,l,f){var p=At();try{Dt(t,e,n,r,a,i,o,u,c,s,l,f)}catch(t){if(St(p),t!==t+0)throw t;Ot(1,0)}},$:function(t,e,n,r,a,i){var o=At();try{kt(t,e,n,r,a,i)}catch(t){if(St(o),t!==t+0)throw t;Ot(1,0)}},n:function(t){return t},F:function(t){ft=t},ha:yt,y:function(t,e,n,r){return yt(t,e,n,r)}};!function(){function t(t){e.asm=t.exports,O=e.asm.Ka,P(),U=e.asm.ib,I.unshift(e.asm.La),B--,e.monitorRunDependencies&&e.monitorRunDependencies(B),0==B&&(null!==G&&(clearInterval(G),G=null),N&&(t=N,N=null,t()))}function n(e){t(e.instance)}function r(t){return function(){if(!g&&(d||y)){if("function"==typeof fetch&&!Y.startsWith("file://"))return fetch(Y,{credentials:"same-origin"}).then((function(t){if(!t.ok)throw"failed to load wasm binary file at \'"+Y+"\'";return t.arrayBuffer()})).catch((function(){return X()}));if(o)return new Promise((function(t,e){o(Y,(function(e){t(new Uint8Array(e))}),e)}))}return Promise.resolve().then((function(){return X()}))}().then((function(t){return WebAssembly.instantiate(t,i)})).then((function(t){return t})).then(t,(function(t){w("failed to asynchronously prepare wasm: "+t),V(t)}))}var i={a:bt};if(B++,e.monitorRunDependencies&&e.monitorRunDependencies(B),e.instantiateWasm)try{return e.instantiateWasm(i,t)}catch(t){return w("Module.instantiateWasm callback failed with error: "+t),!1}(g||"function"!=typeof WebAssembly.instantiateStreaming||$()||Y.startsWith("file://")||b||"function"!=typeof fetch?r(n):fetch(Y,{credentials:"same-origin"}).then((function(t){return WebAssembly.instantiateStreaming(t,i).then(n,(function(t){return w("wasm streaming compile failed: "+t),w("falling back to ArrayBuffer instantiation"),r(n)}))}))).catch(a)}(),e.___wasm_call_ctors=function(){return(e.___wasm_call_ctors=e.asm.La).apply(null,arguments)},e._OrtInit=function(){return(e._OrtInit=e.asm.Ma).apply(null,arguments)},e._OrtCreateSessionOptions=function(){return(e._OrtCreateSessionOptions=e.asm.Na).apply(null,arguments)},e._OrtAppendExecutionProvider=function(){return(e._OrtAppendExecutionProvider=e.asm.Oa).apply(null,arguments)},e._OrtAddSessionConfigEntry=function(){return(e._OrtAddSessionConfigEntry=e.asm.Pa).apply(null,arguments)},e._OrtReleaseSessionOptions=function(){return(e._OrtReleaseSessionOptions=e.asm.Qa).apply(null,arguments)},e._OrtCreateSession=function(){return(e._OrtCreateSession=e.asm.Ra).apply(null,arguments)},e._OrtReleaseSession=function(){return(e._OrtReleaseSession=e.asm.Sa).apply(null,arguments)},e._OrtGetInputCount=function(){return(e._OrtGetInputCount=e.asm.Ta).apply(null,arguments)},e._OrtGetOutputCount=function(){return(e._OrtGetOutputCount=e.asm.Ua).apply(null,arguments)},e._OrtGetInputName=function(){return(e._OrtGetInputName=e.asm.Va).apply(null,arguments)},e._OrtGetOutputName=function(){return(e._OrtGetOutputName=e.asm.Wa).apply(null,arguments)},e._OrtFree=function(){return(e._OrtFree=e.asm.Xa).apply(null,arguments)},e._OrtCreateTensor=function(){return(e._OrtCreateTensor=e.asm.Ya).apply(null,arguments)},e._OrtGetTensorData=function(){return(e._OrtGetTensorData=e.asm.Za).apply(null,arguments)},e._OrtReleaseTensor=function(){return(e._OrtReleaseTensor=e.asm._a).apply(null,arguments)},e._OrtCreateRunOptions=function(){return(e._OrtCreateRunOptions=e.asm.$a).apply(null,arguments)},e._OrtAddRunConfigEntry=function(){return(e._OrtAddRunConfigEntry=e.asm.ab).apply(null,arguments)},e._OrtReleaseRunOptions=function(){return(e._OrtReleaseRunOptions=e.asm.bb).apply(null,arguments)},e._OrtRun=function(){return(e._OrtRun=e.asm.cb).apply(null,arguments)},e._OrtEndProfiling=function(){return(e._OrtEndProfiling=e.asm.db).apply(null,arguments)};var mt,gt=e._malloc=function(){return(gt=e._malloc=e.asm.eb).apply(null,arguments)},vt=e._free=function(){return(vt=e._free=e.asm.fb).apply(null,arguments)},wt=e._fflush=function(){return(wt=e._fflush=e.asm.gb).apply(null,arguments)},_t=e.___funcs_on_exit=function(){return(_t=e.___funcs_on_exit=e.asm.hb).apply(null,arguments)},Ot=e._setThrew=function(){return(Ot=e._setThrew=e.asm.jb).apply(null,arguments)},At=e.stackSave=function(){return(At=e.stackSave=e.asm.kb).apply(null,arguments)},St=e.stackRestore=function(){return(St=e.stackRestore=e.asm.lb).apply(null,arguments)},Tt=e.stackAlloc=function(){return(Tt=e.stackAlloc=e.asm.mb).apply(null,arguments)},Et=e.___cxa_can_catch=function(){return(Et=e.___cxa_can_catch=e.asm.nb).apply(null,arguments)},Mt=e.___cxa_is_pointer_type=function(){return(Mt=e.___cxa_is_pointer_type=e.asm.ob).apply(null,arguments)},Ct=e.dynCall_j=function(){return(Ct=e.dynCall_j=e.asm.pb).apply(null,arguments)},xt=e.dynCall_iiiiij=function(){return(xt=e.dynCall_iiiiij=e.asm.qb).apply(null,arguments)},Rt=e.dynCall_jii=function(){return(Rt=e.dynCall_jii=e.asm.rb).apply(null,arguments)},jt=e.dynCall_viiiiij=function(){return(jt=e.dynCall_viiiiij=e.asm.sb).apply(null,arguments)},kt=e.dynCall_vjji=function(){return(kt=e.dynCall_vjji=e.asm.tb).apply(null,arguments)},Dt=e.dynCall_viiijjjii=function(){return(Dt=e.dynCall_viiijjjii=e.asm.ub).apply(null,arguments)},Pt=e.dynCall_iij=function(){return(Pt=e.dynCall_iij=e.asm.vb).apply(null,arguments)},Ut=e.dynCall_ji=function(){return(Ut=e.dynCall_ji=e.asm.wb).apply(null,arguments)},Ft=e.dynCall_iiiiiij=function(){return(Ft=e.dynCall_iiiiiij=e.asm.xb).apply(null,arguments)},It=e.dynCall_iiij=function(){return(It=e.dynCall_iiij=e.asm.yb).apply(null,arguments)};function Wt(){function t(){if(!mt&&(mt=!0,e.calledRun=!0,!C)){if(Z(I),r(e),e.onRuntimeInitialized&&e.onRuntimeInitialized(),e.postRun)for("function"==typeof e.postRun&&(e.postRun=[e.postRun]);e.postRun.length;){var t=e.postRun.shift();H.unshift(t)}Z(H)}}if(!(0<B)){if(e.preRun)for("function"==typeof e.preRun&&(e.preRun=[e.preRun]);e.preRun.length;)z();Z(F),0<B||(e.setStatus?(e.setStatus("Running..."),setTimeout((function(){setTimeout((function(){e.setStatus("")}),1),t()}),1)):t())}}if(e.UTF8ToString=j,e.stringToUTF8=function(t,e,n){return k(t,T,e,n)},e.lengthBytesUTF8=D,e.stackSave=At,e.stackRestore=St,e.stackAlloc=Tt,N=function t(){mt||Wt(),mt||(N=t)},e.preInit)for("function"==typeof e.preInit&&(e.preInit=[e.preInit]);0<e.preInit.length;)e.preInit.pop()();return Wt(),t.ready});t.exports=r},967:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.iterateExtraOptions=void 0,e.iterateExtraOptions=(t,n,r,a)=>{if("object"==typeof t&&null!==t){if(r.has(t))throw new Error("Circular reference in options");r.add(t)}Object.entries(t).forEach((([t,i])=>{const o=n?n+t:t;if("object"==typeof i)(0,e.iterateExtraOptions)(i,o+".",r,a);else if("string"==typeof i||"number"==typeof i)a(o,i.toString());else{if("boolean"!=typeof i)throw new Error("Can\'t handle extra config type: "+typeof i);a(o,i?"1":"0")}}))}},586:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setRunOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setRunOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};try{if(void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if("number"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if("number"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);void 0===(null==t?void 0:t.terminate)&&(u.terminate=!1);let i=0;if(void 0!==(null==t?void 0:t.tag)&&(i=(0,a.allocWasmString)(t.tag,o)),n=e._OrtCreateRunOptions(u.logSeverityLevel,u.logVerbosityLevel,!!u.terminate,i),0===n)throw new Error("Can\'t create run options");return void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,"",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddRunConfigEntry(n,i,u))throw new Error(`Can\'t set a run config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseRunOptions(n),o.forEach(e._free),t}}},919:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.setSessionOptions=void 0;const r=n(967),a=n(983),i=n(361);e.setSessionOptions=t=>{const e=(0,i.getInstance)();let n=0;const o=[],u=t||{};(t=>{t.extra||(t.extra={}),t.extra.session||(t.extra.session={});const e=t.extra.session;e.use_ort_model_bytes_directly||(e.use_ort_model_bytes_directly="1")})(u);try{void 0===(null==t?void 0:t.graphOptimizationLevel)&&(u.graphOptimizationLevel="all");const c=(t=>{switch(t){case"disabled":return 0;case"basic":return 1;case"extended":return 2;case"all":return 99;default:throw new Error(`unsupported graph optimization level: ${t}`)}})(u.graphOptimizationLevel);void 0===(null==t?void 0:t.enableCpuMemArena)&&(u.enableCpuMemArena=!0),void 0===(null==t?void 0:t.enableMemPattern)&&(u.enableMemPattern=!0),void 0===(null==t?void 0:t.executionMode)&&(u.executionMode="sequential");const s=(t=>{switch(t){case"sequential":return 0;case"parallel":return 1;default:throw new Error(`unsupported execution mode: ${t}`)}})(u.executionMode);let l=0;if(void 0!==(null==t?void 0:t.logId)&&(l=(0,a.allocWasmString)(t.logId,o)),void 0===(null==t?void 0:t.logSeverityLevel))u.logSeverityLevel=2;else if("number"!=typeof t.logSeverityLevel||!Number.isInteger(t.logSeverityLevel)||t.logSeverityLevel<0||t.logSeverityLevel>4)throw new Error(`log serverity level is not valid: ${t.logSeverityLevel}`);if(void 0===(null==t?void 0:t.logVerbosityLevel))u.logVerbosityLevel=0;else if("number"!=typeof t.logVerbosityLevel||!Number.isInteger(t.logVerbosityLevel))throw new Error(`log verbosity level is not valid: ${t.logVerbosityLevel}`);if(void 0===(null==t?void 0:t.enableProfiling)&&(u.enableProfiling=!1),n=e._OrtCreateSessionOptions(c,!!u.enableCpuMemArena,!!u.enableMemPattern,s,!!u.enableProfiling,0,l,u.logSeverityLevel,u.logVerbosityLevel),0===n)throw new Error("Can\'t create session options");return(null==t?void 0:t.executionProviders)&&((t,e,n)=>{for(const r of e){let e="string"==typeof r?r:r.name;switch(e){case"xnnpack":e="XNNPACK";break;case"wasm":case"cpu":continue;default:throw new Error(`not supported EP: ${e}`)}const o=(0,a.allocWasmString)(e,n);if(0!==(0,i.getInstance)()._OrtAppendExecutionProvider(t,o))throw new Error(`Can\'t append execution provider: ${e}`)}})(n,t.executionProviders,o),void 0!==(null==t?void 0:t.extra)&&(0,r.iterateExtraOptions)(t.extra,"",new WeakSet,((t,r)=>{const i=(0,a.allocWasmString)(t,o),u=(0,a.allocWasmString)(r,o);if(0!==e._OrtAddSessionConfigEntry(n,i,u))throw new Error(`Can\'t set a session config entry: ${t} - ${r}`)})),[n,o]}catch(t){throw 0!==n&&e._OrtReleaseSessionOptions(n),o.forEach(e._free),t}}},983:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.allocWasmString=void 0;const r=n(361);e.allocWasmString=(t,e)=>{const n=(0,r.getInstance)(),a=n.lengthBytesUTF8(t)+1,i=n._malloc(a);return n.stringToUTF8(t,i,a),e.push(i),i}},349:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.extractTransferableBuffers=e.endProfiling=e.run=e.releaseSession=e.createSession=e.createSessionFinalize=e.createSessionAllocate=e.initOrt=void 0;const r=n(586),a=n(919),i=n(983),o=n(361);e.initOrt=(t,e)=>{const n=(0,o.getInstance)()._OrtInit(t,e);if(0!==n)throw new Error(`Can\'t initialize onnxruntime. error code = ${n}`)};const u=new Map;e.createSessionAllocate=t=>{const e=(0,o.getInstance)(),n=e._malloc(t.byteLength);return e.HEAPU8.set(t,n),[n,t.byteLength]},e.createSessionFinalize=(t,e)=>{const n=(0,o.getInstance)();let r=0,i=0,c=[];try{if([i,c]=(0,a.setSessionOptions)(e),r=n._OrtCreateSession(t[0],t[1],i),0===r)throw new Error("Can\'t create a session")}finally{n._free(t[0]),n._OrtReleaseSessionOptions(i),c.forEach(n._free)}const s=n._OrtGetInputCount(r),l=n._OrtGetOutputCount(r),f=[],p=[],h=[],d=[];for(let t=0;t<s;t++){const e=n._OrtGetInputName(r,t);if(0===e)throw new Error("Can\'t get an input name");p.push(e),f.push(n.UTF8ToString(e))}for(let t=0;t<l;t++){const e=n._OrtGetOutputName(r,t);if(0===e)throw new Error("Can\'t get an output name");d.push(e),h.push(n.UTF8ToString(e))}return u.set(r,[r,p,d]),[r,f,h]},e.createSession=(t,n)=>{const r=(0,e.createSessionAllocate)(t);return(0,e.createSessionFinalize)(r,n)},e.releaseSession=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error("invalid session id");const r=n[0],a=n[1],i=n[2];a.forEach(e._OrtFree),i.forEach(e._OrtFree),e._OrtReleaseSession(r),u.delete(t)};const c=t=>{switch(t){case"int8":return 3;case"uint8":return 2;case"bool":return 9;case"int16":return 5;case"uint16":return 4;case"int32":return 6;case"uint32":return 12;case"float32":return 1;case"float64":return 11;case"string":return 8;case"int64":return 7;case"uint64":return 13;default:throw new Error(`unsupported data type: ${t}`)}},s=t=>{switch(t){case 3:return"int8";case 2:return"uint8";case 9:return"bool";case 5:return"int16";case 4:return"uint16";case 6:return"int32";case 12:return"uint32";case 1:return"float32";case 11:return"float64";case 8:return"string";case 7:return"int64";case 13:return"uint64";default:throw new Error(`unsupported data type: ${t}`)}},l=t=>{switch(t){case"float32":return Float32Array;case"uint8":case"bool":return Uint8Array;case"int8":return Int8Array;case"uint16":return Uint16Array;case"int16":return Int16Array;case"int32":return Int32Array;case"float64":return Float64Array;case"uint32":return Uint32Array;case"int64":return BigInt64Array;case"uint64":return BigUint64Array;default:throw new Error(`unsupported type: ${t}`)}};e.run=(t,e,n,a,f)=>{const p=(0,o.getInstance)(),h=u.get(t);if(!h)throw new Error("invalid session id");const d=h[0],y=h[1],b=h[2],m=e.length,g=a.length;let v=0,w=[];const _=[],O=[];try{[v,w]=(0,r.setRunOptions)(f);for(let t=0;t<m;t++){const e=n[t][0],r=n[t][1],a=n[t][2];let o,u;if(Array.isArray(a)){u=4*a.length,o=p._malloc(u),O.push(o);let t=o/4;for(let e=0;e<a.length;e++){if("string"!=typeof a[e])throw new TypeError(`tensor data at index ${e} is not a string`);p.HEAPU32[t++]=(0,i.allocWasmString)(a[e],O)}}else u=a.byteLength,o=p._malloc(u),O.push(o),p.HEAPU8.set(new Uint8Array(a.buffer,a.byteOffset,u),o);const s=p.stackSave(),l=p.stackAlloc(4*r.length);try{let t=l/4;r.forEach((e=>p.HEAP32[t++]=e));const n=p._OrtCreateTensor(c(e),o,u,l,r.length);if(0===n)throw new Error("Can\'t create a tensor");_.push(n)}finally{p.stackRestore(s)}}const t=p.stackSave(),o=p.stackAlloc(4*m),u=p.stackAlloc(4*m),h=p.stackAlloc(4*g),A=p.stackAlloc(4*g);try{let n=o/4,r=u/4,i=h/4,c=A/4;for(let t=0;t<m;t++)p.HEAPU32[n++]=_[t],p.HEAPU32[r++]=y[e[t]];for(let t=0;t<g;t++)p.HEAPU32[i++]=0,p.HEAPU32[c++]=b[a[t]];let f=p._OrtRun(d,u,o,m,A,g,h,v);const w=[];if(0===f)for(let t=0;t<g;t++){const e=p.HEAPU32[h/4+t],n=p.stackSave(),r=p.stackAlloc(16);let a,i=0;try{if(f=p._OrtGetTensorData(e,r,r+4,r+8,r+12),0!==f)throw new Error(`Can\'t access output tensor data. error code = ${f}`);let t=r/4;const o=p.HEAPU32[t++];i=p.HEAPU32[t++];const u=p.HEAPU32[t++],c=p.HEAPU32[t++],h=[];for(let t=0;t<c;t++)h.push(p.HEAPU32[u/4+t]);p._OrtFree(u);const d=0===h.length?1:h.reduce(((t,e)=>t*e));if(a=s(o),"string"===a){const t=[];let e=i/4;for(let n=0;n<d;n++){const r=p.HEAPU32[e++],a=n===d-1?void 0:p.HEAPU32[e]-r;t.push(p.UTF8ToString(r,a))}w.push([a,h,t])}else{const t=new(l(a))(d);new Uint8Array(t.buffer,t.byteOffset,t.byteLength).set(p.HEAPU8.subarray(i,i+t.byteLength)),w.push([a,h,t])}}finally{p.stackRestore(n),"string"===a&&i&&p._free(i),p._OrtReleaseTensor(e)}}if(0===f)return w;throw new Error(`failed to call OrtRun(). error code = ${f}.`)}finally{p.stackRestore(t)}}finally{_.forEach(p._OrtReleaseTensor),O.forEach(p._free),p._OrtReleaseRunOptions(v),w.forEach(p._free)}},e.endProfiling=t=>{const e=(0,o.getInstance)(),n=u.get(t);if(!n)throw new Error("invalid session id");const r=n[0],a=e._OrtEndProfiling(r);if(0===a)throw new Error("Can\'t get an profile file name");e._OrtFree(a)},e.extractTransferableBuffers=t=>{const e=[];for(const n of t){const t=n[2];!Array.isArray(t)&&t.buffer&&e.push(t.buffer)}return e}},361:function(t,e,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(t,e,n,r){void 0===r&&(r=n);var a=Object.getOwnPropertyDescriptor(e,n);a&&!("get"in a?!e.__esModule:a.writable||a.configurable)||(a={enumerable:!0,get:function(){return e[n]}}),Object.defineProperty(t,r,a)}:function(t,e,n,r){void 0===r&&(r=n),t[r]=e[n]}),a=this&&this.__setModuleDefault||(Object.create?function(t,e){Object.defineProperty(t,"default",{enumerable:!0,value:e})}:function(t,e){t.default=e}),i=this&&this.__importStar||function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var n in t)"default"!==n&&Object.prototype.hasOwnProperty.call(t,n)&&r(e,t,n);return a(e,t),e},o=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0}),e.dispose=e.getInstance=e.initializeWebAssembly=void 0;const u=i(n(449)),c=o(n(932)),s=n(474);let l,f=!1,p=!1,h=!1;const d=(t,e)=>e?t?"ort-wasm-simd-threaded.wasm":"ort-wasm-threaded.wasm":t?"ort-wasm-simd.wasm":"ort-wasm.wasm";e.initializeWebAssembly=async t=>{if(f)return Promise.resolve();if(p)throw new Error("multiple calls to \'initializeWebAssembly()\' detected.");if(h)throw new Error("previous call to \'initializeWebAssembly()\' failed.");p=!0;const e=t.initTimeout,r=t.numThreads,a=t.simd,i=r>1&&(()=>{try{return"undefined"!=typeof SharedArrayBuffer&&("undefined"!=typeof MessageChannel&&(new MessageChannel).port1.postMessage(new SharedArrayBuffer(1)),WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,5,4,1,3,1,1,10,11,1,9,0,65,0,254,16,2,0,26,11])))}catch(t){return!1}})(),o=a&&(()=>{try{return WebAssembly.validate(new Uint8Array([0,97,115,109,1,0,0,0,1,4,1,96,0,0,3,2,1,0,10,30,1,28,0,65,0,253,15,253,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,253,186,1,26,11]))}catch(t){return!1}})(),y="string"==typeof t.wasmPaths?t.wasmPaths:void 0,b=d(!1,i),m=d(o,i),g="object"==typeof t.wasmPaths?t.wasmPaths[m]:void 0;let v=!1;const w=[];if(e>0&&w.push(new Promise((t=>{setTimeout((()=>{v=!0,t()}),e)}))),w.push(new Promise(((t,e)=>{const r=i?s:c.default,a={locateFile:(t,e)=>i&&t.endsWith(".worker.js")&&"undefined"!=typeof Blob?URL.createObjectURL(new Blob([n(154)],{type:"text/javascript"})):t===b?null!=g?g:(null!=y?y:e)+m:e+t};if(i)if("undefined"==typeof Blob)a.mainScriptUrlOrBlob=u.join("/","ort-wasm-threaded.js");else{const t=`var ortWasmThreaded=(function(){var _scriptDir;return ${r.toString()}})();`;a.mainScriptUrlOrBlob=new Blob([t],{type:"text/javascript"})}r(a).then((e=>{p=!1,f=!0,l=e,t()}),(t=>{p=!1,h=!0,e(t)}))}))),await Promise.race(w),v)throw new Error(`WebAssembly backend initializing failed due to timeout: ${e}ms`)},e.getInstance=()=>{if(f&&l)return l;throw new Error("WebAssembly is not initialized yet.")},e.dispose=()=>{var t;!f||p||h||(p=!0,null===(t=l.PThread)||void 0===t||t.terminateAllThreads(),l=void 0,p=!1,f=!1,h=!0)}},154:t=>{"use strict";t.exports=\'"use strict";var e={},t="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;if(t){var r=require("worker_threads"),a=r.parentPort;a.on("message",(e=>onmessage({data:e})));var o=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,"utf8"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(" ");t?o.writeSync(2,e+"\\\\n"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if("load"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if("run"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if("unwind"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else"cancel"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===t.data.target||("processProxyingQueue"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i("worker.js received unknown command "+t.data.cmd),i(t.data)))}catch(t){throw i("worker.js onmessage() captured an uncaught exception: "+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};\\n\'},384:()=>{},993:()=>{},908:()=>{},953:()=>{},925:()=>{},449:()=>{}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={exports:{}};return t[r].call(i.exports,i,i.exports,n),i.exports}n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),(()=>{"use strict";const t=n(349),e=n(361);self.onmessage=n=>{switch(n.data.type){case"init-wasm":(0,e.initializeWebAssembly)(n.data.in).then((()=>postMessage({type:"init-wasm"})),(t=>postMessage({type:"init-wasm",err:t})));break;case"init-ort":try{const{numThreads:e,loggingLevel:r}=n.data.in;(0,t.initOrt)(e,r),postMessage({type:"init-ort"})}catch(t){postMessage({type:"init-ort",err:t})}break;case"create_allocate":try{const{model:e}=n.data.in,r=(0,t.createSessionAllocate)(e);postMessage({type:"create_allocate",out:r})}catch(t){postMessage({type:"create_allocate",err:t})}break;case"create_finalize":try{const{modeldata:e,options:r}=n.data.in,a=(0,t.createSessionFinalize)(e,r);postMessage({type:"create_finalize",out:a})}catch(t){postMessage({type:"create_finalize",err:t})}break;case"create":try{const{model:e,options:r}=n.data.in,a=(0,t.createSession)(e,r);postMessage({type:"create",out:a})}catch(t){postMessage({type:"create",err:t})}break;case"release":try{const e=n.data.in;(0,t.releaseSession)(e),postMessage({type:"release"})}catch(t){postMessage({type:"release",err:t})}break;case"run":try{const{sessionId:e,inputIndices:r,inputs:a,outputIndices:i,options:o}=n.data.in,u=(0,t.run)(e,r,a,i,o);postMessage({type:"run",out:u},(0,t.extractTransferableBuffers)(u))}catch(t){postMessage({type:"run",err:t})}break;case"end-profiling":try{const e=n.data.in;(0,t.endProfiling)(e),postMessage({type:"end-profiling"})}catch(t){postMessage({type:"end-profiling",err:t})}}}})()})();\n', "Worker", void 0, void 0);
          }
        },
        477: (i) => {
          i.exports = function(e, t, s, l) {
            var f = self || window;
            try {
              try {
                var d;
                try {
                  d = new f.Blob([
                    e
                  ]);
                } catch {
                  (d = new (f.BlobBuilder || f.WebKitBlobBuilder || f.MozBlobBuilder || f.MSBlobBuilder)()).append(e), d = d.getBlob();
                }
                var w = f.URL || f.webkitURL, g = w.createObjectURL(d), _ = new f[t](g, s);
                return w.revokeObjectURL(g), _;
              } catch {
                return new f[t]("data:application/javascript,".concat(encodeURIComponent(e)), s);
              }
            } catch {
              if (!l)
                throw Error("Inline worker is not supported");
              return new f[t](l, s);
            }
          };
        },
        4154: (i) => {
          i.exports = `"use strict";var e={},t="object"==typeof process&&"object"==typeof process.versions&&"string"==typeof process.versions.node;if(t){var r=require("worker_threads"),a=r.parentPort;a.on("message",(e=>onmessage({data:e})));var o=require("fs");Object.assign(global,{self:global,require:require,Module:e,location:{href:__filename},Worker:r.Worker,importScripts:function(e){(0,eval)(o.readFileSync(e,"utf8"))},postMessage:function(e){a.postMessage(e)},performance:global.performance||{now:function(){return Date.now()}}})}var s=!1,n=[],i=function(){var e=Array.prototype.slice.call(arguments).join(" ");t?o.writeSync(2,e+"\\n"):console.error(e)};self.alert=function(){var t=Array.prototype.slice.call(arguments).join(" ");postMessage({cmd:"alert",text:t,threadId:e._pthread_self()})},e.instantiateWasm=(t,r)=>{var a=new WebAssembly.Instance(e.wasmModule,t);return r(a),e.wasmModule=null,a.exports},self.onunhandledrejection=e=>{throw e.reason??e},self.onmessage=t=>{try{if("load"===t.data.cmd){if(e.wasmModule=t.data.wasmModule,e.wasmMemory=t.data.wasmMemory,e.buffer=e.wasmMemory.buffer,e.ENVIRONMENT_IS_PTHREAD=!0,"string"==typeof t.data.urlOrBlob)importScripts(t.data.urlOrBlob);else{var r=URL.createObjectURL(t.data.urlOrBlob);importScripts(r),URL.revokeObjectURL(r)}ortWasmThreaded(e).then((function(t){e=t}))}else if("run"===t.data.cmd){e.__performance_now_clock_drift=performance.now()-t.data.time,e.__emscripten_thread_init(t.data.pthread_ptr,0,0,1),e.establishStackSpace(),e.PThread.receiveObjectTransfer(t.data),e.PThread.threadInitTLS(),s||(n.forEach((t=>{e.executeNotifiedProxyingQueue(t)})),n=[],s=!0);try{e.invokeEntryPoint(t.data.start_routine,t.data.arg)}catch(t){if("unwind"!=t){if(!(t instanceof e.ExitStatus))throw t;e.keepRuntimeAlive()||e.__emscripten_thread_exit(t.status)}}}else"cancel"===t.data.cmd?e._pthread_self()&&e.__emscripten_thread_exit(-1):"setimmediate"===t.data.target||("processProxyingQueue"===t.data.cmd?s?e.executeNotifiedProxyingQueue(t.data.queue):n.push(t.data.queue):(i("worker.js received unknown command "+t.data.cmd),i(t.data)))}catch(t){throw i("worker.js onmessage() captured an uncaught exception: "+t),t&&t.stack&&i(t.stack),e.__emscripten_thread_crashed&&e.__emscripten_thread_crashed(),t}};
`;
        },
        1670: (i) => {
          i.exports = __WEBPACK_EXTERNAL_MODULE__1670__;
        },
        7067: () => {
        },
        1296: () => {
        },
        1384: () => {
        },
        3993: () => {
        },
        908: () => {
        },
        6953: () => {
        },
        9925: () => {
        },
        2806: () => {
        },
        6449: () => {
        },
        2850: () => {
        },
        5381: () => {
        },
        5686: (i, e, t) => {
          t.r(e), t.d(e, {
            flatbuffers: () => s
          });
          var s = {};
          s.Offset, s.Table, s.SIZEOF_SHORT = 2, s.SIZEOF_INT = 4, s.FILE_IDENTIFIER_LENGTH = 4, s.SIZE_PREFIX_LENGTH = 4, s.Encoding = {
            UTF8_BYTES: 1,
            UTF16_STRING: 2
          }, s.int32 = new Int32Array(2), s.float32 = new Float32Array(s.int32.buffer), s.float64 = new Float64Array(s.int32.buffer), s.isLittleEndian = new Uint16Array(new Uint8Array([
            1,
            0
          ]).buffer)[0] === 1, s.Long = function(l, f) {
            this.low = 0 | l, this.high = 0 | f;
          }, s.Long.create = function(l, f) {
            return l == 0 && f == 0 ? s.Long.ZERO : new s.Long(l, f);
          }, s.Long.prototype.toFloat64 = function() {
            return (this.low >>> 0) + 4294967296 * this.high;
          }, s.Long.prototype.equals = function(l) {
            return this.low == l.low && this.high == l.high;
          }, s.Long.ZERO = new s.Long(0, 0), s.Builder = function(l) {
            if (l)
              f = l;
            else
              var f = 1024;
            this.bb = s.ByteBuffer.allocate(f), this.space = f, this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = false, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = false;
          }, s.Builder.prototype.clear = function() {
            this.bb.clear(), this.space = this.bb.capacity(), this.minalign = 1, this.vtable = null, this.vtable_in_use = 0, this.isNested = false, this.object_start = 0, this.vtables = [], this.vector_num_elems = 0, this.force_defaults = false;
          }, s.Builder.prototype.forceDefaults = function(l) {
            this.force_defaults = l;
          }, s.Builder.prototype.dataBuffer = function() {
            return this.bb;
          }, s.Builder.prototype.asUint8Array = function() {
            return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());
          }, s.Builder.prototype.prep = function(l, f) {
            l > this.minalign && (this.minalign = l);
            for (var d = 1 + ~(this.bb.capacity() - this.space + f) & l - 1; this.space < d + l + f; ) {
              var w = this.bb.capacity();
              this.bb = s.Builder.growByteBuffer(this.bb), this.space += this.bb.capacity() - w;
            }
            this.pad(d);
          }, s.Builder.prototype.pad = function(l) {
            for (var f = 0; f < l; f++)
              this.bb.writeInt8(--this.space, 0);
          }, s.Builder.prototype.writeInt8 = function(l) {
            this.bb.writeInt8(this.space -= 1, l);
          }, s.Builder.prototype.writeInt16 = function(l) {
            this.bb.writeInt16(this.space -= 2, l);
          }, s.Builder.prototype.writeInt32 = function(l) {
            this.bb.writeInt32(this.space -= 4, l);
          }, s.Builder.prototype.writeInt64 = function(l) {
            this.bb.writeInt64(this.space -= 8, l);
          }, s.Builder.prototype.writeFloat32 = function(l) {
            this.bb.writeFloat32(this.space -= 4, l);
          }, s.Builder.prototype.writeFloat64 = function(l) {
            this.bb.writeFloat64(this.space -= 8, l);
          }, s.Builder.prototype.addInt8 = function(l) {
            this.prep(1, 0), this.writeInt8(l);
          }, s.Builder.prototype.addInt16 = function(l) {
            this.prep(2, 0), this.writeInt16(l);
          }, s.Builder.prototype.addInt32 = function(l) {
            this.prep(4, 0), this.writeInt32(l);
          }, s.Builder.prototype.addInt64 = function(l) {
            this.prep(8, 0), this.writeInt64(l);
          }, s.Builder.prototype.addFloat32 = function(l) {
            this.prep(4, 0), this.writeFloat32(l);
          }, s.Builder.prototype.addFloat64 = function(l) {
            this.prep(8, 0), this.writeFloat64(l);
          }, s.Builder.prototype.addFieldInt8 = function(l, f, d) {
            (this.force_defaults || f != d) && (this.addInt8(f), this.slot(l));
          }, s.Builder.prototype.addFieldInt16 = function(l, f, d) {
            (this.force_defaults || f != d) && (this.addInt16(f), this.slot(l));
          }, s.Builder.prototype.addFieldInt32 = function(l, f, d) {
            (this.force_defaults || f != d) && (this.addInt32(f), this.slot(l));
          }, s.Builder.prototype.addFieldInt64 = function(l, f, d) {
            !this.force_defaults && f.equals(d) || (this.addInt64(f), this.slot(l));
          }, s.Builder.prototype.addFieldFloat32 = function(l, f, d) {
            (this.force_defaults || f != d) && (this.addFloat32(f), this.slot(l));
          }, s.Builder.prototype.addFieldFloat64 = function(l, f, d) {
            (this.force_defaults || f != d) && (this.addFloat64(f), this.slot(l));
          }, s.Builder.prototype.addFieldOffset = function(l, f, d) {
            (this.force_defaults || f != d) && (this.addOffset(f), this.slot(l));
          }, s.Builder.prototype.addFieldStruct = function(l, f, d) {
            f != d && (this.nested(f), this.slot(l));
          }, s.Builder.prototype.nested = function(l) {
            if (l != this.offset())
              throw new Error("FlatBuffers: struct must be serialized inline.");
          }, s.Builder.prototype.notNested = function() {
            if (this.isNested)
              throw new Error("FlatBuffers: object serialization must not be nested.");
          }, s.Builder.prototype.slot = function(l) {
            this.vtable[l] = this.offset();
          }, s.Builder.prototype.offset = function() {
            return this.bb.capacity() - this.space;
          }, s.Builder.growByteBuffer = function(l) {
            var f = l.capacity();
            if (3221225472 & f)
              throw new Error("FlatBuffers: cannot grow buffer beyond 2 gigabytes.");
            var d = f << 1, w = s.ByteBuffer.allocate(d);
            return w.setPosition(d - f), w.bytes().set(l.bytes(), d - f), w;
          }, s.Builder.prototype.addOffset = function(l) {
            this.prep(s.SIZEOF_INT, 0), this.writeInt32(this.offset() - l + s.SIZEOF_INT);
          }, s.Builder.prototype.startObject = function(l) {
            this.notNested(), this.vtable == null && (this.vtable = []), this.vtable_in_use = l;
            for (var f = 0; f < l; f++)
              this.vtable[f] = 0;
            this.isNested = true, this.object_start = this.offset();
          }, s.Builder.prototype.endObject = function() {
            if (this.vtable == null || !this.isNested)
              throw new Error("FlatBuffers: endObject called without startObject");
            this.addInt32(0);
            for (var l = this.offset(), f = this.vtable_in_use - 1; f >= 0 && this.vtable[f] == 0; f--)
              ;
            for (var d = f + 1; f >= 0; f--)
              this.addInt16(this.vtable[f] != 0 ? l - this.vtable[f] : 0);
            this.addInt16(l - this.object_start);
            var w = (d + 2) * s.SIZEOF_SHORT;
            this.addInt16(w);
            var g = 0, _ = this.space;
            e:
              for (f = 0; f < this.vtables.length; f++) {
                var h = this.bb.capacity() - this.vtables[f];
                if (w == this.bb.readInt16(h)) {
                  for (var r = s.SIZEOF_SHORT; r < w; r += s.SIZEOF_SHORT)
                    if (this.bb.readInt16(_ + r) != this.bb.readInt16(h + r))
                      continue e;
                  g = this.vtables[f];
                  break;
                }
              }
            return g ? (this.space = this.bb.capacity() - l, this.bb.writeInt32(this.space, g - l)) : (this.vtables.push(this.offset()), this.bb.writeInt32(this.bb.capacity() - l, this.offset() - l)), this.isNested = false, l;
          }, s.Builder.prototype.finish = function(l, f, d) {
            var w = d ? s.SIZE_PREFIX_LENGTH : 0;
            if (f) {
              var g = f;
              if (this.prep(this.minalign, s.SIZEOF_INT + s.FILE_IDENTIFIER_LENGTH + w), g.length != s.FILE_IDENTIFIER_LENGTH)
                throw new Error("FlatBuffers: file identifier must be length " + s.FILE_IDENTIFIER_LENGTH);
              for (var _ = s.FILE_IDENTIFIER_LENGTH - 1; _ >= 0; _--)
                this.writeInt8(g.charCodeAt(_));
            }
            this.prep(this.minalign, s.SIZEOF_INT + w), this.addOffset(l), w && this.addInt32(this.bb.capacity() - this.space), this.bb.setPosition(this.space);
          }, s.Builder.prototype.finishSizePrefixed = function(l, f) {
            this.finish(l, f, true);
          }, s.Builder.prototype.requiredField = function(l, f) {
            var d = this.bb.capacity() - l, w = d - this.bb.readInt32(d);
            if (this.bb.readInt16(w + f) == 0)
              throw new Error("FlatBuffers: field " + f + " must be set");
          }, s.Builder.prototype.startVector = function(l, f, d) {
            this.notNested(), this.vector_num_elems = f, this.prep(s.SIZEOF_INT, l * f), this.prep(d, l * f);
          }, s.Builder.prototype.endVector = function() {
            return this.writeInt32(this.vector_num_elems), this.offset();
          }, s.Builder.prototype.createString = function(l) {
            if (l instanceof Uint8Array)
              var f = l;
            else {
              f = [];
              for (var d = 0; d < l.length; ) {
                var w, g = l.charCodeAt(d++);
                (w = g < 55296 || g >= 56320 ? g : (g << 10) + l.charCodeAt(d++) + -56613888) < 128 ? f.push(w) : (w < 2048 ? f.push(w >> 6 & 31 | 192) : (w < 65536 ? f.push(w >> 12 & 15 | 224) : f.push(w >> 18 & 7 | 240, w >> 12 & 63 | 128), f.push(w >> 6 & 63 | 128)), f.push(63 & w | 128));
              }
            }
            this.addInt8(0), this.startVector(1, f.length, 1), this.bb.setPosition(this.space -= f.length), d = 0;
            for (var _ = this.space, h = this.bb.bytes(); d < f.length; d++)
              h[_++] = f[d];
            return this.endVector();
          }, s.Builder.prototype.createLong = function(l, f) {
            return s.Long.create(l, f);
          }, s.ByteBuffer = function(l) {
            this.bytes_ = l, this.position_ = 0;
          }, s.ByteBuffer.allocate = function(l) {
            return new s.ByteBuffer(new Uint8Array(l));
          }, s.ByteBuffer.prototype.clear = function() {
            this.position_ = 0;
          }, s.ByteBuffer.prototype.bytes = function() {
            return this.bytes_;
          }, s.ByteBuffer.prototype.position = function() {
            return this.position_;
          }, s.ByteBuffer.prototype.setPosition = function(l) {
            this.position_ = l;
          }, s.ByteBuffer.prototype.capacity = function() {
            return this.bytes_.length;
          }, s.ByteBuffer.prototype.readInt8 = function(l) {
            return this.readUint8(l) << 24 >> 24;
          }, s.ByteBuffer.prototype.readUint8 = function(l) {
            return this.bytes_[l];
          }, s.ByteBuffer.prototype.readInt16 = function(l) {
            return this.readUint16(l) << 16 >> 16;
          }, s.ByteBuffer.prototype.readUint16 = function(l) {
            return this.bytes_[l] | this.bytes_[l + 1] << 8;
          }, s.ByteBuffer.prototype.readInt32 = function(l) {
            return this.bytes_[l] | this.bytes_[l + 1] << 8 | this.bytes_[l + 2] << 16 | this.bytes_[l + 3] << 24;
          }, s.ByteBuffer.prototype.readUint32 = function(l) {
            return this.readInt32(l) >>> 0;
          }, s.ByteBuffer.prototype.readInt64 = function(l) {
            return new s.Long(this.readInt32(l), this.readInt32(l + 4));
          }, s.ByteBuffer.prototype.readUint64 = function(l) {
            return new s.Long(this.readUint32(l), this.readUint32(l + 4));
          }, s.ByteBuffer.prototype.readFloat32 = function(l) {
            return s.int32[0] = this.readInt32(l), s.float32[0];
          }, s.ByteBuffer.prototype.readFloat64 = function(l) {
            return s.int32[s.isLittleEndian ? 0 : 1] = this.readInt32(l), s.int32[s.isLittleEndian ? 1 : 0] = this.readInt32(l + 4), s.float64[0];
          }, s.ByteBuffer.prototype.writeInt8 = function(l, f) {
            this.bytes_[l] = f;
          }, s.ByteBuffer.prototype.writeUint8 = function(l, f) {
            this.bytes_[l] = f;
          }, s.ByteBuffer.prototype.writeInt16 = function(l, f) {
            this.bytes_[l] = f, this.bytes_[l + 1] = f >> 8;
          }, s.ByteBuffer.prototype.writeUint16 = function(l, f) {
            this.bytes_[l] = f, this.bytes_[l + 1] = f >> 8;
          }, s.ByteBuffer.prototype.writeInt32 = function(l, f) {
            this.bytes_[l] = f, this.bytes_[l + 1] = f >> 8, this.bytes_[l + 2] = f >> 16, this.bytes_[l + 3] = f >> 24;
          }, s.ByteBuffer.prototype.writeUint32 = function(l, f) {
            this.bytes_[l] = f, this.bytes_[l + 1] = f >> 8, this.bytes_[l + 2] = f >> 16, this.bytes_[l + 3] = f >> 24;
          }, s.ByteBuffer.prototype.writeInt64 = function(l, f) {
            this.writeInt32(l, f.low), this.writeInt32(l + 4, f.high);
          }, s.ByteBuffer.prototype.writeUint64 = function(l, f) {
            this.writeUint32(l, f.low), this.writeUint32(l + 4, f.high);
          }, s.ByteBuffer.prototype.writeFloat32 = function(l, f) {
            s.float32[0] = f, this.writeInt32(l, s.int32[0]);
          }, s.ByteBuffer.prototype.writeFloat64 = function(l, f) {
            s.float64[0] = f, this.writeInt32(l, s.int32[s.isLittleEndian ? 0 : 1]), this.writeInt32(l + 4, s.int32[s.isLittleEndian ? 1 : 0]);
          }, s.ByteBuffer.prototype.getBufferIdentifier = function() {
            if (this.bytes_.length < this.position_ + s.SIZEOF_INT + s.FILE_IDENTIFIER_LENGTH)
              throw new Error("FlatBuffers: ByteBuffer is too short to contain an identifier.");
            for (var l = "", f = 0; f < s.FILE_IDENTIFIER_LENGTH; f++)
              l += String.fromCharCode(this.readInt8(this.position_ + s.SIZEOF_INT + f));
            return l;
          }, s.ByteBuffer.prototype.__offset = function(l, f) {
            var d = l - this.readInt32(l);
            return f < this.readInt16(d) ? this.readInt16(d + f) : 0;
          }, s.ByteBuffer.prototype.__union = function(l, f) {
            return l.bb_pos = f + this.readInt32(f), l.bb = this, l;
          }, s.ByteBuffer.prototype.__string = function(l, f) {
            l += this.readInt32(l);
            var d = this.readInt32(l), w = "", g = 0;
            if (l += s.SIZEOF_INT, f === s.Encoding.UTF8_BYTES)
              return this.bytes_.subarray(l, l + d);
            for (; g < d; ) {
              var _, h = this.readUint8(l + g++);
              if (h < 192)
                _ = h;
              else {
                var r = this.readUint8(l + g++);
                if (h < 224)
                  _ = (31 & h) << 6 | 63 & r;
                else {
                  var n = this.readUint8(l + g++);
                  _ = h < 240 ? (15 & h) << 12 | (63 & r) << 6 | 63 & n : (7 & h) << 18 | (63 & r) << 12 | (63 & n) << 6 | 63 & this.readUint8(l + g++);
                }
              }
              _ < 65536 ? w += String.fromCharCode(_) : (_ -= 65536, w += String.fromCharCode(55296 + (_ >> 10), 56320 + (1023 & _)));
            }
            return w;
          }, s.ByteBuffer.prototype.__indirect = function(l) {
            return l + this.readInt32(l);
          }, s.ByteBuffer.prototype.__vector = function(l) {
            return l + this.readInt32(l) + s.SIZEOF_INT;
          }, s.ByteBuffer.prototype.__vector_len = function(l) {
            return this.readInt32(l + this.readInt32(l));
          }, s.ByteBuffer.prototype.__has_identifier = function(l) {
            if (l.length != s.FILE_IDENTIFIER_LENGTH)
              throw new Error("FlatBuffers: file identifier must be length " + s.FILE_IDENTIFIER_LENGTH);
            for (var f = 0; f < s.FILE_IDENTIFIER_LENGTH; f++)
              if (l.charCodeAt(f) != this.readInt8(this.position_ + s.SIZEOF_INT + f))
                return false;
            return true;
          }, s.ByteBuffer.prototype.createLong = function(l, f) {
            return s.Long.create(l, f);
          };
        }
      }, __webpack_module_cache__ = {};
      function __webpack_require__(i) {
        var e = __webpack_module_cache__[i];
        if (e !== void 0)
          return e.exports;
        var t = __webpack_module_cache__[i] = {
          exports: {}
        };
        return __webpack_modules__[i].call(t.exports, t, t.exports, __webpack_require__), t.exports;
      }
      __webpack_require__.n = (i) => {
        var e = i && i.__esModule ? () => i.default : () => i;
        return __webpack_require__.d(e, {
          a: e
        }), e;
      }, __webpack_require__.d = (i, e) => {
        for (var t in e)
          __webpack_require__.o(e, t) && !__webpack_require__.o(i, t) && Object.defineProperty(i, t, {
            enumerable: true,
            get: e[t]
          });
      }, __webpack_require__.g = function() {
        if (typeof globalThis == "object")
          return globalThis;
        try {
          return this || new Function("return this")();
        } catch {
          if (typeof window == "object")
            return window;
        }
      }(), __webpack_require__.o = (i, e) => Object.prototype.hasOwnProperty.call(i, e), __webpack_require__.r = (i) => {
        typeof Symbol < "u" && Symbol.toStringTag && Object.defineProperty(i, Symbol.toStringTag, {
          value: "Module"
        }), Object.defineProperty(i, "__esModule", {
          value: true
        });
      };
      var __webpack_exports__ = __webpack_require__(6018);
      return __webpack_exports__;
    })());
  })(ortWeb_min$1);
  var ortWeb_minExports = ortWeb_min$1.exports;
  const ortWeb_min = getDefaultExportFromCjs(ortWeb_minExports), ONNX_WEB = _mergeNamespaces({
    __proto__: null,
    default: ortWeb_min
  }, [
    ortWeb_minExports
  ]);
  let ONNX;
  const executionProviders = [
    "wasm"
  ];
  typeof process < "u" && process?.release?.name === "node" ? (ONNX = sharp ?? ONNX_NODE, executionProviders.unshift("cpu")) : (ONNX = ortWeb_min ?? ONNX_WEB, typeof navigator < "u" && /iP(hone|od|ad).+16_4.+AppleWebKit/.test(navigator.userAgent) && (ONNX.env.wasm.simd = false));
  const { env: onnx_env } = ONNX, VERSION = "2.17.2", WEB_CACHE_AVAILABLE = typeof self < "u" && "caches" in self, FS_AVAILABLE = !isEmpty(sharp), PATH_AVAILABLE = !isEmpty(sharp), RUNNING_LOCALLY = FS_AVAILABLE && PATH_AVAILABLE, __dirname$1 = RUNNING_LOCALLY ? sharp.dirname(sharp.dirname(sharp.fileURLToPath(import.meta.url))) : "./", DEFAULT_CACHE_DIR = RUNNING_LOCALLY ? sharp.join(__dirname$1, "/.cache/") : null, DEFAULT_LOCAL_MODEL_PATH = "/models/", localModelPath = RUNNING_LOCALLY ? sharp.join(__dirname$1, DEFAULT_LOCAL_MODEL_PATH) : DEFAULT_LOCAL_MODEL_PATH;
  onnx_env?.wasm && (onnx_env.wasm.wasmPaths = RUNNING_LOCALLY ? sharp.join(__dirname$1, "/dist/") : `https://cdn.jsdelivr.net/npm/@xenova/transformers@${VERSION}/dist/`);
  const env$1 = {
    backends: {
      onnx: onnx_env,
      tfjs: {}
    },
    __dirname: __dirname$1,
    version: VERSION,
    allowRemoteModels: true,
    remoteHost: "https://huggingface.co/",
    remotePathTemplate: "{model}/resolve/{revision}/",
    allowLocalModels: true,
    localModelPath,
    useFS: FS_AVAILABLE,
    useBrowserCache: WEB_CACHE_AVAILABLE,
    useFSCache: FS_AVAILABLE,
    cacheDir: DEFAULT_CACHE_DIR,
    useCustomCache: false,
    customCache: null
  };
  function isEmpty(i) {
    return Object.keys(i).length === 0;
  }
  class FileResponse {
    constructor(e) {
      __publicField(this, "_CONTENT_TYPE_MAP", {
        txt: "text/plain",
        html: "text/html",
        css: "text/css",
        js: "text/javascript",
        json: "application/json",
        png: "image/png",
        jpg: "image/jpeg",
        jpeg: "image/jpeg",
        gif: "image/gif"
      });
      if (this.filePath = e, this.headers = new Headers(), this.exists = sharp.existsSync(e), this.exists) {
        this.status = 200, this.statusText = "OK";
        let t = sharp.statSync(e);
        this.headers.set("content-length", t.size.toString()), this.updateContentType();
        let s = this;
        this.body = new ReadableStream({
          start(l) {
            s.arrayBuffer().then((f) => {
              l.enqueue(new Uint8Array(f)), l.close();
            });
          }
        });
      } else
        this.status = 404, this.statusText = "Not Found", this.body = null;
    }
    updateContentType() {
      const e = this.filePath.toString().split(".").pop().toLowerCase();
      this.headers.set("content-type", this._CONTENT_TYPE_MAP[e] ?? "application/octet-stream");
    }
    clone() {
      let e = new FileResponse(this.filePath);
      return e.exists = this.exists, e.status = this.status, e.statusText = this.statusText, e.headers = new Headers(this.headers), e;
    }
    async arrayBuffer() {
      return (await sharp.promises.readFile(this.filePath)).buffer;
    }
    async blob() {
      const e = await sharp.promises.readFile(this.filePath);
      return new Blob([
        e
      ], {
        type: this.headers.get("content-type")
      });
    }
    async text() {
      return await sharp.promises.readFile(this.filePath, "utf8");
    }
    async json() {
      return JSON.parse(await this.text());
    }
  }
  function isValidUrl(i, e = null, t = null) {
    let s;
    try {
      s = new URL(i);
    } catch {
      return false;
    }
    return !(e && !e.includes(s.protocol) || t && !t.includes(s.hostname));
  }
  async function getFile(i) {
    if (env$1.useFS && !isValidUrl(i, [
      "http:",
      "https:",
      "blob:"
    ]))
      return new FileResponse(i);
    if (typeof process < "u" && process?.release?.name === "node") {
      const e = !!process.env?.TESTING_REMOTELY, t = env$1.version, s = new Headers();
      if (s.set("User-Agent", `transformers.js/${t}; is_ci/${e};`), isValidUrl(i, [
        "http:",
        "https:"
      ], [
        "huggingface.co",
        "hf.co"
      ])) {
        const f = process.env?.HF_TOKEN ?? process.env?.HF_ACCESS_TOKEN;
        f && s.set("Authorization", `Bearer ${f}`);
      }
      return fetch(i, {
        headers: s
      });
    } else
      return fetch(i);
  }
  const ERROR_MAPPING = {
    400: "Bad request error occurred while trying to load file",
    401: "Unauthorized access to file",
    403: "Forbidden access to file",
    404: "Could not locate file",
    408: "Request timeout error occurred while trying to load file",
    500: "Internal server error error occurred while trying to load file",
    502: "Bad gateway error occurred while trying to load file",
    503: "Service unavailable error occurred while trying to load file",
    504: "Gateway timeout error occurred while trying to load file"
  };
  function handleError(i, e, t) {
    if (!t)
      return null;
    const s = ERROR_MAPPING[i] ?? `Error (${i}) occurred while trying to load file`;
    throw Error(`${s}: "${e}".`);
  }
  class FileCache {
    constructor(e) {
      this.path = e;
    }
    async match(e) {
      let t = sharp.join(this.path, e), s = new FileResponse(t);
      if (s.exists)
        return s;
    }
    async put(e, t) {
      const s = Buffer.from(await t.arrayBuffer());
      let l = sharp.join(this.path, e);
      try {
        await sharp.promises.mkdir(sharp.dirname(l), {
          recursive: true
        }), await sharp.promises.writeFile(l, s);
      } catch (f) {
        console.warn("An error occurred while writing the file to cache:", f);
      }
    }
  }
  async function tryCache(i, ...e) {
    for (let t of e)
      try {
        let s = await i.match(t);
        if (s)
          return s;
      } catch {
        continue;
      }
  }
  async function getModelFile(i, e, t = true, s = {}) {
    if (!env$1.allowLocalModels) {
      if (s.local_files_only)
        throw Error("Invalid configuration detected: local models are disabled (`env.allowLocalModels=false`) but you have requested to only use local models (`local_files_only=true`).");
      if (!env$1.allowRemoteModels)
        throw Error("Invalid configuration detected: both local and remote models are disabled. Fix by setting `env.allowLocalModels` or `env.allowRemoteModels` to `true`.");
    }
    dispatchCallback(s.progress_callback, {
      status: "initiate",
      name: i,
      file: e
    });
    let l;
    if (!l && env$1.useBrowserCache) {
      if (typeof caches > "u")
        throw Error("Browser cache is not available in this environment.");
      try {
        l = await caches.open("transformers-cache");
      } catch (E) {
        console.warn("An error occurred while opening the browser cache:", E);
      }
    }
    if (!l && env$1.useFSCache && (l = new FileCache(s.cache_dir ?? env$1.cacheDir)), !l && env$1.useCustomCache)
      throw Error("`env.useCustomCache=true`, but `env.customCache` is not defined.");
    const f = s.revision ?? "main";
    let d = pathJoin(i, e), w = pathJoin(env$1.localModelPath, d), g = pathJoin(env$1.remoteHost, env$1.remotePathTemplate.replaceAll("{model}", i).replaceAll("{revision}", encodeURIComponent(f)), e), _ = f === "main" ? d : pathJoin(i, f, e), h, r = l instanceof FileCache ? _ : g, n = false, u;
    l && (u = await tryCache(l, w, r));
    const p = u !== void 0;
    if (u === void 0) {
      if (env$1.allowLocalModels)
        if (isValidUrl(d, [
          "http:",
          "https:"
        ])) {
          if (s.local_files_only)
            throw new Error(`\`local_files_only=true\`, but attempted to load a remote file from: ${d}.`);
          if (!env$1.allowRemoteModels)
            throw new Error(`\`env.allowRemoteModels=false\`, but attempted to load a remote file from: ${d}.`);
        } else
          try {
            u = await getFile(w), h = w;
          } catch (k) {
            console.warn(`Unable to load from local path "${w}": "${k}"`);
          }
      if (u === void 0 || u.status === 404) {
        if (s.local_files_only || !env$1.allowRemoteModels) {
          if (t)
            throw Error(`\`local_files_only=true\` or \`env.allowRemoteModels=false\` and file was not found locally at "${w}".`);
          return null;
        }
        if (u = await getFile(g), u.status !== 200)
          return handleError(u.status, g, t);
        h = r;
      }
      n = l && typeof Response < "u" && u instanceof Response && u.status === 200;
    }
    dispatchCallback(s.progress_callback, {
      status: "download",
      name: i,
      file: e
    });
    const M = {
      status: "progress",
      name: i,
      file: e
    };
    let P;
    return s.progress_callback ? p && typeof navigator < "u" && /firefox/i.test(navigator.userAgent) ? (P = new Uint8Array(await u.arrayBuffer()), dispatchCallback(s.progress_callback, {
      ...M,
      progress: 100,
      loaded: P.length,
      total: P.length
    })) : P = await readResponse(u, (E) => {
      dispatchCallback(s.progress_callback, {
        ...M,
        ...E
      });
    }) : P = new Uint8Array(await u.arrayBuffer()), n && h && await l.match(h) === void 0 && await l.put(h, new Response(P, {
      headers: u.headers
    })).catch((E) => {
      console.warn(`Unable to add response to browser cache: ${E}.`);
    }), dispatchCallback(s.progress_callback, {
      status: "done",
      name: i,
      file: e
    }), P;
  }
  async function getModelJSON(i, e, t = true, s = {}) {
    let l = await getModelFile(i, e, t, s);
    if (l === null)
      return {};
    let d = new TextDecoder("utf-8").decode(l);
    return JSON.parse(d);
  }
  async function readResponse(i, e) {
    const t = i.headers.get("Content-Length");
    t === null && console.warn("Unable to determine content-length from response headers. Will expand buffer when needed.");
    let s = parseInt(t ?? "0"), l = new Uint8Array(s), f = 0;
    const d = i.body.getReader();
    async function w() {
      const { done: g, value: _ } = await d.read();
      if (g)
        return;
      let h = f + _.length;
      if (h > s) {
        s = h;
        let n = new Uint8Array(s);
        n.set(l), l = n;
      }
      l.set(_, f), f = h;
      const r = f / s * 100;
      return e({
        progress: r,
        loaded: f,
        total: s
      }), w();
    }
    return await w(), l;
  }
  function pathJoin(...i) {
    return i = i.map((e, t) => (t && (e = e.replace(new RegExp("^/"), "")), t !== i.length - 1 && (e = e.replace(new RegExp("/$"), "")), e)), i.join("/");
  }
  function interpolate_data(i, [e, t, s], [l, f], d = "bilinear", w = false) {
    const g = f / s, _ = l / t, h = new i.constructor(l * f * e), r = t * s, n = l * f;
    for (let u = 0; u < l; ++u)
      for (let p = 0; p < f; ++p) {
        const M = u * f + p, P = (p + 0.5) / g - 0.5, E = (u + 0.5) / _ - 0.5;
        let k = Math.floor(P), $ = Math.floor(E);
        const A = Math.min(k + 1, s - 1), C = Math.min($ + 1, t - 1);
        k = Math.max(k, 0), $ = Math.max($, 0);
        const F = P - k, D = E - $, N = (1 - F) * (1 - D), R = F * (1 - D), j = (1 - F) * D, Z = F * D, te = $ * s, J = C * s, G = te + k, H = te + A, U = J + k, Q = J + A;
        for (let he = 0; he < e; ++he) {
          const fe = he * r;
          h[he * n + M] = N * i[fe + G] + R * i[fe + H] + j * i[fe + U] + Z * i[fe + Q];
        }
      }
    return h;
  }
  function permute_data(i, e, t) {
    const s = new Array(t.length), l = new Array(t.length);
    for (let w = t.length - 1, g = 1; w >= 0; --w)
      l[w] = g, s[w] = e[t[w]], g *= s[w];
    const f = t.map((w, g) => l[t.indexOf(g)]), d = new i.constructor(i.length);
    for (let w = 0; w < i.length; ++w) {
      let g = 0;
      for (let _ = e.length - 1, h = w; _ >= 0; --_)
        g += h % e[_] * f[_], h = Math.floor(h / e[_]);
      d[g] = i[w];
    }
    return [
      d,
      s
    ];
  }
  function softmax(i) {
    const e = max(i)[0], t = i.map((f) => Math.exp(f - e)), s = t.reduce((f, d) => f + d, 0);
    return t.map((f) => f / s);
  }
  function log_softmax(i) {
    return softmax(i).map((s) => Math.log(s));
  }
  function getTopItems(i, e = 0) {
    return i = Array.from(i).map((t, s) => [
      s,
      t
    ]).sort((t, s) => s[1] - t[1]), e !== null && e > 0 && (i = i.slice(0, e)), i;
  }
  function min(i) {
    if (i.length === 0)
      throw Error("Array must not be empty");
    let e = i[0], t = 0;
    for (let s = 1; s < i.length; ++s)
      i[s] < e && (e = i[s], t = s);
    return [
      e,
      t
    ];
  }
  function max(i) {
    if (i.length === 0)
      throw Error("Array must not be empty");
    let e = i[0], t = 0;
    for (let s = 1; s < i.length; ++s)
      i[s] > e && (e = i[s], t = s);
    return [
      Number(e),
      t
    ];
  }
  function isPowerOfTwo(i) {
    return i > 0 && (i & i - 1) === 0;
  }
  class P2FFT {
    constructor(e) {
      if (this.size = e | 0, this.size <= 1 || !isPowerOfTwo(this.size))
        throw new Error("FFT size must be a power of two larger than 1");
      this._csize = e << 1, this.table = new Float64Array(this.size * 2);
      for (let s = 0; s < this.table.length; s += 2) {
        const l = Math.PI * s / this.size;
        this.table[s] = Math.cos(l), this.table[s + 1] = -Math.sin(l);
      }
      let t = 0;
      for (let s = 1; this.size > s; s <<= 1)
        ++t;
      this._width = t % 2 === 0 ? t - 1 : t, this._bitrev = new Int32Array(1 << this._width);
      for (let s = 0; s < this._bitrev.length; ++s) {
        this._bitrev[s] = 0;
        for (let l = 0; l < this._width; l += 2) {
          const f = this._width - l - 2;
          this._bitrev[s] |= (s >>> l & 3) << f;
        }
      }
    }
    createComplexArray() {
      return new Float64Array(this._csize);
    }
    fromComplexArray(e, t) {
      const s = t || new Array(e.length >>> 1);
      for (let l = 0; l < e.length; l += 2)
        s[l >>> 1] = e[l];
      return s;
    }
    toComplexArray(e, t) {
      const s = t || this.createComplexArray();
      for (let l = 0; l < s.length; l += 2)
        s[l] = e[l >>> 1], s[l + 1] = 0;
      return s;
    }
    transform(e, t) {
      if (e === t)
        throw new Error("Input and output buffers must be different");
      this._transform4(e, t, 1);
    }
    realTransform(e, t) {
      if (e === t)
        throw new Error("Input and output buffers must be different");
      this._realTransform4(e, t, 1);
    }
    inverseTransform(e, t) {
      if (e === t)
        throw new Error("Input and output buffers must be different");
      this._transform4(e, t, -1);
      for (let s = 0; s < e.length; ++s)
        e[s] /= this.size;
    }
    _transform4(e, t, s) {
      const l = this._csize;
      let d = 1 << this._width, w = l / d << 1, g, _;
      const h = this._bitrev;
      if (w === 4)
        for (g = 0, _ = 0; g < l; g += w, ++_) {
          const n = h[_];
          this._singleTransform2(t, e, g, n, d);
        }
      else
        for (g = 0, _ = 0; g < l; g += w, ++_) {
          const n = h[_];
          this._singleTransform4(t, e, g, n, d, s);
        }
      const r = this.table;
      for (d >>= 2; d >= 2; d >>= 2) {
        w = l / d << 1;
        const n = w >>> 2;
        for (g = 0; g < l; g += w) {
          const u = g + n - 1;
          for (let p = g, M = 0; p < u; p += 2, M += d) {
            const P = p, E = P + n, k = E + n, $ = k + n, A = e[P], C = e[P + 1], F = e[E], D = e[E + 1], N = e[k], R = e[k + 1], j = e[$], Z = e[$ + 1], te = r[M], J = s * r[M + 1], G = F * te - D * J, H = F * J + D * te, U = r[2 * M], Q = s * r[2 * M + 1], he = N * U - R * Q, fe = N * Q + R * U, Me = r[3 * M], pe = s * r[3 * M + 1], oe = j * Me - Z * pe, be = j * pe + Z * Me, Ee = A + he, Oe = C + fe, Ye = A - he, We = C - fe, ot = G + oe, vt = H + be, qe = s * (G - oe), _e = s * (H - be);
            e[P] = Ee + ot, e[P + 1] = Oe + vt, e[E] = Ye + _e, e[E + 1] = We - qe, e[k] = Ee - ot, e[k + 1] = Oe - vt, e[$] = Ye - _e, e[$ + 1] = We + qe;
          }
        }
      }
    }
    _singleTransform2(e, t, s, l, f) {
      const d = e[l], w = e[l + 1], g = e[l + f], _ = e[l + f + 1];
      t[s] = d + g, t[s + 1] = w + _, t[s + 2] = d - g, t[s + 3] = w - _;
    }
    _singleTransform4(e, t, s, l, f, d) {
      const w = f * 2, g = f * 3, _ = e[l], h = e[l + 1], r = e[l + f], n = e[l + f + 1], u = e[l + w], p = e[l + w + 1], M = e[l + g], P = e[l + g + 1], E = _ + u, k = h + p, $ = _ - u, A = h - p, C = r + M, F = n + P, D = d * (r - M), N = d * (n - P);
      t[s] = E + C, t[s + 1] = k + F, t[s + 2] = $ + N, t[s + 3] = A - D, t[s + 4] = E - C, t[s + 5] = k - F, t[s + 6] = $ - N, t[s + 7] = A + D;
    }
    _realTransform4(e, t, s) {
      const l = this._csize;
      let d = 1 << this._width, w = l / d << 1, g, _;
      const h = this._bitrev;
      if (w === 4)
        for (g = 0, _ = 0; g < l; g += w, ++_) {
          const u = h[_];
          this._singleRealTransform2(t, e, g, u >>> 1, d >>> 1);
        }
      else
        for (g = 0, _ = 0; g < l; g += w, ++_) {
          const u = h[_];
          this._singleRealTransform4(t, e, g, u >>> 1, d >>> 1, s);
        }
      const r = this.table;
      for (d >>= 2; d >= 2; d >>= 2) {
        w = l / d << 1;
        const u = w >>> 1, p = u >>> 1, M = p >>> 1;
        for (g = 0; g < l; g += w)
          for (let P = 0, E = 0; P <= M; P += 2, E += d) {
            const k = g + P, $ = k + p, A = $ + p, C = A + p, F = e[k], D = e[k + 1], N = e[$], R = e[$ + 1], j = e[A], Z = e[A + 1], te = e[C], J = e[C + 1], G = F, H = D, U = r[E], Q = s * r[E + 1], he = N * U - R * Q, fe = N * Q + R * U, Me = r[2 * E], pe = s * r[2 * E + 1], oe = j * Me - Z * pe, be = j * pe + Z * Me, Ee = r[3 * E], Oe = s * r[3 * E + 1], Ye = te * Ee - J * Oe, We = te * Oe + J * Ee, ot = G + oe, vt = H + be, qe = G - oe, _e = H - be, le = he + Ye, De = fe + We, Be = s * (he - Ye), Ze = s * (fe - We);
            if (e[k] = ot + le, e[k + 1] = vt + De, e[$] = qe + Ze, e[$ + 1] = _e - Be, P === 0) {
              e[A] = ot - le, e[A + 1] = vt - De;
              continue;
            }
            if (P === M)
              continue;
            const rt = g + p - P, je = g + u - P;
            e[rt] = qe - s * Ze, e[rt + 1] = -_e - s * Be, e[je] = ot - s * le, e[je + 1] = -vt + s * De;
          }
      }
      const n = l >>> 1;
      for (let u = 2; u < n; u += 2)
        e[l - u] = e[u], e[l - u + 1] = -e[u + 1];
    }
    _singleRealTransform2(e, t, s, l, f) {
      const d = e[l], w = e[l + f];
      t[s] = d + w, t[s + 1] = 0, t[s + 2] = d - w, t[s + 3] = 0;
    }
    _singleRealTransform4(e, t, s, l, f, d) {
      const w = f * 2, g = f * 3, _ = e[l], h = e[l + f], r = e[l + w], n = e[l + g], u = _ + r, p = _ - r, M = h + n, P = d * (h - n);
      t[s] = u + M, t[s + 1] = 0, t[s + 2] = p, t[s + 3] = -P, t[s + 4] = u - M, t[s + 5] = 0, t[s + 6] = p, t[s + 7] = P;
    }
  }
  class NP2FFT {
    constructor(e) {
      const t = 2 * (e - 1), s = 2 * (2 * e - 1), l = 2 ** Math.ceil(Math.log2(s));
      this.bufferSize = l, this._a = t;
      const f = new Float64Array(s), d = new Float64Array(l);
      this._chirpBuffer = new Float64Array(l), this._buffer1 = new Float64Array(l), this._buffer2 = new Float64Array(l), this._outBuffer1 = new Float64Array(l), this._outBuffer2 = new Float64Array(l);
      const w = -2 * Math.PI / e, g = Math.cos(w), _ = Math.sin(w);
      for (let h = 0; h < s >> 1; ++h) {
        const r = (h + 1 - e) ** 2 / 2, n = Math.sqrt(g ** 2 + _ ** 2) ** r, u = r * Math.atan2(_, g), p = 2 * h;
        f[p] = n * Math.cos(u), f[p + 1] = n * Math.sin(u), d[p] = f[p], d[p + 1] = -f[p + 1];
      }
      this._slicedChirpBuffer = f.subarray(t, s), this._f = new P2FFT(l >> 1), this._f.transform(this._chirpBuffer, d);
    }
    _transform(e, t, s) {
      const l = this._buffer1, f = this._buffer2, d = this._outBuffer1, w = this._outBuffer2, g = this._chirpBuffer, _ = this._slicedChirpBuffer, h = this._a;
      if (s)
        for (let r = 0; r < _.length; r += 2) {
          const n = r + 1, u = r >> 1, p = t[u];
          l[r] = p * _[r], l[n] = p * _[n];
        }
      else
        for (let r = 0; r < _.length; r += 2) {
          const n = r + 1;
          l[r] = t[r] * _[r] - t[n] * _[n], l[n] = t[r] * _[n] + t[n] * _[r];
        }
      this._f.transform(d, l);
      for (let r = 0; r < g.length; r += 2) {
        const n = r + 1;
        f[r] = d[r] * g[r] - d[n] * g[n], f[n] = d[r] * g[n] + d[n] * g[r];
      }
      this._f.inverseTransform(w, f);
      for (let r = 0; r < w.length; r += 2) {
        const n = w[r + h], u = w[r + h + 1], p = _[r], M = _[r + 1];
        e[r] = n * p - u * M, e[r + 1] = n * M + u * p;
      }
    }
    transform(e, t) {
      this._transform(e, t, false);
    }
    realTransform(e, t) {
      this._transform(e, t, true);
    }
  }
  class FFT {
    constructor(e) {
      this.fft_length = e, this.isPowerOfTwo = isPowerOfTwo(e), this.isPowerOfTwo ? (this.fft = new P2FFT(e), this.outputBufferSize = 2 * e) : (this.fft = new NP2FFT(e), this.outputBufferSize = this.fft.bufferSize);
    }
    realTransform(e, t) {
      this.fft.realTransform(e, t);
    }
    transform(e, t) {
      this.fft.transform(e, t);
    }
  }
  function medianFilter(i, e) {
    if (e % 2 === 0 || e <= 0)
      throw new Error("Window size must be a positive odd number");
    const t = new i.constructor(i.length), s = new i.constructor(e), l = Math.floor(e / 2);
    for (let f = 0; f < i.length; ++f) {
      let d = 0;
      for (let w = -l; w <= l; ++w) {
        let g = f + w;
        g < 0 ? g = Math.abs(g) : g >= i.length && (g = 2 * (i.length - 1) - g), s[d++] = i[g];
      }
      s.sort(), t[f] = s[l];
    }
    return t;
  }
  function round(i, e) {
    const t = Math.pow(10, e);
    return Math.round(i * t) / t;
  }
  function bankers_round(i) {
    const e = Math.round(i);
    return Math.abs(i) % 1 === 0.5 ? e % 2 === 0 ? e : e - 1 : e;
  }
  const DataTypeMap = Object.freeze({
    float32: Float32Array,
    float64: Float64Array,
    string: Array,
    int8: Int8Array,
    uint8: Uint8Array,
    int16: Int16Array,
    uint16: Uint16Array,
    int32: Int32Array,
    uint32: Uint32Array,
    int64: BigInt64Array,
    uint64: BigUint64Array,
    bool: Uint8Array
  }), ONNXTensor$1 = ONNX.Tensor;
  class Tensor {
    constructor(...e) {
      __publicField(this, "dims");
      __publicField(this, "type");
      __publicField(this, "data");
      __publicField(this, "size");
      return e[0] instanceof ONNXTensor$1 ? Object.assign(this, e[0]) : Object.assign(this, new ONNXTensor$1(e[0], e[1], e[2])), new Proxy(this, {
        get: (t, s) => {
          if (typeof s == "string") {
            let l = Number(s);
            if (Number.isInteger(l))
              return t._getitem(l);
          }
          return t[s];
        },
        set: (t, s, l) => t[s] = l
      });
    }
    *[Symbol.iterator]() {
      const [e, ...t] = this.dims;
      if (t.length > 0) {
        const s = t.reduce((l, f) => l * f);
        for (let l = 0; l < e; ++l)
          yield this._subarray(l, s, t);
      } else
        yield* this.data;
    }
    _getitem(e) {
      const [t, ...s] = this.dims;
      if (e = safeIndex(e, t), s.length > 0) {
        const l = s.reduce((f, d) => f * d);
        return this._subarray(e, l, s);
      } else
        return new Tensor(this.type, [
          this.data[e]
        ], s);
    }
    indexOf(e) {
      for (let t = 0; t < this.data.length; ++t)
        if (this.data[t] == e)
          return t;
      return -1;
    }
    _subarray(e, t, s) {
      const l = e * t, f = (e + 1) * t, d = "subarray" in this.data ? this.data.subarray(l, f) : this.data.slice(l, f);
      return new Tensor(this.type, d, s);
    }
    item() {
      if (this.data.length !== 1)
        throw new Error(`a Tensor with ${this.data.length} elements cannot be converted to Scalar`);
      return this.data[0];
    }
    tolist() {
      return reshape(this.data, this.dims);
    }
    sigmoid() {
      return this.clone().sigmoid_();
    }
    sigmoid_() {
      for (let e = 0; e < this.data.length; ++e)
        this.data[e] = 1 / (1 + Math.exp(-this.data[e]));
      return this;
    }
    mul(e) {
      return this.clone().mul_(e);
    }
    mul_(e) {
      for (let t = 0; t < this.data.length; ++t)
        this.data[t] *= e;
      return this;
    }
    add(e) {
      return this.clone().add_(e);
    }
    add_(e) {
      for (let t = 0; t < this.data.length; ++t)
        this.data[t] += e;
      return this;
    }
    clone() {
      return new Tensor(this.type, this.data.slice(), this.dims.slice());
    }
    slice(...e) {
      let t = [], s = [];
      for (let g = 0; g < this.dims.length; ++g) {
        let _ = e[g];
        if (_ == null)
          s.push([
            0,
            this.dims[g]
          ]), t.push(this.dims[g]);
        else if (typeof _ == "number")
          _ = safeIndex(_, this.dims[g], g), s.push([
            _,
            _ + 1
          ]);
        else if (Array.isArray(_) && _.length === 2) {
          if (_[0] > _[1])
            throw new Error(`Invalid slice: ${_}`);
          let h = [
            Math.max(_[0], 0),
            Math.min(_[1], this.dims[g])
          ];
          s.push(h), t.push(h[1] - h[0]);
        } else
          throw new Error(`Invalid slice: ${_}`);
      }
      let l = s.map(([g, _]) => _ - g), f = l.reduce((g, _) => g * _), d = new this.data.constructor(f);
      const w = this.stride();
      for (let g = 0; g < f; ++g) {
        let _ = 0;
        for (let h = l.length - 1, r = g; h >= 0; --h) {
          const n = l[h];
          _ += (r % n + s[h][0]) * w[h], r = Math.floor(r / n);
        }
        d[g] = this.data[_];
      }
      return new Tensor(this.type, d, t);
    }
    permute(...e) {
      return permute(this, e);
    }
    transpose(...e) {
      return this.permute(...e);
    }
    sum(e = null, t = false) {
      return this.norm(1, e, t);
    }
    norm(e = "fro", t = null, s = false) {
      if (e === "fro")
        e = 2;
      else if (typeof e == "string")
        throw Error(`Unsupported norm: ${e}`);
      if (t === null) {
        let d = this.data.reduce((w, g) => w + g ** e, 0) ** (1 / e);
        return new Tensor(this.type, [
          d
        ], []);
      }
      t = safeIndex(t, this.dims.length);
      const l = this.dims.slice();
      l[t] = 1;
      const f = new this.data.constructor(this.data.length / this.dims[t]);
      for (let d = 0; d < this.data.length; ++d) {
        let w = 0;
        for (let g = this.dims.length - 1, _ = d, h = 1; g >= 0; --g) {
          const r = this.dims[g];
          if (g !== t) {
            const n = _ % r;
            w += n * h, h *= l[g];
          }
          _ = Math.floor(_ / r);
        }
        f[w] += this.data[d] ** e;
      }
      if (e !== 1)
        for (let d = 0; d < f.length; ++d)
          f[d] = f[d] ** (1 / e);
      return s || l.splice(t, 1), new Tensor(this.type, f, l);
    }
    normalize_(e = 2, t = 1) {
      t = safeIndex(t, this.dims.length);
      const s = this.norm(e, t, true);
      for (let l = 0; l < this.data.length; ++l) {
        let f = 0;
        for (let d = this.dims.length - 1, w = l, g = 1; d >= 0; --d) {
          const _ = this.dims[d];
          if (d !== t) {
            const h = w % _;
            f += h * g, g *= this.dims[d];
          }
          w = Math.floor(w / _);
        }
        this.data[l] /= s.data[f];
      }
      return this;
    }
    normalize(e = 2, t = 1) {
      return this.clone().normalize_(e, t);
    }
    stride() {
      return dimsToStride(this.dims);
    }
    squeeze(e = null) {
      return new Tensor(this.type, this.data, calc_squeeze_dims(this.dims, e));
    }
    squeeze_(e = null) {
      return this.dims = calc_squeeze_dims(this.dims, e), this;
    }
    unsqueeze(e = null) {
      return new Tensor(this.type, this.data, calc_unsqueeze_dims(this.dims, e));
    }
    unsqueeze_(e = null) {
      return this.dims = calc_unsqueeze_dims(this.dims, e), this;
    }
    flatten_(e = 0, t = -1) {
      t = (t + this.dims.length) % this.dims.length;
      let s = this.dims.slice(0, e), l = this.dims.slice(e, t + 1), f = this.dims.slice(t + 1);
      return this.dims = [
        ...s,
        l.reduce((d, w) => d * w, 1),
        ...f
      ], this;
    }
    flatten(e = 0, t = -1) {
      return this.clone().flatten_(e, t);
    }
    view(...e) {
      let t = -1;
      for (let s = 0; s < e.length; ++s)
        if (e[s] === -1) {
          if (t !== -1)
            throw new Error("Only one dimension can be inferred");
          t = s;
        }
      if (t !== -1) {
        const s = e.reduce((l, f, d) => d !== t ? l * f : l, 1);
        e[t] = this.data.length / s;
      }
      return new Tensor(this.type, this.data, e);
    }
    neg_() {
      for (let e = 0; e < this.data.length; ++e)
        this.data[e] = -this.data[e];
      return this;
    }
    neg() {
      return this.clone().neg_();
    }
    clamp_(e, t) {
      for (let s = 0; s < this.data.length; ++s)
        this.data[s] = Math.min(Math.max(this.data[s], e), t);
      return this;
    }
    clamp(e, t) {
      return this.clone().clamp_(e, t);
    }
    round_() {
      for (let e = 0; e < this.data.length; ++e)
        this.data[e] = Math.round(this.data[e]);
      return this;
    }
    round() {
      return this.clone().round_();
    }
    to(e) {
      if (this.type === e)
        return this;
      if (!DataTypeMap.hasOwnProperty(e))
        throw new Error(`Unsupported type: ${e}`);
      return new Tensor(e, DataTypeMap[e].from(this.data), this.dims);
    }
  }
  function reshape(i, e) {
    const t = i.length, s = e.reduce((f, d) => f * d);
    if (t !== s)
      throw Error(`cannot reshape array of size ${t} into shape (${e})`);
    let l = i;
    for (let f = e.length - 1; f >= 0; f--)
      l = l.reduce((d, w) => {
        let g = d[d.length - 1];
        return g.length < e[f] ? g.push(w) : d.push([
          w
        ]), d;
      }, [
        []
      ]);
    return l[0];
  }
  function permute(i, e) {
    const [t, s] = permute_data(i.data, i.dims, e);
    return new Tensor(i.type, t, s);
  }
  function interpolate(i, [e, t], s = "bilinear", l = false) {
    const f = i.dims.at(-3) ?? 1, d = i.dims.at(-2), w = i.dims.at(-1);
    let g = interpolate_data(i.data, [
      f,
      d,
      w
    ], [
      e,
      t
    ], s, l);
    return new Tensor(i.type, g, [
      f,
      e,
      t
    ]);
  }
  function mean_pooling(i, e) {
    let t = [
      i.dims[0],
      i.dims[2]
    ], s = new i.data.constructor(t[0] * t[1]), [l, f, d] = i.dims, w = 0;
    for (let g = 0; g < l; ++g) {
      let _ = g * d * f;
      for (let h = 0; h < d; ++h) {
        let r = 0, n = 0, u = g * f, p = _ + h;
        for (let P = 0; P < f; ++P) {
          let E = Number(e.data[u + P]);
          n += E, r += i.data[p + P * d] * E;
        }
        let M = r / n;
        s[w++] = M;
      }
    }
    return new Tensor(i.type, s, t);
  }
  function calc_squeeze_dims(i, e) {
    return i = i.slice(), e === null ? i = i.filter((t) => t !== 1) : typeof e == "number" ? i[e] === 1 && i.splice(e, 1) : Array.isArray(e) && (i = i.filter((t, s) => t !== 1 || !e.includes(s))), i;
  }
  function calc_unsqueeze_dims(i, e) {
    return e = safeIndex(e, i.length + 1), i = i.slice(), i.splice(e, 0, 1), i;
  }
  function safeIndex(i, e, t = null) {
    if (i < -e || i >= e)
      throw new Error(`IndexError: index ${i} is out of bounds for dimension${t === null ? "" : " " + t} with size ${e}`);
    return i < 0 && (i = (i % e + e) % e), i;
  }
  function cat(i, e = 0) {
    e = safeIndex(e, i[0].dims.length);
    const t = i[0].dims.slice();
    t[e] = i.reduce((d, w) => d + w.dims[e], 0);
    const s = t.reduce((d, w) => d * w, 1), l = new i[0].data.constructor(s), f = i[0].type;
    if (e === 0) {
      let d = 0;
      for (let w of i)
        l.set(w.data, d), d += w.data.length;
    } else {
      let d = 0;
      for (let w = 0; w < i.length; ++w) {
        let g = i[w];
        for (let _ = 0; _ < g.data.length; ++_) {
          let h = 0;
          for (let r = g.dims.length - 1, n = _, u = 1; r >= 0; --r) {
            const p = g.dims[r];
            let M = n % p;
            r === e && (M += d), h += M * u, u *= t[r], n = Math.floor(n / p);
          }
          l[h] = g.data[_];
        }
        d += g.dims[e];
      }
    }
    return new Tensor(f, l, t);
  }
  function stack(i, e = 0) {
    return cat(i.map((t) => t.unsqueeze(e)), e);
  }
  function std_mean(i, e = null, t = 1, s = false) {
    if (e === null) {
      const _ = i.data.reduce((u, p) => u + p, 0) / i.data.length, h = Math.sqrt(i.data.reduce((u, p) => u + (p - _) ** 2, 0) / (i.data.length - t)), r = new Tensor(i.type, [
        _
      ], []);
      return [
        new Tensor(i.type, [
          h
        ], []),
        r
      ];
    }
    e = safeIndex(e, i.dims.length);
    const l = mean(i, e, s), f = i.dims.slice();
    f[e] = 1;
    const d = new i.data.constructor(i.data.length / i.dims[e]);
    for (let g = 0; g < i.data.length; ++g) {
      let _ = 0;
      for (let h = i.dims.length - 1, r = g, n = 1; h >= 0; --h) {
        const u = i.dims[h];
        if (h !== e) {
          const p = r % u;
          _ += p * n, n *= f[h];
        }
        r = Math.floor(r / u);
      }
      d[_] += (i.data[g] - l.data[_]) ** 2;
    }
    for (let g = 0; g < d.length; ++g)
      d[g] = Math.sqrt(d[g] / (i.dims[e] - t));
    return s || f.splice(e, 1), [
      new Tensor(i.type, d, f),
      l
    ];
  }
  function mean(i, e = null, t = false) {
    if (e === null) {
      let f = i.data.reduce((d, w) => d + w, 0);
      return new Tensor(i.type, [
        f / i.data.length
      ], []);
    }
    e = safeIndex(e, i.dims.length);
    const s = i.dims.slice();
    s[e] = 1;
    const l = new i.data.constructor(i.data.length / i.dims[e]);
    for (let f = 0; f < i.data.length; ++f) {
      let d = 0;
      for (let w = i.dims.length - 1, g = f, _ = 1; w >= 0; --w) {
        const h = i.dims[w];
        if (w !== e) {
          const r = g % h;
          d += r * _, _ *= s[w];
        }
        g = Math.floor(g / h);
      }
      l[d] += i.data[f];
    }
    if (i.dims[e] !== 1)
      for (let f = 0; f < l.length; ++f)
        l[f] = l[f] / i.dims[e];
    return t || s.splice(e, 1), new Tensor(i.type, l, s);
  }
  function dynamicTimeWarping(i) {
    const [e, t] = i.dims, s = [
      e + 1,
      t + 1
    ], l = new Tensor("float32", new Float32Array(s[0] * s[1]).fill(1 / 0), s), f = new Tensor("float32", new Float32Array(s[0] * s[1]).fill(-1), s);
    l[0].data[0] = 0;
    for (let h = 1; h < t + 1; ++h)
      for (let r = 1; r < e + 1; ++r) {
        const n = l[r - 1][h - 1].item(), u = l[r - 1][h].item(), p = l[r][h - 1].item();
        let M, P;
        n < u && n < p ? (M = n, P = 0) : u < n && u < p ? (M = u, P = 1) : (M = p, P = 2), l[r].data[h] = i[r - 1][h - 1].item() + M, f[r].data[h] = P;
      }
    let d = e, w = t;
    f.data.fill(2, 0, s[1]);
    for (let h = 0; h < s[0]; ++h)
      f[h].data[0] = 1;
    let g = [], _ = [];
    for (; d > 0 || w > 0; )
      switch (g.push(d - 1), _.push(w - 1), f[d][w].item()) {
        case 0:
          --d, --w;
          break;
        case 1:
          --d;
          break;
        case 2:
          --w;
          break;
        default:
          throw new Error(`Internal error in dynamic time warping. Unexpected trace[${d}, ${w}]. Please file a bug report.`);
      }
    return g.reverse(), _.reverse(), [
      g,
      _
    ];
  }
  function dimsToStride(i) {
    const e = new Array(i.length);
    for (let t = i.length - 1, s = 1; t >= 0; --t)
      e[t] = s, s *= i[t];
    return e;
  }
  function ones(i) {
    const e = i.reduce((t, s) => t * s, 1);
    return new Tensor("int64", new BigInt64Array(e).fill(1n), i);
  }
  function ones_like(i) {
    return ones(i.dims);
  }
  function quantize_embeddings(i, e) {
    if (i.dims.length !== 2)
      throw new Error("The tensor must have 2 dimensions");
    if (i.dims.at(-1) % 8 !== 0)
      throw new Error("The last dimension of the tensor must be a multiple of 8");
    if (![
      "binary",
      "ubinary"
    ].includes(e))
      throw new Error("The precision must be either 'binary' or 'ubinary'");
    const t = e === "binary", s = t ? "int8" : "uint8", l = t ? Int8Array : Uint8Array, f = i.data, d = new l(f.length / 8);
    for (let w = 0; w < f.length; ++w) {
      const g = f[w] > 0 ? 1 : 0, _ = Math.floor(w / 8), h = w % 8;
      d[_] |= g << 7 - h, t && h === 0 && (d[_] -= 128);
    }
    return new Tensor(s, d, [
      i.dims[0],
      i.dims[1] / 8
    ]);
  }
  class PriorityQueue {
    constructor(e = (t, s) => t > s) {
      this._heap = [], this._comparator = e;
    }
    get size() {
      return this._heap.length;
    }
    isEmpty() {
      return this.size === 0;
    }
    peek() {
      return this._heap[0];
    }
    push(...e) {
      return this.extend(e);
    }
    extend(e) {
      for (const t of e)
        this._heap.push(t), this._siftUp();
      return this.size;
    }
    pop() {
      const e = this.peek(), t = this.size - 1;
      return t > 0 && this._swap(0, t), this._heap.pop(), this._siftDown(), e;
    }
    replace(e) {
      const t = this.peek();
      return this._heap[0] = e, this._siftDown(), t;
    }
    _parent(e) {
      return (e + 1 >>> 1) - 1;
    }
    _left(e) {
      return (e << 1) + 1;
    }
    _right(e) {
      return e + 1 << 1;
    }
    _greater(e, t) {
      return this._comparator(this._heap[e], this._heap[t]);
    }
    _swap(e, t) {
      const s = this._heap[e];
      this._heap[e] = this._heap[t], this._heap[t] = s;
    }
    _siftUp() {
      let e = this.size - 1;
      for (; e > 0 && this._greater(e, this._parent(e)); )
        this._swap(e, this._parent(e)), e = this._parent(e);
    }
    _siftDown() {
      let e = 0;
      for (; this._left(e) < this.size && this._greater(this._left(e), e) || this._right(e) < this.size && this._greater(this._right(e), e); ) {
        const t = this._right(e) < this.size && this._greater(this._right(e), this._left(e)) ? this._right(e) : this._left(e);
        this._swap(e, t), e = t;
      }
    }
  }
  class CharTrie {
    constructor() {
      this.root = CharTrieNode.default();
    }
    extend(e) {
      for (let t of e)
        this.push(t);
    }
    push(e) {
      let t = this.root;
      for (let s of e) {
        let l = t.children.get(s);
        l === void 0 && (l = CharTrieNode.default(), t.children.set(s, l)), t = l;
      }
      t.isLeaf = true;
    }
    *commonPrefixSearch(e) {
      let t = this.root, s = "";
      for (let l = 0; l < e.length && t !== void 0; ++l) {
        const f = e[l];
        s += f, t = t.children.get(f), t !== void 0 && t.isLeaf && (yield s);
      }
    }
  }
  class CharTrieNode {
    constructor(e, t) {
      this.isLeaf = e, this.children = t;
    }
    static default() {
      return new CharTrieNode(false, /* @__PURE__ */ new Map());
    }
  }
  class TokenLattice {
    constructor(e, t, s) {
      this.sentence = e, this.len = e.length, this.bosTokenId = t, this.eosTokenId = s, this.nodes = [], this.beginNodes = Array.from({
        length: this.len + 1
      }, () => []), this.endNodes = Array.from({
        length: this.len + 1
      }, () => []);
      const l = new TokenLatticeNode(this.bosTokenId, 0, 0, 0, 0), f = new TokenLatticeNode(this.eosTokenId, 1, this.len, 0, 0);
      this.nodes.push(l.clone()), this.nodes.push(f.clone()), this.beginNodes[this.len].push(f), this.endNodes[0].push(l);
    }
    insert(e, t, s, l) {
      const f = this.nodes.length, d = new TokenLatticeNode(l, f, e, t, s);
      this.beginNodes[e].push(d), this.endNodes[e + t].push(d), this.nodes.push(d);
    }
    viterbi() {
      const e = this.len;
      let t = 0;
      for (; t <= e; ) {
        if (this.beginNodes[t].length == 0)
          return [];
        for (let w of this.beginNodes[t]) {
          w.prev = null;
          let g = 0, _ = null;
          for (let h of this.endNodes[t]) {
            const r = h.backtraceScore + w.score;
            (_ === null || r > g) && (_ = h.clone(), g = r);
          }
          if (_ !== null)
            w.prev = _, w.backtraceScore = g;
          else
            return [];
        }
        ++t;
      }
      const s = [], f = this.beginNodes[e][0].prev;
      if (f === null)
        return [];
      let d = f.clone();
      for (; d.prev !== null; )
        s.push(d.clone()), d = d.clone().prev.clone();
      return s.reverse(), s;
    }
    piece(e) {
      return this.sentence.slice(e.pos, e.pos + e.length);
    }
    tokens() {
      return this.viterbi().map((t) => this.piece(t));
    }
    tokenIds() {
      return this.viterbi().map((t) => t.tokenId);
    }
  }
  class TokenLatticeNode {
    constructor(e, t, s, l, f) {
      this.tokenId = e, this.nodeId = t, this.pos = s, this.length = l, this.score = f, this.prev = null, this.backtraceScore = 0;
    }
    clone() {
      const e = new TokenLatticeNode(this.tokenId, this.nodeId, this.pos, this.length, this.score);
      return e.prev = this.prev, e.backtraceScore = this.backtraceScore, e;
    }
  }
  var TOKEN_TYPES = Object.freeze({
    Text: "Text",
    NumericLiteral: "NumericLiteral",
    BooleanLiteral: "BooleanLiteral",
    StringLiteral: "StringLiteral",
    Identifier: "Identifier",
    Equals: "Equals",
    OpenParen: "OpenParen",
    CloseParen: "CloseParen",
    OpenStatement: "OpenStatement",
    CloseStatement: "CloseStatement",
    OpenExpression: "OpenExpression",
    CloseExpression: "CloseExpression",
    OpenSquareBracket: "OpenSquareBracket",
    CloseSquareBracket: "CloseSquareBracket",
    OpenCurlyBracket: "OpenCurlyBracket",
    CloseCurlyBracket: "CloseCurlyBracket",
    Comma: "Comma",
    Dot: "Dot",
    Colon: "Colon",
    Pipe: "Pipe",
    CallOperator: "CallOperator",
    AdditiveBinaryOperator: "AdditiveBinaryOperator",
    MultiplicativeBinaryOperator: "MultiplicativeBinaryOperator",
    ComparisonBinaryOperator: "ComparisonBinaryOperator",
    UnaryOperator: "UnaryOperator",
    Set: "Set",
    If: "If",
    For: "For",
    In: "In",
    Is: "Is",
    NotIn: "NotIn",
    Else: "Else",
    EndIf: "EndIf",
    ElseIf: "ElseIf",
    EndFor: "EndFor",
    And: "And",
    Or: "Or",
    Not: "UnaryOperator"
  }), KEYWORDS = Object.freeze({
    set: TOKEN_TYPES.Set,
    for: TOKEN_TYPES.For,
    in: TOKEN_TYPES.In,
    is: TOKEN_TYPES.Is,
    if: TOKEN_TYPES.If,
    else: TOKEN_TYPES.Else,
    endif: TOKEN_TYPES.EndIf,
    elif: TOKEN_TYPES.ElseIf,
    endfor: TOKEN_TYPES.EndFor,
    and: TOKEN_TYPES.And,
    or: TOKEN_TYPES.Or,
    not: TOKEN_TYPES.Not,
    "not in": TOKEN_TYPES.NotIn,
    true: TOKEN_TYPES.BooleanLiteral,
    false: TOKEN_TYPES.BooleanLiteral
  }), Token = class {
    constructor(i, e) {
      this.value = i, this.type = e;
    }
  };
  function isWord(i) {
    return /\w/.test(i);
  }
  function isInteger(i) {
    return /[0-9]/.test(i);
  }
  var ORDERED_MAPPING_TABLE = [
    [
      "{%",
      TOKEN_TYPES.OpenStatement
    ],
    [
      "%}",
      TOKEN_TYPES.CloseStatement
    ],
    [
      "{{",
      TOKEN_TYPES.OpenExpression
    ],
    [
      "}}",
      TOKEN_TYPES.CloseExpression
    ],
    [
      "(",
      TOKEN_TYPES.OpenParen
    ],
    [
      ")",
      TOKEN_TYPES.CloseParen
    ],
    [
      "{",
      TOKEN_TYPES.OpenCurlyBracket
    ],
    [
      "}",
      TOKEN_TYPES.CloseCurlyBracket
    ],
    [
      "[",
      TOKEN_TYPES.OpenSquareBracket
    ],
    [
      "]",
      TOKEN_TYPES.CloseSquareBracket
    ],
    [
      ",",
      TOKEN_TYPES.Comma
    ],
    [
      ".",
      TOKEN_TYPES.Dot
    ],
    [
      ":",
      TOKEN_TYPES.Colon
    ],
    [
      "|",
      TOKEN_TYPES.Pipe
    ],
    [
      "<=",
      TOKEN_TYPES.ComparisonBinaryOperator
    ],
    [
      ">=",
      TOKEN_TYPES.ComparisonBinaryOperator
    ],
    [
      "==",
      TOKEN_TYPES.ComparisonBinaryOperator
    ],
    [
      "!=",
      TOKEN_TYPES.ComparisonBinaryOperator
    ],
    [
      "<",
      TOKEN_TYPES.ComparisonBinaryOperator
    ],
    [
      ">",
      TOKEN_TYPES.ComparisonBinaryOperator
    ],
    [
      "+",
      TOKEN_TYPES.AdditiveBinaryOperator
    ],
    [
      "-",
      TOKEN_TYPES.AdditiveBinaryOperator
    ],
    [
      "*",
      TOKEN_TYPES.MultiplicativeBinaryOperator
    ],
    [
      "/",
      TOKEN_TYPES.MultiplicativeBinaryOperator
    ],
    [
      "%",
      TOKEN_TYPES.MultiplicativeBinaryOperator
    ],
    [
      "=",
      TOKEN_TYPES.Equals
    ]
  ], ESCAPE_CHARACTERS = /* @__PURE__ */ new Map([
    [
      "n",
      `
`
    ],
    [
      "t",
      "	"
    ],
    [
      "r",
      "\r"
    ],
    [
      "b",
      "\b"
    ],
    [
      "f",
      "\f"
    ],
    [
      "v",
      "\v"
    ],
    [
      "'",
      "'"
    ],
    [
      '"',
      '"'
    ],
    [
      "\\",
      "\\"
    ]
  ]);
  function preprocess(i, e = {}) {
    return i.endsWith(`
`) && (i = i.slice(0, -1)), i = i.replace(/{#.*?#}/gs, "{##}"), e.lstrip_blocks && (i = i.replace(/^[ \t]*({[#%])/gm, "$1")), e.trim_blocks && (i = i.replace(/([#%]})\n/g, "$1")), i.replace(/{##}/g, "").replace(/-%}\s*/g, "%}").replace(/\s*{%-/g, "{%").replace(/-}}\s*/g, "}}").replace(/\s*{{-/g, "{{");
  }
  function tokenize(i, e = {}) {
    const t = [], s = preprocess(i, e);
    let l = 0;
    const f = (d) => {
      let w = "";
      for (; d(s[l]); ) {
        if (s[l] === "\\") {
          if (++l, l >= s.length)
            throw new SyntaxError("Unexpected end of input");
          const g = s[l++], _ = ESCAPE_CHARACTERS.get(g);
          if (_ === void 0)
            throw new SyntaxError(`Unexpected escaped character: ${g}`);
          w += _;
          continue;
        }
        if (w += s[l++], l >= s.length)
          throw new SyntaxError("Unexpected end of input");
      }
      return w;
    };
    e:
      for (; l < s.length; ) {
        const d = t.at(-1)?.type;
        if (d === void 0 || d === TOKEN_TYPES.CloseStatement || d === TOKEN_TYPES.CloseExpression) {
          let g = "";
          for (; l < s.length && !(s[l] === "{" && (s[l + 1] === "%" || s[l + 1] === "{")); )
            g += s[l++];
          if (g.length > 0) {
            t.push(new Token(g, TOKEN_TYPES.Text));
            continue;
          }
        }
        f((g) => /\s/.test(g));
        const w = s[l];
        if (w === "-" || w === "+") {
          const g = t.at(-1)?.type;
          if (g === TOKEN_TYPES.Text || g === void 0)
            throw new SyntaxError(`Unexpected character: ${w}`);
          switch (g) {
            case TOKEN_TYPES.Identifier:
            case TOKEN_TYPES.NumericLiteral:
            case TOKEN_TYPES.BooleanLiteral:
            case TOKEN_TYPES.StringLiteral:
            case TOKEN_TYPES.CloseParen:
            case TOKEN_TYPES.CloseSquareBracket:
              break;
            default: {
              ++l;
              const _ = f(isInteger);
              t.push(new Token(`${w}${_}`, _.length > 0 ? TOKEN_TYPES.NumericLiteral : TOKEN_TYPES.UnaryOperator));
              continue;
            }
          }
        }
        for (const [g, _] of ORDERED_MAPPING_TABLE)
          if (s.slice(l, l + g.length) === g) {
            t.push(new Token(g, _)), l += g.length;
            continue e;
          }
        if (w === "'" || w === '"') {
          ++l;
          const g = f((_) => _ !== w);
          t.push(new Token(g, TOKEN_TYPES.StringLiteral)), ++l;
          continue;
        }
        if (isInteger(w)) {
          const g = f(isInteger);
          t.push(new Token(g, TOKEN_TYPES.NumericLiteral));
          continue;
        }
        if (isWord(w)) {
          const g = f(isWord), _ = Object.hasOwn(KEYWORDS, g) ? KEYWORDS[g] : TOKEN_TYPES.Identifier;
          _ === TOKEN_TYPES.In && t.at(-1)?.type === TOKEN_TYPES.Not ? (t.pop(), t.push(new Token("not in", TOKEN_TYPES.NotIn))) : t.push(new Token(g, _));
          continue;
        }
        throw new SyntaxError(`Unexpected character: ${w}`);
      }
    return t;
  }
  var Statement = class {
    constructor() {
      __publicField(this, "type", "Statement");
    }
  }, Program = class extends Statement {
    constructor(i) {
      super();
      __publicField(this, "type", "Program");
      this.body = i;
    }
  }, If = class extends Statement {
    constructor(i, e, t) {
      super();
      __publicField(this, "type", "If");
      this.test = i, this.body = e, this.alternate = t;
    }
  }, For = class extends Statement {
    constructor(i, e, t) {
      super();
      __publicField(this, "type", "For");
      this.loopvar = i, this.iterable = e, this.body = t;
    }
  }, SetStatement = class extends Statement {
    constructor(i, e) {
      super();
      __publicField(this, "type", "Set");
      this.assignee = i, this.value = e;
    }
  }, Expression = class extends Statement {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "Expression");
    }
  }, MemberExpression = class extends Expression {
    constructor(i, e, t) {
      super();
      __publicField(this, "type", "MemberExpression");
      this.object = i, this.property = e, this.computed = t;
    }
  }, CallExpression = class extends Expression {
    constructor(i, e) {
      super();
      __publicField(this, "type", "CallExpression");
      this.callee = i, this.args = e;
    }
  }, Identifier = class extends Expression {
    constructor(i) {
      super();
      __publicField(this, "type", "Identifier");
      this.value = i;
    }
  }, Literal = class extends Expression {
    constructor(i) {
      super();
      __publicField(this, "type", "Literal");
      this.value = i;
    }
  }, NumericLiteral = class extends Literal {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "NumericLiteral");
    }
  }, StringLiteral = class extends Literal {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "StringLiteral");
    }
  }, BooleanLiteral = class extends Literal {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "BooleanLiteral");
    }
  }, ArrayLiteral = class extends Literal {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "ArrayLiteral");
    }
  }, TupleLiteral = class extends Literal {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "TupleLiteral");
    }
  }, ObjectLiteral = class extends Literal {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "ObjectLiteral");
    }
  }, BinaryExpression = class extends Expression {
    constructor(i, e, t) {
      super();
      __publicField(this, "type", "BinaryExpression");
      this.operator = i, this.left = e, this.right = t;
    }
  }, FilterExpression = class extends Expression {
    constructor(i, e) {
      super();
      __publicField(this, "type", "FilterExpression");
      this.operand = i, this.filter = e;
    }
  }, TestExpression = class extends Expression {
    constructor(i, e, t) {
      super();
      __publicField(this, "type", "TestExpression");
      this.operand = i, this.negate = e, this.test = t;
    }
  }, UnaryExpression = class extends Expression {
    constructor(i, e) {
      super();
      __publicField(this, "type", "UnaryExpression");
      this.operator = i, this.argument = e;
    }
  }, SliceExpression = class extends Expression {
    constructor(i = void 0, e = void 0, t = void 0) {
      super();
      __publicField(this, "type", "SliceExpression");
      this.start = i, this.stop = e, this.step = t;
    }
  }, KeywordArgumentExpression = class extends Expression {
    constructor(i, e) {
      super();
      __publicField(this, "type", "KeywordArgumentExpression");
      this.key = i, this.value = e;
    }
  };
  function parse(i) {
    const e = new Program([]);
    let t = 0;
    function s(H, U) {
      const Q = i[t++];
      if (!Q || Q.type !== H)
        throw new Error(`Parser Error: ${U}. ${Q.type} !== ${H}.`);
      return Q;
    }
    function l() {
      switch (i[t].type) {
        case TOKEN_TYPES.Text:
          return w();
        case TOKEN_TYPES.OpenStatement:
          return g();
        case TOKEN_TYPES.OpenExpression:
          return _();
        default:
          throw new SyntaxError(`Unexpected token type: ${i[t].type}`);
      }
    }
    function f(...H) {
      return t + H.length <= i.length && H.some((U, Q) => U !== i[t + Q].type);
    }
    function d(...H) {
      return t + H.length <= i.length && H.every((U, Q) => U === i[t + Q].type);
    }
    function w() {
      return new StringLiteral(s(TOKEN_TYPES.Text, "Expected text token").value);
    }
    function g() {
      s(TOKEN_TYPES.OpenStatement, "Expected opening statement token");
      let H;
      switch (i[t].type) {
        case TOKEN_TYPES.Set:
          ++t, H = h(), s(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
          break;
        case TOKEN_TYPES.If:
          ++t, H = r(), s(TOKEN_TYPES.OpenStatement, "Expected {% token"), s(TOKEN_TYPES.EndIf, "Expected endif token"), s(TOKEN_TYPES.CloseStatement, "Expected %} token");
          break;
        case TOKEN_TYPES.For:
          ++t, H = u(), s(TOKEN_TYPES.OpenStatement, "Expected {% token"), s(TOKEN_TYPES.EndFor, "Expected endfor token"), s(TOKEN_TYPES.CloseStatement, "Expected %} token");
          break;
        default:
          throw new SyntaxError(`Unknown statement type: ${i[t].type}`);
      }
      return H;
    }
    function _() {
      s(TOKEN_TYPES.OpenExpression, "Expected opening expression token");
      const H = p();
      return s(TOKEN_TYPES.CloseExpression, "Expected closing expression token"), H;
    }
    function h() {
      const H = p();
      if (d(TOKEN_TYPES.Equals)) {
        ++t;
        const U = h();
        return new SetStatement(H, U);
      }
      return H;
    }
    function r() {
      const H = p();
      s(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
      const U = [], Q = [];
      for (; !(i[t]?.type === TOKEN_TYPES.OpenStatement && (i[t + 1]?.type === TOKEN_TYPES.ElseIf || i[t + 1]?.type === TOKEN_TYPES.Else || i[t + 1]?.type === TOKEN_TYPES.EndIf)); )
        U.push(l());
      if (i[t]?.type === TOKEN_TYPES.OpenStatement && i[t + 1]?.type !== TOKEN_TYPES.EndIf)
        if (++t, d(TOKEN_TYPES.ElseIf))
          s(TOKEN_TYPES.ElseIf, "Expected elseif token"), Q.push(r());
        else
          for (s(TOKEN_TYPES.Else, "Expected else token"), s(TOKEN_TYPES.CloseStatement, "Expected closing statement token"); !(i[t]?.type === TOKEN_TYPES.OpenStatement && i[t + 1]?.type === TOKEN_TYPES.EndIf); )
            Q.push(l());
      return new If(H, U, Q);
    }
    function n(H = false) {
      const U = H ? G : p, Q = [
        U()
      ], he = d(TOKEN_TYPES.Comma);
      for (; he && (++t, Q.push(U()), !!d(TOKEN_TYPES.Comma)); )
        ;
      return he ? new TupleLiteral(Q) : Q[0];
    }
    function u() {
      const H = n(true);
      if (!(H instanceof Identifier || H instanceof TupleLiteral))
        throw new SyntaxError(`Expected identifier/tuple for the loop variable, got ${H.type} instead`);
      s(TOKEN_TYPES.In, "Expected `in` keyword following loop variable");
      const U = p();
      s(TOKEN_TYPES.CloseStatement, "Expected closing statement token");
      const Q = [];
      for (; f(TOKEN_TYPES.OpenStatement, TOKEN_TYPES.EndFor); )
        Q.push(l());
      return new For(H, U, Q);
    }
    function p() {
      return M();
    }
    function M() {
      const H = P();
      if (d(TOKEN_TYPES.If)) {
        ++t;
        const U = P();
        s(TOKEN_TYPES.Else, "Expected else token");
        const Q = P();
        return new If(U, [
          H
        ], [
          Q
        ]);
      }
      return H;
    }
    function P() {
      let H = E();
      for (; d(TOKEN_TYPES.Or); ) {
        const U = i[t];
        ++t;
        const Q = E();
        H = new BinaryExpression(U, H, Q);
      }
      return H;
    }
    function E() {
      let H = k();
      for (; d(TOKEN_TYPES.And); ) {
        const U = i[t];
        ++t;
        const Q = k();
        H = new BinaryExpression(U, H, Q);
      }
      return H;
    }
    function k() {
      let H;
      for (; d(TOKEN_TYPES.Not); ) {
        const U = i[t];
        ++t;
        const Q = k();
        H = new UnaryExpression(U, Q);
      }
      return H ?? $();
    }
    function $() {
      let H = A();
      for (; d(TOKEN_TYPES.ComparisonBinaryOperator) || d(TOKEN_TYPES.In) || d(TOKEN_TYPES.NotIn); ) {
        const U = i[t];
        ++t;
        const Q = A();
        H = new BinaryExpression(U, H, Q);
      }
      return H;
    }
    function A() {
      let H = Z();
      for (; d(TOKEN_TYPES.AdditiveBinaryOperator); ) {
        const U = i[t];
        ++t;
        const Q = Z();
        H = new BinaryExpression(U, H, Q);
      }
      return H;
    }
    function C() {
      const H = j();
      return d(TOKEN_TYPES.OpenParen) ? F(H) : H;
    }
    function F(H) {
      let U = new CallExpression(H, D());
      return d(TOKEN_TYPES.OpenParen) && (U = F(U)), U;
    }
    function D() {
      s(TOKEN_TYPES.OpenParen, "Expected opening parenthesis for arguments list");
      const H = N();
      return s(TOKEN_TYPES.CloseParen, "Expected closing parenthesis for arguments list"), H;
    }
    function N() {
      const H = [];
      for (; !d(TOKEN_TYPES.CloseParen); ) {
        let U = p();
        if (d(TOKEN_TYPES.Equals)) {
          if (++t, !(U instanceof Identifier))
            throw new SyntaxError("Expected identifier for keyword argument");
          const Q = p();
          U = new KeywordArgumentExpression(U, Q);
        }
        H.push(U), d(TOKEN_TYPES.Comma) && ++t;
      }
      return H;
    }
    function R() {
      const H = [];
      let U = false;
      for (; !d(TOKEN_TYPES.CloseSquareBracket); )
        d(TOKEN_TYPES.Colon) ? (H.push(void 0), ++t, U = true) : (H.push(p()), d(TOKEN_TYPES.Colon) && (++t, U = true));
      if (H.length === 0)
        throw new SyntaxError("Expected at least one argument for member/slice expression");
      if (U) {
        if (H.length > 3)
          throw new SyntaxError("Expected 0-3 arguments for slice expression");
        return new SliceExpression(...H);
      }
      return H[0];
    }
    function j() {
      let H = G();
      for (; d(TOKEN_TYPES.Dot) || d(TOKEN_TYPES.OpenSquareBracket); ) {
        const U = i[t];
        ++t;
        let Q;
        const he = U.type !== TOKEN_TYPES.Dot;
        if (he)
          Q = R(), s(TOKEN_TYPES.CloseSquareBracket, "Expected closing square bracket");
        else if (Q = G(), Q.type !== "Identifier")
          throw new SyntaxError("Expected identifier following dot operator");
        H = new MemberExpression(H, Q, he);
      }
      return H;
    }
    function Z() {
      let H = te();
      for (; d(TOKEN_TYPES.MultiplicativeBinaryOperator); ) {
        const U = i[t];
        ++t;
        const Q = te();
        H = new BinaryExpression(U, H, Q);
      }
      return H;
    }
    function te() {
      let H = J();
      for (; d(TOKEN_TYPES.Is); ) {
        ++t;
        const U = d(TOKEN_TYPES.Not);
        U && ++t;
        let Q = G();
        if (Q instanceof BooleanLiteral && (Q = new Identifier(Q.value.toString())), !(Q instanceof Identifier))
          throw new SyntaxError("Expected identifier for the test");
        H = new TestExpression(H, U, Q);
      }
      return H;
    }
    function J() {
      let H = C();
      for (; d(TOKEN_TYPES.Pipe); ) {
        ++t;
        let U = G();
        if (!(U instanceof Identifier))
          throw new SyntaxError("Expected identifier for the filter");
        d(TOKEN_TYPES.OpenParen) && (U = F(U)), H = new FilterExpression(H, U);
      }
      return H;
    }
    function G() {
      const H = i[t];
      switch (H.type) {
        case TOKEN_TYPES.NumericLiteral:
          return ++t, new NumericLiteral(Number(H.value));
        case TOKEN_TYPES.StringLiteral:
          return ++t, new StringLiteral(H.value);
        case TOKEN_TYPES.BooleanLiteral:
          return ++t, new BooleanLiteral(H.value === "true");
        case TOKEN_TYPES.Identifier:
          return ++t, new Identifier(H.value);
        case TOKEN_TYPES.OpenParen: {
          ++t;
          const U = n();
          if (i[t].type !== TOKEN_TYPES.CloseParen)
            throw new SyntaxError(`Expected closing parenthesis, got ${i[t].type} instead`);
          return ++t, U;
        }
        case TOKEN_TYPES.OpenSquareBracket: {
          ++t;
          const U = [];
          for (; !d(TOKEN_TYPES.CloseSquareBracket); )
            U.push(p()), d(TOKEN_TYPES.Comma) && ++t;
          return ++t, new ArrayLiteral(U);
        }
        case TOKEN_TYPES.OpenCurlyBracket: {
          ++t;
          const U = /* @__PURE__ */ new Map();
          for (; !d(TOKEN_TYPES.CloseCurlyBracket); ) {
            const Q = p();
            s(TOKEN_TYPES.Colon, "Expected colon between key and value in object literal");
            const he = p();
            U.set(Q, he), d(TOKEN_TYPES.Comma) && ++t;
          }
          return ++t, new ObjectLiteral(U);
        }
        default:
          throw new SyntaxError(`Unexpected token: ${H.type}`);
      }
    }
    for (; t < i.length; )
      e.body.push(l());
    return e;
  }
  function range(i, e, t = 1) {
    e === void 0 && (e = i, i = 0);
    const s = [];
    for (let l = i; l < e; l += t)
      s.push(l);
    return s;
  }
  function slice(i, e, t, s = 1) {
    const l = Math.sign(s);
    l >= 0 ? (e = (e ?? (e = 0)) < 0 ? Math.max(i.length + e, 0) : Math.min(e, i.length), t = (t ?? (t = i.length)) < 0 ? Math.max(i.length + t, 0) : Math.min(t, i.length)) : (e = (e ?? (e = i.length - 1)) < 0 ? Math.max(i.length + e, -1) : Math.min(e, i.length - 1), t = (t ?? (t = -1)) < -1 ? Math.max(i.length + t, -1) : Math.min(t, i.length - 1));
    const f = [];
    for (let d = e; l * d < l * t; d += s)
      f.push(i[d]);
    return f;
  }
  function titleCase(i) {
    return i.replace(/\b\w/g, (e) => e.toUpperCase());
  }
  var RuntimeValue = class {
    constructor(i = void 0) {
      __publicField(this, "type", "RuntimeValue");
      __publicField(this, "value");
      __publicField(this, "builtins", /* @__PURE__ */ new Map());
      this.value = i;
    }
    __bool__() {
      return new BooleanValue(!!this.value);
    }
  }, NumericValue = class extends RuntimeValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "NumericValue");
    }
  }, StringValue = class extends RuntimeValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "StringValue");
      __publicField(this, "builtins", /* @__PURE__ */ new Map([
        [
          "upper",
          new FunctionValue(() => new StringValue(this.value.toUpperCase()))
        ],
        [
          "lower",
          new FunctionValue(() => new StringValue(this.value.toLowerCase()))
        ],
        [
          "strip",
          new FunctionValue(() => new StringValue(this.value.trim()))
        ],
        [
          "title",
          new FunctionValue(() => new StringValue(titleCase(this.value)))
        ],
        [
          "length",
          new NumericValue(this.value.length)
        ]
      ]));
    }
  }, BooleanValue = class extends RuntimeValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "BooleanValue");
    }
  }, ObjectValue = class extends RuntimeValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "ObjectValue");
      __publicField(this, "builtins", /* @__PURE__ */ new Map([
        [
          "get",
          new FunctionValue(([i, e]) => {
            if (!(i instanceof StringValue))
              throw new Error(`Object key must be a string: got ${i.type}`);
            return this.value.get(i.value) ?? e ?? new NullValue();
          })
        ],
        [
          "items",
          new FunctionValue(() => new ArrayValue(Array.from(this.value.entries()).map(([i, e]) => new ArrayValue([
            new StringValue(i),
            e
          ]))))
        ]
      ]));
    }
    __bool__() {
      return new BooleanValue(this.value.size > 0);
    }
  }, ArrayValue = class extends RuntimeValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "ArrayValue");
      __publicField(this, "builtins", /* @__PURE__ */ new Map([
        [
          "length",
          new NumericValue(this.value.length)
        ]
      ]));
    }
    __bool__() {
      return new BooleanValue(this.value.length > 0);
    }
  }, TupleValue = class extends ArrayValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "TupleValue");
    }
  }, FunctionValue = class extends RuntimeValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "FunctionValue");
    }
  }, NullValue = class extends RuntimeValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "NullValue");
    }
  }, UndefinedValue = class extends RuntimeValue {
    constructor() {
      super(...arguments);
      __publicField(this, "type", "UndefinedValue");
    }
  }, Environment = class {
    constructor(i) {
      __publicField(this, "variables", /* @__PURE__ */ new Map([
        [
          "namespace",
          new FunctionValue((i) => {
            if (i.length === 0)
              return new ObjectValue(/* @__PURE__ */ new Map());
            if (i.length !== 1 || !(i[0] instanceof ObjectValue))
              throw new Error("`namespace` expects either zero arguments or a single object argument");
            return i[0];
          })
        ]
      ]));
      __publicField(this, "tests", /* @__PURE__ */ new Map([
        [
          "boolean",
          (i) => i.type === "BooleanValue"
        ],
        [
          "callable",
          (i) => i instanceof FunctionValue
        ],
        [
          "odd",
          (i) => {
            if (i.type !== "NumericValue")
              throw new Error(`Cannot apply test "odd" to type: ${i.type}`);
            return i.value % 2 !== 0;
          }
        ],
        [
          "even",
          (i) => {
            if (i.type !== "NumericValue")
              throw new Error(`Cannot apply test "even" to type: ${i.type}`);
            return i.value % 2 === 0;
          }
        ],
        [
          "false",
          (i) => i.type === "BooleanValue" && !i.value
        ],
        [
          "true",
          (i) => i.type === "BooleanValue" && i.value
        ],
        [
          "number",
          (i) => i.type === "NumericValue"
        ],
        [
          "integer",
          (i) => i.type === "NumericValue" && Number.isInteger(i.value)
        ],
        [
          "iterable",
          (i) => i instanceof ArrayValue || i instanceof StringValue
        ],
        [
          "lower",
          (i) => {
            const e = i.value;
            return i.type === "StringValue" && e === e.toLowerCase();
          }
        ],
        [
          "upper",
          (i) => {
            const e = i.value;
            return i.type === "StringValue" && e === e.toUpperCase();
          }
        ],
        [
          "none",
          (i) => i.type === "NullValue"
        ],
        [
          "defined",
          (i) => i.type !== "UndefinedValue"
        ],
        [
          "undefined",
          (i) => i.type === "UndefinedValue"
        ],
        [
          "equalto",
          (i, e) => i.value === e.value
        ]
      ]));
      this.parent = i;
    }
    set(i, e) {
      return this.declareVariable(i, convertToRuntimeValues(e));
    }
    declareVariable(i, e) {
      if (this.variables.has(i))
        throw new SyntaxError(`Variable already declared: ${i}`);
      return this.variables.set(i, e), e;
    }
    setVariable(i, e) {
      return this.variables.set(i, e), e;
    }
    resolve(i) {
      if (this.variables.has(i))
        return this;
      if (this.parent)
        return this.parent.resolve(i);
      throw new Error(`Unknown variable: ${i}`);
    }
    lookupVariable(i) {
      try {
        return this.resolve(i).variables.get(i) ?? new UndefinedValue();
      } catch {
        return new UndefinedValue();
      }
    }
  }, Interpreter = class {
    constructor(i) {
      __publicField(this, "global");
      this.global = i ?? new Environment();
    }
    run(i) {
      return this.evaluate(i, this.global);
    }
    evaluateBinaryExpression(i, e) {
      const t = this.evaluate(i.left, e);
      switch (i.operator.value) {
        case "and":
          return t.__bool__().value ? this.evaluate(i.right, e) : t;
        case "or":
          return t.__bool__().value ? t : this.evaluate(i.right, e);
      }
      const s = this.evaluate(i.right, e);
      switch (i.operator.value) {
        case "==":
          return new BooleanValue(t.value == s.value);
        case "!=":
          return new BooleanValue(t.value != s.value);
      }
      if (t instanceof UndefinedValue || s instanceof UndefinedValue)
        throw new Error("Cannot perform operation on undefined values");
      if (t instanceof NullValue || s instanceof NullValue)
        throw new Error("Cannot perform operation on null values");
      if (t instanceof NumericValue && s instanceof NumericValue)
        switch (i.operator.value) {
          case "+":
            return new NumericValue(t.value + s.value);
          case "-":
            return new NumericValue(t.value - s.value);
          case "*":
            return new NumericValue(t.value * s.value);
          case "/":
            return new NumericValue(t.value / s.value);
          case "%":
            return new NumericValue(t.value % s.value);
          case "<":
            return new BooleanValue(t.value < s.value);
          case ">":
            return new BooleanValue(t.value > s.value);
          case ">=":
            return new BooleanValue(t.value >= s.value);
          case "<=":
            return new BooleanValue(t.value <= s.value);
        }
      else if (t instanceof ArrayValue && s instanceof ArrayValue)
        switch (i.operator.value) {
          case "+":
            return new ArrayValue(t.value.concat(s.value));
        }
      else if (s instanceof ArrayValue) {
        const l = s.value.find((f) => f.value === t.value) !== void 0;
        switch (i.operator.value) {
          case "in":
            return new BooleanValue(l);
          case "not in":
            return new BooleanValue(!l);
        }
      }
      if (t instanceof StringValue || s instanceof StringValue)
        switch (i.operator.value) {
          case "+":
            return new StringValue(t.value.toString() + s.value.toString());
        }
      if (t instanceof StringValue && s instanceof StringValue)
        switch (i.operator.value) {
          case "in":
            return new BooleanValue(s.value.includes(t.value));
          case "not in":
            return new BooleanValue(!s.value.includes(t.value));
        }
      if (t instanceof StringValue && s instanceof ObjectValue)
        switch (i.operator.value) {
          case "in":
            return new BooleanValue(s.value.has(t.value));
          case "not in":
            return new BooleanValue(!s.value.has(t.value));
        }
      throw new SyntaxError(`Unknown operator "${i.operator.value}" between ${t.type} and ${s.type}`);
    }
    evaluateFilterExpression(i, e) {
      const t = this.evaluate(i.operand, e);
      if (i.filter.type === "Identifier") {
        const s = i.filter;
        if (t instanceof ArrayValue)
          switch (s.value) {
            case "list":
              return t;
            case "first":
              return t.value[0];
            case "last":
              return t.value[t.value.length - 1];
            case "length":
              return new NumericValue(t.value.length);
            case "reverse":
              return new ArrayValue(t.value.reverse());
            case "sort":
              return new ArrayValue(t.value.sort((l, f) => {
                if (l.type !== f.type)
                  throw new Error(`Cannot compare different types: ${l.type} and ${f.type}`);
                switch (l.type) {
                  case "NumericValue":
                    return l.value - f.value;
                  case "StringValue":
                    return l.value.localeCompare(f.value);
                  default:
                    throw new Error(`Cannot compare type: ${l.type}`);
                }
              }));
            default:
              throw new Error(`Unknown ArrayValue filter: ${s.value}`);
          }
        else if (t instanceof StringValue)
          switch (s.value) {
            case "length":
              return new NumericValue(t.value.length);
            case "upper":
              return new StringValue(t.value.toUpperCase());
            case "lower":
              return new StringValue(t.value.toLowerCase());
            case "title":
              return new StringValue(titleCase(t.value));
            case "capitalize":
              return new StringValue(t.value.charAt(0).toUpperCase() + t.value.slice(1));
            case "trim":
              return new StringValue(t.value.trim());
            default:
              throw new Error(`Unknown StringValue filter: ${s.value}`);
          }
        else if (t instanceof NumericValue)
          switch (s.value) {
            case "abs":
              return new NumericValue(Math.abs(t.value));
            default:
              throw new Error(`Unknown NumericValue filter: ${s.value}`);
          }
        else if (t instanceof ObjectValue)
          switch (s.value) {
            case "items":
              return new ArrayValue(Array.from(t.value.entries()).map(([l, f]) => new ArrayValue([
                new StringValue(l),
                f
              ])));
            case "length":
              return new NumericValue(t.value.size);
            default:
              throw new Error(`Unknown ObjectValue filter: ${s.value}`);
          }
        throw new Error(`Cannot apply filter "${s.value}" to type: ${t.type}`);
      } else if (i.filter.type === "CallExpression") {
        const s = i.filter;
        if (s.callee.type !== "Identifier")
          throw new Error(`Unknown filter: ${s.callee.type}`);
        const l = s.callee.value;
        if (t instanceof ArrayValue) {
          switch (l) {
            case "selectattr": {
              if (t.value.some((h) => !(h instanceof ObjectValue)))
                throw new Error("`selectattr` can only be applied to array of objects");
              if (s.args.some((h) => h.type !== "StringLiteral"))
                throw new Error("arguments of `selectattr` must be strings");
              const [f, d, w] = s.args.map((h) => this.evaluate(h, e));
              let g;
              if (d) {
                const h = e.tests.get(d.value);
                if (!h)
                  throw new Error(`Unknown test: ${d.value}`);
                g = h;
              } else
                g = (...h) => h[0].__bool__().value;
              const _ = t.value.filter((h) => {
                const r = h.value.get(f.value);
                return r ? g(r, w) : false;
              });
              return new ArrayValue(_);
            }
          }
          throw new Error(`Unknown ArrayValue filter: ${l}`);
        } else
          throw new Error(`Cannot apply filter "${l}" to type: ${t.type}`);
      }
      throw new Error(`Unknown filter: ${i.filter.type}`);
    }
    evaluateTestExpression(i, e) {
      const t = this.evaluate(i.operand, e), s = e.tests.get(i.test.value);
      if (!s)
        throw new Error(`Unknown test: ${i.test.value}`);
      const l = s(t);
      return new BooleanValue(i.negate ? !l : l);
    }
    evaluateUnaryExpression(i, e) {
      const t = this.evaluate(i.argument, e);
      switch (i.operator.value) {
        case "not":
          return new BooleanValue(!t.value);
        default:
          throw new SyntaxError(`Unknown operator: ${i.operator.value}`);
      }
    }
    evalProgram(i, e) {
      return this.evaluateBlock(i.body, e);
    }
    evaluateBlock(i, e) {
      let t = "";
      for (const s of i) {
        const l = this.evaluate(s, e);
        l.type !== "NullValue" && l.type !== "UndefinedValue" && (t += l.value);
      }
      return new StringValue(t);
    }
    evaluateIdentifier(i, e) {
      return e.lookupVariable(i.value);
    }
    evaluateCallExpression(i, e) {
      const t = [], s = /* @__PURE__ */ new Map();
      for (const f of i.args)
        if (f.type === "KeywordArgumentExpression") {
          const d = f;
          s.set(d.key.value, this.evaluate(d.value, e));
        } else
          t.push(this.evaluate(f, e));
      s.size > 0 && t.push(new ObjectValue(s));
      const l = this.evaluate(i.callee, e);
      if (l.type !== "FunctionValue")
        throw new Error(`Cannot call something that is not a function: got ${l.type}`);
      return l.value(t, e);
    }
    evaluateSliceExpression(i, e, t) {
      if (!(i instanceof ArrayValue || i instanceof StringValue))
        throw new Error("Slice object must be an array or string");
      const s = this.evaluate(e.start, t), l = this.evaluate(e.stop, t), f = this.evaluate(e.step, t);
      if (!(s instanceof NumericValue || s instanceof UndefinedValue))
        throw new Error("Slice start must be numeric or undefined");
      if (!(l instanceof NumericValue || l instanceof UndefinedValue))
        throw new Error("Slice stop must be numeric or undefined");
      if (!(f instanceof NumericValue || f instanceof UndefinedValue))
        throw new Error("Slice step must be numeric or undefined");
      return i instanceof ArrayValue ? new ArrayValue(slice(i.value, s.value, l.value, f.value)) : new StringValue(slice(Array.from(i.value), s.value, l.value, f.value).join(""));
    }
    evaluateMemberExpression(i, e) {
      const t = this.evaluate(i.object, e);
      let s;
      if (i.computed) {
        if (i.property.type === "SliceExpression")
          return this.evaluateSliceExpression(t, i.property, e);
        s = this.evaluate(i.property, e);
      } else
        s = new StringValue(i.property.value);
      let l;
      if (t instanceof ObjectValue) {
        if (!(s instanceof StringValue))
          throw new Error(`Cannot access property with non-string: got ${s.type}`);
        l = t.value.get(s.value) ?? t.builtins.get(s.value);
      } else if (t instanceof ArrayValue || t instanceof StringValue)
        if (s instanceof NumericValue)
          l = t.value.at(s.value), t instanceof StringValue && (l = new StringValue(t.value.at(s.value)));
        else if (s instanceof StringValue)
          l = t.builtins.get(s.value);
        else
          throw new Error(`Cannot access property with non-string/non-number: got ${s.type}`);
      else {
        if (!(s instanceof StringValue))
          throw new Error(`Cannot access property with non-string: got ${s.type}`);
        l = t.builtins.get(s.value);
      }
      return l instanceof RuntimeValue ? l : new UndefinedValue();
    }
    evaluateSet(i, e) {
      const t = this.evaluate(i.value, e);
      if (i.assignee.type === "Identifier") {
        const s = i.assignee.value;
        e.setVariable(s, t);
      } else if (i.assignee.type === "MemberExpression") {
        const s = i.assignee, l = this.evaluate(s.object, e);
        if (!(l instanceof ObjectValue))
          throw new Error("Cannot assign to member of non-object");
        if (s.property.type !== "Identifier")
          throw new Error("Cannot assign to member with non-identifier property");
        l.value.set(s.property.value, t);
      } else
        throw new Error(`Invalid LHS inside assignment expression: ${JSON.stringify(i.assignee)}`);
      return new NullValue();
    }
    evaluateIf(i, e) {
      const t = this.evaluate(i.test, e);
      return this.evaluateBlock(t.__bool__().value ? i.body : i.alternate, e);
    }
    evaluateFor(i, e) {
      const t = new Environment(e), s = this.evaluate(i.iterable, t);
      if (!(s instanceof ArrayValue))
        throw new Error(`Expected iterable type in for loop: got ${s.type}`);
      let l = "";
      for (let f = 0; f < s.value.length; ++f) {
        const d = /* @__PURE__ */ new Map([
          [
            "index",
            new NumericValue(f + 1)
          ],
          [
            "index0",
            new NumericValue(f)
          ],
          [
            "revindex",
            new NumericValue(s.value.length - f)
          ],
          [
            "revindex0",
            new NumericValue(s.value.length - f - 1)
          ],
          [
            "first",
            new BooleanValue(f === 0)
          ],
          [
            "last",
            new BooleanValue(f === s.value.length - 1)
          ],
          [
            "length",
            new NumericValue(s.value.length)
          ],
          [
            "previtem",
            f > 0 ? s.value[f - 1] : new UndefinedValue()
          ],
          [
            "nextitem",
            f < s.value.length - 1 ? s.value[f + 1] : new UndefinedValue()
          ]
        ]);
        t.setVariable("loop", new ObjectValue(d));
        const w = s.value[f];
        if (i.loopvar.type === "Identifier")
          t.setVariable(i.loopvar.value, w);
        else if (i.loopvar.type === "TupleLiteral") {
          const _ = i.loopvar;
          if (w.type !== "ArrayValue")
            throw new Error(`Cannot unpack non-iterable type: ${w.type}`);
          const h = w;
          if (_.value.length !== h.value.length)
            throw new Error(`Too ${_.value.length > h.value.length ? "few" : "many"} items to unpack`);
          for (let r = 0; r < _.value.length; ++r) {
            if (_.value[r].type !== "Identifier")
              throw new Error(`Cannot unpack non-identifier type: ${_.value[r].type}`);
            t.setVariable(_.value[r].value, h.value[r]);
          }
        }
        const g = this.evaluateBlock(i.body, t);
        l += g.value;
      }
      return new StringValue(l);
    }
    evaluate(i, e) {
      if (i === void 0)
        return new UndefinedValue();
      switch (i.type) {
        case "Program":
          return this.evalProgram(i, e);
        case "Set":
          return this.evaluateSet(i, e);
        case "If":
          return this.evaluateIf(i, e);
        case "For":
          return this.evaluateFor(i, e);
        case "NumericLiteral":
          return new NumericValue(Number(i.value));
        case "StringLiteral":
          return new StringValue(i.value);
        case "BooleanLiteral":
          return new BooleanValue(i.value);
        case "ArrayLiteral":
          return new ArrayValue(i.value.map((t) => this.evaluate(t, e)));
        case "TupleLiteral":
          return new TupleValue(i.value.map((t) => this.evaluate(t, e)));
        case "ObjectLiteral": {
          const t = /* @__PURE__ */ new Map();
          for (const [s, l] of i.value) {
            const f = this.evaluate(s, e);
            if (!(f instanceof StringValue))
              throw new Error(`Object keys must be strings: got ${f.type}`);
            t.set(f.value, this.evaluate(l, e));
          }
          return new ObjectValue(t);
        }
        case "Identifier":
          return this.evaluateIdentifier(i, e);
        case "CallExpression":
          return this.evaluateCallExpression(i, e);
        case "MemberExpression":
          return this.evaluateMemberExpression(i, e);
        case "UnaryExpression":
          return this.evaluateUnaryExpression(i, e);
        case "BinaryExpression":
          return this.evaluateBinaryExpression(i, e);
        case "FilterExpression":
          return this.evaluateFilterExpression(i, e);
        case "TestExpression":
          return this.evaluateTestExpression(i, e);
        default:
          throw new SyntaxError(`Unknown node type: ${i.type}`);
      }
    }
  };
  function convertToRuntimeValues(i) {
    switch (typeof i) {
      case "number":
        return new NumericValue(i);
      case "string":
        return new StringValue(i);
      case "boolean":
        return new BooleanValue(i);
      case "object":
        return i === null ? new NullValue() : Array.isArray(i) ? new ArrayValue(i.map(convertToRuntimeValues)) : new ObjectValue(new Map(Object.entries(i).map(([e, t]) => [
          e,
          convertToRuntimeValues(t)
        ])));
      case "function":
        return new FunctionValue((e, t) => {
          const s = i(...e.map((l) => l.value)) ?? null;
          return convertToRuntimeValues(s);
        });
      default:
        throw new Error(`Cannot convert to runtime value: ${i}`);
    }
  }
  var Template = class {
    constructor(i) {
      __publicField(this, "parsed");
      const e = tokenize(i, {
        lstrip_blocks: true,
        trim_blocks: true
      });
      this.parsed = parse(e);
    }
    render(i) {
      const e = new Environment();
      e.set("false", false), e.set("true", true), e.set("raise_exception", (l) => {
        throw new Error(l);
      }), e.set("range", range);
      for (const [l, f] of Object.entries(i))
        e.set(l, f);
      return new Interpreter(e).run(this.parsed).value;
    }
  };
  async function loadTokenizer(i, e) {
    const t = await Promise.all([
      getModelJSON(i, "tokenizer.json", true, e),
      getModelJSON(i, "tokenizer_config.json", true, e)
    ]);
    return e.legacy !== null && (t[1].legacy = e.legacy), t;
  }
  function regexSplit(i, e) {
    const t = [];
    let s = 0;
    for (const l of i.matchAll(e)) {
      const f = l[0];
      s < l.index && t.push(i.slice(s, l.index)), f.length > 0 && t.push(f), s = l.index + f.length;
    }
    return s < i.length && t.push(i.slice(s)), t;
  }
  function createPattern(i, e = true) {
    if (i.Regex !== void 0) {
      let t = i.Regex.replace(/\\([#&~])/g, "$1");
      for (const [s, l] of PROBLEMATIC_REGEX_MAP)
        t = t.replaceAll(s, l);
      return new RegExp(t, "gu");
    } else if (i.String !== void 0) {
      const t = escapeRegExp(i.String);
      return new RegExp(e ? t : `(${t})`, "gu");
    } else
      return console.warn("Unknown pattern type:", i), null;
  }
  function objectToMap(i) {
    return new Map(Object.entries(i));
  }
  function prepareTensorForDecode(i) {
    const e = i.dims;
    switch (e.length) {
      case 1:
        return i.tolist();
      case 2:
        if (e[0] !== 1)
          throw new Error("Unable to decode tensor with `batch size !== 1`. Use `tokenizer.batch_decode(...)` for batched inputs.");
        return i.tolist()[0];
      default:
        throw new Error(`Expected tensor to have 1-2 dimensions, got ${e.length}.`);
    }
  }
  function clean_up_tokenization(i) {
    return i.replace(/ \./g, ".").replace(/ \?/g, "?").replace(/ \!/g, "!").replace(/ ,/g, ",").replace(/ \' /g, "'").replace(/ n\'t/g, "n't").replace(/ \'m/g, "'m").replace(/ \'s/g, "'s").replace(/ \'ve/g, "'ve").replace(/ \'re/g, "'re");
  }
  function remove_accents(i) {
    return i.replace(/[\u0300-\u036f]/g, "");
  }
  function lowercase_and_remove_accent(i) {
    return remove_accents(i.toLowerCase());
  }
  function fuse(i, e, t) {
    const s = [];
    let l = 0;
    for (; l < i.length; ) {
      if (s.push(i[l]), (t.get(i[l]) ?? e) !== e) {
        ++l;
        continue;
      }
      for (; l < i.length && (t.get(i[l]) ?? e) === e; )
        ++l;
    }
    return s;
  }
  function whitespace_split(i) {
    return i.match(/\S+/g) || [];
  }
  const PUNCTUATION_REGEX = "\\p{P}\\u0021-\\u002F\\u003A-\\u0040\\u005B-\\u0060\\u007B-\\u007E", PROBLEMATIC_REGEX_MAP = /* @__PURE__ */ new Map([
    [
      "(?i:'s|'t|'re|'ve|'m|'ll|'d)",
      "(?:'([sS]|[tT]|[rR][eE]|[vV][eE]|[mM]|[lL][lL]|[dD]))"
    ]
  ]);
  class AddedToken {
    constructor(e) {
      this.content = e.content, this.id = e.id, this.single_word = e.single_word ?? false, this.lstrip = e.lstrip ?? false, this.rstrip = e.rstrip ?? false, this.special = e.special ?? false, this.normalized = e.normalized ?? null;
    }
  }
  class TokenizerModel extends Callable {
    constructor(e) {
      super(), this.config = e, this.vocab = [], this.tokens_to_ids = /* @__PURE__ */ new Map(), this.unk_token_id = void 0, this.unk_token = void 0, this.end_of_word_suffix = void 0, this.fuse_unk = this.config.fuse_unk ?? false;
    }
    static fromConfig(e, ...t) {
      switch (e.type) {
        case "WordPiece":
          return new WordPieceTokenizer(e);
        case "Unigram":
          return new Unigram(e, ...t);
        case "BPE":
          return new BPE(e);
        default:
          if (e.vocab)
            return new LegacyTokenizerModel(e, ...t);
          throw new Error(`Unknown TokenizerModel type: ${e.type}`);
      }
    }
    _call(e) {
      let t = this.encode(e);
      return this.fuse_unk && (t = fuse(t, this.unk_token_id, this.tokens_to_ids)), t;
    }
    encode(e) {
      throw Error("encode should be implemented in subclass.");
    }
    convert_tokens_to_ids(e) {
      return e.map((t) => this.tokens_to_ids.get(t) ?? this.unk_token_id);
    }
    convert_ids_to_tokens(e) {
      return e.map((t) => this.vocab[t] ?? this.unk_token);
    }
  }
  class WordPieceTokenizer extends TokenizerModel {
    constructor(e) {
      super(e), this.tokens_to_ids = objectToMap(e.vocab), this.unk_token_id = this.tokens_to_ids.get(e.unk_token), this.unk_token = e.unk_token, this.max_input_chars_per_word = e.max_input_chars_per_word ?? 100, this.vocab = new Array(this.tokens_to_ids.size);
      for (const [t, s] of this.tokens_to_ids)
        this.vocab[s] = t;
    }
    encode(e) {
      const t = [];
      for (const s of e) {
        const l = [
          ...s
        ];
        if (l.length > this.max_input_chars_per_word) {
          t.push(this.unk_token);
          continue;
        }
        let f = false, d = 0;
        const w = [];
        for (; d < l.length; ) {
          let g = l.length, _ = null;
          for (; d < g; ) {
            let h = l.slice(d, g).join("");
            if (d > 0 && (h = this.config.continuing_subword_prefix + h), this.tokens_to_ids.has(h)) {
              _ = h;
              break;
            }
            --g;
          }
          if (_ === null) {
            f = true;
            break;
          }
          w.push(_), d = g;
        }
        f ? t.push(this.unk_token) : t.push(...w);
      }
      return t;
    }
  }
  class Unigram extends TokenizerModel {
    constructor(e, t) {
      super(e);
      const s = e.vocab.length;
      this.vocab = new Array(s), this.scores = new Array(s);
      for (let l = 0; l < s; ++l) {
        const f = e.vocab[l];
        this.vocab[l] = f[0], this.scores[l] = f[1];
      }
      this.unk_token_id = e.unk_id, this.unk_token = this.vocab[e.unk_id], this.tokens_to_ids = new Map(this.vocab.map((l, f) => [
        l,
        f
      ])), this.bosToken = " ", this.bosTokenId = this.tokens_to_ids.get(this.bosToken), this.eosToken = t.eos_token, this.eosTokenId = this.tokens_to_ids.get(this.eosToken), this.unkToken = this.vocab[this.unk_token_id], this.minScore = min(this.scores)[0], this.unkScore = this.minScore - 10, this.scores[this.unk_token_id] = this.unkScore, this.trie = new CharTrie(), this.trie.extend(this.vocab), this.fuse_unk = true;
    }
    populateNodes(e) {
      const t = e.sentence, s = t.length;
      let l = 0;
      for (; l < s; ) {
        let d = false;
        for (let w of this.trie.commonPrefixSearch(t.slice(l))) {
          const g = this.tokens_to_ids.get(w), _ = this.scores[g], h = w.length;
          e.insert(l, h, _, g), !d && h === 1 && (d = true);
        }
        d || e.insert(l, 1, this.unkScore, this.unk_token_id), l += 1;
      }
    }
    tokenize(e) {
      const t = new TokenLattice(e, this.bosTokenId, this.eosTokenId);
      return this.populateNodes(t), t.tokens();
    }
    encode(e) {
      const t = [];
      for (const s of e) {
        const l = this.tokenize(s);
        t.push(...l);
      }
      return t;
    }
  }
  const BYTES_TO_UNICODE = (() => {
    const i = [
      ...Array.from({
        length: "~".charCodeAt(0) - "!".charCodeAt(0) + 1
      }, (l, f) => f + "!".charCodeAt(0)),
      ...Array.from({
        length: "\xAC".charCodeAt(0) - "\xA1".charCodeAt(0) + 1
      }, (l, f) => f + "\xA1".charCodeAt(0)),
      ...Array.from({
        length: "\xFF".charCodeAt(0) - "\xAE".charCodeAt(0) + 1
      }, (l, f) => f + "\xAE".charCodeAt(0))
    ], e = i.slice();
    let t = 0;
    for (let l = 0; l < 256; ++l)
      i.includes(l) || (i.push(l), e.push(256 + t), t += 1);
    const s = e.map((l) => String.fromCharCode(l));
    return Object.fromEntries(i.map((l, f) => [
      l,
      s[f]
    ]));
  })(), UNICODE_TO_BYTES = reverseDictionary(BYTES_TO_UNICODE);
  class BPE extends TokenizerModel {
    constructor(e) {
      super(e), this.BPE_SPLIT_TOKEN = " ", this.tokens_to_ids = objectToMap(e.vocab), this.unk_token_id = this.tokens_to_ids.get(e.unk_token), this.unk_token = e.unk_token, this.vocab = new Array(this.tokens_to_ids.size);
      for (const [t, s] of this.tokens_to_ids)
        this.vocab[s] = t;
      this.bpe_ranks = new Map(e.merges.map((t, s) => [
        t,
        s
      ])), this.merges = e.merges.map((t) => t.split(this.BPE_SPLIT_TOKEN)), this.end_of_word_suffix = e.end_of_word_suffix, this.continuing_subword_suffix = e.continuing_subword_suffix ?? null, this.byte_fallback = this.config.byte_fallback ?? false, this.byte_fallback && (this.text_encoder = new TextEncoder()), this.ignore_merges = this.config.ignore_merges ?? false, this.cache = /* @__PURE__ */ new Map();
    }
    bpe(e) {
      if (e.length === 0)
        return [];
      const t = this.cache.get(e);
      if (t !== void 0)
        return t;
      const s = Array.from(e);
      this.end_of_word_suffix && (s[s.length - 1] += this.end_of_word_suffix);
      let l = [];
      if (s.length > 1) {
        const f = new PriorityQueue((g, _) => g.score < _.score);
        let d = {
          token: s[0],
          bias: 0,
          prev: null,
          next: null
        }, w = d;
        for (let g = 1; g < s.length; ++g) {
          const _ = {
            bias: g / s.length,
            token: s[g],
            prev: w,
            next: null
          };
          w.next = _, this._add_node(f, w), w = _;
        }
        for (; !f.isEmpty(); ) {
          const g = f.pop();
          if (g.deleted || !g.next || g.next.deleted)
            continue;
          if (g.deleted = true, g.next.deleted = true, g.prev) {
            const h = {
              ...g.prev
            };
            g.prev.deleted = true, g.prev = h, h.prev ? h.prev.next = h : d = h;
          }
          const _ = {
            token: g.token + g.next.token,
            bias: g.bias,
            prev: g.prev,
            next: g.next.next
          };
          _.prev ? (_.prev.next = _, this._add_node(f, _.prev)) : d = _, _.next && (_.next.prev = _, this._add_node(f, _));
        }
        for (let g = d; g !== null; g = g.next)
          l.push(g.token);
      } else
        l = s;
      if (this.continuing_subword_suffix)
        for (let f = 0; f < l.length - 1; ++f)
          l[f] += this.continuing_subword_suffix;
      return this.cache.set(e, l), l;
    }
    _add_node(e, t) {
      const s = this.bpe_ranks.get(t.token + this.BPE_SPLIT_TOKEN + t.next.token);
      s !== void 0 && (t.score = s + t.bias, e.push(t));
    }
    encode(e) {
      const t = [];
      for (const s of e) {
        if (this.ignore_merges && this.tokens_to_ids.has(s)) {
          t.push(s);
          continue;
        }
        const l = this.bpe(s);
        for (const f of l)
          this.tokens_to_ids.has(f) ? t.push(f) : this.byte_fallback ? t.push(...Array.from(this.text_encoder.encode(f)).map((d) => `<0x${d.toString(16).toUpperCase().padStart(2, "0")}>`)) : t.push(this.unk_token);
      }
      return t;
    }
  }
  class LegacyTokenizerModel extends TokenizerModel {
    constructor(e, t) {
      super(e), this.tokens_to_ids = objectToMap(t.target_lang ? e.vocab[t.target_lang] : e.vocab), this.bos_token = t.bos_token, this.bos_token_id = this.tokens_to_ids.get(this.bos_token), this.eos_token = t.eos_token, this.eos_token_id = this.tokens_to_ids.get(this.eos_token), this.pad_token = t.pad_token, this.pad_token_id = this.tokens_to_ids.get(this.pad_token), this.unk_token = t.unk_token, this.unk_token_id = this.tokens_to_ids.get(this.unk_token), this.vocab = new Array(this.tokens_to_ids.size);
      for (const [s, l] of this.tokens_to_ids)
        this.vocab[l] = s;
    }
    encode(e) {
      return e;
    }
  }
  class Normalizer extends Callable {
    constructor(e) {
      super(), this.config = e;
    }
    static fromConfig(e) {
      if (e === null)
        return null;
      switch (e.type) {
        case "BertNormalizer":
          return new BertNormalizer(e);
        case "Precompiled":
          return new Precompiled(e);
        case "Sequence":
          return new NormalizerSequence(e);
        case "Replace":
          return new Replace(e);
        case "NFC":
          return new NFC(e);
        case "NFKC":
          return new NFKC(e);
        case "NFKD":
          return new NFKD(e);
        case "Strip":
          return new StripNormalizer(e);
        case "StripAccents":
          return new StripAccents(e);
        case "Lowercase":
          return new Lowercase(e);
        case "Prepend":
          return new Prepend(e);
        default:
          throw new Error(`Unknown Normalizer type: ${e.type}`);
      }
    }
    normalize(e) {
      throw Error("normalize should be implemented in subclass.");
    }
    _call(e) {
      return this.normalize(e);
    }
  }
  class Replace extends Normalizer {
    normalize(e) {
      const t = createPattern(this.config.pattern);
      return t === null ? e : e.replaceAll(t, this.config.content);
    }
  }
  class NFC extends Normalizer {
    normalize(e) {
      return e = e.normalize("NFC"), e;
    }
  }
  class NFKC extends Normalizer {
    normalize(e) {
      return e = e.normalize("NFKC"), e;
    }
  }
  class NFKD extends Normalizer {
    normalize(e) {
      return e = e.normalize("NFKD"), e;
    }
  }
  class StripNormalizer extends Normalizer {
    normalize(e) {
      return this.config.strip_left && this.config.strip_right ? e = e.trim() : (this.config.strip_left && (e = e.trimStart()), this.config.strip_right && (e = e.trimEnd())), e;
    }
  }
  class StripAccents extends Normalizer {
    normalize(e) {
      return e = remove_accents(e), e;
    }
  }
  class Lowercase extends Normalizer {
    normalize(e) {
      return e = e.toLowerCase(), e;
    }
  }
  class Prepend extends Normalizer {
    normalize(e) {
      return e = this.config.prepend + e, e;
    }
  }
  class NormalizerSequence extends Normalizer {
    constructor(e) {
      super(e), this.normalizers = e.normalizers.map((t) => Normalizer.fromConfig(t));
    }
    normalize(e) {
      return this.normalizers.reduce((t, s) => s.normalize(t), e);
    }
  }
  class BertNormalizer extends Normalizer {
    _tokenize_chinese_chars(e) {
      const t = [];
      for (let s = 0; s < e.length; ++s) {
        const l = e[s], f = l.charCodeAt(0);
        this._is_chinese_char(f) ? (t.push(" "), t.push(l), t.push(" ")) : t.push(l);
      }
      return t.join("");
    }
    _is_chinese_char(e) {
      return e >= 19968 && e <= 40959 || e >= 13312 && e <= 19903 || e >= 131072 && e <= 173791 || e >= 173824 && e <= 177983 || e >= 177984 && e <= 178207 || e >= 178208 && e <= 183983 || e >= 63744 && e <= 64255 || e >= 194560 && e <= 195103;
    }
    stripAccents(e) {
      return e.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
    }
    _is_control(e) {
      switch (e) {
        case "	":
        case `
`:
        case "\r":
          return false;
        default:
          return /^\p{Cc}|\p{Cf}|\p{Co}|\p{Cs}$/u.test(e);
      }
    }
    _clean_text(e) {
      const t = [];
      for (const s of e) {
        const l = s.charCodeAt(0);
        l === 0 || l === 65533 || this._is_control(s) || (/^\s$/.test(s) ? t.push(" ") : t.push(s));
      }
      return t.join("");
    }
    normalize(e) {
      return this.config.clean_text && (e = this._clean_text(e)), this.config.handle_chinese_chars && (e = this._tokenize_chinese_chars(e)), this.config.lowercase ? (e = e.toLowerCase(), this.config.strip_accents !== false && (e = this.stripAccents(e))) : this.config.strip_accents && (e = this.stripAccents(e)), e;
    }
  }
  class PreTokenizer extends Callable {
    static fromConfig(e) {
      if (e === null)
        return null;
      switch (e.type) {
        case "BertPreTokenizer":
          return new BertPreTokenizer(e);
        case "Sequence":
          return new PreTokenizerSequence(e);
        case "Whitespace":
          return new WhitespacePreTokenizer(e);
        case "WhitespaceSplit":
          return new WhitespaceSplit(e);
        case "Metaspace":
          return new MetaspacePreTokenizer(e);
        case "ByteLevel":
          return new ByteLevelPreTokenizer(e);
        case "Split":
          return new SplitPreTokenizer(e);
        case "Punctuation":
          return new PunctuationPreTokenizer(e);
        case "Digits":
          return new DigitsPreTokenizer(e);
        case "Replace":
          return new ReplacePreTokenizer(e);
        default:
          throw new Error(`Unknown PreTokenizer type: ${e.type}`);
      }
    }
    pre_tokenize_text(e, t) {
      throw Error("pre_tokenize_text should be implemented in subclass.");
    }
    pre_tokenize(e, t) {
      return (Array.isArray(e) ? e.map((s) => this.pre_tokenize_text(s, t)) : this.pre_tokenize_text(e, t)).flat();
    }
    _call(e, t) {
      return this.pre_tokenize(e, t);
    }
  }
  class BertPreTokenizer extends PreTokenizer {
    constructor(e) {
      super(), this.pattern = new RegExp(`[^\\s${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]`, "gu");
    }
    pre_tokenize_text(e, t) {
      return e.trim().match(this.pattern) || [];
    }
  }
  class ByteLevelPreTokenizer extends PreTokenizer {
    constructor(e) {
      super(), this.config = e, this.add_prefix_space = this.config.add_prefix_space, this.trim_offsets = this.config.trim_offsets, this.use_regex = this.config.use_regex ?? true, this.pattern = /'s|'t|'re|'ve|'m|'ll|'d| ?\p{L}+| ?\p{N}+| ?[^\s\p{L}\p{N}]+|\s+(?!\S)|\s+/gu, this.byte_encoder = BYTES_TO_UNICODE, this.text_encoder = new TextEncoder();
    }
    pre_tokenize_text(e, t) {
      return this.add_prefix_space && !e.startsWith(" ") && (e = " " + e), (this.use_regex ? e.match(this.pattern) || [] : [
        e
      ]).map((l) => Array.from(this.text_encoder.encode(l), (f) => this.byte_encoder[f]).join(""));
    }
  }
  class SplitPreTokenizer extends PreTokenizer {
    constructor(e) {
      super(), this.config = e, this.pattern = createPattern(this.config.pattern, this.config.invert);
    }
    pre_tokenize_text(e, t) {
      return this.pattern === null ? [] : this.config.invert ? e.match(this.pattern) || [] : regexSplit(e, this.pattern);
    }
  }
  class PunctuationPreTokenizer extends PreTokenizer {
    constructor(e) {
      super(), this.config = e, this.pattern = new RegExp(`[^${PUNCTUATION_REGEX}]+|[${PUNCTUATION_REGEX}]+`, "gu");
    }
    pre_tokenize_text(e, t) {
      return e.match(this.pattern) || [];
    }
  }
  class DigitsPreTokenizer extends PreTokenizer {
    constructor(e) {
      super(), this.config = e;
      const t = `[^\\d]+|\\d${this.config.individual_digits ? "" : "+"}`;
      this.pattern = new RegExp(t, "gu");
    }
    pre_tokenize_text(e, t) {
      return e.match(this.pattern) || [];
    }
  }
  class PostProcessor extends Callable {
    constructor(e) {
      super(), this.config = e;
    }
    static fromConfig(e) {
      if (e === null)
        return null;
      switch (e.type) {
        case "TemplateProcessing":
          return new TemplateProcessing(e);
        case "ByteLevel":
          return new ByteLevelPostProcessor(e);
        case "RobertaProcessing":
          return new RobertaProcessing(e);
        case "BertProcessing":
          return new BertProcessing(e);
        case "Sequence":
          return new PostProcessorSequence(e);
        default:
          throw new Error(`Unknown PostProcessor type: ${e.type}`);
      }
    }
    post_process(e, ...t) {
      throw Error("post_process should be implemented in subclass.");
    }
    _call(e, ...t) {
      return this.post_process(e, ...t);
    }
  }
  class BertProcessing extends PostProcessor {
    constructor(e) {
      super(e), this.cls = e.cls[0], this.sep = e.sep[0];
    }
    post_process(e, t = null, { add_special_tokens: s = true } = {}) {
      s && (e = mergeArrays([
        this.cls
      ], e, [
        this.sep
      ]));
      let l = new Array(e.length).fill(0);
      if (t !== null) {
        const f = s && this instanceof RobertaProcessing ? [
          this.sep
        ] : [], d = s ? [
          this.sep
        ] : [];
        e = mergeArrays(e, f, t, d), l = mergeArrays(l, new Array(t.length + f.length + d.length).fill(1));
      }
      return {
        tokens: e,
        token_type_ids: l
      };
    }
  }
  class RobertaProcessing extends BertProcessing {
  }
  class TemplateProcessing extends PostProcessor {
    constructor(e) {
      super(e), this.single = e.single, this.pair = e.pair;
    }
    post_process(e, t = null, { add_special_tokens: s = true } = {}) {
      const l = t === null ? this.single : this.pair;
      let f = [], d = [];
      for (const w of l)
        "SpecialToken" in w ? s && (f.push(w.SpecialToken.id), d.push(w.SpecialToken.type_id)) : "Sequence" in w && (w.Sequence.id === "A" ? (f = mergeArrays(f, e), d = mergeArrays(d, new Array(e.length).fill(w.Sequence.type_id))) : w.Sequence.id === "B" && (f = mergeArrays(f, t), d = mergeArrays(d, new Array(t.length).fill(w.Sequence.type_id))));
      return {
        tokens: f,
        token_type_ids: d
      };
    }
  }
  class ByteLevelPostProcessor extends PostProcessor {
    post_process(e, t = null) {
      return t && (e = mergeArrays(e, t)), {
        tokens: e
      };
    }
  }
  class PostProcessorSequence extends PostProcessor {
    constructor(e) {
      super(e), this.processors = e.processors.map((t) => PostProcessor.fromConfig(t));
    }
    post_process(e, t = null, s = {}) {
      let l;
      for (const f of this.processors)
        if (f instanceof ByteLevelPostProcessor)
          e = f.post_process(e).tokens, t && (t = f.post_process(t).tokens);
        else {
          const d = f.post_process(e, t, s);
          e = d.tokens, l = d.token_type_ids;
        }
      return {
        tokens: e,
        token_type_ids: l
      };
    }
  }
  class Decoder extends Callable {
    constructor(e) {
      super(), this.config = e, this.added_tokens = [], this.end_of_word_suffix = null, this.trim_offsets = e.trim_offsets;
    }
    static fromConfig(e) {
      if (e === null)
        return null;
      switch (e.type) {
        case "WordPiece":
          return new WordPieceDecoder(e);
        case "Metaspace":
          return new MetaspaceDecoder(e);
        case "ByteLevel":
          return new ByteLevelDecoder(e);
        case "Replace":
          return new ReplaceDecoder(e);
        case "ByteFallback":
          return new ByteFallback(e);
        case "Fuse":
          return new FuseDecoder(e);
        case "Strip":
          return new StripDecoder(e);
        case "Sequence":
          return new DecoderSequence(e);
        case "CTC":
          return new CTCDecoder(e);
        case "BPEDecoder":
          return new BPEDecoder(e);
        default:
          throw new Error(`Unknown Decoder type: ${e.type}`);
      }
    }
    _call(e) {
      return this.decode(e);
    }
    decode(e) {
      return this.decode_chain(e).join("");
    }
    decode_chain(e) {
      throw Error("`decode_chain` should be implemented in subclass.");
    }
  }
  class ReplaceDecoder extends Decoder {
    decode_chain(e) {
      const t = createPattern(this.config.pattern);
      return t === null ? e : e.map((s) => s.replaceAll(t, this.config.content));
    }
  }
  class ByteFallback extends Decoder {
    constructor(e) {
      super(e), this.text_decoder = new TextDecoder();
    }
    decode_chain(e) {
      const t = [];
      let s = [];
      for (const l of e) {
        let f = null;
        if (l.length === 6 && l.startsWith("<0x") && l.endsWith(">")) {
          const d = parseInt(l.slice(3, 5), 16);
          isNaN(d) || (f = d);
        }
        if (f !== null)
          s.push(f);
        else {
          if (s.length > 0) {
            const d = this.text_decoder.decode(Uint8Array.from(s));
            t.push(d), s = [];
          }
          t.push(l);
        }
      }
      if (s.length > 0) {
        const l = this.text_decoder.decode(Uint8Array.from(s));
        t.push(l), s = [];
      }
      return t;
    }
  }
  class FuseDecoder extends Decoder {
    decode_chain(e) {
      return [
        e.join("")
      ];
    }
  }
  class StripDecoder extends Decoder {
    constructor(e) {
      super(e), this.content = this.config.content, this.start = this.config.start, this.stop = this.config.stop;
    }
    decode_chain(e) {
      return e.map((t) => {
        let s = 0;
        for (let f = 0; f < this.start && t[f] === this.content; ++f) {
          s = f + 1;
          continue;
        }
        let l = t.length;
        for (let f = 0; f < this.stop; ++f) {
          const d = t.length - f - 1;
          if (t[d] === this.content) {
            l = d;
            continue;
          } else
            break;
        }
        return t.slice(s, l);
      });
    }
  }
  class WordPieceDecoder extends Decoder {
    constructor(e) {
      super(e), this.cleanup = e.cleanup;
    }
    decode_chain(e) {
      return e.map((t, s) => (s !== 0 && (t.startsWith(this.config.prefix) ? t = t.replace(this.config.prefix, "") : t = " " + t), this.cleanup && (t = clean_up_tokenization(t)), t));
    }
  }
  class ByteLevelDecoder extends Decoder {
    constructor(e) {
      super(e), this.byte_decoder = UNICODE_TO_BYTES, this.text_decoder = new TextDecoder("utf-8", {
        fatal: false,
        ignoreBOM: true
      }), this.end_of_word_suffix = null;
    }
    convert_tokens_to_string(e) {
      const t = e.join(""), s = new Uint8Array([
        ...t
      ].map((f) => this.byte_decoder[f]));
      return this.text_decoder.decode(s);
    }
    decode_chain(e) {
      const t = [];
      let s = [];
      for (const l of e)
        this.added_tokens.find((f) => f.content === l) !== void 0 ? (s.length > 0 && (t.push(this.convert_tokens_to_string(s)), s = []), t.push(l)) : s.push(l);
      return s.length > 0 && t.push(this.convert_tokens_to_string(s)), t;
    }
  }
  class CTCDecoder extends Decoder {
    constructor(e) {
      super(e), this.pad_token = this.config.pad_token, this.word_delimiter_token = this.config.word_delimiter_token, this.cleanup = this.config.cleanup;
    }
    convert_tokens_to_string(e) {
      if (e.length === 0)
        return "";
      const t = [
        e[0]
      ];
      for (let f = 1; f < e.length; ++f)
        e[f] !== t.at(-1) && t.push(e[f]);
      let l = t.filter((f) => f !== this.pad_token).join("");
      return this.cleanup && (l = clean_up_tokenization(l).replaceAll(this.word_delimiter_token, " ").trim()), l;
    }
    decode_chain(e) {
      return [
        this.convert_tokens_to_string(e)
      ];
    }
  }
  class DecoderSequence extends Decoder {
    constructor(e) {
      super(e), this.decoders = e.decoders.map((t) => Decoder.fromConfig(t));
    }
    decode_chain(e) {
      return this.decoders.reduce((t, s) => s.decode_chain(t), e);
    }
  }
  class BPEDecoder extends Decoder {
    constructor(e) {
      super(e), this.suffix = this.config.suffix;
    }
    decode_chain(e) {
      return e.map((t, s) => t.replaceAll(this.suffix, s === e.length - 1 ? "" : " "));
    }
  }
  class VitsDecoder extends Decoder {
    decode_chain(e) {
      let t = "";
      for (let s = 1; s < e.length; s += 2)
        t += e[s];
      return [
        t
      ];
    }
  }
  class MetaspacePreTokenizer extends PreTokenizer {
    constructor(e) {
      super(), this.addPrefixSpace = e.add_prefix_space, this.replacement = e.replacement, this.strRep = e.str_rep || this.replacement, this.prepend_scheme = e.prepend_scheme ?? "always";
    }
    pre_tokenize_text(e, { section_index: t = void 0 } = {}) {
      let s = e.replaceAll(" ", this.strRep);
      return this.addPrefixSpace && !s.startsWith(this.replacement) && (this.prepend_scheme === "always" || this.prepend_scheme === "first" && t === 0) && (s = this.strRep + s), [
        s
      ];
    }
  }
  class MetaspaceDecoder extends Decoder {
    constructor(e) {
      super(e), this.addPrefixSpace = e.add_prefix_space, this.replacement = e.replacement;
    }
    decode_chain(e) {
      const t = [];
      for (let s = 0; s < e.length; ++s) {
        let l = e[s].replaceAll(this.replacement, " ");
        this.addPrefixSpace && s == 0 && l.startsWith(" ") && (l = l.substring(1)), t.push(l);
      }
      return t;
    }
  }
  class Precompiled extends Normalizer {
    constructor(e) {
      super(e), this.charsmap = e.precompiled_charsmap;
    }
    normalize(e) {
      return e = e.replace(/[\u0001-\u0008\u000B\u000E-\u001F\u007F\u008F\u009F]/gm, ""), e = e.replace(/[\u0009\u000A\u000C\u000D\u1680\u200B\u200C\u200E\u200F\u2028\u2029\u2581\uFEFF\uFFFD]/gm, " "), e.includes("\uFF5E") ? e = e.split("\uFF5E").map((s) => s.normalize("NFKC")).join("\uFF5E") : e = e.normalize("NFKC"), e;
    }
  }
  class PreTokenizerSequence extends PreTokenizer {
    constructor(e) {
      super(), this.tokenizers = e.pretokenizers.map((t) => PreTokenizer.fromConfig(t));
    }
    pre_tokenize_text(e, t) {
      return this.tokenizers.reduce((s, l) => l.pre_tokenize(s, t), [
        e
      ]);
    }
  }
  class WhitespacePreTokenizer extends PreTokenizer {
    constructor(e) {
      super();
    }
    pre_tokenize_text(e, t) {
      return e.match(/\w+|[^\w\s]+/g) || [];
    }
  }
  class WhitespaceSplit extends PreTokenizer {
    constructor(e) {
      super();
    }
    pre_tokenize_text(e, t) {
      return whitespace_split(e);
    }
  }
  class ReplacePreTokenizer extends PreTokenizer {
    constructor(e) {
      super(), this.config = e, this.pattern = createPattern(this.config.pattern), this.content = this.config.content;
    }
    pre_tokenize_text(e, t) {
      return this.pattern === null ? [
        e
      ] : [
        e.replaceAll(this.pattern, this.config.content)
      ];
    }
  }
  const SPECIAL_TOKEN_ATTRIBUTES = [
    "bos_token",
    "eos_token",
    "unk_token",
    "sep_token",
    "pad_token",
    "cls_token",
    "mask_token"
  ];
  function padHelper(i, e, t, s) {
    for (const l of Object.keys(i)) {
      const f = e - i[l].length, d = t(l), w = new Array(f).fill(d);
      i[l] = s === "right" ? mergeArrays(i[l], w) : mergeArrays(w, i[l]);
    }
  }
  function truncateHelper(i, e) {
    for (const t of Object.keys(i))
      i[t].length = e;
  }
  class PreTrainedTokenizer extends Callable {
    constructor(e, t) {
      super();
      __publicField(this, "return_token_type_ids", false);
      __publicField(this, "_default_chat_template", `{% for message in messages %}{{'<|im_start|>' + message['role'] + '
' + message['content'] + '<|im_end|>' + '
'}}{% endfor %}{% if add_generation_prompt %}{{ '<|im_start|>assistant
' }}{% endif %}`);
      this._tokenizer_config = t, this.normalizer = Normalizer.fromConfig(e.normalizer), this.pre_tokenizer = PreTokenizer.fromConfig(e.pre_tokenizer), this.model = TokenizerModel.fromConfig(e.model, t), this.post_processor = PostProcessor.fromConfig(e.post_processor), this.decoder = Decoder.fromConfig(e.decoder), this.special_tokens = [], this.all_special_ids = [], this.added_tokens = [];
      for (const s of e.added_tokens) {
        const l = new AddedToken(s);
        this.added_tokens.push(l), this.model.tokens_to_ids.set(l.content, l.id), this.model.vocab[l.id] = l.content, l.special && (this.special_tokens.push(l.content), this.all_special_ids.push(l.id));
      }
      if (this.additional_special_tokens = t.additional_special_tokens ?? [], this.special_tokens.push(...this.additional_special_tokens), this.special_tokens = [
        ...new Set(this.special_tokens)
      ], this.decoder && (this.decoder.added_tokens = this.added_tokens, this.decoder.end_of_word_suffix = this.model.end_of_word_suffix), this.added_tokens_regex = this.added_tokens.length > 0 ? new RegExp(this.added_tokens.map((s) => `${s.lstrip ? "\\s*" : ""}(${escapeRegExp(s.content)})${s.rstrip ? "\\s*" : ""}`).join("|")) : null, this.mask_token = this.getToken("mask_token"), this.mask_token_id = this.model.tokens_to_ids.get(this.mask_token), this.pad_token = this.getToken("pad_token", "eos_token"), this.pad_token_id = this.model.tokens_to_ids.get(this.pad_token), this.sep_token = this.getToken("sep_token"), this.sep_token_id = this.model.tokens_to_ids.get(this.sep_token), this.unk_token = this.getToken("unk_token"), this.unk_token_id = this.model.tokens_to_ids.get(this.unk_token), this.model_max_length = t.model_max_length, this.remove_space = t.remove_space, this.clean_up_tokenization_spaces = t.clean_up_tokenization_spaces ?? true, this.do_lowercase_and_remove_accent = t.do_lowercase_and_remove_accent ?? false, this.padding_side = "right", this.legacy = false, this.chat_template = t.chat_template ?? null, Array.isArray(this.chat_template)) {
        const s = /* @__PURE__ */ Object.create(null);
        for (const { name: l, template: f } of this.chat_template) {
          if (typeof l != "string" || typeof f != "string")
            throw new Error('Chat template must be a list of objects with "name" and "template" properties');
          s[l] = f;
        }
        this.chat_template = s;
      }
      this._compiled_template_cache = /* @__PURE__ */ new Map();
    }
    getToken(...e) {
      for (const t of e) {
        const s = this._tokenizer_config[t];
        if (s)
          if (typeof s == "object") {
            if (s.__type === "AddedToken")
              return s.content;
            throw Error(`Unknown token: ${s}`);
          } else
            return s;
      }
      return null;
    }
    static async from_pretrained(e, { progress_callback: t = null, config: s = null, cache_dir: l = null, local_files_only: f = false, revision: d = "main", legacy: w = null } = {}) {
      const g = await loadTokenizer(e, {
        progress_callback: t,
        config: s,
        cache_dir: l,
        local_files_only: f,
        revision: d,
        legacy: w
      });
      return new this(...g);
    }
    _call(e, { text_pair: t = null, add_special_tokens: s = true, padding: l = false, truncation: f = null, max_length: d = null, return_tensor: w = true, return_token_type_ids: g = null } = {}) {
      const _ = Array.isArray(e);
      let h;
      if (_) {
        if (e.length === 0)
          throw Error("text array must be non-empty");
        if (t !== null) {
          if (Array.isArray(t)) {
            if (e.length !== t.length)
              throw Error("text and text_pair must have the same length");
          } else
            throw Error("text_pair must also be an array");
          h = e.map((n, u) => this._encode_plus(n, t[u], {
            add_special_tokens: s,
            return_token_type_ids: g
          }));
        } else
          h = e.map((n) => this._encode_plus(n, null, {
            add_special_tokens: s,
            return_token_type_ids: g
          }));
      } else {
        if (e == null)
          throw Error("text may not be null or undefined");
        if (Array.isArray(t))
          throw Error("When specifying `text_pair`, since `text` is a string, `text_pair` must also be a string (i.e., not an array).");
        h = [
          this._encode_plus(e, t, {
            add_special_tokens: s,
            return_token_type_ids: g
          })
        ];
      }
      if (d === null ? l === "max_length" ? d = this.model_max_length : d = max(h.map((n) => n.input_ids.length))[0] : f || console.warn("Truncation was not explicitly activated but `max_length` is provided a specific value, please use `truncation=true` to explicitly truncate examples to max length."), d = Math.min(d, this.model_max_length), l || f)
        for (let n = 0; n < h.length; ++n)
          h[n].input_ids.length !== d && (h[n].input_ids.length > d ? f && truncateHelper(h[n], d) : l && padHelper(h[n], d, (u) => u === "input_ids" ? this.pad_token_id : 0, this.padding_side));
      const r = {};
      if (w) {
        if (!(l && f) && h.some((u) => {
          for (const p of Object.keys(u))
            if (u[p].length !== h[0][p]?.length)
              return true;
          return false;
        }))
          throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=true' and 'truncation=true' to have batched tensors with the same length.");
        const n = [
          h.length,
          h[0].input_ids.length
        ];
        for (const u of Object.keys(h[0]))
          r[u] = new Tensor("int64", BigInt64Array.from(h.flatMap((p) => p[u]).map(BigInt)), n);
      } else {
        for (const n of Object.keys(h[0]))
          r[n] = h.map((u) => u[n]);
        if (!_)
          for (const n of Object.keys(r))
            r[n] = r[n][0];
      }
      return r;
    }
    _encode_text(e) {
      return e === null ? null : (this.added_tokens_regex ? e.split(this.added_tokens_regex).filter((l) => l) : [
        e
      ]).map((l, f) => {
        if (this.added_tokens.find((w) => w.content === l) !== void 0)
          return l;
        {
          if (this.remove_space === true && (l = l.trim().split(/\s+/).join(" ")), this.do_lowercase_and_remove_accent && (l = lowercase_and_remove_accent(l)), this.normalizer !== null && (l = this.normalizer(l)), l.length === 0)
            return [];
          const w = this.pre_tokenizer !== null ? this.pre_tokenizer(l, {
            section_index: f
          }) : [
            l
          ];
          return this.model(w);
        }
      }).flat();
    }
    _encode_plus(e, t = null, { add_special_tokens: s = true, return_token_type_ids: l = null } = {}) {
      const f = this._encode_text(e), d = this._encode_text(t), w = this.post_processor ? this.post_processor(f, d, {
        add_special_tokens: s
      }) : {
        tokens: mergeArrays(f ?? [], d ?? [])
      }, g = this.model.convert_tokens_to_ids(w.tokens), _ = {
        input_ids: g,
        attention_mask: new Array(g.length).fill(1)
      };
      return (l ?? this.return_token_type_ids) && w.token_type_ids && (_.token_type_ids = w.token_type_ids), _;
    }
    encode(e, t = null, { add_special_tokens: s = true, return_token_type_ids: l = null } = {}) {
      const { input_ids: f } = this._encode_plus(e, t, {
        add_special_tokens: s,
        return_token_type_ids: l
      });
      return f;
    }
    batch_decode(e, t = {}) {
      return e instanceof Tensor && (e = e.tolist()), e.map((s) => this.decode(s, t));
    }
    decode(e, t = {}) {
      if (e instanceof Tensor && (e = prepareTensorForDecode(e)), !Array.isArray(e) || e.length === 0 || !isIntegralNumber(e[0]))
        throw Error("token_ids must be a non-empty array of integers.");
      return this.decode_single(e, t);
    }
    decode_single(e, { skip_special_tokens: t = false, clean_up_tokenization_spaces: s = null }) {
      let l = this.model.convert_ids_to_tokens(e);
      t && (l = l.filter((d) => !this.special_tokens.includes(d)));
      let f = this.decoder ? this.decoder(l) : l.join(" ");
      return this.decoder && this.decoder.end_of_word_suffix && (f = f.replaceAll(this.decoder.end_of_word_suffix, " "), t && (f = f.trim())), (s ?? this.clean_up_tokenization_spaces) && (f = clean_up_tokenization(f)), f;
    }
    get default_chat_template() {
      return this._warned_about_chat_template || (console.warn("No chat template is defined for this tokenizer - using a default chat template that implements the ChatML format. If the default is not appropriate for your model, please set `tokenizer.chat_template` to an appropriate template. See https://huggingface.co/docs/transformers/main/chat_templating for more information."), this._warned_about_chat_template = true), this._default_chat_template;
    }
    apply_chat_template(e, { chat_template: t = null, add_generation_prompt: s = false, tokenize: l = true, padding: f = false, truncation: d = false, max_length: w = null, return_tensor: g = true, tokenizer_kwargs: _ = {}, ...h } = {}) {
      if (this.chat_template && typeof this.chat_template == "object" || this.chat_template === null && this.default_chat_template && typeof this.default_chat_template == "object") {
        const p = this.chat_template ?? this.default_chat_template;
        if (t !== null && Object.hasOwn(p, t))
          t = p[t];
        else if (t === null && "default" in p)
          t = p.default;
        else if (t === null)
          throw Error(`This model has multiple chat templates with no default specified! Please either pass a chat template or the name of the template you wish to use to the 'chat_template' argument. Available template names are ${Object.keys(p).sort()}.`);
      } else
        t ?? (t = this.chat_template ?? this.default_chat_template);
      if (typeof t != "string")
        throw Error(`chat_template must be a string, but got ${typeof t}`);
      let r = this._compiled_template_cache.get(t);
      r === void 0 && (r = new Template(t), this._compiled_template_cache.set(t, r));
      const n = /* @__PURE__ */ Object.create(null);
      for (const p of SPECIAL_TOKEN_ATTRIBUTES) {
        const M = this.getToken(p);
        M && (n[p] = M);
      }
      const u = r.render({
        messages: e,
        add_generation_prompt: s,
        ...n,
        ...h
      });
      return l ? this._call(u, {
        add_special_tokens: false,
        padding: f,
        truncation: d,
        max_length: w,
        return_tensor: g,
        ..._
      }).input_ids : u;
    }
  }
  class BertTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class AlbertTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class MobileBertTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class SqueezeBertTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class DebertaTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class DebertaV2Tokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class HerbertTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class ConvBertTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class RoFormerTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class DistilBertTokenizer extends PreTrainedTokenizer {
  }
  class CamembertTokenizer extends PreTrainedTokenizer {
  }
  class XLMTokenizer extends PreTrainedTokenizer {
    constructor(e, t) {
      super(e, t);
      __publicField(this, "return_token_type_ids", true);
      console.warn('WARNING: `XLMTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
    }
  }
  class ElectraTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "return_token_type_ids", true);
    }
  }
  class T5Tokenizer extends PreTrainedTokenizer {
  }
  class GPT2Tokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "_default_chat_template", '{% for message in messages %}" "{{ message.content }}{{ eos_token }}" "{% endfor %}');
    }
  }
  class BartTokenizer extends PreTrainedTokenizer {
  }
  class MBartTokenizer extends PreTrainedTokenizer {
    constructor(e, t) {
      super(e, t), this.languageRegex = /^[a-z]{2}_[A-Z]{2}$/, this.language_codes = this.special_tokens.filter((s) => this.languageRegex.test(s)), this.lang_to_token = (s) => s;
    }
    _build_translation_inputs(e, t, s) {
      return _build_translation_inputs(this, e, t, s);
    }
  }
  class MBart50Tokenizer extends MBartTokenizer {
  }
  class RobertaTokenizer extends PreTrainedTokenizer {
  }
  class BloomTokenizer extends GPT2Tokenizer {
    constructor(e, t) {
      const s = ".,!?\u2026\u3002\uFF0C\u3001\u0964\u06D4\u060C", l = e.pre_tokenizer?.pretokenizers[0]?.pattern;
      l && l.Regex === ` ?[^(\\s|[${s}])]+` && (l.Regex = ` ?[^\\s${s}]+`), super(e, t);
    }
  }
  const SPIECE_UNDERLINE = "\u2581";
  class LlamaTokenizer extends PreTrainedTokenizer {
    constructor(e, t) {
      super(e, t);
      __publicField(this, "_default_chat_template", `{% if messages[0]['role'] == 'system' %}{% set loop_messages = messages[1:] %}{% set system_message = messages[0]['content'] %}{% elif USE_DEFAULT_PROMPT == true and not '<<SYS>>' in messages[0]['content'] %}{% set loop_messages = messages %}{% set system_message = 'DEFAULT_SYSTEM_MESSAGE' %}{% else %}{% set loop_messages = messages %}{% set system_message = false %}{% endif %}{% for message in loop_messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if loop.index0 == 0 and system_message != false %}{% set content = '<<SYS>>
' + system_message + '
<</SYS>>

' + message['content'] %}{% else %}{% set content = message['content'] %}{% endif %}{% if message['role'] == 'user' %}{{ bos_token + '[INST] ' + content.strip() + ' [/INST]' }}{% elif message['role'] == 'system' %}{{ '<<SYS>>
' + content.strip() + '
<</SYS>>

' }}{% elif message['role'] == 'assistant' %}{{ ' '  + content.strip() + ' ' + eos_token }}{% endif %}{% endfor %}`);
      __publicField(this, "DEFAULT_SYSTEM_PROMPT", `You are a helpful, respectful and honest assistant. Always answer as helpfully as possible, while being safe. Your answers should not include any harmful, unethical, racist, sexist, toxic, dangerous, or illegal content. Please ensure that your responses are socially unbiased and positive in nature.

If a question does not make any sense, or is not factually coherent, explain why instead of answering something not correct. If you don't know the answer to a question, please don't share false information.`);
      this.use_default_system_prompt = t.use_default_system_prompt ?? false, this.legacy = t.legacy ?? true, this.legacy || (this.normalizer = null, this.pre_tokenizer = new MetaspacePreTokenizer({
        replacement: SPIECE_UNDERLINE,
        add_prefix_space: true,
        prepend_scheme: "first"
      }));
    }
    _encode_text(e) {
      if (e === null)
        return null;
      if (this.legacy || e.length === 0)
        return super._encode_text(e);
      let t = super._encode_text(SPIECE_UNDERLINE + e.replaceAll(SPIECE_UNDERLINE, " "));
      return t.length > 1 && t[0] === SPIECE_UNDERLINE && this.special_tokens.includes(t[1]) && (t = t.slice(1)), t;
    }
    get default_chat_template() {
      return super.default_chat_template.replaceAll("USE_DEFAULT_PROMPT", this.use_default_system_prompt ? "true" : "false").replaceAll("DEFAULT_SYSTEM_MESSAGE", this.DEFAULT_SYSTEM_PROMPT.replaceAll(`
`, "\\n").replaceAll("'", "\\'"));
    }
  }
  class CodeLlamaTokenizer extends LlamaTokenizer {
  }
  class XLMRobertaTokenizer extends PreTrainedTokenizer {
  }
  class MPNetTokenizer extends PreTrainedTokenizer {
  }
  class FalconTokenizer extends PreTrainedTokenizer {
  }
  class GPTNeoXTokenizer extends PreTrainedTokenizer {
  }
  class EsmTokenizer extends PreTrainedTokenizer {
  }
  class Qwen2Tokenizer extends PreTrainedTokenizer {
  }
  class GemmaTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "_default_chat_template", `{% if messages[0]['role'] == 'system' %}{{ raise_exception('System role not supported') }}{% endif %}{% for message in messages %}{% if (message['role'] == 'user') != (loop.index0 % 2 == 0) %}{{ raise_exception('Conversation roles must alternate user/assistant/user/assistant/...') }}{% endif %}{% if (message['role'] == 'assistant') %}{% set role = 'model' %}{% else %}{% set role = message['role'] %}{% endif %}{{ '<start_of_turn>' + role + '
' + message['content'] | trim + '<end_of_turn>
' }}{% endfor %}{% if add_generation_prompt %}{{'<start_of_turn>model
'}}{% endif %}`);
    }
  }
  class Grok1Tokenizer extends PreTrainedTokenizer {
  }
  function _build_translation_inputs(i, e, t, s) {
    if (!("language_codes" in i) || !Array.isArray(i.language_codes))
      throw new Error("Tokenizer must have `language_codes` attribute set and it should be an array of language ids.");
    if (!("languageRegex" in i) || !(i.languageRegex instanceof RegExp))
      throw new Error("Tokenizer must have `languageRegex` attribute set and it should be a regular expression.");
    if (!("lang_to_token" in i) || typeof i.lang_to_token != "function")
      throw new Error("Tokenizer must have `lang_to_token` attribute set and it should be a function.");
    const l = s.src_lang, f = s.tgt_lang;
    if (!i.language_codes.includes(f))
      throw new Error(`Target language code "${f}" is not valid. Must be one of: {${i.language_codes.join(", ")}}`);
    if (l !== void 0) {
      if (!i.language_codes.includes(l))
        throw new Error(`Source language code "${l}" is not valid. Must be one of: {${i.language_codes.join(", ")}}`);
      for (const d of i.post_processor.config.single)
        if ("SpecialToken" in d && i.languageRegex.test(d.SpecialToken.id)) {
          d.SpecialToken.id = i.lang_to_token(l);
          break;
        }
    }
    return s.forced_bos_token_id = i.model.convert_tokens_to_ids([
      i.lang_to_token(f)
    ])[0], i._call(e, t);
  }
  class NllbTokenizer extends PreTrainedTokenizer {
    constructor(e, t) {
      super(e, t), this.languageRegex = /^[a-z]{3}_[A-Z][a-z]{3}$/, this.language_codes = this.special_tokens.filter((s) => this.languageRegex.test(s)), this.lang_to_token = (s) => s;
    }
    _build_translation_inputs(e, t, s) {
      return _build_translation_inputs(this, e, t, s);
    }
  }
  class M2M100Tokenizer extends PreTrainedTokenizer {
    constructor(e, t) {
      super(e, t), this.languageRegex = /^__[a-z]{2,3}__$/, this.language_codes = this.special_tokens.filter((s) => this.languageRegex.test(s)).map((s) => s.slice(2, -2)), this.lang_to_token = (s) => `__${s}__`;
    }
    _build_translation_inputs(e, t, s) {
      return _build_translation_inputs(this, e, t, s);
    }
  }
  const WHISPER_LANGUAGES = [
    [
      "en",
      "english"
    ],
    [
      "zh",
      "chinese"
    ],
    [
      "de",
      "german"
    ],
    [
      "es",
      "spanish"
    ],
    [
      "ru",
      "russian"
    ],
    [
      "ko",
      "korean"
    ],
    [
      "fr",
      "french"
    ],
    [
      "ja",
      "japanese"
    ],
    [
      "pt",
      "portuguese"
    ],
    [
      "tr",
      "turkish"
    ],
    [
      "pl",
      "polish"
    ],
    [
      "ca",
      "catalan"
    ],
    [
      "nl",
      "dutch"
    ],
    [
      "ar",
      "arabic"
    ],
    [
      "sv",
      "swedish"
    ],
    [
      "it",
      "italian"
    ],
    [
      "id",
      "indonesian"
    ],
    [
      "hi",
      "hindi"
    ],
    [
      "fi",
      "finnish"
    ],
    [
      "vi",
      "vietnamese"
    ],
    [
      "he",
      "hebrew"
    ],
    [
      "uk",
      "ukrainian"
    ],
    [
      "el",
      "greek"
    ],
    [
      "ms",
      "malay"
    ],
    [
      "cs",
      "czech"
    ],
    [
      "ro",
      "romanian"
    ],
    [
      "da",
      "danish"
    ],
    [
      "hu",
      "hungarian"
    ],
    [
      "ta",
      "tamil"
    ],
    [
      "no",
      "norwegian"
    ],
    [
      "th",
      "thai"
    ],
    [
      "ur",
      "urdu"
    ],
    [
      "hr",
      "croatian"
    ],
    [
      "bg",
      "bulgarian"
    ],
    [
      "lt",
      "lithuanian"
    ],
    [
      "la",
      "latin"
    ],
    [
      "mi",
      "maori"
    ],
    [
      "ml",
      "malayalam"
    ],
    [
      "cy",
      "welsh"
    ],
    [
      "sk",
      "slovak"
    ],
    [
      "te",
      "telugu"
    ],
    [
      "fa",
      "persian"
    ],
    [
      "lv",
      "latvian"
    ],
    [
      "bn",
      "bengali"
    ],
    [
      "sr",
      "serbian"
    ],
    [
      "az",
      "azerbaijani"
    ],
    [
      "sl",
      "slovenian"
    ],
    [
      "kn",
      "kannada"
    ],
    [
      "et",
      "estonian"
    ],
    [
      "mk",
      "macedonian"
    ],
    [
      "br",
      "breton"
    ],
    [
      "eu",
      "basque"
    ],
    [
      "is",
      "icelandic"
    ],
    [
      "hy",
      "armenian"
    ],
    [
      "ne",
      "nepali"
    ],
    [
      "mn",
      "mongolian"
    ],
    [
      "bs",
      "bosnian"
    ],
    [
      "kk",
      "kazakh"
    ],
    [
      "sq",
      "albanian"
    ],
    [
      "sw",
      "swahili"
    ],
    [
      "gl",
      "galician"
    ],
    [
      "mr",
      "marathi"
    ],
    [
      "pa",
      "punjabi"
    ],
    [
      "si",
      "sinhala"
    ],
    [
      "km",
      "khmer"
    ],
    [
      "sn",
      "shona"
    ],
    [
      "yo",
      "yoruba"
    ],
    [
      "so",
      "somali"
    ],
    [
      "af",
      "afrikaans"
    ],
    [
      "oc",
      "occitan"
    ],
    [
      "ka",
      "georgian"
    ],
    [
      "be",
      "belarusian"
    ],
    [
      "tg",
      "tajik"
    ],
    [
      "sd",
      "sindhi"
    ],
    [
      "gu",
      "gujarati"
    ],
    [
      "am",
      "amharic"
    ],
    [
      "yi",
      "yiddish"
    ],
    [
      "lo",
      "lao"
    ],
    [
      "uz",
      "uzbek"
    ],
    [
      "fo",
      "faroese"
    ],
    [
      "ht",
      "haitian creole"
    ],
    [
      "ps",
      "pashto"
    ],
    [
      "tk",
      "turkmen"
    ],
    [
      "nn",
      "nynorsk"
    ],
    [
      "mt",
      "maltese"
    ],
    [
      "sa",
      "sanskrit"
    ],
    [
      "lb",
      "luxembourgish"
    ],
    [
      "my",
      "myanmar"
    ],
    [
      "bo",
      "tibetan"
    ],
    [
      "tl",
      "tagalog"
    ],
    [
      "mg",
      "malagasy"
    ],
    [
      "as",
      "assamese"
    ],
    [
      "tt",
      "tatar"
    ],
    [
      "haw",
      "hawaiian"
    ],
    [
      "ln",
      "lingala"
    ],
    [
      "ha",
      "hausa"
    ],
    [
      "ba",
      "bashkir"
    ],
    [
      "jw",
      "javanese"
    ],
    [
      "su",
      "sundanese"
    ]
  ], WHISPER_LANGUAGE_MAPPING = new Map(WHISPER_LANGUAGES), WHISPER_TO_LANGUAGE_CODE_MAPPING = new Map([
    ...WHISPER_LANGUAGES.map(([i, e]) => [
      e,
      i
    ]),
    [
      "burmese",
      "my"
    ],
    [
      "valencian",
      "ca"
    ],
    [
      "flemish",
      "nl"
    ],
    [
      "haitian",
      "ht"
    ],
    [
      "letzeburgesch",
      "lb"
    ],
    [
      "pushto",
      "ps"
    ],
    [
      "panjabi",
      "pa"
    ],
    [
      "moldavian",
      "ro"
    ],
    [
      "moldovan",
      "ro"
    ],
    [
      "sinhalese",
      "si"
    ],
    [
      "castilian",
      "es"
    ]
  ]);
  class WhisperTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "_default_chat_template", '{% for message in messages %}" "{{ message.content }}{{ eos_token }}" "{% endfor %}');
    }
    _decode_asr(e, { return_timestamps: t = false, return_language: s = false, time_precision: l = null, force_full_sequences: f = true } = {}) {
      if (l === null)
        throw Error("Must specify time_precision");
      let d = null;
      const w = t === "word";
      function g() {
        return {
          language: d,
          timestamp: [
            null,
            null
          ],
          text: ""
        };
      }
      const _ = [];
      let h = g(), r = 0;
      const n = this.model.convert_tokens_to_ids([
        "<|notimestamps|>"
      ])[0] + 1;
      let u = [], p = [], M = false, P = null;
      const E = new Set(this.all_special_ids);
      for (const A of e) {
        const C = A.tokens, F = w ? A.token_timestamps : null;
        let D = null, N = n;
        if ("stride" in A) {
          const [Z, te, J] = A.stride;
          if (r -= te, P = Z - J, te && (N = te / l + n), J)
            for (let G = C.length - 1; G >= 0; --G) {
              const H = C[G];
              if (H >= n) {
                if (D !== null && (H - n) * l < P)
                  break;
                D = H;
              }
            }
        }
        let R = [], j = [];
        for (let Z = 0; Z < C.length; ++Z) {
          const te = C[Z];
          if (E.has(te)) {
            const J = this.decode([
              te
            ]), G = WHISPER_LANGUAGE_MAPPING.get(J.slice(2, -2));
            if (G !== void 0) {
              if (d !== null && G !== d && !t) {
                u.push(R);
                const H = this.findLongestCommonSequence(u)[0], U = this.decode(H);
                h.text = U, _.push(h), u = [], R = [], h = g();
              }
              d = h.language = G;
            }
          } else if (te >= n) {
            const J = (te - n) * l + r, G = round(J, 2);
            if (D !== null && te >= D)
              M = true;
            else if (M || u.length > 0 && te < N)
              M = false;
            else if (h.timestamp[0] === null)
              h.timestamp[0] = G;
            else if (G !== h.timestamp[0]) {
              h.timestamp[1] = G, u.push(R), w && p.push(j);
              const [H, U] = this.findLongestCommonSequence(u, p), Q = this.decode(H);
              h.text = Q, w && (h.words = this.collateWordTimestamps(H, U, d)), _.push(h), u = [], R = [], p = [], j = [], h = g();
            }
          } else if (R.push(te), w) {
            let J = round(F[Z] + r, 2), G;
            Z + 1 < F.length ? G = round(F[Z + 1] + r, 2) : G = null, j.push([
              J,
              G
            ]);
          }
        }
        if ("stride" in A) {
          const [Z, te, J] = A.stride;
          r += Z - J;
        }
        R.length > 0 ? (u.push(R), w && p.push(j)) : u.every((Z) => Z.length === 0) && (h = g(), u = [], R = [], p = [], j = []);
      }
      if (u.length > 0) {
        if (f && t)
          throw new Error("Whisper did not predict an ending timestamp, which can happen if audio is cut off in the middle of a word. Also make sure WhisperTimeStampLogitsProcessor was used during generation.");
        const [A, C] = this.findLongestCommonSequence(u, p), F = this.decode(A);
        h.text = F, w && (h.words = this.collateWordTimestamps(A, C, d)), _.push(h);
      }
      let k = /* @__PURE__ */ Object.create(null);
      const $ = _.map((A) => A.text).join("");
      if (t || s) {
        for (let A = 0; A < _.length; ++A) {
          const C = _[A];
          t || delete C.timestamp, s || delete C.language;
        }
        if (w) {
          const A = [];
          for (const C of _)
            for (const F of C.words)
              A.push(F);
          k = {
            chunks: A
          };
        } else
          k = {
            chunks: _
          };
      }
      return [
        $,
        k
      ];
    }
    findLongestCommonSequence(e, t = null) {
      let s = e[0], l = s.length, f = [];
      const d = Array.isArray(t) && t.length > 0;
      let w = d ? [] : null, g = d ? t[0] : null;
      for (let _ = 1; _ < e.length; ++_) {
        const h = e[_];
        let r = 0, n = [
          l,
          l,
          0,
          0
        ];
        const u = h.length;
        for (let A = 1; A < l + u; ++A) {
          const C = A / 1e4, F = Math.max(0, l - A), D = Math.min(l, l + u - A), N = s.slice(F, D), R = Math.max(0, A - l), j = Math.min(u, A), Z = h.slice(R, j);
          if (N.length !== Z.length)
            throw new Error("There is a bug within whisper `decode_asr` function, please report it. Dropping to prevent bad inference.");
          const te = N.filter((G, H) => G === Z[H]).length, J = te / A + C;
          te > 1 && J > r && (r = J, n = [
            F,
            D,
            R,
            j
          ]);
        }
        const [p, M, P, E] = n, k = Math.floor((M + p) / 2), $ = Math.floor((E + P) / 2);
        f.push(...s.slice(0, k)), s = h.slice($), l = s.length, d && (w.push(...g.slice(0, k)), g = t[_].slice($));
      }
      return f.push(...s), d ? (w.push(...g), [
        f,
        w
      ]) : [
        f,
        []
      ];
    }
    collateWordTimestamps(e, t, s) {
      const [l, f, d] = this.combineTokensIntoWords(e, s), w = [];
      for (let g = 0; g < l.length; ++g) {
        const _ = d[g];
        w.push({
          text: l[g],
          timestamp: [
            t[_.at(0)][0],
            t[_.at(-1)][1]
          ]
        });
      }
      return w;
    }
    combineTokensIntoWords(e, t, s = `"'\u201C\xA1\xBF([{-`, l = `"'.\u3002,\uFF0C!\uFF01?\uFF1F:\uFF1A\u201D)]}\u3001`) {
      t = t ?? "english";
      let f, d, w;
      return [
        "chinese",
        "japanese",
        "thai",
        "lao",
        "myanmar"
      ].includes(t) ? [f, d, w] = this.splitTokensOnUnicode(e) : [f, d, w] = this.splitTokensOnSpaces(e), this.mergePunctuations(f, d, w, s, l);
    }
    decode(e, t) {
      let s;
      return t && t.decode_with_timestamps ? (e instanceof Tensor && (e = prepareTensorForDecode(e)), s = this.decodeWithTimestamps(e, t)) : s = super.decode(e, t), s;
    }
    decodeWithTimestamps(e, t) {
      const s = t?.time_precision ?? 0.02, l = Array.from(this.all_special_ids).at(-1) + 1;
      let f = [
        []
      ];
      for (const d of e)
        if (d >= l) {
          const w = round((d - l) * s, 2);
          f.push(`<|${w}|>`), f.push([]);
        } else
          f[f.length - 1].push(d);
      return f = f.map((d) => typeof d == "string" ? d : super.decode(d, t)), f.join("");
    }
    splitTokensOnUnicode(e) {
      const t = this.decode(e, {
        decode_with_timestamps: true
      }), s = "\uFFFD", l = [], f = [], d = [];
      let w = [], g = [], _ = 0;
      for (let h = 0; h < e.length; ++h) {
        const r = e[h];
        w.push(r), g.push(h);
        const n = this.decode(w, {
          decode_with_timestamps: true
        });
        (!n.includes(s) || t[_ + n.indexOf(s)] === s) && (l.push(n), f.push(w), d.push(g), w = [], g = [], _ += n.length);
      }
      return [
        l,
        f,
        d
      ];
    }
    splitTokensOnSpaces(e) {
      const [t, s, l] = this.splitTokensOnUnicode(e), f = [], d = [], w = [], g = new RegExp(`^[${PUNCTUATION_REGEX}]$`, "gu");
      for (let _ = 0; _ < t.length; ++_) {
        const h = t[_], r = s[_], n = l[_], u = r[0] >= this.model.tokens_to_ids.get("<|endoftext|>"), p = h.startsWith(" "), M = h.trim(), P = g.test(M);
        if (u || p || P || f.length === 0)
          f.push(h), d.push(r), w.push(n);
        else {
          const E = f.length - 1;
          f[E] += h, d[E].push(...r), w[E].push(...n);
        }
      }
      return [
        f,
        d,
        w
      ];
    }
    mergePunctuations(e, t, s, l, f) {
      const d = structuredClone(e), w = structuredClone(t), g = structuredClone(s);
      let _ = d.length - 2, h = d.length - 1;
      for (; _ >= 0; )
        d[_].startsWith(" ") && l.includes(d[_].trim()) ? (d[h] = d[_] + d[h], w[h] = mergeArrays(w[_], w[h]), g[h] = mergeArrays(g[_], g[h]), d[_] = "", w[_] = [], g[_] = []) : h = _, --_;
      for (_ = 0, h = 1; h < d.length; )
        !d[_].endsWith(" ") && f.includes(d[h]) ? (d[_] += d[h], w[_] = mergeArrays(w[_], w[h]), g[_] = mergeArrays(g[_], g[h]), d[h] = "", w[h] = [], g[h] = []) : _ = h, ++h;
      return [
        d.filter((r) => r),
        w.filter((r) => r.length > 0),
        g.filter((r) => r.length > 0)
      ];
    }
    get_decoder_prompt_ids({ language: e = null, task: t = null, no_timestamps: s = true } = {}) {
      const l = [];
      if (e) {
        e = e.toLowerCase();
        let f = WHISPER_TO_LANGUAGE_CODE_MAPPING.get(e);
        if (f === void 0)
          if (WHISPER_LANGUAGE_MAPPING.has(e))
            f = e;
          else {
            const g = e.length === 2 ? WHISPER_LANGUAGE_MAPPING.keys() : WHISPER_LANGUAGE_MAPPING.values();
            throw new Error(`Language "${e}" is not supported. Must be one of: ${JSON.stringify(g)}`);
          }
        const d = this.model.tokens_to_ids.get(`<|${f}|>`);
        if (d === void 0)
          throw new Error(`Unable to find language "${f}" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.`);
        l.push(d);
      } else
        l.push(null);
      if (t) {
        if (t = t.toLowerCase(), t !== "transcribe" && t !== "translate")
          throw new Error(`Task "${t}" is not supported. Must be one of: ["transcribe", "translate"]`);
        const f = this.model.tokens_to_ids.get(`<|${t}|>`);
        if (f === void 0)
          throw new Error(`Unable to find task "${t}" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.`);
        l.push(f);
      } else
        l.push(null);
      if (s) {
        const f = this.model.tokens_to_ids.get("<|notimestamps|>");
        if (f === void 0)
          throw new Error('Unable to find "<|notimestamps|>" in model vocabulary. Please report this issue at https://github.com/xenova/transformers.js/issues/new/choose.');
        l.push(f);
      }
      return l.map((f, d) => [
        d + 1,
        f
      ]).filter((f) => f[1] !== null);
    }
  }
  class CodeGenTokenizer extends PreTrainedTokenizer {
  }
  class CLIPTokenizer extends PreTrainedTokenizer {
  }
  class SiglipTokenizer extends PreTrainedTokenizer {
  }
  class MarianTokenizer extends PreTrainedTokenizer {
    constructor(e, t) {
      super(e, t), this.languageRegex = /^(>>\w+<<)\s*/g, this.supported_language_codes = this.model.vocab.filter((s) => this.languageRegex.test(s)), console.warn('WARNING: `MarianTokenizer` is not yet supported by Hugging Face\'s "fast" tokenizers library. Therefore, you may experience slightly inaccurate results.');
    }
    _encode_text(e) {
      if (e === null)
        return null;
      const [t, ...s] = e.trim().split(this.languageRegex);
      if (s.length === 0)
        return super._encode_text(t);
      if (s.length === 2) {
        const [l, f] = s;
        return this.supported_language_codes.includes(l) || console.warn(`Unsupported language code "${l}" detected, which may lead to unexpected behavior. Should be one of: ${JSON.stringify(this.supported_language_codes)}`), mergeArrays([
          l
        ], super._encode_text(f));
      }
    }
  }
  class Wav2Vec2CTCTokenizer extends PreTrainedTokenizer {
  }
  class BlenderbotTokenizer extends PreTrainedTokenizer {
    constructor() {
      super(...arguments);
      __publicField(this, "_default_chat_template", "{% for message in messages %}{% if message['role'] == 'user' %}{{ ' ' }}{% endif %}{{ message['content'] }}{% if not loop.last %}{{ '  ' }}{% endif %}{% endfor %}{{ eos_token }}");
    }
  }
  class BlenderbotSmallTokenizer extends BlenderbotTokenizer {
  }
  class SpeechT5Tokenizer extends PreTrainedTokenizer {
  }
  class NougatTokenizer extends PreTrainedTokenizer {
  }
  class VitsTokenizer extends PreTrainedTokenizer {
    constructor(e, t) {
      super(e, t), this.decoder = new VitsDecoder({});
    }
  }
  class CohereTokenizer extends PreTrainedTokenizer {
  }
  class AutoTokenizer {
    static async from_pretrained(e, { quantized: t = true, progress_callback: s = null, config: l = null, cache_dir: f = null, local_files_only: d = false, revision: w = "main", legacy: g = null } = {}) {
      const [_, h] = await loadTokenizer(e, {
        quantized: t,
        progress_callback: s,
        config: l,
        cache_dir: f,
        local_files_only: d,
        revision: w,
        legacy: g
      }), r = h.tokenizer_class?.replace(/Fast$/, "") ?? "PreTrainedTokenizer";
      let n = this.TOKENIZER_CLASS_MAPPING[r];
      return n || (console.warn(`Unknown tokenizer class "${r}", attempting to construct from base class.`), n = PreTrainedTokenizer), new n(_, h);
    }
  }
  __publicField(AutoTokenizer, "TOKENIZER_CLASS_MAPPING", {
    T5Tokenizer,
    DistilBertTokenizer,
    CamembertTokenizer,
    DebertaTokenizer,
    DebertaV2Tokenizer,
    BertTokenizer,
    HerbertTokenizer,
    ConvBertTokenizer,
    RoFormerTokenizer,
    XLMTokenizer,
    ElectraTokenizer,
    MobileBertTokenizer,
    SqueezeBertTokenizer,
    AlbertTokenizer,
    GPT2Tokenizer,
    BartTokenizer,
    MBartTokenizer,
    MBart50Tokenizer,
    RobertaTokenizer,
    WhisperTokenizer,
    CodeGenTokenizer,
    CLIPTokenizer,
    SiglipTokenizer,
    MarianTokenizer,
    BloomTokenizer,
    NllbTokenizer,
    M2M100Tokenizer,
    LlamaTokenizer,
    CodeLlamaTokenizer,
    XLMRobertaTokenizer,
    MPNetTokenizer,
    FalconTokenizer,
    GPTNeoXTokenizer,
    EsmTokenizer,
    Wav2Vec2CTCTokenizer,
    BlenderbotTokenizer,
    BlenderbotSmallTokenizer,
    SpeechT5Tokenizer,
    NougatTokenizer,
    VitsTokenizer,
    Qwen2Tokenizer,
    GemmaTokenizer,
    Grok1Tokenizer,
    CohereTokenizer,
    PreTrainedTokenizer
  });
  async function loadConfig(i, e) {
    return await getModelJSON(i, "config.json", true, e);
  }
  class PretrainedConfig {
    constructor(e) {
      this.model_type = null, this.is_encoder_decoder = false, Object.assign(this, e);
    }
    static async from_pretrained(e, { progress_callback: t = null, config: s = null, cache_dir: l = null, local_files_only: f = false, revision: d = "main" } = {}) {
      let w = s ?? await loadConfig(e, {
        progress_callback: t,
        config: s,
        cache_dir: l,
        local_files_only: f,
        revision: d
      });
      return new this(w);
    }
  }
  class AutoConfig {
    static async from_pretrained(...e) {
      return PretrainedConfig.from_pretrained(...e);
    }
  }
  class LogitsProcessorList extends Callable {
    constructor() {
      super(), this.processors = [];
    }
    push(e) {
      this.processors.push(e);
    }
    extend(e) {
      this.processors.push(...e);
    }
    _call(e, t) {
      for (let s of t)
        this.processors.forEach((l) => l(e, s));
    }
    [Symbol.iterator]() {
      return this.processors.values();
    }
  }
  class LogitsProcessor extends Callable {
    _call(e, t) {
      throw Error("`_call` should be implemented in a subclass");
    }
  }
  class ForceTokensLogitsProcessor extends LogitsProcessor {
    constructor(e) {
      super(), this.force_token_map = Object.fromEntries(e ?? []);
    }
    _call(e, t) {
      let s = this.force_token_map[e.length];
      return exists(s) && (t.data.fill(-1 / 0), t.data[s] = 0), t;
    }
  }
  class ForcedBOSTokenLogitsProcessor extends LogitsProcessor {
    constructor(e) {
      super(), this.bos_token_id = e;
    }
    _call(e, t) {
      return e.length === 1 && (t.data.fill(-1 / 0), t.data[this.bos_token_id] = 0), t;
    }
  }
  class ForcedEOSTokenLogitsProcessor extends LogitsProcessor {
    constructor(e, t) {
      super(), this.max_length = e, this.forced_eos_token_id = t;
    }
    _call(e, t) {
    }
  }
  class SuppressTokensAtBeginLogitsProcessor extends LogitsProcessor {
    constructor(e, t) {
      super(), this.begin_suppress_tokens = e, this.begin_index = t;
    }
    _call(e, t) {
      if (e.length === this.begin_index)
        for (let s of this.begin_suppress_tokens)
          t.data[s] = -1 / 0;
      return t;
    }
  }
  class WhisperTimeStampLogitsProcessor extends LogitsProcessor {
    constructor(e) {
      super(), this.eos_token_id = e.eos_token_id, this.no_timestamps_token_id = e.no_timestamps_token_id, this.timestamp_begin = this.no_timestamps_token_id + 1, this.begin_index = (e.forced_decoder_ids || []).length + 2, e.forced_decoder_ids.slice(-1)[0][1] === this.no_timestamps_token_id && (this.begin_index -= 1), this.max_initial_timestamp_index = e.max_initial_timestamp_index;
    }
    _call(e, t) {
      const s = t.data;
      if (s[this.no_timestamps_token_id] = -1 / 0, e.length === this.begin_index - 1)
        return s.fill(-1 / 0), s[this.timestamp_begin] = 0, t;
      const l = e.slice(this.begin_index), f = l.length >= 1 && l[l.length - 1] >= this.timestamp_begin, d = l.length < 2 || l[l.length - 2] >= this.timestamp_begin;
      if (f && (d ? s.subarray(this.timestamp_begin).fill(-1 / 0) : s.subarray(0, this.eos_token_id).fill(-1 / 0)), e.length === this.begin_index && this.max_initial_timestamp_index !== null) {
        const h = this.timestamp_begin + this.max_initial_timestamp_index;
        s.subarray(h + 1).fill(-1 / 0);
      }
      const w = log_softmax(s), g = Math.log(w.subarray(this.timestamp_begin).map(Math.exp).reduce((h, r) => h + r)), _ = max(w.subarray(0, this.timestamp_begin))[0];
      return g > _ && s.subarray(0, this.timestamp_begin).fill(-1 / 0), t;
    }
  }
  class NoRepeatNGramLogitsProcessor extends LogitsProcessor {
    constructor(e) {
      super(), this.no_repeat_ngram_size = e;
    }
    getNgrams(e) {
      const t = e.length, s = [];
      for (let f = 0; f < t + 1 - this.no_repeat_ngram_size; ++f) {
        const d = [];
        for (let w = 0; w < this.no_repeat_ngram_size; ++w)
          d.push(e[f + w]);
        s.push(d);
      }
      const l = /* @__PURE__ */ new Map();
      for (const f of s) {
        const d = f.slice(0, f.length - 1), w = JSON.stringify(d), g = l.get(w) ?? [];
        g.push(f[f.length - 1]), l.set(w, g);
      }
      return l;
    }
    getGeneratedNgrams(e, t) {
      const s = t.slice(t.length + 1 - this.no_repeat_ngram_size, t.length);
      return e.get(JSON.stringify(s)) ?? [];
    }
    calcBannedNgramTokens(e) {
      const t = [];
      if (e.length + 1 < this.no_repeat_ngram_size)
        return t;
      {
        const s = this.getNgrams(e);
        return this.getGeneratedNgrams(s, e);
      }
    }
    _call(e, t) {
      const s = this.calcBannedNgramTokens(e);
      for (const l of s)
        t.data[l] = -1 / 0;
      return t;
    }
  }
  class RepetitionPenaltyLogitsProcessor extends LogitsProcessor {
    constructor(e) {
      super(), this.penalty = e;
    }
    _call(e, t) {
      for (const s of e)
        t.data[s] < 0 ? t.data[s] *= this.penalty : t.data[s] /= this.penalty;
      return t;
    }
  }
  class MinLengthLogitsProcessor extends LogitsProcessor {
    constructor(e, t) {
      super(), this.min_length = e, this.eos_token_id = Array.isArray(t) ? t : [
        t
      ];
    }
    _call(e, t) {
      if (e.length < this.min_length)
        for (const s of this.eos_token_id)
          t.data[s] = -1 / 0;
      return t;
    }
  }
  class MinNewTokensLengthLogitsProcessor extends LogitsProcessor {
    constructor(e, t, s) {
      super(), this.prompt_length_to_skip = e, this.min_new_tokens = t, this.eos_token_id = Array.isArray(s) ? s : [
        s
      ];
    }
    _call(e, t) {
      if (e.length - this.prompt_length_to_skip < this.min_new_tokens)
        for (const l of this.eos_token_id)
          t.data[l] = -1 / 0;
      return t;
    }
  }
  class NoBadWordsLogitsProcessor extends LogitsProcessor {
    constructor(e, t) {
      super(), this.bad_words_ids = e, this.eos_token_id = Array.isArray(t) ? t : [
        t
      ];
    }
    _call(e, t) {
      for (const s of this.bad_words_ids) {
        let l = true;
        for (let f = 1; f <= s.length - 1 && s.length < e.length; ++f)
          if (s.at(-f - 1) !== e.at(-f)) {
            l = false;
            break;
          }
        l && (t.data[s.at(-1)] = -1 / 0);
      }
      return t;
    }
  }
  const GenerationConfig = class {
    constructor(i = {}) {
      this.max_length = i.max_length ?? 20, this.max_new_tokens = i.max_new_tokens ?? null, this.min_length = i.min_length ?? 0, this.min_new_tokens = i.min_new_tokens ?? null, this.early_stopping = i.early_stopping ?? false, this.max_time = i.max_time ?? null, this.do_sample = i.do_sample ?? false, this.num_beams = i.num_beams ?? 1, this.num_beam_groups = i.num_beam_groups ?? 1, this.penalty_alpha = i.penalty_alpha ?? null, this.use_cache = i.use_cache ?? true, this.temperature = i.temperature ?? 1, this.top_k = i.top_k ?? 50, this.top_p = i.top_p ?? 1, this.typical_p = i.typical_p ?? 1, this.epsilon_cutoff = i.epsilon_cutoff ?? 0, this.eta_cutoff = i.eta_cutoff ?? 0, this.diversity_penalty = i.diversity_penalty ?? 0, this.repetition_penalty = i.repetition_penalty ?? 1, this.encoder_repetition_penalty = i.encoder_repetition_penalty ?? 1, this.length_penalty = i.length_penalty ?? 1, this.no_repeat_ngram_size = i.no_repeat_ngram_size ?? 0, this.bad_words_ids = i.bad_words_ids ?? null, this.force_words_ids = i.force_words_ids ?? null, this.renormalize_logits = i.renormalize_logits ?? false, this.constraints = i.constraints ?? null, this.forced_bos_token_id = i.forced_bos_token_id ?? null, this.forced_eos_token_id = i.forced_eos_token_id ?? null, this.remove_invalid_values = i.remove_invalid_values ?? false, this.exponential_decay_length_penalty = i.exponential_decay_length_penalty ?? null, this.suppress_tokens = i.suppress_tokens ?? null, this.begin_suppress_tokens = i.begin_suppress_tokens ?? null, this.forced_decoder_ids = i.forced_decoder_ids ?? null, this.num_return_sequences = i.num_return_sequences ?? 1, this.output_attentions = i.output_attentions ?? false, this.output_hidden_states = i.output_hidden_states ?? false, this.output_scores = i.output_scores ?? false, this.return_dict_in_generate = i.return_dict_in_generate ?? false, this.pad_token_id = i.pad_token_id ?? null, this.bos_token_id = i.bos_token_id ?? null, this.eos_token_id = i.eos_token_id ?? null, this.encoder_no_repeat_ngram_size = i.encoder_no_repeat_ngram_size ?? 0, this.decoder_start_token_id = i.decoder_start_token_id ?? null, this.generation_kwargs = i.generation_kwargs ?? {};
    }
  };
  class Sampler extends Callable {
    constructor(e) {
      super(), this.generation_config = e;
    }
    _call(e, t = -1) {
      return this.sample(e, t);
    }
    sample(e, t) {
      throw Error("sample should be implemented in subclasses.");
    }
    getLogits(e, t) {
      let s = e.dims.at(-1), l = e.data;
      if (t === -1)
        l = l.slice(-s);
      else {
        let f = t * s;
        l = l.slice(f, f + s);
      }
      return this.generation_config.temperature > 0 && (l = l.map((f) => f / this.generation_config.temperature)), l;
    }
    randomSelect(e) {
      let t = e.reduce((l, f) => l + f, 0), s = Math.random() * t;
      for (let l = 0; l < e.length; ++l)
        if (s -= e[l], s <= 0)
          return l;
      return 0;
    }
    static getSampler(e) {
      if (e.do_sample)
        return new MultinomialSampler(e);
      if (e.num_beams > 1)
        return new BeamSearchSampler(e);
      if (e.num_return_sequences > 1)
        throw Error(`num_return_sequences has to be 1 when doing greedy search, but is ${e.num_return_sequences}.`);
      return new GreedySampler(e);
    }
  }
  class GreedySampler extends Sampler {
    sample(e, t = -1) {
      let s = this.getLogits(e, t);
      return [
        [
          max(s)[1],
          0
        ]
      ];
    }
  }
  class MultinomialSampler extends Sampler {
    sample(e, t = -1) {
      let s = e.dims.at(-1);
      this.generation_config.top_k > 0 && (s = Math.min(this.generation_config.top_k, s));
      const l = this.getLogits(e, t), f = getTopItems(l, s), d = softmax(f.map((w) => w[1]));
      return Array.from({
        length: this.generation_config.num_beams
      }, () => {
        const w = this.randomSelect(d);
        return [
          f[w][0],
          Math.log(d[w])
        ];
      });
    }
  }
  class BeamSearchSampler extends Sampler {
    sample(e, t = -1) {
      let s = e.dims.at(-1);
      this.generation_config.top_k > 0 && (s = Math.min(this.generation_config.top_k, s));
      const l = this.getLogits(e, t), f = getTopItems(l, s), d = softmax(f.map((w) => w[1]));
      return Array.from({
        length: this.generation_config.num_beams
      }, (w, g) => [
        f[g][0],
        Math.log(d[g])
      ]);
    }
  }
  const { InferenceSession, Tensor: ONNXTensor, env } = ONNX, MODEL_TYPES = {
    EncoderOnly: 0,
    EncoderDecoder: 1,
    Seq2Seq: 2,
    Vision2Seq: 3,
    DecoderOnly: 4,
    MaskGeneration: 5
  }, MODEL_TYPE_MAPPING = /* @__PURE__ */ new Map(), MODEL_NAME_TO_CLASS_MAPPING = /* @__PURE__ */ new Map(), MODEL_CLASS_TO_NAME_MAPPING = /* @__PURE__ */ new Map();
  async function constructSession(i, e, t) {
    let s = `onnx/${e}${t.quantized ? "_quantized" : ""}.onnx`, l = await getModelFile(i, s, true, t);
    try {
      return await InferenceSession.create(l, {
        executionProviders
      });
    } catch (f) {
      if (executionProviders.length === 1 && executionProviders[0] === "wasm")
        throw f;
      return console.warn(f), console.warn("Something went wrong during model construction (most likely a missing operation). Using `wasm` as a fallback. "), await InferenceSession.create(l, {
        executionProviders: [
          "wasm"
        ]
      });
    }
  }
  function validateInputs(i, e) {
    const t = /* @__PURE__ */ Object.create(null), s = [];
    for (const d of i.inputNames) {
      const w = e[d];
      if (!(w instanceof Tensor)) {
        s.push(d);
        continue;
      }
      t[d] = env.wasm.proxy ? w.clone() : w;
    }
    if (s.length > 0)
      throw new Error(`An error occurred during model execution: "Missing the following inputs: ${s.join(", ")}.`);
    const l = Object.keys(e).length, f = i.inputNames.length;
    if (l > f) {
      let d = Object.keys(e).filter((w) => !i.inputNames.includes(w));
      console.warn(`WARNING: Too many inputs were provided (${l} > ${f}). The following inputs will be ignored: "${d.join(", ")}".`);
    }
    return t;
  }
  async function sessionRun(i, e) {
    const t = validateInputs(i, e);
    try {
      let s = await i.run(t);
      return s = replaceTensors(s), s;
    } catch (s) {
      throw console.error(`An error occurred during model execution: "${s}".`), console.error("Inputs given to model:", t), s;
    }
  }
  function replaceTensors(i) {
    for (let e in i)
      i[e] instanceof ONNXTensor ? i[e] = new Tensor(i[e]) : typeof i[e] == "object" && replaceTensors(i[e]);
    return i;
  }
  function toI64Tensor(i) {
    if (i instanceof Tensor)
      return i;
    if (i.length === 0)
      throw Error("items must be non-empty");
    if (Array.isArray(i[0])) {
      if (i.some((e) => e.length !== i[0].length))
        throw Error("Unable to create tensor, you should probably activate truncation and/or padding with 'padding=True' and/or 'truncation=True' to have batched tensors with the same length.");
      return new Tensor("int64", BigInt64Array.from(i.flat().map((e) => BigInt(e))), [
        i.length,
        i[0].length
      ]);
    } else
      return new Tensor("int64", BigInt64Array.from(i.map((e) => BigInt(e))), [
        1,
        i.length
      ]);
  }
  function prepareAttentionMask(i, e) {
    let t = i.config.pad_token_id ?? null, s = i.config.eos_token_id ?? null;
    isIntegralNumber(s) && (s = [
      s
    ]);
    let l = e.indexOf(t) !== -1, f = s === null || !s.includes(t);
    if (l && f) {
      let d = BigInt64Array.from(e.data.map((w) => w != t));
      return new Tensor("int64", d, e.dims);
    } else
      return ones_like(e);
  }
  function preparePositionIds(i, e, t) {
    if (!i.inputNames.includes("position_ids"))
      return;
    const s = new BigInt64Array(e.attention_mask.data.length);
    for (let l = 0; l < e.attention_mask.dims[0]; ++l) {
      let f = l * e.attention_mask.dims[1], d = BigInt(0);
      for (let w = 0; w < e.attention_mask.dims[1]; ++w) {
        const g = f + w;
        e.attention_mask.data[g] === 0n ? s[g] = BigInt(1) : (s[g] = d, d += e.attention_mask.data[g]);
      }
    }
    e.position_ids = new Tensor("int64", s, e.attention_mask.dims), t && (e.position_ids = e.position_ids.slice(null, -1).unsqueeze_(-1));
  }
  function boolTensor(i) {
    return new Tensor("bool", [
      i
    ], [
      1
    ]);
  }
  async function seq2seqForward(i, e) {
    let { encoder_outputs: t, past_key_values: s } = e;
    t || (t = (await encoderForward(i, e)).last_hidden_state);
    let l = {
      input_ids: e.decoder_input_ids,
      encoder_hidden_states: t
    };
    const f = !!s;
    i.decoder_merged_session.inputNames.includes("use_cache_branch") && (l.use_cache_branch = boolTensor(f)), i.decoder_merged_session.inputNames.includes("encoder_attention_mask") && (l.encoder_attention_mask = e.attention_mask), preparePositionIds(i.decoder_merged_session, l, f), i.addPastKeyValues(l, s);
    const d = await sessionRun(i.decoder_merged_session, l);
    let w = d.logits;
    s = i.getPastKeyValues(d, s);
    const g = i.getAttentions(d);
    return new Seq2SeqLMOutput({
      logits: w,
      past_key_values: s,
      encoder_outputs: t,
      ...g
    });
  }
  function seq2seqStartBeams(i, e, t, s) {
    let l = [], f = 0;
    const d = i.requires_attention_mask ?? true;
    let w = t.decoder_input_ids ?? t.decoder_start_token_id ?? t.bos_token_id ?? t.eos_token_id;
    w instanceof Tensor ? w = w.tolist().flat() : Array.isArray(w) || (w = [
      w
    ]);
    for (let g of e) {
      g.dims = [
        1,
        ...g.dims
      ];
      let _ = {
        inputs: g,
        encoder_outputs: null,
        prev_model_outputs: null,
        output_token_ids: w,
        done: false,
        score: 0,
        id: f++
      };
      d && (_.attention_mask = prepareAttentionMask(i, g)), l.push(_);
    }
    return l;
  }
  async function seq2seqRunBeam(i, e) {
    const t = i.main_input_name;
    let s = e.output_token_ids;
    e.prev_model_outputs && (s = s.slice(-1));
    let l = {
      [t]: e.inputs,
      decoder_input_ids: toI64Tensor(s),
      encoder_outputs: e.encoder_outputs,
      past_key_values: e.prev_model_outputs?.past_key_values
    };
    e.attention_mask && (l.attention_mask = e.attention_mask);
    let f = await i.forward(l);
    return e.prev_model_outputs = f, e.encoder_outputs = f.encoder_outputs, f;
  }
  function seq2seqUpdatebeam(i, e) {
    i.output_token_ids = [
      ...i.output_token_ids,
      e
    ];
  }
  async function encoderForward(i, e) {
    const t = /* @__PURE__ */ Object.create(null);
    for (const s of i.session.inputNames)
      t[s] = e[s];
    return i.session.inputNames.includes("token_type_ids") && !t.token_type_ids && (t.token_type_ids = new Tensor("int64", new BigInt64Array(t.input_ids.data.length), t.input_ids.dims)), await sessionRun(i.session, t);
  }
  async function decoderForward(i, e) {
    let { input_ids: t, past_key_values: s, attention_mask: l } = e, f = {
      input_ids: t,
      attention_mask: l ?? prepareAttentionMask(i, t)
    };
    const d = !!s;
    i.session.inputNames.includes("use_cache_branch") && (f.use_cache_branch = boolTensor(d)), preparePositionIds(i.session, f, d), i.addPastKeyValues(f, s);
    let w = await sessionRun(i.session, f), g = w.logits;
    return s = i.getPastKeyValues(w, s), {
      logits: g,
      past_key_values: s
    };
  }
  function decoderStartBeams(i, e, t, s, l) {
    let f = [], d = 0;
    for (let w of e) {
      let g = w.tolist().map(Number);
      w.dims = [
        1,
        ...w.dims
      ];
      let _;
      l ? (_ = l[d], _.dims = [
        1,
        ..._.dims
      ]) : _ = prepareAttentionMask(i, w);
      let h = {
        input: w,
        model_input_ids: w,
        attention_mask: _,
        prev_model_outputs: null,
        output_token_ids: g,
        num_output_tokens: s,
        done: false,
        score: 0,
        id: d++
      };
      f.push(h);
    }
    return f;
  }
  async function decoderRunBeam(i, e) {
    let t = new BigInt64Array(e.output_token_ids.length).fill(1n), s = {
      input_ids: e.model_input_ids,
      attention_mask: new Tensor("int64", t, [
        1,
        t.length
      ]),
      past_key_values: e.prev_model_outputs?.past_key_values
    }, l = await i.forward(s);
    return e.prev_model_outputs = l, l;
  }
  function decoderUpdatebeam(i, e) {
    i.output_token_ids = [
      ...i.output_token_ids,
      e
    ], i.model_input_ids = new Tensor("int64", [
      BigInt(e)
    ], [
      1,
      1
    ]);
  }
  class PreTrainedModel extends Callable {
    constructor(e, t) {
      super();
      __publicField(this, "main_input_name", "input_ids");
      this.config = e, this.session = t;
      const s = MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor), l = MODEL_TYPE_MAPPING.get(s);
      this.can_generate = false, this._runBeam = null, this._getStartBeams = null, this._updateBeam = null, this._forward = null, l === MODEL_TYPES.DecoderOnly ? (this.can_generate = true, this._runBeam = decoderRunBeam, this._getStartBeams = decoderStartBeams, this._updateBeam = decoderUpdatebeam, this._forward = decoderForward) : l === MODEL_TYPES.Seq2Seq || l === MODEL_TYPES.Vision2Seq ? (this.can_generate = true, this._runBeam = seq2seqRunBeam, this._getStartBeams = seq2seqStartBeams, this._updateBeam = seq2seqUpdatebeam, this._forward = seq2seqForward) : l === MODEL_TYPES.EncoderDecoder ? this._forward = encoderForward : this._forward = encoderForward;
    }
    async dispose() {
      const e = [];
      for (let t of Object.keys(this)) {
        const s = this[t];
        s instanceof InferenceSession && e.push(s.handler.dispose());
      }
      return await Promise.all(e);
    }
    static async from_pretrained(e, { quantized: t = true, progress_callback: s = null, config: l = null, cache_dir: f = null, local_files_only: d = false, revision: w = "main", model_file_name: g = null } = {}) {
      let _ = {
        quantized: t,
        progress_callback: s,
        config: l,
        cache_dir: f,
        local_files_only: d,
        revision: w,
        model_file_name: g
      };
      const h = MODEL_CLASS_TO_NAME_MAPPING.get(this), r = MODEL_TYPE_MAPPING.get(h);
      let n;
      return r === MODEL_TYPES.DecoderOnly ? n = await Promise.all([
        AutoConfig.from_pretrained(e, _),
        constructSession(e, _.model_file_name ?? "decoder_model_merged", _),
        getModelJSON(e, "generation_config.json", false, _)
      ]) : r === MODEL_TYPES.Seq2Seq || r === MODEL_TYPES.Vision2Seq ? n = await Promise.all([
        AutoConfig.from_pretrained(e, _),
        constructSession(e, "encoder_model", _),
        constructSession(e, "decoder_model_merged", _),
        getModelJSON(e, "generation_config.json", false, _)
      ]) : r === MODEL_TYPES.MaskGeneration ? n = await Promise.all([
        AutoConfig.from_pretrained(e, _),
        constructSession(e, "vision_encoder", _),
        constructSession(e, "prompt_encoder_mask_decoder", _)
      ]) : r === MODEL_TYPES.EncoderDecoder ? n = await Promise.all([
        AutoConfig.from_pretrained(e, _),
        constructSession(e, "encoder_model", _),
        constructSession(e, "decoder_model_merged", _)
      ]) : (r !== MODEL_TYPES.EncoderOnly && console.warn(`Model type for '${h ?? l?.model_type}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`), n = await Promise.all([
        AutoConfig.from_pretrained(e, _),
        constructSession(e, _.model_file_name ?? "model", _)
      ])), new this(...n);
    }
    async _call(e) {
      return await this.forward(e);
    }
    async forward(e) {
      return await this._forward(this, e);
    }
    _get_logits_processor(e, t, s = null) {
      const l = new LogitsProcessorList();
      if (e.repetition_penalty !== null && e.repetition_penalty !== 1 && l.push(new RepetitionPenaltyLogitsProcessor(e.repetition_penalty)), e.no_repeat_ngram_size !== null && e.no_repeat_ngram_size > 0 && l.push(new NoRepeatNGramLogitsProcessor(e.no_repeat_ngram_size)), e.bad_words_ids !== null && l.push(new NoBadWordsLogitsProcessor(e.bad_words_ids, e.eos_token_id)), e.min_length !== null && e.eos_token_id !== null && e.min_length > 0 && l.push(new MinLengthLogitsProcessor(e.min_length, e.eos_token_id)), e.min_new_tokens !== null && e.eos_token_id !== null && e.min_new_tokens > 0 && l.push(new MinNewTokensLengthLogitsProcessor(t, e.min_new_tokens, e.eos_token_id)), e.forced_bos_token_id !== null && l.push(new ForcedBOSTokenLogitsProcessor(e.forced_bos_token_id)), e.forced_eos_token_id !== null && l.push(new ForcedEOSTokenLogitsProcessor(e.max_length, e.forced_eos_token_id)), e.begin_suppress_tokens !== null) {
        let f = t > 1 || e.forced_bos_token_id === null ? t : t + 1;
        e.forced_decoder_ids !== null && (f += e.forced_decoder_ids[e.forced_decoder_ids.length - 1][0]), l.push(new SuppressTokensAtBeginLogitsProcessor(e.begin_suppress_tokens, f));
      }
      return e.forced_decoder_ids !== null && l.push(new ForceTokensLogitsProcessor(e.forced_decoder_ids)), s !== null && l.extend(s), l;
    }
    _get_generation_config(e) {
      let t = new GenerationConfig(this.config);
      return "generation_config" in this && Object.assign(t, this.generation_config), e !== null && Object.assign(t, e), t;
    }
    async generate(e, t = null, s = null, { inputs_attention_mask: l = null } = {}) {
      if (!this.can_generate) {
        let P = `The current model class (${MODEL_CLASS_TO_NAME_MAPPING.get(this.constructor)}) is not compatible with \`.generate()\`, as it doesn't have a language model head.`;
        const E = this.config.model_type, k = MODEL_WITH_LM_HEAD_MAPPING_NAMES.get(E) ?? MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES.get(E) ?? MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES.get(E) ?? MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES.get(E);
        throw k && (P += ` Please use the following class instead: '${k[0]}'`), Error(P);
      }
      if (!(e instanceof Tensor) && !isTypedArray(e) && !Array.isArray(e))
        throw Error(`\`inputs\` must be a Tensor, TypedArray, or Array, but is "${e.constructor.name}".`);
      let f;
      if (this.config.is_encoder_decoder)
        f = 0;
      else if (f = e instanceof Tensor ? e.dims.at(-1) : e.length, f === 0)
        throw Error("Must supply a non-empty array of input token ids.");
      t = this._get_generation_config(t), s = s ?? new LogitsProcessorList(), s = this._get_logits_processor(t, f, s);
      let d = t.eos_token_id;
      d !== null && !Array.isArray(d) && (d = [
        d
      ]);
      let w = 1;
      const g = w + (t.max_new_tokens ?? 1 / 0), _ = Number.isInteger(t.max_length) && (t.max_new_tokens ?? null) === null;
      let h = Sampler.getSampler(t), r = this.getStartBeams(e, t, w, l);
      for (; r.some((M) => !M.done) && w < g; ) {
        let M = [];
        for (let P of r) {
          if (P.done) {
            M.push(P);
            continue;
          }
          if (_ && P.output_token_ids.length >= t.max_length) {
            P.done = true, M.push(P);
            continue;
          }
          let E = await this.runBeam(P);
          t.output_attentions && this.addAttentionsToBeam(P, E), t.output_scores;
          let k = E.logits.slice(null, -1, null);
          s(P.output_token_ids, k);
          let $ = h(k);
          for (let [A, C] of $) {
            let F = {
              ...P
            };
            this.updateBeam(F, A), F.score += C, d && d.includes(A) && (F.done = true), M.push(F);
          }
        }
        ++w, M = this.groupBeams(M).map((P) => P.sort((E, k) => k.score - E.score).slice(0, t.num_beams)), r = M.flat(), t.callback_function && t.callback_function(r);
      }
      const n = this.groupBeams(r), u = (M) => n.map((P) => t.num_return_sequences > 1 ? P.slice(0, t.num_return_sequences).map((E) => E[M]) : [
        P[0][M]
      ]).flat(), p = u("output_token_ids");
      if (t.return_dict_in_generate) {
        const M = u("decoder_attentions"), P = u("cross_attentions");
        return {
          sequences: p,
          decoder_attentions: M,
          cross_attentions: P
        };
      } else
        return p;
    }
    addAttentionsToBeam(e, t) {
      if (this.config.is_encoder_decoder) {
        if (!t.cross_attentions || t.cross_attentions.length === 0)
          throw Error("`output_attentions` is true, but the model did not produce cross-attentions. This is most likely because the model was not exported with `output_attentions=True`.");
        e.cross_attentions || (e.cross_attentions = []), e.cross_attentions.push(t.cross_attentions);
      }
      if (!t.decoder_attentions || t.decoder_attentions.length === 0)
        throw Error("`output_attentions` is true, but the model did not produce decoder-attentions. This is most likely because the model was not exported with `output_attentions=True`.");
      e.decoder_attentions || (e.decoder_attentions = []), e.decoder_attentions.push(t.decoder_attentions);
    }
    groupBeams(e) {
      const t = /* @__PURE__ */ Object.create(null);
      for (const s of e)
        t[s.id] === void 0 ? t[s.id] = [
          s
        ] : t[s.id].push(s);
      return Object.values(t);
    }
    getPastKeyValues(e, t) {
      const s = /* @__PURE__ */ Object.create(null);
      for (const l in e)
        if (l.startsWith("present")) {
          let f = l.replace("present", "past_key_values");
          t && l.includes("encoder") ? s[f] = t[f] : s[f] = e[l];
        }
      return s;
    }
    getAttentions(e) {
      const t = /* @__PURE__ */ Object.create(null);
      for (const s of [
        "cross_attentions",
        "decoder_attentions"
      ]) {
        const l = [];
        for (const f in e)
          if (f.startsWith(s)) {
            const d = f.split(".").pop();
            l[d] = e[f];
          }
        t[s] = l;
      }
      return t;
    }
    addPastKeyValues(e, t) {
      if (t)
        Object.assign(e, t);
      else if (this.config.is_encoder_decoder && (this.add_encoder_pkv ?? true)) {
        let l = [
          1,
          this.num_encoder_heads,
          0,
          this.encoder_dim_kv
        ], f = [
          1,
          this.num_decoder_heads,
          0,
          this.decoder_dim_kv
        ];
        for (let d = 0; d < this.num_decoder_layers; ++d)
          e[`past_key_values.${d}.encoder.key`] = new Tensor("float32", [], l), e[`past_key_values.${d}.encoder.value`] = new Tensor("float32", [], l), e[`past_key_values.${d}.decoder.key`] = new Tensor("float32", [], f), e[`past_key_values.${d}.decoder.value`] = new Tensor("float32", [], f);
      } else if (this.config.model_type === "falcon") {
        let l = [
          1 * this.num_heads,
          0,
          this.dim_kv
        ];
        for (let f = 0; f < this.num_layers; ++f)
          e[`past_key_values.${f}.key`] = new Tensor("float32", [], l), e[`past_key_values.${f}.value`] = new Tensor("float32", [], l);
      } else if (this.config.multi_query) {
        let l = [
          1 * this.num_heads,
          0,
          2 * this.dim_kv
        ];
        for (let f = 0; f < this.num_layers; ++f)
          e[`past_key_values.${f}.key_value`] = new Tensor("float32", [], l);
      } else if (this.config.model_type === "bloom") {
        let l = [
          1 * this.num_heads,
          this.dim_kv,
          0
        ], f = [
          1 * this.num_heads,
          0,
          this.dim_kv
        ];
        for (let d = 0; d < this.num_layers; ++d)
          e[`past_key_values.${d}.key`] = new Tensor("float32", [], l), e[`past_key_values.${d}.value`] = new Tensor("float32", [], f);
      } else {
        let l = [
          1,
          this.num_heads,
          0,
          this.dim_kv
        ];
        for (let f = 0; f < this.num_layers; ++f)
          e[`past_key_values.${f}.key`] = new Tensor("float32", [], l), e[`past_key_values.${f}.value`] = new Tensor("float32", [], l);
      }
    }
    getStartBeams(e, t, s, l) {
      return this._getStartBeams(this, e, t, s, l);
    }
    async runBeam(e) {
      return await this._runBeam(this, e);
    }
    updateBeam(e, t) {
      return this._updateBeam(e, t);
    }
  }
  class ModelOutput {
  }
  class BertPreTrainedModel extends PreTrainedModel {
  }
  class BertModel extends BertPreTrainedModel {
  }
  class BertForMaskedLM extends BertPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class BertForSequenceClassification extends BertPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class BertForTokenClassification extends BertPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class BertForQuestionAnswering extends BertPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class NomicBertPreTrainedModel extends PreTrainedModel {
  }
  class NomicBertModel extends NomicBertPreTrainedModel {
  }
  class RoFormerPreTrainedModel extends PreTrainedModel {
  }
  class RoFormerModel extends RoFormerPreTrainedModel {
  }
  class RoFormerForMaskedLM extends RoFormerPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class RoFormerForSequenceClassification extends RoFormerPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class RoFormerForTokenClassification extends RoFormerPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class RoFormerForQuestionAnswering extends RoFormerPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class ConvBertPreTrainedModel extends PreTrainedModel {
  }
  class ConvBertModel extends ConvBertPreTrainedModel {
  }
  class ConvBertForMaskedLM extends ConvBertPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class ConvBertForSequenceClassification extends ConvBertPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class ConvBertForTokenClassification extends ConvBertPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class ConvBertForQuestionAnswering extends ConvBertPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class ElectraPreTrainedModel extends PreTrainedModel {
  }
  class ElectraModel extends ElectraPreTrainedModel {
  }
  class ElectraForMaskedLM extends ElectraPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class ElectraForSequenceClassification extends ElectraPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class ElectraForTokenClassification extends ElectraPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class ElectraForQuestionAnswering extends ElectraPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class CamembertPreTrainedModel extends PreTrainedModel {
  }
  class CamembertModel extends CamembertPreTrainedModel {
  }
  class CamembertForMaskedLM extends CamembertPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class CamembertForSequenceClassification extends CamembertPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class CamembertForTokenClassification extends CamembertPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class CamembertForQuestionAnswering extends CamembertPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class DebertaPreTrainedModel extends PreTrainedModel {
  }
  class DebertaModel extends DebertaPreTrainedModel {
  }
  class DebertaForMaskedLM extends DebertaPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class DebertaForSequenceClassification extends DebertaPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class DebertaForTokenClassification extends DebertaPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class DebertaForQuestionAnswering extends DebertaPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class DebertaV2PreTrainedModel extends PreTrainedModel {
  }
  class DebertaV2Model extends DebertaV2PreTrainedModel {
  }
  class DebertaV2ForMaskedLM extends DebertaV2PreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class DebertaV2ForSequenceClassification extends DebertaV2PreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class DebertaV2ForTokenClassification extends DebertaV2PreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class DebertaV2ForQuestionAnswering extends DebertaV2PreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class DistilBertPreTrainedModel extends PreTrainedModel {
  }
  class DistilBertModel extends DistilBertPreTrainedModel {
  }
  class DistilBertForSequenceClassification extends DistilBertPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class DistilBertForTokenClassification extends DistilBertPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class DistilBertForQuestionAnswering extends DistilBertPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class DistilBertForMaskedLM extends DistilBertPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class EsmPreTrainedModel extends PreTrainedModel {
  }
  class EsmModel extends EsmPreTrainedModel {
  }
  class EsmForMaskedLM extends EsmPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class EsmForSequenceClassification extends EsmPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class EsmForTokenClassification extends EsmPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class MobileBertPreTrainedModel extends PreTrainedModel {
  }
  class MobileBertModel extends MobileBertPreTrainedModel {
  }
  class MobileBertForMaskedLM extends MobileBertPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class MobileBertForSequenceClassification extends MobileBertPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class MobileBertForQuestionAnswering extends MobileBertPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class MPNetPreTrainedModel extends PreTrainedModel {
  }
  class MPNetModel extends MPNetPreTrainedModel {
  }
  class MPNetForMaskedLM extends MPNetPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class MPNetForSequenceClassification extends MPNetPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class MPNetForTokenClassification extends MPNetPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class MPNetForQuestionAnswering extends MPNetPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class SqueezeBertPreTrainedModel extends PreTrainedModel {
  }
  class SqueezeBertModel extends SqueezeBertPreTrainedModel {
  }
  class SqueezeBertForMaskedLM extends SqueezeBertPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class SqueezeBertForSequenceClassification extends SqueezeBertPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class SqueezeBertForQuestionAnswering extends SqueezeBertPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class AlbertPreTrainedModel extends PreTrainedModel {
  }
  class AlbertModel extends AlbertPreTrainedModel {
  }
  class AlbertForSequenceClassification extends AlbertPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class AlbertForQuestionAnswering extends AlbertPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class AlbertForMaskedLM extends AlbertPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class T5PreTrainedModel extends PreTrainedModel {
  }
  class T5Model extends T5PreTrainedModel {
  }
  class T5ForConditionalGeneration extends T5PreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.num_decoder_layers, this.num_decoder_heads = this.config.num_heads, this.decoder_dim_kv = this.config.d_kv, this.num_encoder_layers = this.config.num_layers, this.num_encoder_heads = this.config.num_heads, this.encoder_dim_kv = this.config.d_kv;
    }
  }
  class LongT5PreTrainedModel extends PreTrainedModel {
  }
  class LongT5Model extends LongT5PreTrainedModel {
  }
  class LongT5ForConditionalGeneration extends LongT5PreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.num_decoder_layers, this.num_decoder_heads = this.config.num_heads, this.decoder_dim_kv = this.config.d_kv, this.num_encoder_layers = this.config.num_layers, this.num_encoder_heads = this.config.num_heads, this.encoder_dim_kv = this.config.d_kv;
    }
  }
  class MT5PreTrainedModel extends PreTrainedModel {
  }
  class MT5Model extends MT5PreTrainedModel {
  }
  class MT5ForConditionalGeneration extends MT5PreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.num_decoder_layers, this.num_decoder_heads = this.config.num_heads, this.decoder_dim_kv = this.config.d_kv, this.num_encoder_layers = this.config.num_layers, this.num_encoder_heads = this.config.num_heads, this.encoder_dim_kv = this.config.d_kv;
    }
  }
  class BartPretrainedModel extends PreTrainedModel {
  }
  class BartModel extends BartPretrainedModel {
  }
  class BartForConditionalGeneration extends BartPretrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
    }
  }
  class BartForSequenceClassification extends BartPretrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class MBartPreTrainedModel extends PreTrainedModel {
  }
  class MBartModel extends MBartPreTrainedModel {
  }
  class MBartForConditionalGeneration extends MBartPreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
    }
  }
  class MBartForSequenceClassification extends MBartPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class MBartForCausalLM extends MBartPreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
    }
  }
  class BlenderbotPreTrainedModel extends PreTrainedModel {
  }
  class BlenderbotModel extends BlenderbotPreTrainedModel {
  }
  class BlenderbotForConditionalGeneration extends BlenderbotPreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
    }
  }
  class BlenderbotSmallPreTrainedModel extends PreTrainedModel {
  }
  class BlenderbotSmallModel extends BlenderbotSmallPreTrainedModel {
  }
  class BlenderbotSmallForConditionalGeneration extends BlenderbotSmallPreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
    }
  }
  class RobertaPreTrainedModel extends PreTrainedModel {
  }
  class RobertaModel extends RobertaPreTrainedModel {
  }
  class RobertaForMaskedLM extends RobertaPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class RobertaForSequenceClassification extends RobertaPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class RobertaForTokenClassification extends RobertaPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class RobertaForQuestionAnswering extends RobertaPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class XLMPreTrainedModel extends PreTrainedModel {
  }
  class XLMModel extends XLMPreTrainedModel {
  }
  class XLMWithLMHeadModel extends XLMPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class XLMForSequenceClassification extends XLMPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class XLMForTokenClassification extends XLMPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class XLMForQuestionAnswering extends XLMPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class XLMRobertaPreTrainedModel extends PreTrainedModel {
  }
  class XLMRobertaModel extends XLMRobertaPreTrainedModel {
  }
  class XLMRobertaForMaskedLM extends XLMRobertaPreTrainedModel {
    async _call(e) {
      return new MaskedLMOutput(await super._call(e));
    }
  }
  class XLMRobertaForSequenceClassification extends XLMRobertaPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class XLMRobertaForTokenClassification extends XLMRobertaPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class XLMRobertaForQuestionAnswering extends XLMRobertaPreTrainedModel {
    async _call(e) {
      return new QuestionAnsweringModelOutput(await super._call(e));
    }
  }
  class ASTPreTrainedModel extends PreTrainedModel {
  }
  class ASTModel extends ASTPreTrainedModel {
  }
  class ASTForAudioClassification extends ASTPreTrainedModel {
  }
  class WhisperPreTrainedModel extends PreTrainedModel {
  }
  class WhisperModel extends WhisperPreTrainedModel {
  }
  class WhisperForConditionalGeneration extends WhisperPreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t);
      __publicField(this, "requires_attention_mask", false);
      __publicField(this, "main_input_name", "input_features");
      this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
    }
    async generate(e, t = null, s = null) {
      if (t = this._get_generation_config(t), t.return_timestamps ?? (t.return_timestamps = false), t.return_timestamps && (s = [
        new WhisperTimeStampLogitsProcessor(t)
      ]), t.return_token_timestamps && (t.output_attentions = true, t.return_dict_in_generate = true, t.task === "translate" && console.warn("Token-level timestamps may not be reliable for task 'translate'."), !t.alignment_heads))
        throw new Error("Model generation config has no `alignment_heads`, token-level timestamps not available. See https://gist.github.com/hollance/42e32852f24243b748ae6bc1f985b13a on how to add this property to the generation config.");
      const l = await super.generate(e, t, s);
      return t.return_token_timestamps && t.alignment_heads && (l.token_timestamps = this._extract_token_timestamps(l, t.alignment_heads, t.num_frames)), l;
    }
    _extract_token_timestamps(e, t, s = null, l = 0.02) {
      if (!e.cross_attentions)
        throw new Error("Model outputs must contain cross attentions to extract timestamps. This is most likely because the model was not exported with `output_attentions=True`.");
      let f = this.config.median_filter_width;
      f === void 0 && (console.warn("Model config has no `median_filter_width`, using default value of 7."), f = 7);
      const d = e.cross_attentions.map((_) => {
        let h = Array.from({
          length: this.config.decoder_layers
        }, (P, E) => cat(_.map((k) => k[E]), 2)), r = stack(t.map(([P, E]) => s ? h[P].slice(null, E, null, [
          0,
          s
        ]) : h[P].slice(null, E)));
        r = r.transpose(1, 0, 2, 3);
        let [n, u] = std_mean(r, -2, 0, true), p = r.clone();
        for (let P = 0; P < p.dims[0]; ++P) {
          let E = p[P];
          for (let k = 0; k < E.dims[0]; ++k) {
            let $ = E[k];
            const A = n[P][k][0], C = u[P][k][0];
            for (let F = 0; F < $.dims[0]; ++F) {
              let D = $[F];
              for (let N = 0; N < D.data.length; ++N)
                D.data[N] = (D.data[N] - C.data[N]) / A.data[N];
              D.data.set(medianFilter(D.data, f));
            }
          }
        }
        return mean(p, 1);
      }), w = [
        e.sequences.length,
        e.sequences[0].length
      ], g = new Tensor("float32", new Float32Array(w[0] * w[1]), w);
      for (let _ = 0; _ < w[0]; ++_) {
        const h = d[_].neg().squeeze_(0);
        let [r, n] = dynamicTimeWarping(h), u = Array.from({
          length: r.length - 1
        }, (P, E) => r[E + 1] - r[E]), p = mergeArrays([
          1
        ], u).map((P) => !!P), M = [];
        for (let P = 0; P < p.length; ++P)
          p[P] && M.push(n[P] * l);
        g[_].data.set(M, 1);
      }
      return g;
    }
  }
  class VisionEncoderDecoderModel extends PreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t);
      __publicField(this, "main_input_name", "pixel_values");
      this.decoder_merged_session = s, this.generation_config = l;
      const f = this.config.encoder, d = this.config.decoder, w = f.model_type;
      (MODEL_MAPPING_NAMES_ENCODER_ONLY.get(w) ?? MODEL_MAPPING_NAMES_ENCODER_DECODER.get(w)) || console.warn(`Model type for encoder '${w}' not found, assuming encoder-only architecture. Please report this at https://github.com/xenova/transformers.js/issues/new/choose.`);
      const _ = MODEL_WITH_LM_HEAD_MAPPING_NAMES.get(d.model_type);
      if (!_)
        throw new Error(`Unable to construct \`VisionEncoderDecoder\` due to unsupported decoder: "${this.config.decoder.model_type}"`);
      const h = _[1], r = new h(d, s, l);
      this.add_encoder_pkv = "num_decoder_layers" in r, this.add_encoder_pkv ? (this.num_decoder_layers = r.num_decoder_layers, this.num_decoder_heads = r.num_decoder_heads, this.decoder_dim_kv = r.decoder_dim_kv, this.num_encoder_layers = r.num_encoder_layers, this.num_encoder_heads = r.num_encoder_heads, this.encoder_dim_kv = r.encoder_dim_kv) : (this.num_layers = r.num_layers, this.num_heads = r.num_heads, this.dim_kv = r.dim_kv);
    }
  }
  class CLIPPreTrainedModel extends PreTrainedModel {
  }
  class CLIPModel extends CLIPPreTrainedModel {
  }
  class CLIPTextModelWithProjection extends CLIPPreTrainedModel {
    static async from_pretrained(e, t = {}) {
      return t.model_file_name ?? (t.model_file_name = "text_model"), super.from_pretrained(e, t);
    }
  }
  class CLIPVisionModelWithProjection extends CLIPPreTrainedModel {
    static async from_pretrained(e, t = {}) {
      return t.model_file_name ?? (t.model_file_name = "vision_model"), super.from_pretrained(e, t);
    }
  }
  class SiglipPreTrainedModel extends PreTrainedModel {
  }
  class SiglipModel extends SiglipPreTrainedModel {
  }
  class SiglipTextModel extends SiglipPreTrainedModel {
    static async from_pretrained(e, t = {}) {
      return t.model_file_name ?? (t.model_file_name = "text_model"), super.from_pretrained(e, t);
    }
  }
  class SiglipVisionModel extends CLIPPreTrainedModel {
    static async from_pretrained(e, t = {}) {
      return t.model_file_name ?? (t.model_file_name = "vision_model"), super.from_pretrained(e, t);
    }
  }
  class ChineseCLIPPreTrainedModel extends PreTrainedModel {
  }
  class ChineseCLIPModel extends ChineseCLIPPreTrainedModel {
  }
  class CLIPSegPreTrainedModel extends PreTrainedModel {
  }
  class CLIPSegModel extends CLIPSegPreTrainedModel {
  }
  class CLIPSegForImageSegmentation extends CLIPSegPreTrainedModel {
  }
  class GPT2PreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.n_head, this.num_layers = this.config.n_layer, this.dim_kv = this.config.n_embd / this.num_heads;
    }
  }
  class GPT2Model extends GPT2PreTrainedModel {
  }
  class GPT2LMHeadModel extends GPT2PreTrainedModel {
  }
  class GPTNeoPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_heads, this.num_layers = this.config.num_layers, this.dim_kv = this.config.hidden_size / this.num_heads;
    }
  }
  class GPTNeoModel extends GPTNeoPreTrainedModel {
  }
  class GPTNeoForCausalLM extends GPTNeoPreTrainedModel {
  }
  class GPTNeoXPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_attention_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.num_heads;
    }
  }
  class GPTNeoXModel extends GPTNeoXPreTrainedModel {
  }
  class GPTNeoXForCausalLM extends GPTNeoXPreTrainedModel {
  }
  class GPTJPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.n_head, this.num_layers = this.config.n_layer, this.dim_kv = this.config.n_embd / this.num_heads;
    }
  }
  class GPTJModel extends GPTJPreTrainedModel {
  }
  class GPTJForCausalLM extends GPTJPreTrainedModel {
  }
  class GPTBigCodePreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.n_head, this.num_layers = this.config.n_layer, this.dim_kv = this.config.n_embd / this.num_heads;
    }
  }
  class GPTBigCodeModel extends GPTBigCodePreTrainedModel {
  }
  class GPTBigCodeForCausalLM extends GPTBigCodePreTrainedModel {
  }
  class CodeGenPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.n_head, this.num_layers = this.config.n_layer, this.dim_kv = this.config.n_embd / this.num_heads;
    }
  }
  class CodeGenModel extends CodeGenPreTrainedModel {
  }
  class CodeGenForCausalLM extends CodeGenPreTrainedModel {
  }
  class LlamaPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_key_value_heads ?? this.config.num_attention_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
    }
  }
  class LlamaModel extends LlamaPreTrainedModel {
  }
  class LlamaForCausalLM extends LlamaPreTrainedModel {
  }
  class Qwen2PreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_key_value_heads ?? this.config.num_attention_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
    }
  }
  class Qwen2Model extends Qwen2PreTrainedModel {
  }
  class Qwen2ForCausalLM extends Qwen2PreTrainedModel {
  }
  class PhiPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_attention_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.num_heads;
    }
  }
  class PhiModel extends PhiPreTrainedModel {
  }
  class PhiForCausalLM extends PhiPreTrainedModel {
  }
  class BloomPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.n_head, this.num_layers = this.config.n_layer, this.dim_kv = this.config.hidden_size / this.num_heads;
    }
  }
  class BloomModel extends BloomPreTrainedModel {
  }
  class BloomForCausalLM extends BloomPreTrainedModel {
  }
  class MptPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.n_heads, this.num_layers = this.config.n_layers, this.dim_kv = this.config.d_model / this.num_heads;
    }
  }
  class MptModel extends MptPreTrainedModel {
  }
  class MptForCausalLM extends MptPreTrainedModel {
  }
  class OPTPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_attention_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.num_heads;
    }
  }
  class OPTModel extends OPTPreTrainedModel {
  }
  class OPTForCausalLM extends OPTPreTrainedModel {
  }
  class ViTPreTrainedModel extends PreTrainedModel {
  }
  class ViTModel extends ViTPreTrainedModel {
  }
  class ViTForImageClassification extends ViTPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class FastViTPreTrainedModel extends PreTrainedModel {
  }
  class FastViTModel extends FastViTPreTrainedModel {
  }
  class FastViTForImageClassification extends FastViTPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class VitMattePreTrainedModel extends PreTrainedModel {
  }
  class VitMatteForImageMatting extends VitMattePreTrainedModel {
    async _call(e) {
      return new ImageMattingOutput(await super._call(e));
    }
  }
  class MobileViTPreTrainedModel extends PreTrainedModel {
  }
  class MobileViTModel extends MobileViTPreTrainedModel {
  }
  class MobileViTForImageClassification extends MobileViTPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class MobileViTV2PreTrainedModel extends PreTrainedModel {
  }
  class MobileViTV2Model extends MobileViTV2PreTrainedModel {
  }
  class MobileViTV2ForImageClassification extends MobileViTV2PreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class OwlViTPreTrainedModel extends PreTrainedModel {
  }
  class OwlViTModel extends OwlViTPreTrainedModel {
  }
  class OwlViTForObjectDetection extends OwlViTPreTrainedModel {
  }
  class Owlv2PreTrainedModel extends PreTrainedModel {
  }
  class Owlv2Model extends Owlv2PreTrainedModel {
  }
  class Owlv2ForObjectDetection extends Owlv2PreTrainedModel {
  }
  class BeitPreTrainedModel extends PreTrainedModel {
  }
  class BeitModel extends BeitPreTrainedModel {
  }
  class BeitForImageClassification extends BeitPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class DetrPreTrainedModel extends PreTrainedModel {
  }
  class DetrModel extends DetrPreTrainedModel {
  }
  class DetrForObjectDetection extends DetrPreTrainedModel {
    async _call(e) {
      return new DetrObjectDetectionOutput(await super._call(e));
    }
  }
  class DetrForSegmentation extends DetrPreTrainedModel {
    async _call(e) {
      return new DetrSegmentationOutput(await super._call(e));
    }
  }
  class DetrObjectDetectionOutput extends ModelOutput {
    constructor({ logits: e, pred_boxes: t }) {
      super(), this.logits = e, this.pred_boxes = t;
    }
  }
  class DetrSegmentationOutput extends ModelOutput {
    constructor({ logits: e, pred_boxes: t, pred_masks: s }) {
      super(), this.logits = e, this.pred_boxes = t, this.pred_masks = s;
    }
  }
  class TableTransformerPreTrainedModel extends PreTrainedModel {
  }
  class TableTransformerModel extends TableTransformerPreTrainedModel {
  }
  class TableTransformerForObjectDetection extends TableTransformerPreTrainedModel {
    async _call(e) {
      return new TableTransformerObjectDetectionOutput(await super._call(e));
    }
  }
  class TableTransformerObjectDetectionOutput extends DetrObjectDetectionOutput {
  }
  class DeiTPreTrainedModel extends PreTrainedModel {
  }
  class DeiTModel extends DeiTPreTrainedModel {
  }
  class DeiTForImageClassification extends DeiTPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class ResNetPreTrainedModel extends PreTrainedModel {
  }
  class ResNetModel extends ResNetPreTrainedModel {
  }
  class ResNetForImageClassification extends ResNetPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class SwinPreTrainedModel extends PreTrainedModel {
  }
  class SwinModel extends SwinPreTrainedModel {
  }
  class SwinForImageClassification extends SwinPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class Swin2SRPreTrainedModel extends PreTrainedModel {
  }
  class Swin2SRModel extends Swin2SRPreTrainedModel {
  }
  class Swin2SRForImageSuperResolution extends Swin2SRPreTrainedModel {
  }
  class DPTPreTrainedModel extends PreTrainedModel {
  }
  class DPTModel extends DPTPreTrainedModel {
  }
  class DPTForDepthEstimation extends DPTPreTrainedModel {
  }
  class DepthAnythingPreTrainedModel extends PreTrainedModel {
  }
  class DepthAnythingForDepthEstimation extends DepthAnythingPreTrainedModel {
  }
  class GLPNPreTrainedModel extends PreTrainedModel {
  }
  class GLPNModel extends GLPNPreTrainedModel {
  }
  class GLPNForDepthEstimation extends GLPNPreTrainedModel {
  }
  class DonutSwinPreTrainedModel extends PreTrainedModel {
  }
  class DonutSwinModel extends DonutSwinPreTrainedModel {
  }
  class ConvNextPreTrainedModel extends PreTrainedModel {
  }
  class ConvNextModel extends ConvNextPreTrainedModel {
  }
  class ConvNextForImageClassification extends ConvNextPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class ConvNextV2PreTrainedModel extends PreTrainedModel {
  }
  class ConvNextV2Model extends ConvNextV2PreTrainedModel {
  }
  class ConvNextV2ForImageClassification extends ConvNextV2PreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class Dinov2PreTrainedModel extends PreTrainedModel {
  }
  class Dinov2Model extends Dinov2PreTrainedModel {
  }
  class Dinov2ForImageClassification extends Dinov2PreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class YolosPreTrainedModel extends PreTrainedModel {
  }
  class YolosModel extends YolosPreTrainedModel {
  }
  class YolosForObjectDetection extends YolosPreTrainedModel {
    async _call(e) {
      return new YolosObjectDetectionOutput(await super._call(e));
    }
  }
  class YolosObjectDetectionOutput extends ModelOutput {
    constructor({ logits: e, pred_boxes: t }) {
      super(), this.logits = e, this.pred_boxes = t;
    }
  }
  class SamPreTrainedModel extends PreTrainedModel {
  }
  class SamModel extends SamPreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.prompt_encoder_mask_decoder = s;
    }
    async get_image_embeddings({ pixel_values: e }) {
      return await encoderForward(this, {
        pixel_values: e
      });
    }
    async forward(e) {
      if ((!e.image_embeddings || !e.image_positional_embeddings) && (e = {
        ...e,
        ...await this.get_image_embeddings(e)
      }), !e.input_labels) {
        const t = e.input_points.dims.slice(0, -1), s = t.reduce((l, f) => l * f, 1);
        e.input_labels = new Tensor("int64", new BigInt64Array(s).fill(1n), t);
      }
      return await sessionRun(this.prompt_encoder_mask_decoder, {
        input_points: e.input_points,
        input_labels: e.input_labels,
        image_embeddings: e.image_embeddings,
        image_positional_embeddings: e.image_positional_embeddings
      });
    }
    async _call(e) {
      return new SamImageSegmentationOutput(await super._call(e));
    }
  }
  class SamImageSegmentationOutput extends ModelOutput {
    constructor({ iou_scores: e, pred_masks: t }) {
      super(), this.iou_scores = e, this.pred_masks = t;
    }
  }
  class MarianPreTrainedModel extends PreTrainedModel {
  }
  class MarianModel extends MarianPreTrainedModel {
  }
  class MarianMTModel extends MarianPreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
    }
  }
  class M2M100PreTrainedModel extends PreTrainedModel {
  }
  class M2M100Model extends M2M100PreTrainedModel {
  }
  class M2M100ForConditionalGeneration extends M2M100PreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.d_model / this.num_encoder_heads;
    }
  }
  class Wav2Vec2PreTrainedModel extends PreTrainedModel {
  }
  class Wav2Vec2Model extends Wav2Vec2PreTrainedModel {
  }
  class Wav2Vec2ForCTC extends Wav2Vec2PreTrainedModel {
    async _call(e) {
      return new CausalLMOutput(await super._call(e));
    }
  }
  class Wav2Vec2ForSequenceClassification extends Wav2Vec2PreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class Wav2Vec2ForAudioFrameClassification extends Wav2Vec2PreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class UniSpeechPreTrainedModel extends PreTrainedModel {
  }
  class UniSpeechModel extends UniSpeechPreTrainedModel {
  }
  class UniSpeechForCTC extends UniSpeechPreTrainedModel {
    async _call(e) {
      return new CausalLMOutput(await super._call(e));
    }
  }
  class UniSpeechForSequenceClassification extends UniSpeechPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class UniSpeechSatPreTrainedModel extends PreTrainedModel {
  }
  class UniSpeechSatModel extends UniSpeechSatPreTrainedModel {
  }
  class UniSpeechSatForCTC extends UniSpeechSatPreTrainedModel {
    async _call(e) {
      return new CausalLMOutput(await super._call(e));
    }
  }
  class UniSpeechSatForSequenceClassification extends UniSpeechSatPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class UniSpeechSatForAudioFrameClassification extends UniSpeechSatPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class Wav2Vec2BertPreTrainedModel extends PreTrainedModel {
  }
  class Wav2Vec2BertModel extends Wav2Vec2BertPreTrainedModel {
  }
  class Wav2Vec2BertForCTC extends Wav2Vec2BertPreTrainedModel {
    async _call(e) {
      return new CausalLMOutput(await super._call(e));
    }
  }
  class Wav2Vec2BertForSequenceClassification extends Wav2Vec2BertPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class HubertModel extends Wav2Vec2PreTrainedModel {
  }
  class HubertForCTC extends Wav2Vec2PreTrainedModel {
    async _call(e) {
      return new CausalLMOutput(await super._call(e));
    }
  }
  class HubertForSequenceClassification extends Wav2Vec2PreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class WavLMPreTrainedModel extends PreTrainedModel {
  }
  class WavLMModel extends WavLMPreTrainedModel {
  }
  class WavLMForCTC extends WavLMPreTrainedModel {
    async _call(e) {
      return new CausalLMOutput(await super._call(e));
    }
  }
  class WavLMForSequenceClassification extends WavLMPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class WavLMForXVector extends WavLMPreTrainedModel {
    async _call(e) {
      return new XVectorOutput(await super._call(e));
    }
  }
  class WavLMForAudioFrameClassification extends WavLMPreTrainedModel {
    async _call(e) {
      return new TokenClassifierOutput(await super._call(e));
    }
  }
  class SpeechT5PreTrainedModel extends PreTrainedModel {
  }
  class SpeechT5ForSpeechToText extends SpeechT5PreTrainedModel {
  }
  class SpeechT5ForTextToSpeech extends SpeechT5PreTrainedModel {
    constructor(e, t, s, l) {
      super(e, t), this.decoder_merged_session = s, this.generation_config = l, this.num_decoder_layers = this.config.decoder_layers, this.num_decoder_heads = this.config.decoder_attention_heads, this.decoder_dim_kv = this.config.hidden_size / this.num_decoder_heads, this.num_encoder_layers = this.config.encoder_layers, this.num_encoder_heads = this.config.encoder_attention_heads, this.encoder_dim_kv = this.config.hidden_size / this.num_encoder_heads;
    }
    async generate_speech(e, t, { threshold: s = 0.5, minlenratio: l = 0, maxlenratio: f = 20, vocoder: d = null } = {}) {
      const w = {
        input_ids: e
      }, { encoder_outputs: g, encoder_attention_mask: _ } = await encoderForward(this, w), h = g.dims[1] / this.config.reduction_factor, r = Math.floor(h * f), n = Math.floor(h * l), u = this.config.num_mel_bins;
      let p = [], M = null, P = null, E = 0;
      for (; ; ) {
        ++E;
        const A = boolTensor(!!P);
        let C;
        P ? C = P.output_sequence_out : C = new Tensor("float32", new Float32Array(u), [
          1,
          1,
          u
        ]);
        let F = {
          use_cache_branch: A,
          output_sequence: C,
          encoder_attention_mask: _,
          speaker_embeddings: t,
          encoder_hidden_states: g
        };
        this.addPastKeyValues(F, M), P = await sessionRun(this.decoder_merged_session, F), M = this.getPastKeyValues(P, M);
        const { prob: D, spectrum: N } = P;
        if (p.push(N), E >= n && (Array.from(D.data).filter((R) => R >= s).length > 0 || E >= r))
          break;
      }
      const k = cat(p), { waveform: $ } = await sessionRun(d.session, {
        spectrogram: k
      });
      return {
        spectrogram: k,
        waveform: $
      };
    }
  }
  class SpeechT5HifiGan extends PreTrainedModel {
    constructor() {
      super(...arguments);
      __publicField(this, "main_input_name", "spectrogram");
    }
  }
  class TrOCRPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_encoder_layers = this.num_decoder_layers = this.config.decoder_layers, this.num_encoder_heads = this.num_decoder_heads = this.config.decoder_attention_heads, this.encoder_dim_kv = this.decoder_dim_kv = this.config.d_model / this.num_decoder_heads;
    }
  }
  class TrOCRForCausalLM extends TrOCRPreTrainedModel {
  }
  class MistralPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_key_value_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
    }
  }
  class MistralModel extends MistralPreTrainedModel {
  }
  class MistralForCausalLM extends MistralPreTrainedModel {
  }
  class Starcoder2PreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_key_value_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
    }
  }
  class Starcoder2Model extends Starcoder2PreTrainedModel {
  }
  class Starcoder2ForCausalLM extends Starcoder2PreTrainedModel {
  }
  class FalconPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_attention_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.config.num_attention_heads;
    }
  }
  class FalconModel extends FalconPreTrainedModel {
  }
  class FalconForCausalLM extends FalconPreTrainedModel {
  }
  class ClapPreTrainedModel extends PreTrainedModel {
  }
  class ClapModel extends ClapPreTrainedModel {
  }
  class ClapTextModelWithProjection extends ClapPreTrainedModel {
    static async from_pretrained(e, t = {}) {
      return t.model_file_name ?? (t.model_file_name = "text_model"), super.from_pretrained(e, t);
    }
  }
  class ClapAudioModelWithProjection extends ClapPreTrainedModel {
    static async from_pretrained(e, t = {}) {
      return t.model_file_name ?? (t.model_file_name = "audio_model"), super.from_pretrained(e, t);
    }
  }
  class VitsPreTrainedModel extends PreTrainedModel {
  }
  class VitsModel extends VitsPreTrainedModel {
    async _call(e) {
      return new VitsModelOutput(await super._call(e));
    }
  }
  class SegformerPreTrainedModel extends PreTrainedModel {
  }
  class SegformerForImageClassification extends SegformerPreTrainedModel {
  }
  class SegformerForSemanticSegmentation extends SegformerPreTrainedModel {
  }
  class StableLmPreTrainedModel extends PreTrainedModel {
    constructor(e, t, s) {
      super(e, t), this.generation_config = s, this.config.pad_token_id = this.config.eos_token_id, this.num_heads = this.config.num_attention_heads, this.num_layers = this.config.num_hidden_layers, this.dim_kv = this.config.hidden_size / this.num_heads;
    }
  }
  class StableLmForCausalLM extends StableLmPreTrainedModel {
  }
  class EfficientNetPreTrainedModel extends PreTrainedModel {
  }
  class EfficientNetModel extends EfficientNetPreTrainedModel {
  }
  class EfficientNetForImageClassification extends EfficientNetPreTrainedModel {
    async _call(e) {
      return new SequenceClassifierOutput(await super._call(e));
    }
  }
  class PretrainedMixin {
    static async from_pretrained(e, { quantized: t = true, progress_callback: s = null, config: l = null, cache_dir: f = null, local_files_only: d = false, revision: w = "main", model_file_name: g = null } = {}) {
      let _ = {
        quantized: t,
        progress_callback: s,
        config: l,
        cache_dir: f,
        local_files_only: d,
        revision: w,
        model_file_name: g
      };
      if (l = await AutoConfig.from_pretrained(e, _), _.config || (_.config = l), !this.MODEL_CLASS_MAPPINGS)
        throw new Error("`MODEL_CLASS_MAPPINGS` not implemented for this type of `AutoClass`: " + this.name);
      for (let h of this.MODEL_CLASS_MAPPINGS) {
        const r = h.get(l.model_type);
        if (r)
          return await r[1].from_pretrained(e, _);
      }
      if (this.BASE_IF_FAIL)
        return console.warn(`Unknown model class "${l.model_type}", attempting to construct from base class.`), await PreTrainedModel.from_pretrained(e, _);
      throw Error(`Unsupported model type: ${l.model_type}`);
    }
  }
  __publicField(PretrainedMixin, "MODEL_CLASS_MAPPINGS", null);
  __publicField(PretrainedMixin, "BASE_IF_FAIL", false);
  const MODEL_MAPPING_NAMES_ENCODER_ONLY = /* @__PURE__ */ new Map([
    [
      "bert",
      [
        "BertModel",
        BertModel
      ]
    ],
    [
      "nomic_bert",
      [
        "NomicBertModel",
        NomicBertModel
      ]
    ],
    [
      "roformer",
      [
        "RoFormerModel",
        RoFormerModel
      ]
    ],
    [
      "electra",
      [
        "ElectraModel",
        ElectraModel
      ]
    ],
    [
      "esm",
      [
        "EsmModel",
        EsmModel
      ]
    ],
    [
      "convbert",
      [
        "ConvBertModel",
        ConvBertModel
      ]
    ],
    [
      "camembert",
      [
        "CamembertModel",
        CamembertModel
      ]
    ],
    [
      "deberta",
      [
        "DebertaModel",
        DebertaModel
      ]
    ],
    [
      "deberta-v2",
      [
        "DebertaV2Model",
        DebertaV2Model
      ]
    ],
    [
      "mpnet",
      [
        "MPNetModel",
        MPNetModel
      ]
    ],
    [
      "albert",
      [
        "AlbertModel",
        AlbertModel
      ]
    ],
    [
      "distilbert",
      [
        "DistilBertModel",
        DistilBertModel
      ]
    ],
    [
      "roberta",
      [
        "RobertaModel",
        RobertaModel
      ]
    ],
    [
      "xlm",
      [
        "XLMModel",
        XLMModel
      ]
    ],
    [
      "xlm-roberta",
      [
        "XLMRobertaModel",
        XLMRobertaModel
      ]
    ],
    [
      "clap",
      [
        "ClapModel",
        ClapModel
      ]
    ],
    [
      "clip",
      [
        "CLIPModel",
        CLIPModel
      ]
    ],
    [
      "clipseg",
      [
        "CLIPSegModel",
        CLIPSegModel
      ]
    ],
    [
      "chinese_clip",
      [
        "ChineseCLIPModel",
        ChineseCLIPModel
      ]
    ],
    [
      "siglip",
      [
        "SiglipModel",
        SiglipModel
      ]
    ],
    [
      "mobilebert",
      [
        "MobileBertModel",
        MobileBertModel
      ]
    ],
    [
      "squeezebert",
      [
        "SqueezeBertModel",
        SqueezeBertModel
      ]
    ],
    [
      "wav2vec2",
      [
        "Wav2Vec2Model",
        Wav2Vec2Model
      ]
    ],
    [
      "wav2vec2-bert",
      [
        "Wav2Vec2BertModel",
        Wav2Vec2BertModel
      ]
    ],
    [
      "unispeech",
      [
        "UniSpeechModel",
        UniSpeechModel
      ]
    ],
    [
      "unispeech-sat",
      [
        "UniSpeechSatModel",
        UniSpeechSatModel
      ]
    ],
    [
      "hubert",
      [
        "HubertModel",
        HubertModel
      ]
    ],
    [
      "wavlm",
      [
        "WavLMModel",
        WavLMModel
      ]
    ],
    [
      "audio-spectrogram-transformer",
      [
        "ASTModel",
        ASTModel
      ]
    ],
    [
      "vits",
      [
        "VitsModel",
        VitsModel
      ]
    ],
    [
      "detr",
      [
        "DetrModel",
        DetrModel
      ]
    ],
    [
      "table-transformer",
      [
        "TableTransformerModel",
        TableTransformerModel
      ]
    ],
    [
      "vit",
      [
        "ViTModel",
        ViTModel
      ]
    ],
    [
      "fastvit",
      [
        "FastViTModel",
        FastViTModel
      ]
    ],
    [
      "mobilevit",
      [
        "MobileViTModel",
        MobileViTModel
      ]
    ],
    [
      "mobilevitv2",
      [
        "MobileViTV2Model",
        MobileViTV2Model
      ]
    ],
    [
      "owlvit",
      [
        "OwlViTModel",
        OwlViTModel
      ]
    ],
    [
      "owlv2",
      [
        "Owlv2Model",
        Owlv2Model
      ]
    ],
    [
      "beit",
      [
        "BeitModel",
        BeitModel
      ]
    ],
    [
      "deit",
      [
        "DeiTModel",
        DeiTModel
      ]
    ],
    [
      "convnext",
      [
        "ConvNextModel",
        ConvNextModel
      ]
    ],
    [
      "convnextv2",
      [
        "ConvNextV2Model",
        ConvNextV2Model
      ]
    ],
    [
      "dinov2",
      [
        "Dinov2Model",
        Dinov2Model
      ]
    ],
    [
      "resnet",
      [
        "ResNetModel",
        ResNetModel
      ]
    ],
    [
      "swin",
      [
        "SwinModel",
        SwinModel
      ]
    ],
    [
      "swin2sr",
      [
        "Swin2SRModel",
        Swin2SRModel
      ]
    ],
    [
      "donut-swin",
      [
        "DonutSwinModel",
        DonutSwinModel
      ]
    ],
    [
      "yolos",
      [
        "YolosModel",
        YolosModel
      ]
    ],
    [
      "dpt",
      [
        "DPTModel",
        DPTModel
      ]
    ],
    [
      "glpn",
      [
        "GLPNModel",
        GLPNModel
      ]
    ],
    [
      "hifigan",
      [
        "SpeechT5HifiGan",
        SpeechT5HifiGan
      ]
    ],
    [
      "efficientnet",
      [
        "EfficientNetModel",
        EfficientNetModel
      ]
    ]
  ]), MODEL_MAPPING_NAMES_ENCODER_DECODER = /* @__PURE__ */ new Map([
    [
      "t5",
      [
        "T5Model",
        T5Model
      ]
    ],
    [
      "longt5",
      [
        "LongT5Model",
        LongT5Model
      ]
    ],
    [
      "mt5",
      [
        "MT5Model",
        MT5Model
      ]
    ],
    [
      "bart",
      [
        "BartModel",
        BartModel
      ]
    ],
    [
      "mbart",
      [
        "MBartModel",
        MBartModel
      ]
    ],
    [
      "marian",
      [
        "MarianModel",
        MarianModel
      ]
    ],
    [
      "whisper",
      [
        "WhisperModel",
        WhisperModel
      ]
    ],
    [
      "m2m_100",
      [
        "M2M100Model",
        M2M100Model
      ]
    ],
    [
      "blenderbot",
      [
        "BlenderbotModel",
        BlenderbotModel
      ]
    ],
    [
      "blenderbot-small",
      [
        "BlenderbotSmallModel",
        BlenderbotSmallModel
      ]
    ]
  ]), MODEL_MAPPING_NAMES_DECODER_ONLY = /* @__PURE__ */ new Map([
    [
      "bloom",
      [
        "BloomModel",
        BloomModel
      ]
    ],
    [
      "gpt2",
      [
        "GPT2Model",
        GPT2Model
      ]
    ],
    [
      "gptj",
      [
        "GPTJModel",
        GPTJModel
      ]
    ],
    [
      "gpt_bigcode",
      [
        "GPTBigCodeModel",
        GPTBigCodeModel
      ]
    ],
    [
      "gpt_neo",
      [
        "GPTNeoModel",
        GPTNeoModel
      ]
    ],
    [
      "gpt_neox",
      [
        "GPTNeoXModel",
        GPTNeoXModel
      ]
    ],
    [
      "codegen",
      [
        "CodeGenModel",
        CodeGenModel
      ]
    ],
    [
      "llama",
      [
        "LlamaModel",
        LlamaModel
      ]
    ],
    [
      "qwen2",
      [
        "Qwen2Model",
        Qwen2Model
      ]
    ],
    [
      "phi",
      [
        "PhiModel",
        PhiModel
      ]
    ],
    [
      "mpt",
      [
        "MptModel",
        MptModel
      ]
    ],
    [
      "opt",
      [
        "OPTModel",
        OPTModel
      ]
    ],
    [
      "mistral",
      [
        "MistralModel",
        MistralModel
      ]
    ],
    [
      "starcoder2",
      [
        "Starcoder2Model",
        Starcoder2Model
      ]
    ],
    [
      "falcon",
      [
        "FalconModel",
        FalconModel
      ]
    ]
  ]), MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "speecht5",
      [
        "SpeechT5ForSpeechToText",
        SpeechT5ForSpeechToText
      ]
    ],
    [
      "whisper",
      [
        "WhisperForConditionalGeneration",
        WhisperForConditionalGeneration
      ]
    ]
  ]), MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "speecht5",
      [
        "SpeechT5ForTextToSpeech",
        SpeechT5ForTextToSpeech
      ]
    ]
  ]), MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "vits",
      [
        "VitsModel",
        VitsModel
      ]
    ]
  ]), MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "bert",
      [
        "BertForSequenceClassification",
        BertForSequenceClassification
      ]
    ],
    [
      "roformer",
      [
        "RoFormerForSequenceClassification",
        RoFormerForSequenceClassification
      ]
    ],
    [
      "electra",
      [
        "ElectraForSequenceClassification",
        ElectraForSequenceClassification
      ]
    ],
    [
      "esm",
      [
        "EsmForSequenceClassification",
        EsmForSequenceClassification
      ]
    ],
    [
      "convbert",
      [
        "ConvBertForSequenceClassification",
        ConvBertForSequenceClassification
      ]
    ],
    [
      "camembert",
      [
        "CamembertForSequenceClassification",
        CamembertForSequenceClassification
      ]
    ],
    [
      "deberta",
      [
        "DebertaForSequenceClassification",
        DebertaForSequenceClassification
      ]
    ],
    [
      "deberta-v2",
      [
        "DebertaV2ForSequenceClassification",
        DebertaV2ForSequenceClassification
      ]
    ],
    [
      "mpnet",
      [
        "MPNetForSequenceClassification",
        MPNetForSequenceClassification
      ]
    ],
    [
      "albert",
      [
        "AlbertForSequenceClassification",
        AlbertForSequenceClassification
      ]
    ],
    [
      "distilbert",
      [
        "DistilBertForSequenceClassification",
        DistilBertForSequenceClassification
      ]
    ],
    [
      "roberta",
      [
        "RobertaForSequenceClassification",
        RobertaForSequenceClassification
      ]
    ],
    [
      "xlm",
      [
        "XLMForSequenceClassification",
        XLMForSequenceClassification
      ]
    ],
    [
      "xlm-roberta",
      [
        "XLMRobertaForSequenceClassification",
        XLMRobertaForSequenceClassification
      ]
    ],
    [
      "bart",
      [
        "BartForSequenceClassification",
        BartForSequenceClassification
      ]
    ],
    [
      "mbart",
      [
        "MBartForSequenceClassification",
        MBartForSequenceClassification
      ]
    ],
    [
      "mobilebert",
      [
        "MobileBertForSequenceClassification",
        MobileBertForSequenceClassification
      ]
    ],
    [
      "squeezebert",
      [
        "SqueezeBertForSequenceClassification",
        SqueezeBertForSequenceClassification
      ]
    ]
  ]), MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "bert",
      [
        "BertForTokenClassification",
        BertForTokenClassification
      ]
    ],
    [
      "roformer",
      [
        "RoFormerForTokenClassification",
        RoFormerForTokenClassification
      ]
    ],
    [
      "electra",
      [
        "ElectraForTokenClassification",
        ElectraForTokenClassification
      ]
    ],
    [
      "esm",
      [
        "EsmForTokenClassification",
        EsmForTokenClassification
      ]
    ],
    [
      "convbert",
      [
        "ConvBertForTokenClassification",
        ConvBertForTokenClassification
      ]
    ],
    [
      "camembert",
      [
        "CamembertForTokenClassification",
        CamembertForTokenClassification
      ]
    ],
    [
      "deberta",
      [
        "DebertaForTokenClassification",
        DebertaForTokenClassification
      ]
    ],
    [
      "deberta-v2",
      [
        "DebertaV2ForTokenClassification",
        DebertaV2ForTokenClassification
      ]
    ],
    [
      "mpnet",
      [
        "MPNetForTokenClassification",
        MPNetForTokenClassification
      ]
    ],
    [
      "distilbert",
      [
        "DistilBertForTokenClassification",
        DistilBertForTokenClassification
      ]
    ],
    [
      "roberta",
      [
        "RobertaForTokenClassification",
        RobertaForTokenClassification
      ]
    ],
    [
      "xlm",
      [
        "XLMForTokenClassification",
        XLMForTokenClassification
      ]
    ],
    [
      "xlm-roberta",
      [
        "XLMRobertaForTokenClassification",
        XLMRobertaForTokenClassification
      ]
    ]
  ]), MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "t5",
      [
        "T5ForConditionalGeneration",
        T5ForConditionalGeneration
      ]
    ],
    [
      "longt5",
      [
        "LongT5ForConditionalGeneration",
        LongT5ForConditionalGeneration
      ]
    ],
    [
      "mt5",
      [
        "MT5ForConditionalGeneration",
        MT5ForConditionalGeneration
      ]
    ],
    [
      "bart",
      [
        "BartForConditionalGeneration",
        BartForConditionalGeneration
      ]
    ],
    [
      "mbart",
      [
        "MBartForConditionalGeneration",
        MBartForConditionalGeneration
      ]
    ],
    [
      "marian",
      [
        "MarianMTModel",
        MarianMTModel
      ]
    ],
    [
      "m2m_100",
      [
        "M2M100ForConditionalGeneration",
        M2M100ForConditionalGeneration
      ]
    ],
    [
      "blenderbot",
      [
        "BlenderbotForConditionalGeneration",
        BlenderbotForConditionalGeneration
      ]
    ],
    [
      "blenderbot-small",
      [
        "BlenderbotSmallForConditionalGeneration",
        BlenderbotSmallForConditionalGeneration
      ]
    ]
  ]), MODEL_WITH_LM_HEAD_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "bloom",
      [
        "BloomForCausalLM",
        BloomForCausalLM
      ]
    ],
    [
      "gpt2",
      [
        "GPT2LMHeadModel",
        GPT2LMHeadModel
      ]
    ],
    [
      "gptj",
      [
        "GPTJForCausalLM",
        GPTJForCausalLM
      ]
    ],
    [
      "gpt_bigcode",
      [
        "GPTBigCodeForCausalLM",
        GPTBigCodeForCausalLM
      ]
    ],
    [
      "gpt_neo",
      [
        "GPTNeoForCausalLM",
        GPTNeoForCausalLM
      ]
    ],
    [
      "gpt_neox",
      [
        "GPTNeoXForCausalLM",
        GPTNeoXForCausalLM
      ]
    ],
    [
      "codegen",
      [
        "CodeGenForCausalLM",
        CodeGenForCausalLM
      ]
    ],
    [
      "llama",
      [
        "LlamaForCausalLM",
        LlamaForCausalLM
      ]
    ],
    [
      "qwen2",
      [
        "Qwen2ForCausalLM",
        Qwen2ForCausalLM
      ]
    ],
    [
      "phi",
      [
        "PhiForCausalLM",
        PhiForCausalLM
      ]
    ],
    [
      "mpt",
      [
        "MptForCausalLM",
        MptForCausalLM
      ]
    ],
    [
      "opt",
      [
        "OPTForCausalLM",
        OPTForCausalLM
      ]
    ],
    [
      "mbart",
      [
        "MBartForCausalLM",
        MBartForCausalLM
      ]
    ],
    [
      "mistral",
      [
        "MistralForCausalLM",
        MistralForCausalLM
      ]
    ],
    [
      "starcoder2",
      [
        "Starcoder2ForCausalLM",
        Starcoder2ForCausalLM
      ]
    ],
    [
      "falcon",
      [
        "FalconForCausalLM",
        FalconForCausalLM
      ]
    ],
    [
      "trocr",
      [
        "TrOCRForCausalLM",
        TrOCRForCausalLM
      ]
    ],
    [
      "stablelm",
      [
        "StableLmForCausalLM",
        StableLmForCausalLM
      ]
    ]
  ]), MODEL_FOR_MASKED_LM_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "bert",
      [
        "BertForMaskedLM",
        BertForMaskedLM
      ]
    ],
    [
      "roformer",
      [
        "RoFormerForMaskedLM",
        RoFormerForMaskedLM
      ]
    ],
    [
      "electra",
      [
        "ElectraForMaskedLM",
        ElectraForMaskedLM
      ]
    ],
    [
      "esm",
      [
        "EsmForMaskedLM",
        EsmForMaskedLM
      ]
    ],
    [
      "convbert",
      [
        "ConvBertForMaskedLM",
        ConvBertForMaskedLM
      ]
    ],
    [
      "camembert",
      [
        "CamembertForMaskedLM",
        CamembertForMaskedLM
      ]
    ],
    [
      "deberta",
      [
        "DebertaForMaskedLM",
        DebertaForMaskedLM
      ]
    ],
    [
      "deberta-v2",
      [
        "DebertaV2ForMaskedLM",
        DebertaV2ForMaskedLM
      ]
    ],
    [
      "mpnet",
      [
        "MPNetForMaskedLM",
        MPNetForMaskedLM
      ]
    ],
    [
      "albert",
      [
        "AlbertForMaskedLM",
        AlbertForMaskedLM
      ]
    ],
    [
      "distilbert",
      [
        "DistilBertForMaskedLM",
        DistilBertForMaskedLM
      ]
    ],
    [
      "roberta",
      [
        "RobertaForMaskedLM",
        RobertaForMaskedLM
      ]
    ],
    [
      "xlm",
      [
        "XLMWithLMHeadModel",
        XLMWithLMHeadModel
      ]
    ],
    [
      "xlm-roberta",
      [
        "XLMRobertaForMaskedLM",
        XLMRobertaForMaskedLM
      ]
    ],
    [
      "mobilebert",
      [
        "MobileBertForMaskedLM",
        MobileBertForMaskedLM
      ]
    ],
    [
      "squeezebert",
      [
        "SqueezeBertForMaskedLM",
        SqueezeBertForMaskedLM
      ]
    ]
  ]), MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "bert",
      [
        "BertForQuestionAnswering",
        BertForQuestionAnswering
      ]
    ],
    [
      "roformer",
      [
        "RoFormerForQuestionAnswering",
        RoFormerForQuestionAnswering
      ]
    ],
    [
      "electra",
      [
        "ElectraForQuestionAnswering",
        ElectraForQuestionAnswering
      ]
    ],
    [
      "convbert",
      [
        "ConvBertForQuestionAnswering",
        ConvBertForQuestionAnswering
      ]
    ],
    [
      "camembert",
      [
        "CamembertForQuestionAnswering",
        CamembertForQuestionAnswering
      ]
    ],
    [
      "deberta",
      [
        "DebertaForQuestionAnswering",
        DebertaForQuestionAnswering
      ]
    ],
    [
      "deberta-v2",
      [
        "DebertaV2ForQuestionAnswering",
        DebertaV2ForQuestionAnswering
      ]
    ],
    [
      "mpnet",
      [
        "MPNetForQuestionAnswering",
        MPNetForQuestionAnswering
      ]
    ],
    [
      "albert",
      [
        "AlbertForQuestionAnswering",
        AlbertForQuestionAnswering
      ]
    ],
    [
      "distilbert",
      [
        "DistilBertForQuestionAnswering",
        DistilBertForQuestionAnswering
      ]
    ],
    [
      "roberta",
      [
        "RobertaForQuestionAnswering",
        RobertaForQuestionAnswering
      ]
    ],
    [
      "xlm",
      [
        "XLMForQuestionAnswering",
        XLMForQuestionAnswering
      ]
    ],
    [
      "xlm-roberta",
      [
        "XLMRobertaForQuestionAnswering",
        XLMRobertaForQuestionAnswering
      ]
    ],
    [
      "mobilebert",
      [
        "MobileBertForQuestionAnswering",
        MobileBertForQuestionAnswering
      ]
    ],
    [
      "squeezebert",
      [
        "SqueezeBertForQuestionAnswering",
        SqueezeBertForQuestionAnswering
      ]
    ]
  ]), MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "vision-encoder-decoder",
      [
        "VisionEncoderDecoderModel",
        VisionEncoderDecoderModel
      ]
    ]
  ]), MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "vision-encoder-decoder",
      [
        "VisionEncoderDecoderModel",
        VisionEncoderDecoderModel
      ]
    ]
  ]), MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "vit",
      [
        "ViTForImageClassification",
        ViTForImageClassification
      ]
    ],
    [
      "fastvit",
      [
        "FastViTForImageClassification",
        FastViTForImageClassification
      ]
    ],
    [
      "mobilevit",
      [
        "MobileViTForImageClassification",
        MobileViTForImageClassification
      ]
    ],
    [
      "mobilevitv2",
      [
        "MobileViTV2ForImageClassification",
        MobileViTV2ForImageClassification
      ]
    ],
    [
      "beit",
      [
        "BeitForImageClassification",
        BeitForImageClassification
      ]
    ],
    [
      "deit",
      [
        "DeiTForImageClassification",
        DeiTForImageClassification
      ]
    ],
    [
      "convnext",
      [
        "ConvNextForImageClassification",
        ConvNextForImageClassification
      ]
    ],
    [
      "convnextv2",
      [
        "ConvNextV2ForImageClassification",
        ConvNextV2ForImageClassification
      ]
    ],
    [
      "dinov2",
      [
        "Dinov2ForImageClassification",
        Dinov2ForImageClassification
      ]
    ],
    [
      "resnet",
      [
        "ResNetForImageClassification",
        ResNetForImageClassification
      ]
    ],
    [
      "swin",
      [
        "SwinForImageClassification",
        SwinForImageClassification
      ]
    ],
    [
      "segformer",
      [
        "SegformerForImageClassification",
        SegformerForImageClassification
      ]
    ],
    [
      "efficientnet",
      [
        "EfficientNetForImageClassification",
        EfficientNetForImageClassification
      ]
    ]
  ]), MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "detr",
      [
        "DetrForObjectDetection",
        DetrForObjectDetection
      ]
    ],
    [
      "table-transformer",
      [
        "TableTransformerForObjectDetection",
        TableTransformerForObjectDetection
      ]
    ],
    [
      "yolos",
      [
        "YolosForObjectDetection",
        YolosForObjectDetection
      ]
    ]
  ]), MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "owlvit",
      [
        "OwlViTForObjectDetection",
        OwlViTForObjectDetection
      ]
    ],
    [
      "owlv2",
      [
        "Owlv2ForObjectDetection",
        Owlv2ForObjectDetection
      ]
    ]
  ]), MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "detr",
      [
        "DetrForSegmentation",
        DetrForSegmentation
      ]
    ],
    [
      "clipseg",
      [
        "CLIPSegForImageSegmentation",
        CLIPSegForImageSegmentation
      ]
    ]
  ]), MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "segformer",
      [
        "SegformerForSemanticSegmentation",
        SegformerForSemanticSegmentation
      ]
    ]
  ]), MODEL_FOR_MASK_GENERATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "sam",
      [
        "SamModel",
        SamModel
      ]
    ]
  ]), MODEL_FOR_CTC_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "wav2vec2",
      [
        "Wav2Vec2ForCTC",
        Wav2Vec2ForCTC
      ]
    ],
    [
      "wav2vec2-bert",
      [
        "Wav2Vec2BertForCTC",
        Wav2Vec2BertForCTC
      ]
    ],
    [
      "unispeech",
      [
        "UniSpeechForCTC",
        UniSpeechForCTC
      ]
    ],
    [
      "unispeech-sat",
      [
        "UniSpeechSatForCTC",
        UniSpeechSatForCTC
      ]
    ],
    [
      "wavlm",
      [
        "WavLMForCTC",
        WavLMForCTC
      ]
    ],
    [
      "hubert",
      [
        "HubertForCTC",
        HubertForCTC
      ]
    ]
  ]), MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "wav2vec2",
      [
        "Wav2Vec2ForSequenceClassification",
        Wav2Vec2ForSequenceClassification
      ]
    ],
    [
      "wav2vec2-bert",
      [
        "Wav2Vec2BertForSequenceClassification",
        Wav2Vec2BertForSequenceClassification
      ]
    ],
    [
      "unispeech",
      [
        "UniSpeechForSequenceClassification",
        UniSpeechForSequenceClassification
      ]
    ],
    [
      "unispeech-sat",
      [
        "UniSpeechSatForSequenceClassification",
        UniSpeechSatForSequenceClassification
      ]
    ],
    [
      "wavlm",
      [
        "WavLMForSequenceClassification",
        WavLMForSequenceClassification
      ]
    ],
    [
      "hubert",
      [
        "HubertForSequenceClassification",
        HubertForSequenceClassification
      ]
    ],
    [
      "audio-spectrogram-transformer",
      [
        "ASTForAudioClassification",
        ASTForAudioClassification
      ]
    ]
  ]), MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "wavlm",
      [
        "WavLMForXVector",
        WavLMForXVector
      ]
    ]
  ]), MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "unispeech-sat",
      [
        "UniSpeechSatForAudioFrameClassification",
        UniSpeechSatForAudioFrameClassification
      ]
    ],
    [
      "wavlm",
      [
        "WavLMForAudioFrameClassification",
        WavLMForAudioFrameClassification
      ]
    ],
    [
      "wav2vec2",
      [
        "Wav2Vec2ForAudioFrameClassification",
        Wav2Vec2ForAudioFrameClassification
      ]
    ]
  ]), MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "vitmatte",
      [
        "VitMatteForImageMatting",
        VitMatteForImageMatting
      ]
    ]
  ]), MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "swin2sr",
      [
        "Swin2SRForImageSuperResolution",
        Swin2SRForImageSuperResolution
      ]
    ]
  ]), MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "dpt",
      [
        "DPTForDepthEstimation",
        DPTForDepthEstimation
      ]
    ],
    [
      "depth_anything",
      [
        "DepthAnythingForDepthEstimation",
        DepthAnythingForDepthEstimation
      ]
    ],
    [
      "glpn",
      [
        "GLPNForDepthEstimation",
        GLPNForDepthEstimation
      ]
    ]
  ]), MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES = /* @__PURE__ */ new Map([
    [
      "clip",
      [
        "CLIPVisionModelWithProjection",
        CLIPVisionModelWithProjection
      ]
    ],
    [
      "siglip",
      [
        "SiglipVisionModel",
        SiglipVisionModel
      ]
    ]
  ]), MODEL_CLASS_TYPE_MAPPING = [
    [
      MODEL_MAPPING_NAMES_ENCODER_ONLY,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_MAPPING_NAMES_ENCODER_DECODER,
      MODEL_TYPES.EncoderDecoder
    ],
    [
      MODEL_MAPPING_NAMES_DECODER_ONLY,
      MODEL_TYPES.DecoderOnly
    ],
    [
      MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES,
      MODEL_TYPES.Seq2Seq
    ],
    [
      MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES,
      MODEL_TYPES.Seq2Seq
    ],
    [
      MODEL_WITH_LM_HEAD_MAPPING_NAMES,
      MODEL_TYPES.DecoderOnly
    ],
    [
      MODEL_FOR_MASKED_LM_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES,
      MODEL_TYPES.Vision2Seq
    ],
    [
      MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_IMAGE_MATTING_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_MASK_GENERATION_MAPPING_NAMES,
      MODEL_TYPES.MaskGeneration
    ],
    [
      MODEL_FOR_CTC_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES,
      MODEL_TYPES.Seq2Seq
    ],
    [
      MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_AUDIO_XVECTOR_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_AUDIO_FRAME_CLASSIFICATION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ],
    [
      MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES,
      MODEL_TYPES.EncoderOnly
    ]
  ];
  for (const [i, e] of MODEL_CLASS_TYPE_MAPPING)
    for (const [t, s] of i.values())
      MODEL_TYPE_MAPPING.set(t, e), MODEL_CLASS_TO_NAME_MAPPING.set(s, t), MODEL_NAME_TO_CLASS_MAPPING.set(t, s);
  const CUSTOM_MAPPING = [
    [
      "CLIPTextModelWithProjection",
      CLIPTextModelWithProjection,
      MODEL_TYPES.EncoderOnly
    ],
    [
      "SiglipTextModel",
      SiglipTextModel,
      MODEL_TYPES.EncoderOnly
    ],
    [
      "ClapTextModelWithProjection",
      ClapTextModelWithProjection,
      MODEL_TYPES.EncoderOnly
    ],
    [
      "ClapAudioModelWithProjection",
      ClapAudioModelWithProjection,
      MODEL_TYPES.EncoderOnly
    ]
  ];
  for (const [i, e, t] of CUSTOM_MAPPING)
    MODEL_TYPE_MAPPING.set(i, t), MODEL_CLASS_TO_NAME_MAPPING.set(e, i), MODEL_NAME_TO_CLASS_MAPPING.set(i, e);
  class AutoModel extends PretrainedMixin {
  }
  __publicField(AutoModel, "MODEL_CLASS_MAPPINGS", MODEL_CLASS_TYPE_MAPPING.map((e) => e[0]));
  __publicField(AutoModel, "BASE_IF_FAIL", true);
  class AutoModelForSequenceClassification extends PretrainedMixin {
  }
  __publicField(AutoModelForSequenceClassification, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_SEQUENCE_CLASSIFICATION_MAPPING_NAMES
  ]);
  class AutoModelForTokenClassification extends PretrainedMixin {
  }
  __publicField(AutoModelForTokenClassification, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_TOKEN_CLASSIFICATION_MAPPING_NAMES
  ]);
  class AutoModelForSeq2SeqLM extends PretrainedMixin {
  }
  __publicField(AutoModelForSeq2SeqLM, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_SEQ_TO_SEQ_CAUSAL_LM_MAPPING_NAMES
  ]);
  class AutoModelForSpeechSeq2Seq extends PretrainedMixin {
  }
  __publicField(AutoModelForSpeechSeq2Seq, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_SPEECH_SEQ_2_SEQ_MAPPING_NAMES
  ]);
  class AutoModelForTextToSpectrogram extends PretrainedMixin {
  }
  __publicField(AutoModelForTextToSpectrogram, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_TEXT_TO_SPECTROGRAM_MAPPING_NAMES
  ]);
  class AutoModelForTextToWaveform extends PretrainedMixin {
  }
  __publicField(AutoModelForTextToWaveform, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_TEXT_TO_WAVEFORM_MAPPING_NAMES
  ]);
  class AutoModelForCausalLM extends PretrainedMixin {
  }
  __publicField(AutoModelForCausalLM, "MODEL_CLASS_MAPPINGS", [
    MODEL_WITH_LM_HEAD_MAPPING_NAMES
  ]);
  class AutoModelForMaskedLM extends PretrainedMixin {
  }
  __publicField(AutoModelForMaskedLM, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_MASKED_LM_MAPPING_NAMES
  ]);
  class AutoModelForQuestionAnswering extends PretrainedMixin {
  }
  __publicField(AutoModelForQuestionAnswering, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_QUESTION_ANSWERING_MAPPING_NAMES
  ]);
  class AutoModelForVision2Seq extends PretrainedMixin {
  }
  __publicField(AutoModelForVision2Seq, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_VISION_2_SEQ_MAPPING_NAMES
  ]);
  class AutoModelForImageClassification extends PretrainedMixin {
  }
  __publicField(AutoModelForImageClassification, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_IMAGE_CLASSIFICATION_MAPPING_NAMES
  ]);
  class AutoModelForImageSegmentation extends PretrainedMixin {
  }
  __publicField(AutoModelForImageSegmentation, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_IMAGE_SEGMENTATION_MAPPING_NAMES
  ]);
  class AutoModelForSemanticSegmentation extends PretrainedMixin {
  }
  __publicField(AutoModelForSemanticSegmentation, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_SEMANTIC_SEGMENTATION_MAPPING_NAMES
  ]);
  class AutoModelForObjectDetection extends PretrainedMixin {
  }
  __publicField(AutoModelForObjectDetection, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_OBJECT_DETECTION_MAPPING_NAMES
  ]);
  class AutoModelForZeroShotObjectDetection extends PretrainedMixin {
  }
  __publicField(AutoModelForZeroShotObjectDetection, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_ZERO_SHOT_OBJECT_DETECTION_MAPPING_NAMES
  ]);
  class AutoModelForCTC extends PretrainedMixin {
  }
  __publicField(AutoModelForCTC, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_CTC_MAPPING_NAMES
  ]);
  class AutoModelForAudioClassification extends PretrainedMixin {
  }
  __publicField(AutoModelForAudioClassification, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_AUDIO_CLASSIFICATION_MAPPING_NAMES
  ]);
  class AutoModelForDocumentQuestionAnswering extends PretrainedMixin {
  }
  __publicField(AutoModelForDocumentQuestionAnswering, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_DOCUMENT_QUESTION_ANSWERING_MAPPING_NAMES
  ]);
  class AutoModelForImageToImage extends PretrainedMixin {
  }
  __publicField(AutoModelForImageToImage, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_IMAGE_TO_IMAGE_MAPPING_NAMES
  ]);
  class AutoModelForDepthEstimation extends PretrainedMixin {
  }
  __publicField(AutoModelForDepthEstimation, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_DEPTH_ESTIMATION_MAPPING_NAMES
  ]);
  class AutoModelForImageFeatureExtraction extends PretrainedMixin {
  }
  __publicField(AutoModelForImageFeatureExtraction, "MODEL_CLASS_MAPPINGS", [
    MODEL_FOR_IMAGE_FEATURE_EXTRACTION_MAPPING_NAMES
  ]);
  class Seq2SeqLMOutput extends ModelOutput {
    constructor({ logits: e, past_key_values: t, encoder_outputs: s, decoder_attentions: l = null, cross_attentions: f = null }) {
      super(), this.logits = e, this.past_key_values = t, this.encoder_outputs = s, this.decoder_attentions = l, this.cross_attentions = f;
    }
  }
  class SequenceClassifierOutput extends ModelOutput {
    constructor({ logits: e }) {
      super(), this.logits = e;
    }
  }
  class XVectorOutput extends ModelOutput {
    constructor({ logits: e, embeddings: t }) {
      super(), this.logits = e, this.embeddings = t;
    }
  }
  class TokenClassifierOutput extends ModelOutput {
    constructor({ logits: e }) {
      super(), this.logits = e;
    }
  }
  class MaskedLMOutput extends ModelOutput {
    constructor({ logits: e }) {
      super(), this.logits = e;
    }
  }
  class QuestionAnsweringModelOutput extends ModelOutput {
    constructor({ start_logits: e, end_logits: t }) {
      super(), this.start_logits = e, this.end_logits = t;
    }
  }
  class CausalLMOutput extends ModelOutput {
    constructor({ logits: e }) {
      super(), this.logits = e;
    }
  }
  class ImageMattingOutput extends ModelOutput {
    constructor({ alphas: e }) {
      super(), this.alphas = e;
    }
  }
  class VitsModelOutput extends ModelOutput {
    constructor({ waveform: e, spectrogram: t }) {
      super(), this.waveform = e, this.spectrogram = t;
    }
  }
  const BROWSER_ENV = typeof self < "u", WEBWORKER_ENV = BROWSER_ENV && self.constructor.name === "DedicatedWorkerGlobalScope";
  let createCanvasFunction, ImageDataClass, loadImageFunction;
  if (BROWSER_ENV)
    createCanvasFunction = (i, e) => {
      if (!self.OffscreenCanvas)
        throw new Error("OffscreenCanvas not supported by this browser.");
      return new self.OffscreenCanvas(i, e);
    }, loadImageFunction = self.createImageBitmap, ImageDataClass = self.ImageData;
  else if (sharp)
    loadImageFunction = async (i) => {
      const t = (await i.metadata()).channels;
      let { data: s, info: l } = await i.rotate().raw().toBuffer({
        resolveWithObject: true
      });
      const f = new RawImage(new Uint8ClampedArray(s), l.width, l.height, l.channels);
      return t !== void 0 && t !== l.channels && f.convert(t), f;
    };
  else
    throw new Error("Unable to load image processing library.");
  const RESAMPLING_MAPPING = {
    0: "nearest",
    1: "lanczos",
    2: "bilinear",
    3: "bicubic",
    4: "box",
    5: "hamming"
  }, CONTENT_TYPE_MAP = /* @__PURE__ */ new Map([
    [
      "png",
      "image/png"
    ],
    [
      "jpg",
      "image/jpeg"
    ],
    [
      "jpeg",
      "image/jpeg"
    ],
    [
      "gif",
      "image/gif"
    ]
  ]);
  class RawImage {
    constructor(e, t, s, l) {
      this.data = e, this.width = t, this.height = s, this.channels = l;
    }
    get size() {
      return [
        this.width,
        this.height
      ];
    }
    static async read(e) {
      if (e instanceof RawImage)
        return e;
      if (typeof e == "string" || e instanceof URL)
        return await this.fromURL(e);
      throw new Error(`Unsupported input type: ${typeof e}`);
    }
    static async fromURL(e) {
      let t = await getFile(e);
      if (t.status !== 200)
        throw new Error(`Unable to read image from "${e}" (${t.status} ${t.statusText})`);
      let s = await t.blob();
      return this.fromBlob(s);
    }
    static async fromBlob(e) {
      if (BROWSER_ENV) {
        let t = await loadImageFunction(e);
        const s = createCanvasFunction(t.width, t.height).getContext("2d");
        return s.drawImage(t, 0, 0), new this(s.getImageData(0, 0, t.width, t.height).data, t.width, t.height, 4);
      } else {
        let t = sharp(await e.arrayBuffer());
        return await loadImageFunction(t);
      }
    }
    static fromTensor(e, t = "CHW") {
      if (e.dims.length !== 3)
        throw new Error(`Tensor should have 3 dimensions, but has ${e.dims.length} dimensions.`);
      if (t === "CHW")
        e = e.transpose(1, 2, 0);
      else if (t !== "HWC")
        throw new Error(`Unsupported channel format: ${t}`);
      if (!(e.data instanceof Uint8ClampedArray || e.data instanceof Uint8Array))
        throw new Error(`Unsupported tensor type: ${e.type}`);
      switch (e.dims[2]) {
        case 1:
        case 2:
        case 3:
        case 4:
          return new RawImage(e.data, e.dims[1], e.dims[0], e.dims[2]);
        default:
          throw new Error(`Unsupported number of channels: ${e.dims[2]}`);
      }
    }
    grayscale() {
      if (this.channels === 1)
        return this;
      let e = new Uint8ClampedArray(this.width * this.height * 1);
      switch (this.channels) {
        case 3:
        case 4:
          for (let t = 0, s = 0; t < this.data.length; t += this.channels) {
            const l = this.data[t], f = this.data[t + 1], d = this.data[t + 2];
            e[s++] = Math.round(0.2989 * l + 0.587 * f + 0.114 * d);
          }
          break;
        default:
          throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
      }
      return this._update(e, this.width, this.height, 1);
    }
    rgb() {
      if (this.channels === 3)
        return this;
      let e = new Uint8ClampedArray(this.width * this.height * 3);
      switch (this.channels) {
        case 1:
          for (let t = 0, s = 0; t < this.data.length; ++t)
            e[s++] = this.data[t], e[s++] = this.data[t], e[s++] = this.data[t];
          break;
        case 4:
          for (let t = 0, s = 0; t < this.data.length; t += 4)
            e[s++] = this.data[t], e[s++] = this.data[t + 1], e[s++] = this.data[t + 2];
          break;
        default:
          throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
      }
      return this._update(e, this.width, this.height, 3);
    }
    rgba() {
      if (this.channels === 4)
        return this;
      let e = new Uint8ClampedArray(this.width * this.height * 4);
      switch (this.channels) {
        case 1:
          for (let t = 0, s = 0; t < this.data.length; ++t)
            e[s++] = this.data[t], e[s++] = this.data[t], e[s++] = this.data[t], e[s++] = 255;
          break;
        case 3:
          for (let t = 0, s = 0; t < this.data.length; t += 3)
            e[s++] = this.data[t], e[s++] = this.data[t + 1], e[s++] = this.data[t + 2], e[s++] = 255;
          break;
        default:
          throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
      }
      return this._update(e, this.width, this.height, 4);
    }
    async resize(e, t, { resample: s = 2 } = {}) {
      let l = RESAMPLING_MAPPING[s] ?? s;
      if (BROWSER_ENV) {
        let f = this.channels, d = this.toCanvas();
        const w = createCanvasFunction(e, t).getContext("2d");
        return w.drawImage(d, 0, 0, e, t), new RawImage(w.getImageData(0, 0, e, t).data, e, t, 4).convert(f);
      } else {
        let f = this.toSharp();
        switch (l) {
          case "box":
          case "hamming":
            (l === "box" || l === "hamming") && (console.warn(`Resampling method ${l} is not yet supported. Using bilinear instead.`), l = "bilinear");
          case "nearest":
          case "bilinear":
          case "bicubic":
            f = f.affine([
              e / this.width,
              0,
              0,
              t / this.height
            ], {
              interpolator: l
            });
            break;
          case "lanczos":
            f = f.resize({
              width: e,
              height: t,
              fit: "fill",
              kernel: "lanczos3"
            });
            break;
          default:
            throw new Error(`Resampling method ${l} is not supported.`);
        }
        return await loadImageFunction(f);
      }
    }
    async pad([e, t, s, l]) {
      if (e = Math.max(e, 0), t = Math.max(t, 0), s = Math.max(s, 0), l = Math.max(l, 0), e === 0 && t === 0 && s === 0 && l === 0)
        return this;
      if (BROWSER_ENV) {
        let f = this.channels, d = this.toCanvas(), w = this.width + e + t, g = this.height + s + l;
        const _ = createCanvasFunction(w, g).getContext("2d");
        return _.drawImage(d, 0, 0, this.width, this.height, e, s, w, g), new RawImage(_.getImageData(0, 0, w, g).data, w, g, 4).convert(f);
      } else {
        let f = this.toSharp().extend({
          left: e,
          right: t,
          top: s,
          bottom: l
        });
        return await loadImageFunction(f);
      }
    }
    async crop([e, t, s, l]) {
      if (e = Math.max(e, 0), t = Math.max(t, 0), s = Math.min(s, this.width - 1), l = Math.min(l, this.height - 1), e === 0 && t === 0 && s === this.width - 1 && l === this.height - 1)
        return this;
      const f = s - e + 1, d = l - t + 1;
      if (BROWSER_ENV) {
        const w = this.channels, g = this.toCanvas(), _ = createCanvasFunction(f, d).getContext("2d");
        return _.drawImage(g, e, t, f, d, 0, 0, f, d), new RawImage(_.getImageData(0, 0, f, d).data, f, d, 4).convert(w);
      } else {
        const w = this.toSharp().extract({
          left: e,
          top: t,
          width: f,
          height: d
        });
        return await loadImageFunction(w);
      }
    }
    async center_crop(e, t) {
      if (this.width === e && this.height === t)
        return this;
      let s = (this.width - e) / 2, l = (this.height - t) / 2;
      if (BROWSER_ENV) {
        let f = this.channels, d = this.toCanvas();
        const w = createCanvasFunction(e, t).getContext("2d");
        let g = 0, _ = 0, h = 0, r = 0;
        return s >= 0 ? g = s : h = -s, l >= 0 ? _ = l : r = -l, w.drawImage(d, g, _, e, t, h, r, e, t), new RawImage(w.getImageData(0, 0, e, t).data, e, t, 4).convert(f);
      } else {
        let f = this.toSharp();
        if (s >= 0 && l >= 0)
          f = f.extract({
            left: Math.floor(s),
            top: Math.floor(l),
            width: e,
            height: t
          });
        else if (s <= 0 && l <= 0) {
          let d = Math.floor(-l), w = Math.floor(-s);
          f = f.extend({
            top: d,
            left: w,
            right: e - this.width - w,
            bottom: t - this.height - d
          });
        } else {
          let d = [
            0,
            0
          ], w = 0;
          l < 0 ? (d[0] = Math.floor(-l), d[1] = t - this.height - d[0]) : w = Math.floor(l);
          let g = [
            0,
            0
          ], _ = 0;
          s < 0 ? (g[0] = Math.floor(-s), g[1] = e - this.width - g[0]) : _ = Math.floor(s), f = f.extend({
            top: d[0],
            bottom: d[1],
            left: g[0],
            right: g[1]
          }).extract({
            left: _,
            top: w,
            width: e,
            height: t
          });
        }
        return await loadImageFunction(f);
      }
    }
    async toBlob(e = "image/png", t = 1) {
      if (!BROWSER_ENV)
        throw new Error("toBlob() is only supported in browser environments.");
      return await this.toCanvas().convertToBlob({
        type: e,
        quality: t
      });
    }
    toTensor(e = "CHW") {
      let t = new Tensor("uint8", new Uint8Array(this.data), [
        this.height,
        this.width,
        this.channels
      ]);
      if (e !== "HWC")
        if (e === "CHW")
          t = t.permute(2, 0, 1);
        else
          throw new Error(`Unsupported channel format: ${e}`);
      return t;
    }
    toCanvas() {
      if (!BROWSER_ENV)
        throw new Error("toCanvas() is only supported in browser environments.");
      let e = this.clone().rgba(), t = createCanvasFunction(e.width, e.height), s = new ImageDataClass(e.data, e.width, e.height);
      return t.getContext("2d").putImageData(s, 0, 0), t;
    }
    _update(e, t, s, l = null) {
      return this.data = e, this.width = t, this.height = s, l !== null && (this.channels = l), this;
    }
    clone() {
      return new RawImage(this.data.slice(), this.width, this.height, this.channels);
    }
    convert(e) {
      if (this.channels === e)
        return this;
      switch (e) {
        case 1:
          this.grayscale();
          break;
        case 3:
          this.rgb();
          break;
        case 4:
          this.rgba();
          break;
        default:
          throw new Error(`Conversion failed due to unsupported number of channels: ${this.channels}`);
      }
      return this;
    }
    async save(e) {
      if (BROWSER_ENV) {
        if (WEBWORKER_ENV)
          throw new Error("Unable to save an image from a Web Worker.");
        const t = e.split(".").pop().toLowerCase(), s = CONTENT_TYPE_MAP.get(t) ?? "image/png", l = await this.toBlob(s), f = URL.createObjectURL(l), d = document.createElement("a");
        d.href = f, d.download = e, d.click(), d.remove();
      } else {
        if (env$1.useFS)
          return await this.toSharp().toFile(e);
        throw new Error("Unable to save the image because filesystem is disabled in this environment.");
      }
    }
    toSharp() {
      if (BROWSER_ENV)
        throw new Error("toSharp() is only supported in server-side environments.");
      return sharp(this.data, {
        raw: {
          width: this.width,
          height: this.height,
          channels: this.channels
        }
      });
    }
  }
  async function read_audio(i, e) {
    if (typeof AudioContext > "u")
      throw Error("Unable to load audio from path/URL since `AudioContext` is not available in your environment. Instead, audio data should be passed directly to the pipeline/processor. For more information and some example code, see https://huggingface.co/docs/transformers.js/guides/node-audio-processing.");
    const t = await (await getFile(i)).arrayBuffer(), s = new AudioContext({
      sampleRate: e
    });
    typeof e > "u" && console.warn(`No sampling rate provided, using default of ${s.sampleRate}Hz.`);
    const l = await s.decodeAudioData(t);
    let f;
    if (l.numberOfChannels === 2) {
      const d = Math.sqrt(2), w = l.getChannelData(0), g = l.getChannelData(1);
      f = new Float32Array(w.length);
      for (let _ = 0; _ < l.length; ++_)
        f[_] = d * (w[_] + g[_]) / 2;
    } else
      f = l.getChannelData(0);
    return f;
  }
  function hanning(i) {
    if (i < 1)
      return new Float64Array();
    if (i === 1)
      return new Float64Array([
        1
      ]);
    const e = i - 1, t = Math.PI / e, s = new Float64Array(i);
    for (let l = 0; l < i; ++l) {
      const f = 2 * l - e;
      s[l] = 0.5 + 0.5 * Math.cos(t * f);
    }
    return s;
  }
  const HERTZ_TO_MEL_MAPPING = {
    htk: (i) => 2595 * Math.log10(1 + i / 700),
    kaldi: (i) => 1127 * Math.log(1 + i / 700),
    slaney: (i, e = 1e3, t = 15, s = 27 / Math.log(6.4)) => i >= e ? t + Math.log(i / e) * s : 3 * i / 200
  };
  function hertz_to_mel(i, e = "htk") {
    const t = HERTZ_TO_MEL_MAPPING[e];
    if (!t)
      throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
    return typeof i == "number" ? t(i) : i.map((s) => t(s));
  }
  const MEL_TO_HERTZ_MAPPING = {
    htk: (i) => 700 * (10 ** (i / 2595) - 1),
    kaldi: (i) => 700 * (Math.exp(i / 1127) - 1),
    slaney: (i, e = 1e3, t = 15, s = Math.log(6.4) / 27) => i >= t ? e * Math.exp(s * (i - t)) : 200 * i / 3
  };
  function mel_to_hertz(i, e = "htk") {
    const t = MEL_TO_HERTZ_MAPPING[e];
    if (!t)
      throw new Error('mel_scale should be one of "htk", "slaney" or "kaldi".');
    return typeof i == "number" ? t(i) : i.map((s) => t(s));
  }
  function _create_triangular_filter_bank(i, e) {
    const t = Float64Array.from({
      length: e.length - 1
    }, (d, w) => e[w + 1] - e[w]), s = Array.from({
      length: i.length
    }, () => new Array(e.length));
    for (let d = 0; d < i.length; ++d) {
      const w = s[d];
      for (let g = 0; g < e.length; ++g)
        w[g] = e[g] - i[d];
    }
    const l = e.length - 2, f = Array.from({
      length: l
    }, () => new Array(i.length));
    for (let d = 0; d < i.length; ++d) {
      const w = s[d];
      for (let g = 0; g < l; ++g) {
        const _ = -w[g] / t[g], h = w[g + 2] / t[g + 1];
        f[g][d] = Math.max(0, Math.min(_, h));
      }
    }
    return f;
  }
  function linspace(i, e, t) {
    const s = (e - i) / (t - 1);
    return Float64Array.from({
      length: t
    }, (l, f) => i + s * f);
  }
  function mel_filter_bank(i, e, t, s, l, f = null, d = "htk", w = false) {
    if (f !== null && f !== "slaney")
      throw new Error('norm must be one of null or "slaney"');
    const g = hertz_to_mel(t, d), _ = hertz_to_mel(s, d), h = linspace(g, _, e + 2);
    let r = mel_to_hertz(h, d), n;
    if (w) {
      const p = l / (i * 2);
      n = hertz_to_mel(Float64Array.from({
        length: i
      }, (M, P) => P * p), d), r = h;
    } else
      n = linspace(0, Math.floor(l / 2), i);
    const u = _create_triangular_filter_bank(n, r);
    if (f !== null && f === "slaney")
      for (let p = 0; p < e; ++p) {
        const M = u[p], P = 2 / (r[p + 2] - r[p]);
        for (let E = 0; E < i; ++E)
          M[E] *= P;
      }
    return u;
  }
  function padReflect(i, e, t) {
    const s = new i.constructor(i.length + e + t), l = i.length - 1;
    for (let f = 0; f < i.length; ++f)
      s[e + f] = i[f];
    for (let f = 1; f <= e; ++f)
      s[e - f] = i[calculateReflectOffset(f, l)];
    for (let f = 1; f <= t; ++f)
      s[l + e + f] = i[calculateReflectOffset(l - f, l)];
    return s;
  }
  function _db_conversion_helper(i, e, t, s, l) {
    if (t <= 0)
      throw new Error("reference must be greater than zero");
    if (s <= 0)
      throw new Error("min_value must be greater than zero");
    t = Math.max(s, t);
    const f = Math.log10(t);
    for (let d = 0; d < i.length; ++d)
      i[d] = e * Math.log10(Math.max(s, i[d]) - f);
    if (l !== null) {
      if (l <= 0)
        throw new Error("db_range must be greater than zero");
      const d = max(i)[0] - l;
      for (let w = 0; w < i.length; ++w)
        i[w] = Math.max(i[w], d);
    }
    return i;
  }
  function amplitude_to_db(i, e = 1, t = 1e-5, s = null) {
    return _db_conversion_helper(i, 20, e, t, s);
  }
  function power_to_db(i, e = 1, t = 1e-10, s = null) {
    return _db_conversion_helper(i, 10, e, t, s);
  }
  function spectrogram(i, e, t, s, { fft_length: l = null, power: f = 1, center: d = true, pad_mode: w = "reflect", onesided: g = true, preemphasis: _ = null, mel_filters: h = null, mel_floor: r = 1e-10, log_mel: n = null, reference: u = 1, min_value: p = 1e-10, db_range: M = null, remove_dc_offset: P = null, max_num_frames: E = null, do_pad: k = true, transpose: $ = false } = {}) {
    const A = e.length;
    if (l === null && (l = t), t > l)
      throw Error(`frame_length (${t}) may not be larger than fft_length (${l})`);
    if (A !== t)
      throw new Error(`Length of the window (${A}) must equal frame_length (${t})`);
    if (s <= 0)
      throw new Error("hop_length must be greater than zero");
    if (f === null && h !== null)
      throw new Error("You have provided `mel_filters` but `power` is `None`. Mel spectrogram computation is not yet supported for complex-valued spectrogram. Specify `power` to fix this issue.");
    if (d) {
      if (w !== "reflect")
        throw new Error(`pad_mode="${w}" not implemented yet.`);
      const U = Math.floor((l - 1) / 2) + 1;
      i = padReflect(i, U, U);
    }
    const C = Math.floor(1 + Math.floor((i.length - t) / s)), F = g ? Math.floor(l / 2) + 1 : l;
    let D = C, N = C;
    E !== null && (E > C ? k && (N = E) : N = D = E);
    const R = new FFT(l), j = new Float64Array(l), Z = new Float64Array(R.outputBufferSize), te = new Array(D);
    for (let U = 0; U < D; ++U) {
      const Q = U * s;
      for (let fe = 0; fe < t; ++fe)
        j[fe] = i[Q + fe];
      if (P) {
        let fe = 0;
        for (let pe = 0; pe < t; ++pe)
          fe += j[pe];
        const Me = fe / t;
        for (let pe = 0; pe < t; ++pe)
          j[pe] -= Me;
      }
      if (_ !== null) {
        for (let fe = t - 1; fe >= 1; --fe)
          j[fe] -= _ * j[fe - 1];
        j[0] *= 1 - _;
      }
      for (let fe = 0; fe < e.length; ++fe)
        j[fe] *= e[fe];
      R.realTransform(Z, j);
      const he = new Array(F);
      for (let fe = 0; fe < he.length; ++fe) {
        const Me = fe << 1;
        he[fe] = Z[Me] ** 2 + Z[Me + 1] ** 2;
      }
      te[U] = he;
    }
    if (f !== null && f !== 2) {
      const U = 2 / f;
      for (let Q = 0; Q < te.length; ++Q) {
        const he = te[Q];
        for (let fe = 0; fe < he.length; ++fe)
          he[fe] **= U;
      }
    }
    const J = h.length, G = new Float32Array(J * N), H = $ ? [
      N,
      J
    ] : [
      J,
      N
    ];
    for (let U = 0; U < J; ++U) {
      const Q = h[U];
      for (let he = 0; he < D; ++he) {
        const fe = te[he];
        let Me = 0;
        for (let pe = 0; pe < F; ++pe)
          Me += Q[pe] * fe[pe];
        G[$ ? he * J + U : U * D + he] = Math.max(r, Me);
      }
    }
    if (f !== null && n !== null) {
      const U = Math.min(G.length, D * J);
      switch (n) {
        case "log":
          for (let Q = 0; Q < U; ++Q)
            G[Q] = Math.log(G[Q]);
          break;
        case "log10":
          for (let Q = 0; Q < U; ++Q)
            G[Q] = Math.log10(G[Q]);
          break;
        case "dB":
          if (f === 1)
            amplitude_to_db(G, u, p, M);
          else if (f === 2)
            power_to_db(G, u, p, M);
          else
            throw new Error(`Cannot use log_mel option '${n}' with power ${f}`);
          break;
        default:
          throw new Error(`log_mel must be one of null, 'log', 'log10' or 'dB'. Got '${n}'`);
      }
    }
    return {
      data: G,
      dims: H
    };
  }
  function window_function(i, e, { periodic: t = true, frame_length: s = null, center: l = true } = {}) {
    const f = t ? i + 1 : i;
    let d;
    switch (e) {
      case "boxcar":
        d = new Float64Array(f).fill(1);
        break;
      case "hann":
      case "hann_window":
        d = hanning(f);
        break;
      case "povey":
        d = hanning(f).map((w) => Math.pow(w, 0.85));
        break;
      default:
        throw new Error(`Unknown window type ${e}.`);
    }
    if (t && (d = d.subarray(0, i)), s === null)
      return d;
    if (i > s)
      throw new Error(`Length of the window (${i}) may not be larger than frame_length (${s})`);
    return d;
  }
  function center_to_corners_format([i, e, t, s]) {
    return [
      i - t / 2,
      e - s / 2,
      i + t / 2,
      e + s / 2
    ];
  }
  function post_process_object_detection(i, e = 0.5, t = null, s = false) {
    const l = i.logits, f = i.pred_boxes, [d, w, g] = l.dims;
    if (t !== null && t.length !== d)
      throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
    let _ = [];
    for (let h = 0; h < d; ++h) {
      let r = t !== null ? t[h] : null, n = {
        boxes: [],
        classes: [],
        scores: []
      }, u = l[h], p = f[h];
      for (let M = 0; M < w; ++M) {
        let P = u[M], E = [], k;
        if (s) {
          k = P.sigmoid().data;
          for (let $ = 0; $ < k.length; ++$)
            k[$] > e && E.push($);
        } else {
          let $ = max(P.data)[1];
          if ($ === g - 1)
            continue;
          E.push($), k = softmax(P.data);
        }
        for (const $ of E) {
          let A = p[M].data;
          A = center_to_corners_format(A), r !== null && (A = A.map((C, F) => C * r[(F + 1) % 2])), n.boxes.push(A), n.classes.push($), n.scores.push(k[$]);
        }
      }
      _.push(n);
    }
    return _;
  }
  function validate_audio_inputs(i, e) {
    if (!(i instanceof Float32Array || i instanceof Float64Array))
      throw new Error(`${e} expects input to be a Float32Array or a Float64Array, but got ${i?.constructor?.name ?? typeof i} instead. If using the feature extractor directly, remember to use \`read_audio(url, sampling_rate)\` to obtain the raw audio data of the file/url.`);
  }
  function constraint_to_multiple_of(i, e, t = 0, s = null) {
    const l = i / e;
    let f = bankers_round(l) * e;
    return s !== null && f > s && (f = Math.floor(l) * e), f < t && (f = Math.ceil(l) * e), f;
  }
  function enforce_size_divisibility([i, e], t) {
    return [
      Math.max(Math.floor(i / t), 1) * t,
      Math.max(Math.floor(e / t), 1) * t
    ];
  }
  class FeatureExtractor extends Callable {
    constructor(e) {
      super(), this.config = e;
    }
  }
  class ImageFeatureExtractor extends FeatureExtractor {
    constructor(e) {
      super(e), this.image_mean = this.config.image_mean ?? this.config.mean, this.image_std = this.config.image_std ?? this.config.std, this.resample = this.config.resample ?? 2, this.do_rescale = this.config.do_rescale ?? true, this.rescale_factor = this.config.rescale_factor ?? 1 / 255, this.do_normalize = this.config.do_normalize, this.do_resize = this.config.do_resize, this.do_thumbnail = this.config.do_thumbnail, this.size = this.config.size, this.size_divisibility = this.config.size_divisibility ?? this.config.size_divisor, this.do_center_crop = this.config.do_center_crop, this.crop_size = this.config.crop_size, this.do_convert_rgb = this.config.do_convert_rgb ?? true, this.do_crop_margin = this.config.do_crop_margin, this.pad_size = this.config.pad_size, this.do_pad = this.config.do_pad, this.do_pad && !this.pad_size && this.size && this.size.width !== void 0 && this.size.height !== void 0 && (this.pad_size = this.size), this.do_flip_channel_order = this.config.do_flip_channel_order ?? false;
    }
    async thumbnail(e, t, s = 2) {
      const l = e.height, f = e.width, d = t.height, w = t.width;
      let g = Math.min(l, d), _ = Math.min(f, w);
      return g === l && _ === f ? e : (l > f ? _ = Math.floor(f * g / l) : f > l && (g = Math.floor(l * _ / f)), await e.resize(_, g, {
        resample: s
      }));
    }
    async crop_margin(e, t = 200) {
      const s = e.clone().grayscale(), l = min(s.data)[0], d = max(s.data)[0] - l;
      if (d === 0)
        return e;
      const w = t / 255;
      let g = s.width, _ = s.height, h = 0, r = 0;
      for (let n = 0; n < s.height; ++n) {
        const u = n * s.width;
        for (let p = 0; p < s.width; ++p)
          (s.data[u + p] - l) / d < w && (g = Math.min(g, p), _ = Math.min(_, n), h = Math.max(h, p), r = Math.max(r, n));
      }
      return e = await e.crop([
        g,
        _,
        h,
        r
      ]), e;
    }
    pad_image(e, t, s, { mode: l = "constant", center: f = false, constant_values: d = 0 } = {}) {
      const [w, g, _] = t;
      let h, r;
      if (typeof s == "number" ? (h = s, r = s) : (h = s.width, r = s.height), h !== g || r !== w) {
        const n = new Float32Array(h * r * _);
        if (Array.isArray(d))
          for (let M = 0; M < n.length; ++M)
            n[M] = d[M % _];
        else
          d !== 0 && n.fill(d);
        const [u, p] = f ? [
          Math.floor((h - g) / 2),
          Math.floor((r - w) / 2)
        ] : [
          0,
          0
        ];
        for (let M = 0; M < w; ++M) {
          const P = (M + p) * h, E = M * g;
          for (let k = 0; k < g; ++k) {
            const $ = (P + k + u) * _, A = (E + k) * _;
            for (let C = 0; C < _; ++C)
              n[$ + C] = e[A + C];
          }
        }
        if (l === "symmetric") {
          if (f)
            throw new Error("`center` padding is not supported when `mode` is set to `symmetric`.");
          const M = w - 1, P = g - 1;
          for (let E = 0; E < r; ++E) {
            const k = E * h, $ = calculateReflectOffset(E, M) * g;
            for (let A = 0; A < h; ++A) {
              if (E < w && A < g)
                continue;
              const C = (k + A) * _, F = ($ + calculateReflectOffset(A, P)) * _;
              for (let D = 0; D < _; ++D)
                n[C + D] = e[F + D];
            }
          }
        }
        e = n, t = [
          r,
          h,
          _
        ];
      }
      return [
        e,
        t
      ];
    }
    rescale(e) {
      for (let t = 0; t < e.length; ++t)
        e[t] = this.rescale_factor * e[t];
    }
    get_resize_output_image_size(e, t) {
      const [s, l] = e.size;
      let f, d;
      if (this.do_thumbnail) {
        const { height: w, width: g } = t;
        f = Math.min(w, g);
      } else
        Number.isInteger(t) ? (f = t, d = this.config.max_size ?? f) : t !== void 0 && (f = t.shortest_edge, d = t.longest_edge);
      if (f !== void 0 || d !== void 0) {
        const w = f === void 0 ? 1 : Math.max(f / s, f / l), g = s * w, _ = l * w, h = d === void 0 ? 1 : Math.min(d / g, d / _);
        let r = Math.floor(Number((g * h).toFixed(2))), n = Math.floor(Number((_ * h).toFixed(2)));
        return this.size_divisibility !== void 0 && ([r, n] = enforce_size_divisibility([
          r,
          n
        ], this.size_divisibility)), [
          r,
          n
        ];
      } else if (t !== void 0 && t.width !== void 0 && t.height !== void 0) {
        let w = t.width, g = t.height;
        if (this.config.keep_aspect_ratio && this.config.ensure_multiple_of) {
          let _ = g / l, h = w / s;
          Math.abs(1 - h) < Math.abs(1 - _) ? _ = h : h = _, g = constraint_to_multiple_of(_ * l, this.config.ensure_multiple_of), w = constraint_to_multiple_of(h * s, this.config.ensure_multiple_of);
        }
        return [
          w,
          g
        ];
      } else {
        if (this.size_divisibility !== void 0)
          return enforce_size_divisibility([
            s,
            l
          ], this.size_divisibility);
        throw new Error(`Could not resize image due to unsupported \`this.size\` option in config: ${JSON.stringify(t)}`);
      }
    }
    async resize(e) {
      const [t, s] = this.get_resize_output_image_size(e, this.size);
      return await e.resize(t, s, {
        resample: this.resample
      });
    }
    async preprocess(e, { do_normalize: t = null, do_pad: s = null, do_convert_rgb: l = null, do_convert_grayscale: f = null, do_flip_channel_order: d = null } = {}) {
      this.do_crop_margin && (e = await this.crop_margin(e));
      const [w, g] = e.size;
      if (l ?? this.do_convert_rgb ? e = e.rgb() : f && (e = e.grayscale()), this.do_resize && (e = await this.resize(e)), this.do_thumbnail && (e = await this.thumbnail(e, this.size, this.resample)), this.do_center_crop) {
        let u, p;
        Number.isInteger(this.crop_size) ? (u = this.crop_size, p = this.crop_size) : (u = this.crop_size.width, p = this.crop_size.height), e = await e.center_crop(u, p);
      }
      const _ = [
        e.height,
        e.width
      ];
      let h = Float32Array.from(e.data), r = [
        e.height,
        e.width,
        e.channels
      ];
      if (this.do_rescale && this.rescale(h), t ?? this.do_normalize) {
        let u = this.image_mean;
        Array.isArray(this.image_mean) || (u = new Array(e.channels).fill(u));
        let p = this.image_std;
        if (Array.isArray(this.image_std) || (p = new Array(e.channels).fill(u)), u.length !== e.channels || p.length !== e.channels)
          throw new Error(`When set to arrays, the length of \`image_mean\` (${u.length}) and \`image_std\` (${p.length}) must match the number of channels in the image (${e.channels}).`);
        for (let M = 0; M < h.length; M += e.channels)
          for (let P = 0; P < e.channels; ++P)
            h[M + P] = (h[M + P] - u[P]) / p[P];
      }
      if (s ?? this.do_pad) {
        if (this.pad_size)
          [h, r] = this.pad_image(h, [
            e.height,
            e.width,
            e.channels
          ], this.pad_size);
        else if (this.size_divisibility) {
          const [u, p] = enforce_size_divisibility([
            r[1],
            r[0]
          ], this.size_divisibility);
          [h, r] = this.pad_image(h, r, {
            width: u,
            height: p
          });
        }
      }
      if (d ?? this.do_flip_channel_order) {
        if (r[2] !== 3)
          throw new Error("Flipping channel order is only supported for RGB images.");
        for (let u = 0; u < h.length; u += 3) {
          const p = h[u];
          h[u] = h[u + 2], h[u + 2] = p;
        }
      }
      const n = new Tensor("float32", h, r).permute(2, 0, 1);
      return {
        original_size: [
          g,
          w
        ],
        reshaped_input_size: _,
        pixel_values: n
      };
    }
    async _call(e, ...t) {
      Array.isArray(e) || (e = [
        e
      ]);
      const s = await Promise.all(e.map((f) => this.preprocess(f)));
      return {
        pixel_values: stack(s.map((f) => f.pixel_values), 0),
        original_sizes: s.map((f) => f.original_size),
        reshaped_input_sizes: s.map((f) => f.reshaped_input_size)
      };
    }
  }
  class SegformerFeatureExtractor extends ImageFeatureExtractor {
    post_process_semantic_segmentation(e, t = null) {
      const s = e.logits, l = s.dims[0];
      if (t !== null && t.length !== l)
        throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
      const f = [];
      for (let d = 0; d < l; ++d) {
        const w = t !== null ? t[d] : null;
        let g = s[d];
        w !== null && (g = interpolate(g, w, "bilinear", false));
        const [_, h] = w ?? g.dims.slice(-2), r = new Tensor("int32", new Int32Array(_ * h), [
          _,
          h
        ]), n = g[0].data;
        for (let P = 1; P < g.dims[0]; ++P) {
          const E = g[P].data;
          for (let k = 0; k < E.length; ++k)
            E[k] > n[k] && (n[k] = E[k], r.data[k] = P);
        }
        const u = new Array(g.dims[0]), p = r.data;
        for (let P = 0; P < p.length; ++P) {
          const E = p[P];
          u[E] = E;
        }
        const M = u.filter((P) => P !== void 0);
        f.push({
          segmentation: r,
          labels: M
        });
      }
      return f;
    }
  }
  class DPTFeatureExtractor extends ImageFeatureExtractor {
  }
  class DPTImageProcessor extends DPTFeatureExtractor {
  }
  class BitImageProcessor extends ImageFeatureExtractor {
  }
  class GLPNFeatureExtractor extends ImageFeatureExtractor {
  }
  class CLIPFeatureExtractor extends ImageFeatureExtractor {
  }
  class ChineseCLIPFeatureExtractor extends ImageFeatureExtractor {
  }
  class SiglipImageProcessor extends ImageFeatureExtractor {
  }
  class ConvNextFeatureExtractor extends ImageFeatureExtractor {
    constructor(e) {
      super(e), this.crop_pct = this.config.crop_pct ?? 224 / 256;
    }
    async resize(e) {
      const t = this.size?.shortest_edge;
      if (t === void 0)
        throw new Error("Size dictionary must contain 'shortest_edge' key.");
      if (t < 384) {
        const s = Math.floor(t / this.crop_pct), [l, f] = this.get_resize_output_image_size(e, {
          shortest_edge: s
        });
        e = await e.resize(l, f, {
          resample: this.resample
        }), e = await e.center_crop(t, t);
      } else
        e = await e.resize(t, t, {
          resample: this.resample
        });
      return e;
    }
  }
  class ConvNextImageProcessor extends ConvNextFeatureExtractor {
  }
  class ViTFeatureExtractor extends ImageFeatureExtractor {
  }
  class ViTImageProcessor extends ImageFeatureExtractor {
  }
  class EfficientNetImageProcessor extends ImageFeatureExtractor {
    constructor(e) {
      super(e), this.include_top = this.config.include_top ?? true, this.include_top && (this.image_std = this.image_std.map((t) => t * t));
    }
  }
  class MobileViTFeatureExtractor extends ImageFeatureExtractor {
  }
  class MobileViTImageProcessor extends MobileViTFeatureExtractor {
  }
  class OwlViTFeatureExtractor extends ImageFeatureExtractor {
    post_process_object_detection(...e) {
      return post_process_object_detection(...e);
    }
  }
  class Owlv2ImageProcessor extends OwlViTFeatureExtractor {
  }
  class DeiTFeatureExtractor extends ImageFeatureExtractor {
  }
  class BeitFeatureExtractor extends ImageFeatureExtractor {
  }
  class DonutFeatureExtractor extends ImageFeatureExtractor {
    pad_image(e, t, s, l = {}) {
      const [f, d, w] = t;
      let g = this.image_mean;
      Array.isArray(this.image_mean) || (g = new Array(w).fill(g));
      let _ = this.image_std;
      Array.isArray(_) || (_ = new Array(w).fill(g));
      const h = g.map((r, n) => -r / _[n]);
      return super.pad_image(e, t, s, {
        center: true,
        constant_values: h,
        ...l
      });
    }
  }
  class NougatImageProcessor extends DonutFeatureExtractor {
  }
  class DetrFeatureExtractor extends ImageFeatureExtractor {
    async _call(e) {
      const t = await super._call(e), s = [
        t.pixel_values.dims[0],
        64,
        64
      ], l = new Tensor("int64", new BigInt64Array(s.reduce((f, d) => f * d)).fill(1n), s);
      return {
        ...t,
        pixel_mask: l
      };
    }
    post_process_object_detection(...e) {
      return post_process_object_detection(...e);
    }
    remove_low_and_no_objects(e, t, s, l) {
      let f = [], d = [], w = [];
      for (let g = 0; g < e.dims[0]; ++g) {
        let _ = e[g], h = t[g], r = max(_.data)[1];
        if (r === l)
          continue;
        let u = softmax(_.data)[r];
        u > s && (f.push(h), d.push(u), w.push(r));
      }
      return [
        f,
        d,
        w
      ];
    }
    check_segment_validity(e, t, s, l = 0.5, f = 0.8) {
      let d = [], w = 0, g = 0;
      for (let h = 0; h < e.length; ++h)
        e[h] === s && (d.push(h), ++w), t[s].data[h] >= l && ++g;
      let _ = w > 0 && g > 0;
      return _ && (_ = w / g > f), [
        _,
        d
      ];
    }
    compute_segments(e, t, s, l, f, d = null, w = null) {
      let [g, _] = w ?? e[0].dims, h = new Tensor("int32", new Int32Array(g * _), [
        g,
        _
      ]), r = [];
      if (w !== null)
        for (let M = 0; M < e.length; ++M)
          e[M] = interpolate(e[M], w, "bilinear", false);
      let n = new Int32Array(e[0].data.length), u = new Float32Array(e[0].data.length);
      for (let M = 0; M < e.length; ++M) {
        let P = t[M];
        for (let E = 0; E < e[M].data.length; ++E)
          e[M].data[E] *= P, e[M].data[E] > u[E] && (n[E] = M, u[E] = e[M].data[E]);
      }
      let p = 0;
      for (let M = 0; M < s.length; ++M) {
        let P = s[M], [E, k] = this.check_segment_validity(n, e, M, l, f);
        if (E) {
          ++p;
          for (let $ of k)
            h.data[$] = p;
          r.push({
            id: p,
            label_id: P,
            score: t[M]
          });
        }
      }
      return [
        h,
        r
      ];
    }
    post_process_panoptic_segmentation(e, t = 0.5, s = 0.5, l = 0.8, f = null, d = null) {
      f === null && (console.warn("`label_ids_to_fuse` unset. No instance will be fused."), f = /* @__PURE__ */ new Set());
      const w = e.logits, _ = e.pred_masks.sigmoid();
      let [h, r, n] = w.dims;
      if (n -= 1, d !== null && d.length !== h)
        throw Error("Make sure that you pass in as many target sizes as the batch dimension of the logits");
      let u = [];
      for (let p = 0; p < h; ++p) {
        let M = d !== null ? d[p] : null, P = w[p], E = _[p], [k, $, A] = this.remove_low_and_no_objects(P, E, t, n);
        if (A.length === 0) {
          let [D, N] = M ?? E.dims.slice(-2), R = new Tensor("int32", new Int32Array(D * N).fill(-1), [
            D,
            N
          ]);
          u.push({
            segmentation: R,
            segments_info: []
          });
          continue;
        }
        let [C, F] = this.compute_segments(k, $, A, s, l, f, M);
        u.push({
          segmentation: C,
          segments_info: F
        });
      }
      return u;
    }
    post_process_instance_segmentation() {
      throw Error("Not implemented yet");
    }
  }
  class YolosFeatureExtractor extends ImageFeatureExtractor {
    post_process_object_detection(...e) {
      return post_process_object_detection(...e);
    }
  }
  class SamImageProcessor extends ImageFeatureExtractor {
    reshape_input_points(e, t, s) {
      e = structuredClone(e);
      let l = calculateDimensions(e);
      if (l.length === 3)
        l = [
          1,
          ...l
        ], e = [
          e
        ];
      else if (l.length !== 4)
        throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
      for (let f = 0; f < e.length; ++f) {
        let d = t[f], w = s[f], g = [
          w[0] / d[0],
          w[1] / d[1]
        ];
        for (let _ = 0; _ < e[f].length; ++_)
          for (let h = 0; h < e[f][_].length; ++h)
            for (let r = 0; r < e[f][_][h].length; ++r)
              e[f][_][h][r] *= g[r];
      }
      return new Tensor("float32", Float32Array.from(e.flat(1 / 0)), l);
    }
    add_input_labels(e, t) {
      let s = calculateDimensions(e);
      if (s.length === 2)
        s = [
          1,
          ...s
        ], e = [
          e
        ];
      else if (s.length !== 3)
        throw Error("The input_points must be a 4D tensor of shape `batch_size`, `point_batch_size`, `nb_points_per_image`, `2`.");
      if (s.some((l, f) => l !== t.dims[f]))
        throw Error(`The first ${s.length} dimensions of 'input_points' and 'input_labels' must be the same.`);
      return new Tensor("int64", e.flat(1 / 0).map(BigInt), s);
    }
    async _call(e, t = null, s = null) {
      const l = await super._call(e);
      if (t && (l.input_points = this.reshape_input_points(t, l.original_sizes, l.reshaped_input_sizes)), s) {
        if (!l.input_points)
          throw Error("`input_points` must be provided if `input_labels` are provided.");
        l.input_labels = this.add_input_labels(s, l.input_points);
      }
      return l;
    }
    post_process_masks(e, t, s, { mask_threshold: l = 0, binarize: f = true, pad_size: d = null } = {}) {
      const w = [];
      d = d ?? this.pad_size;
      const g = [
        d.height,
        d.width
      ];
      for (let _ = 0; _ < t.length; ++_) {
        const h = t[_], r = s[_], n = e[_], u = [];
        for (let p = 0; p < n.dims[0]; ++p) {
          const M = n[p];
          let P = interpolate(M, g, "bilinear", false);
          if (P = P.slice(null, [
            0,
            r[0]
          ], [
            0,
            r[1]
          ]), P = interpolate(P, h, "bilinear", false), f) {
            const E = new Uint8Array(P.data.length);
            for (let k = 0; k < P.data.length; ++k)
              P.data[k] > l && (E[k] = 1);
            P = new Tensor("bool", E, P.dims);
          }
          u.push(P);
        }
        w.push(stack(u));
      }
      return w;
    }
  }
  class Swin2SRImageProcessor extends ImageFeatureExtractor {
    pad_image(e, t, s, l = {}) {
      const [f, d, w] = t;
      return super.pad_image(e, t, {
        width: d + (s - d % s) % s,
        height: f + (s - f % s) % s
      }, {
        mode: "symmetric",
        center: false,
        constant_values: -1,
        ...l
      });
    }
  }
  class VitMatteImageProcessor extends ImageFeatureExtractor {
    async _call(e, t) {
      Array.isArray(e) || (e = [
        e
      ]), Array.isArray(t) || (t = [
        t
      ]);
      const s = await Promise.all(e.map((d) => this.preprocess(d))), l = await Promise.all(t.map((d) => this.preprocess(d, {
        do_normalize: false,
        do_convert_rgb: false,
        do_convert_grayscale: true
      })));
      return {
        pixel_values: stack(s.map((d, w) => cat([
          d.pixel_values,
          l[w].pixel_values
        ], 0)), 0),
        original_sizes: s.map((d) => d.original_size),
        reshaped_input_sizes: s.map((d) => d.reshaped_input_size)
      };
    }
  }
  class WhisperFeatureExtractor extends FeatureExtractor {
    constructor(e) {
      var _a;
      super(e), (_a = this.config).mel_filters ?? (_a.mel_filters = mel_filter_bank(Math.floor(1 + this.config.n_fft / 2), this.config.feature_size, 0, 8e3, this.config.sampling_rate, "slaney", "slaney")), this.window = window_function(this.config.n_fft, "hann");
    }
    _extract_fbank_features(e) {
      const { data: t, dims: s } = spectrogram(e, this.window, this.config.n_fft, this.config.hop_length, {
        power: 2,
        mel_filters: this.config.mel_filters,
        log_mel: "log10",
        max_num_frames: this.config.nb_max_frames
      }), l = max(t)[0];
      for (let f = 0; f < t.length; ++f)
        t[f] = (Math.max(t[f], l - 8) + 4) / 4;
      return {
        data: t,
        dims: s
      };
    }
    async _call(e) {
      validate_audio_inputs(e, "WhisperFeatureExtractor");
      let t;
      e.length > this.config.n_samples ? (console.warn("Attempting to extract features for audio longer than 30 seconds. If using a pipeline to extract transcript from a long audio clip, remember to specify `chunk_length_s` and/or `stride_length_s`."), t = e.slice(0, this.config.n_samples)) : (t = new Float32Array(this.config.n_samples), t.set(e));
      const { data: s, dims: l } = this._extract_fbank_features(t);
      return {
        input_features: new Tensor("float32", s, [
          1,
          ...l
        ])
      };
    }
  }
  class Wav2Vec2FeatureExtractor extends FeatureExtractor {
    _zero_mean_unit_var_norm(e) {
      const s = e.reduce((f, d) => f + d, 0) / e.length, l = e.reduce((f, d) => f + (d - s) ** 2, 0) / e.length;
      return e.map((f) => (f - s) / Math.sqrt(l + 1e-7));
    }
    async _call(e) {
      validate_audio_inputs(e, "Wav2Vec2FeatureExtractor"), e instanceof Float64Array && (e = new Float32Array(e));
      let t = e;
      this.config.do_normalize && (t = this._zero_mean_unit_var_norm(t));
      const s = [
        1,
        t.length
      ];
      return {
        input_values: new Tensor("float32", t, s),
        attention_mask: new Tensor("int64", new BigInt64Array(t.length).fill(1n), s)
      };
    }
  }
  class SeamlessM4TFeatureExtractor extends FeatureExtractor {
    constructor(e) {
      super(e);
      const t = this.config.sampling_rate, s = mel_filter_bank(256, this.config.num_mel_bins, 20, Math.floor(t / 2), t, null, "kaldi", true);
      for (let l = 0; l < s.length; ++l)
        s[l].push(0);
      this.mel_filters = s, this.window = window_function(400, "povey", {
        periodic: false
      });
    }
    _extract_fbank_features(e, t) {
      return e = e.map((s) => s * 32768), spectrogram(e, this.window, 400, 160, {
        fft_length: 512,
        power: 2,
        center: false,
        preemphasis: 0.97,
        mel_filters: this.mel_filters,
        log_mel: "log",
        mel_floor: 1192092955078125e-22,
        remove_dc_offset: true,
        max_num_frames: t,
        transpose: true
      });
    }
    async _call(e, { padding: t = true, pad_to_multiple_of: s = 2, do_normalize_per_mel_bins: l = true, return_attention_mask: f = true } = {}) {
      validate_audio_inputs(e, "SeamlessM4TFeatureExtractor");
      let d = this._extract_fbank_features(e, this.config.max_length);
      if (l) {
        const [p, M] = d.dims;
        for (let P = 0; P < M; ++P) {
          let E = 0;
          for (let C = 0; C < p; ++C)
            E += d.data[C * M + P];
          const k = E / p;
          let $ = 0;
          for (let C = 0; C < p; ++C)
            $ += (d.data[C * M + P] - k) ** 2;
          $ /= p - 1;
          const A = Math.sqrt($ + 1e-7);
          for (let C = 0; C < p; ++C) {
            const F = C * M + P;
            d.data[F] = (d.data[F] - k) / A;
          }
        }
      }
      let w;
      if (t) {
        const [p, M] = d.dims, P = p % s;
        if (P > 0) {
          const E = new Float32Array(M * (p + P));
          E.set(d.data), E.fill(this.config.padding_value, d.data.length);
          const k = p + P;
          d = {
            data: E,
            dims: [
              k,
              M
            ]
          }, f && (w = new Tensor("int64", new BigInt64Array(k), [
            1,
            k
          ]), w.data.fill(1n, 0, p));
        }
      }
      const [g, _] = d.dims, h = this.config.stride;
      if (g % h !== 0)
        throw new Error(`The number of frames (${g}) must be a multiple of the stride (${h}).`);
      const n = new Tensor("float32", d.data, d.dims).view(1, Math.floor(g / h), _ * h), u = {
        input_features: n
      };
      if (f) {
        const p = n.dims[1], M = new Tensor("int64", new BigInt64Array(p), [
          1,
          p
        ]);
        if (w)
          for (let P = 1, E = 0; P < g; P += h, ++E)
            M.data[E] = w.data[P];
        else
          M.data.fill(1n);
        u.attention_mask = M;
      }
      return u;
    }
  }
  class ASTFeatureExtractor extends FeatureExtractor {
    constructor(e) {
      super(e);
      const t = this.config.sampling_rate, s = mel_filter_bank(256, this.config.num_mel_bins, 20, Math.floor(t / 2), t, null, "kaldi", true);
      for (let l = 0; l < s.length; ++l)
        s[l].push(0);
      this.mel_filters = s, this.window = window_function(400, "hann", {
        periodic: false
      }), this.mean = this.config.mean, this.std = this.config.std;
    }
    _extract_fbank_features(e, t) {
      return spectrogram(e, this.window, 400, 160, {
        fft_length: 512,
        power: 2,
        center: false,
        preemphasis: 0.97,
        mel_filters: this.mel_filters,
        log_mel: "log",
        mel_floor: 1192092955078125e-22,
        remove_dc_offset: true,
        max_num_frames: t,
        transpose: true
      });
    }
    async _call(e) {
      validate_audio_inputs(e, "ASTFeatureExtractor");
      const t = this._extract_fbank_features(e, this.config.max_length);
      if (this.config.do_normalize) {
        const s = this.std * 2;
        for (let l = 0; l < t.data.length; ++l)
          t.data[l] = (t.data[l] - this.mean) / s;
      }
      return {
        input_values: new Tensor("float32", t.data, [
          1,
          ...t.dims
        ])
      };
    }
  }
  class ClapFeatureExtractor extends FeatureExtractor {
    constructor(e) {
      super(e), this.mel_filters = mel_filter_bank(this.config.nb_frequency_bins, this.config.feature_size, this.config.frequency_min, this.config.frequency_max, this.config.sampling_rate, null, "htk"), this.mel_filters_slaney = mel_filter_bank(this.config.nb_frequency_bins, this.config.feature_size, this.config.frequency_min, this.config.frequency_max, this.config.sampling_rate, "slaney", "slaney"), this.window = window_function(this.config.fft_window_size, "hann");
    }
    _get_input_mel(e, t, s, l) {
      let f, d = false;
      const w = e.length - t;
      if (w > 0)
        if (s === "rand_trunc") {
          d = true;
          const g = Math.floor(Math.random() * (w + 1));
          e = e.subarray(g, g + t), f = this._extract_fbank_features(e, this.mel_filters_slaney, this.config.nb_max_samples), f.dims = [
            1,
            ...f.dims
          ];
        } else
          throw new Error(`Truncation strategy "${s}" not implemented`);
      else {
        if (w < 0) {
          let g = new Float64Array(t);
          if (g.set(e), l === "repeat")
            for (let _ = e.length; _ < t; _ += e.length)
              g.set(e.subarray(0, Math.min(e.length, t - _)), _);
          else if (l === "repeatpad")
            for (let _ = e.length; _ < -w; _ += e.length)
              g.set(e, _);
          e = g;
        }
        if (s === "fusion")
          throw new Error(`Truncation strategy "${s}" not implemented`);
        f = this._extract_fbank_features(e, this.mel_filters_slaney, this.config.nb_max_samples), f.dims = [
          1,
          ...f.dims
        ];
      }
      return {
        ...f,
        longer: d
      };
    }
    _extract_fbank_features(e, t, s = null) {
      return spectrogram(e, this.window, this.config.fft_window_size, this.config.hop_length, {
        power: 2,
        mel_filters: t,
        log_mel: "dB",
        max_num_frames: s,
        do_pad: false,
        transpose: true
      });
    }
    async _call(e, { max_length: t = null } = {}) {
      validate_audio_inputs(e, "ClapFeatureExtractor");
      const s = this._get_input_mel(e, t ?? this.config.nb_max_samples, this.config.truncation, this.config.padding);
      return {
        input_features: new Tensor("float32", s.data, [
          1,
          ...s.dims
        ])
      };
    }
  }
  class SpeechT5FeatureExtractor extends FeatureExtractor {
  }
  class Processor extends Callable {
    constructor(e) {
      super(), this.feature_extractor = e;
    }
    async _call(e, ...t) {
      return await this.feature_extractor(e, ...t);
    }
  }
  class SamProcessor extends Processor {
    async _call(...e) {
      return await this.feature_extractor(...e);
    }
    post_process_masks(...e) {
      return this.feature_extractor.post_process_masks(...e);
    }
    reshape_input_points(...e) {
      return this.feature_extractor.reshape_input_points(...e);
    }
  }
  class WhisperProcessor extends Processor {
    async _call(e) {
      return await this.feature_extractor(e);
    }
  }
  class Wav2Vec2ProcessorWithLM extends Processor {
    async _call(e) {
      return await this.feature_extractor(e);
    }
  }
  class SpeechT5Processor extends Processor {
    async _call(e) {
      return await this.feature_extractor(e);
    }
  }
  class OwlViTProcessor extends Processor {
  }
  class AutoProcessor {
    static async from_pretrained(e, { progress_callback: t = null, config: s = null, cache_dir: l = null, local_files_only: f = false, revision: d = "main" } = {}) {
      let w = s ?? await getModelJSON(e, "preprocessor_config.json", true, {
        progress_callback: t,
        config: s,
        cache_dir: l,
        local_files_only: f,
        revision: d
      }), g = w.feature_extractor_type ?? w.image_processor_type, _ = this.FEATURE_EXTRACTOR_CLASS_MAPPING[g];
      if (!_)
        if (w.size !== void 0)
          console.warn(`Feature extractor type "${g}" not found, assuming ImageFeatureExtractor due to size parameter in config.`), _ = ImageFeatureExtractor;
        else
          throw new Error(`Unknown Feature Extractor type: ${g}`);
      let h = this.PROCESSOR_CLASS_MAPPING[w.processor_class] ?? Processor, r = new _(w);
      return new h(r);
    }
  }
  __publicField(AutoProcessor, "FEATURE_EXTRACTOR_CLASS_MAPPING", {
    ImageFeatureExtractor,
    WhisperFeatureExtractor,
    ViTFeatureExtractor,
    MobileViTFeatureExtractor,
    MobileViTImageProcessor,
    OwlViTFeatureExtractor,
    Owlv2ImageProcessor,
    CLIPFeatureExtractor,
    ChineseCLIPFeatureExtractor,
    SiglipImageProcessor,
    ConvNextFeatureExtractor,
    ConvNextImageProcessor,
    SegformerFeatureExtractor,
    BitImageProcessor,
    DPTImageProcessor,
    DPTFeatureExtractor,
    GLPNFeatureExtractor,
    BeitFeatureExtractor,
    DeiTFeatureExtractor,
    DetrFeatureExtractor,
    YolosFeatureExtractor,
    DonutFeatureExtractor,
    NougatImageProcessor,
    EfficientNetImageProcessor,
    ViTImageProcessor,
    VitMatteImageProcessor,
    SamImageProcessor,
    Swin2SRImageProcessor,
    Wav2Vec2FeatureExtractor,
    SeamlessM4TFeatureExtractor,
    SpeechT5FeatureExtractor,
    ASTFeatureExtractor,
    ClapFeatureExtractor
  });
  __publicField(AutoProcessor, "PROCESSOR_CLASS_MAPPING", {
    WhisperProcessor,
    Wav2Vec2ProcessorWithLM,
    SamProcessor,
    SpeechT5Processor,
    OwlViTProcessor
  });
  async function prepareImages(i) {
    return Array.isArray(i) || (i = [
      i
    ]), await Promise.all(i.map((e) => RawImage.read(e)));
  }
  async function prepareAudios(i, e) {
    return Array.isArray(i) || (i = [
      i
    ]), await Promise.all(i.map((t) => typeof t == "string" || t instanceof URL ? read_audio(t, e) : t instanceof Float64Array ? new Float32Array(t) : t));
  }
  function get_bounding_box(i, e) {
    e && (i = i.map((d) => d | 0));
    const [t, s, l, f] = i;
    return {
      xmin: t,
      ymin: s,
      xmax: l,
      ymax: f
    };
  }
  class Pipeline extends Callable {
    constructor({ task: e, model: t, tokenizer: s = null, processor: l = null }) {
      super(), this.task = e, this.model = t, this.tokenizer = s, this.processor = l;
    }
    async dispose() {
      await this.model.dispose();
    }
  }
  class TextClassificationPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, { topk: t = 1 } = {}) {
      const s = this.tokenizer(e, {
        padding: true,
        truncation: true
      }), l = await this.model(s), f = this.model.config.problem_type === "multi_label_classification" ? (g) => g.sigmoid().data : (g) => softmax(g.data), d = this.model.config.id2label, w = [];
      for (const g of l.logits) {
        const _ = f(g), r = getTopItems(_, t).map((n) => ({
          label: d[n[0]],
          score: n[1]
        }));
        t === 1 ? w.push(...r) : w.push(r);
      }
      return Array.isArray(e) || t === 1 ? w : w[0];
    }
  }
  class TokenClassificationPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, { ignore_labels: t = [
      "O"
    ] } = {}) {
      const s = Array.isArray(e), l = this.tokenizer(s ? e : [
        e
      ], {
        padding: true,
        truncation: true
      }), d = (await this.model(l)).logits, w = this.model.config.id2label, g = [];
      for (let _ = 0; _ < d.dims[0]; ++_) {
        const h = l.input_ids[_], r = d[_], n = [];
        for (let u = 0; u < r.dims[0]; ++u) {
          const p = r[u], M = max(p.data)[1], P = w ? w[M] : `LABEL_${M}`;
          if (t.includes(P))
            continue;
          const E = this.tokenizer.decode([
            h[u].item()
          ], {
            skip_special_tokens: true
          });
          if (E === "")
            continue;
          const k = softmax(p.data);
          n.push({
            entity: P,
            score: k[M],
            index: u,
            word: E,
            start: null,
            end: null
          });
        }
        g.push(n);
      }
      return s ? g : g[0];
    }
  }
  class QuestionAnsweringPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, t, { topk: s = 1 } = {}) {
      const l = this.tokenizer(e, {
        text_pair: t,
        padding: true,
        truncation: true
      }), f = await this.model(l), d = [];
      for (let w = 0; w < f.start_logits.dims[0]; ++w) {
        const g = l.input_ids[w], _ = g.indexOf(this.tokenizer.sep_token_id), h = Array.from(softmax(f.start_logits[w].data)).map((u, p) => [
          u,
          p
        ]).filter((u) => u[1] > _), r = Array.from(softmax(f.end_logits[w].data)).map((u, p) => [
          u,
          p
        ]).filter((u) => u[1] > _), n = product(h, r).filter((u) => u[0][1] <= u[1][1]).map((u) => [
          u[0][1],
          u[1][1],
          u[0][0] * u[1][0]
        ]).sort((u, p) => p[2] - u[2]);
        for (let u = 0; u < Math.min(n.length, s); ++u) {
          const [p, M, P] = n[u], E = [
            ...g
          ].slice(p, M + 1), k = this.tokenizer.decode(E, {
            skip_special_tokens: true
          });
          d.push({
            answer: k,
            score: P
          });
        }
      }
      return s === 1 ? d[0] : d;
    }
  }
  class FillMaskPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, { topk: t = 5 } = {}) {
      const s = this.tokenizer(e, {
        padding: true,
        truncation: true
      }), l = await this.model(s), f = [];
      for (let d = 0; d < s.input_ids.dims[0]; ++d) {
        const w = s.input_ids[d], g = w.indexOf(this.tokenizer.mask_token_id);
        if (g === -1)
          throw Error(`Mask token (${this.tokenizer.mask_token}) not found in text.`);
        const h = l.logits[d][g], r = getTopItems(softmax(h.data), t);
        f.push(r.map((n) => {
          const u = [
            ...w
          ];
          return u[g] = n[0], {
            score: n[1],
            token: n[0],
            token_str: this.tokenizer.model.vocab[n[0]],
            sequence: this.tokenizer.decode(u, {
              skip_special_tokens: true
            })
          };
        }));
      }
      return Array.isArray(e) ? f : f[0];
    }
  }
  class Text2TextGenerationPipeline extends Pipeline {
    constructor(e) {
      super(e);
      __publicField(this, "_key", "generated_text");
    }
    async _call(e, t = {}) {
      Array.isArray(e) || (e = [
        e
      ]), this.model.config.prefix && (e = e.map((g) => this.model.config.prefix + g));
      const s = this.model.config.task_specific_params;
      s && s[this.task] && s[this.task].prefix && (e = e.map((g) => s[this.task].prefix + g));
      const l = this.tokenizer, f = {
        padding: true,
        truncation: true
      };
      let d;
      this instanceof TranslationPipeline && "_build_translation_inputs" in l ? d = l._build_translation_inputs(e, f, t).input_ids : d = l(e, f).input_ids;
      const w = await this.model.generate(d, t);
      return l.batch_decode(w, {
        skip_special_tokens: true
      }).map((g) => ({
        [this._key]: g
      }));
    }
  }
  class SummarizationPipeline extends Text2TextGenerationPipeline {
    constructor(e) {
      super(e);
      __publicField(this, "_key", "summary_text");
    }
  }
  class TranslationPipeline extends Text2TextGenerationPipeline {
    constructor(e) {
      super(e);
      __publicField(this, "_key", "translation_text");
    }
  }
  function isChat(i) {
    return Array.isArray(i) && i.every((e) => "role" in e && "content" in e);
  }
  class TextGenerationPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, t = {}) {
      let s = false, l = false, f;
      if (typeof e == "string")
        f = e = [
          e
        ];
      else if (Array.isArray(e) && e.every((p) => typeof p == "string"))
        s = true, f = e;
      else {
        if (isChat(e))
          e = [
            e
          ];
        else if (Array.isArray(e) && e.every(isChat))
          s = true;
        else
          throw new Error("Input must be a string, an array of strings, a Chat, or an array of Chats");
        l = true, f = e.map((p) => this.tokenizer.apply_chat_template(p, {
          tokenize: false,
          add_generation_prompt: true
        }));
      }
      const d = t.add_special_tokens ?? false, w = l ? false : t.return_full_text ?? true;
      this.tokenizer.padding_side = "left";
      const { input_ids: g, attention_mask: _ } = this.tokenizer(f, {
        add_special_tokens: d,
        padding: true,
        truncation: true
      }), h = await this.model.generate(g, t, null, {
        inputs_attention_mask: _
      });
      let r = this.tokenizer.batch_decode(h, {
        skip_special_tokens: true
      }), n;
      !w && g.dims.at(-1) > 0 && (n = this.tokenizer.batch_decode(g, {
        skip_special_tokens: true
      }).map((p) => p.length));
      const u = Array.from({
        length: e.length
      }, (p) => []);
      for (let p = 0; p < r.length; ++p) {
        const M = Math.floor(p / h.length * e.length);
        n && (r[p] = r[p].slice(n[M])), u[M].push({
          generated_text: l ? [
            ...e[M],
            {
              role: "assistant",
              content: r[p]
            }
          ] : r[p]
        });
      }
      return !s && u.length === 1 ? u[0] : u;
    }
  }
  class ZeroShotClassificationPipeline extends Pipeline {
    constructor(e) {
      super(e), this.label2id = Object.fromEntries(Object.entries(this.model.config.label2id).map(([t, s]) => [
        t.toLowerCase(),
        s
      ])), this.entailment_id = this.label2id.entailment, this.entailment_id === void 0 && (console.warn("Could not find 'entailment' in label2id mapping. Using 2 as entailment_id."), this.entailment_id = 2), this.contradiction_id = this.label2id.contradiction ?? this.label2id.not_entailment, this.contradiction_id === void 0 && (console.warn("Could not find 'contradiction' in label2id mapping. Using 0 as contradiction_id."), this.contradiction_id = 0);
    }
    async _call(e, t, { hypothesis_template: s = "This example is {}.", multi_label: l = false } = {}) {
      const f = Array.isArray(e);
      f || (e = [
        e
      ]), Array.isArray(t) || (t = [
        t
      ]);
      const d = t.map((_) => s.replace("{}", _)), w = l || t.length === 1, g = [];
      for (const _ of e) {
        const h = [];
        for (const u of d) {
          const p = this.tokenizer(_, {
            text_pair: u,
            padding: true,
            truncation: true
          }), M = await this.model(p);
          w ? h.push([
            M.logits.data[this.contradiction_id],
            M.logits.data[this.entailment_id]
          ]) : h.push(M.logits.data[this.entailment_id]);
        }
        const n = (w ? h.map((u) => softmax(u)[1]) : softmax(h)).map((u, p) => [
          u,
          p
        ]).sort((u, p) => p[0] - u[0]);
        g.push({
          sequence: _,
          labels: n.map((u) => t[u[1]]),
          scores: n.map((u) => u[0])
        });
      }
      return f ? g : g[0];
    }
  }
  class FeatureExtractionPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, { pooling: t = "none", normalize: s = false, quantize: l = false, precision: f = "binary" } = {}) {
      const d = this.tokenizer(e, {
        padding: true,
        truncation: true
      }), w = await this.model(d);
      let g = w.last_hidden_state ?? w.logits ?? w.token_embeddings;
      if (t !== "none")
        if (t === "mean")
          g = mean_pooling(g, d.attention_mask);
        else if (t === "cls")
          g = g.slice(null, 0);
        else
          throw Error(`Pooling method '${t}' not supported.`);
      return s && (g = g.normalize(2, -1)), l && (g = quantize_embeddings(g, f)), g;
    }
  }
  class ImageFeatureExtractionPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, { pool: t = null } = {}) {
      const s = await prepareImages(e), { pixel_values: l } = await this.processor(s), f = await this.model({
        pixel_values: l
      });
      let d;
      if (t) {
        if (!("pooler_output" in f))
          throw Error("No pooled output was returned. Make sure the model has a 'pooler' layer when using the 'pool' option.");
        d = f.pooler_output;
      } else
        d = f.last_hidden_state ?? f.logits ?? f.image_embeds;
      return d;
    }
  }
  class AudioClassificationPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, { topk: t = null } = {}) {
      const s = !Array.isArray(e), l = this.processor.feature_extractor.config.sampling_rate, f = await prepareAudios(e, l), d = this.model.config.id2label, w = [];
      for (const g of f) {
        const _ = await this.processor(g), r = (await this.model(_)).logits[0], u = getTopItems(softmax(r.data), t).map((p) => ({
          label: d[p[0]],
          score: p[1]
        }));
        t === 1 ? w.push(...u) : w.push(u);
      }
      return !s || t === 1 ? w : w[0];
    }
  }
  class ZeroShotAudioClassificationPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, t, { hypothesis_template: s = "This is a sound of {}." } = {}) {
      const l = !Array.isArray(e);
      l && (e = [
        e
      ]);
      const f = t.map((h) => s.replace("{}", h)), d = this.tokenizer(f, {
        padding: true,
        truncation: true
      }), w = this.processor.feature_extractor.config.sampling_rate, g = await prepareAudios(e, w), _ = [];
      for (const h of g) {
        const r = await this.processor(h), n = await this.model({
          ...d,
          ...r
        }), u = softmax(n.logits_per_audio.data);
        _.push([
          ...u
        ].map((p, M) => ({
          score: p,
          label: t[M]
        })));
      }
      return l ? _[0] : _;
    }
  }
  class AutomaticSpeechRecognitionPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, t = {}) {
      switch (this.model.config.model_type) {
        case "whisper":
          return this._call_whisper(e, t);
        case "wav2vec2":
        case "wav2vec2-bert":
        case "unispeech":
        case "unispeech-sat":
        case "hubert":
          return this._call_wav2vec2(e, t);
        default:
          throw new Error(`AutomaticSpeechRecognitionPipeline does not support model type '${this.model.config.model_type}'.`);
      }
    }
    async _call_wav2vec2(e, t = {}) {
      t.language && console.warn('`language` parameter is not yet supported for `wav2vec2` models, defaulting to "English".'), t.task && console.warn('`task` parameter is not yet supported for `wav2vec2` models, defaulting to "transcribe".');
      const s = !Array.isArray(e);
      s && (e = [
        e
      ]);
      const l = this.processor.feature_extractor.config.sampling_rate, f = await prepareAudios(e, l), d = [];
      for (const w of f) {
        const g = await this.processor(w), h = (await this.model(g)).logits[0], r = [];
        for (const u of h)
          r.push(max(u.data)[1]);
        const n = this.tokenizer.decode(r);
        d.push({
          text: n
        });
      }
      return s ? d[0] : d;
    }
    async _call_whisper(e, t = {}) {
      const s = t.return_timestamps ?? false, l = t.chunk_length_s ?? 0, f = t.chunk_callback ?? null, d = t.force_full_sequences ?? false;
      let w = t.stride_length_s ?? null;
      s === "word" && (t.return_token_timestamps = true);
      const g = pop(t, "language", null), _ = pop(t, "task", null);
      if (g || _ || s) {
        if (t.forced_decoder_ids)
          throw new Error("Cannot specify `language`/`task`/`return_timestamps` and `forced_decoder_ids` at the same time.");
        const P = this.tokenizer.get_decoder_prompt_ids({
          language: g,
          task: _,
          no_timestamps: !s
        });
        P.length > 0 && (t.forced_decoder_ids = P);
      }
      const h = !Array.isArray(e);
      h && (e = [
        e
      ]);
      const r = this.processor.feature_extractor.config.chunk_length / this.model.config.max_source_positions, n = this.processor.feature_extractor.config.hop_length, u = this.processor.feature_extractor.config.sampling_rate, p = await prepareAudios(e, u), M = [];
      for (const P of p) {
        let E = [];
        if (l > 0) {
          if (w === null)
            w = l / 6;
          else if (l <= w)
            throw Error("`chunk_length_s` must be larger than `stride_length_s`.");
          const A = u * l, C = u * w, F = A - 2 * C;
          let D = 0;
          for (; D < P.length; ) {
            const N = P.subarray(D, D + A), R = await this.processor(N), j = D === 0, Z = D + F >= P.length;
            E.push({
              stride: [
                N.length,
                j ? 0 : C,
                Z ? 0 : C
              ],
              input_features: R.input_features,
              is_last: Z
            }), D += F;
          }
        } else
          E = [
            {
              stride: [
                P.length,
                0,
                0
              ],
              input_features: (await this.processor(P)).input_features,
              is_last: true
            }
          ];
        for (const A of E) {
          t.num_frames = Math.floor(A.stride[0] / n);
          const C = await this.model.generate(A.input_features, t);
          s === "word" ? (A.tokens = C.sequences[0], A.token_timestamps = C.token_timestamps.tolist()[0].map((F) => round(F, 2))) : A.tokens = C[0], A.stride = A.stride.map((F) => F / u), f !== null && f(A);
        }
        const [k, $] = this.tokenizer._decode_asr(E, {
          time_precision: r,
          return_timestamps: s,
          force_full_sequences: d
        });
        M.push({
          text: k,
          ...$
        });
      }
      return h ? M[0] : M;
    }
  }
  class ImageToTextPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, t = {}) {
      const s = Array.isArray(e), l = await prepareImages(e), { pixel_values: f } = await this.processor(l), d = [];
      for (const w of f) {
        w.dims = [
          1,
          ...w.dims
        ];
        const g = await this.model.generate(w, t), _ = this.tokenizer.batch_decode(g, {
          skip_special_tokens: true
        }).map((h) => ({
          generated_text: h.trim()
        }));
        d.push(_);
      }
      return s ? d : d[0];
    }
  }
  class ImageClassificationPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, { topk: t = 1 } = {}) {
      const s = Array.isArray(e), l = await prepareImages(e), { pixel_values: f } = await this.processor(l), d = await this.model({
        pixel_values: f
      }), w = this.model.config.id2label, g = [];
      for (const _ of d.logits) {
        const r = getTopItems(softmax(_.data), t).map((n) => ({
          label: w[n[0]],
          score: n[1]
        }));
        t === 1 ? g.push(...r) : g.push(r);
      }
      return s || t === 1 ? g : g[0];
    }
  }
  class ImageSegmentationPipeline extends Pipeline {
    constructor(e) {
      super(e), this.subtasks_mapping = {
        panoptic: "post_process_panoptic_segmentation",
        instance: "post_process_instance_segmentation",
        semantic: "post_process_semantic_segmentation"
      };
    }
    async _call(e, { threshold: t = 0.5, mask_threshold: s = 0.5, overlap_mask_area_threshold: l = 0.8, label_ids_to_fuse: f = null, target_sizes: d = null, subtask: w = null } = {}) {
      if (Array.isArray(e) && e.length !== 1)
        throw Error("Image segmentation pipeline currently only supports a batch size of 1.");
      const _ = await prepareImages(e), h = _.map((E) => [
        E.height,
        E.width
      ]), { pixel_values: r, pixel_mask: n } = await this.processor(_), u = await this.model({
        pixel_values: r,
        pixel_mask: n
      });
      let p = null;
      if (w !== null)
        p = this.subtasks_mapping[w];
      else
        for (let [E, k] of Object.entries(this.subtasks_mapping))
          if (k in this.processor.feature_extractor) {
            p = this.processor.feature_extractor[k].bind(this.processor.feature_extractor), w = E;
            break;
          }
      const M = this.model.config.id2label, P = [];
      if (w === "panoptic" || w === "instance") {
        const E = p(u, t, s, l, f, d ?? h)[0], k = E.segmentation;
        for (const $ of E.segments_info) {
          const A = new Uint8ClampedArray(k.data.length);
          for (let F = 0; F < k.data.length; ++F)
            k.data[F] === $.id && (A[F] = 255);
          const C = new RawImage(A, k.dims[1], k.dims[0], 1);
          P.push({
            score: $.score,
            label: M[$.label_id],
            mask: C
          });
        }
      } else if (w === "semantic") {
        const { segmentation: E, labels: k } = p(u, d ?? h)[0];
        for (const $ of k) {
          const A = new Uint8ClampedArray(E.data.length);
          for (let F = 0; F < E.data.length; ++F)
            E.data[F] === $ && (A[F] = 255);
          const C = new RawImage(A, E.dims[1], E.dims[0], 1);
          P.push({
            score: null,
            label: M[$],
            mask: C
          });
        }
      } else
        throw Error(`Subtask ${w} not supported.`);
      return P;
    }
  }
  class ZeroShotImageClassificationPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, t, { hypothesis_template: s = "This is a photo of {}" } = {}) {
      const l = Array.isArray(e), f = await prepareImages(e), d = t.map((n) => s.replace("{}", n)), w = this.tokenizer(d, {
        padding: this.model.config.model_type === "siglip" ? "max_length" : true,
        truncation: true
      }), { pixel_values: g } = await this.processor(f), _ = await this.model({
        ...w,
        pixel_values: g
      }), h = this.model.config.model_type === "siglip" ? (n) => n.sigmoid().data : (n) => softmax(n.data), r = [];
      for (const n of _.logits_per_image) {
        const p = [
          ...h(n)
        ].map((M, P) => ({
          score: M,
          label: t[P]
        }));
        p.sort((M, P) => P.score - M.score), r.push(p);
      }
      return l ? r : r[0];
    }
  }
  class ObjectDetectionPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, { threshold: t = 0.9, percentage: s = false } = {}) {
      const l = Array.isArray(e);
      if (l && e.length !== 1)
        throw Error("Object detection pipeline currently only supports a batch size of 1.");
      const f = await prepareImages(e), d = s ? null : f.map((u) => [
        u.height,
        u.width
      ]), { pixel_values: w, pixel_mask: g } = await this.processor(f), _ = await this.model({
        pixel_values: w,
        pixel_mask: g
      }), h = this.processor.feature_extractor.post_process_object_detection(_, t, d), r = this.model.config.id2label, n = h.map((u) => u.boxes.map((p, M) => ({
        score: u.scores[M],
        label: r[u.classes[M]],
        box: get_bounding_box(p, !s)
      })));
      return l ? n : n[0];
    }
  }
  class ZeroShotObjectDetectionPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, t, { threshold: s = 0.1, topk: l = null, percentage: f = false } = {}) {
      const d = Array.isArray(e), w = await prepareImages(e), g = this.tokenizer(t, {
        padding: true,
        truncation: true
      }), _ = await this.processor(w), h = [];
      for (let r = 0; r < w.length; ++r) {
        const n = w[r], u = f ? null : [
          [
            n.height,
            n.width
          ]
        ], p = _.pixel_values[r].unsqueeze_(0), M = await this.model({
          ...g,
          pixel_values: p
        }), P = this.processor.feature_extractor.post_process_object_detection(M, s, u, true)[0];
        let E = P.boxes.map((k, $) => ({
          score: P.scores[$],
          label: t[P.classes[$]],
          box: get_bounding_box(k, !f)
        })).sort((k, $) => $.score - k.score);
        l !== null && (E = E.slice(0, l)), h.push(E);
      }
      return d ? h : h[0];
    }
  }
  class DocumentQuestionAnsweringPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e, t, s = {}) {
      const l = (await prepareImages(e))[0], { pixel_values: f } = await this.processor(l), d = `<s_docvqa><s_question>${t}</s_question><s_answer>`, w = this.tokenizer(d, {
        add_special_tokens: false,
        padding: true,
        truncation: true
      }).input_ids, g = await this.model.generate(f, {
        ...s,
        decoder_input_ids: w,
        max_length: this.model.config.decoder.max_position_embeddings
      }), h = this.tokenizer.batch_decode(g)[0].match(/<s_answer>(.*?)<\/s_answer>/);
      let r = null;
      return h && h.length >= 2 && (r = h[1].trim()), [
        {
          answer: r
        }
      ];
    }
  }
  class TextToAudioPipeline extends Pipeline {
    constructor(e) {
      super(e);
      __publicField(this, "DEFAULT_VOCODER_ID", "Xenova/speecht5_hifigan");
      this.vocoder = e.vocoder ?? null;
    }
    async _call(e, { speaker_embeddings: t = null } = {}) {
      return this.processor ? this._call_text_to_spectrogram(e, {
        speaker_embeddings: t
      }) : this._call_text_to_waveform(e);
    }
    async _call_text_to_waveform(e) {
      const t = this.tokenizer(e, {
        padding: true,
        truncation: true
      }), { waveform: s } = await this.model(t), l = this.model.config.sampling_rate;
      return {
        audio: s.data,
        sampling_rate: l
      };
    }
    async _call_text_to_spectrogram(e, { speaker_embeddings: t }) {
      if (this.vocoder || (console.log("No vocoder specified, using default HifiGan vocoder."), this.vocoder = await AutoModel.from_pretrained(this.DEFAULT_VOCODER_ID, {
        quantized: false
      })), (typeof t == "string" || t instanceof URL) && (t = new Float32Array(await (await fetch(t)).arrayBuffer())), t instanceof Float32Array)
        t = new Tensor("float32", t, [
          1,
          t.length
        ]);
      else if (!(t instanceof Tensor))
        throw new Error("Speaker embeddings must be a `Tensor`, `Float32Array`, `string`, or `URL`.");
      const { input_ids: s } = this.tokenizer(e, {
        padding: true,
        truncation: true
      }), { waveform: l } = await this.model.generate_speech(s, t, {
        vocoder: this.vocoder
      }), f = this.processor.feature_extractor.config.sampling_rate;
      return {
        audio: l.data,
        sampling_rate: f
      };
    }
  }
  class ImageToImagePipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e) {
      const t = await prepareImages(e), s = await this.processor(t), l = await this.model(s), f = [];
      for (const d of l.reconstruction) {
        const w = d.squeeze().clamp_(0, 1).mul_(255).round_().to("uint8");
        f.push(RawImage.fromTensor(w));
      }
      return f.length > 1 ? f : f[0];
    }
  }
  class DepthEstimationPipeline extends Pipeline {
    constructor(e) {
      super(e);
    }
    async _call(e) {
      const t = await prepareImages(e), s = await this.processor(t), { predicted_depth: l } = await this.model(s), f = [];
      for (let d = 0; d < t.length; ++d) {
        const w = interpolate(l[d], t[d].size.reverse(), "bilinear", false), g = w.mul_(255 / max(w.data)[0]).to("uint8");
        f.push({
          predicted_depth: l[d],
          depth: RawImage.fromTensor(g)
        });
      }
      return f.length > 1 ? f : f[0];
    }
  }
  const SUPPORTED_TASKS = Object.freeze({
    "text-classification": {
      tokenizer: AutoTokenizer,
      pipeline: TextClassificationPipeline,
      model: AutoModelForSequenceClassification,
      default: {
        model: "Xenova/distilbert-base-uncased-finetuned-sst-2-english"
      },
      type: "text"
    },
    "token-classification": {
      tokenizer: AutoTokenizer,
      pipeline: TokenClassificationPipeline,
      model: AutoModelForTokenClassification,
      default: {
        model: "Xenova/bert-base-multilingual-cased-ner-hrl"
      },
      type: "text"
    },
    "question-answering": {
      tokenizer: AutoTokenizer,
      pipeline: QuestionAnsweringPipeline,
      model: AutoModelForQuestionAnswering,
      default: {
        model: "Xenova/distilbert-base-cased-distilled-squad"
      },
      type: "text"
    },
    "fill-mask": {
      tokenizer: AutoTokenizer,
      pipeline: FillMaskPipeline,
      model: AutoModelForMaskedLM,
      default: {
        model: "Xenova/bert-base-uncased"
      },
      type: "text"
    },
    summarization: {
      tokenizer: AutoTokenizer,
      pipeline: SummarizationPipeline,
      model: AutoModelForSeq2SeqLM,
      default: {
        model: "Xenova/distilbart-cnn-6-6"
      },
      type: "text"
    },
    translation: {
      tokenizer: AutoTokenizer,
      pipeline: TranslationPipeline,
      model: AutoModelForSeq2SeqLM,
      default: {
        model: "Xenova/t5-small"
      },
      type: "text"
    },
    "text2text-generation": {
      tokenizer: AutoTokenizer,
      pipeline: Text2TextGenerationPipeline,
      model: AutoModelForSeq2SeqLM,
      default: {
        model: "Xenova/flan-t5-small"
      },
      type: "text"
    },
    "text-generation": {
      tokenizer: AutoTokenizer,
      pipeline: TextGenerationPipeline,
      model: AutoModelForCausalLM,
      default: {
        model: "Xenova/gpt2"
      },
      type: "text"
    },
    "zero-shot-classification": {
      tokenizer: AutoTokenizer,
      pipeline: ZeroShotClassificationPipeline,
      model: AutoModelForSequenceClassification,
      default: {
        model: "Xenova/distilbert-base-uncased-mnli"
      },
      type: "text"
    },
    "audio-classification": {
      pipeline: AudioClassificationPipeline,
      model: AutoModelForAudioClassification,
      processor: AutoProcessor,
      default: {
        model: "Xenova/wav2vec2-base-superb-ks"
      },
      type: "audio"
    },
    "zero-shot-audio-classification": {
      tokenizer: AutoTokenizer,
      pipeline: ZeroShotAudioClassificationPipeline,
      model: AutoModel,
      processor: AutoProcessor,
      default: {
        model: "Xenova/clap-htsat-unfused"
      },
      type: "multimodal"
    },
    "automatic-speech-recognition": {
      tokenizer: AutoTokenizer,
      pipeline: AutomaticSpeechRecognitionPipeline,
      model: [
        AutoModelForSpeechSeq2Seq,
        AutoModelForCTC
      ],
      processor: AutoProcessor,
      default: {
        model: "Xenova/whisper-tiny.en"
      },
      type: "multimodal"
    },
    "text-to-audio": {
      tokenizer: AutoTokenizer,
      pipeline: TextToAudioPipeline,
      model: [
        AutoModelForTextToWaveform,
        AutoModelForTextToSpectrogram
      ],
      processor: [
        AutoProcessor,
        null
      ],
      default: {
        model: "Xenova/speecht5_tts"
      },
      type: "text"
    },
    "image-to-text": {
      tokenizer: AutoTokenizer,
      pipeline: ImageToTextPipeline,
      model: AutoModelForVision2Seq,
      processor: AutoProcessor,
      default: {
        model: "Xenova/vit-gpt2-image-captioning"
      },
      type: "multimodal"
    },
    "image-classification": {
      pipeline: ImageClassificationPipeline,
      model: AutoModelForImageClassification,
      processor: AutoProcessor,
      default: {
        model: "Xenova/vit-base-patch16-224"
      },
      type: "multimodal"
    },
    "image-segmentation": {
      pipeline: ImageSegmentationPipeline,
      model: [
        AutoModelForImageSegmentation,
        AutoModelForSemanticSegmentation
      ],
      processor: AutoProcessor,
      default: {
        model: "Xenova/detr-resnet-50-panoptic"
      },
      type: "multimodal"
    },
    "zero-shot-image-classification": {
      tokenizer: AutoTokenizer,
      pipeline: ZeroShotImageClassificationPipeline,
      model: AutoModel,
      processor: AutoProcessor,
      default: {
        model: "Xenova/clip-vit-base-patch32"
      },
      type: "multimodal"
    },
    "object-detection": {
      pipeline: ObjectDetectionPipeline,
      model: AutoModelForObjectDetection,
      processor: AutoProcessor,
      default: {
        model: "Xenova/detr-resnet-50"
      },
      type: "multimodal"
    },
    "zero-shot-object-detection": {
      tokenizer: AutoTokenizer,
      pipeline: ZeroShotObjectDetectionPipeline,
      model: AutoModelForZeroShotObjectDetection,
      processor: AutoProcessor,
      default: {
        model: "Xenova/owlvit-base-patch32"
      },
      type: "multimodal"
    },
    "document-question-answering": {
      tokenizer: AutoTokenizer,
      pipeline: DocumentQuestionAnsweringPipeline,
      model: AutoModelForDocumentQuestionAnswering,
      processor: AutoProcessor,
      default: {
        model: "Xenova/donut-base-finetuned-docvqa"
      },
      type: "multimodal"
    },
    "image-to-image": {
      pipeline: ImageToImagePipeline,
      model: AutoModelForImageToImage,
      processor: AutoProcessor,
      default: {
        model: "Xenova/swin2SR-classical-sr-x2-64"
      },
      type: "image"
    },
    "depth-estimation": {
      pipeline: DepthEstimationPipeline,
      model: AutoModelForDepthEstimation,
      processor: AutoProcessor,
      default: {
        model: "Xenova/dpt-large"
      },
      type: "image"
    },
    "feature-extraction": {
      tokenizer: AutoTokenizer,
      pipeline: FeatureExtractionPipeline,
      model: AutoModel,
      default: {
        model: "Xenova/all-MiniLM-L6-v2"
      },
      type: "text"
    },
    "image-feature-extraction": {
      processor: AutoProcessor,
      pipeline: ImageFeatureExtractionPipeline,
      model: [
        AutoModelForImageFeatureExtraction,
        AutoModel
      ],
      default: {
        model: "Xenova/vit-base-patch16-224-in21k"
      },
      type: "image"
    }
  }), TASK_ALIASES = Object.freeze({
    "sentiment-analysis": "text-classification",
    ner: "token-classification",
    asr: "automatic-speech-recognition",
    "text-to-speech": "text-to-audio",
    embeddings: "feature-extraction"
  });
  async function pipeline(i, e = null, { quantized: t = true, progress_callback: s = null, config: l = null, cache_dir: f = null, local_files_only: d = false, revision: w = "main", model_file_name: g = null } = {}) {
    i = TASK_ALIASES[i] ?? i;
    const _ = SUPPORTED_TASKS[i.split("_", 1)[0]];
    if (!_)
      throw Error(`Unsupported pipeline: ${i}. Must be one of [${Object.keys(SUPPORTED_TASKS)}]`);
    e || (e = _.default.model, console.log(`No model specified. Using default model: "${e}".`));
    const h = {
      quantized: t,
      progress_callback: s,
      config: l,
      cache_dir: f,
      local_files_only: d,
      revision: w,
      model_file_name: g
    }, r = /* @__PURE__ */ new Map([
      [
        "tokenizer",
        _.tokenizer
      ],
      [
        "model",
        _.model
      ],
      [
        "processor",
        _.processor
      ]
    ]), n = await loadItems(r, e, h);
    n.task = i, dispatchCallback(s, {
      status: "ready",
      task: i,
      model: e
    });
    const u = _.pipeline;
    return new u(n);
  }
  async function loadItems(i, e, t) {
    const s = /* @__PURE__ */ Object.create(null), l = [];
    for (let [f, d] of i.entries()) {
      if (!d)
        continue;
      let w;
      Array.isArray(d) ? w = new Promise(async (g, _) => {
        let h;
        for (let r of d) {
          if (r === null) {
            g(null);
            return;
          }
          try {
            g(await r.from_pretrained(e, t));
            return;
          } catch (n) {
            h = n;
          }
        }
        _(h);
      }) : w = d.from_pretrained(e, t), s[f] = w, l.push(w);
    }
    await Promise.all(l);
    for (let [f, d] of Object.entries(s))
      s[f] = await d;
    return s;
  }
  const tokensToOrigWord = {}, embsDict = {};
  class LLMWordGraphExact {
    constructor() {
      __publicField(this, "hoveredNode", null);
      __publicField(this, "selectedNode", null);
      __publicField(this, "currentGenerations", []);
      __publicField(this, "voyClient", null);
      __publicField(this, "embedder", null);
      __publicField(this, "isVoyReady", false);
      __publicField(this, "isGenerating", false);
      __publicField(this, "lastPrompt", "");
      __publicField(this, "generationStartTime", 0);
      this.initializeVoy(), this.initializeEventListeners(), this.detectNetworkIP();
    }
    initializeEventListeners() {
      select("#generateBtn").on("click", () => this.handleGenerateClick()), select("#randomBtn").on("click", () => this.loadRandomSample()), select("#testBtn").on("click", () => this.runComparisonTests()), select("#promptInput").on("input", () => this.updateButtonState()), select("#promptInput").on("keydown", (e) => {
        e.key === "Enter" && this.handleGenerateClick();
      }), this.updateButtonState(), select("#zoomIn").on("click", () => this.zoom(1.5)), select("#zoomOut").on("click", () => this.zoom(1 / 1.5)), select("#resetZoom").on("click", () => this.resetZoom()), this.initializeDraggablePanel(), window.addEventListener("resize", () => {
        this.currentGenerations.length > 0 && this.renderGraph(this.currentGenerations);
      });
    }
    initializeDraggablePanel() {
      select(".control-panel");
      const e = select(".drag-handle"), t = drag().on("start", function(s) {
        const l = this.parentElement;
        select(l).style("z-index", "1001");
      }).on("drag", function(s) {
        const l = this.parentElement, f = select(l), d = parseInt(f.style("left")) || 20, w = parseInt(f.style("top")) || 20, g = d + s.dx, _ = w + s.dy, h = l.offsetWidth, r = l.offsetHeight, n = window.innerWidth - h, u = window.innerHeight - r, p = Math.max(0, Math.min(g, n)), M = Math.max(0, Math.min(_, u));
        f.style("left", p + "px"), f.style("top", M + "px");
      }).on("end", function() {
        const s = this.parentElement;
        select(s).style("z-index", "1000");
      });
      e.call(t);
    }
    async initializeVoy() {
      try {
        console.log("\u{1F680} Initializing Voy WASM with HuggingFace embeddings..."), env$1.allowRemoteModels = false, env$1.allowLocalModels = true, env$1.useBrowserCache = true, console.log("\u{1F4E6} Loading embeddings model (Xenova/all-MiniLM-L6-v2)..."), this.embedder = await pipeline("feature-extraction", "Xenova/all-MiniLM-L6-v2", {
          quantized: true,
          revision: "main"
        });
        const { Voy: e } = await __vitePreload(() => import("./voy_search-43899c71.js").then(async (m2) => {
          await m2.__tla;
          return m2;
        }), []);
        this.voyClient = new e(), console.log("\u2705 Voy WASM and embeddings model initialized successfully"), this.isVoyReady = true;
      } catch (e) {
        console.warn("\u26A0\uFE0F Voy initialization failed, using fallback text generation:", e), this.isVoyReady = false;
      }
    }
    async generateEmbedding(e) {
      if (!this.embedder || !this.isVoyReady)
        throw new Error("Embeddings model not initialized");
      try {
        const t = await this.embedder(e, {
          pooling: "mean",
          normalize: true
        });
        return Array.from(t.data);
      } catch (t) {
        throw console.error("Failed to generate embedding:", t), t;
      }
    }
    async generateVoyEnhancedCompletions(e, t) {
      if (!this.voyClient || !this.isVoyReady)
        return console.log("\u{1F504} Voy not ready, using fallback generation"), this.simulateLLMCompletions(e, t);
      try {
        console.log("\u{1F50D} Generating completions with Voy vector search...");
        const s = [
          "will transform how we work and live through intelligent automation and enhanced productivity.",
          "can revolutionize industries by augmenting human capabilities with advanced machine learning algorithms.",
          "has the potential to reshape society through personalized experiences and data-driven insights.",
          "might accelerate scientific discovery by processing vast amounts of information more efficiently.",
          "could democratize access to powerful analytical tools for researchers and innovators worldwide.",
          "will create new opportunities while requiring careful consideration of ethical implications.",
          "can augment human creativity and problem-solving abilities across multiple domains.",
          "enables breakthrough innovations in healthcare, education, and environmental sustainability."
        ], l = await this.generateEmbedding(e), f = await Promise.all(s.map(async (g, _) => ({
          id: String(_),
          title: `${e} ${g}`,
          url: `/completion/${_}`,
          embeddings: await this.generateEmbedding(`${e} ${g}`)
        })));
        this.voyClient.index({
          embeddings: f
        });
        const w = this.voyClient.search(new Float32Array(l), t).neighbors.slice(0, t).map((g) => g.title);
        return console.log(`\u2705 Generated ${w.length} Voy-enhanced completions with vector search`), w;
      } catch (s) {
        return console.warn("\u274C Voy generation failed, falling back to standard generation:", s), this.simulateLLMCompletions(e, t);
      }
    }
    tokenize(e, t = 0) {
      let s = e.split(/\s+/);
      return s = s.filter((f) => f.length > 0), s.map((f, d) => {
        f = f.replace(/[^\w\s\'.!?]|_/g, "").replace(/\s+/g, " "), f = f.toLowerCase().trim();
        let w = f + t + d;
        return embsDict[w] = {
          word: f,
          prevWord: s[d - 1] || "",
          nextWord: s[d + 1] || "",
          idx: d
        }, tokensToOrigWord[w] = f, w;
      });
    }
    similarity(e, t) {
      const s = embsDict[e] || {}, l = embsDict[t] || {};
      let f = 0;
      return s.prevWord === l.prevWord && (f += 0.25), s.word === l.word && (f += 0.5), s.nextWord === l.nextWord && (f += 0.25), f -= Math.abs((s.idx || 0) - (l.idx || 0)) / 20, f;
    }
    createGraphDataFromGenerations(e) {
      const t = {}, s = {};
      e.forEach((d, w) => {
        let g = "";
        const _ = this.tokenize(d, w);
        _.forEach((h, r) => {
          const n = Object.keys(s), u = 0.5;
          let p = n.map((P) => [
            this.similarity(P, h),
            P
          ]).sort((P, E) => E[0] - P[0]);
          p = p.filter((P) => {
            const [E, k] = P, $ = E > u, A = s[k]?.origSentIndices.has(w);
            return $ && !A;
          });
          const M = p?.[0]?.[1] || null;
          if (M && M !== g && (h = M), s[h] || (s[h] = {
            x: 0,
            y: 0,
            vx: 0,
            vy: 0,
            rx: 0,
            ry: 0,
            count: 0,
            word: h,
            origSentences: /* @__PURE__ */ new Set(),
            origWordIndices: /* @__PURE__ */ new Set(),
            origSentIndices: /* @__PURE__ */ new Set(),
            isRoot: r === 0,
            children: [],
            parents: []
          }), s[h].count += 1, s[h].origSentences.add(d), s[h].origWordIndices.add(r), s[h].origSentIndices.add(w), r === 0 && (s[h].isRoot = true), r === _.length - 1 && (s[h].isEnd = true), r > 0) {
            t[g] = t[g] || {};
            const P = t[g][h] || /* @__PURE__ */ new Set();
            P.add(d), t[g][h] = P;
          }
          g = h;
        });
      }), this.mergeSequentialNodes(s, t);
      const l = Object.values(s), f = [];
      return Object.entries(t).forEach(([d, w]) => {
        Object.entries(w).forEach(([g, _]) => {
          const h = s[g], r = s[d];
          h && r && (r.children.includes(h) || r.children.push(h), h.parents.includes(r) || h.parents.push(r), Array.from(_).forEach((n) => {
            f.push({
              source: r,
              target: h,
              sentence: n
            });
          }));
        });
      }), {
        nodesData: l,
        linksData: f
      };
    }
    mergeSequentialNodes(e, t) {
      for (let s = 0; s < Object.keys(e).length; s++)
        for (const l in e) {
          if (!(l in t))
            continue;
          const f = Object.keys(t[l]), d = f[0], w = Object.keys(t).filter((_) => t[_] && t[_][d]);
          if (f.length === 1 && w.length === 1) {
            const _ = l + " " + d;
            tokensToOrigWord[_] = (tokensToOrigWord[l] || l) + " " + (tokensToOrigWord[d] || d), e[_] = {
              ...e[l],
              word: _
            }, e[d].isEnd && (e[_].isEnd = true), delete e[d], delete e[l], t[_] = {
              ...t[d]
            }, delete t[d], delete t[l];
            for (const h in t) {
              let r = t[h];
              l in r && (r[_] = r[l], delete r[l]);
            }
          }
        }
    }
    getExpectedX(e) {
      const t = window.innerWidth, s = 0.1, l = t * s, f = t * (1 - 2 * s), d = Math.max(30, f / 50), w = e.parents.filter((r) => this.selectedNode ? this.nodeIsInSents(r) : true);
      if (e.isRoot && !w.length)
        return l + d;
      if (!w.length || this.selectedNode && !this.nodeIsInSents(e))
        return e.x || l + d;
      const g = w.map((r) => (r.x || 0) + this.textLength(r) + d), _ = mean$1(g) || e.x || l + d, h = l + f - this.textLength(e) - d;
      return Math.min(_, h);
    }
    getExpectedY(e, t) {
      const l = (min$1(Array.from(e.origSentIndices)) || 0) / Math.max(1, this.currentGenerations.length - 1), f = t * 0.1;
      return f + l * (t - 2 * f);
    }
    renderPath(e) {
      const t = ($) => {
        const A = this.fontSize($) * 0.5, C = Array.from($.origSentences).indexOf(e.sentence) * this.fontSize($) * 0.05;
        return $.y - A + C;
      }, [s, l] = [
        t(e.source),
        t(e.target)
      ], f = ($) => {
        const A = this.textLength($), C = $.x, F = C + A, D = (C + F) / 2;
        return [
          C,
          F,
          D
        ];
      }, [d, w, g] = f(e.source), [_, h, r] = f(e.target), n = e.source?.isRoot ? d : g, u = e.target.isEnd ? h : r, p = _ - w, M = w + p * 0.5, P = Math.min(Math.abs(p) * 0.4, 80), E = [
        {
          x: n,
          y: s
        },
        {
          x: w + P * 0.3,
          y: s - 5
        },
        {
          x: M,
          y: (s + l) / 2 - 10
        },
        {
          x: _ - P * 0.3,
          y: l - 5
        },
        {
          x: u,
          y: l
        }
      ];
      return line().x(($) => $.x).y(($) => $.y).curve(cardinal.tension(0.4))(E) || "";
    }
    linkIsInSents(e) {
      const t = this.selectedNode || this.hoveredNode;
      return t ? t.origSentences.has(e.sentence) : true;
    }
    nodeIsInSents(e) {
      const t = this.selectedNode || this.hoveredNode;
      if (!t)
        return true;
      const s = Array.from(t.origSentences), l = e.origSentences;
      return s.filter((d) => l.has(d)).length > 0;
    }
    fontSize(e) {
      return Math.min(Math.max(11, e.count * 5), 30);
    }
    textLength(e) {
      return (tokensToOrigWord[e.word] || e.word).length * this.fontSize(e) * 0.6;
    }
    textHeight(e) {
      return this.fontSize(e) * 1.2;
    }
    addBoundingBoxData(e) {
      e.forEach((t) => {
        t.rx = this.textLength(t) / 2, t.ry = this.textHeight(t) / 2;
      });
    }
    renderGraph(e) {
      this.currentGenerations = e;
      const t = ordinal(Tableau10).domain(e), s = "#2d3436", l = "#636e72", { nodesData: f, linksData: d } = this.createGraphDataFromGenerations(e);
      this.addBoundingBoxData(f), console.log(`Generated ${f.length} nodes and ${d.length} links`), select("#wordCount").text(f.length), select("#linkCount").text(d.length), select("#genCount").text(e.length);
      const w = window.innerWidth, g = window.innerHeight, _ = select("#graph").html("").attr("width", w).attr("height", g).style("cursor", "grab").on("click", (E) => {
        E.target.tagName === "svg" && (this.selectedNode = null, this.hoveredNode = null, u(), P());
      }), h = _.append("g"), r = zoom().scaleExtent([
        0.2,
        5
      ]).on("zoom", (E) => {
        h.attr("transform", E.transform);
      });
      _.call(r), _.node().__zoom__ = r;
      const n = simulation(f).force("link", link(d).id((E) => E.word).strength(0.1)).force("y", y$1((E) => this.getExpectedY(E, g)).strength(0.1)).on("tick", () => P()), u = () => {
        n.stop();
        const E = this.selectedNode ? d.filter(($) => this.linkIsInSents($)) : d, k = this.selectedNode ? f.filter(($) => this.nodeIsInSents($)) : f;
        n.nodes(k).force("link", link(E).id(($) => $.word).strength(0.1)).force("y", y$1(($) => this.getExpectedY($, g)).strength(0.1)), n.alpha(1).restart();
      }, p = h.selectAll(".link").data(d).enter().append("path").attr("class", "link").attr("fill", "none"), M = h.selectAll(".node").data(f).enter().append("g").attr("class", "node").on("mouseover", (E, k) => {
        this.selectedNode || (this.hoveredNode = k, P());
      }).on("mouseout", (E, k) => {
        this.selectedNode || (this.hoveredNode = null, P());
      }).on("click", (E, k) => {
        E.stopPropagation(), this.selectedNode === k ? (this.selectedNode = null, this.hoveredNode = null) : (this.selectedNode = k, this.hoveredNode = null), u(), P();
      });
      M.append("text").text((E) => tokensToOrigWord[E.word] || E.word).attr("font-size", (E) => this.fontSize(E)).attr("fill", l).style("cursor", "pointer");
      const P = () => {
        f.forEach((E) => {
          E.x = this.getExpectedX(E);
        }), p.attr("d", (E) => this.renderPath(E)).attr("stroke", (E) => this.linkIsInSents(E) ? t(E.sentence) : l).attr("stroke-width", (E) => this.linkIsInSents(E) ? 2 : 1).attr("stroke-opacity", (E) => E.source.word === "" ? 0 : this.linkIsInSents(E) ? 0.7 : 0.2).classed("blur", (E) => this.selectedNode ? !this.linkIsInSents(E) : false), M.attr("transform", (E) => `translate(${E.x}, ${E.y})`).select("text").attr("fill", (E) => this.nodeIsInSents(E) ? s : l).style("opacity", (E) => this.selectedNode || this.hoveredNode ? this.nodeIsInSents(E) ? 1 : 0.2 : 1), M.classed("blur", (E) => this.selectedNode ? !this.nodeIsInSents(E) : false);
      };
      u(), setTimeout(() => {
        this.resetZoom(), setTimeout(() => {
          this.centerGraphView();
        }, 200);
      }, 100);
    }
    centerGraphView() {
      const e = select("#graph"), s = e.select("g").selectAll(".node"), l = e.node().__zoom__;
      if (!l || s.empty())
        return;
      const f = window.innerWidth, d = window.innerHeight, w = f / 2, g = d / 2, h = f * (1 - 2 * 0.1);
      let r = 0, n = 0, u = 0, p = 1 / 0, M = -1 / 0, P = 1 / 0, E = -1 / 0;
      if (s.each(function(R) {
        if (R.x !== void 0 && R.y !== void 0) {
          const j = R.count || 1;
          r += R.x * j, n += R.y * j, u += j, p = Math.min(p, R.x), M = Math.max(M, R.x), P = Math.min(P, R.y), E = Math.max(E, R.y);
        }
      }), u === 0)
        return;
      const k = r / u, $ = n / u, A = M - p, C = E - P;
      let F = 1;
      A > 0 && (F = Math.min(h / A, 2), F = Math.max(F, 0.2));
      const D = w - k * F, N = g - $ * F;
      e.transition().duration(750).ease(quadOut).call(l.transform, identity.translate(D, N).scale(F)), console.log(`\u{1F3AF} Center of gravity (${k.toFixed(1)}, ${$.toFixed(1)}) centered at screen (${w}, ${g}) with scale ${F.toFixed(2)}`), console.log(`\u{1F4CF} Graph dimensions: ${A.toFixed(1)}x${C.toFixed(1)} \u2192 scaled to fit ${h.toFixed(1)}px width`);
    }
    handleGenerateClick() {
      this.isGenerating || this.generateLLMOutputs();
    }
    updateButtonState() {
      const e = select("#generateBtn"), t = select("#promptInput").node().value.trim();
      if (this.isGenerating) {
        e.html("\u23F3"), e.property("disabled", true);
        return;
      }
      const s = window.gemmaGenerator;
      if (!(s && s.isReady)) {
        e.html("\u23F8"), e.property("disabled", true);
        return;
      }
      e.html("Generate"), e.property("disabled", !t);
    }
    async generateLLMOutputs() {
      const e = select("#promptInput").node().value, t = parseInt(select("#numGenerations").node().value);
      if (!e.trim()) {
        alert("Please enter a prompt");
        return;
      }
      const s = window.gemmaGenerator;
      if (!s || !s.isReady) {
        alert("Gemma AI is not ready yet. Please wait for initialization to complete.");
        return;
      }
      this.isGenerating = true, this.generationStartTime = performance.now(), this.lastPrompt = e, this.updateButtonState(), select("#timingDisplay").text("Generating...");
      try {
        console.log(`\u{1F916} Generating ${t} variations with Gemma AI...`);
        const l = await s.generateVariations(e, t, {
          maxTokens: 50,
          temperature: 0.9
        }), f = ((performance.now() - this.generationStartTime) / 1e3).toFixed(2);
        this.displayGenerations(l), this.renderGraph(l), select("#timingDisplay").text(`${f}s`), console.log(`\u26A1 Generated ${l.length} AI completions in ${f}s`);
      } catch (l) {
        console.error("\u274C Gemma generation failed:", l), alert("Generation failed: " + l.message), select("#timingDisplay").text("Failed");
      } finally {
        this.isGenerating = false, this.updateButtonState();
      }
    }
    getRealisticLLMSample() {
      return [
        "In the days when Nature in her powerful creativity conceived monstrous children every day, I would have loved to live near a young giantess, like a voluptuous cat at the feet of a queen.",
        "In the days when Nature in her powerful creativity conceived monstrous children every day, I would have loved to live beside a young giantess, like a voluptuous cat at the feet of a queen.",
        "In the days when Nature in her powerful mood conceived monstrous children every day, I would have loved to live with a young giantess, like a voluptuous cat at the feet of a queen.",
        "In the time when Nature in her powerful mood conceived monstrous children every day, I would have loved to live near a young giantess, like a voluptuous cat at the feet of a queen.",
        "In the days when Nature in her powerful fervor conceived monstrous children every day, I would have loved to live with a young giantess, like a voluptuous cat at the feet of a queen.",
        "When Nature in her powerful mood was conceiving monstrous children every day, I would have loved to live beside a young giantess, like a voluptuous cat at the feet of a queen.",
        "In the days when Nature in her powerful verve conceived monstrous children each day, I would have loved to live beside a young giantess, like a voluptuous cat at the feet of a queen."
      ];
    }
    simulateLLMCompletions(e, t) {
      const l = {
        "The future of artificial intelligence will": [
          "The future of artificial intelligence will transform how we work and live in unprecedented ways.",
          "The future of artificial intelligence will revolutionize industries through automation and intelligent systems.",
          "The future of artificial intelligence will reshape society by enhancing human capabilities and decision-making.",
          "The future of artificial intelligence will accelerate scientific discovery and innovation across all fields.",
          "The future of artificial intelligence will democratize access to powerful tools and knowledge.",
          "The future of artificial intelligence will create new opportunities while requiring careful ethical consideration.",
          "The future of artificial intelligence will augment human creativity and problem-solving abilities.",
          "The future of artificial intelligence will enable personalized experiences tailored to individual needs."
        ],
        "Climate change solutions require": [
          "Climate change solutions require immediate global cooperation and coordinated action.",
          "Climate change solutions require innovative technologies and sustainable practices.",
          "Climate change solutions require significant investment in renewable energy sources.",
          "Climate change solutions require fundamental changes in how we produce and consume.",
          "Climate change solutions require both technological innovation and behavioral shifts.",
          "Climate change solutions require unprecedented international collaboration and commitment.",
          "Climate change solutions require comprehensive policies that address all sectors of society.",
          "Climate change solutions require urgent action from governments, businesses, and individuals."
        ]
      }[e];
      if (l)
        return l.slice(0, t);
      const f = [
        "revolutionize industries through automation and intelligent decision-making systems.",
        "transform education by providing personalized learning experiences for students.",
        "reshape healthcare with predictive analytics and precision medicine approaches.",
        "enhance creative industries through powerful generative tools and AI collaboration.",
        "improve environmental sustainability via smart resource management systems.",
        "democratize knowledge by making advanced analytical tools accessible worldwide.",
        "accelerate scientific discovery through automated hypothesis generation and testing.",
        "transform transportation with autonomous vehicles and intelligent traffic systems."
      ], d = [];
      for (let w = 0; w < t; w++) {
        const g = f[w % f.length];
        d.push(`${e} ${g}`);
      }
      return d;
    }
    displayGenerations(e) {
      const t = select("#generationsSection"), s = select("#generationsList");
      select("#totalCount").text(`(${e.length})`), s.selectAll("*").remove();
      const l = s.selectAll(".generation-item").data(e).enter().append("div").attr("class", "generation-item").on("click", (f, d) => {
        const w = select(f.currentTarget).classed("selected");
        selectAll(".generation-item").classed("selected", false), w ? this.renderGraph(e) : (select(f.currentTarget).classed("selected", true), this.renderGraph([
          d
        ]));
      });
      l.append("div").attr("class", "generation-number").text((f, d) => `${d + 1}`), l.append("div").style("padding-right", "25px").text((f) => f), t.classed("open", true);
    }
    zoom(e) {
      const t = select("#graph"), s = t.node().__zoom__;
      s && t.transition().duration(300).call(s.scaleBy, e);
    }
    resetZoom() {
      const e = select("#graph"), t = e.node().__zoom__;
      t && e.transition().duration(500).call(t.transform, identity);
    }
    initializeCenteredView() {
      const e = select("#graph"), t = e.node().__zoom__;
      t && this.currentGenerations.length > 0 && e.transition().duration(1e3).call(t.transform, identity.translate(0, 0).scale(1));
    }
    loadDefaultSample() {
      const e = this.getRealisticLLMSample();
      this.displayGenerations(e), this.renderGraph(e);
    }
    loadRandomSample() {
      const e = [
        "The future of artificial intelligence will",
        "Climate change is caused by",
        "The benefits of regular exercise include",
        "Quantum computing will revolutionize",
        "Space exploration helps us",
        "The impact of social media on",
        "Renewable energy sources are",
        "Machine learning can improve"
      ], t = e[Math.floor(Math.random() * e.length)];
      select("#promptInput").node().value = t, this.updateButtonState();
    }
    async detectNetworkIP() {
      try {
        const e = new RTCPeerConnection({
          iceServers: [
            {
              urls: "stun:stun.l.google.com:19302"
            }
          ]
        });
        e.createDataChannel("");
        const t = await e.createOffer();
        await e.setLocalDescription(t);
        let s = false;
        e.onicecandidate = (l) => {
          if (l.candidate && !s) {
            const d = l.candidate.candidate.match(/(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})/);
            if (d && !d[1].startsWith("127.")) {
              const w = d[1], g = "5173";
              select("#networkAddress").text(`${w}:${g}`), s = true, e.close();
            }
          }
        }, setTimeout(() => {
          s || (e.close(), select("#networkAddress").text("localhost:5173"));
        }, 3e3);
      } catch {
        console.log("Could not detect local IP, using localhost"), select("#networkAddress").text("localhost:5173");
      }
    }
    runComparisonTests() {
      console.log("\u{1F9EA} Running comparison tests with llm-consistency-vis...");
      const e = this.getRealisticLLMSample().slice(0, 3);
      console.log("\u{1F4DD} Test input:", e), console.log(`
\u{1F524} Testing tokenization:`), e.forEach((f, d) => {
        const w = this.tokenize(f, d);
        console.log(`Generation ${d + 1}: ${w.length} tokens`), console.log("  First 5 tokens:", w.slice(0, 5).map((g) => tokensToOrigWord[g] || g));
      }), console.log(`
\u{1F4CA} Testing graph generation:`);
      const { nodesData: t, linksData: s } = this.createGraphDataFromGenerations(e);
      console.log(`Generated ${t.length} nodes, ${s.length} links`), console.log(`
\u{1F517} Testing word similarity:`);
      const l = /* @__PURE__ */ new Set();
      return t.forEach((f) => {
        const d = tokensToOrigWord[f.word] || f.word;
        l.add(d);
      }), console.log(`Unique words after similarity merging: ${l.size}`), console.log("Sample words:", Array.from(l).slice(0, 10)), console.log(`
\u{1F4CD} Testing positioning algorithm:`), this.addBoundingBoxData(t), t.forEach((f, d) => {
        if (d < 5) {
          const w = this.getExpectedX(f), g = this.getExpectedY(f, 600), _ = tokensToOrigWord[f.word] || f.word;
          console.log(`"${_}": x=${Math.round(w)}, y=${Math.round(g)}, parents=${f.parents.length}, children=${f.children.length}`);
        }
      }), {
        totalNodes: t.length,
        totalLinks: s.length,
        uniqueWords: l.size,
        sampleNode: {
          word: tokensToOrigWord[t[0]?.word] || t[0]?.word,
          x: Math.round(this.getExpectedX(t[0])),
          y: Math.round(this.getExpectedY(t[0], 600)),
          parents: t[0]?.parents.length || 0,
          children: t[0]?.children.length || 0
        }
      };
    }
  }
  document.addEventListener("DOMContentLoaded", () => {
    const i = new LLMWordGraphExact(), e = document.querySelector(".controls"), t = document.createElement("button");
    t.textContent = "Run Comparison Tests", t.style.backgroundColor = "#28a745", t.onclick = () => {
      const s = i.runComparisonTests();
      alert(`Test Results:
\u2022 Nodes: ${s.totalNodes}
\u2022 Links: ${s.totalLinks}
\u2022 Unique Words: ${s.uniqueWords}
\u2022 Sample Node: ${s.sampleNode.word} at (${s.sampleNode.x}, ${s.sampleNode.y})`);
    }, e?.appendChild(t);
  });
})();
